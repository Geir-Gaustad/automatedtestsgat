// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _020_Test_Arbeidsplan_Bytt_Ansatt
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v19_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// CheckBruseEmpLineSettingsStep32 - Use 'CheckBruseEmpLineSettingsStep32ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckBruseEmpLineSettingsStep32()
        {
            #region Variable Declarations
            DXCell uIItem04032024Cell = this.UILinjeinnstillingerBrWindow.UIGsPanelControl3Client.UIGcAvailabilityPeriodClient.UIGAvailabilityPeriodsTable.UIItem04032024Cell;
            DXCell uIItem20032024Cell = this.UILinjeinnstillingerBrWindow.UIGsPanelControl3Client.UIGcAvailabilityPeriodClient.UIGAvailabilityPeriodsTable.UIItem20032024Cell;
            #endregion

            // Verify that the 'ValueAsString' property of '04.03.2024' cell equals '2024-03-04'
            Assert.AreEqual(this.CheckBruseEmpLineSettingsStep32ExpectedValues.UIItem04032024CellValueAsString, uIItem04032024Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '20.03.2024' cell equals '2024-03-20'
            Assert.AreEqual(this.CheckBruseEmpLineSettingsStep32ExpectedValues.UIItem20032024CellValueAsString, uIItem20032024Cell.ValueAsString);
        }
        
        /// <summary>
        /// CheckCullenRolesStep_10 - Use 'CheckCullenRolesStep_10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCullenRolesStep_10()
        {
            #region Variable Declarations
            DXCell uIA8CullenDamien150022Cell = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIA8CullenDamien150022Cell;
            DXCell uIA8CullenDamien150022Cell1 = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIA8CullenDamien150022Cell1;
            DXCell uID8CullenDamien070015Cell = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UID8CullenDamien070015Cell;
            #endregion

            // Verify that the 'Text' property of '( )A - 8. Cullen, Damien (15:00 - 22:00)' cell equals '( )A - 8. Cullen, Damien (15:00 - 22:00)
            //'
            Assert.AreEqual(this.CheckCullenRolesStep_10ExpectedValues.UIA8CullenDamien150022CellText, uIA8CullenDamien150022Cell.Text);

            // Verify that the 'Text' property of '( )A - 8. Cullen, Damien (15:00 - 22:00)' cell equals '( )A - 8. Cullen, Damien (15:00 - 22:00)
            //'
            Assert.AreEqual(this.CheckCullenRolesStep_10ExpectedValues.UIA8CullenDamien150022Cell1Text, uIA8CullenDamien150022Cell1.Text);

            // Verify that the 'Text' property of '( )D - 8. Cullen, Damien (07:00 - 15:00)' cell equals '( )D - 8. Cullen, Damien (07:00 - 15:00)
            //'
            Assert.AreEqual(this.CheckCullenRolesStep_10ExpectedValues.UID8CullenDamien070015CellText, uID8CullenDamien070015Cell.Text);
        }
        
        /// <summary>
        /// CheckEmpGustavssonStep24 - Use 'CheckEmpGustavssonStep24ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpGustavssonStep24()
        {
            #region Variable Declarations
            WinMenuItem uIRows0MenuItem = this.UIItemWindow1.UIContextMenu.UIRows0MenuItem;
            #endregion

            // Verify that the 'Name' property of 'Rows: 0' menu item equals 'Rows: 0'
            Assert.AreEqual(this.CheckEmpGustavssonStep24ExpectedValues.UIRows0MenuItemName, uIRows0MenuItem.Name);
        }
        
        /// <summary>
        /// CheckEmploymentDressmannStep13 - Use 'CheckEmploymentDressmannStep13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmploymentDressmannStep13()
        {
            #region Variable Declarations
            DXCheckBox uIChkReplacementModeIsCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl5Client.UIChkReplacementModeIsCheckBox;
            DXCheckBox uIChkDoSetInactiveCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIChkDoSetInactiveCheckBox;
            DXPopupEdit uILnkDetailPopupEdit = this.UIByttansattWindow.UILnkDetailPopupEdit;
            #endregion

            // Verify that the 'Checked' property of 'chkReplacementModeIsReplace' check box equals 'True'
            Assert.AreEqual(this.CheckEmploymentDressmannStep13ExpectedValues.UIChkReplacementModeIsCheckBoxChecked, uIChkReplacementModeIsCheckBox.Checked);

            // Verify that the 'Checked' property of 'chkDoSetInactive' check box equals 'False'
            Assert.AreEqual(this.CheckEmploymentDressmannStep13ExpectedValues.UIChkDoSetInactiveCheckBoxChecked, uIChkDoSetInactiveCheckBox.Checked);

            // Verify that the 'Text' property of 'lnkDetail' PopupEdit equals '1 stk. meldinger (klikk her for detaljer)'
            Assert.AreEqual(this.CheckEmploymentDressmannStep13ExpectedValues.UILnkDetailPopupEditText, uILnkDetailPopupEdit.Text);
        }
        
        /// <summary>
        /// CheckErikssonNoRolesStep_11 - Use 'CheckErikssonNoRolesStep_11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckErikssonNoRolesStep_11()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIItemCell;
            DXCell uIItemCell1 = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIItemCell1;
            DXCell uID07001500Cell = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UID07001500Cell;
            DXCell uID07001500Cell1 = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UID07001500Cell1;
            DXCell uIItemCell2 = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIItemCell2;
            DXCell uIItemCell3 = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIItemCell3;
            DXCell uIItemCell4 = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIItemCell4;
            DXCell uIItemCell5 = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIItemCell5;
            DXCell uIN22000800Cell = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIN22000800Cell;
            DXCell uIN22000800Cell1 = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIN22000800Cell1;
            DXCell uIN22000800Cell2 = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIN22000800Cell2;
            DXCell uIItemCell6 = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIItemCell6;
            DXCell uIItemCell7 = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIItemCell7;
            DXCell uIItemCell8 = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIEmployeeFocusedManagCustom.UIItemGridControl1Custom.UIDdGridControlCustom.UIGcDragDropGridTable.UIItemCell8;
            #endregion

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIItemCellText, uIItemCell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIItemCell1Text, uIItemCell1.Text);

            // Verify that the 'Text' property of '( )D (07:00 - 15:00)' cell equals '( )D (07:00 - 15:00)
            //'
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UID07001500CellText, uID07001500Cell.Text);

            // Verify that the 'Text' property of '( )D (07:00 - 15:00)' cell equals '( )D (07:00 - 15:00)
            //'
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UID07001500Cell1Text, uID07001500Cell1.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIItemCell2Text, uIItemCell2.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIItemCell3Text, uIItemCell3.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIItemCell4Text, uIItemCell4.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIItemCell5Text, uIItemCell5.Text);

            // Verify that the 'Text' property of '( )N (22:00 - 08:00)' cell equals '( )N (22:00 - 08:00)
            //'
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIN22000800CellText, uIN22000800Cell.Text);

            // Verify that the 'Text' property of '( )N (22:00 - 08:00)' cell equals '( )N (22:00 - 08:00)
            //'
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIN22000800Cell1Text, uIN22000800Cell1.Text);

            // Verify that the 'Text' property of '( )N (22:00 - 08:00)' cell equals '( )N (22:00 - 08:00)
            //'
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIN22000800Cell2Text, uIN22000800Cell2.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIItemCell6Text, uIItemCell6.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIItemCell7Text, uIItemCell7.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckErikssonNoRolesStep_11ExpectedValues.UIItemCell8Text, uIItemCell8.Text);
        }
        
        /// <summary>
        /// CheckErkssonWeek2_1
        /// </summary>
        public void CheckErkssonWeek2_1()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIOppgavetildelingWindow.UILcMainCustom.UIRootLayoutGroup.UILciCenterLayoutControlItem.UIPcCenterClient.UILcInnerCustom.UILcgInnerLayoutGroup.UILciInnerTopLayoutControlItem.UIPcInnerTopClient.UILcMainContentCustom.UILcgMainContentLayoutGroup.UILciMainContentLayoutControlItem.UIAdvancedRoleAssignmeCustom.UIPcMainClient.UITcMainTabList.UITpMainRoleViewClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient1.UIGcDragDropGridTable.UIItemCell;
            #endregion

            // Double-Click cell
            Mouse.DoubleClick(uIItemCell, new Point(30, 7));
        }
        
        /// <summary>
        /// CheckErkssonWeek2_2
        /// </summary>
        public void CheckErkssonWeek2_2()
        {
            #region Variable Declarations
            DXCell uIItemCell1 = this.UIOppgavetildelingWindow.UILcMainCustom.UIRootLayoutGroup.UILciCenterLayoutControlItem.UIPcCenterClient.UILcInnerCustom.UILcgInnerLayoutGroup.UILciInnerTopLayoutControlItem.UIPcInnerTopClient.UILcMainContentCustom.UILcgMainContentLayoutGroup.UILciMainContentLayoutControlItem.UIAdvancedRoleAssignmeCustom.UIPcMainClient.UITcMainTabList.UITpMainRoleViewClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient1.UIGcDragDropGridTable.UIItemCell1;
            #endregion

            // Double-Click cell
            Mouse.DoubleClick(uIItemCell1, new Point(67, 7));
        }
        
        /// <summary>
        /// CheckErkssonWeek3_1
        /// </summary>
        public void CheckErkssonWeek3_1()
        {
            #region Variable Declarations
            DXCell uIItemCell2 = this.UIOppgavetildelingWindow.UILcMainCustom.UIRootLayoutGroup.UILciCenterLayoutControlItem.UIPcCenterClient.UILcInnerCustom.UILcgInnerLayoutGroup.UILciInnerTopLayoutControlItem.UIPcInnerTopClient.UILcMainContentCustom.UILcgMainContentLayoutGroup.UILciMainContentLayoutControlItem.UIAdvancedRoleAssignmeCustom.UIPcMainClient.UITcMainTabList.UITpMainRoleViewClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient1.UIGcDragDropGridTable.UIItemCell2;
            #endregion

            // Double-Click cell
            Mouse.DoubleClick(uIItemCell2, new Point(37, 9));
        }
        
        /// <summary>
        /// CheckErkssonWeek3_2
        /// </summary>
        public void CheckErkssonWeek3_2()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIOppgavetildelingWindow.UILcMainCustom.UIRootLayoutGroup.UILciCenterLayoutControlItem.UIPcCenterClient.UILcInnerCustom.UILcgInnerLayoutGroup.UILciInnerTopLayoutControlItem.UIPcInnerTopClient.UILcMainContentCustom.UILcgMainContentLayoutGroup.UILciMainContentLayoutControlItem.UIAdvancedRoleAssignmeCustom.UIPcMainClient.UITcMainTabList.UITpMainRoleViewClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient1.UIGcDragDropGridTable.UIItemCell;
            #endregion

            // Double-Click cell
            Mouse.DoubleClick(uIItemCell, new Point(45, 10));
        }
        
        /// <summary>
        /// CheckErkssonWeek3_3
        /// </summary>
        public void CheckErkssonWeek3_3()
        {
            #region Variable Declarations
            DXCell uIItemCell1 = this.UIOppgavetildelingWindow.UILcMainCustom.UIRootLayoutGroup.UILciCenterLayoutControlItem.UIPcCenterClient.UILcInnerCustom.UILcgInnerLayoutGroup.UILciInnerTopLayoutControlItem.UIPcInnerTopClient.UILcMainContentCustom.UILcgMainContentLayoutGroup.UILciMainContentLayoutControlItem.UIAdvancedRoleAssignmeCustom.UIPcMainClient.UITcMainTabList.UITpMainRoleViewClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient1.UIGcDragDropGridTable.UIItemCell1;
            #endregion

            // Double-Click cell
            Mouse.DoubleClick(uIItemCell1, new Point(94, 13));
        }
        
        /// <summary>
        /// CheckIngessonEmpLineSettingsStep32 - Use 'CheckIngessonEmpLineSettingsStep32ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckIngessonEmpLineSettingsStep32()
        {
            #region Variable Declarations
            DXCell uIItem21032024Cell = this.UILinjeinnstillingerInWindow.UIGsPanelControl3Client1.UIGcAvailabilityPeriodClient.UIGAvailabilityPeriodsTable.UIItem21032024Cell;
            DXCell uIItem14042024Cell = this.UILinjeinnstillingerInWindow.UIGsPanelControl3Client1.UIGcAvailabilityPeriodClient.UIGAvailabilityPeriodsTable.UIItem14042024Cell;
            #endregion

            // Verify that the 'Text' property of '21.03.2024' cell equals '21.03.2024'
            Assert.AreEqual(this.CheckIngessonEmpLineSettingsStep32ExpectedValues.UIItem21032024CellText, uIItem21032024Cell.Text);

            // Verify that the 'Text' property of '14.04.2024' cell equals '14.04.2024'
            Assert.AreEqual(this.CheckIngessonEmpLineSettingsStep32ExpectedValues.UIItem14042024CellText, uIItem14042024Cell.Text);
        }
        
        /// <summary>
        /// CheckLinesettingsBruseStep31 - Use 'CheckLinesettingsBruseStep31ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesettingsBruseStep31()
        {
            #region Variable Declarations
            DXCell uIItem25Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UIItem25Cell;
            DXCell uIItem15012024Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UIItem15012024Cell;
            DXCell uIItem28012024Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UIItem28012024Cell;
            DXCell uIItem50Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UIItem50Cell;
            DXCell uIItem29012024Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UIItem29012024Cell;
            DXCell uIItemCell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UIItemCell;
            #endregion

            // Verify that the 'ValueAsString' property of '25' cell equals '100'
            Assert.AreEqual(this.CheckLinesettingsBruseStep31ExpectedValues.UIItem25CellValueAsString, uIItem25Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '15.01.2024' cell equals '2024-03-04'
            Assert.AreEqual(this.CheckLinesettingsBruseStep31ExpectedValues.UIItem15012024CellValueAsString, uIItem15012024Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '28.01.2024' cell equals '2024-03-20'
            Assert.AreEqual(this.CheckLinesettingsBruseStep31ExpectedValues.UIItem28012024CellValueAsString, uIItem28012024Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '50' cell equals '40'
            Assert.AreEqual(this.CheckLinesettingsBruseStep31ExpectedValues.UIItem50CellValueAsString, uIItem50Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '29.01.2024' cell equals '2024-03-21'
            Assert.AreEqual(this.CheckLinesettingsBruseStep31ExpectedValues.UIItem29012024CellValueAsString, uIItem29012024Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals '2024-04-14'
            Assert.AreEqual(this.CheckLinesettingsBruseStep31ExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckLinesettingsDressmannStep14 - Use 'CheckLinesettingsDressmannStep14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesettingsDressmannStep14()
        {
            #region Variable Declarations
            DXDateTimePicker uIPceDateDateTimeEdit = this.UILinjeinnstillingerDrWindow.UIGsPanelControl3Client.UIERevolveToCustom.UIPceDateDateTimeEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2024-01-14'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep14ExpectedValues.UIPceDateDateTimeEditValueAsString, uIPceDateDateTimeEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckLinesettingsDressmannStep15 - Use 'CheckLinesettingsDressmannStep15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesettingsDressmannStep15()
        {
            #region Variable Declarations
            DXDateTimePicker uIPceDateDateTimeEdit = this.UILinjeinnstillingerDrWindow.UIGsPanelControl3Client.UIERevolveFromCustom.UIPceDateDateTimeEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2024-01-15'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep15ExpectedValues.UIPceDateDateTimeEditValueAsString, uIPceDateDateTimeEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckLinesettingsDressmannStep17 - Use 'CheckLinesettingsDressmannStep17ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesettingsDressmannStep17()
        {
            #region Variable Declarations
            DXCheckBox uIChkReplacementModeIsCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl5Client.UIChkReplacementModeIsCheckBox;
            DXCheckBox uIChkDoSetInactiveCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIChkDoSetInactiveCheckBox;
            DXCheckBox uIChkIncludeRoleAssignCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIChkIncludeRoleAssignCheckBox;
            DXCell uITURNUSCell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UITURNUSCell;
            DXCell uIItem25Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UIItem25Cell;
            DXCell uIHCell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UIHCell;
            DXCell uIItem15012024Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UIItem15012024Cell;
            DXCell uIItem28012024Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UIItem28012024Cell;
            DXCell uITURNUSCell1 = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UITURNUSCell;
            DXCell uIItem50Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UIItem50Cell;
            DXCell uIHCell1 = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UIHCell;
            DXCell uIItem29012024Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UIItem29012024Cell;
            DXCell uIItemCell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UIItemCell;
            #endregion

            // Verify that the 'Checked' property of 'chkReplacementModeIsReplace' check box equals 'True'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UIChkReplacementModeIsCheckBoxChecked, uIChkReplacementModeIsCheckBox.Checked);

            // Verify that the 'Checked' property of 'chkDoSetInactive' check box equals 'False'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UIChkDoSetInactiveCheckBoxChecked, uIChkDoSetInactiveCheckBox.Checked);

            // Verify that the 'Checked' property of 'chkIncludeRoleAssignments' check box equals 'True'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UIChkIncludeRoleAssignCheckBoxChecked, uIChkIncludeRoleAssignCheckBox.Checked);

            // Verify that the 'ValueAsString' property of 'TURNUS' cell equals 'TURNUS'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UITURNUSCellValueAsString, uITURNUSCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '25' cell equals '25'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UIItem25CellValueAsString, uIItem25Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'H' cell equals 'H'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UIHCellValueAsString, uIHCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '15.01.2024' cell equals '2024-01-15'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UIItem15012024CellValueAsString, uIItem15012024Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '28.01.2024' cell equals '2024-01-28'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UIItem28012024CellValueAsString, uIItem28012024Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'TURNUS' cell equals 'TURNUS'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UITURNUSCellValueAsString1, uITURNUSCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of '50' cell equals '50'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UIItem50CellValueAsString, uIItem50Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'H' cell equals 'H'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UIHCellValueAsString1, uIHCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of '29.01.2024' cell equals '2024-01-29'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UIItem29012024CellValueAsString, uIItem29012024Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckLinesettingsDressmannStep17ExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckLinesettingsDressmannStep18 - Use 'CheckLinesettingsDressmannStep18ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesettingsDressmannStep18()
        {
            #region Variable Declarations
            DXDateTimePicker uIPceDateDateTimeEdit = this.UILinjeinnstillingerDrWindow.UIGsPanelControl3Client.UIERevolveFromCustom.UIPceDateDateTimeEdit;
            DXDateTimePicker uIPceDateDateTimeEdit1 = this.UILinjeinnstillingerDrWindow.UIGsPanelControl3Client.UIERevolveToCustom.UIPceDateDateTimeEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2024-01-15'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep18ExpectedValues.UIPceDateDateTimeEditValueAsString, uIPceDateDateTimeEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2024-01-28'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep18ExpectedValues.UIPceDateDateTimeEditValueAsString1, uIPceDateDateTimeEdit1.ValueAsString);
        }
        
        /// <summary>
        /// CheckLinesettingsDressmannStep19 - Use 'CheckLinesettingsDressmannStep19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesettingsDressmannStep19()
        {
            #region Variable Declarations
            DXDateTimePicker uIPceDateDateTimeEdit = this.UILinjeinnstillingerDrWindow.UIGsPanelControl3Client.UIERevolveFromCustom.UIPceDateDateTimeEdit;
            DXDateTimePicker uIPceDateDateTimeEdit1 = this.UILinjeinnstillingerDrWindow.UIGsPanelControl3Client.UIERevolveToCustom.UIPceDateDateTimeEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2024-01-29'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep19ExpectedValues.UIPceDateDateTimeEditValueAsString, uIPceDateDateTimeEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals ''
            Assert.AreEqual(this.CheckLinesettingsDressmannStep19ExpectedValues.UIPceDateDateTimeEditValueAsString1, uIPceDateDateTimeEdit1.ValueAsString);
        }
        
        /// <summary>
        /// CheckLinesettingsDressmannStep29 - Use 'CheckLinesettingsDressmannStep29ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesettingsDressmannStep29()
        {
            #region Variable Declarations
            DXCell uIItem25Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UIItem25Cell;
            DXCell uIItem15012024Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UIItem15012024Cell;
            DXCell uIItem28012024Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UIItem28012024Cell;
            DXCell uIItem50Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UIItem50Cell;
            DXCell uIItem29012024Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UIItem29012024Cell;
            DXCell uIItemCell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UIItemCell;
            #endregion

            // Verify that the 'ValueAsString' property of '25' cell equals '50'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep29ExpectedValues.UIItem25CellValueAsString, uIItem25Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '15.01.2024' cell equals '2024-01-29'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep29ExpectedValues.UIItem15012024CellValueAsString, uIItem15012024Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '28.01.2024' cell equals ''
            Assert.AreEqual(this.CheckLinesettingsDressmannStep29ExpectedValues.UIItem28012024CellValueAsString, uIItem28012024Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '50' cell equals '75'
            Assert.AreEqual(this.CheckLinesettingsDressmannStep29ExpectedValues.UIItem50CellValueAsString, uIItem50Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '29.01.2024' cell equals ''
            Assert.AreEqual(this.CheckLinesettingsDressmannStep29ExpectedValues.UIItem29012024CellValueAsString, uIItem29012024Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckLinesettingsDressmannStep29ExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckLinesettingsGustavssonStep22 - Use 'CheckLinesettingsGustavssonStep22ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesettingsGustavssonStep22()
        {
            #region Variable Declarations
            DXCheckBox uIChkDoSetInactiveCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIChkDoSetInactiveCheckBox;
            DXCheckBox uIChkDoDeleteEffectuatCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIChkDoDeleteEffectuatCheckBox;
            DXCheckBox uIChkIncludeRoleAssignCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIChkIncludeRoleAssignCheckBox;
            #endregion

            // Verify that the 'Checked' property of 'chkDoSetInactive' check box equals 'True'
            Assert.AreEqual(this.CheckLinesettingsGustavssonStep22ExpectedValues.UIChkDoSetInactiveCheckBoxChecked, uIChkDoSetInactiveCheckBox.Checked);

            // Verify that the 'Checked' property of 'chkDoDeleteEffectuation' check box equals 'True'
            Assert.AreEqual(this.CheckLinesettingsGustavssonStep22ExpectedValues.UIChkDoDeleteEffectuatCheckBoxChecked, uIChkDoDeleteEffectuatCheckBox.Checked);

            // Verify that the 'Checked' property of 'chkIncludeRoleAssignments' check box equals 'True'
            Assert.AreEqual(this.CheckLinesettingsGustavssonStep22ExpectedValues.UIChkIncludeRoleAssignCheckBoxChecked, uIChkIncludeRoleAssignCheckBox.Checked);
        }
        
        /// <summary>
        /// CheckLinesettingsVakantStep26_27 - Use 'CheckLinesettingsVakantStep26_27ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesettingsVakantStep26_27()
        {
            #region Variable Declarations
            DXCheckBox uIChkChangeEmploymentCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UIChkChangeEmploymentCheckBox;
            DXLookUpEdit uILeNewEmploymentLookUpEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UILeNewEmploymentLookUpEdit;
            DXCheckBox uIChkChangeToVacantCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UIChkChangeToVacantCheckBox;
            DXTextEdit uIECustomVacantNameEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UIECustomVacantNameEdit;
            DXCheckBox uIChkDoDeleteEffectuatCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIChkDoDeleteEffectuatCheckBox;
            DXCell uIItem28012024Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIGridLinesTable.UIItem28012024Cell;
            DXCell uIItem29012024Cell = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIGridNewLinesTable.UIItem29012024Cell;
            #endregion

            // Verify that the 'ReadOnly' property of 'chkChangeEmployment' check box equals 'True'
            Assert.AreEqual(this.CheckLinesettingsVakantStep26_27ExpectedValues.UIChkChangeEmploymentCheckBoxReadOnly, uIChkChangeEmploymentCheckBox.ReadOnly);

            // Verify that the 'Enabled' property of 'leNewEmployment' LookUpEdit equals 'False'
            Assert.AreEqual(this.CheckLinesettingsVakantStep26_27ExpectedValues.UILeNewEmploymentLookUpEditEnabled, uILeNewEmploymentLookUpEdit.Enabled);

            // Verify that the 'ReadOnly' property of 'chkChangeToVacant' check box equals 'True'
            Assert.AreEqual(this.CheckLinesettingsVakantStep26_27ExpectedValues.UIChkChangeToVacantCheckBoxReadOnly, uIChkChangeToVacantCheckBox.ReadOnly);

            // Verify that the 'ReadOnly' property of 'eCustomVacantName' text box equals 'True'
            Assert.AreEqual(this.CheckLinesettingsVakantStep26_27ExpectedValues.UIECustomVacantNameEditReadOnly, uIECustomVacantNameEdit.ReadOnly);

            // Verify that the 'Checked' property of 'chkDoDeleteEffectuation' check box equals 'True'
            Assert.AreEqual(this.CheckLinesettingsVakantStep26_27ExpectedValues.UIChkDoDeleteEffectuatCheckBoxChecked, uIChkDoDeleteEffectuatCheckBox.Checked);

            // Verify that the 'ValueAsString' property of '28.01.2024' cell equals '2024-01-07'
            Assert.AreEqual(this.CheckLinesettingsVakantStep26_27ExpectedValues.UIItem28012024CellValueAsString, uIItem28012024Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '29.01.2024' cell equals '2024-01-08'
            Assert.AreEqual(this.CheckLinesettingsVakantStep26_27ExpectedValues.UIItem29012024CellValueAsString, uIItem29012024Cell.ValueAsString);
        }
        
        /// <summary>
        /// CheckLinesHvemVilJobbeStep23 - Use 'CheckLinesHvemVilJobbeStep23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesHvemVilJobbeStep23()
        {
            #region Variable Declarations
            DXCell uIHvemviljobbeCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIHvemviljobbeCell;
            #endregion

            // Verify that the 'Text' property of 'Hvem vil jobbe' cell equals 'Hvem vil jobbe'
            Assert.AreEqual(this.CheckLinesHvemVilJobbeStep23ExpectedValues.UIHvemviljobbeCellText, uIHvemviljobbeCell.Text);
        }
        
        /// <summary>
        /// CheckLinesStep23 - Use 'CheckLinesStep23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesStep23()
        {
            #region Variable Declarations
            DXCell uIItemCell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell12;
            DXCell uIDCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell7;
            DXCell uIDCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell8;
            DXCell uIF1Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell4;
            DXCell uIItemCell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell13;
            DXCell uINCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UINCell3;
            DXCell uINCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UINCell4;
            DXCell uINCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UINCell5;
            DXCell uINCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UINCell6;
            DXCell uIF1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell5;
            DXCell uIDCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell9;
            DXCell uIDCell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell10;
            DXCell uIItemCell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell14;
            DXCell uIItemCell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell15;
            DXCell uIF1Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell6;
            DXCell uIACell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell8;
            DXCell uIACell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell9;
            DXCell uIDCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell11;
            DXCell uIItemCell16 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell16;
            DXCell uIACell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell10;
            DXCell uIDCell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell12;
            DXCell uIDCell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell13;
            DXCell uIItemCell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell17;
            DXCell uIF1Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell7;
            #endregion

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIItemCell12ValueAsString, uIItemCell12.ValueAsString);

            // Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D) readonly'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIDCell7ValueAsString, uIDCell7.ValueAsString);

            // Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D) readonly'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIDCell8ValueAsString, uIDCell8.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1) readonly'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIF1Cell4ValueAsString, uIF1Cell4.ValueAsString);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIItemCell13Text, uIItemCell13.Text);

            // Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N)'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UINCell3ValueAsString, uINCell3.ValueAsString);

            // Verify that the 'Text' property of 'N' cell equals 'N'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UINCell4Text, uINCell4.Text);

            // Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N)'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UINCell5ValueAsString, uINCell5.ValueAsString);

            // Verify that the 'Text' property of 'N' cell equals 'N'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UINCell6Text, uINCell6.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIF1Cell5Text, uIF1Cell5.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIDCell9Text, uIDCell9.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIDCell10Text, uIDCell10.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIItemCell14Text, uIItemCell14.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIItemCell15Text, uIItemCell15.Text);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIF1Cell6ValueAsString, uIF1Cell6.ValueAsString);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIACell8Text, uIACell8.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIACell9Text, uIACell9.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIDCell11Text, uIDCell11.Text);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty)'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIItemCell16ValueAsString, uIItemCell16.ValueAsString);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIACell10Text, uIACell10.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIDCell12Text, uIDCell12.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIDCell13Text, uIDCell13.Text);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty)'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIItemCell17ValueAsString, uIItemCell17.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
            Assert.AreEqual(this.CheckLinesStep23ExpectedValues.UIF1Cell7ValueAsString, uIF1Cell7.ValueAsString);
        }
        
        /// <summary>
        /// CheckLinesStep8 - Use 'CheckLinesStep8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesStep8()
        {
            #region Variable Declarations
            DXCell uIF2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell1;
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIDCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell2;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXCell uIItemCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell7;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            DXCell uIF1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell;
            DXCell uIF2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell2;
            DXCell uIDCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell3;
            DXCell uIItemCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell9;
            DXCell uIDCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell4;
            DXCell uIF2Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell3;
            DXCell uIF1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell1;
            DXCell uIItemCell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell10;
            DXCell uINCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UINCell1;
            DXCell uIF1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell2;
            #endregion

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2) readonly'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIF2Cell1ValueAsString, uIF2Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIItemCell3ValueAsString, uIItemCell3.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIItemCell4ValueAsString, uIItemCell4.ValueAsString);

            // Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D) readonly'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIDCell2ValueAsString, uIDCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIItemCell5ValueAsString, uIItemCell5.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIItemCell6ValueAsString, uIItemCell6.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIItemCell7ValueAsString, uIItemCell7.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIItemCell8ValueAsString, uIItemCell8.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1) readonly'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIF1CellValueAsString, uIF1Cell.ValueAsString);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIF2Cell2Text, uIF2Cell2.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIDCell3Text, uIDCell3.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIItemCell9Text, uIItemCell9.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIDCell4Text, uIDCell4.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIF2Cell3Text, uIF2Cell3.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIF1Cell1Text, uIF1Cell1.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIItemCell10Text, uIItemCell10.Text);

            // Verify that the 'Text' property of 'N' cell equals 'N'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UINCell1Text, uINCell1.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckLinesStep8ExpectedValues.UIF1Cell2Text, uIF1Cell2.Text);
        }
        
        /// <summary>
        /// CheckLinesStep9 - Use 'CheckLinesStep9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesStep9()
        {
            #region Variable Declarations
            DXCell uIF2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell1;
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIF1Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell3;
            DXCell uIACell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell5;
            DXCell uIDCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell2;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXCell uIACell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell6;
            DXCell uIDCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell5;
            DXCell uIACell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell7;
            DXCell uIDCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell6;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell11;
            DXCell uIF2Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell3;
            DXCell uIItemCell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell10;
            DXCell uINCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UINCell2;
            DXCell uINCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UINCell1;
            DXCell uIF2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell4;
            DXCell uIF1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell2;
            #endregion

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIF2Cell1ValueAsString, uIF2Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIItemCell3ValueAsString, uIItemCell3.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIItemCell4ValueAsString, uIItemCell4.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIF1Cell3ValueAsString, uIF1Cell3.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A' cell equals 'PlanShift (A) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIACell5ValueAsString, uIACell5.ValueAsString);

            // Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIDCell2ValueAsString, uIDCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIItemCell5ValueAsString, uIItemCell5.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A' cell equals 'PlanShift (A) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIACell6ValueAsString, uIACell6.ValueAsString);

            // Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D)'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIDCell5ValueAsString, uIDCell5.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A' cell equals 'PlanShift (A)'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIACell7ValueAsString, uIACell7.ValueAsString);

            // Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIDCell6ValueAsString, uIDCell6.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIItemCell11ValueAsString, uIItemCell11.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIF2Cell3ValueAsString, uIF2Cell3.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIItemCell10ValueAsString, uIItemCell10.ValueAsString);

            // Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UINCell2ValueAsString, uINCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UINCell1ValueAsString, uINCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIF2Cell4ValueAsString, uIF2Cell4.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1) readonly'
            Assert.AreEqual(this.CheckLinesStep9ExpectedValues.UIF1Cell2ValueAsString, uIF1Cell2.ValueAsString);
        }
        
        /// <summary>
        /// CheckOwnerInLineSettings - Use 'CheckOwnerInLineSettingsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOwnerInLineSettings()
        {
            #region Variable Declarations
            DXTextEdit uIEOriginalOwnerCommenEdit = this.UILinjeinnstillingerBrWindow.UIGsPanelControl3Client.UIEOriginalOwnerCommenEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'eOriginalOwnerComment' text box equals 'Aller, Cecilia'
            Assert.AreEqual(this.CheckOwnerInLineSettingsExpectedValues.UIEOriginalOwnerCommenEditValueAsString, uIEOriginalOwnerCommenEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckReportBruseStep_6 - Use 'CheckReportBruseStep_6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckReportBruseStep_6()
        {
            #region Variable Declarations
            DXCell uIA7BruseNiklas1500220Cell = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIA7BruseNiklas1500220Cell;
            DXCell uIA7BruseNiklas1500220Cell1 = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIA7BruseNiklas1500220Cell1;
            DXCell uID7BruseNiklas0700150Cell = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UID7BruseNiklas0700150Cell;
            DXCell uID7BruseNiklas0700150Cell1 = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UID7BruseNiklas0700150Cell1;
            DXCell uIN7BruseNiklas2200080Cell = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIN7BruseNiklas2200080Cell;
            DXCell uIN7BruseNiklas2200080Cell1 = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIN7BruseNiklas2200080Cell1;
            DXCell uIN7BruseNiklas2200080Cell2 = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIN7BruseNiklas2200080Cell2;
            DXCell uIN7BruseNiklas2200080Cell3 = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIN7BruseNiklas2200080Cell3;
            DXCell uIA7BruseNiklas1500220Cell2 = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIA7BruseNiklas1500220Cell2;
            DXCell uIA7BruseNiklas1500220Cell3 = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIA7BruseNiklas1500220Cell3;
            DXCell uIA7BruseNiklas1500220Cell4 = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIA7BruseNiklas1500220Cell4;
            DXCell uID7BruseNiklas0700150Cell2 = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UID7BruseNiklas0700150Cell2;
            DXCell uIA7BruseNiklas1500220Cell5 = this.UIOppgavetildelingWindow.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIVhContentCustom.UIPcViewClient.UIRoleFocusedManageVieCustom.UIIgContentCustom.UIDdGridControlCustom.UIGcDragDropGridTable.UIA7BruseNiklas1500220Cell5;
            #endregion

            // Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UIA7BruseNiklas1500220CellText, uIA7BruseNiklas1500220Cell.Text);

            // Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UIA7BruseNiklas1500220Cell1Text, uIA7BruseNiklas1500220Cell1.Text);

            // Verify that the 'Text' property of '( )D - 7. Bruse, Niklas (07:00 - 15:00)' cell equals '( )D - 7. Bruse, Niklas (07:00 - 15:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UID7BruseNiklas0700150CellText, uID7BruseNiklas0700150Cell.Text);

            // Verify that the 'Text' property of '( )D - 7. Bruse, Niklas (07:00 - 15:00)' cell equals '( )D - 7. Bruse, Niklas (07:00 - 15:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UID7BruseNiklas0700150Cell1Text, uID7BruseNiklas0700150Cell1.Text);

            // Verify that the 'Text' property of '( )N - 7. Bruse, Niklas (22:00 - 08:00)' cell equals '( )N - 7. Bruse, Niklas (22:00 - 08:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UIN7BruseNiklas2200080CellText, uIN7BruseNiklas2200080Cell.Text);

            // Verify that the 'Text' property of '( )N - 7. Bruse, Niklas (22:00 - 08:00)' cell equals '( )N - 7. Bruse, Niklas (22:00 - 08:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UIN7BruseNiklas2200080Cell1Text, uIN7BruseNiklas2200080Cell1.Text);

            // Verify that the 'Text' property of '( )N - 7. Bruse, Niklas (22:00 - 08:00)' cell equals '( )N - 7. Bruse, Niklas (22:00 - 08:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UIN7BruseNiklas2200080Cell2Text, uIN7BruseNiklas2200080Cell2.Text);

            // Verify that the 'Text' property of '( )N - 7. Bruse, Niklas (22:00 - 08:00)' cell equals '( )N - 7. Bruse, Niklas (22:00 - 08:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UIN7BruseNiklas2200080Cell3Text, uIN7BruseNiklas2200080Cell3.Text);

            // Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UIA7BruseNiklas1500220Cell2Text, uIA7BruseNiklas1500220Cell2.Text);

            // Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UIA7BruseNiklas1500220Cell3Text, uIA7BruseNiklas1500220Cell3.Text);

            // Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UIA7BruseNiklas1500220Cell4Text, uIA7BruseNiklas1500220Cell4.Text);

            // Verify that the 'Text' property of '( )D - 7. Bruse, Niklas (07:00 - 15:00)' cell equals '( )D - 7. Bruse, Niklas (07:00 - 15:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UID7BruseNiklas0700150Cell2Text, uID7BruseNiklas0700150Cell2.Text);

            // Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
            //'
            Assert.AreEqual(this.CheckReportBruseStep_6ExpectedValues.UIA7BruseNiklas1500220Cell5Text, uIA7BruseNiklas1500220Cell5.Text);
        }
        
        /// <summary>
        /// CheckRowsStep4 - Use 'CheckRowsStep4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRowsStep4()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXCell uIACell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell;
            DXCell uIACell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell1;
            DXCell uIACell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell2;
            DXCell uIDCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell;
            DXCell uINCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UINCell;
            DXCell uIF2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell;
            DXCell uIACell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell3;
            DXCell uIDCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIDCell1;
            DXCell uIACell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell4;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            #endregion

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UIItemCell1ValueAsString, uIItemCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A' cell equals 'PlanShift (A) readonly'
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UIACellValueAsString, uIACell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A' cell equals 'PlanShift (A) readonly'
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UIACell1ValueAsString, uIACell1.ValueAsString);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UIACell2Text, uIACell2.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UIDCellText, uIDCell.Text);

            // Verify that the 'Text' property of 'N' cell equals 'N'
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UINCellText, uINCell.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UIF2CellText, uIF2Cell.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UIACell3Text, uIACell3.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UIDCell1Text, uIDCell1.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UIACell4Text, uIACell4.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsStep4ExpectedValues.UIItemCell2Text, uIItemCell2.Text);
        }
        
        /// <summary>
        /// CheckRowsStep4Bruse - Use 'CheckRowsStep4BruseExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRowsStep4Bruse()
        {
            #region Variable Declarations
            DXCell uIBruseNiklasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBruseNiklasCell;
            #endregion

            // Verify that the 'Text' property of 'Bruse, Niklas' cell equals 'Bruse, Niklas'
            Assert.AreEqual(this.CheckRowsStep4BruseExpectedValues.UIBruseNiklasCellText, uIBruseNiklasCell.Text);
        }
        
        /// <summary>
        /// CheckSwitchEmpOkButtonDisabled - Use 'CheckSwitchEmpOkButtonDisabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSwitchEmpOkButtonDisabled()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIByttansattWindow.UIDbFooterCustom.UIOKButton;
            #endregion

            // Verify that the 'Enabled' property of 'OK' button equals 'False'
            Assert.AreEqual(this.CheckSwitchEmpOkButtonDisabledExpectedValues.UIOKButtonEnabled, uIOKButton.Enabled);
        }
        
        /// <summary>
        /// CheckSwitchEmpRegStatusOkStep3 - Use 'CheckSwitchEmpRegStatusOkStep3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSwitchEmpRegStatusOkStep3()
        {
            #region Variable Declarations
            DXPopupEdit uILnkDetailPopupEdit = this.UIByttansattWindow.UILnkDetailPopupEdit;
            DXCheckBox uIChkDoSetInactiveCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcOriginalLineClient.UIChkDoSetInactiveCheckBox;
            DXCheckBox uIChkIncludeRoleAssignCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIChkIncludeRoleAssignCheckBox;
            #endregion

            // Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals '1 stk. meldinger (klikk her for detaljer)'
            Assert.AreEqual(this.CheckSwitchEmpRegStatusOkStep3ExpectedValues.UILnkDetailPopupEditValueAsString, uILnkDetailPopupEdit.ValueAsString);

            // Verify that the 'Checked' property of 'chkDoSetInactive' check box equals 'True'
            Assert.AreEqual(this.CheckSwitchEmpRegStatusOkStep3ExpectedValues.UIChkDoSetInactiveCheckBoxChecked, uIChkDoSetInactiveCheckBox.Checked);

            // Verify that the 'Checked' property of 'chkIncludeRoleAssignments' check box equals 'True'
            Assert.AreEqual(this.CheckSwitchEmpRegStatusOkStep3ExpectedValues.UIChkIncludeRoleAssignCheckBoxChecked, uIChkIncludeRoleAssignCheckBox.Checked);
        }
        
        /// <summary>
        /// CheckSwitchEmpRegStatusStep2 - Use 'CheckSwitchEmpRegStatusStep2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSwitchEmpRegStatusStep2()
        {
            #region Variable Declarations
            DXCell uIFradatomåoppgisCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UIFradatomåoppgisCell;
            DXCell uIKanikkebyttetilannetCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UIKanikkebyttetilannetCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Fra-dato må oppgis' cell equals 'Fra-dato må oppgis'
            Assert.AreEqual(this.CheckSwitchEmpRegStatusStep2ExpectedValues.UIFradatomåoppgisCellValueAsString, uIFradatomåoppgisCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Kan ikke bytte til annet stillingsforhold' cell equals 'Kan ikke bytte til annet stillingsforhold'
            Assert.AreEqual(this.CheckSwitchEmpRegStatusStep2ExpectedValues.UIKanikkebyttetilannetCellValueAsString, uIKanikkebyttetilannetCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckSwitchEmpRegStatusStep29 - Use 'CheckSwitchEmpRegStatusStep29ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSwitchEmpRegStatusStep29()
        {
            #region Variable Declarations
            DXCell uIFradatomåoppgisCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UIFradatomåoppgisCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Fra-dato må oppgis' cell equals 'Fra-dato må være større enn 29.01.2024'
            Assert.AreEqual(this.CheckSwitchEmpRegStatusStep29ExpectedValues.UIFradatomåoppgisCellValueAsString, uIFradatomåoppgisCell.ValueAsString);
        }
        
        /// <summary>
        /// ClickBruseCell
        /// </summary>
        public void ClickBruseCell()
        {
            #region Variable Declarations
            DXCell uICullenDamienCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UICullenDamienCell;
            #endregion

            // Right-Click 'Cullen, Damien' cell
            Mouse.Click(uICullenDamienCell, MouseButtons.Right, ModifierKeys.None, new Point(105, 9));
        }
        
        /// <summary>
        /// ClickDressmanDennisCell
        /// </summary>
        public void ClickDressmanDennisCell()
        {
            #region Variable Declarations
            DXCell uIDressmanDennisCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDressmanDennisCell;
            #endregion

            // Right-Click 'Dressman, Dennis' cell
            Mouse.Click(uIDressmanDennisCell, MouseButtons.Right, ModifierKeys.None, new Point(43, 10));
        }
        
        /// <summary>
        /// ClickGustavssonCell
        /// </summary>
        public void ClickGustavssonCell()
        {
            #region Variable Declarations
            DXCell uIGustavssonRobertCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGustavssonRobertCell;
            #endregion

            // Right-Click 'Gustavsson, Robert' cell
            Mouse.Click(uIGustavssonRobertCell, MouseButtons.Right, ModifierKeys.None, new Point(110, 8));
        }
        
        /// <summary>
        /// ClickVAKANTCell
        /// </summary>
        public void ClickVAKANTCell()
        {
            #region Variable Declarations
            DXCell uIGustavssonRobertCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGustavssonRobertCell;
            #endregion

            // Right-Click 'Gustavsson, Robert' cell
            Mouse.Click(uIGustavssonRobertCell, MouseButtons.Right, ModifierKeys.None, new Point(82, 10));
        }
        
        /// <summary>
        /// ExchangeEmpCullenEriksson - Use 'ExchangeEmpCullenErikssonParams' to pass parameters into this method.
        /// </summary>
        public void ExchangeEmpCullenEriksson()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIByttansattstillingsfMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIByttansattstillingsfMenuBaseButtonItem;
            DXLookUpEdit uILueNewEmployeeLookUpEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UILueNewEmployeeLookUpEdit;
            DXDateTimePicker uIPceDateDateTimeEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl4Client.UIEFromDateCustom.UIPceDateDateTimeEdit;
            DXCheckBox uIChkReplacementModeIsCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl5Client.UIChkReplacementModeIsCheckBox;
            DXCheckBox uIChkIncludeRoleAssignCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl1Client.UIGcRecieverClient.UIChkIncludeRoleAssignCheckBox;
            #endregion

            // Click 'Bytt ansatt/stillingsforhold på alle linjer (Aller, Cecilia)' MenuBaseButtonItem
            Mouse.Click(uIByttansattstillingsfMenuBaseButtonItem, new Point(82, 10));

            // Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'lueNewEmployee' LookUpEdit
            //ValueTypeName
            uILueNewEmployeeLookUpEdit.ValueTypeName = this.ExchangeEmpCullenErikssonParams.UILueNewEmployeeLookUpEditValueTypeName;

            // Type 'Eriksson, Mats - TURNUS/S 0 % 12.03.2018-31.12.2099' in 'lueNewEmployee' LookUpEdit
            //ValueAsString
            uILueNewEmployeeLookUpEdit.ValueAsString = this.ExchangeEmpCullenErikssonParams.UILueNewEmployeeLookUpEditValueAsString;

            // Type '2024-01-31 [SelectionStart]0' in 'pceDate' DateTimeEdit
            //ValueAsString
            uIPceDateDateTimeEdit.ValueAsString = this.ExchangeEmpCullenErikssonParams.UIPceDateDateTimeEditValueAsString;

            // Select 'chkReplacementModeIsReplace' check box
            uIChkReplacementModeIsCheckBox.Checked = this.ExchangeEmpCullenErikssonParams.UIChkReplacementModeIsCheckBoxChecked;

            // Clear 'chkIncludeRoleAssignments' check box
            uIChkIncludeRoleAssignCheckBox.Checked = this.ExchangeEmpCullenErikssonParams.UIChkIncludeRoleAssignCheckBoxChecked;
        }
        
        /// <summary>
        /// ExchangeEmploymentBruseStep31 - Use 'ExchangeEmploymentBruseStep31Params' to pass parameters into this method.
        /// </summary>
        public void ExchangeEmploymentBruseStep31()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIByttansattstillingsfMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIByttansattstillingsfMenuBaseButtonItem;
            DXLookUpEdit uILueNewEmployeeLookUpEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UILueNewEmployeeLookUpEdit;
            DXDateTimePicker uIPceDateDateTimeEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl4Client.UIEFromDateCustom.UIPceDateDateTimeEdit;
            #endregion

            // Click 'Bytt ansatt/stillingsforhold på alle linjer (Aller, Cecilia)' MenuBaseButtonItem
            Mouse.Click(uIByttansattstillingsfMenuBaseButtonItem, new Point(132, 10));

            // Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'lueNewEmployee' LookUpEdit
            //ValueTypeName
            uILueNewEmployeeLookUpEdit.ValueTypeName = this.ExchangeEmploymentBruseStep31Params.UILueNewEmployeeLookUpEditValueTypeName;

            // Type 'Ingesson, Charlotte - TURNUS/A 40 % 11.06.2018-31.12.2099' in 'lueNewEmployee' LookUpEdit
            //ValueAsString
            uILueNewEmployeeLookUpEdit.ValueAsString = this.ExchangeEmploymentBruseStep31Params.UILueNewEmployeeLookUpEditValueAsString;

            // Type '2024-03-21' in 'pceDate' DateTimeEdit
            //ValueAsString
            uIPceDateDateTimeEdit.ValueAsString = this.ExchangeEmploymentBruseStep31Params.UIPceDateDateTimeEditValueAsString;

            // Type '{Tab}' in 'pceDate' DateTimeEdit
            Keyboard.SendKeys(uIPceDateDateTimeEdit, this.ExchangeEmploymentBruseStep31Params.UIPceDateDateTimeEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ExchangeEmploymentDressmannStep17 - Use 'ExchangeEmploymentDressmannStep17Params' to pass parameters into this method.
        /// </summary>
        public void ExchangeEmploymentDressmannStep17()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIBarButtonItemLink4MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink4MenuBaseButtonItem;
            DXCheckBox uIChkChangeEmploymentCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UIChkChangeEmploymentCheckBox;
            DXLookUpEdit uILeNewEmploymentLookUpEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UILeNewEmploymentLookUpEdit;
            DXDateTimePicker uIPceDateDateTimeEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl4Client.UIEFromDateCustom.UIPceDateDateTimeEdit;
            #endregion

            // Click 'BarButtonItemLink[4]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink4MenuBaseButtonItem, new Point(173, 12));

            // Select 'chkChangeEmployment' check box
            uIChkChangeEmploymentCheckBox.Checked = this.ExchangeEmploymentDressmannStep17Params.UIChkChangeEmploymentCheckBoxChecked;

            // Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'leNewEmployment' LookUpEdit
            //ValueTypeName
            uILeNewEmploymentLookUpEdit.ValueTypeName = this.ExchangeEmploymentDressmannStep17Params.UILeNewEmploymentLookUpEditValueTypeName;

            // Type 'Dressman, Dennis - TURNUS/H 50 % 09.01.2017-31.12.2099' in 'leNewEmployment' LookUpEdit
            //ValueAsString
            uILeNewEmploymentLookUpEdit.ValueAsString = this.ExchangeEmploymentDressmannStep17Params.UILeNewEmploymentLookUpEditValueAsString;

            // Type '2024-01-29' in 'pceDate' DateTimeEdit
            //ValueAsString
            uIPceDateDateTimeEdit.ValueAsString = this.ExchangeEmploymentDressmannStep17Params.UIPceDateDateTimeEditValueAsString;

            // Type '{Tab}' in 'pceDate' DateTimeEdit
            Keyboard.SendKeys(uIPceDateDateTimeEdit, this.ExchangeEmploymentDressmannStep17Params.UIPceDateDateTimeEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ExchangeEmploymentDressmannStep29 - Use 'ExchangeEmploymentDressmannStep29Params' to pass parameters into this method.
        /// </summary>
        public void ExchangeEmploymentDressmannStep29()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIBarButtonItemLink4MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink4MenuBaseButtonItem;
            DXLookUpEdit uILueNewEmployeeLookUpEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UILueNewEmployeeLookUpEdit;
            DXDateTimePicker uIPceDateDateTimeEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl4Client.UIEFromDateCustom.UIPceDateDateTimeEdit;
            #endregion

            // Click 'BarButtonItemLink[4]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink4MenuBaseButtonItem, new Point(89, 11));

            // Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'lueNewEmployee' LookUpEdit
            //ValueTypeName
            uILueNewEmployeeLookUpEdit.ValueTypeName = this.ExchangeEmploymentDressmannStep29Params.UILueNewEmployeeLookUpEditValueTypeName;

            // Type 'Hallin, Per Erik - TURNUS/A 75 % 08.02.2016-31.12.2099' in 'lueNewEmployee' LookUpEdit
            //ValueAsString
            uILueNewEmployeeLookUpEdit.ValueAsString = this.ExchangeEmploymentDressmannStep29Params.UILueNewEmployeeLookUpEditValueAsString;

            // Type '2024-01-29' in 'pceDate' DateTimeEdit
            //ValueAsString
            uIPceDateDateTimeEdit.ValueAsString = this.ExchangeEmploymentDressmannStep29Params.UIPceDateDateTimeEditValueAsString;

            // Type '{Tab}' in 'pceDate' DateTimeEdit
            Keyboard.SendKeys(uIPceDateDateTimeEdit, this.ExchangeEmploymentDressmannStep29Params.UIPceDateDateTimeEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ExchangeEmploymentGustavssonStep22 - Use 'ExchangeEmploymentGustavssonStep22Params' to pass parameters into this method.
        /// </summary>
        public void ExchangeEmploymentGustavssonStep22()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIByttansattstillingsfMenuBaseButtonItem1 = this.UIItemWindow.UIPopupMenuBarControlMenu.UIByttansattstillingsfMenuBaseButtonItem1;
            DXCheckBox uIChkChangeToVacantCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UIChkChangeToVacantCheckBox;
            DXTextEdit uIECustomVacantNameEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UIECustomVacantNameEdit;
            DXCheckBox uIChkChangeEntirePerioCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl4Client.UIChkChangeEntirePerioCheckBox;
            #endregion

            // Click 'Bytt ansatt/stillingsforhold på alle linjer (Gustavsson, Robert)' MenuBaseButtonItem
            Mouse.Click(uIByttansattstillingsfMenuBaseButtonItem1, new Point(182, 12));

            // Select 'chkChangeToVacant' check box
            uIChkChangeToVacantCheckBox.Checked = this.ExchangeEmploymentGustavssonStep22Params.UIChkChangeToVacantCheckBoxChecked;

            // Type 'Hvem vil jobbe' in 'eCustomVacantName' text box
            //ValueAsString
            uIECustomVacantNameEdit.ValueAsString = this.ExchangeEmploymentGustavssonStep22Params.UIECustomVacantNameEditValueAsString;

            // Type '{Tab}' in 'eCustomVacantName' text box
            Keyboard.SendKeys(uIECustomVacantNameEdit, this.ExchangeEmploymentGustavssonStep22Params.UIECustomVacantNameEditSendKeys, ModifierKeys.None);

            // Select 'chkChangeEntirePeriod' check box
            uIChkChangeEntirePerioCheckBox.Checked = this.ExchangeEmploymentGustavssonStep22Params.UIChkChangeEntirePerioCheckBoxChecked;
        }
        
        /// <summary>
        /// ExchangeEmploymentVakantStep26_27 - Use 'ExchangeEmploymentVakantStep26_27Params' to pass parameters into this method.
        /// </summary>
        public void ExchangeEmploymentVakantStep26_27()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIByttansattstillingsfMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIByttansattstillingsfMenuBaseButtonItem;
            DXLookUpEdit uILueNewEmployeeLookUpEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UILueNewEmployeeLookUpEdit;
            DXDateTimePicker uIPceDateDateTimeEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl4Client.UIEFromDateCustom.UIPceDateDateTimeEdit;
            DXCheckBox uIChkReplacementModeIsCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl5Client.UIChkReplacementModeIsCheckBox;
            #endregion

            // Click 'Bytt ansatt/stillingsforhold på alle linjer (Aller, Cecilia)' MenuBaseButtonItem
            Mouse.Click(uIByttansattstillingsfMenuBaseButtonItem, new Point(84, 8));

            // Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'lueNewEmployee' LookUpEdit
            //ValueTypeName
            uILueNewEmployeeLookUpEdit.ValueTypeName = this.ExchangeEmploymentVakantStep26_27Params.UILueNewEmployeeLookUpEditValueTypeName;

            // Type 'Frost, Anna - TURNUS/S 25 % 08.05.2017-31.12.2099' in 'lueNewEmployee' LookUpEdit
            //ValueAsString
            uILueNewEmployeeLookUpEdit.ValueAsString = this.ExchangeEmploymentVakantStep26_27Params.UILueNewEmployeeLookUpEditValueAsString;

            // Type '2024-01-08' in 'pceDate' DateTimeEdit
            //ValueAsString
            uIPceDateDateTimeEdit.ValueAsString = this.ExchangeEmploymentVakantStep26_27Params.UIPceDateDateTimeEditValueAsString;

            // Type '{Tab}' in 'pceDate' DateTimeEdit
            Keyboard.SendKeys(uIPceDateDateTimeEdit, this.ExchangeEmploymentVakantStep26_27Params.UIPceDateDateTimeEditSendKeys, ModifierKeys.None);

            // Select 'chkReplacementModeIsReplace' check box
            uIChkReplacementModeIsCheckBox.Checked = this.ExchangeEmploymentVakantStep26_27Params.UIChkReplacementModeIsCheckBoxChecked;
        }
        
        /// <summary>
        /// ExchangeLinesAllerBruse - Use 'ExchangeLinesAllerBruseParams' to pass parameters into this method.
        /// </summary>
        public void ExchangeLinesAllerBruse()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIByttansattstillingsfMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIByttansattstillingsfMenuBaseButtonItem;
            DXLookUpEdit uILueNewEmployeeLookUpEdit = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl2Client.UILueNewEmployeeLookUpEdit;
            #endregion

            // Click 'Bytt ansatt/stillingsforhold på alle linjer (Aller, Cecilia)' MenuBaseButtonItem
            Mouse.Click(uIByttansattstillingsfMenuBaseButtonItem, new Point(148, 10));

            // Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'lueNewEmployee' LookUpEdit
            //ValueTypeName
            uILueNewEmployeeLookUpEdit.ValueTypeName = this.ExchangeLinesAllerBruseParams.UILueNewEmployeeLookUpEditValueTypeName;

            // Type 'Bruse, Niklas - TURNUS/S 100 % 05.04.2018-31.12.2099' in 'lueNewEmployee' LookUpEdit
            //ValueAsString
            uILueNewEmployeeLookUpEdit.ValueAsString = this.ExchangeLinesAllerBruseParams.UILueNewEmployeeLookUpEditValueAsString;
        }
        
        /// <summary>
        /// OpenLinesettingsDressmannStep18
        /// </summary>
        public void OpenLinesettingsDressmannStep18()
        {
            #region Variable Declarations
            DXCell uIItem25Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItem25Cell;
            DXMenuBaseButtonItem uIEndrelinjeinnstillinMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIEndrelinjeinnstillinMenuBaseButtonItem;
            #endregion

            // Right-Click '25' cell
            Mouse.Click(uIItem25Cell, MouseButtons.Right, ModifierKeys.None, new Point(7, 11));

            // Click 'Endre linjeinnstillinger (5200 - Bytt ansatt)' MenuBaseButtonItem
            Mouse.Click(uIEndrelinjeinnstillinMenuBaseButtonItem, new Point(149, 7));
        }
        
        /// <summary>
        /// RightClickBruseCell
        /// </summary>
        public void RightClickBruseCell()
        {
            #region Variable Declarations
            DXCell uIBruseNiklasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBruseNiklasCell;
            #endregion

            // Right-Click 'Bruse, Niklas' cell
            Mouse.Click(uIBruseNiklasCell, MouseButtons.Right, ModifierKeys.None, new Point(68, 9));
        }
        
        /// <summary>
        /// RightClickCeciliaCell
        /// </summary>
        public void RightClickCeciliaCell()
        {
            #region Variable Declarations
            DXCell uIAllerCeciliaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAllerCeciliaCell;
            #endregion

            // Right-Click 'Aller, Cecilia' cell
            Mouse.Click(uIAllerCeciliaCell, MouseButtons.Right, ModifierKeys.None, new Point(96, 12));
        }
        
        /// <summary>
        /// RightClickCullenCell
        /// </summary>
        public void RightClickCullenCell()
        {
            #region Variable Declarations
            DXCell uICullenDamienCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UICullenDamienCell;
            #endregion

            // Right-Click 'Cullen, Damien' cell
            Mouse.Click(uICullenDamienCell, MouseButtons.Right, ModifierKeys.None, new Point(84, 9));
        }
        
        /// <summary>
        /// SelectDressmanFirstLine
        /// </summary>
        public void SelectDressmanFirstLine()
        {
            #region Variable Declarations
            DXCell uITURNUSCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UITURNUSCell;
            #endregion

            // Right-Click 'TURNUS' cell
            Mouse.Click(uITURNUSCell, MouseButtons.Right, ModifierKeys.None, new Point(9, 11));
        }
        
        /// <summary>
        /// SelectDressmanSecondLine
        /// </summary>
        public void SelectDressmanSecondLine()
        {
            #region Variable Declarations
            DXCell uIDressmanDennisCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDressmanDennisCell1;
            #endregion

            // Right-Click 'Dressman, Dennis' cell
            Mouse.Click(uIDressmanDennisCell1, MouseButtons.Right, ModifierKeys.None, new Point(116, 10));
        }
        
        /// <summary>
        /// SelectDressmanThirdLine
        /// </summary>
        public void SelectDressmanThirdLine()
        {
            #region Variable Declarations
            DXCell uIDressmanDennisCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDressmanDennisCell2;
            #endregion

            // Right-Click 'Dressman, Dennis' cell
            Mouse.Click(uIDressmanDennisCell2, MouseButtons.Right, ModifierKeys.None, new Point(116, 11));
        }
        
        /// <summary>
        /// SelectErikson
        /// </summary>
        public void SelectErikson()
        {
            #region Variable Declarations
            DXCell uIItem2ErikssonMatsCell = this.UIOppgavetildelingWindow1.UIVhContentCustom.UIPcViewClient.UIRoleAssignmentOverviCustom.UIPanelContainer2DockPanel.UIPanelContainer1DockPanel.UIDpEmployeesDockPanel.UIControlContainer1Custom.UIEmployeeListViewCustom.UIGcEmployeesTable.UIItem2ErikssonMatsCell;
            #endregion

            // Click '2. Eriksson, Mats' cell
            Mouse.Click(uIItem2ErikssonMatsCell, new Point(71, 6));
        }
        
        /// <summary>
        /// SelectGustavsson
        /// </summary>
        public void SelectGustavsson()
        {
            #region Variable Declarations
            WinClient uIAnsatteClient = this.UIGatWindow.UIItemWindow.UIAnsatteClient;
            WinClient uIIverksettingsperiodeClient = this.UIGatWindow.UIItemWindow1.UIIverksettingsperiodeClient;
            #endregion

            // Click 'Ansatte' client
            Mouse.Click(uIAnsatteClient, new Point(39, 128));

            // Right-Click 'Iverksettingsperioder' client
            Mouse.Click(uIIverksettingsperiodeClient, MouseButtons.Right, ModifierKeys.None, new Point(38, 25));
        }
        
        /// <summary>
        /// SetVakansErikssonDressmanStep20 - Use 'SetVakansErikssonDressmanStep20Params' to pass parameters into this method.
        /// </summary>
        public void SetVakansErikssonDressmanStep20()
        {
            #region Variable Declarations
            DXTreeListCell uIItem10TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            DXLookUpEdit uIEOvertimeCodeLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerOvertCustom.UIEOvertimeCodeLookUpEdit;
            DXTreeListCell uIItem10TreeListCell1 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            #endregion

            // Click '1. 0%' TreeListCell
            Mouse.Click(uIItem10TreeListCell, new Point(41, 7));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel' in 'eOvertimeCode' LookUpEdit
            //ValueTypeName
            uIEOvertimeCodeLookUpEdit.ValueTypeName = this.SetVakansErikssonDressmanStep20Params.UIEOvertimeCodeLookUpEditValueTypeName;

            // Type 'V - Vakans' in 'eOvertimeCode' LookUpEdit
            //ValueAsString
            uIEOvertimeCodeLookUpEdit.ValueAsString = this.SetVakansErikssonDressmanStep20Params.UIEOvertimeCodeLookUpEditValueAsString;

            // Click '1. 0%' TreeListCell
            Mouse.Click(uIItem10TreeListCell1, new Point(78, 7));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel' in 'eOvertimeCode' LookUpEdit
            //ValueTypeName
            uIEOvertimeCodeLookUpEdit.ValueTypeName = this.SetVakansErikssonDressmanStep20Params.UIEOvertimeCodeLookUpEditValueTypeName1;

            // Type 'V - Vakans' in 'eOvertimeCode' LookUpEdit
            //ValueAsString
            uIEOvertimeCodeLookUpEdit.ValueAsString = this.SetVakansErikssonDressmanStep20Params.UIEOvertimeCodeLookUpEditValueAsString1;
        }
        
        /// <summary>
        /// SwitchWholePeriod - Use 'SwitchWholePeriodParams' to pass parameters into this method.
        /// </summary>
        public void SwitchWholePeriod()
        {
            #region Variable Declarations
            DXCheckBox uIChkChangeEntirePerioCheckBox = this.UIByttansattWindow.UIPcContentClient.UIGsPanelControl3Client.UIGsPanelControl4Client.UIChkChangeEntirePerioCheckBox;
            #endregion

            // Select 'chkChangeEntirePeriod' check box
            uIChkChangeEntirePerioCheckBox.Checked = this.SwitchWholePeriodParams.UIChkChangeEntirePerioCheckBoxChecked;
        }
        
        #region Properties
        public virtual CheckBruseEmpLineSettingsStep32ExpectedValues CheckBruseEmpLineSettingsStep32ExpectedValues
        {
            get
            {
                if ((this.mCheckBruseEmpLineSettingsStep32ExpectedValues == null))
                {
                    this.mCheckBruseEmpLineSettingsStep32ExpectedValues = new CheckBruseEmpLineSettingsStep32ExpectedValues();
                }
                return this.mCheckBruseEmpLineSettingsStep32ExpectedValues;
            }
        }
        
        public virtual CheckCullenRolesStep_10ExpectedValues CheckCullenRolesStep_10ExpectedValues
        {
            get
            {
                if ((this.mCheckCullenRolesStep_10ExpectedValues == null))
                {
                    this.mCheckCullenRolesStep_10ExpectedValues = new CheckCullenRolesStep_10ExpectedValues();
                }
                return this.mCheckCullenRolesStep_10ExpectedValues;
            }
        }
        
        public virtual CheckEmpGustavssonStep24ExpectedValues CheckEmpGustavssonStep24ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpGustavssonStep24ExpectedValues == null))
                {
                    this.mCheckEmpGustavssonStep24ExpectedValues = new CheckEmpGustavssonStep24ExpectedValues();
                }
                return this.mCheckEmpGustavssonStep24ExpectedValues;
            }
        }
        
        public virtual CheckEmploymentDressmannStep13ExpectedValues CheckEmploymentDressmannStep13ExpectedValues
        {
            get
            {
                if ((this.mCheckEmploymentDressmannStep13ExpectedValues == null))
                {
                    this.mCheckEmploymentDressmannStep13ExpectedValues = new CheckEmploymentDressmannStep13ExpectedValues();
                }
                return this.mCheckEmploymentDressmannStep13ExpectedValues;
            }
        }
        
        public virtual CheckErikssonNoRolesStep_11ExpectedValues CheckErikssonNoRolesStep_11ExpectedValues
        {
            get
            {
                if ((this.mCheckErikssonNoRolesStep_11ExpectedValues == null))
                {
                    this.mCheckErikssonNoRolesStep_11ExpectedValues = new CheckErikssonNoRolesStep_11ExpectedValues();
                }
                return this.mCheckErikssonNoRolesStep_11ExpectedValues;
            }
        }
        
        public virtual CheckIngessonEmpLineSettingsStep32ExpectedValues CheckIngessonEmpLineSettingsStep32ExpectedValues
        {
            get
            {
                if ((this.mCheckIngessonEmpLineSettingsStep32ExpectedValues == null))
                {
                    this.mCheckIngessonEmpLineSettingsStep32ExpectedValues = new CheckIngessonEmpLineSettingsStep32ExpectedValues();
                }
                return this.mCheckIngessonEmpLineSettingsStep32ExpectedValues;
            }
        }
        
        public virtual CheckLinesettingsBruseStep31ExpectedValues CheckLinesettingsBruseStep31ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesettingsBruseStep31ExpectedValues == null))
                {
                    this.mCheckLinesettingsBruseStep31ExpectedValues = new CheckLinesettingsBruseStep31ExpectedValues();
                }
                return this.mCheckLinesettingsBruseStep31ExpectedValues;
            }
        }
        
        public virtual CheckLinesettingsDressmannStep14ExpectedValues CheckLinesettingsDressmannStep14ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesettingsDressmannStep14ExpectedValues == null))
                {
                    this.mCheckLinesettingsDressmannStep14ExpectedValues = new CheckLinesettingsDressmannStep14ExpectedValues();
                }
                return this.mCheckLinesettingsDressmannStep14ExpectedValues;
            }
        }
        
        public virtual CheckLinesettingsDressmannStep15ExpectedValues CheckLinesettingsDressmannStep15ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesettingsDressmannStep15ExpectedValues == null))
                {
                    this.mCheckLinesettingsDressmannStep15ExpectedValues = new CheckLinesettingsDressmannStep15ExpectedValues();
                }
                return this.mCheckLinesettingsDressmannStep15ExpectedValues;
            }
        }
        
        public virtual CheckLinesettingsDressmannStep17ExpectedValues CheckLinesettingsDressmannStep17ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesettingsDressmannStep17ExpectedValues == null))
                {
                    this.mCheckLinesettingsDressmannStep17ExpectedValues = new CheckLinesettingsDressmannStep17ExpectedValues();
                }
                return this.mCheckLinesettingsDressmannStep17ExpectedValues;
            }
        }
        
        public virtual CheckLinesettingsDressmannStep18ExpectedValues CheckLinesettingsDressmannStep18ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesettingsDressmannStep18ExpectedValues == null))
                {
                    this.mCheckLinesettingsDressmannStep18ExpectedValues = new CheckLinesettingsDressmannStep18ExpectedValues();
                }
                return this.mCheckLinesettingsDressmannStep18ExpectedValues;
            }
        }
        
        public virtual CheckLinesettingsDressmannStep19ExpectedValues CheckLinesettingsDressmannStep19ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesettingsDressmannStep19ExpectedValues == null))
                {
                    this.mCheckLinesettingsDressmannStep19ExpectedValues = new CheckLinesettingsDressmannStep19ExpectedValues();
                }
                return this.mCheckLinesettingsDressmannStep19ExpectedValues;
            }
        }
        
        public virtual CheckLinesettingsDressmannStep29ExpectedValues CheckLinesettingsDressmannStep29ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesettingsDressmannStep29ExpectedValues == null))
                {
                    this.mCheckLinesettingsDressmannStep29ExpectedValues = new CheckLinesettingsDressmannStep29ExpectedValues();
                }
                return this.mCheckLinesettingsDressmannStep29ExpectedValues;
            }
        }
        
        public virtual CheckLinesettingsGustavssonStep22ExpectedValues CheckLinesettingsGustavssonStep22ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesettingsGustavssonStep22ExpectedValues == null))
                {
                    this.mCheckLinesettingsGustavssonStep22ExpectedValues = new CheckLinesettingsGustavssonStep22ExpectedValues();
                }
                return this.mCheckLinesettingsGustavssonStep22ExpectedValues;
            }
        }
        
        public virtual CheckLinesettingsVakantStep26_27ExpectedValues CheckLinesettingsVakantStep26_27ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesettingsVakantStep26_27ExpectedValues == null))
                {
                    this.mCheckLinesettingsVakantStep26_27ExpectedValues = new CheckLinesettingsVakantStep26_27ExpectedValues();
                }
                return this.mCheckLinesettingsVakantStep26_27ExpectedValues;
            }
        }
        
        public virtual CheckLinesHvemVilJobbeStep23ExpectedValues CheckLinesHvemVilJobbeStep23ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesHvemVilJobbeStep23ExpectedValues == null))
                {
                    this.mCheckLinesHvemVilJobbeStep23ExpectedValues = new CheckLinesHvemVilJobbeStep23ExpectedValues();
                }
                return this.mCheckLinesHvemVilJobbeStep23ExpectedValues;
            }
        }
        
        public virtual CheckLinesStep23ExpectedValues CheckLinesStep23ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesStep23ExpectedValues == null))
                {
                    this.mCheckLinesStep23ExpectedValues = new CheckLinesStep23ExpectedValues();
                }
                return this.mCheckLinesStep23ExpectedValues;
            }
        }
        
        public virtual CheckLinesStep8ExpectedValues CheckLinesStep8ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesStep8ExpectedValues == null))
                {
                    this.mCheckLinesStep8ExpectedValues = new CheckLinesStep8ExpectedValues();
                }
                return this.mCheckLinesStep8ExpectedValues;
            }
        }
        
        public virtual CheckLinesStep9ExpectedValues CheckLinesStep9ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesStep9ExpectedValues == null))
                {
                    this.mCheckLinesStep9ExpectedValues = new CheckLinesStep9ExpectedValues();
                }
                return this.mCheckLinesStep9ExpectedValues;
            }
        }
        
        public virtual CheckOwnerInLineSettingsExpectedValues CheckOwnerInLineSettingsExpectedValues
        {
            get
            {
                if ((this.mCheckOwnerInLineSettingsExpectedValues == null))
                {
                    this.mCheckOwnerInLineSettingsExpectedValues = new CheckOwnerInLineSettingsExpectedValues();
                }
                return this.mCheckOwnerInLineSettingsExpectedValues;
            }
        }
        
        public virtual CheckReportBruseStep_6ExpectedValues CheckReportBruseStep_6ExpectedValues
        {
            get
            {
                if ((this.mCheckReportBruseStep_6ExpectedValues == null))
                {
                    this.mCheckReportBruseStep_6ExpectedValues = new CheckReportBruseStep_6ExpectedValues();
                }
                return this.mCheckReportBruseStep_6ExpectedValues;
            }
        }
        
        public virtual CheckRowsStep4ExpectedValues CheckRowsStep4ExpectedValues
        {
            get
            {
                if ((this.mCheckRowsStep4ExpectedValues == null))
                {
                    this.mCheckRowsStep4ExpectedValues = new CheckRowsStep4ExpectedValues();
                }
                return this.mCheckRowsStep4ExpectedValues;
            }
        }
        
        public virtual CheckRowsStep4BruseExpectedValues CheckRowsStep4BruseExpectedValues
        {
            get
            {
                if ((this.mCheckRowsStep4BruseExpectedValues == null))
                {
                    this.mCheckRowsStep4BruseExpectedValues = new CheckRowsStep4BruseExpectedValues();
                }
                return this.mCheckRowsStep4BruseExpectedValues;
            }
        }
        
        public virtual CheckSwitchEmpOkButtonDisabledExpectedValues CheckSwitchEmpOkButtonDisabledExpectedValues
        {
            get
            {
                if ((this.mCheckSwitchEmpOkButtonDisabledExpectedValues == null))
                {
                    this.mCheckSwitchEmpOkButtonDisabledExpectedValues = new CheckSwitchEmpOkButtonDisabledExpectedValues();
                }
                return this.mCheckSwitchEmpOkButtonDisabledExpectedValues;
            }
        }
        
        public virtual CheckSwitchEmpRegStatusOkStep3ExpectedValues CheckSwitchEmpRegStatusOkStep3ExpectedValues
        {
            get
            {
                if ((this.mCheckSwitchEmpRegStatusOkStep3ExpectedValues == null))
                {
                    this.mCheckSwitchEmpRegStatusOkStep3ExpectedValues = new CheckSwitchEmpRegStatusOkStep3ExpectedValues();
                }
                return this.mCheckSwitchEmpRegStatusOkStep3ExpectedValues;
            }
        }
        
        public virtual CheckSwitchEmpRegStatusStep2ExpectedValues CheckSwitchEmpRegStatusStep2ExpectedValues
        {
            get
            {
                if ((this.mCheckSwitchEmpRegStatusStep2ExpectedValues == null))
                {
                    this.mCheckSwitchEmpRegStatusStep2ExpectedValues = new CheckSwitchEmpRegStatusStep2ExpectedValues();
                }
                return this.mCheckSwitchEmpRegStatusStep2ExpectedValues;
            }
        }
        
        public virtual CheckSwitchEmpRegStatusStep29ExpectedValues CheckSwitchEmpRegStatusStep29ExpectedValues
        {
            get
            {
                if ((this.mCheckSwitchEmpRegStatusStep29ExpectedValues == null))
                {
                    this.mCheckSwitchEmpRegStatusStep29ExpectedValues = new CheckSwitchEmpRegStatusStep29ExpectedValues();
                }
                return this.mCheckSwitchEmpRegStatusStep29ExpectedValues;
            }
        }
        
        public virtual ExchangeEmpCullenErikssonParams ExchangeEmpCullenErikssonParams
        {
            get
            {
                if ((this.mExchangeEmpCullenErikssonParams == null))
                {
                    this.mExchangeEmpCullenErikssonParams = new ExchangeEmpCullenErikssonParams();
                }
                return this.mExchangeEmpCullenErikssonParams;
            }
        }
        
        public virtual ExchangeEmploymentBruseStep31Params ExchangeEmploymentBruseStep31Params
        {
            get
            {
                if ((this.mExchangeEmploymentBruseStep31Params == null))
                {
                    this.mExchangeEmploymentBruseStep31Params = new ExchangeEmploymentBruseStep31Params();
                }
                return this.mExchangeEmploymentBruseStep31Params;
            }
        }
        
        public virtual ExchangeEmploymentDressmannStep17Params ExchangeEmploymentDressmannStep17Params
        {
            get
            {
                if ((this.mExchangeEmploymentDressmannStep17Params == null))
                {
                    this.mExchangeEmploymentDressmannStep17Params = new ExchangeEmploymentDressmannStep17Params();
                }
                return this.mExchangeEmploymentDressmannStep17Params;
            }
        }
        
        public virtual ExchangeEmploymentDressmannStep29Params ExchangeEmploymentDressmannStep29Params
        {
            get
            {
                if ((this.mExchangeEmploymentDressmannStep29Params == null))
                {
                    this.mExchangeEmploymentDressmannStep29Params = new ExchangeEmploymentDressmannStep29Params();
                }
                return this.mExchangeEmploymentDressmannStep29Params;
            }
        }
        
        public virtual ExchangeEmploymentGustavssonStep22Params ExchangeEmploymentGustavssonStep22Params
        {
            get
            {
                if ((this.mExchangeEmploymentGustavssonStep22Params == null))
                {
                    this.mExchangeEmploymentGustavssonStep22Params = new ExchangeEmploymentGustavssonStep22Params();
                }
                return this.mExchangeEmploymentGustavssonStep22Params;
            }
        }
        
        public virtual ExchangeEmploymentVakantStep26_27Params ExchangeEmploymentVakantStep26_27Params
        {
            get
            {
                if ((this.mExchangeEmploymentVakantStep26_27Params == null))
                {
                    this.mExchangeEmploymentVakantStep26_27Params = new ExchangeEmploymentVakantStep26_27Params();
                }
                return this.mExchangeEmploymentVakantStep26_27Params;
            }
        }
        
        public virtual ExchangeLinesAllerBruseParams ExchangeLinesAllerBruseParams
        {
            get
            {
                if ((this.mExchangeLinesAllerBruseParams == null))
                {
                    this.mExchangeLinesAllerBruseParams = new ExchangeLinesAllerBruseParams();
                }
                return this.mExchangeLinesAllerBruseParams;
            }
        }
        
        public virtual SetVakansErikssonDressmanStep20Params SetVakansErikssonDressmanStep20Params
        {
            get
            {
                if ((this.mSetVakansErikssonDressmanStep20Params == null))
                {
                    this.mSetVakansErikssonDressmanStep20Params = new SetVakansErikssonDressmanStep20Params();
                }
                return this.mSetVakansErikssonDressmanStep20Params;
            }
        }
        
        public virtual SwitchWholePeriodParams SwitchWholePeriodParams
        {
            get
            {
                if ((this.mSwitchWholePeriodParams == null))
                {
                    this.mSwitchWholePeriodParams = new SwitchWholePeriodParams();
                }
                return this.mSwitchWholePeriodParams;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIByttansattWindow UIByttansattWindow
        {
            get
            {
                if ((this.mUIByttansattWindow == null))
                {
                    this.mUIByttansattWindow = new UIByttansattWindow();
                }
                return this.mUIByttansattWindow;
            }
        }
        
        public UIRegistreringsstatusWindow UIRegistreringsstatusWindow
        {
            get
            {
                if ((this.mUIRegistreringsstatusWindow == null))
                {
                    this.mUIRegistreringsstatusWindow = new UIRegistreringsstatusWindow();
                }
                return this.mUIRegistreringsstatusWindow;
            }
        }
        
        public UILinjeinnstillingerBrWindow UILinjeinnstillingerBrWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerBrWindow == null))
                {
                    this.mUILinjeinnstillingerBrWindow = new UILinjeinnstillingerBrWindow();
                }
                return this.mUILinjeinnstillingerBrWindow;
            }
        }
        
        public UIOppgavetildelingWindow UIOppgavetildelingWindow
        {
            get
            {
                if ((this.mUIOppgavetildelingWindow == null))
                {
                    this.mUIOppgavetildelingWindow = new UIOppgavetildelingWindow();
                }
                return this.mUIOppgavetildelingWindow;
            }
        }
        
        public UILinjeinnstillingerDrWindow UILinjeinnstillingerDrWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerDrWindow == null))
                {
                    this.mUILinjeinnstillingerDrWindow = new UILinjeinnstillingerDrWindow();
                }
                return this.mUILinjeinnstillingerDrWindow;
            }
        }
        
        public UIAnsatteiarbeidsplanWindow UIAnsatteiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIAnsatteiarbeidsplanWindow == null))
                {
                    this.mUIAnsatteiarbeidsplanWindow = new UIAnsatteiarbeidsplanWindow();
                }
                return this.mUIAnsatteiarbeidsplanWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        
        public UILinjeinnstillingerInWindow UILinjeinnstillingerInWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerInWindow == null))
                {
                    this.mUILinjeinnstillingerInWindow = new UILinjeinnstillingerInWindow();
                }
                return this.mUILinjeinnstillingerInWindow;
            }
        }
        
        public UIAnsattinnstillingerfWindow UIAnsattinnstillingerfWindow
        {
            get
            {
                if ((this.mUIAnsattinnstillingerfWindow == null))
                {
                    this.mUIAnsattinnstillingerfWindow = new UIAnsattinnstillingerfWindow();
                }
                return this.mUIAnsattinnstillingerfWindow;
            }
        }
        
        public UILinjeinnstillingerCuWindow UILinjeinnstillingerCuWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerCuWindow == null))
                {
                    this.mUILinjeinnstillingerCuWindow = new UILinjeinnstillingerCuWindow();
                }
                return this.mUILinjeinnstillingerCuWindow;
            }
        }
        
        public UIOppgavetildelingWindow1 UIOppgavetildelingWindow1
        {
            get
            {
                if ((this.mUIOppgavetildelingWindow1 == null))
                {
                    this.mUIOppgavetildelingWindow1 = new UIOppgavetildelingWindow1();
                }
                return this.mUIOppgavetildelingWindow1;
            }
        }
        #endregion
        
        #region Fields
        private CheckBruseEmpLineSettingsStep32ExpectedValues mCheckBruseEmpLineSettingsStep32ExpectedValues;
        
        private CheckCullenRolesStep_10ExpectedValues mCheckCullenRolesStep_10ExpectedValues;
        
        private CheckEmpGustavssonStep24ExpectedValues mCheckEmpGustavssonStep24ExpectedValues;
        
        private CheckEmploymentDressmannStep13ExpectedValues mCheckEmploymentDressmannStep13ExpectedValues;
        
        private CheckErikssonNoRolesStep_11ExpectedValues mCheckErikssonNoRolesStep_11ExpectedValues;
        
        private CheckIngessonEmpLineSettingsStep32ExpectedValues mCheckIngessonEmpLineSettingsStep32ExpectedValues;
        
        private CheckLinesettingsBruseStep31ExpectedValues mCheckLinesettingsBruseStep31ExpectedValues;
        
        private CheckLinesettingsDressmannStep14ExpectedValues mCheckLinesettingsDressmannStep14ExpectedValues;
        
        private CheckLinesettingsDressmannStep15ExpectedValues mCheckLinesettingsDressmannStep15ExpectedValues;
        
        private CheckLinesettingsDressmannStep17ExpectedValues mCheckLinesettingsDressmannStep17ExpectedValues;
        
        private CheckLinesettingsDressmannStep18ExpectedValues mCheckLinesettingsDressmannStep18ExpectedValues;
        
        private CheckLinesettingsDressmannStep19ExpectedValues mCheckLinesettingsDressmannStep19ExpectedValues;
        
        private CheckLinesettingsDressmannStep29ExpectedValues mCheckLinesettingsDressmannStep29ExpectedValues;
        
        private CheckLinesettingsGustavssonStep22ExpectedValues mCheckLinesettingsGustavssonStep22ExpectedValues;
        
        private CheckLinesettingsVakantStep26_27ExpectedValues mCheckLinesettingsVakantStep26_27ExpectedValues;
        
        private CheckLinesHvemVilJobbeStep23ExpectedValues mCheckLinesHvemVilJobbeStep23ExpectedValues;
        
        private CheckLinesStep23ExpectedValues mCheckLinesStep23ExpectedValues;
        
        private CheckLinesStep8ExpectedValues mCheckLinesStep8ExpectedValues;
        
        private CheckLinesStep9ExpectedValues mCheckLinesStep9ExpectedValues;
        
        private CheckOwnerInLineSettingsExpectedValues mCheckOwnerInLineSettingsExpectedValues;
        
        private CheckReportBruseStep_6ExpectedValues mCheckReportBruseStep_6ExpectedValues;
        
        private CheckRowsStep4ExpectedValues mCheckRowsStep4ExpectedValues;
        
        private CheckRowsStep4BruseExpectedValues mCheckRowsStep4BruseExpectedValues;
        
        private CheckSwitchEmpOkButtonDisabledExpectedValues mCheckSwitchEmpOkButtonDisabledExpectedValues;
        
        private CheckSwitchEmpRegStatusOkStep3ExpectedValues mCheckSwitchEmpRegStatusOkStep3ExpectedValues;
        
        private CheckSwitchEmpRegStatusStep2ExpectedValues mCheckSwitchEmpRegStatusStep2ExpectedValues;
        
        private CheckSwitchEmpRegStatusStep29ExpectedValues mCheckSwitchEmpRegStatusStep29ExpectedValues;
        
        private ExchangeEmpCullenErikssonParams mExchangeEmpCullenErikssonParams;
        
        private ExchangeEmploymentBruseStep31Params mExchangeEmploymentBruseStep31Params;
        
        private ExchangeEmploymentDressmannStep17Params mExchangeEmploymentDressmannStep17Params;
        
        private ExchangeEmploymentDressmannStep29Params mExchangeEmploymentDressmannStep29Params;
        
        private ExchangeEmploymentGustavssonStep22Params mExchangeEmploymentGustavssonStep22Params;
        
        private ExchangeEmploymentVakantStep26_27Params mExchangeEmploymentVakantStep26_27Params;
        
        private ExchangeLinesAllerBruseParams mExchangeLinesAllerBruseParams;
        
        private SetVakansErikssonDressmanStep20Params mSetVakansErikssonDressmanStep20Params;
        
        private SwitchWholePeriodParams mSwitchWholePeriodParams;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIByttansattWindow mUIByttansattWindow;
        
        private UIRegistreringsstatusWindow mUIRegistreringsstatusWindow;
        
        private UILinjeinnstillingerBrWindow mUILinjeinnstillingerBrWindow;
        
        private UIOppgavetildelingWindow mUIOppgavetildelingWindow;
        
        private UILinjeinnstillingerDrWindow mUILinjeinnstillingerDrWindow;
        
        private UIAnsatteiarbeidsplanWindow mUIAnsatteiarbeidsplanWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIGatWindow mUIGatWindow;
        
        private UILinjeinnstillingerInWindow mUILinjeinnstillingerInWindow;
        
        private UIAnsattinnstillingerfWindow mUIAnsattinnstillingerfWindow;
        
        private UILinjeinnstillingerCuWindow mUILinjeinnstillingerCuWindow;
        
        private UIOppgavetildelingWindow1 mUIOppgavetildelingWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckBruseEmpLineSettingsStep32'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckBruseEmpLineSettingsStep32ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '04.03.2024' cell equals '2024-03-04'
        /// </summary>
        public string UIItem04032024CellValueAsString = "2024-03-04";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '20.03.2024' cell equals '2024-03-20'
        /// </summary>
        public string UIItem20032024CellValueAsString = "2024-03-20";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCullenRolesStep_10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckCullenRolesStep_10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '( )A - 8. Cullen, Damien (15:00 - 22:00)' cell equals '( )A - 8. Cullen, Damien (15:00 - 22:00)
        ///'
        /// </summary>
        public string UIA8CullenDamien150022CellText = "( )A - 8. Cullen, Damien (15:00 - 22:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )A - 8. Cullen, Damien (15:00 - 22:00)' cell equals '( )A - 8. Cullen, Damien (15:00 - 22:00)
        ///'
        /// </summary>
        public string UIA8CullenDamien150022Cell1Text = "( )A - 8. Cullen, Damien (15:00 - 22:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )D - 8. Cullen, Damien (07:00 - 15:00)' cell equals '( )D - 8. Cullen, Damien (07:00 - 15:00)
        ///'
        /// </summary>
        public string UID8CullenDamien070015CellText = "( )D - 8. Cullen, Damien (07:00 - 15:00)\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpGustavssonStep24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpGustavssonStep24ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Rows: 0' menu item equals 'Rows: 0'
        /// </summary>
        public string UIRows0MenuItemName = "Rows: 0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmploymentDressmannStep13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmploymentDressmannStep13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'chkReplacementModeIsReplace' check box equals 'True'
        /// </summary>
        public bool UIChkReplacementModeIsCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDoSetInactive' check box equals 'False'
        /// </summary>
        public bool UIChkDoSetInactiveCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that the 'Text' property of 'lnkDetail' PopupEdit equals '1 stk. meldinger (klikk her for detaljer)'
        /// </summary>
        public string UILnkDetailPopupEditText = "1 stk. meldinger (klikk her for detaljer)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckErikssonNoRolesStep_11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckErikssonNoRolesStep_11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )D (07:00 - 15:00)' cell equals '( )D (07:00 - 15:00)
        ///'
        /// </summary>
        public string UID07001500CellText = "( )D (07:00 - 15:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )D (07:00 - 15:00)' cell equals '( )D (07:00 - 15:00)
        ///'
        /// </summary>
        public string UID07001500Cell1Text = "( )D (07:00 - 15:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell3Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell4Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell5Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )N (22:00 - 08:00)' cell equals '( )N (22:00 - 08:00)
        ///'
        /// </summary>
        public string UIN22000800CellText = "( )N (22:00 - 08:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )N (22:00 - 08:00)' cell equals '( )N (22:00 - 08:00)
        ///'
        /// </summary>
        public string UIN22000800Cell1Text = "( )N (22:00 - 08:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )N (22:00 - 08:00)' cell equals '( )N (22:00 - 08:00)
        ///'
        /// </summary>
        public string UIN22000800Cell2Text = "( )N (22:00 - 08:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell6Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell7Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell8Text = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckIngessonEmpLineSettingsStep32'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckIngessonEmpLineSettingsStep32ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '21.03.2024' cell equals '21.03.2024'
        /// </summary>
        public string UIItem21032024CellText = "21.03.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '14.04.2024' cell equals '14.04.2024'
        /// </summary>
        public string UIItem14042024CellText = "14.04.2024";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesettingsBruseStep31'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesettingsBruseStep31ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '25' cell equals '100'
        /// </summary>
        public string UIItem25CellValueAsString = "100";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '15.01.2024' cell equals '2024-03-04'
        /// </summary>
        public string UIItem15012024CellValueAsString = "2024-03-04";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28.01.2024' cell equals '2024-03-20'
        /// </summary>
        public string UIItem28012024CellValueAsString = "2024-03-20";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '50' cell equals '40'
        /// </summary>
        public string UIItem50CellValueAsString = "40";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '29.01.2024' cell equals '2024-03-21'
        /// </summary>
        public string UIItem29012024CellValueAsString = "2024-03-21";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals '2024-04-14'
        /// </summary>
        public string UIItemCellValueAsString = "2024-04-14";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesettingsDressmannStep14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesettingsDressmannStep14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2024-01-14'
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString = "2024-01-14";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesettingsDressmannStep15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesettingsDressmannStep15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2024-01-15'
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString = "2024-01-15";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesettingsDressmannStep17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesettingsDressmannStep17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'chkReplacementModeIsReplace' check box equals 'True'
        /// </summary>
        public bool UIChkReplacementModeIsCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDoSetInactive' check box equals 'False'
        /// </summary>
        public bool UIChkDoSetInactiveCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkIncludeRoleAssignments' check box equals 'True'
        /// </summary>
        public bool UIChkIncludeRoleAssignCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'TURNUS' cell equals 'TURNUS'
        /// </summary>
        public string UITURNUSCellValueAsString = "TURNUS";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '25' cell equals '25'
        /// </summary>
        public string UIItem25CellValueAsString = "25";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'H' cell equals 'H'
        /// </summary>
        public string UIHCellValueAsString = "H";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '15.01.2024' cell equals '2024-01-15'
        /// </summary>
        public string UIItem15012024CellValueAsString = "2024-01-15";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28.01.2024' cell equals '2024-01-28'
        /// </summary>
        public string UIItem28012024CellValueAsString = "2024-01-28";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'TURNUS' cell equals 'TURNUS'
        /// </summary>
        public string UITURNUSCellValueAsString1 = "TURNUS";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '50' cell equals '50'
        /// </summary>
        public string UIItem50CellValueAsString = "50";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'H' cell equals 'H'
        /// </summary>
        public string UIHCellValueAsString1 = "H";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '29.01.2024' cell equals '2024-01-29'
        /// </summary>
        public string UIItem29012024CellValueAsString = "2024-01-29";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCellValueAsString = null;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesettingsDressmannStep18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesettingsDressmannStep18ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2024-01-15'
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString = "2024-01-15";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2024-01-28'
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString1 = "2024-01-28";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesettingsDressmannStep19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesettingsDressmannStep19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2024-01-29'
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString = "2024-01-29";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals ''
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString1 = null;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesettingsDressmannStep29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesettingsDressmannStep29ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '25' cell equals '50'
        /// </summary>
        public string UIItem25CellValueAsString = "50";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '15.01.2024' cell equals '2024-01-29'
        /// </summary>
        public string UIItem15012024CellValueAsString = "2024-01-29";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28.01.2024' cell equals ''
        /// </summary>
        public string UIItem28012024CellValueAsString = null;
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '50' cell equals '75'
        /// </summary>
        public string UIItem50CellValueAsString = "75";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '29.01.2024' cell equals ''
        /// </summary>
        public string UIItem29012024CellValueAsString = null;
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCellValueAsString = null;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesettingsGustavssonStep22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesettingsGustavssonStep22ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDoSetInactive' check box equals 'True'
        /// </summary>
        public bool UIChkDoSetInactiveCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDoDeleteEffectuation' check box equals 'True'
        /// </summary>
        public bool UIChkDoDeleteEffectuatCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkIncludeRoleAssignments' check box equals 'True'
        /// </summary>
        public bool UIChkIncludeRoleAssignCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesettingsVakantStep26_27'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesettingsVakantStep26_27ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'chkChangeEmployment' check box equals 'True'
        /// </summary>
        public bool UIChkChangeEmploymentCheckBoxReadOnly = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'leNewEmployment' LookUpEdit equals 'False'
        /// </summary>
        public bool UILeNewEmploymentLookUpEditEnabled = false;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'chkChangeToVacant' check box equals 'True'
        /// </summary>
        public bool UIChkChangeToVacantCheckBoxReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'eCustomVacantName' text box equals 'True'
        /// </summary>
        public bool UIECustomVacantNameEditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDoDeleteEffectuation' check box equals 'True'
        /// </summary>
        public bool UIChkDoDeleteEffectuatCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28.01.2024' cell equals '2024-01-07'
        /// </summary>
        public string UIItem28012024CellValueAsString = "2024-01-07";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '29.01.2024' cell equals '2024-01-08'
        /// </summary>
        public string UIItem29012024CellValueAsString = "2024-01-08";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesHvemVilJobbeStep23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesHvemVilJobbeStep23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Hvem vil jobbe' cell equals 'Hvem vil jobbe'
        /// </summary>
        public string UIHvemviljobbeCellText = "Hvem vil jobbe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesStep23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesStep23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell12ValueAsString = "NewPlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D) readonly'
        /// </summary>
        public string UIDCell7ValueAsString = "PlanShift (D) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D) readonly'
        /// </summary>
        public string UIDCell8ValueAsString = "PlanShift (D) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1) readonly'
        /// </summary>
        public string UIF1Cell4ValueAsString = "PlanShift (F1) readonly";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell13Text = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N)'
        /// </summary>
        public string UINCell3ValueAsString = "PlanShift (N)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N' cell equals 'N'
        /// </summary>
        public string UINCell4Text = "N";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N)'
        /// </summary>
        public string UINCell5ValueAsString = "PlanShift (N)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N' cell equals 'N'
        /// </summary>
        public string UINCell6Text = "N";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell5Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell9Text = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell10Text = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell14Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell15Text = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
        /// </summary>
        public string UIF1Cell6ValueAsString = "PlanShift (F1)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell8Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell9Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell11Text = "D";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty)'
        /// </summary>
        public string UIItemCell16ValueAsString = "PlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell10Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell12Text = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell13Text = "D";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty)'
        /// </summary>
        public string UIItemCell17ValueAsString = "PlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
        /// </summary>
        public string UIF1Cell7ValueAsString = "PlanShift (F1)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesStep8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesStep8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2) readonly'
        /// </summary>
        public string UIF2Cell1ValueAsString = "PlanShift (F2) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell3ValueAsString = "PlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell4ValueAsString = "PlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D) readonly'
        /// </summary>
        public string UIDCell2ValueAsString = "PlanShift (D) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell5ValueAsString = "PlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell6ValueAsString = "PlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell7ValueAsString = "PlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell8ValueAsString = "PlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1) readonly'
        /// </summary>
        public string UIF1CellValueAsString = "PlanShift (F1) readonly";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell2Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell3Text = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell9Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell4Text = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell3Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell1Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell10Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N' cell equals 'N'
        /// </summary>
        public string UINCell1Text = "N";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell2Text = "F1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesStep9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesStep9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2) readonly'
        /// </summary>
        public string UIF2Cell1ValueAsString = "PlanShift (F2) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell3ValueAsString = "PlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell4ValueAsString = "PlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1) readonly'
        /// </summary>
        public string UIF1Cell3ValueAsString = "PlanShift (F1) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A' cell equals 'PlanShift (A) readonly'
        /// </summary>
        public string UIACell5ValueAsString = "PlanShift (A) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D) readonly'
        /// </summary>
        public string UIDCell2ValueAsString = "PlanShift (D) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell5ValueAsString = "PlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A' cell equals 'PlanShift (A) readonly'
        /// </summary>
        public string UIACell6ValueAsString = "PlanShift (A) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D)'
        /// </summary>
        public string UIDCell5ValueAsString = "PlanShift (D)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A' cell equals 'PlanShift (A)'
        /// </summary>
        public string UIACell7ValueAsString = "PlanShift (A)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D) readonly'
        /// </summary>
        public string UIDCell6ValueAsString = "PlanShift (D) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell11ValueAsString = "PlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2) readonly'
        /// </summary>
        public string UIF2Cell3ValueAsString = "PlanShift (F2) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell10ValueAsString = "NewPlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
        /// </summary>
        public string UINCell2ValueAsString = "PlanShift (N) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
        /// </summary>
        public string UINCell1ValueAsString = "PlanShift (N) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2) readonly'
        /// </summary>
        public string UIF2Cell4ValueAsString = "PlanShift (F2) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1) readonly'
        /// </summary>
        public string UIF1Cell2ValueAsString = "PlanShift (F1) readonly";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOwnerInLineSettings'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOwnerInLineSettingsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'eOriginalOwnerComment' text box equals 'Aller, Cecilia'
        /// </summary>
        public string UIEOriginalOwnerCommenEditValueAsString = "Aller, Cecilia";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckReportBruseStep_6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckReportBruseStep_6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
        ///'
        /// </summary>
        public string UIA7BruseNiklas1500220CellText = "( )A - 7. Bruse, Niklas (15:00 - 22:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
        ///'
        /// </summary>
        public string UIA7BruseNiklas1500220Cell1Text = "( )A - 7. Bruse, Niklas (15:00 - 22:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )D - 7. Bruse, Niklas (07:00 - 15:00)' cell equals '( )D - 7. Bruse, Niklas (07:00 - 15:00)
        ///'
        /// </summary>
        public string UID7BruseNiklas0700150CellText = "( )D - 7. Bruse, Niklas (07:00 - 15:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )D - 7. Bruse, Niklas (07:00 - 15:00)' cell equals '( )D - 7. Bruse, Niklas (07:00 - 15:00)
        ///'
        /// </summary>
        public string UID7BruseNiklas0700150Cell1Text = "( )D - 7. Bruse, Niklas (07:00 - 15:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )N - 7. Bruse, Niklas (22:00 - 08:00)' cell equals '( )N - 7. Bruse, Niklas (22:00 - 08:00)
        ///'
        /// </summary>
        public string UIN7BruseNiklas2200080CellText = "( )N - 7. Bruse, Niklas (22:00 - 08:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )N - 7. Bruse, Niklas (22:00 - 08:00)' cell equals '( )N - 7. Bruse, Niklas (22:00 - 08:00)
        ///'
        /// </summary>
        public string UIN7BruseNiklas2200080Cell1Text = "( )N - 7. Bruse, Niklas (22:00 - 08:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )N - 7. Bruse, Niklas (22:00 - 08:00)' cell equals '( )N - 7. Bruse, Niklas (22:00 - 08:00)
        ///'
        /// </summary>
        public string UIN7BruseNiklas2200080Cell2Text = "( )N - 7. Bruse, Niklas (22:00 - 08:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )N - 7. Bruse, Niklas (22:00 - 08:00)' cell equals '( )N - 7. Bruse, Niklas (22:00 - 08:00)
        ///'
        /// </summary>
        public string UIN7BruseNiklas2200080Cell3Text = "( )N - 7. Bruse, Niklas (22:00 - 08:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
        ///'
        /// </summary>
        public string UIA7BruseNiklas1500220Cell2Text = "( )A - 7. Bruse, Niklas (15:00 - 22:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
        ///'
        /// </summary>
        public string UIA7BruseNiklas1500220Cell3Text = "( )A - 7. Bruse, Niklas (15:00 - 22:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
        ///'
        /// </summary>
        public string UIA7BruseNiklas1500220Cell4Text = "( )A - 7. Bruse, Niklas (15:00 - 22:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )D - 7. Bruse, Niklas (07:00 - 15:00)' cell equals '( )D - 7. Bruse, Niklas (07:00 - 15:00)
        ///'
        /// </summary>
        public string UID7BruseNiklas0700150Cell2Text = "( )D - 7. Bruse, Niklas (07:00 - 15:00)\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of '( )A - 7. Bruse, Niklas (15:00 - 22:00)' cell equals '( )A - 7. Bruse, Niklas (15:00 - 22:00)
        ///'
        /// </summary>
        public string UIA7BruseNiklas1500220Cell5Text = "( )A - 7. Bruse, Niklas (15:00 - 22:00)\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRowsStep4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRowsStep4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCellValueAsString = "PlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell1ValueAsString = "NewPlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A' cell equals 'PlanShift (A) readonly'
        /// </summary>
        public string UIACellValueAsString = "PlanShift (A) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A' cell equals 'PlanShift (A) readonly'
        /// </summary>
        public string UIACell1ValueAsString = "PlanShift (A) readonly";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell2Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCellText = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N' cell equals 'N'
        /// </summary>
        public string UINCellText = "N";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2CellText = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell3Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell1Text = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell4Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell2Text = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRowsStep4Bruse'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRowsStep4BruseExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Bruse, Niklas' cell equals 'Bruse, Niklas'
        /// </summary>
        public string UIBruseNiklasCellText = "Bruse, Niklas";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSwitchEmpOkButtonDisabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSwitchEmpOkButtonDisabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'OK' button equals 'False'
        /// </summary>
        public bool UIOKButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSwitchEmpRegStatusOkStep3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSwitchEmpRegStatusOkStep3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals '1 stk. meldinger (klikk her for detaljer)'
        /// </summary>
        public string UILnkDetailPopupEditValueAsString = "1 stk. meldinger (klikk her for detaljer)";
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDoSetInactive' check box equals 'True'
        /// </summary>
        public bool UIChkDoSetInactiveCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkIncludeRoleAssignments' check box equals 'True'
        /// </summary>
        public bool UIChkIncludeRoleAssignCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSwitchEmpRegStatusStep2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSwitchEmpRegStatusStep2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Fra-dato må oppgis' cell equals 'Fra-dato må oppgis'
        /// </summary>
        public string UIFradatomåoppgisCellValueAsString = "Fra-dato må oppgis";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Kan ikke bytte til annet stillingsforhold' cell equals 'Kan ikke bytte til annet stillingsforhold'
        /// </summary>
        public string UIKanikkebyttetilannetCellValueAsString = "Kan ikke bytte til annet stillingsforhold";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSwitchEmpRegStatusStep29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSwitchEmpRegStatusStep29ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Fra-dato må oppgis' cell equals 'Fra-dato må være større enn 29.01.2024'
        /// </summary>
        public string UIFradatomåoppgisCellValueAsString = "Fra-dato må være større enn 29.01.2024";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExchangeEmpCullenEriksson'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ExchangeEmpCullenErikssonParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'lueNewEmployee' LookUpEdit
        /// </summary>
        public string UILueNewEmployeeLookUpEditValueTypeName = "Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmployme" +
            "ntEntity";
        
        /// <summary>
        /// Type 'Eriksson, Mats - TURNUS/S 0 % 12.03.2018-31.12.2099' in 'lueNewEmployee' LookUpEdit
        /// </summary>
        public string UILueNewEmployeeLookUpEditValueAsString = "Eriksson, Mats - TURNUS/S 0 % 12.03.2018-31.12.2099";
        
        /// <summary>
        /// Type '2024-01-31 [SelectionStart]0' in 'pceDate' DateTimeEdit
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString = "2024-01-31 [SelectionStart]0";
        
        /// <summary>
        /// Select 'chkReplacementModeIsReplace' check box
        /// </summary>
        public bool UIChkReplacementModeIsCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'chkIncludeRoleAssignments' check box
        /// </summary>
        public bool UIChkIncludeRoleAssignCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExchangeEmploymentBruseStep31'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ExchangeEmploymentBruseStep31Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'lueNewEmployee' LookUpEdit
        /// </summary>
        public string UILueNewEmployeeLookUpEditValueTypeName = "Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmployme" +
            "ntEntity";
        
        /// <summary>
        /// Type 'Ingesson, Charlotte - TURNUS/A 40 % 11.06.2018-31.12.2099' in 'lueNewEmployee' LookUpEdit
        /// </summary>
        public string UILueNewEmployeeLookUpEditValueAsString = "Ingesson, Charlotte - TURNUS/A 40 % 11.06.2018-31.12.2099";
        
        /// <summary>
        /// Type '2024-03-21' in 'pceDate' DateTimeEdit
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString = "2024-03-21";
        
        /// <summary>
        /// Type '{Tab}' in 'pceDate' DateTimeEdit
        /// </summary>
        public string UIPceDateDateTimeEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExchangeEmploymentDressmannStep17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ExchangeEmploymentDressmannStep17Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'chkChangeEmployment' check box
        /// </summary>
        public bool UIChkChangeEmploymentCheckBoxChecked = true;
        
        /// <summary>
        /// Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'leNewEmployment' LookUpEdit
        /// </summary>
        public string UILeNewEmploymentLookUpEditValueTypeName = "Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmployme" +
            "ntEntity";
        
        /// <summary>
        /// Type 'Dressman, Dennis - TURNUS/H 50 % 09.01.2017-31.12.2099' in 'leNewEmployment' LookUpEdit
        /// </summary>
        public string UILeNewEmploymentLookUpEditValueAsString = "Dressman, Dennis - TURNUS/H 50 % 09.01.2017-31.12.2099";
        
        /// <summary>
        /// Type '2024-01-29' in 'pceDate' DateTimeEdit
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString = "2024-01-29";
        
        /// <summary>
        /// Type '{Tab}' in 'pceDate' DateTimeEdit
        /// </summary>
        public string UIPceDateDateTimeEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExchangeEmploymentDressmannStep29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ExchangeEmploymentDressmannStep29Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'lueNewEmployee' LookUpEdit
        /// </summary>
        public string UILueNewEmployeeLookUpEditValueTypeName = "Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmployme" +
            "ntEntity";
        
        /// <summary>
        /// Type 'Hallin, Per Erik - TURNUS/A 75 % 08.02.2016-31.12.2099' in 'lueNewEmployee' LookUpEdit
        /// </summary>
        public string UILueNewEmployeeLookUpEditValueAsString = "Hallin, Per Erik - TURNUS/A 75 % 08.02.2016-31.12.2099";
        
        /// <summary>
        /// Type '2024-01-29' in 'pceDate' DateTimeEdit
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString = "2024-01-29";
        
        /// <summary>
        /// Type '{Tab}' in 'pceDate' DateTimeEdit
        /// </summary>
        public string UIPceDateDateTimeEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExchangeEmploymentGustavssonStep22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ExchangeEmploymentGustavssonStep22Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'chkChangeToVacant' check box
        /// </summary>
        public bool UIChkChangeToVacantCheckBoxChecked = true;
        
        /// <summary>
        /// Type 'Hvem vil jobbe' in 'eCustomVacantName' text box
        /// </summary>
        public string UIECustomVacantNameEditValueAsString = "Hvem vil jobbe";
        
        /// <summary>
        /// Type '{Tab}' in 'eCustomVacantName' text box
        /// </summary>
        public string UIECustomVacantNameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'chkChangeEntirePeriod' check box
        /// </summary>
        public bool UIChkChangeEntirePerioCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExchangeEmploymentVakantStep26_27'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ExchangeEmploymentVakantStep26_27Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'lueNewEmployee' LookUpEdit
        /// </summary>
        public string UILueNewEmployeeLookUpEditValueTypeName = "Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmployme" +
            "ntEntity";
        
        /// <summary>
        /// Type 'Frost, Anna - TURNUS/S 25 % 08.05.2017-31.12.2099' in 'lueNewEmployee' LookUpEdit
        /// </summary>
        public string UILueNewEmployeeLookUpEditValueAsString = "Frost, Anna - TURNUS/S 25 % 08.05.2017-31.12.2099";
        
        /// <summary>
        /// Type '2024-01-08' in 'pceDate' DateTimeEdit
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString = "2024-01-08";
        
        /// <summary>
        /// Type '{Tab}' in 'pceDate' DateTimeEdit
        /// </summary>
        public string UIPceDateDateTimeEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'chkReplacementModeIsReplace' check box
        /// </summary>
        public bool UIChkReplacementModeIsCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExchangeLinesAllerBruse'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ExchangeLinesAllerBruseParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmploymentEntity' in 'lueNewEmployee' LookUpEdit
        /// </summary>
        public string UILueNewEmployeeLookUpEditValueTypeName = "Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.DataAccessLayers.RosterEmployme" +
            "ntEntity";
        
        /// <summary>
        /// Type 'Bruse, Niklas - TURNUS/S 100 % 05.04.2018-31.12.2099' in 'lueNewEmployee' LookUpEdit
        /// </summary>
        public string UILueNewEmployeeLookUpEditValueAsString = "Bruse, Niklas - TURNUS/S 100 % 05.04.2018-31.12.2099";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetVakansErikssonDressmanStep20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetVakansErikssonDressmanStep20Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel' in 'eOvertimeCode' LookUpEdit
        /// </summary>
        public string UIEOvertimeCodeLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel";
        
        /// <summary>
        /// Type 'V - Vakans' in 'eOvertimeCode' LookUpEdit
        /// </summary>
        public string UIEOvertimeCodeLookUpEditValueAsString = "V - Vakans";
        
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel' in 'eOvertimeCode' LookUpEdit
        /// </summary>
        public string UIEOvertimeCodeLookUpEditValueTypeName1 = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel";
        
        /// <summary>
        /// Type 'V - Vakans' in 'eOvertimeCode' LookUpEdit
        /// </summary>
        public string UIEOvertimeCodeLookUpEditValueAsString1 = "V - Vakans";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SwitchWholePeriod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SwitchWholePeriodParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'chkChangeEntirePeriod' check box
        /// </summary>
        public bool UIChkChangeEntirePerioCheckBoxChecked = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIRcMenuRibbon UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        
        public UIPnlRosterPlanClient1 UIPnlRosterPlanClient1
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient1 == null))
                {
                    this.mUIPnlRosterPlanClient1 = new UIPnlRosterPlanClient1(this);
                }
                return this.mUIPnlRosterPlanClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        
        private UIRcMenuRibbon mUIRcMenuRibbon;
        
        private UIPnlRosterPlanClient1 mUIPnlRosterPlanClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIIngessonCharlotteCell
        {
            get
            {
                if ((this.mUIIngessonCharlotteCell == null))
                {
                    this.mUIIngessonCharlotteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIIngessonCharlotteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]Col_EmployeeName";
                    this.mUIIngessonCharlotteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIngessonCharlotteCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIIngessonCharlotteCell;
            }
        }
        
        public DXCell UIAllerCeciliaCell
        {
            get
            {
                if ((this.mUIAllerCeciliaCell == null))
                {
                    this.mUIAllerCeciliaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAllerCeciliaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_EmployeeName";
                    this.mUIAllerCeciliaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAllerCeciliaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAllerCeciliaCell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_7";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_14";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        
        public DXCell UIACell1
        {
            get
            {
                if ((this.mUIACell1 == null))
                {
                    this.mUIACell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_20";
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell1;
            }
        }
        
        public DXCell UIBruseNiklasCell
        {
            get
            {
                if ((this.mUIBruseNiklasCell == null))
                {
                    this.mUIBruseNiklasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBruseNiklasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]Col_EmployeeName";
                    this.mUIBruseNiklasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBruseNiklasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBruseNiklasCell;
            }
        }
        
        public DXCell UIACell2
        {
            get
            {
                if ((this.mUIACell2 == null))
                {
                    this.mUIACell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_2";
                    this.mUIACell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell2;
            }
        }
        
        public DXCell UIDCell
        {
            get
            {
                if ((this.mUIDCell == null))
                {
                    this.mUIDCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_4";
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell;
            }
        }
        
        public DXCell UINCell
        {
            get
            {
                if ((this.mUINCell == null))
                {
                    this.mUINCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_10";
                    this.mUINCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell;
            }
        }
        
        public DXCell UIF2Cell
        {
            get
            {
                if ((this.mUIF2Cell == null))
                {
                    this.mUIF2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_12";
                    this.mUIF2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell;
            }
        }
        
        public DXCell UIACell3
        {
            get
            {
                if ((this.mUIACell3 == null))
                {
                    this.mUIACell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_18";
                    this.mUIACell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell3;
            }
        }
        
        public DXCell UIDCell1
        {
            get
            {
                if ((this.mUIDCell1 == null))
                {
                    this.mUIDCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_19";
                    this.mUIDCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell1;
            }
        }
        
        public DXCell UIACell4
        {
            get
            {
                if ((this.mUIACell4 == null))
                {
                    this.mUIACell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_20";
                    this.mUIACell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell4;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_7";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UICullenDamienCell
        {
            get
            {
                if ((this.mUICullenDamienCell == null))
                {
                    this.mUICullenDamienCell = new DXCell(this);
                    #region Search Criteria
                    this.mUICullenDamienCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]Col_EmployeeName";
                    this.mUICullenDamienCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUICullenDamienCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUICullenDamienCell;
            }
        }
        
        public DXCell UIF2Cell1
        {
            get
            {
                if ((this.mUIF2Cell1 == null))
                {
                    this.mUIF2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIF2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell1;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_1";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_2";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIDCell2
        {
            get
            {
                if ((this.mUIDCell2 == null))
                {
                    this.mUIDCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_6";
                    this.mUIDCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell2;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_11";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_14";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_18";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXCell UIF1Cell
        {
            get
            {
                if ((this.mUIF1Cell == null))
                {
                    this.mUIF1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_20";
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell;
            }
        }
        
        public DXCell UIF2Cell2
        {
            get
            {
                if ((this.mUIF2Cell2 == null))
                {
                    this.mUIF2Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_0";
                    this.mUIF2Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell2;
            }
        }
        
        public DXCell UIDCell3
        {
            get
            {
                if ((this.mUIDCell3 == null))
                {
                    this.mUIDCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_6";
                    this.mUIDCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell3;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_7";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXCell UIDCell4
        {
            get
            {
                if ((this.mUIDCell4 == null))
                {
                    this.mUIDCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_10";
                    this.mUIDCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell4;
            }
        }
        
        public DXCell UIF2Cell3
        {
            get
            {
                if ((this.mUIF2Cell3 == null))
                {
                    this.mUIF2Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_12";
                    this.mUIF2Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell3;
            }
        }
        
        public DXCell UIF1Cell1
        {
            get
            {
                if ((this.mUIF1Cell1 == null))
                {
                    this.mUIF1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_13";
                    this.mUIF1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell1;
            }
        }
        
        public DXCell UIItemCell10
        {
            get
            {
                if ((this.mUIItemCell10 == null))
                {
                    this.mUIItemCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_14";
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell10;
            }
        }
        
        public DXCell UINCell1
        {
            get
            {
                if ((this.mUINCell1 == null))
                {
                    this.mUINCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_17";
                    this.mUINCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell1;
            }
        }
        
        public DXCell UIF1Cell2
        {
            get
            {
                if ((this.mUIF1Cell2 == null))
                {
                    this.mUIF1Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_20";
                    this.mUIF1Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell2;
            }
        }
        
        public DXCell UIF1Cell3
        {
            get
            {
                if ((this.mUIF1Cell3 == null))
                {
                    this.mUIF1Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_3";
                    this.mUIF1Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell3;
            }
        }
        
        public DXCell UIACell5
        {
            get
            {
                if ((this.mUIACell5 == null))
                {
                    this.mUIACell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_5";
                    this.mUIACell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell5;
            }
        }
        
        public DXCell UIACell6
        {
            get
            {
                if ((this.mUIACell6 == null))
                {
                    this.mUIACell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_8";
                    this.mUIACell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell6;
            }
        }
        
        public DXCell UIDCell5
        {
            get
            {
                if ((this.mUIDCell5 == null))
                {
                    this.mUIDCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_9";
                    this.mUIDCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell5;
            }
        }
        
        public DXCell UIACell7
        {
            get
            {
                if ((this.mUIACell7 == null))
                {
                    this.mUIACell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_8";
                    this.mUIACell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell7;
            }
        }
        
        public DXCell UIDCell6
        {
            get
            {
                if ((this.mUIDCell6 == null))
                {
                    this.mUIDCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_9";
                    this.mUIDCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell6;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_11";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXCell UINCell2
        {
            get
            {
                if ((this.mUINCell2 == null))
                {
                    this.mUINCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_16";
                    this.mUINCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell2;
            }
        }
        
        public DXCell UIF2Cell4
        {
            get
            {
                if ((this.mUIF2Cell4 == null))
                {
                    this.mUIF2Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_19";
                    this.mUIF2Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell4;
            }
        }
        
        public DXCell UIDressmanDennisCell
        {
            get
            {
                if ((this.mUIDressmanDennisCell == null))
                {
                    this.mUIDressmanDennisCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDressmanDennisCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]Col_EmployeeName";
                    this.mUIDressmanDennisCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDressmanDennisCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDressmanDennisCell;
            }
        }
        
        public DXCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]Col_PositionPercent";
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public DXCell UIItem25Cell
        {
            get
            {
                if ((this.mUIItem25Cell == null))
                {
                    this.mUIItem25Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem25Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]Col_PositionPercent";
                    this.mUIItem25Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem25Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem25Cell;
            }
        }
        
        public DXCell UIItem50Cell
        {
            get
            {
                if ((this.mUIItem50Cell == null))
                {
                    this.mUIItem50Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem50Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]Col_PositionPercent";
                    this.mUIItem50Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem50Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem50Cell;
            }
        }
        
        public DXCell UIItem100Cell
        {
            get
            {
                if ((this.mUIItem100Cell == null))
                {
                    this.mUIItem100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]Col_PositionPercent";
                    this.mUIItem100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem100Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem100Cell;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_0";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXCell UIDCell7
        {
            get
            {
                if ((this.mUIDCell7 == null))
                {
                    this.mUIDCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_7";
                    this.mUIDCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell7;
            }
        }
        
        public DXCell UIDCell8
        {
            get
            {
                if ((this.mUIDCell8 == null))
                {
                    this.mUIDCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_14";
                    this.mUIDCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell8;
            }
        }
        
        public DXCell UIF1Cell4
        {
            get
            {
                if ((this.mUIF1Cell4 == null))
                {
                    this.mUIF1Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_20";
                    this.mUIF1Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell4;
            }
        }
        
        public DXCell UIHvemviljobbeCell
        {
            get
            {
                if ((this.mUIHvemviljobbeCell == null))
                {
                    this.mUIHvemviljobbeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHvemviljobbeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]Col_EmployeeName";
                    this.mUIHvemviljobbeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHvemviljobbeCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHvemviljobbeCell;
            }
        }
        
        public DXCell UIItemCell13
        {
            get
            {
                if ((this.mUIItemCell13 == null))
                {
                    this.mUIItemCell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_0";
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell13;
            }
        }
        
        public DXCell UINCell3
        {
            get
            {
                if ((this.mUINCell3 == null))
                {
                    this.mUINCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_1";
                    this.mUINCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell3;
            }
        }
        
        public DXCell UINCell4
        {
            get
            {
                if ((this.mUINCell4 == null))
                {
                    this.mUINCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_2";
                    this.mUINCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell4;
            }
        }
        
        public DXCell UINCell5
        {
            get
            {
                if ((this.mUINCell5 == null))
                {
                    this.mUINCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_3";
                    this.mUINCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell5;
            }
        }
        
        public DXCell UINCell6
        {
            get
            {
                if ((this.mUINCell6 == null))
                {
                    this.mUINCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_4";
                    this.mUINCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell6;
            }
        }
        
        public DXCell UIF1Cell5
        {
            get
            {
                if ((this.mUIF1Cell5 == null))
                {
                    this.mUIF1Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_6";
                    this.mUIF1Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell5;
            }
        }
        
        public DXCell UIDCell9
        {
            get
            {
                if ((this.mUIDCell9 == null))
                {
                    this.mUIDCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_7";
                    this.mUIDCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell9;
            }
        }
        
        public DXCell UIDCell10
        {
            get
            {
                if ((this.mUIDCell10 == null))
                {
                    this.mUIDCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_8";
                    this.mUIDCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell10;
            }
        }
        
        public DXCell UIItemCell14
        {
            get
            {
                if ((this.mUIItemCell14 == null))
                {
                    this.mUIItemCell14 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_9";
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell14.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell14;
            }
        }
        
        public DXCell UIItemCell15
        {
            get
            {
                if ((this.mUIItemCell15 == null))
                {
                    this.mUIItemCell15 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_10";
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell15.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell15;
            }
        }
        
        public DXCell UIF1Cell6
        {
            get
            {
                if ((this.mUIF1Cell6 == null))
                {
                    this.mUIF1Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_11";
                    this.mUIF1Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell6;
            }
        }
        
        public DXCell UIACell8
        {
            get
            {
                if ((this.mUIACell8 == null))
                {
                    this.mUIACell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_12";
                    this.mUIACell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell8;
            }
        }
        
        public DXCell UIACell9
        {
            get
            {
                if ((this.mUIACell9 == null))
                {
                    this.mUIACell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_13";
                    this.mUIACell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell9;
            }
        }
        
        public DXCell UIDCell11
        {
            get
            {
                if ((this.mUIDCell11 == null))
                {
                    this.mUIDCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_14";
                    this.mUIDCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell11;
            }
        }
        
        public DXCell UIItemCell16
        {
            get
            {
                if ((this.mUIItemCell16 == null))
                {
                    this.mUIItemCell16 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_15";
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell16.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell16;
            }
        }
        
        public DXCell UIACell10
        {
            get
            {
                if ((this.mUIACell10 == null))
                {
                    this.mUIACell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_16";
                    this.mUIACell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell10;
            }
        }
        
        public DXCell UIDCell12
        {
            get
            {
                if ((this.mUIDCell12 == null))
                {
                    this.mUIDCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_17";
                    this.mUIDCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell12;
            }
        }
        
        public DXCell UIDCell13
        {
            get
            {
                if ((this.mUIDCell13 == null))
                {
                    this.mUIDCell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_18";
                    this.mUIDCell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell13;
            }
        }
        
        public DXCell UIItemCell17
        {
            get
            {
                if ((this.mUIItemCell17 == null))
                {
                    this.mUIItemCell17 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_19";
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell17.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell17;
            }
        }
        
        public DXCell UIF1Cell7
        {
            get
            {
                if ((this.mUIF1Cell7 == null))
                {
                    this.mUIF1Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_20";
                    this.mUIF1Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell7;
            }
        }
        
        public DXCell UIVAKANTCell
        {
            get
            {
                if ((this.mUIVAKANTCell == null))
                {
                    this.mUIVAKANTCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVAKANTCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]Col_EmployeeName";
                    this.mUIVAKANTCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVAKANTCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIVAKANTCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIIngessonCharlotteCell;
        
        private DXCell mUIAllerCeciliaCell;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIACell;
        
        private DXCell mUIACell1;
        
        private DXCell mUIBruseNiklasCell;
        
        private DXCell mUIACell2;
        
        private DXCell mUIDCell;
        
        private DXCell mUINCell;
        
        private DXCell mUIF2Cell;
        
        private DXCell mUIACell3;
        
        private DXCell mUIDCell1;
        
        private DXCell mUIACell4;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUICullenDamienCell;
        
        private DXCell mUIF2Cell1;
        
        private DXCell mUIItemCell3;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIDCell2;
        
        private DXCell mUIItemCell5;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell7;
        
        private DXCell mUIItemCell8;
        
        private DXCell mUIF1Cell;
        
        private DXCell mUIF2Cell2;
        
        private DXCell mUIDCell3;
        
        private DXCell mUIItemCell9;
        
        private DXCell mUIDCell4;
        
        private DXCell mUIF2Cell3;
        
        private DXCell mUIF1Cell1;
        
        private DXCell mUIItemCell10;
        
        private DXCell mUINCell1;
        
        private DXCell mUIF1Cell2;
        
        private DXCell mUIF1Cell3;
        
        private DXCell mUIACell5;
        
        private DXCell mUIACell6;
        
        private DXCell mUIDCell5;
        
        private DXCell mUIACell7;
        
        private DXCell mUIDCell6;
        
        private DXCell mUIItemCell11;
        
        private DXCell mUINCell2;
        
        private DXCell mUIF2Cell4;
        
        private DXCell mUIDressmanDennisCell;
        
        private DXCell mUIItem0Cell;
        
        private DXCell mUIItem25Cell;
        
        private DXCell mUIItem50Cell;
        
        private DXCell mUIItem100Cell;
        
        private DXCell mUIItemCell12;
        
        private DXCell mUIDCell7;
        
        private DXCell mUIDCell8;
        
        private DXCell mUIF1Cell4;
        
        private DXCell mUIHvemviljobbeCell;
        
        private DXCell mUIItemCell13;
        
        private DXCell mUINCell3;
        
        private DXCell mUINCell4;
        
        private DXCell mUINCell5;
        
        private DXCell mUINCell6;
        
        private DXCell mUIF1Cell5;
        
        private DXCell mUIDCell9;
        
        private DXCell mUIDCell10;
        
        private DXCell mUIItemCell14;
        
        private DXCell mUIItemCell15;
        
        private DXCell mUIF1Cell6;
        
        private DXCell mUIACell8;
        
        private DXCell mUIACell9;
        
        private DXCell mUIDCell11;
        
        private DXCell mUIItemCell16;
        
        private DXCell mUIACell10;
        
        private DXCell mUIDCell12;
        
        private DXCell mUIDCell13;
        
        private DXCell mUIItemCell17;
        
        private DXCell mUIF1Cell7;
        
        private DXCell mUIVAKANTCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable1 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable1(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable1 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable1 : DXGrid
    {
        
        public UIGcRosterPlanTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAllerCeciliaCell
        {
            get
            {
                if ((this.mUIAllerCeciliaCell == null))
                {
                    this.mUIAllerCeciliaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAllerCeciliaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]EmployeeName";
                    this.mUIAllerCeciliaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAllerCeciliaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAllerCeciliaCell;
            }
        }
        
        public DXCell UICullenDamienCell
        {
            get
            {
                if ((this.mUICullenDamienCell == null))
                {
                    this.mUICullenDamienCell = new DXCell(this);
                    #region Search Criteria
                    this.mUICullenDamienCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]EmployeeName";
                    this.mUICullenDamienCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUICullenDamienCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUICullenDamienCell;
            }
        }
        
        public DXCell UIBruseNiklasCell
        {
            get
            {
                if ((this.mUIBruseNiklasCell == null))
                {
                    this.mUIBruseNiklasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBruseNiklasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]EmployeeName";
                    this.mUIBruseNiklasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBruseNiklasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBruseNiklasCell;
            }
        }
        
        public DXCell UIDressmanDennisCell
        {
            get
            {
                if ((this.mUIDressmanDennisCell == null))
                {
                    this.mUIDressmanDennisCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDressmanDennisCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]EmployeeName";
                    this.mUIDressmanDennisCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDressmanDennisCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDressmanDennisCell;
            }
        }
        
        public DXCell UIDressmanDennisCell1
        {
            get
            {
                if ((this.mUIDressmanDennisCell1 == null))
                {
                    this.mUIDressmanDennisCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDressmanDennisCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]Position";
                    this.mUIDressmanDennisCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDressmanDennisCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDressmanDennisCell1;
            }
        }
        
        public DXCell UIDressmanDennisCell2
        {
            get
            {
                if ((this.mUIDressmanDennisCell2 == null))
                {
                    this.mUIDressmanDennisCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDressmanDennisCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]Position";
                    this.mUIDressmanDennisCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDressmanDennisCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDressmanDennisCell2;
            }
        }
        
        public DXCell UIGustavssonRobertCell
        {
            get
            {
                if ((this.mUIGustavssonRobertCell == null))
                {
                    this.mUIGustavssonRobertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]EmployeeName";
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGustavssonRobertCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGustavssonRobertCell;
            }
        }
        
        public DXCell UIHvemviljobbeCell
        {
            get
            {
                if ((this.mUIHvemviljobbeCell == null))
                {
                    this.mUIHvemviljobbeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHvemviljobbeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]EmployeeName";
                    this.mUIHvemviljobbeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHvemviljobbeCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHvemviljobbeCell;
            }
        }
        
        public DXCell UITURNUSCell
        {
            get
            {
                if ((this.mUITURNUSCell == null))
                {
                    this.mUITURNUSCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITURNUSCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]Position";
                    this.mUITURNUSCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITURNUSCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUITURNUSCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAllerCeciliaCell;
        
        private DXCell mUICullenDamienCell;
        
        private DXCell mUIBruseNiklasCell;
        
        private DXCell mUIDressmanDennisCell;
        
        private DXCell mUIDressmanDennisCell1;
        
        private DXCell mUIDressmanDennisCell2;
        
        private DXCell mUIGustavssonRobertCell;
        
        private DXCell mUIHvemviljobbeCell;
        
        private DXCell mUITURNUSCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRcMenuRibbon : DXRibbon
    {
        
        public UIRcMenuRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpFilterRibbonPage UIRpFilterRibbonPage
        {
            get
            {
                if ((this.mUIRpFilterRibbonPage == null))
                {
                    this.mUIRpFilterRibbonPage = new UIRpFilterRibbonPage(this);
                }
                return this.mUIRpFilterRibbonPage;
            }
        }
        
        public UIPopupContainerEditPopupEdit UIPopupContainerEditPopupEdit
        {
            get
            {
                if ((this.mUIPopupContainerEditPopupEdit == null))
                {
                    this.mUIPopupContainerEditPopupEdit = new UIPopupContainerEditPopupEdit(this);
                }
                return this.mUIPopupContainerEditPopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIRpFilterRibbonPage mUIRpFilterRibbonPage;
        
        private UIPopupContainerEditPopupEdit mUIPopupContainerEditPopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpFilterRibbonPage : DXRibbonPage
    {
        
        public UIRpFilterRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpgFilterRibbonPageGroup UIRpgFilterRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgFilterRibbonPageGroup == null))
                {
                    this.mUIRpgFilterRibbonPageGroup = new UIRpgFilterRibbonPageGroup(this);
                }
                return this.mUIRpgFilterRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgFilterRibbonPageGroup mUIRpgFilterRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpgFilterRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgFilterRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonEditItem UIDdlFilterRibbonEditItem
        {
            get
            {
                if ((this.mUIDdlFilterRibbonEditItem == null))
                {
                    this.mUIDdlFilterRibbonEditItem = new DXRibbonEditItem(this);
                    #region Search Criteria
                    this.mUIDdlFilterRibbonEditItem.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlFilter";
                    this.mUIDdlFilterRibbonEditItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonEditItem";
                    this.mUIDdlFilterRibbonEditItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDdlFilterRibbonEditItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonEditItem mUIDdlFilterRibbonEditItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerEditPopupEdit : DXPopupEdit
    {
        
        public UIPopupContainerEditPopupEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenuPopupContainerEdit[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupContainerFormWindow UIPopupContainerFormWindow
        {
            get
            {
                if ((this.mUIPopupContainerFormWindow == null))
                {
                    this.mUIPopupContainerFormWindow = new UIPopupContainerFormWindow(this);
                }
                return this.mUIPopupContainerFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupContainerFormWindow mUIPopupContainerFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerFormWindow : DXWindow
    {
        
        public UIPopupContainerFormWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenuPopupContainerEdit[0]PopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDdlFilterPopupContaiClient UIDdlFilterPopupContaiClient
        {
            get
            {
                if ((this.mUIDdlFilterPopupContaiClient == null))
                {
                    this.mUIDdlFilterPopupContaiClient = new UIDdlFilterPopupContaiClient(this);
                }
                return this.mUIDdlFilterPopupContaiClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDdlFilterPopupContaiClient mUIDdlFilterPopupContaiClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDdlFilterPopupContaiClient : DXTestControl
    {
        
        public UIDdlFilterPopupContaiClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlFilterPopupContainerControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDdlFilterTreeListTreeList UIDdlFilterTreeListTreeList
        {
            get
            {
                if ((this.mUIDdlFilterTreeListTreeList == null))
                {
                    this.mUIDdlFilterTreeListTreeList = new UIDdlFilterTreeListTreeList(this);
                }
                return this.mUIDdlFilterTreeListTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UIDdlFilterTreeListTreeList mUIDdlFilterTreeListTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDdlFilterTreeListTreeList : DXTreeList
    {
        
        public UIDdlFilterTreeListTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlFilterTreeList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTreeList";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode2TreeListNode UINode2TreeListNode
        {
            get
            {
                if ((this.mUINode2TreeListNode == null))
                {
                    this.mUINode2TreeListNode = new UINode2TreeListNode(this);
                }
                return this.mUINode2TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode2TreeListNode mUINode2TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode2TreeListNode : DXTreeListNode
    {
        
        public UINode2TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode1TreeListNode UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode1TreeListNode mUINode1TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode : DXTreeListNode
    {
        
        public UINode1TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode1TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode1TreeListNodeCheckBox == null))
                {
                    this.mUINode1TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode1TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
                    this.mUINode1TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode1TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode1TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode1TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient1 : DXTestControl
    {
        
        public UIPnlRosterPlanClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanGrid1Custom1 UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom1(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanGrid1Custom1 mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom1 : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable2 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable2(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable2 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable2 : DXGrid
    {
        
        public UIGcRosterPlanTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAllerCeciliaCell
        {
            get
            {
                if ((this.mUIAllerCeciliaCell == null))
                {
                    this.mUIAllerCeciliaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAllerCeciliaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle1";
                    this.mUIAllerCeciliaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAllerCeciliaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAllerCeciliaCell;
            }
        }
        
        public DXCell UIBruseNiklasCell
        {
            get
            {
                if ((this.mUIBruseNiklasCell == null))
                {
                    this.mUIBruseNiklasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBruseNiklasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]ColumnHandle1";
                    this.mUIBruseNiklasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBruseNiklasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBruseNiklasCell;
            }
        }
        
        public DXCell UICullenDamienCell
        {
            get
            {
                if ((this.mUICullenDamienCell == null))
                {
                    this.mUICullenDamienCell = new DXCell(this);
                    #region Search Criteria
                    this.mUICullenDamienCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]ColumnHandle1";
                    this.mUICullenDamienCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUICullenDamienCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUICullenDamienCell;
            }
        }
        
        public DXCell UIDressmanDennisCell
        {
            get
            {
                if ((this.mUIDressmanDennisCell == null))
                {
                    this.mUIDressmanDennisCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDressmanDennisCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]ColumnHandle1";
                    this.mUIDressmanDennisCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDressmanDennisCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDressmanDennisCell;
            }
        }
        
        public DXCell UIDressmanDennisCell1
        {
            get
            {
                if ((this.mUIDressmanDennisCell1 == null))
                {
                    this.mUIDressmanDennisCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDressmanDennisCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]ColumnHandle1";
                    this.mUIDressmanDennisCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDressmanDennisCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDressmanDennisCell1;
            }
        }
        
        public DXCell UIDressmanDennisCell2
        {
            get
            {
                if ((this.mUIDressmanDennisCell2 == null))
                {
                    this.mUIDressmanDennisCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDressmanDennisCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]ColumnHandle1";
                    this.mUIDressmanDennisCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDressmanDennisCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDressmanDennisCell2;
            }
        }
        
        public DXCell UIGustavssonRobertCell
        {
            get
            {
                if ((this.mUIGustavssonRobertCell == null))
                {
                    this.mUIGustavssonRobertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]ColumnHandle1";
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGustavssonRobertCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGustavssonRobertCell;
            }
        }
        
        public DXCell UIHvemviljobbeCell
        {
            get
            {
                if ((this.mUIHvemviljobbeCell == null))
                {
                    this.mUIHvemviljobbeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHvemviljobbeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]ColumnHandle1";
                    this.mUIHvemviljobbeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHvemviljobbeCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHvemviljobbeCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAllerCeciliaCell;
        
        private DXCell mUIBruseNiklasCell;
        
        private DXCell mUICullenDamienCell;
        
        private DXCell mUIDressmanDennisCell;
        
        private DXCell mUIDressmanDennisCell1;
        
        private DXCell mUIDressmanDennisCell2;
        
        private DXCell mUIGustavssonRobertCell;
        
        private DXCell mUIHvemviljobbeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIByttansattstillingsfMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIByttansattstillingsfMenuBaseButtonItem == null))
                {
                    this.mUIByttansattstillingsfMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIByttansattstillingsfMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[2]";
                    this.mUIByttansattstillingsfMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIByttansattstillingsfMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIEndrelinjeinnstillinMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIEndrelinjeinnstillinMenuBaseButtonItem == null))
                {
                    this.mUIEndrelinjeinnstillinMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIEndrelinjeinnstillinMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIEndrelinjeinnstillinMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIEndrelinjeinnstillinMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIBarButtonItemLink4MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink4MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink4MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink4MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[4]";
                    this.mUIBarButtonItemLink4MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink4MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIByttansattstillingsfMenuBaseButtonItem1
        {
            get
            {
                if ((this.mUIByttansattstillingsfMenuBaseButtonItem1 == null))
                {
                    this.mUIByttansattstillingsfMenuBaseButtonItem1 = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIByttansattstillingsfMenuBaseButtonItem1.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[2]";
                    this.mUIByttansattstillingsfMenuBaseButtonItem1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIByttansattstillingsfMenuBaseButtonItem1;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIByttansattstillingsfMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIEndrelinjeinnstillinMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIBarButtonItemLink4MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIByttansattstillingsfMenuBaseButtonItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIByttansattWindow : DXWindow
    {
        
        public UIByttansattWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Bytt ansatt";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        
        public UIDbFooterCustom UIDbFooterCustom
        {
            get
            {
                if ((this.mUIDbFooterCustom == null))
                {
                    this.mUIDbFooterCustom = new UIDbFooterCustom(this);
                }
                return this.mUIDbFooterCustom;
            }
        }
        
        public DXPopupEdit UILnkDetailPopupEdit
        {
            get
            {
                if ((this.mUILnkDetailPopupEdit == null))
                {
                    this.mUILnkDetailPopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "lnkDetail";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "4";
                    this.mUILnkDetailPopupEdit.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUILnkDetailPopupEdit;
            }
        }
        
        public UIDbFooterCustom1 UIDbFooterCustom1
        {
            get
            {
                if ((this.mUIDbFooterCustom1 == null))
                {
                    this.mUIDbFooterCustom1 = new UIDbFooterCustom1(this);
                }
                return this.mUIDbFooterCustom1;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        
        private UIDbFooterCustom mUIDbFooterCustom;
        
        private DXPopupEdit mUILnkDetailPopupEdit;
        
        private UIDbFooterCustom1 mUIDbFooterCustom1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        
        public UIGsPanelControl1Client UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client mUIGsPanelControl3Client;
        
        private UIGsPanelControl1Client mUIGsPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl3Client : DXTestControl
    {
        
        public UIGsPanelControl3Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl2Client UIGsPanelControl2Client
        {
            get
            {
                if ((this.mUIGsPanelControl2Client == null))
                {
                    this.mUIGsPanelControl2Client = new UIGsPanelControl2Client(this);
                }
                return this.mUIGsPanelControl2Client;
            }
        }
        
        public UIGsPanelControl4Client UIGsPanelControl4Client
        {
            get
            {
                if ((this.mUIGsPanelControl4Client == null))
                {
                    this.mUIGsPanelControl4Client = new UIGsPanelControl4Client(this);
                }
                return this.mUIGsPanelControl4Client;
            }
        }
        
        public UIGsPanelControl5Client UIGsPanelControl5Client
        {
            get
            {
                if ((this.mUIGsPanelControl5Client == null))
                {
                    this.mUIGsPanelControl5Client = new UIGsPanelControl5Client(this);
                }
                return this.mUIGsPanelControl5Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl2Client mUIGsPanelControl2Client;
        
        private UIGsPanelControl4Client mUIGsPanelControl4Client;
        
        private UIGsPanelControl5Client mUIGsPanelControl5Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl2Client : DXTestControl
    {
        
        public UIGsPanelControl2Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UILueNewEmployeeLookUpEdit
        {
            get
            {
                if ((this.mUILueNewEmployeeLookUpEdit == null))
                {
                    this.mUILueNewEmployeeLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILueNewEmployeeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "lueNewEmployee";
                    this.mUILueNewEmployeeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    #endregion
                }
                return this.mUILueNewEmployeeLookUpEdit;
            }
        }
        
        public DXCheckBox UIChkChangeEmploymentCheckBox
        {
            get
            {
                if ((this.mUIChkChangeEmploymentCheckBox == null))
                {
                    this.mUIChkChangeEmploymentCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkChangeEmploymentCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkChangeEmployment";
                    this.mUIChkChangeEmploymentCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkChangeEmploymentCheckBox.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIChkChangeEmploymentCheckBox;
            }
        }
        
        public DXLookUpEdit UILeNewEmploymentLookUpEdit
        {
            get
            {
                if ((this.mUILeNewEmploymentLookUpEdit == null))
                {
                    this.mUILeNewEmploymentLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILeNewEmploymentLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leNewEmployment";
                    this.mUILeNewEmploymentLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    #endregion
                }
                return this.mUILeNewEmploymentLookUpEdit;
            }
        }
        
        public DXCheckBox UIChkChangeToVacantCheckBox
        {
            get
            {
                if ((this.mUIChkChangeToVacantCheckBox == null))
                {
                    this.mUIChkChangeToVacantCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkChangeToVacantCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkChangeToVacant";
                    this.mUIChkChangeToVacantCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkChangeToVacantCheckBox.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIChkChangeToVacantCheckBox;
            }
        }
        
        public DXTextEdit UIECustomVacantNameEdit
        {
            get
            {
                if ((this.mUIECustomVacantNameEdit == null))
                {
                    this.mUIECustomVacantNameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIECustomVacantNameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eCustomVacantName";
                    this.mUIECustomVacantNameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIECustomVacantNameEdit.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIECustomVacantNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUILueNewEmployeeLookUpEdit;
        
        private DXCheckBox mUIChkChangeEmploymentCheckBox;
        
        private DXLookUpEdit mUILeNewEmploymentLookUpEdit;
        
        private DXCheckBox mUIChkChangeToVacantCheckBox;
        
        private DXTextEdit mUIECustomVacantNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl4Client : DXTestControl
    {
        
        public UIGsPanelControl4Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl4";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkChangeEntirePerioCheckBox
        {
            get
            {
                if ((this.mUIChkChangeEntirePerioCheckBox == null))
                {
                    this.mUIChkChangeEntirePerioCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkChangeEntirePerioCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkChangeEntirePeriod";
                    this.mUIChkChangeEntirePerioCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkChangeEntirePerioCheckBox.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIChkChangeEntirePerioCheckBox;
            }
        }
        
        public UIEFromDateCustom UIEFromDateCustom
        {
            get
            {
                if ((this.mUIEFromDateCustom == null))
                {
                    this.mUIEFromDateCustom = new UIEFromDateCustom(this);
                }
                return this.mUIEFromDateCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkChangeEntirePerioCheckBox;
        
        private UIEFromDateCustom mUIEFromDateCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEFromDateCustom : DXTestControl
    {
        
        public UIEFromDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eFromDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl5Client : DXTestControl
    {
        
        public UIGsPanelControl5Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl5";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkReplacementModeIsCheckBox
        {
            get
            {
                if ((this.mUIChkReplacementModeIsCheckBox == null))
                {
                    this.mUIChkReplacementModeIsCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkReplacementModeIsCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkReplacementModeIsReplace";
                    this.mUIChkReplacementModeIsCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkReplacementModeIsCheckBox.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIChkReplacementModeIsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkReplacementModeIsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl1Client : DXTestControl
    {
        
        public UIGsPanelControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public UIGcOriginalLineClient UIGcOriginalLineClient
        {
            get
            {
                if ((this.mUIGcOriginalLineClient == null))
                {
                    this.mUIGcOriginalLineClient = new UIGcOriginalLineClient(this);
                }
                return this.mUIGcOriginalLineClient;
            }
        }
        
        public UIGcRecieverClient UIGcRecieverClient
        {
            get
            {
                if ((this.mUIGcRecieverClient == null))
                {
                    this.mUIGcRecieverClient = new UIGcRecieverClient(this);
                }
                return this.mUIGcRecieverClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcOriginalLineClient mUIGcOriginalLineClient;
        
        private UIGcRecieverClient mUIGcRecieverClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcOriginalLineClient : DXTestControl
    {
        
        public UIGcOriginalLineClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcOriginalLine";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkDoSetInactiveCheckBox
        {
            get
            {
                if ((this.mUIChkDoSetInactiveCheckBox == null))
                {
                    this.mUIChkDoSetInactiveCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkDoSetInactiveCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkDoSetInactive";
                    this.mUIChkDoSetInactiveCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkDoSetInactiveCheckBox.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIChkDoSetInactiveCheckBox;
            }
        }
        
        public UIGridLinesTable UIGridLinesTable
        {
            get
            {
                if ((this.mUIGridLinesTable == null))
                {
                    this.mUIGridLinesTable = new UIGridLinesTable(this);
                }
                return this.mUIGridLinesTable;
            }
        }
        
        public DXCheckBox UIChkDoDeleteEffectuatCheckBox
        {
            get
            {
                if ((this.mUIChkDoDeleteEffectuatCheckBox == null))
                {
                    this.mUIChkDoDeleteEffectuatCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkDoDeleteEffectuatCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkDoDeleteEffectuation";
                    this.mUIChkDoDeleteEffectuatCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkDoDeleteEffectuatCheckBox.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIChkDoDeleteEffectuatCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkDoSetInactiveCheckBox;
        
        private UIGridLinesTable mUIGridLinesTable;
        
        private DXCheckBox mUIChkDoDeleteEffectuatCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridLinesTable : DXGrid
    {
        
        public UIGridLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public DXCell UITURNUSCell
        {
            get
            {
                if ((this.mUITURNUSCell == null))
                {
                    this.mUITURNUSCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITURNUSCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridLinesGridControlCell[View]gridView1[Row]0[Column]gridColumn2";
                    this.mUITURNUSCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITURNUSCell.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUITURNUSCell;
            }
        }
        
        public DXCell UIItem25Cell
        {
            get
            {
                if ((this.mUIItem25Cell == null))
                {
                    this.mUIItem25Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem25Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridLinesGridControlCell[View]gridView1[Row]0[Column]gridColumn3";
                    this.mUIItem25Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem25Cell.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIItem25Cell;
            }
        }
        
        public DXCell UIHCell
        {
            get
            {
                if ((this.mUIHCell == null))
                {
                    this.mUIHCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridLinesGridControlCell[View]gridView1[Row]0[Column]gridColumn4";
                    this.mUIHCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHCell.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIHCell;
            }
        }
        
        public DXCell UIItem15012024Cell
        {
            get
            {
                if ((this.mUIItem15012024Cell == null))
                {
                    this.mUIItem15012024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem15012024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridLinesGridControlCell[View]gridView1[Row]0[Column]gridColumn5";
                    this.mUIItem15012024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem15012024Cell.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIItem15012024Cell;
            }
        }
        
        public DXCell UIItem28012024Cell
        {
            get
            {
                if ((this.mUIItem28012024Cell == null))
                {
                    this.mUIItem28012024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem28012024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridLinesGridControlCell[View]gridView1[Row]0[Column]gridColumn6";
                    this.mUIItem28012024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem28012024Cell.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIItem28012024Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITURNUSCell;
        
        private DXCell mUIItem25Cell;
        
        private DXCell mUIHCell;
        
        private DXCell mUIItem15012024Cell;
        
        private DXCell mUIItem28012024Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRecieverClient : DXTestControl
    {
        
        public UIGcRecieverClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcReciever";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkIncludeRoleAssignCheckBox
        {
            get
            {
                if ((this.mUIChkIncludeRoleAssignCheckBox == null))
                {
                    this.mUIChkIncludeRoleAssignCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkIncludeRoleAssignCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkIncludeRoleAssignments";
                    this.mUIChkIncludeRoleAssignCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkIncludeRoleAssignCheckBox.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIChkIncludeRoleAssignCheckBox;
            }
        }
        
        public UIGridNewLinesTable UIGridNewLinesTable
        {
            get
            {
                if ((this.mUIGridNewLinesTable == null))
                {
                    this.mUIGridNewLinesTable = new UIGridNewLinesTable(this);
                }
                return this.mUIGridNewLinesTable;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkIncludeRoleAssignCheckBox;
        
        private UIGridNewLinesTable mUIGridNewLinesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridNewLinesTable : DXGrid
    {
        
        public UIGridNewLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridNewLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public DXCell UITURNUSCell
        {
            get
            {
                if ((this.mUITURNUSCell == null))
                {
                    this.mUITURNUSCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITURNUSCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridNewLinesGridControlCell[View]viewNewLines[Row]0[Column]colNewRuleSet";
                    this.mUITURNUSCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITURNUSCell.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUITURNUSCell;
            }
        }
        
        public DXCell UIItem50Cell
        {
            get
            {
                if ((this.mUIItem50Cell == null))
                {
                    this.mUIItem50Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem50Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridNewLinesGridControlCell[View]viewNewLines[Row]0[Column]colNewPositionPercent";
                    this.mUIItem50Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem50Cell.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIItem50Cell;
            }
        }
        
        public DXCell UIHCell
        {
            get
            {
                if ((this.mUIHCell == null))
                {
                    this.mUIHCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridNewLinesGridControlCell[View]viewNewLines[Row]0[Column]colNewPositionCategory" +
                        "";
                    this.mUIHCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHCell.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIHCell;
            }
        }
        
        public DXCell UIItem29012024Cell
        {
            get
            {
                if ((this.mUIItem29012024Cell == null))
                {
                    this.mUIItem29012024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem29012024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridNewLinesGridControlCell[View]viewNewLines[Row]0[Column]colNewFromDate";
                    this.mUIItem29012024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem29012024Cell.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIItem29012024Cell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridNewLinesGridControlCell[View]viewNewLines[Row]0[Column]colNewToDate";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITURNUSCell;
        
        private DXCell mUIItem50Cell;
        
        private DXCell mUIHCell;
        
        private DXCell mUIItem29012024Cell;
        
        private DXCell mUIItemCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDbFooterCustom : DXTestControl
    {
        
        public UIDbFooterCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dbFooter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSDialogFooterBar";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDbFooterCustom1 : DXTestControl
    {
        
        public UIDbFooterCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dbFooter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSDialogFooterBar";
            this.WindowTitles.Add("Bytt ansatt");
            #endregion
        }
        
        #region Properties
        public DXButton UIAvbrytButton
        {
            get
            {
                if ((this.mUIAvbrytButton == null))
                {
                    this.mUIAvbrytButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCancel";
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIAvbrytButton.WindowTitles.Add("Bytt ansatt");
                    #endregion
                }
                return this.mUIAvbrytButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIAvbrytButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRegistreringsstatusWindow : DXWindow
    {
        
        public UIRegistreringsstatusWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Registreringsstatus";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILcMessagesCustom UILcMessagesCustom
        {
            get
            {
                if ((this.mUILcMessagesCustom == null))
                {
                    this.mUILcMessagesCustom = new UILcMessagesCustom(this);
                }
                return this.mUILcMessagesCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMessagesCustom mUILcMessagesCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMessagesCustom : DXTestControl
    {
        
        public UILcMessagesCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILcgMessagesLayoutGroup UILcgMessagesLayoutGroup
        {
            get
            {
                if ((this.mUILcgMessagesLayoutGroup == null))
                {
                    this.mUILcgMessagesLayoutGroup = new UILcgMessagesLayoutGroup(this);
                }
                return this.mUILcgMessagesLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILcgMessagesLayoutGroup mUILcgMessagesLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcgMessagesLayoutGroup : DXBaseLayoutItem
    {
        
        public UILcgMessagesLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcgMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILciMessagesLayoutControlItem UILciMessagesLayoutControlItem
        {
            get
            {
                if ((this.mUILciMessagesLayoutControlItem == null))
                {
                    this.mUILciMessagesLayoutControlItem = new UILciMessagesLayoutControlItem(this);
                }
                return this.mUILciMessagesLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILciMessagesLayoutControlItem mUILciMessagesLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILciMessagesLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILciMessagesLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UIGMessagesTable UIGMessagesTable
        {
            get
            {
                if ((this.mUIGMessagesTable == null))
                {
                    this.mUIGMessagesTable = new UIGMessagesTable(this);
                }
                return this.mUIGMessagesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGMessagesTable mUIGMessagesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGMessagesTable : DXGrid
    {
        
        public UIGMessagesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public DXCell UIFradatomåoppgisCell
        {
            get
            {
                if ((this.mUIFradatomåoppgisCell == null))
                {
                    this.mUIFradatomåoppgisCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFradatomåoppgisCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]0[Column]gvMessagesColumn_Text";
                    this.mUIFradatomåoppgisCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFradatomåoppgisCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUIFradatomåoppgisCell;
            }
        }
        
        public DXCell UIKanikkebyttetilannetCell
        {
            get
            {
                if ((this.mUIKanikkebyttetilannetCell == null))
                {
                    this.mUIKanikkebyttetilannetCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKanikkebyttetilannetCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]1[Column]gvMessagesColumn_Text";
                    this.mUIKanikkebyttetilannetCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKanikkebyttetilannetCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUIKanikkebyttetilannetCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIFradatomåoppgisCell;
        
        private DXCell mUIKanikkebyttetilannetCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILinjeinnstillingerBrWindow : DXWindow
    {
        
        public UILinjeinnstillingerBrWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Linjeinnstillinger - [Bruse, Niklas]";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Bruse, Niklas]");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client1 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client1(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client1 mUIGsPanelControl3Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl3Client1 : DXTestControl
    {
        
        public UIGsPanelControl3Client1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Bruse, Niklas]");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIEOriginalOwnerCommenEdit
        {
            get
            {
                if ((this.mUIEOriginalOwnerCommenEdit == null))
                {
                    this.mUIEOriginalOwnerCommenEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIEOriginalOwnerCommenEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eOriginalOwnerComment";
                    this.mUIEOriginalOwnerCommenEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIEOriginalOwnerCommenEdit.WindowTitles.Add("Linjeinnstillinger - [Bruse, Niklas]");
                    #endregion
                }
                return this.mUIEOriginalOwnerCommenEdit;
            }
        }
        
        public UIGcAvailabilityPeriodClient UIGcAvailabilityPeriodClient
        {
            get
            {
                if ((this.mUIGcAvailabilityPeriodClient == null))
                {
                    this.mUIGcAvailabilityPeriodClient = new UIGcAvailabilityPeriodClient(this);
                }
                return this.mUIGcAvailabilityPeriodClient;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIEOriginalOwnerCommenEdit;
        
        private UIGcAvailabilityPeriodClient mUIGcAvailabilityPeriodClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAvailabilityPeriodClient : DXTestControl
    {
        
        public UIGcAvailabilityPeriodClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAvailabilityPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Bruse, Niklas]");
            #endregion
        }
        
        #region Properties
        public UIGAvailabilityPeriodsTable UIGAvailabilityPeriodsTable
        {
            get
            {
                if ((this.mUIGAvailabilityPeriodsTable == null))
                {
                    this.mUIGAvailabilityPeriodsTable = new UIGAvailabilityPeriodsTable(this);
                }
                return this.mUIGAvailabilityPeriodsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGAvailabilityPeriodsTable mUIGAvailabilityPeriodsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGAvailabilityPeriodsTable : DXGrid
    {
        
        public UIGAvailabilityPeriodsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailabilityPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Bruse, Niklas]");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem04032024Cell
        {
            get
            {
                if ((this.mUIItem04032024Cell == null))
                {
                    this.mUIItem04032024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem04032024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailabilityPeriodsGridControlCell[View]gridView1[Row]0[Column]gridColumn5";
                    this.mUIItem04032024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem04032024Cell.WindowTitles.Add("Linjeinnstillinger - [Bruse, Niklas]");
                    #endregion
                }
                return this.mUIItem04032024Cell;
            }
        }
        
        public DXCell UIItem20032024Cell
        {
            get
            {
                if ((this.mUIItem20032024Cell == null))
                {
                    this.mUIItem20032024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem20032024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailabilityPeriodsGridControlCell[View]gridView1[Row]0[Column]gridColumn6";
                    this.mUIItem20032024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem20032024Cell.WindowTitles.Add("Linjeinnstillinger - [Bruse, Niklas]");
                    #endregion
                }
                return this.mUIItem20032024Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem04032024Cell;
        
        private DXCell mUIItem20032024Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOppgavetildelingWindow : DXWindow
    {
        
        public UIOppgavetildelingWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Oppgavetildeling";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILcMainCustom UILcMainCustom
        {
            get
            {
                if ((this.mUILcMainCustom == null))
                {
                    this.mUILcMainCustom = new UILcMainCustom(this);
                }
                return this.mUILcMainCustom;
            }
        }
        
        public UIVhContentCustom UIVhContentCustom
        {
            get
            {
                if ((this.mUIVhContentCustom == null))
                {
                    this.mUIVhContentCustom = new UIVhContentCustom(this);
                }
                return this.mUIVhContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainCustom mUILcMainCustom;
        
        private UIVhContentCustom mUIVhContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainCustom : DXTestControl
    {
        
        public UILcMainCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIRootLayoutGroup UIRootLayoutGroup
        {
            get
            {
                if ((this.mUIRootLayoutGroup == null))
                {
                    this.mUIRootLayoutGroup = new UIRootLayoutGroup(this);
                }
                return this.mUIRootLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRootLayoutGroup mUIRootLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRootLayoutGroup : DXBaseLayoutItem
    {
        
        public UIRootLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Root";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILciCenterLayoutControlItem UILciCenterLayoutControlItem
        {
            get
            {
                if ((this.mUILciCenterLayoutControlItem == null))
                {
                    this.mUILciCenterLayoutControlItem = new UILciCenterLayoutControlItem(this);
                }
                return this.mUILciCenterLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILciCenterLayoutControlItem mUILciCenterLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILciCenterLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILciCenterLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciCenter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcCenterClient UIPcCenterClient
        {
            get
            {
                if ((this.mUIPcCenterClient == null))
                {
                    this.mUIPcCenterClient = new UIPcCenterClient(this);
                }
                return this.mUIPcCenterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcCenterClient mUIPcCenterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcCenterClient : DXTestControl
    {
        
        public UIPcCenterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcCenter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILcInnerCustom UILcInnerCustom
        {
            get
            {
                if ((this.mUILcInnerCustom == null))
                {
                    this.mUILcInnerCustom = new UILcInnerCustom(this);
                }
                return this.mUILcInnerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcInnerCustom mUILcInnerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcInnerCustom : DXTestControl
    {
        
        public UILcInnerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcInner";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILcgInnerLayoutGroup UILcgInnerLayoutGroup
        {
            get
            {
                if ((this.mUILcgInnerLayoutGroup == null))
                {
                    this.mUILcgInnerLayoutGroup = new UILcgInnerLayoutGroup(this);
                }
                return this.mUILcgInnerLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILcgInnerLayoutGroup mUILcgInnerLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcgInnerLayoutGroup : DXBaseLayoutItem
    {
        
        public UILcgInnerLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcgInner";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILciInnerTopLayoutControlItem UILciInnerTopLayoutControlItem
        {
            get
            {
                if ((this.mUILciInnerTopLayoutControlItem == null))
                {
                    this.mUILciInnerTopLayoutControlItem = new UILciInnerTopLayoutControlItem(this);
                }
                return this.mUILciInnerTopLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILciInnerTopLayoutControlItem mUILciInnerTopLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILciInnerTopLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILciInnerTopLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciInnerTop";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcInnerTopClient UIPcInnerTopClient
        {
            get
            {
                if ((this.mUIPcInnerTopClient == null))
                {
                    this.mUIPcInnerTopClient = new UIPcInnerTopClient(this);
                }
                return this.mUIPcInnerTopClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcInnerTopClient mUIPcInnerTopClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcInnerTopClient : DXTestControl
    {
        
        public UIPcInnerTopClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcInnerTop";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILcMainContentCustom UILcMainContentCustom
        {
            get
            {
                if ((this.mUILcMainContentCustom == null))
                {
                    this.mUILcMainContentCustom = new UILcMainContentCustom(this);
                }
                return this.mUILcMainContentCustom;
            }
        }
        
        public UILcContentCustom UILcContentCustom
        {
            get
            {
                if ((this.mUILcContentCustom == null))
                {
                    this.mUILcContentCustom = new UILcContentCustom(this);
                }
                return this.mUILcContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainContentCustom mUILcMainContentCustom;
        
        private UILcContentCustom mUILcContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainContentCustom : DXTestControl
    {
        
        public UILcMainContentCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMainContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILcgMainContentLayoutGroup UILcgMainContentLayoutGroup
        {
            get
            {
                if ((this.mUILcgMainContentLayoutGroup == null))
                {
                    this.mUILcgMainContentLayoutGroup = new UILcgMainContentLayoutGroup(this);
                }
                return this.mUILcgMainContentLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILcgMainContentLayoutGroup mUILcgMainContentLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcgMainContentLayoutGroup : DXBaseLayoutItem
    {
        
        public UILcgMainContentLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcgMainContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILciMainContentLayoutControlItem UILciMainContentLayoutControlItem
        {
            get
            {
                if ((this.mUILciMainContentLayoutControlItem == null))
                {
                    this.mUILciMainContentLayoutControlItem = new UILciMainContentLayoutControlItem(this);
                }
                return this.mUILciMainContentLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILciMainContentLayoutControlItem mUILciMainContentLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILciMainContentLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILciMainContentLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciMainContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIAdvancedRoleAssignmeCustom UIAdvancedRoleAssignmeCustom
        {
            get
            {
                if ((this.mUIAdvancedRoleAssignmeCustom == null))
                {
                    this.mUIAdvancedRoleAssignmeCustom = new UIAdvancedRoleAssignmeCustom(this);
                }
                return this.mUIAdvancedRoleAssignmeCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIAdvancedRoleAssignmeCustom mUIAdvancedRoleAssignmeCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAdvancedRoleAssignmeCustom : DXTestControl
    {
        
        public UIAdvancedRoleAssignmeCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "advancedRoleAssignmentMainUserControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AdvancedRoleAssignmentMainUserControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcMainClient UIPcMainClient
        {
            get
            {
                if ((this.mUIPcMainClient == null))
                {
                    this.mUIPcMainClient = new UIPcMainClient(this);
                }
                return this.mUIPcMainClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcMainClient mUIPcMainClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcMainClient : DXTestControl
    {
        
        public UIPcMainClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UITcMainTabList UITcMainTabList
        {
            get
            {
                if ((this.mUITcMainTabList == null))
                {
                    this.mUITcMainTabList = new UITcMainTabList(this);
                }
                return this.mUITcMainTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcMainTabList mUITcMainTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcMainTabList : DXTestControl
    {
        
        public UITcMainTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UITpMainRoleViewClient UITpMainRoleViewClient
        {
            get
            {
                if ((this.mUITpMainRoleViewClient == null))
                {
                    this.mUITpMainRoleViewClient = new UITpMainRoleViewClient(this);
                }
                return this.mUITpMainRoleViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpMainRoleViewClient mUITpMainRoleViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpMainRoleViewClient : DXTestControl
    {
        
        public UITpMainRoleViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpMainRoleView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGsSplitContainerContSplitContainerControl UIGsSplitContainerContSplitContainerControl
        {
            get
            {
                if ((this.mUIGsSplitContainerContSplitContainerControl == null))
                {
                    this.mUIGsSplitContainerContSplitContainerControl = new UIGsSplitContainerContSplitContainerControl(this);
                }
                return this.mUIGsSplitContainerContSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UIGsSplitContainerContSplitContainerControl mUIGsSplitContainerContSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsSplitContainerContSplitContainerControl : DXSplitContainerControl
    {
        
        public UIGsSplitContainerContSplitContainerControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSplitContainerControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UISplitGroupPanelClient UISplitGroupPanelClient
        {
            get
            {
                if ((this.mUISplitGroupPanelClient == null))
                {
                    this.mUISplitGroupPanelClient = new UISplitGroupPanelClient(this);
                }
                return this.mUISplitGroupPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UISplitGroupPanelClient mUISplitGroupPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISplitGroupPanelClient : DXTestControl
    {
        
        public UISplitGroupPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1SplitGroupPanel[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGsSplitContainerContSplitContainerControl1 UIGsSplitContainerContSplitContainerControl
        {
            get
            {
                if ((this.mUIGsSplitContainerContSplitContainerControl == null))
                {
                    this.mUIGsSplitContainerContSplitContainerControl = new UIGsSplitContainerContSplitContainerControl1(this);
                }
                return this.mUIGsSplitContainerContSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UIGsSplitContainerContSplitContainerControl1 mUIGsSplitContainerContSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsSplitContainerContSplitContainerControl1 : DXSplitContainerControl
    {
        
        public UIGsSplitContainerContSplitContainerControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSplitContainerControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UISplitGroupPanelClient1 UISplitGroupPanelClient
        {
            get
            {
                if ((this.mUISplitGroupPanelClient == null))
                {
                    this.mUISplitGroupPanelClient = new UISplitGroupPanelClient1(this);
                }
                return this.mUISplitGroupPanelClient;
            }
        }
        
        public UISplitGroupPanelClient11 UISplitGroupPanelClient1
        {
            get
            {
                if ((this.mUISplitGroupPanelClient1 == null))
                {
                    this.mUISplitGroupPanelClient1 = new UISplitGroupPanelClient11(this);
                }
                return this.mUISplitGroupPanelClient1;
            }
        }
        #endregion
        
        #region Fields
        private UISplitGroupPanelClient1 mUISplitGroupPanelClient;
        
        private UISplitGroupPanelClient11 mUISplitGroupPanelClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISplitGroupPanelClient1 : DXTestControl
    {
        
        public UISplitGroupPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl2SplitGroupPanel[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGcDragDropGridTable UIGcDragDropGridTable
        {
            get
            {
                if ((this.mUIGcDragDropGridTable == null))
                {
                    this.mUIGcDragDropGridTable = new UIGcDragDropGridTable(this);
                }
                return this.mUIGcDragDropGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDragDropGridTable mUIGcDragDropGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDragDropGridTable : DXGrid
    {
        
        public UIGcDragDropGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]Interval_1";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISplitGroupPanelClient11 : DXTestControl
    {
        
        public UISplitGroupPanelClient11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl2SplitGroupPanel[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGcDragDropGridTable1 UIGcDragDropGridTable
        {
            get
            {
                if ((this.mUIGcDragDropGridTable == null))
                {
                    this.mUIGcDragDropGridTable = new UIGcDragDropGridTable1(this);
                }
                return this.mUIGcDragDropGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDragDropGridTable1 mUIGcDragDropGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDragDropGridTable1 : DXGrid
    {
        
        public UIGcDragDropGridTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]Interval_2";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]Interval_3";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]Interval_1";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIItemCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcContentCustom : DXTestControl
    {
        
        public UILcContentCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILcgContentLayoutGroup UILcgContentLayoutGroup
        {
            get
            {
                if ((this.mUILcgContentLayoutGroup == null))
                {
                    this.mUILcgContentLayoutGroup = new UILcgContentLayoutGroup(this);
                }
                return this.mUILcgContentLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILcgContentLayoutGroup mUILcgContentLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcgContentLayoutGroup : DXBaseLayoutItem
    {
        
        public UILcgContentLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcgContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILciInfoLayoutControlItem UILciInfoLayoutControlItem
        {
            get
            {
                if ((this.mUILciInfoLayoutControlItem == null))
                {
                    this.mUILciInfoLayoutControlItem = new UILciInfoLayoutControlItem(this);
                }
                return this.mUILciInfoLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILciInfoLayoutControlItem mUILciInfoLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILciInfoLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILciInfoLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UINbcInfoNavBar UINbcInfoNavBar
        {
            get
            {
                if ((this.mUINbcInfoNavBar == null))
                {
                    this.mUINbcInfoNavBar = new UINbcInfoNavBar(this);
                }
                return this.mUINbcInfoNavBar;
            }
        }
        #endregion
        
        #region Fields
        private UINbcInfoNavBar mUINbcInfoNavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINbcInfoNavBar : DXNavBar
    {
        
        public UINbcInfoNavBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UINbgccEmployeeInfoScrollableControl UINbgccEmployeeInfoScrollableControl
        {
            get
            {
                if ((this.mUINbgccEmployeeInfoScrollableControl == null))
                {
                    this.mUINbgccEmployeeInfoScrollableControl = new UINbgccEmployeeInfoScrollableControl(this);
                }
                return this.mUINbgccEmployeeInfoScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UINbgccEmployeeInfoScrollableControl mUINbgccEmployeeInfoScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINbgccEmployeeInfoScrollableControl : DXScrollableControl
    {
        
        public UINbgccEmployeeInfoScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccEmployeeInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcEmployeeInfoClient UIPcEmployeeInfoClient
        {
            get
            {
                if ((this.mUIPcEmployeeInfoClient == null))
                {
                    this.mUIPcEmployeeInfoClient = new UIPcEmployeeInfoClient(this);
                }
                return this.mUIPcEmployeeInfoClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcEmployeeInfoClient mUIPcEmployeeInfoClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcEmployeeInfoClient : DXTestControl
    {
        
        public UIPcEmployeeInfoClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcEmployeeInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public DXTestControl UILblEmployeeNameValueLabel
        {
            get
            {
                if ((this.mUILblEmployeeNameValueLabel == null))
                {
                    this.mUILblEmployeeNameValueLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUILblEmployeeNameValueLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "lblEmployeeNameValue";
                    this.mUILblEmployeeNameValueLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLabelControl";
                    this.mUILblEmployeeNameValueLabel.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUILblEmployeeNameValueLabel.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUILblEmployeeNameValueLabel;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUILblEmployeeNameValueLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVhContentCustom : DXTestControl
    {
        
        public UIVhContentCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "vhContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonViewHost";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIRoleAssignmentOverviCustom UIRoleAssignmentOverviCustom
        {
            get
            {
                if ((this.mUIRoleAssignmentOverviCustom == null))
                {
                    this.mUIRoleAssignmentOverviCustom = new UIRoleAssignmentOverviCustom(this);
                }
                return this.mUIRoleAssignmentOverviCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIRoleAssignmentOverviCustom mUIRoleAssignmentOverviCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRoleAssignmentOverviCustom : DXTestControl
    {
        
        public UIRoleAssignmentOverviCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RoleAssignmentOverviewView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RoleAssignmentOverviewView";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIVhContentCustom1 UIVhContentCustom
        {
            get
            {
                if ((this.mUIVhContentCustom == null))
                {
                    this.mUIVhContentCustom = new UIVhContentCustom1(this);
                }
                return this.mUIVhContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVhContentCustom1 mUIVhContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVhContentCustom1 : DXTestControl
    {
        
        public UIVhContentCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "vhContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonViewHost";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient1 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient1(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient1 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient1 : DXTestControl
    {
        
        public UIPcViewClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIRoleFocusedManageVieCustom UIRoleFocusedManageVieCustom
        {
            get
            {
                if ((this.mUIRoleFocusedManageVieCustom == null))
                {
                    this.mUIRoleFocusedManageVieCustom = new UIRoleFocusedManageVieCustom(this);
                }
                return this.mUIRoleFocusedManageVieCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIRoleFocusedManageVieCustom mUIRoleFocusedManageVieCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRoleFocusedManageVieCustom : DXTestControl
    {
        
        public UIRoleFocusedManageVieCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RoleFocusedManageView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RoleFocusedManageView";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIIgContentCustom UIIgContentCustom
        {
            get
            {
                if ((this.mUIIgContentCustom == null))
                {
                    this.mUIIgContentCustom = new UIIgContentCustom(this);
                }
                return this.mUIIgContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIIgContentCustom mUIIgContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIgContentCustom : DXTestControl
    {
        
        public UIIgContentCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "igContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ItemGridControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIDdGridControlCustom UIDdGridControlCustom
        {
            get
            {
                if ((this.mUIDdGridControlCustom == null))
                {
                    this.mUIDdGridControlCustom = new UIDdGridControlCustom(this);
                }
                return this.mUIDdGridControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDdGridControlCustom mUIDdGridControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDdGridControlCustom : DXTestControl
    {
        
        public UIDdGridControlCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ddGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DragDropGridControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGcDragDropGridTable2 UIGcDragDropGridTable
        {
            get
            {
                if ((this.mUIGcDragDropGridTable == null))
                {
                    this.mUIGcDragDropGridTable = new UIGcDragDropGridTable2(this);
                }
                return this.mUIGcDragDropGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDragDropGridTable2 mUIGcDragDropGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDragDropGridTable2 : DXGrid
    {
        
        public UIGcDragDropGridTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-2";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-3";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-4";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-5";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-9";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-10";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-11";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-12";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-15";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-16";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXCell UIItemCell10
        {
            get
            {
                if ((this.mUIItemCell10 == null))
                {
                    this.mUIItemCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-19";
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell10.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell10;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-20";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]ColumnHandle-1-21";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXCell UIABruseNiklas15002200Cell
        {
            get
            {
                if ((this.mUIABruseNiklas15002200Cell == null))
                {
                    this.mUIABruseNiklas15002200Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIABruseNiklas15002200Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col737e7a7c-74c9-42b2" +
                        "-9858-458426be615a";
                    this.mUIABruseNiklas15002200Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIABruseNiklas15002200Cell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIABruseNiklas15002200Cell;
            }
        }
        
        public DXCell UIABruseNiklas15002200Cell1
        {
            get
            {
                if ((this.mUIABruseNiklas15002200Cell1 == null))
                {
                    this.mUIABruseNiklas15002200Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIABruseNiklas15002200Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col353e092b-1bea-40c7" +
                        "-bd58-37f472fdcc94";
                    this.mUIABruseNiklas15002200Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIABruseNiklas15002200Cell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIABruseNiklas15002200Cell1;
            }
        }
        
        public DXCell UIDBruseNiklas07001500Cell
        {
            get
            {
                if ((this.mUIDBruseNiklas07001500Cell == null))
                {
                    this.mUIDBruseNiklas07001500Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDBruseNiklas07001500Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]cole375bb79-36a8-484b" +
                        "-ada7-e56077604d1d";
                    this.mUIDBruseNiklas07001500Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDBruseNiklas07001500Cell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIDBruseNiklas07001500Cell;
            }
        }
        
        public DXCell UIDBruseNiklas07001500Cell1
        {
            get
            {
                if ((this.mUIDBruseNiklas07001500Cell1 == null))
                {
                    this.mUIDBruseNiklas07001500Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDBruseNiklas07001500Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]colb5698022-2b25-46b7" +
                        "-9083-4b2206a0b209";
                    this.mUIDBruseNiklas07001500Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDBruseNiklas07001500Cell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIDBruseNiklas07001500Cell1;
            }
        }
        
        public DXCell UINBruseNiklas22000800Cell
        {
            get
            {
                if ((this.mUINBruseNiklas22000800Cell == null))
                {
                    this.mUINBruseNiklas22000800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUINBruseNiklas22000800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col3b121cce-6548-4c57" +
                        "-ba41-99170eed148a";
                    this.mUINBruseNiklas22000800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINBruseNiklas22000800Cell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUINBruseNiklas22000800Cell;
            }
        }
        
        public DXCell UINBruseNiklas22000800Cell1
        {
            get
            {
                if ((this.mUINBruseNiklas22000800Cell1 == null))
                {
                    this.mUINBruseNiklas22000800Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUINBruseNiklas22000800Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]colcf34e9ff-608d-4c1f" +
                        "-ae89-a3996d6e822b";
                    this.mUINBruseNiklas22000800Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINBruseNiklas22000800Cell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUINBruseNiklas22000800Cell1;
            }
        }
        
        public DXCell UINBruseNiklas22000800Cell2
        {
            get
            {
                if ((this.mUINBruseNiklas22000800Cell2 == null))
                {
                    this.mUINBruseNiklas22000800Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUINBruseNiklas22000800Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]cola535949a-1ed4-4924" +
                        "-886a-91fc843c8e28";
                    this.mUINBruseNiklas22000800Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINBruseNiklas22000800Cell2.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUINBruseNiklas22000800Cell2;
            }
        }
        
        public DXCell UINBruseNiklas22000800Cell3
        {
            get
            {
                if ((this.mUINBruseNiklas22000800Cell3 == null))
                {
                    this.mUINBruseNiklas22000800Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUINBruseNiklas22000800Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]colc3bf21b7-d71d-4daa" +
                        "-b7e3-a0e29a064b43";
                    this.mUINBruseNiklas22000800Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINBruseNiklas22000800Cell3.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUINBruseNiklas22000800Cell3;
            }
        }
        
        public DXCell UIABruseNiklas15002200Cell2
        {
            get
            {
                if ((this.mUIABruseNiklas15002200Cell2 == null))
                {
                    this.mUIABruseNiklas15002200Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIABruseNiklas15002200Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col703fad80-9143-4a1a" +
                        "-82fb-828874483324";
                    this.mUIABruseNiklas15002200Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIABruseNiklas15002200Cell2.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIABruseNiklas15002200Cell2;
            }
        }
        
        public DXCell UIABruseNiklas15002200Cell3
        {
            get
            {
                if ((this.mUIABruseNiklas15002200Cell3 == null))
                {
                    this.mUIABruseNiklas15002200Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIABruseNiklas15002200Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col5bec82e0-fdc1-45d2" +
                        "-81f3-d44466c6249a";
                    this.mUIABruseNiklas15002200Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIABruseNiklas15002200Cell3.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIABruseNiklas15002200Cell3;
            }
        }
        
        public DXCell UIABruseNiklas15002200Cell4
        {
            get
            {
                if ((this.mUIABruseNiklas15002200Cell4 == null))
                {
                    this.mUIABruseNiklas15002200Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIABruseNiklas15002200Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col88e69ce5-ab1e-4772" +
                        "-9c58-c01b6c952b5b";
                    this.mUIABruseNiklas15002200Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIABruseNiklas15002200Cell4.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIABruseNiklas15002200Cell4;
            }
        }
        
        public DXCell UIDBruseNiklas07001500Cell2
        {
            get
            {
                if ((this.mUIDBruseNiklas07001500Cell2 == null))
                {
                    this.mUIDBruseNiklas07001500Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDBruseNiklas07001500Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]cole86cf668-0c03-4965" +
                        "-bb35-e1f6f17b9d0f";
                    this.mUIDBruseNiklas07001500Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDBruseNiklas07001500Cell2.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIDBruseNiklas07001500Cell2;
            }
        }
        
        public DXCell UIABruseNiklas15002200Cell5
        {
            get
            {
                if ((this.mUIABruseNiklas15002200Cell5 == null))
                {
                    this.mUIABruseNiklas15002200Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIABruseNiklas15002200Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col9eb1e4d0-c49b-485e" +
                        "-ae63-3a2b79c10ab6";
                    this.mUIABruseNiklas15002200Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIABruseNiklas15002200Cell5.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIABruseNiklas15002200Cell5;
            }
        }
        
        public DXCell UIABruseNiklas15002200Cell6
        {
            get
            {
                if ((this.mUIABruseNiklas15002200Cell6 == null))
                {
                    this.mUIABruseNiklas15002200Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIABruseNiklas15002200Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col23356aa7-95d4-4567" +
                        "-a3e4-64d5c3db1783";
                    this.mUIABruseNiklas15002200Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIABruseNiklas15002200Cell6.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIABruseNiklas15002200Cell6;
            }
        }
        
        public DXCell UIA7BruseNiklas1500220Cell
        {
            get
            {
                if ((this.mUIA7BruseNiklas1500220Cell == null))
                {
                    this.mUIA7BruseNiklas1500220Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIA7BruseNiklas1500220Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col23.01.2024";
                    this.mUIA7BruseNiklas1500220Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA7BruseNiklas1500220Cell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIA7BruseNiklas1500220Cell;
            }
        }
        
        public DXCell UIA7BruseNiklas1500220Cell1
        {
            get
            {
                if ((this.mUIA7BruseNiklas1500220Cell1 == null))
                {
                    this.mUIA7BruseNiklas1500220Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA7BruseNiklas1500220Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col24.01.2024";
                    this.mUIA7BruseNiklas1500220Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA7BruseNiklas1500220Cell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIA7BruseNiklas1500220Cell1;
            }
        }
        
        public DXCell UID7BruseNiklas0700150Cell
        {
            get
            {
                if ((this.mUID7BruseNiklas0700150Cell == null))
                {
                    this.mUID7BruseNiklas0700150Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUID7BruseNiklas0700150Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col25.01.2024";
                    this.mUID7BruseNiklas0700150Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID7BruseNiklas0700150Cell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUID7BruseNiklas0700150Cell;
            }
        }
        
        public DXCell UID7BruseNiklas0700150Cell1
        {
            get
            {
                if ((this.mUID7BruseNiklas0700150Cell1 == null))
                {
                    this.mUID7BruseNiklas0700150Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUID7BruseNiklas0700150Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col26.01.2024";
                    this.mUID7BruseNiklas0700150Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID7BruseNiklas0700150Cell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUID7BruseNiklas0700150Cell1;
            }
        }
        
        public DXCell UIN7BruseNiklas2200080Cell
        {
            get
            {
                if ((this.mUIN7BruseNiklas2200080Cell == null))
                {
                    this.mUIN7BruseNiklas2200080Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIN7BruseNiklas2200080Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col30.01.2024";
                    this.mUIN7BruseNiklas2200080Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN7BruseNiklas2200080Cell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIN7BruseNiklas2200080Cell;
            }
        }
        
        public DXCell UIN7BruseNiklas2200080Cell1
        {
            get
            {
                if ((this.mUIN7BruseNiklas2200080Cell1 == null))
                {
                    this.mUIN7BruseNiklas2200080Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN7BruseNiklas2200080Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col31.01.2024";
                    this.mUIN7BruseNiklas2200080Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN7BruseNiklas2200080Cell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIN7BruseNiklas2200080Cell1;
            }
        }
        
        public DXCell UIN7BruseNiklas2200080Cell2
        {
            get
            {
                if ((this.mUIN7BruseNiklas2200080Cell2 == null))
                {
                    this.mUIN7BruseNiklas2200080Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN7BruseNiklas2200080Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col01.02.2024";
                    this.mUIN7BruseNiklas2200080Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN7BruseNiklas2200080Cell2.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIN7BruseNiklas2200080Cell2;
            }
        }
        
        public DXCell UIN7BruseNiklas2200080Cell3
        {
            get
            {
                if ((this.mUIN7BruseNiklas2200080Cell3 == null))
                {
                    this.mUIN7BruseNiklas2200080Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN7BruseNiklas2200080Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col02.02.2024";
                    this.mUIN7BruseNiklas2200080Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN7BruseNiklas2200080Cell3.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIN7BruseNiklas2200080Cell3;
            }
        }
        
        public DXCell UIA7BruseNiklas1500220Cell2
        {
            get
            {
                if ((this.mUIA7BruseNiklas1500220Cell2 == null))
                {
                    this.mUIA7BruseNiklas1500220Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA7BruseNiklas1500220Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col05.02.2024";
                    this.mUIA7BruseNiklas1500220Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA7BruseNiklas1500220Cell2.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIA7BruseNiklas1500220Cell2;
            }
        }
        
        public DXCell UIA7BruseNiklas1500220Cell3
        {
            get
            {
                if ((this.mUIA7BruseNiklas1500220Cell3 == null))
                {
                    this.mUIA7BruseNiklas1500220Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA7BruseNiklas1500220Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col06.02.2024";
                    this.mUIA7BruseNiklas1500220Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA7BruseNiklas1500220Cell3.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIA7BruseNiklas1500220Cell3;
            }
        }
        
        public DXCell UIA7BruseNiklas1500220Cell4
        {
            get
            {
                if ((this.mUIA7BruseNiklas1500220Cell4 == null))
                {
                    this.mUIA7BruseNiklas1500220Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA7BruseNiklas1500220Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col09.02.2024";
                    this.mUIA7BruseNiklas1500220Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA7BruseNiklas1500220Cell4.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIA7BruseNiklas1500220Cell4;
            }
        }
        
        public DXCell UID7BruseNiklas0700150Cell2
        {
            get
            {
                if ((this.mUID7BruseNiklas0700150Cell2 == null))
                {
                    this.mUID7BruseNiklas0700150Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUID7BruseNiklas0700150Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col10.02.2024";
                    this.mUID7BruseNiklas0700150Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID7BruseNiklas0700150Cell2.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUID7BruseNiklas0700150Cell2;
            }
        }
        
        public DXCell UIA7BruseNiklas1500220Cell5
        {
            get
            {
                if ((this.mUIA7BruseNiklas1500220Cell5 == null))
                {
                    this.mUIA7BruseNiklas1500220Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA7BruseNiklas1500220Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]1[Column]col11.02.2024";
                    this.mUIA7BruseNiklas1500220Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA7BruseNiklas1500220Cell5.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIA7BruseNiklas1500220Cell5;
            }
        }
        
        public DXCell UIA8CullenDamien150022Cell
        {
            get
            {
                if ((this.mUIA8CullenDamien150022Cell == null))
                {
                    this.mUIA8CullenDamien150022Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIA8CullenDamien150022Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]2[Column]col26.01.2024";
                    this.mUIA8CullenDamien150022Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA8CullenDamien150022Cell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIA8CullenDamien150022Cell;
            }
        }
        
        public DXCell UIA8CullenDamien150022Cell1
        {
            get
            {
                if ((this.mUIA8CullenDamien150022Cell1 == null))
                {
                    this.mUIA8CullenDamien150022Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA8CullenDamien150022Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]2[Column]col27.01.2024";
                    this.mUIA8CullenDamien150022Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA8CullenDamien150022Cell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIA8CullenDamien150022Cell1;
            }
        }
        
        public DXCell UID8CullenDamien070015Cell
        {
            get
            {
                if ((this.mUID8CullenDamien070015Cell == null))
                {
                    this.mUID8CullenDamien070015Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUID8CullenDamien070015Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]2[Column]col28.01.2024";
                    this.mUID8CullenDamien070015Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID8CullenDamien070015Cell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUID8CullenDamien070015Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItemCell3;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell5;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell7;
        
        private DXCell mUIItemCell8;
        
        private DXCell mUIItemCell9;
        
        private DXCell mUIItemCell10;
        
        private DXCell mUIItemCell11;
        
        private DXCell mUIItemCell12;
        
        private DXCell mUIABruseNiklas15002200Cell;
        
        private DXCell mUIABruseNiklas15002200Cell1;
        
        private DXCell mUIDBruseNiklas07001500Cell;
        
        private DXCell mUIDBruseNiklas07001500Cell1;
        
        private DXCell mUINBruseNiklas22000800Cell;
        
        private DXCell mUINBruseNiklas22000800Cell1;
        
        private DXCell mUINBruseNiklas22000800Cell2;
        
        private DXCell mUINBruseNiklas22000800Cell3;
        
        private DXCell mUIABruseNiklas15002200Cell2;
        
        private DXCell mUIABruseNiklas15002200Cell3;
        
        private DXCell mUIABruseNiklas15002200Cell4;
        
        private DXCell mUIDBruseNiklas07001500Cell2;
        
        private DXCell mUIABruseNiklas15002200Cell5;
        
        private DXCell mUIABruseNiklas15002200Cell6;
        
        private DXCell mUIA7BruseNiklas1500220Cell;
        
        private DXCell mUIA7BruseNiklas1500220Cell1;
        
        private DXCell mUID7BruseNiklas0700150Cell;
        
        private DXCell mUID7BruseNiklas0700150Cell1;
        
        private DXCell mUIN7BruseNiklas2200080Cell;
        
        private DXCell mUIN7BruseNiklas2200080Cell1;
        
        private DXCell mUIN7BruseNiklas2200080Cell2;
        
        private DXCell mUIN7BruseNiklas2200080Cell3;
        
        private DXCell mUIA7BruseNiklas1500220Cell2;
        
        private DXCell mUIA7BruseNiklas1500220Cell3;
        
        private DXCell mUIA7BruseNiklas1500220Cell4;
        
        private DXCell mUID7BruseNiklas0700150Cell2;
        
        private DXCell mUIA7BruseNiklas1500220Cell5;
        
        private DXCell mUIA8CullenDamien150022Cell;
        
        private DXCell mUIA8CullenDamien150022Cell1;
        
        private DXCell mUID8CullenDamien070015Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILinjeinnstillingerDrWindow : DXWindow
    {
        
        public UILinjeinnstillingerDrWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Linjeinnstillinger - [Dressman, Dennis]";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Dressman, Dennis]");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client2 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client2(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client2 mUIGsPanelControl3Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl3Client2 : DXTestControl
    {
        
        public UIGsPanelControl3Client2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Dressman, Dennis]");
            #endregion
        }
        
        #region Properties
        public UIERevolveFromCustom UIERevolveFromCustom
        {
            get
            {
                if ((this.mUIERevolveFromCustom == null))
                {
                    this.mUIERevolveFromCustom = new UIERevolveFromCustom(this);
                }
                return this.mUIERevolveFromCustom;
            }
        }
        
        public UIERevolveToCustom UIERevolveToCustom
        {
            get
            {
                if ((this.mUIERevolveToCustom == null))
                {
                    this.mUIERevolveToCustom = new UIERevolveToCustom(this);
                }
                return this.mUIERevolveToCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIERevolveFromCustom mUIERevolveFromCustom;
        
        private UIERevolveToCustom mUIERevolveToCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIERevolveFromCustom : DXTestControl
    {
        
        public UIERevolveFromCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eRevolveFrom";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Linjeinnstillinger - [Dressman, Dennis]");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Linjeinnstillinger - [Dressman, Dennis]");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIERevolveToCustom : DXTestControl
    {
        
        public UIERevolveToCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eRevolveTo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Linjeinnstillinger - [Dressman, Dennis]");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Linjeinnstillinger - [Dressman, Dennis]");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsatteiarbeidsplanWindow : DXWindow
    {
        
        public UIAnsatteiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlOuterClient UIPanelControlOuterClient
        {
            get
            {
                if ((this.mUIPanelControlOuterClient == null))
                {
                    this.mUIPanelControlOuterClient = new UIPanelControlOuterClient(this);
                }
                return this.mUIPanelControlOuterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlOuterClient mUIPanelControlOuterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlOuterClient : DXTestControl
    {
        
        public UIPanelControlOuterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        
        public UIPanelControlRightClient UIPanelControlRightClient
        {
            get
            {
                if ((this.mUIPanelControlRightClient == null))
                {
                    this.mUIPanelControlRightClient = new UIPanelControlRightClient(this);
                }
                return this.mUIPanelControlRightClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient mUIPanelControlLeftClient;
        
        private UIPanelControlRightClient mUIPanelControlRightClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlLeftClient : DXTestControl
    {
        
        public UIPanelControlLeftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITreeListEmployeeTreeList UITreeListEmployeeTreeList
        {
            get
            {
                if ((this.mUITreeListEmployeeTreeList == null))
                {
                    this.mUITreeListEmployeeTreeList = new UITreeListEmployeeTreeList(this);
                }
                return this.mUITreeListEmployeeTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListEmployeeTreeList mUITreeListEmployeeTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListEmployeeTreeList : DXTreeList
    {
        
        public UITreeListEmployeeTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode1TreeListNode1 UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode1(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public UINode2TreeListNode1 UINode2TreeListNode
        {
            get
            {
                if ((this.mUINode2TreeListNode == null))
                {
                    this.mUINode2TreeListNode = new UINode2TreeListNode1(this);
                }
                return this.mUINode2TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode1TreeListNode1 mUINode1TreeListNode;
        
        private UINode2TreeListNode1 mUINode2TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode1 : DXTreeListNode
    {
        
        public UINode1TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode : DXTreeListNode
    {
        
        public UINode0TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem10TreeListCell
        {
            get
            {
                if ((this.mUIItem10TreeListCell == null))
                {
                    this.mUIItem10TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem10TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode2TreeListNode1 : DXTreeListNode
    {
        
        public UINode2TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode1 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode1(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode1 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode1 : DXTreeListNode
    {
        
        public UINode0TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem10TreeListCell
        {
            get
            {
                if ((this.mUIItem10TreeListCell == null))
                {
                    this.mUIItem10TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem10TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlRightClient : DXTestControl
    {
        
        public UIPanelControlRightClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlRight";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient2 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient2(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient2 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient2 : DXTestControl
    {
        
        public UIPcViewClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIEmployeeEditorsViewCustom UIEmployeeEditorsViewCustom
        {
            get
            {
                if ((this.mUIEmployeeEditorsViewCustom == null))
                {
                    this.mUIEmployeeEditorsViewCustom = new UIEmployeeEditorsViewCustom(this);
                }
                return this.mUIEmployeeEditorsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeEditorsViewCustom mUIEmployeeEditorsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeEditorsViewCustom : DXTestControl
    {
        
        public UIEmployeeEditorsViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeEditorsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeEditorsView";
            #endregion
        }
        
        #region Properties
        public UIPcContentClient1 UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient1(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient1 mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient1 : DXTestControl
    {
        
        public UIPcContentClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIXscContentScrollableControl UIXscContentScrollableControl
        {
            get
            {
                if ((this.mUIXscContentScrollableControl == null))
                {
                    this.mUIXscContentScrollableControl = new UIXscContentScrollableControl(this);
                }
                return this.mUIXscContentScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscContentScrollableControl mUIXscContentScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXscContentScrollableControl : DXScrollableControl
    {
        
        public UIXscContentScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            #endregion
        }
        
        #region Properties
        public UIGroupControlViewHostCustom UIGroupControlViewHostCustom
        {
            get
            {
                if ((this.mUIGroupControlViewHostCustom == null))
                {
                    this.mUIGroupControlViewHostCustom = new UIGroupControlViewHostCustom(this);
                }
                return this.mUIGroupControlViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlViewHostCustom mUIGroupControlViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlViewHostCustom : DXTestControl
    {
        
        public UIGroupControlViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControlViewHost";
            #endregion
        }
        
        #region Properties
        public UIGroupControlClient UIGroupControlClient
        {
            get
            {
                if ((this.mUIGroupControlClient == null))
                {
                    this.mUIGroupControlClient = new UIGroupControlClient(this);
                }
                return this.mUIGroupControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlClient mUIGroupControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlClient : DXTestControl
    {
        
        public UIGroupControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerOvertCustom UIEmployeeManagerOvertCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerOvertCustom == null))
                {
                    this.mUIEmployeeManagerOvertCustom = new UIEmployeeManagerOvertCustom(this);
                }
                return this.mUIEmployeeManagerOvertCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerOvertCustom mUIEmployeeManagerOvertCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerOvertCustom : DXTestControl
    {
        
        public UIEmployeeManagerOvertCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerOvertimeCodeView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerOvertimeCodeView";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UIEOvertimeCodeLookUpEdit
        {
            get
            {
                if ((this.mUIEOvertimeCodeLookUpEdit == null))
                {
                    this.mUIEOvertimeCodeLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIEOvertimeCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eOvertimeCode";
                    this.mUIEOvertimeCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchLookUpEdit";
                    #endregion
                }
                return this.mUIEOvertimeCodeLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUIEOvertimeCodeLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIContextMenu UIContextMenu
        {
            get
            {
                if ((this.mUIContextMenu == null))
                {
                    this.mUIContextMenu = new UIContextMenu(this);
                }
                return this.mUIContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIContextMenu mUIContextMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContextMenu : WinMenu
    {
        
        public UIContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Context";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRows0MenuItem
        {
            get
            {
                if ((this.mUIRows0MenuItem == null))
                {
                    this.mUIRows0MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRows0MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Rows: 0";
                    #endregion
                }
                return this.mUIRows0MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRows0MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinClient UIAnsatteClient
        {
            get
            {
                if ((this.mUIAnsatteClient == null))
                {
                    this.mUIAnsatteClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAnsatteClient.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAnsatteClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAnsatteClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TgatGrid";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinClient UIIverksettingsperiodeClient
        {
            get
            {
                if ((this.mUIIverksettingsperiodeClient == null))
                {
                    this.mUIIverksettingsperiodeClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIIverksettingsperiodeClient.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIIverksettingsperiodeClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIIverksettingsperiodeClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILinjeinnstillingerInWindow : DXWindow
    {
        
        public UILinjeinnstillingerInWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Linjeinnstillinger - [Ingesson, Charlotte]";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Ingesson, Charlotte]");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client3 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client3(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        
        public UIGsPanelControl3Client11 UIGsPanelControl3Client1
        {
            get
            {
                if ((this.mUIGsPanelControl3Client1 == null))
                {
                    this.mUIGsPanelControl3Client1 = new UIGsPanelControl3Client11(this);
                }
                return this.mUIGsPanelControl3Client1;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client3 mUIGsPanelControl3Client;
        
        private UIGsPanelControl3Client11 mUIGsPanelControl3Client1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl3Client3 : DXTestControl
    {
        
        public UIGsPanelControl3Client3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Ingesson, Charlotte]");
            #endregion
        }
        
        #region Properties
        public UIGcAvailabilityPeriodClient1 UIGcAvailabilityPeriodClient
        {
            get
            {
                if ((this.mUIGcAvailabilityPeriodClient == null))
                {
                    this.mUIGcAvailabilityPeriodClient = new UIGcAvailabilityPeriodClient1(this);
                }
                return this.mUIGcAvailabilityPeriodClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAvailabilityPeriodClient1 mUIGcAvailabilityPeriodClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAvailabilityPeriodClient1 : DXTestControl
    {
        
        public UIGcAvailabilityPeriodClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAvailabilityPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Ingesson, Charlotte]");
            #endregion
        }
        
        #region Properties
        public UIGAvailabilityPeriodsTable1 UIGAvailabilityPeriodsTable
        {
            get
            {
                if ((this.mUIGAvailabilityPeriodsTable == null))
                {
                    this.mUIGAvailabilityPeriodsTable = new UIGAvailabilityPeriodsTable1(this);
                }
                return this.mUIGAvailabilityPeriodsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGAvailabilityPeriodsTable1 mUIGAvailabilityPeriodsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGAvailabilityPeriodsTable1 : DXGrid
    {
        
        public UIGAvailabilityPeriodsTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailabilityPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Ingesson, Charlotte]");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem21032024Cell
        {
            get
            {
                if ((this.mUIItem21032024Cell == null))
                {
                    this.mUIItem21032024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem21032024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailabilityPeriodsGridControlCell[View]gridView1[Row]0[Column]gridColumn5";
                    this.mUIItem21032024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem21032024Cell.WindowTitles.Add("Linjeinnstillinger - [Ingesson, Charlotte]");
                    #endregion
                }
                return this.mUIItem21032024Cell;
            }
        }
        
        public DXCell UIItem14042024Cell
        {
            get
            {
                if ((this.mUIItem14042024Cell == null))
                {
                    this.mUIItem14042024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14042024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailabilityPeriodsGridControlCell[View]gridView1[Row]0[Column]gridColumn6";
                    this.mUIItem14042024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14042024Cell.WindowTitles.Add("Linjeinnstillinger - [Ingesson, Charlotte]");
                    #endregion
                }
                return this.mUIItem14042024Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem21032024Cell;
        
        private DXCell mUIItem14042024Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl3Client11 : DXTestControl
    {
        
        public UIGsPanelControl3Client11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Ingesson, Charlotte]");
            #endregion
        }
        
        #region Properties
        public UIGcAvailabilityPeriodClient2 UIGcAvailabilityPeriodClient
        {
            get
            {
                if ((this.mUIGcAvailabilityPeriodClient == null))
                {
                    this.mUIGcAvailabilityPeriodClient = new UIGcAvailabilityPeriodClient2(this);
                }
                return this.mUIGcAvailabilityPeriodClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAvailabilityPeriodClient2 mUIGcAvailabilityPeriodClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAvailabilityPeriodClient2 : DXTestControl
    {
        
        public UIGcAvailabilityPeriodClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAvailabilityPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Ingesson, Charlotte]");
            #endregion
        }
        
        #region Properties
        public UIGAvailabilityPeriodsTable2 UIGAvailabilityPeriodsTable
        {
            get
            {
                if ((this.mUIGAvailabilityPeriodsTable == null))
                {
                    this.mUIGAvailabilityPeriodsTable = new UIGAvailabilityPeriodsTable2(this);
                }
                return this.mUIGAvailabilityPeriodsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGAvailabilityPeriodsTable2 mUIGAvailabilityPeriodsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGAvailabilityPeriodsTable2 : DXGrid
    {
        
        public UIGAvailabilityPeriodsTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailabilityPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Ingesson, Charlotte]");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem21032024Cell
        {
            get
            {
                if ((this.mUIItem21032024Cell == null))
                {
                    this.mUIItem21032024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem21032024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailabilityPeriodsGridControlCell[View]gridView1[Row]0[Column]gridColumn5";
                    this.mUIItem21032024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem21032024Cell.WindowTitles.Add("Linjeinnstillinger - [Ingesson, Charlotte]");
                    #endregion
                }
                return this.mUIItem21032024Cell;
            }
        }
        
        public DXCell UIItem14042024Cell
        {
            get
            {
                if ((this.mUIItem14042024Cell == null))
                {
                    this.mUIItem14042024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14042024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailabilityPeriodsGridControlCell[View]gridView1[Row]0[Column]gridColumn6";
                    this.mUIItem14042024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14042024Cell.WindowTitles.Add("Linjeinnstillinger - [Ingesson, Charlotte]");
                    #endregion
                }
                return this.mUIItem14042024Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem21032024Cell;
        
        private DXCell mUIItem14042024Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsattinnstillingerfWindow : DXWindow
    {
        
        public UIAnsattinnstillingerfWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansattinnstillinger for ansattlinje 1";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 1");
            #endregion
        }
        
        #region Properties
        public UIPaBottomClient UIPaBottomClient
        {
            get
            {
                if ((this.mUIPaBottomClient == null))
                {
                    this.mUIPaBottomClient = new UIPaBottomClient(this);
                }
                return this.mUIPaBottomClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaBottomClient mUIPaBottomClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaBottomClient : DXTestControl
    {
        
        public UIPaBottomClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paBottom";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 1");
            #endregion
        }
        
        #region Properties
        public DXButton UIAvbrytButton
        {
            get
            {
                if ((this.mUIAvbrytButton == null))
                {
                    this.mUIAvbrytButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCancel";
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIAvbrytButton.WindowTitles.Add("Ansattinnstillinger for ansattlinje 1");
                    #endregion
                }
                return this.mUIAvbrytButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIAvbrytButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILinjeinnstillingerCuWindow : DXWindow
    {
        
        public UILinjeinnstillingerCuWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Linjeinnstillinger - [Cullen, Damien]";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Cullen, Damien]");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl2Client1 UIGsPanelControl2Client
        {
            get
            {
                if ((this.mUIGsPanelControl2Client == null))
                {
                    this.mUIGsPanelControl2Client = new UIGsPanelControl2Client1(this);
                }
                return this.mUIGsPanelControl2Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl2Client1 mUIGsPanelControl2Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl2Client1 : DXTestControl
    {
        
        public UIGsPanelControl2Client1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Cullen, Damien]");
            #endregion
        }
        
        #region Properties
        public DXButton UIAvbrytButton
        {
            get
            {
                if ((this.mUIAvbrytButton == null))
                {
                    this.mUIAvbrytButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCancel";
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIAvbrytButton.WindowTitles.Add("Linjeinnstillinger - [Cullen, Damien]");
                    #endregion
                }
                return this.mUIAvbrytButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIAvbrytButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOppgavetildelingWindow1 : DXWindow
    {
        
        public UIOppgavetildelingWindow1()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "*Oppgavetildeling";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIVhContentCustom2 UIVhContentCustom
        {
            get
            {
                if ((this.mUIVhContentCustom == null))
                {
                    this.mUIVhContentCustom = new UIVhContentCustom2(this);
                }
                return this.mUIVhContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVhContentCustom2 mUIVhContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVhContentCustom2 : DXTestControl
    {
        
        public UIVhContentCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "vhContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonViewHost";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient3 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient3(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient3 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient3 : DXTestControl
    {
        
        public UIPcViewClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIRoleAssignmentOverviCustom1 UIRoleAssignmentOverviCustom
        {
            get
            {
                if ((this.mUIRoleAssignmentOverviCustom == null))
                {
                    this.mUIRoleAssignmentOverviCustom = new UIRoleAssignmentOverviCustom1(this);
                }
                return this.mUIRoleAssignmentOverviCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIRoleAssignmentOverviCustom1 mUIRoleAssignmentOverviCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRoleAssignmentOverviCustom1 : DXTestControl
    {
        
        public UIRoleAssignmentOverviCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RoleAssignmentOverviewView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RoleAssignmentOverviewView";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPanelContainer2DockPanel UIPanelContainer2DockPanel
        {
            get
            {
                if ((this.mUIPanelContainer2DockPanel == null))
                {
                    this.mUIPanelContainer2DockPanel = new UIPanelContainer2DockPanel(this);
                }
                return this.mUIPanelContainer2DockPanel;
            }
        }
        
        public UIVhContentCustom3 UIVhContentCustom
        {
            get
            {
                if ((this.mUIVhContentCustom == null))
                {
                    this.mUIVhContentCustom = new UIVhContentCustom3(this);
                }
                return this.mUIVhContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelContainer2DockPanel mUIPanelContainer2DockPanel;
        
        private UIVhContentCustom3 mUIVhContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelContainer2DockPanel : DXDockPanel
    {
        
        public UIPanelContainer2DockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelContainer2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPanelContainer1DockPanel UIPanelContainer1DockPanel
        {
            get
            {
                if ((this.mUIPanelContainer1DockPanel == null))
                {
                    this.mUIPanelContainer1DockPanel = new UIPanelContainer1DockPanel(this);
                }
                return this.mUIPanelContainer1DockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelContainer1DockPanel mUIPanelContainer1DockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelContainer1DockPanel : DXDockPanel
    {
        
        public UIPanelContainer1DockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelContainer1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIDpEmployeesDockPanel UIDpEmployeesDockPanel
        {
            get
            {
                if ((this.mUIDpEmployeesDockPanel == null))
                {
                    this.mUIDpEmployeesDockPanel = new UIDpEmployeesDockPanel(this);
                }
                return this.mUIDpEmployeesDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpEmployeesDockPanel mUIDpEmployeesDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpEmployeesDockPanel : DXDockPanel
    {
        
        public UIDpEmployeesDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIControlContainer1Custom UIControlContainer1Custom
        {
            get
            {
                if ((this.mUIControlContainer1Custom == null))
                {
                    this.mUIControlContainer1Custom = new UIControlContainer1Custom(this);
                }
                return this.mUIControlContainer1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainer1Custom mUIControlContainer1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainer1Custom : DXTestControl
    {
        
        public UIControlContainer1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "controlContainer1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIEmployeeListViewCustom UIEmployeeListViewCustom
        {
            get
            {
                if ((this.mUIEmployeeListViewCustom == null))
                {
                    this.mUIEmployeeListViewCustom = new UIEmployeeListViewCustom(this);
                }
                return this.mUIEmployeeListViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeListViewCustom mUIEmployeeListViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeListViewCustom : DXTestControl
    {
        
        public UIEmployeeListViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeListView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeListView";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGcEmployeesTable UIGcEmployeesTable
        {
            get
            {
                if ((this.mUIGcEmployeesTable == null))
                {
                    this.mUIGcEmployeesTable = new UIGcEmployeesTable(this);
                }
                return this.mUIGcEmployeesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcEmployeesTable mUIGcEmployeesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcEmployeesTable : DXGrid
    {
        
        public UIGcEmployeesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem2ErikssonMatsCell
        {
            get
            {
                if ((this.mUIItem2ErikssonMatsCell == null))
                {
                    this.mUIItem2ErikssonMatsCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2ErikssonMatsCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeesGridControlCell[View]gvEmployees[Row]0[Column]colDisplayName";
                    this.mUIItem2ErikssonMatsCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2ErikssonMatsCell.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIItem2ErikssonMatsCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem2ErikssonMatsCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVhContentCustom3 : DXTestControl
    {
        
        public UIVhContentCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "vhContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonViewHost";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient4 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient4(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient4 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient4 : DXTestControl
    {
        
        public UIPcViewClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIEmployeeFocusedManagCustom UIEmployeeFocusedManagCustom
        {
            get
            {
                if ((this.mUIEmployeeFocusedManagCustom == null))
                {
                    this.mUIEmployeeFocusedManagCustom = new UIEmployeeFocusedManagCustom(this);
                }
                return this.mUIEmployeeFocusedManagCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeFocusedManagCustom mUIEmployeeFocusedManagCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeFocusedManagCustom : DXTestControl
    {
        
        public UIEmployeeFocusedManagCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeFocusedManageView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeFocusedManageView";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIItemGridControl1Custom UIItemGridControl1Custom
        {
            get
            {
                if ((this.mUIItemGridControl1Custom == null))
                {
                    this.mUIItemGridControl1Custom = new UIItemGridControl1Custom(this);
                }
                return this.mUIItemGridControl1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemGridControl1Custom mUIItemGridControl1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemGridControl1Custom : DXTestControl
    {
        
        public UIItemGridControl1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "itemGridControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ItemGridControl";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIDdGridControlCustom1 UIDdGridControlCustom
        {
            get
            {
                if ((this.mUIDdGridControlCustom == null))
                {
                    this.mUIDdGridControlCustom = new UIDdGridControlCustom1(this);
                }
                return this.mUIDdGridControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDdGridControlCustom1 mUIDdGridControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDdGridControlCustom1 : DXTestControl
    {
        
        public UIDdGridControlCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ddGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DragDropGridControl";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGcDragDropGridTable3 UIGcDragDropGridTable
        {
            get
            {
                if ((this.mUIGcDragDropGridTable == null))
                {
                    this.mUIGcDragDropGridTable = new UIGcDragDropGridTable3(this);
                }
                return this.mUIGcDragDropGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDragDropGridTable3 mUIGcDragDropGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDragDropGridTable3 : DXGrid
    {
        
        public UIGcDragDropGridTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("*Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col29.01.2024";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col30.01.2024";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UID07001500Cell
        {
            get
            {
                if ((this.mUID07001500Cell == null))
                {
                    this.mUID07001500Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUID07001500Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col31.01.2024";
                    this.mUID07001500Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID07001500Cell.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUID07001500Cell;
            }
        }
        
        public DXCell UID07001500Cell1
        {
            get
            {
                if ((this.mUID07001500Cell1 == null))
                {
                    this.mUID07001500Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUID07001500Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col01.02.2024";
                    this.mUID07001500Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID07001500Cell1.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUID07001500Cell1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col02.02.2024";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col03.02.2024";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col04.02.2024";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col05.02.2024";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXCell UIN22000800Cell
        {
            get
            {
                if ((this.mUIN22000800Cell == null))
                {
                    this.mUIN22000800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIN22000800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col06.02.2024";
                    this.mUIN22000800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN22000800Cell.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIN22000800Cell;
            }
        }
        
        public DXCell UIN22000800Cell1
        {
            get
            {
                if ((this.mUIN22000800Cell1 == null))
                {
                    this.mUIN22000800Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN22000800Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col07.02.2024";
                    this.mUIN22000800Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN22000800Cell1.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIN22000800Cell1;
            }
        }
        
        public DXCell UIN22000800Cell2
        {
            get
            {
                if ((this.mUIN22000800Cell2 == null))
                {
                    this.mUIN22000800Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN22000800Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col08.02.2024";
                    this.mUIN22000800Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN22000800Cell2.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIN22000800Cell2;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col09.02.2024";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col10.02.2024";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDragDropGridGridControlCell[View]bgvMainView[Row]0[Column]col11.02.2024";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("*Oppgavetildeling");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUID07001500Cell;
        
        private DXCell mUID07001500Cell1;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItemCell3;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell5;
        
        private DXCell mUIN22000800Cell;
        
        private DXCell mUIN22000800Cell1;
        
        private DXCell mUIN22000800Cell2;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell7;
        
        private DXCell mUIItemCell8;
        #endregion
    }
}
