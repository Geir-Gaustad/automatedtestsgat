// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _020_Test_Arbeidsplan_Godkjenning
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddCalendarplanAshifts - Use 'AddCalendarplanAshiftsParams' to pass parameters into this method.
        /// </summary>
        public void AddCalendarplanAshifts()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            #endregion

            // Move cell to cell
            uIItemCell1.EnsureClickable(new Point(20, 10));
            Mouse.StartDragging(uIItemCell, new Point(20, 10));
            Mouse.StopDragging(uIItemCell1, new Point(20, 10));

            // Type 'a{Tab}' in '[Row]0[Column]RosterCell_5' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, this.AddCalendarplanAshiftsParams.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddCalendarplanAshiftsStep38 - Use 'AddCalendarplanAshiftsStep38Params' to pass parameters into this method.
        /// </summary>
        public void AddCalendarplanAshiftsStep38()
        {
            #region Variable Declarations
            DXCell uIACell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIGcRosterPlanTable.UIACell;
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            DXTextEdit uIRow1ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit;
            DXTextEdit uIRow2ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit;
            DXTextEdit uIRow3ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit;
            DXTextEdit uIRow4ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit;
            #endregion

            // Click 'A' cell
            Mouse.Click(uIACell, new Point(10, 11));

            // Wait for 1 seconds for user delay between actions; Type 'a{Down}' in '[Row]0[Column]RosterCell_9' text box
            Playback.Wait(500);
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, this.AddCalendarplanAshiftsStep38Params.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Wait for 1 seconds for user delay between actions; Type 'a{Down}' in '[Row]1[Column]RosterCell_9' text box
            Playback.Wait(500);
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit, this.AddCalendarplanAshiftsStep38Params.UIRow1ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Wait for 1 seconds for user delay between actions; Type 'a{Down}' in '[Row]2[Column]RosterCell_9' text box
            Playback.Wait(500);
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit, this.AddCalendarplanAshiftsStep38Params.UIRow2ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Wait for 1 seconds for user delay between actions; Type 'a{Down}' in '[Row]3[Column]RosterCell_9' text box
            Playback.Wait(500);
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit, this.AddCalendarplanAshiftsStep38Params.UIRow3ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Wait for 1 seconds for user delay between actions; Type 'a{Tab}' in '[Row]4[Column]RosterCell_9' text box
            Playback.Wait(500);
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit, this.AddCalendarplanAshiftsStep38Params.UIRow4ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddCalendarplanNshifts - Use 'AddCalendarplanNshiftsParams' to pass parameters into this method.
        /// </summary>
        public void AddCalendarplanNshifts()
        {
            #region Variable Declarations
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell11;
            DXTextEdit uIRow0ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit1;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            #endregion

            // Move cell to cell
            uIItemCell11.EnsureClickable(new Point(20, 10));
            Mouse.StartDragging(uIItemCell2, new Point(20, 10));
            Mouse.StopDragging(uIItemCell11, new Point(20, 10));

            // Type 'n{Tab}' in '[Row]0[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit1, this.AddCalendarplanNshiftsParams.UIRow0ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddFiveEmpsFromList
        /// </summary>
        public void AddFiveEmpsFromList()
        {
            #region Variable Declarations
            DXCell uIGustavssonRobertCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIGustavssonRobertCell;
            DXCell uIKaspersenKasperCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIKaspersenKasperCell;
            DXCell uILassenLiselotteCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UILassenLiselotteCell;
            DXCell uIMikkelsenMikkelCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIMikkelsenMikkelCell;
            DXCell uISvendsenSvanhildCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UISvendsenSvanhildCell;
            #endregion

            // Click 'Gustavsson, Robert' cell
            Mouse.Click(uIGustavssonRobertCell, new Point(36, 7));

            // Click 'Kaspersen, Kasper' cell while pressing Control
            Mouse.Click(uIKaspersenKasperCell, MouseButtons.Left, ModifierKeys.Control, new Point(36, 6));

            // Click 'Lassen, Liselotte' cell while pressing Control
            Mouse.Click(uILassenLiselotteCell, MouseButtons.Left, ModifierKeys.Control, new Point(37, 6));

            // Click 'Mikkelsen, Mikkel' cell while pressing Control
            Mouse.Click(uIMikkelsenMikkelCell, MouseButtons.Left, ModifierKeys.Control, new Point(37, 7));

            // Click 'Svendsen, Svanhild' cell while pressing Control
            Mouse.Click(uISvendsenSvanhildCell, MouseButtons.Left, ModifierKeys.Control, new Point(38, 7));
        }
        
        /// <summary>
        /// Approve2TillitsvalgtLinesStep34
        /// </summary>
        public void Approve2TillitsvalgtLinesStep34()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell;
            DXListBoxItem uIGodkjennListItem = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow0ColumnreqColTillComboBox.UIPopupImageComboBoxEdWindow.UIPopupImageComboBoxEdList.UIGodkjennListItem;
            DXCell uIGodkjennCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell;
            DXListBoxItem uIGodkjennListItem1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow2ColumnreqColTillComboBox.UIPopupImageComboBoxEdWindow.UIPopupImageComboBoxEdList.UIGodkjennListItem;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell, new Point(35, 8));

            // Click 'Godkjenn' list item
            Mouse.Click(uIGodkjennListItem, new Point(39, 9));

            // Click 'Godkjenn' cell
            Mouse.Click(uIGodkjennCell, new Point(41, 7));

            // Click 'Godkjenn' list item
            Mouse.Click(uIGodkjennListItem1, new Point(37, 8));
        }
        
        /// <summary>
        /// ApproveFjong
        /// </summary>
        public void ApproveFjong()
        {
            #region Variable Declarations
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell4;
            DXListBoxItem uIGodkjennListItem = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow0ColumnreqColLedeComboBox.UIPopupImageComboBoxEdWindow.UIPopupImageComboBoxEdList.UIGodkjennListItem;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell4, new Point(36, 6));

            // Click 'Godkjenn' list item
            Mouse.Click(uIGodkjennListItem, new Point(31, 7));
        }
        
        /// <summary>
        /// ApproveGustavssonAndSvendsenRejectKaspersenStep36 - Use 'ApproveGustavssonAndSvendsenRejectKaspersenStep36Params' to pass parameters into this method.
        /// </summary>
        public void ApproveGustavssonAndSvendsenRejectKaspersenStep36()
        {
            #region Variable Declarations
            DXComboBox uIRow0ColumnreqColTillComboBox = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow0ColumnreqColTillComboBox;
            DXListBoxItem uIGodkjennListItem = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow0ColumnreqColTillComboBox.UIPopupImageComboBoxEdWindow.UIPopupImageComboBoxEdList.UIGodkjennListItem;
            DXComboBox uIRow1ColumnreqColTillComboBox = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow1ColumnreqColTillComboBox;
            DXListBoxItem uIGodkjennListItem1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow1ColumnreqColTillComboBox.UIPopupImageComboBoxEdWindow1.UIPopupImageComboBoxEdList.UIGodkjennListItem;
            DXComboBox uIRow2ColumnreqColTillComboBox = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow2ColumnreqColTillComboBox;
            DXTextEdit uIMeCommentEdit1 = this.UISkrivenkommentartilaWindow.UIMeCommentEdit1;
            DXButton uIOKButton1 = this.UISkrivenkommentartilaWindow.UIOKButton1;
            #endregion

            // Select '0' in '[Row]0[Column]reqColTillitsvalgt' combo box
            //ValueAsString
            uIRow0ColumnreqColTillComboBox.ValueAsString = this.ApproveGustavssonAndSvendsenRejectKaspersenStep36Params.UIRow0ColumnreqColTillComboBoxValueAsString;

            // Click 'Godkjenn' list item
            Mouse.Click(uIGodkjennListItem, new Point(38, 7));

            // Select '0' in '[Row]1[Column]reqColTillitsvalgt' combo box
            //ValueAsString
            uIRow1ColumnreqColTillComboBox.ValueAsString = this.ApproveGustavssonAndSvendsenRejectKaspersenStep36Params.UIRow1ColumnreqColTillComboBoxValueAsString;

            // Click 'Godkjenn' list item
            Mouse.Click(uIGodkjennListItem1, new Point(30, 7));

            // Select '2' in '[Row]2[Column]reqColTillitsvalgt' combo box
            //ValueAsString
            uIRow2ColumnreqColTillComboBox.ValueAsString = this.ApproveGustavssonAndSvendsenRejectKaspersenStep36Params.UIRow2ColumnreqColTillComboBoxValueAsString;

            // Type 'Avvises' in 'meComment' text box
            //ValueAsString
            uIMeCommentEdit1.ValueAsString = this.ApproveGustavssonAndSvendsenRejectKaspersenStep36Params.UIMeCommentEdit1ValueAsString;

            // Click 'Ok' button
            Mouse.Click(uIOKButton1, new Point(1, 1));
        }
        
        /// <summary>
        /// ApproveTillitsvalgt3Linjer
        /// </summary>
        public void ApproveTillitsvalgt3Linjer()
        {
            #region Variable Declarations
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell5;
            DXListBoxItem uIGodkjennListItem = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow2ColumnreqColTillComboBox.UIPopupImageComboBoxEdWindow.UIPopupImageComboBoxEdList.UIGodkjennListItem;
            DXCell uIGodkjennCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell3;
            DXListBoxItem uIGodkjennListItem1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow3ColumnreqColTillComboBox.UIPopupImageComboBoxEdWindow.UIPopupImageComboBoxEdList.UIGodkjennListItem;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell5, new Point(34, 9));

            // Click 'Godkjenn' list item
            Mouse.Click(uIGodkjennListItem, new Point(40, 5));

            // Click 'Godkjenn' cell
            Mouse.Click(uIGodkjennCell3, new Point(41, 7));

            // Click 'Godkjenn' list item
            Mouse.Click(uIGodkjennListItem1, new Point(30, 11));
        }
        
        /// <summary>
        /// ChangeFagforeningSvendsen - Use 'ChangeFagforeningSvendsenParams' to pass parameters into this method.
        /// </summary>
        public void ChangeFagforeningSvendsen()
        {
            #region Variable Declarations
            DXTreeListCell uIItem150TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode4TreeListNode.UINode0TreeListNode.UIItem150TreeListCell;
            DXLookUpEdit uIEUnionCodeLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerLineVCustom.UIEUnionCodeLookUpEdit;
            #endregion

            // Click '1. 50%' TreeListCell
            Mouse.Click(uIItem150TreeListCell, new Point(100, 11));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.UnionMembershipViewModel' in 'eUnionCode' LookUpEdit
            //ValueTypeName
            uIEUnionCodeLookUpEdit.ValueTypeName = this.ChangeFagforeningSvendsenParams.UIEUnionCodeLookUpEditValueTypeName;

            // Type 'KFO - KFO' in 'eUnionCode' LookUpEdit
            //ValueAsString
            uIEUnionCodeLookUpEdit.ValueAsString = this.ChangeFagforeningSvendsenParams.UIEUnionCodeLookUpEditValueAsString;
        }
        
        /// <summary>
        /// CheckAllLederLinesApprovedStep27 - Use 'CheckAllLederLinesApprovedStep27ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAllLederLinesApprovedStep27()
        {
            #region Variable Declarations
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell4;
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell1;
            DXCell uIGodkjennCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell;
            DXCell uIGodkjennCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell1;
            #endregion

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLederLinesApprovedStep27ExpectedValues.UIItemCell4Text, uIItemCell4.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLederLinesApprovedStep27ExpectedValues.UIItemCellText, uIItemCell.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLederLinesApprovedStep27ExpectedValues.UIItemCell1Text, uIItemCell1.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLederLinesApprovedStep27ExpectedValues.UIGodkjennCellText, uIGodkjennCell.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLederLinesApprovedStep27ExpectedValues.UIGodkjennCell1Text, uIGodkjennCell1.Text);
        }
        
        /// <summary>
        /// CheckApprovedLinesDisabled - Use 'CheckApprovedLinesDisabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckApprovedLinesDisabled()
        {
            #region Variable Declarations
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXCell uIItemCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell7;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell11;
            DXCell uINCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UINCell;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            #endregion

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckApprovedLinesDisabledExpectedValues.UIItemCell3ValueAsString, uIItemCell3.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (N) readonly'
            Assert.AreEqual(this.CheckApprovedLinesDisabledExpectedValues.UIItemCell2ValueAsString, uIItemCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckApprovedLinesDisabledExpectedValues.UIItemCell4ValueAsString, uIItemCell4.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckApprovedLinesDisabledExpectedValues.UIItemCell5ValueAsString, uIItemCell5.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckApprovedLinesDisabledExpectedValues.UIItemCell6ValueAsString, uIItemCell6.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckApprovedLinesDisabledExpectedValues.UIItemCell7ValueAsString, uIItemCell7.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'PlanShift (N) readonly'
            Assert.AreEqual(this.CheckApprovedLinesDisabledExpectedValues.UIItemCell11ValueAsString, uIItemCell11.ValueAsString);

            // Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
            Assert.AreEqual(this.CheckApprovedLinesDisabledExpectedValues.UINCellValueAsString, uINCell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckApprovedLinesDisabledExpectedValues.UIItemCell8ValueAsString, uIItemCell8.ValueAsString);
        }
        
        /// <summary>
        /// CheckDataInTransefereWindowStep40 - Use 'CheckDataInTransefereWindowStep40ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDataInTransefereWindowStep40()
        {
            #region Variable Declarations
            DXCell uIGustavssonRobertCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIGustavssonRobertCell;
            DXCell uIKaspersenKasperCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIKaspersenKasperCell;
            DXCell uILassenLiselotteCell = this.UIOverførtilleggWindow.UIGcExportsTable.UILassenLiselotteCell;
            DXCell uIMikkelsenMikkelCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIMikkelsenMikkelCell;
            DXCell uISvendsenSvanhildCell = this.UIOverførtilleggWindow.UIGcExportsTable.UISvendsenSvanhildCell;
            DXButton uIOverførButton = this.UIOverførtilleggWindow.UIOverførButton;
            #endregion

            // Verify that the 'ValueAsString' property of 'Gustavsson, Robert' cell equals 'Gustavsson, Robert'
            Assert.AreEqual(this.CheckDataInTransefereWindowStep40ExpectedValues.UIGustavssonRobertCellValueAsString, uIGustavssonRobertCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Kaspersen, Kasper' cell equals 'Kaspersen, Kasper'
            Assert.AreEqual(this.CheckDataInTransefereWindowStep40ExpectedValues.UIKaspersenKasperCellValueAsString, uIKaspersenKasperCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Lassen, Liselotte' cell equals 'Lassen, Liselotte'
            Assert.AreEqual(this.CheckDataInTransefereWindowStep40ExpectedValues.UILassenLiselotteCellValueAsString, uILassenLiselotteCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Mikkelsen, Mikkel' cell equals 'Mikkelsen, Mikkel'
            Assert.AreEqual(this.CheckDataInTransefereWindowStep40ExpectedValues.UIMikkelsenMikkelCellValueAsString, uIMikkelsenMikkelCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Svendsen, Svanhild' cell equals 'Svendsen, Svanhild'
            Assert.AreEqual(this.CheckDataInTransefereWindowStep40ExpectedValues.UISvendsenSvanhildCellValueAsString, uISvendsenSvanhildCell.ValueAsString);

            // Verify that the 'Enabled' property of '&Overfør' button equals 'True'
            Assert.AreEqual(this.CheckDataInTransefereWindowStep40ExpectedValues.UIOverførButtonEnabled, uIOverførButton.Enabled);
        }
        
        /// <summary>
        /// CheckEffectuationOkStep62 - Use 'CheckEffectuationOkStep62ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEffectuationOkStep62()
        {
            #region Variable Declarations
            DXRibbonItem uISlettiverksettingRibbonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpPlanRibbonPage.UIGrpEffectuateRibbonPageGroup.UISlettiverksettingRibbonItem;
            #endregion

            // Verify that the 'Enabled' property of 'Slett iverksetting' RibbonItem equals 'True'
            Assert.AreEqual(this.CheckEffectuationOkStep62ExpectedValues.UISlettiverksettingRibbonItemEnabled, uISlettiverksettingRibbonItem.Enabled);
        }
        
        /// <summary>
        /// CheckEmpUnionsStep26 - Use 'CheckEmpUnionsStep26ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpUnionsStep26()
        {
            #region Variable Declarations
            DXCell uIKFOCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIKFOCell;
            DXCell uIGustavssonRobertCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGustavssonRobertCell;
            DXCell uIFAGFagforbundetCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIFAGFagforbundetCell;
            DXCell uIKaspersenKasperCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIKaspersenKasperCell;
            DXCell uINSFUNSFUorganisertCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UINSFUNSFUorganisertCell;
            DXCell uILassenLiselotteCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UILassenLiselotteCell;
            DXCell uINSFNorsksykepleierfoCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UINSFNorsksykepleierfoCell;
            DXCell uIMikkelsenMikkelCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIMikkelsenMikkelCell;
            DXCell uIFAGFagforbundetCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIFAGFagforbundetCell1;
            DXCell uISvendsenSvanhildCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UISvendsenSvanhildCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'KFO' cell equals 'KFO'
            Assert.AreEqual(this.CheckEmpUnionsStep26ExpectedValues.UIKFOCellValueAsString, uIKFOCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Gustavsson, Robert' cell equals 'Gustavsson, Robert'
            Assert.AreEqual(this.CheckEmpUnionsStep26ExpectedValues.UIGustavssonRobertCellValueAsString, uIGustavssonRobertCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'FAG - Fagforbundet' cell equals 'FAG - Fagforbundet'
            Assert.AreEqual(this.CheckEmpUnionsStep26ExpectedValues.UIFAGFagforbundetCellValueAsString, uIFAGFagforbundetCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Kaspersen, Kasper' cell equals 'Kaspersen, Kasper'
            Assert.AreEqual(this.CheckEmpUnionsStep26ExpectedValues.UIKaspersenKasperCellValueAsString, uIKaspersenKasperCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'NSFU - NSF Uorganisert' cell equals 'NSFU - NSF Uorganisert'
            Assert.AreEqual(this.CheckEmpUnionsStep26ExpectedValues.UINSFUNSFUorganisertCellValueAsString, uINSFUNSFUorganisertCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Lassen, Liselotte' cell equals 'Lassen, Liselotte'
            Assert.AreEqual(this.CheckEmpUnionsStep26ExpectedValues.UILassenLiselotteCellValueAsString, uILassenLiselotteCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'NSF - Norsk sykepleierforbund' cell equals 'NSF - Norsk sykepleierforbund'
            Assert.AreEqual(this.CheckEmpUnionsStep26ExpectedValues.UINSFNorsksykepleierfoCellValueAsString, uINSFNorsksykepleierfoCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Mikkelsen, Mikkel' cell equals 'Mikkelsen, Mikkel'
            Assert.AreEqual(this.CheckEmpUnionsStep26ExpectedValues.UIMikkelsenMikkelCellValueAsString, uIMikkelsenMikkelCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'FAG - Fagforbundet' cell equals 'KFO'
            Assert.AreEqual(this.CheckEmpUnionsStep26ExpectedValues.UIFAGFagforbundetCell1ValueAsString, uIFAGFagforbundetCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Svendsen, Svanhild' cell equals 'Svendsen, Svanhild'
            Assert.AreEqual(this.CheckEmpUnionsStep26ExpectedValues.UISvendsenSvanhildCellValueAsString, uISvendsenSvanhildCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckFTTTransfereOkStep60 - Use 'CheckFTTTransfereOkStep60ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTTransfereOkStep60()
        {
            #region Variable Declarations
            DXCell uIGustavssonRobertCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIGustavssonRobertCell;
            DXCell uIKaspersenKasperCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIKaspersenKasperCell;
            DXCell uILassenLiselotteCell = this.UIOverførtilleggWindow.UIGcExportsTable.UILassenLiselotteCell;
            DXCell uIMikkelsenMikkelCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIMikkelsenMikkelCell;
            DXCell uISvendsenSvanhildCell = this.UIOverførtilleggWindow.UIGcExportsTable.UISvendsenSvanhildCell;
            DXButton uIOverførButton = this.UIOverførtilleggWindow.UIOverførButton;
            #endregion

            // Verify that the 'ValueAsString' property of 'Gustavsson, Robert' cell equals 'Gustavsson, Robert'
            Assert.AreEqual(this.CheckFTTTransfereOkStep60ExpectedValues.UIGustavssonRobertCellValueAsString, uIGustavssonRobertCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Kaspersen, Kasper' cell equals 'Kaspersen, Kasper'
            Assert.AreEqual(this.CheckFTTTransfereOkStep60ExpectedValues.UIKaspersenKasperCellValueAsString, uIKaspersenKasperCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Lassen, Liselotte' cell equals 'Lassen, Liselotte'
            Assert.AreEqual(this.CheckFTTTransfereOkStep60ExpectedValues.UILassenLiselotteCellValueAsString, uILassenLiselotteCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Mikkelsen, Mikkel' cell equals 'Mikkelsen, Mikkel'
            Assert.AreEqual(this.CheckFTTTransfereOkStep60ExpectedValues.UIMikkelsenMikkelCellValueAsString, uIMikkelsenMikkelCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Svendsen, Svanhild' cell equals 'Svendsen, Svanhild'
            Assert.AreEqual(this.CheckFTTTransfereOkStep60ExpectedValues.UISvendsenSvanhildCellValueAsString, uISvendsenSvanhildCell.ValueAsString);

            // Verify that the 'Enabled' property of '&Overfør' button equals 'True'
            Assert.AreEqual(this.CheckFTTTransfereOkStep60ExpectedValues.UIOverførButtonEnabled, uIOverførButton.Enabled);
        }
        
        /// <summary>
        /// CheckLinesDisabledInEmployeeLineSettings - Use 'CheckLinesDisabledInEmployeeLineSettingsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesDisabledInEmployeeLineSettings()
        {
            #region Variable Declarations
            DXTextEdit uIENumber3Edit = this.UILinjeinnstillingerGuWindow.UIGsPanelControl3Client.UIENumber3Edit;
            DXTextEdit uIENumber2Edit = this.UILinjeinnstillingerGuWindow.UIGsPanelControl3Client.UIENumber2Edit;
            DXTextEdit uIEFlexibleHoursDescriEdit = this.UILinjeinnstillingerGuWindow.UIGsPanelControl3Client.UIEFlexibleHoursDescriEdit;
            DXLookUpEdit uILeAvailableRulesetsLookUpEdit = this.UILinjeinnstillingerGuWindow.UIGsPanelControl3Client.UILeAvailableRulesetsLookUpEdit;
            DXTextEdit uIENumber1Edit = this.UILinjeinnstillingerGuWindow.UIGsPanelControl3Client.UIENumber1Edit;
            DXButton uIBtnSetYearlyWorkTimeButton = this.UILinjeinnstillingerGuWindow.UIGsPanelControl3Client.UIBtnSetYearlyWorkTimeButton;
            DXRadioButton uIRadioGroupItemRadioButton = this.UILinjeinnstillingerGuWindow.UIGsPanelControl3Client.UIRgCalculatedTimeRadioGroup.UIRadioGroupItemRadioButton;
            DXRadioButton uIRadioGroupItemRadioButton1 = this.UILinjeinnstillingerGuWindow.UIGsPanelControl3Client.UIRgCalculatedTimeRadioGroup.UIRadioGroupItemRadioButton1;
            DXLookUpEdit uIDrdToSporadicLookUpEdit = this.UILinjeinnstillingerGuWindow.UIGsPanelControl3Client.UIGcOvertimeClient.UIDrdToSporadicLookUpEdit;
            DXCheckBox uIChkUpdateSaldoBankCheckBox = this.UILinjeinnstillingerGuWindow.UIGsPanelControl3Client.UIGcOvertimeClient.UIChkUpdateSaldoBankCheckBox;
            DXComboBox uILeOvertimeDefaultCodComboBox = this.UILinjeinnstillingerGuWindow.UIGsPanelControl3Client.UIGcOvertimeClient.UILeOvertimeDefaultCodComboBox;
            #endregion

            // Verify that the 'ReadOnly' property of 'eNumber[3]' text box equals 'True'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeLineSettingsExpectedValues.UIENumber3EditReadOnly, uIENumber3Edit.ReadOnly);

            // Verify that the 'ReadOnly' property of 'eNumber[2]' text box equals 'True'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeLineSettingsExpectedValues.UIENumber2EditReadOnly, uIENumber2Edit.ReadOnly);

            // Verify that the 'ReadOnly' property of 'eFlexibleHoursDescription' text box equals 'True'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeLineSettingsExpectedValues.UIEFlexibleHoursDescriEditReadOnly, uIEFlexibleHoursDescriEdit.ReadOnly);

            // Verify that the 'ReadOnly' property of 'leAvailableRulesets' LookUpEdit equals 'True'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeLineSettingsExpectedValues.UILeAvailableRulesetsLookUpEditReadOnly, uILeAvailableRulesetsLookUpEdit.ReadOnly);

            // Verify that the 'ReadOnly' property of 'eNumber[1]' text box equals 'True'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeLineSettingsExpectedValues.UIENumber1EditReadOnly, uIENumber1Edit.ReadOnly);

            // Verify that the 'Enabled' property of 'btnSetYearlyWorkTimePercentToDiff' button equals 'False'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeLineSettingsExpectedValues.UIBtnSetYearlyWorkTimeButtonEnabled, uIBtnSetYearlyWorkTimeButton.Enabled);

            // Verify that the 'ReadOnly' property of 'RadioGroupItem' radio button equals 'True'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeLineSettingsExpectedValues.UIRadioGroupItemRadioButtonReadOnly, uIRadioGroupItemRadioButton.ReadOnly);

            // Verify that the 'ReadOnly' property of 'RadioGroupItem' radio button equals 'True'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeLineSettingsExpectedValues.UIRadioGroupItemRadioButton1ReadOnly, uIRadioGroupItemRadioButton1.ReadOnly);

            // Verify that the 'ReadOnly' property of 'drdToSporadic' LookUpEdit equals 'True'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeLineSettingsExpectedValues.UIDrdToSporadicLookUpEditReadOnly, uIDrdToSporadicLookUpEdit.ReadOnly);

            // Verify that the 'Enabled' property of 'chkUpdateSaldoBank' check box equals 'False'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeLineSettingsExpectedValues.UIChkUpdateSaldoBankCheckBoxEnabled, uIChkUpdateSaldoBankCheckBox.Enabled);

            // Verify that the 'Enabled' property of 'leOvertimeDefaultCode' combo box equals 'False'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeLineSettingsExpectedValues.UILeOvertimeDefaultCodComboBoxEnabled, uILeOvertimeDefaultCodComboBox.Enabled);
        }
        
        /// <summary>
        /// CheckLinesDisabledInEmployeeSettings - Use 'CheckLinesDisabledInEmployeeSettingsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesDisabledInEmployeeSettings()
        {
            #region Variable Declarations
            DXCheckBox uIChkEditCheckBox = this.UIAnsattinnstillingerfWindow1.UIPaMainContentClient.UIGsTabControl1TabList.UITabRosterSetupClient.UINbcRosterSetupNavBar.UINavBarGroupControlCoScrollableControl.UIPnlEditClient.UIChkEditCheckBox;
            DXCheckBox uIChkEditCheckBox1 = this.UIAnsattinnstillingerfWindow1.UIPaMainContentClient.UIGsTabControl1TabList.UITabRosterSetupClient.UINbcRosterSetupNavBar.UINavBarGroupControlCoScrollableControl1.UIPnlEditClient.UIChkEditCheckBox;
            DXCheckBox uIChkEditCheckBox2 = this.UIAnsattinnstillingerfWindow1.UIPaMainContentClient.UIGsTabControl1TabList.UITabRosterSetupClient.UINbcRosterSetupNavBar.UINavBarGroupControlCoScrollableControl2.UIPnlEditClient.UIChkEditCheckBox;
            #endregion

            // Verify that the 'Enabled' property of 'chkEdit' check box equals 'False'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeSettingsExpectedValues.UIChkEditCheckBoxEnabled, uIChkEditCheckBox.Enabled);

            // Verify that the 'Enabled' property of 'chkEdit' check box equals 'False'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeSettingsExpectedValues.UIChkEditCheckBoxEnabled1, uIChkEditCheckBox1.Enabled);

            // Verify that the 'Enabled' property of 'chkEdit' check box equals 'False'
            Assert.AreEqual(this.CheckLinesDisabledInEmployeeSettingsExpectedValues.UIChkEditCheckBoxEnabled2, uIChkEditCheckBox2.Enabled);
        }
        
        /// <summary>
        /// CheckNoNotifications - Use 'CheckNoNotificationsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckNoNotifications()
        {
            #region Variable Declarations
            DXPopupEdit uILnkDetailPopupEdit = this.UIIverksetteWindow.UIPnlTopClient.UILnkDetailPopupEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals 'Ingen meldinger'
            Assert.AreEqual(this.CheckNoNotificationsExpectedValues.UILnkDetailPopupEditValueAsString, uILnkDetailPopupEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindow - Use 'CheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindowExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindow()
        {
            #region Variable Declarations
            DXPopupEdit uILnkDetailPopupEdit = this.UISletteiverksettingWindow.UIPnlToppMenuClient.UILnkDetailPopupEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals 'Det er 0 stk. melding(er)'
            Assert.AreEqual(this.CheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindowExpectedValues.UILnkDetailPopupEditValueAsString, uILnkDetailPopupEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckRegMessagesStep47 - Use 'CheckRegMessagesStep47ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRegMessagesStep47()
        {
            #region Variable Declarations
            DXCell uILinje71PirqetePetronCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinje71PirqetePetronCell;
            DXCell uILinje51SvendsenSvanhCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinje51SvendsenSvanhCell;
            DXCell uILinje31LassenLiselotCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinje31LassenLiselotCell;
            DXCell uILinje11GustavssonRobCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinje11GustavssonRobCell;
            DXCell uILinje21KaspersenKaspCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinje21KaspersenKaspCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Linje 7 - 1 - Pirqete, Petronella - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 4 - 1 - Mikkelsen, Mikkel - Kan ikke iverksettes, den mangler godkjenning.'
            Assert.AreEqual(this.CheckRegMessagesStep47ExpectedValues.UILinje71PirqetePetronCellValueAsString, uILinje71PirqetePetronCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linje 5 - 1 - Svendsen, Svanhild - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 5 - 1 - Svendsen, Svanhild - Kan ikke iverksettes, den mangler godkjenning.'
            Assert.AreEqual(this.CheckRegMessagesStep47ExpectedValues.UILinje51SvendsenSvanhCellValueAsString, uILinje51SvendsenSvanhCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linje 3 - 1 - Lassen, Liselotte - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 3 - 1 - Lassen, Liselotte - Kan ikke iverksettes, den mangler godkjenning.'
            Assert.AreEqual(this.CheckRegMessagesStep47ExpectedValues.UILinje31LassenLiselotCellValueAsString, uILinje31LassenLiselotCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linje 1 - 1 - Gustavsson, Robert - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 1 - 1 - Gustavsson, Robert - Kan ikke iverksettes, den mangler godkjenning.'
            Assert.AreEqual(this.CheckRegMessagesStep47ExpectedValues.UILinje11GustavssonRobCellValueAsString, uILinje11GustavssonRobCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linje 2 - 1 - Kaspersen, Kasper - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 2 - 1 - Kaspersen, Kasper - Kan ikke iverksettes, den mangler godkjenning.'
            Assert.AreEqual(this.CheckRegMessagesStep47ExpectedValues.UILinje21KaspersenKaspCellValueAsString, uILinje21KaspersenKaspCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckRegStatusStep61 - Use 'CheckRegStatusStep61ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRegStatusStep61()
        {
            #region Variable Declarations
            DXPopupEdit uILnkDetailPopupEdit = this.UIIverksetteWindow.UIPnlTopClient.UILnkDetailPopupEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals 'Ingen meldinger'
            Assert.AreEqual(this.CheckRegStatusStep61ExpectedValues.UILnkDetailPopupEditValueAsString, uILnkDetailPopupEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckRegStatusStep9 - Use 'CheckRegStatusStep9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRegStatusStep9()
        {
            #region Variable Declarations
            DXCell uILinje71PirqetePetronCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinje71PirqetePetronCell;
            DXCell uILinjenerikkegodkjentCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinjenerikkegodkjentCell;
            DXCell uILinjenerikkegodkjentCell1 = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinjenerikkegodkjentCell1;
            DXCell uILinjenerikkegodkjentCell2 = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinjenerikkegodkjentCell2;
            DXCell uILinjenerikkegodkjentCell3 = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinjenerikkegodkjentCell3;
            DXCell uILinjenerikkegodkjentCell4 = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinjenerikkegodkjentCell4;
            DXCell uILinjenerikkegodkjentCell5 = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinjenerikkegodkjentCell5;
            DXCell uILinjenerikkegodkjentCell6 = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinjenerikkegodkjentCell6;
            DXCell uILinjenerikkegodkjentCell7 = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinjenerikkegodkjentCell7;
            DXCell uILinje31GustavssonRobCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinje31GustavssonRobCell;
            DXCell uILinjenerikkegodkjentCell8 = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UILinjenerikkegodkjentCell8;
            #endregion

            // Verify that the 'ValueAsString' property of 'Linje 7 - 1 - Pirqete, Petronella - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 7 - 1 - Pirqete, Petronella - Kan ikke iverksettes, den mangler godkjenning.'
            Assert.AreEqual(this.CheckRegStatusStep9ExpectedValues.UILinje71PirqetePetronCellValueAsString, uILinje71PirqetePetronCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
            Assert.AreEqual(this.CheckRegStatusStep9ExpectedValues.UILinjenerikkegodkjentCellValueAsString, uILinjenerikkegodkjentCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
            Assert.AreEqual(this.CheckRegStatusStep9ExpectedValues.UILinjenerikkegodkjentCell1ValueAsString, uILinjenerikkegodkjentCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
            Assert.AreEqual(this.CheckRegStatusStep9ExpectedValues.UILinjenerikkegodkjentCell2ValueAsString, uILinjenerikkegodkjentCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
            Assert.AreEqual(this.CheckRegStatusStep9ExpectedValues.UILinjenerikkegodkjentCell3ValueAsString, uILinjenerikkegodkjentCell3.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
            Assert.AreEqual(this.CheckRegStatusStep9ExpectedValues.UILinjenerikkegodkjentCell4ValueAsString, uILinjenerikkegodkjentCell4.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
            Assert.AreEqual(this.CheckRegStatusStep9ExpectedValues.UILinjenerikkegodkjentCell5ValueAsString, uILinjenerikkegodkjentCell5.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
            Assert.AreEqual(this.CheckRegStatusStep9ExpectedValues.UILinjenerikkegodkjentCell6ValueAsString, uILinjenerikkegodkjentCell6.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
            Assert.AreEqual(this.CheckRegStatusStep9ExpectedValues.UILinjenerikkegodkjentCell7ValueAsString, uILinjenerikkegodkjentCell7.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linje 3 - 1 - Gustavsson, Robert - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 3 - 1 - Gustavsson, Robert - Kan ikke iverksettes, den mangler godkjenning.'
            Assert.AreEqual(this.CheckRegStatusStep9ExpectedValues.UILinje31GustavssonRobCellValueAsString, uILinje31GustavssonRobCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
            Assert.AreEqual(this.CheckRegStatusStep9ExpectedValues.UILinjenerikkegodkjentCell8ValueAsString, uILinjenerikkegodkjentCell8.ValueAsString);
        }
        
        /// <summary>
        /// CheckRepresentations_Step19 - Use 'CheckRepresentations_Step19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRepresentations_Step19()
        {
            #region Variable Declarations
            DXCell uILeder5080Cell = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UILeder5080Cell;
            DXCell uIItem5080GodkjenningCell = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UIItem5080GodkjenningCell;
            DXCell uILederCell1 = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UILederCell1;
            DXCell uIRolleTillitsvalgtFAGCell = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UIRolleTillitsvalgtFAGCell;
            DXCell uIItem5080GodkjenningCell1 = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UIItem5080GodkjenningCell1;
            DXCell uITillitsvalgtCell = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UITillitsvalgtCell;
            DXCell uITillitsvalgtNSF5080Cell = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UITillitsvalgtNSF5080Cell;
            DXCell uIItem5080GodkjenningCell2 = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UIItem5080GodkjenningCell2;
            DXCell uITillitsvalgtCell1 = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UITillitsvalgtCell1;
            DXCell uIKoordinatorCell = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UIKoordinatorCell;
            DXCell uIItem5080GodkjenningCell3 = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UIItem5080GodkjenningCell3;
            DXCell uIKoordinatorCell1 = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UIKoordinatorCell1;
            #endregion

            // Verify that the 'ValueAsString' property of 'Leder 5080' cell equals 'Leder 5080'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UILeder5080CellValueAsString, uILeder5080Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5080 - Godkjenning' cell equals '5080 - Godkjenning'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UIItem5080GodkjenningCellValueAsString, uIItem5080GodkjenningCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Leder' cell equals 'Leder'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UILederCell1ValueAsString, uILederCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Rolle Tillitsvalgt FAG KFO 5080' cell equals 'Rolle Tillitsvalgt FAG KFO 5080'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UIRolleTillitsvalgtFAGCellValueAsString, uIRolleTillitsvalgtFAGCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5080 - Godkjenning' cell equals '5080 - Godkjenning'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UIItem5080GodkjenningCell1ValueAsString, uIItem5080GodkjenningCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Tillitsvalgt' cell equals 'Tillitsvalgt'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UITillitsvalgtCellValueAsString, uITillitsvalgtCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Tillitsvalgt NSF 5080' cell equals 'Tillitsvalgt NSF 5080'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UITillitsvalgtNSF5080CellValueAsString, uITillitsvalgtNSF5080Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5080 - Godkjenning' cell equals '5080 - Godkjenning'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UIItem5080GodkjenningCell2ValueAsString, uIItem5080GodkjenningCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Tillitsvalgt' cell equals 'Tillitsvalgt'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UITillitsvalgtCell1ValueAsString, uITillitsvalgtCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Koordinator' cell equals 'Koordinator'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UIKoordinatorCellValueAsString, uIKoordinatorCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5080 - Godkjenning' cell equals '5080 - Godkjenning'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UIItem5080GodkjenningCell3ValueAsString, uIItem5080GodkjenningCell3.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Koordinator' cell equals 'Koordinator'
            Assert.AreEqual(this.CheckRepresentations_Step19ExpectedValues.UIKoordinatorCell1ValueAsString, uIKoordinatorCell1.ValueAsString);
        }
        
        /// <summary>
        /// CheckRepresentations_Step3 - Use 'CheckRepresentations_Step3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRepresentations_Step3()
        {
            #region Variable Declarations
            DXCell uILeder5000Cell = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UILeder5000Cell;
            DXCell uIItem5000ARBEIDSPLANKCell = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UIItem5000ARBEIDSPLANKCell;
            DXCell uILederCell = this.UIRepresentasjonerWindow.UIGsLayoutControl1Custom.UIRootLayoutGroup.UILayoutControlItem1LayoutControlItem.UIGrpRepresentationsClient.UIGcRepresentationsTable.UILederCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Leder 5000' cell equals 'Leder 5000'
            Assert.AreEqual(this.CheckRepresentations_Step3ExpectedValues.UILeder5000CellValueAsString, uILeder5000Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5000 - ARBEIDSPLANKLINIKKEN' cell equals '5000 - ARBEIDSPLANKLINIKKEN'
            Assert.AreEqual(this.CheckRepresentations_Step3ExpectedValues.UIItem5000ARBEIDSPLANKCellValueAsString, uIItem5000ARBEIDSPLANKCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Leder' cell equals 'Leder'
            Assert.AreEqual(this.CheckRepresentations_Step3ExpectedValues.UILederCellValueAsString, uILederCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckRow3Disabled - Use 'CheckRow3DisabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRow3Disabled()
        {
            #region Variable Declarations
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell1;
            #endregion

            // Verify that the 'ClassName' property of cell equals 'GridControlCell'
            Assert.AreEqual(this.CheckRow3DisabledExpectedValues.UIItemCell1ClassName, uIItemCell1.ClassName);

            // Verify that the 'ControlType' property of cell equals 'Cell'
            Assert.AreEqual(this.CheckRow3DisabledExpectedValues.UIItemCell1ControlType, uIItemCell1.ControlType.ToString());
        }
        
        /// <summary>
        /// CheckRow4And5IsApproved - Use 'CheckRow4And5IsApprovedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRow4And5IsApproved()
        {
            #region Variable Declarations
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell1;
            DXCell uIGodkjennCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell;
            #endregion

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckRow4And5IsApprovedExpectedValues.UIItemCell1Text, uIItemCell1.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckRow4And5IsApprovedExpectedValues.UIGodkjennCellText, uIGodkjennCell.Text);
        }
        
        /// <summary>
        /// CheckRow7To9IsRejected - Use 'CheckRow7To9IsRejectedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRow7To9IsRejected()
        {
            #region Variable Declarations
            DXCell uIGodkjennCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell2;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell2;
            DXCell uIAvvisCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIAvvisCell;
            #endregion

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Avvis'
            Assert.AreEqual(this.CheckRow7To9IsRejectedExpectedValues.UIGodkjennCell2Text, uIGodkjennCell2.Text);

            // Verify that the 'Text' property of cell equals 'Avvis'
            Assert.AreEqual(this.CheckRow7To9IsRejectedExpectedValues.UIItemCell2Text, uIItemCell2.Text);

            // Verify that the 'Text' property of 'Avvis' cell equals 'Avvis'
            Assert.AreEqual(this.CheckRow7To9IsRejectedExpectedValues.UIAvvisCellText, uIAvvisCell.Text);
        }
        
        /// <summary>
        /// CheckRow8To9IsRepealed - Use 'CheckRow8To9IsRepealedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRow8To9IsRepealed()
        {
            #region Variable Declarations
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell2;
            DXCell uIAvvisCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIAvvisCell;
            #endregion

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRow8To9IsRepealedExpectedValues.UIItemCell2Text, uIItemCell2.Text);

            // Verify that the 'Text' property of 'Avvis' cell equals ''
            Assert.AreEqual(this.CheckRow8To9IsRepealedExpectedValues.UIAvvisCellText, uIAvvisCell.Text);
        }
        
        /// <summary>
        /// CheckRowsAreRepealed - Use 'CheckRowsAreRepealedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRowsAreRepealed()
        {
            #region Variable Declarations
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell3;
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell6;
            DXCell uIItemCell7 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell7;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell8;
            DXCell uIItemCell9 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell9;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell4;
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell1;
            DXCell uIGodkjennCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell;
            DXCell uIGodkjennCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell1;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell11;
            DXCell uIItemCell12 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell12;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell5;
            DXCell uIGodkjennCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell3;
            DXCell uIItemCell10 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell10;
            #endregion

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCell3Text, uIItemCell3.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCell6Text, uIItemCell6.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCell7Text, uIItemCell7.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCell8Text, uIItemCell8.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCell9Text, uIItemCell9.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCell4Text, uIItemCell4.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCellText, uIItemCell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCell1Text, uIItemCell1.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIGodkjennCellText, uIGodkjennCell.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIGodkjennCell1Text, uIGodkjennCell1.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCell11Text, uIItemCell11.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCell12Text, uIItemCell12.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCell5Text, uIItemCell5.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIGodkjennCell3Text, uIGodkjennCell3.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRowsAreRepealedExpectedValues.UIItemCell10Text, uIItemCell10.Text);
        }
        
        /// <summary>
        /// CheckWarningWhenClicingCaspersenLine2
        /// </summary>
        public void CheckWarningWhenClicingCaspersenLine2()
        {
            #region Variable Declarations
            DXCell uIGodkjennCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell;
            DXButton uIOKButton = this.UIGT1002AdvarselWindow.UIOKButton;
            #endregion

            // Click 'Godkjenn' cell
            Mouse.Click(uIGodkjennCell, new Point(36, 8));

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// CheckWeekendPatternDisabledInEmployeeSettings - Use 'CheckWeekendPatternDisabledInEmployeeSettingsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWeekendPatternDisabledInEmployeeSettings()
        {
            #region Variable Declarations
            DXCheckBox uIChkFixedWeekendRotatCheckBox = this.UIAnsattinnstillingerfWindow.UIPaMainContentClient.UIGsTabControl1TabList.UITabBaseClient.UIGrpWeekendRotationClient.UIChkFixedWeekendRotatCheckBox;
            DXLookUpEdit uILeFixedWeekendRotatiLookUpEdit = this.UIAnsattinnstillingerfWindow.UIPaMainContentClient.UIGsTabControl1TabList.UITabBaseClient.UIGrpWeekendRotationClient.UILeFixedWeekendRotatiLookUpEdit;
            DXCheckBox uIChkUserDefinedWeekenCheckBox = this.UIAnsattinnstillingerfWindow.UIPaMainContentClient.UIGsTabControl1TabList.UITabBaseClient.UIGrpWeekendRotationClient.UIChkUserDefinedWeekenCheckBox;
            DXTextEdit uIEUserDefinedWeekendREdit = this.UIAnsattinnstillingerfWindow.UIPaMainContentClient.UIGsTabControl1TabList.UITabBaseClient.UIGrpWeekendRotationClient.UIEUserDefinedWeekendREdit;
            DXButton uIEndreegendefinerthelButton = this.UIAnsattinnstillingerfWindow.UIPaMainContentClient.UIGsTabControl1TabList.UITabBaseClient.UIGrpWeekendRotationClient.UIEndreegendefinerthelButton;
            #endregion

            // Verify that the 'Enabled' property of 'chkFixedWeekendRotation' check box equals 'False'
            Assert.AreEqual(this.CheckWeekendPatternDisabledInEmployeeSettingsExpectedValues.UIChkFixedWeekendRotatCheckBoxEnabled, uIChkFixedWeekendRotatCheckBox.Enabled);

            // Verify that the 'Enabled' property of 'leFixedWeekendRotation' LookUpEdit equals 'False'
            Assert.AreEqual(this.CheckWeekendPatternDisabledInEmployeeSettingsExpectedValues.UILeFixedWeekendRotatiLookUpEditEnabled, uILeFixedWeekendRotatiLookUpEdit.Enabled);

            // Verify that the 'Enabled' property of 'chkUserDefinedWeekendRotation' check box equals 'False'
            Assert.AreEqual(this.CheckWeekendPatternDisabledInEmployeeSettingsExpectedValues.UIChkUserDefinedWeekenCheckBoxEnabled, uIChkUserDefinedWeekenCheckBox.Enabled);

            // Verify that the 'ReadOnly' property of 'eUserDefinedWeekendRotation' text box equals 'True'
            Assert.AreEqual(this.CheckWeekendPatternDisabledInEmployeeSettingsExpectedValues.UIEUserDefinedWeekendREditReadOnly, uIEUserDefinedWeekendREdit.ReadOnly);

            // Verify that the 'Enabled' property of 'Endre egendefinert helgemønster' button equals 'False'
            Assert.AreEqual(this.CheckWeekendPatternDisabledInEmployeeSettingsExpectedValues.UIEndreegendefinerthelButtonEnabled, uIEndreegendefinerthelButton.Enabled);
        }
        
        /// <summary>
        /// ClickRosterplanLayoutTab
        /// </summary>
        public void ClickRosterplanLayoutTab()
        {
            #region Variable Declarations
            DXTestControl uIXtraTabControlHeaderTabPage = this.UIAnsattinnstillingerfWindow.UIPaMainContentClient.UIGsTabControl1TabList.UIXtraTabControlHeaderTabPage;
            #endregion

            // Click 'XtraTabControlHeader' tab
            Mouse.Click(uIXtraTabControlHeaderTabPage, new Point(57, 10));
        }
        
        /// <summary>
        /// ClickRow3LederCell
        /// </summary>
        public void ClickRow3LederCell()
        {
            #region Variable Declarations
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell1;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell1, new Point(35, 7));
        }
        
        /// <summary>
        /// Copy1of3LastLineInDemandWindow - Use 'Copy1of3LastLineInDemandWindowParams' to pass parameters into this method.
        /// </summary>
        public void Copy1of3LastLineInDemandWindow()
        {
            #region Variable Declarations
            WinClient uIItemClient = this.UIGodkjenningskravarbeWindow.UIItemWindow.UIItemClient;
            #endregion

            // Click client
            Mouse.Click(uIItemClient, new Point(61, 209));

            // Type 'Control + c' in client
            Keyboard.SendKeys(uIItemClient, this.Copy1of3LastLineInDemandWindowParams.UIItemClientSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// Copy2of3LastLineInDemandWindow - Use 'Copy2of3LastLineInDemandWindowParams' to pass parameters into this method.
        /// </summary>
        public void Copy2of3LastLineInDemandWindow()
        {
            #region Variable Declarations
            WinClient uIItemClient = this.UIGodkjenningskravarbeWindow.UIItemWindow.UIItemClient;
            #endregion

            // Click client
            Mouse.Click(uIItemClient, new Point(66, 223));

            // Type 'Control + c' in client
            Keyboard.SendKeys(uIItemClient, this.Copy2of3LastLineInDemandWindowParams.UIItemClientSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// Copy3of3LastLineInDemandWindow - Use 'Copy3of3LastLineInDemandWindowParams' to pass parameters into this method.
        /// </summary>
        public void Copy3of3LastLineInDemandWindow()
        {
            #region Variable Declarations
            WinClient uIItemClient = this.UIGodkjenningskravarbeWindow.UIItemWindow.UIItemClient;
            #endregion

            // Click client
            Mouse.Click(uIItemClient, new Point(68, 241));

            // Type 'Control + c' in client
            Keyboard.SendKeys(uIItemClient, this.Copy3of3LastLineInDemandWindowParams.UIItemClientSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// CopyLastLineInDemandWindow - Use 'CopyLastLineInDemandWindowParams' to pass parameters into this method.
        /// </summary>
        public void CopyLastLineInDemandWindow()
        {
            #region Variable Declarations
            WinClient uIItemClient = this.UIGodkjenningskravarbeWindow.UIItemWindow.UIItemClient;
            #endregion

            // Click client
            Mouse.Click(uIItemClient, new Point(84, 191));

            // Type 'Control + c' in client
            Keyboard.SendKeys(uIItemClient, this.CopyLastLineInDemandWindowParams.UIItemClientSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// EditApprovalsStep45 - Use 'EditApprovalsStep45Params' to pass parameters into this method.
        /// </summary>
        public void EditApprovalsStep45()
        {
            #region Variable Declarations
            DXButton uIEndrekravButton = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UIEndrekravButton;
            WinClient uIItemClient = this.UIKravtilgodkjenningWindow.UIItemWindow.UIItemClient;
            WinClient uIItemClient1 = this.UIKravtilgodkjenningWindow.UIKravtilgodkjenningClient.UIItemClient;
            WinCheckBox uITillativerksettingutCheckBox = this.UIKravtilgodkjenningWindow.UIItemWindow1.UIItemClient.UITillativerksettingutCheckBox;
            WinCheckBox uITillatoverføringavfaCheckBox = this.UIKravtilgodkjenningWindow.UIItemWindow1.UIItemClient.UITillatoverføringavfaCheckBox;
            WinCheckBox uITillatpubliseringavaCheckBox = this.UIKravtilgodkjenningWindow.UIItemWindow1.UIItemClient.UITillatpubliseringavaCheckBox;
            WinButton uIOKButton = this.UIKravtilgodkjenningWindow.UIItemClient.UIOKButton;
            WinClient uIItemClient2 = this.UIKravtilgodkjenningWindow.UIItemClient1.UIItemClient;
            #endregion

            // Click 'Endre krav' button
            Mouse.Click(uIEndrekravButton, new Point(1, 1));

            // Click client
            Mouse.Click(uIItemClient, new Point(74, 27));

            // Click client
            Mouse.Click(uIItemClient1, new Point(91, 32));

            // Clear 'Tillat iverksetting uten godkjenning' check box
            uITillativerksettingutCheckBox.Checked = this.EditApprovalsStep45Params.UITillativerksettingutCheckBoxChecked;

            // Clear 'Tillat overføring av faste tillegg uten godkjennin...' check box
            uITillatoverføringavfaCheckBox.Checked = this.EditApprovalsStep45Params.UITillatoverføringavfaCheckBoxChecked;

            // Clear 'Tillat publisering av arbeidsplan i MinGat uten go...' check box
            uITillatpubliseringavaCheckBox.Checked = this.EditApprovalsStep45Params.UITillatpubliseringavaCheckBoxChecked;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(32, 30));

            // Click client
            Mouse.Click(uIItemClient, new Point(60, 46));

            // Click client
            Mouse.Click(uIItemClient1, new Point(92, 27));

            // Clear 'Tillat iverksetting uten godkjenning' check box
            uITillativerksettingutCheckBox.Checked = this.EditApprovalsStep45Params.UITillativerksettingutCheckBoxChecked1;

            // Clear 'Tillat overføring av faste tillegg uten godkjennin...' check box
            uITillatoverføringavfaCheckBox.Checked = this.EditApprovalsStep45Params.UITillatoverføringavfaCheckBoxChecked1;

            // Clear 'Tillat publisering av arbeidsplan i MinGat uten go...' check box
            uITillatpubliseringavaCheckBox.Checked = this.EditApprovalsStep45Params.UITillatpubliseringavaCheckBoxChecked1;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(34, 31));

            // Click client
            Mouse.Click(uIItemClient, new Point(46, 62));

            // Click client
            Mouse.Click(uIItemClient1, new Point(99, 29));

            // Clear 'Tillat iverksetting uten godkjenning' check box
            uITillativerksettingutCheckBox.Checked = this.EditApprovalsStep45Params.UITillativerksettingutCheckBoxChecked2;

            // Clear 'Tillat overføring av faste tillegg uten godkjennin...' check box
            uITillatoverføringavfaCheckBox.Checked = this.EditApprovalsStep45Params.UITillatoverføringavfaCheckBoxChecked2;

            // Clear 'Tillat publisering av arbeidsplan i MinGat uten go...' check box
            uITillatpubliseringavaCheckBox.Checked = this.EditApprovalsStep45Params.UITillatpubliseringavaCheckBoxChecked2;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(27, 26));

            // Click client
            Mouse.Click(uIItemClient2, new Point(349, 24));
        }
        
        /// <summary>
        /// OpenGustavssonEmpLineSettings
        /// </summary>
        public void OpenGustavssonEmpLineSettings()
        {
            #region Variable Declarations
            DXCell uIGustavssonRobertCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGustavssonRobertCell;
            DXMenuBaseButtonItem uIEndrelinjeinnstillinMenuBaseButtonItem = this.UIItemWindow2.UIPopupMenuBarControlMenu.UIEndrelinjeinnstillinMenuBaseButtonItem;
            #endregion

            // Right-Click 'Gustavsson, Robert' cell
            Mouse.Click(uIGustavssonRobertCell, MouseButtons.Right, ModifierKeys.None, new Point(72, 8));

            // Click 'Endre linjeinnstillinger (5080 - Godkjenning)' MenuBaseButtonItem
            Mouse.Click(uIEndrelinjeinnstillinMenuBaseButtonItem, new Point(74, 10));
        }
        
        /// <summary>
        /// OpenGustavssonEmpSettings
        /// </summary>
        public void OpenGustavssonEmpSettings()
        {
            #region Variable Declarations
            DXCell uIGustavssonRobertCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGustavssonRobertCell;
            DXMenuBaseButtonItem uIEndreansattinnstilliMenuBaseButtonItem = this.UIItemWindow2.UIPopupMenuBarControlMenu.UIEndreansattinnstilliMenuBaseButtonItem;
            #endregion

            // Right-Click 'Gustavsson, Robert' cell
            Mouse.Click(uIGustavssonRobertCell, MouseButtons.Right, ModifierKeys.None, new Point(74, 10));

            // Click 'Endre ansattinnstillinger (Gustavsson, Robert)...' MenuBaseButtonItem
            Mouse.Click(uIEndreansattinnstilliMenuBaseButtonItem, new Point(95, 11));
        }
        
        /// <summary>
        /// OpenLinesInEmployeeSettings
        /// </summary>
        public void OpenLinesInEmployeeSettings()
        {
            #region Variable Declarations
            DXNavBarGroupButton uIF3kanbrukespåhalveheNavBarGroupButton = this.UIAnsattinnstillingerfWindow.UIPaMainContentClient.UIGsTabControl1TabList.UITabRosterSetupClient.UINbcRosterSetupNavBar.UIF3kanbrukespåhalveheNavBarGroup.UIF3kanbrukespåhalveheNavBarGroupButton;
            DXNavBarGroupButton uIF3kanbrukespåsøndageNavBarGroupButton = this.UIAnsattinnstillingerfWindow.UIPaMainContentClient.UIGsTabControl1TabList.UITabRosterSetupClient.UINbcRosterSetupNavBar.UIF3kanbrukespåsøndageNavBarGroup.UIF3kanbrukespåsøndageNavBarGroupButton;
            DXNavBarGroupButton uIKravtilF1hverukeJaNavBarGroupButton = this.UIAnsattinnstillingerfWindow.UIPaMainContentClient.UIGsTabControl1TabList.UITabRosterSetupClient.UINbcRosterSetupNavBar.UIKravtilF1hverukeJaNavBarGroup.UIKravtilF1hverukeJaNavBarGroupButton;
            #endregion

            // Click 'F3 kan brukes på halve helligdager? - Nei' NavBarGroupButton
            Mouse.Click(uIF3kanbrukespåhalveheNavBarGroupButton, new Point(11, 9));

            // Click 'F3 kan brukes på søndager? - Ja' NavBarGroupButton
            Mouse.Click(uIF3kanbrukespåsøndageNavBarGroupButton, new Point(8, 7));

            // Click 'Krav til F1 hver uke? - Ja' NavBarGroupButton
            Mouse.Click(uIKravtilF1hverukeJaNavBarGroupButton, new Point(7, 10));
        }
        
        /// <summary>
        /// RemoveBastantFromList
        /// </summary>
        public void RemoveBastantFromList()
        {
            #region Variable Declarations
            DXCell uIBastantBjarneCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIBastantBjarneCell;
            #endregion

            // Click 'Bastant, Bjarne' cell while pressing Control
            Mouse.Click(uIBastantBjarneCell, MouseButtons.Left, ModifierKeys.Control, new Point(35, 7));
        }
        
        /// <summary>
        /// RemoveCalendarplanAshiftsStep46 - Use 'RemoveCalendarplanAshiftsStep46Params' to pass parameters into this method.
        /// </summary>
        public void RemoveCalendarplanAshiftsStep46()
        {
            #region Variable Declarations
            DXCell uIACell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIGcRosterPlanTable.UIACell;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIGcRosterPlanTable;
            #endregion

            // Click 'A' cell
            Mouse.Click(uIACell, new Point(14, 8));

            // Type '{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Tab}' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.RemoveCalendarplanAshiftsStep46Params.UIGcRosterPlanTableSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RemoveFagforeningSvendsen - Use 'RemoveFagforeningSvendsenParams' to pass parameters into this method.
        /// </summary>
        public void RemoveFagforeningSvendsen()
        {
            #region Variable Declarations
            DXTreeListCell uIItem150TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode4TreeListNode.UINode0TreeListNode.UIItem150TreeListCell;
            DXLookUpEdit uIEUnionCodeLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerLineVCustom.UIEUnionCodeLookUpEdit;
            #endregion

            // Click '1. 50%' TreeListCell
            Mouse.Click(uIItem150TreeListCell, new Point(49, 9));

            // Type '' in 'eUnionCode' LookUpEdit
            //ValueAsString
            uIEUnionCodeLookUpEdit.ValueAsString = this.RemoveFagforeningSvendsenParams.UIEUnionCodeLookUpEditValueAsString;
        }
        
        /// <summary>
        /// RepealGustavssonLine1
        /// </summary>
        public void RepealGustavssonLine1()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell;
            DXListBoxItem uIPopupImageComboBoxEdListItem = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow0ColumnreqColTillComboBox.UIPopupImageComboBoxEdWindow.UIPopupImageComboBoxEdList.UIPopupImageComboBoxEdListItem;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell, new Point(40, 7));

            // Click 'PopupImageComboBoxEditListBoxItem0' list item
            Mouse.Click(uIPopupImageComboBoxEdListItem, new Point(37, 10));
        }
        
        /// <summary>
        /// SelectAllEmpsInTransfereWindow
        /// </summary>
        public void SelectAllEmpsInTransfereWindow()
        {
            #region Variable Declarations
            DXColumnHeader uIDXCheckboxSelectorCoColumnHeader = this.UIOverførtilleggWindow.UIGcExportsTable.UIDXCheckboxSelectorCoColumnHeader;
            #endregion

            // Click 'DX$CheckboxSelectorColumn' column header
            Mouse.Click(uIDXCheckboxSelectorCoColumnHeader, new Point(19, 7));
        }
        
        /// <summary>
        /// SelectGustavssonAndKaspersenLines - Use 'SelectGustavssonAndKaspersenLinesParams' to pass parameters into this method.
        /// </summary>
        public void SelectGustavssonAndKaspersenLines()
        {
            #region Variable Declarations
            DXCell uINSFUNSFUorganisertCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UINSFUNSFUorganisertCell;
            DXGrid uIGcApprovalTable = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable;
            #endregion

            // Click 'NSFU - NSF Uorganisert' cell
            Mouse.Click(uINSFUNSFUorganisertCell, new Point(70, 6));

            // Type 'Shift + {Down}' in 'gcApproval' table
            Keyboard.SendKeys(uIGcApprovalTable, this.SelectGustavssonAndKaspersenLinesParams.UIGcApprovalTableSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'gcApproval' table
            Keyboard.SendKeys(uIGcApprovalTable, this.SelectGustavssonAndKaspersenLinesParams.UIGcApprovalTableSendKeys1, ModifierKeys.Shift);
        }
        
        /// <summary>
        /// SelectGustavssonLine
        /// </summary>
        public void SelectGustavssonLine()
        {
            #region Variable Declarations
            DXCell uIGustavssonRobertCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGustavssonRobertCell;
            #endregion

            // Click 'Gustavsson, Robert' cell
            Mouse.Click(uIGustavssonRobertCell, new Point(39, 8));
        }
        
        /// <summary>
        /// SelectRow1
        /// </summary>
        public void SelectRow1()
        {
            #region Variable Declarations
            DXCell uINSFUNSFUorganisertCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UINSFUNSFUorganisertCell;
            #endregion

            // Click 'NSFU - NSF Uorganisert' cell
            Mouse.Click(uINSFUNSFUorganisertCell, new Point(48, 8));
        }
        
        /// <summary>
        /// SelectRow3
        /// </summary>
        public void SelectRow3()
        {
            #region Variable Declarations
            DXCell uINSFUNSFUorganisertCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UINSFUNSFUorganisertCell;
            #endregion

            // Click 'NSFU - NSF Uorganisert' cell
            Mouse.Click(uINSFUNSFUorganisertCell, new Point(57, 8));
        }
        
        /// <summary>
        /// SelectRow4AndRepealWithClickInCell
        /// </summary>
        public void SelectRow4AndRepealWithClickInCell()
        {
            #region Variable Declarations
            DXCell uIGodkjennCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell;
            DXListBoxItem uIPopupImageComboBoxEdListItem = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow2ColumnreqColTillComboBox.UIPopupImageComboBoxEdWindow.UIPopupImageComboBoxEdList.UIPopupImageComboBoxEdListItem;
            #endregion

            // Click 'Godkjenn' cell
            Mouse.Click(uIGodkjennCell, new Point(39, 7));

            // Click 'PopupImageComboBoxEditListBoxItem0' list item
            Mouse.Click(uIPopupImageComboBoxEdListItem, new Point(36, 5));
        }
        
        /// <summary>
        /// SelectRow5And6 - Use 'SelectRow5And6Params' to pass parameters into this method.
        /// </summary>
        public void SelectRow5And6()
        {
            #region Variable Declarations
            DXCell uINSFUNSFUorganisertCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UINSFUNSFUorganisertCell;
            DXGrid uIGcApprovalTable = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable;
            #endregion

            // Click 'NSFU - NSF Uorganisert' cell
            Mouse.Click(uINSFUNSFUorganisertCell, new Point(77, 8));

            // Type 'Shift + {Down}' in 'gcApproval' table
            Keyboard.SendKeys(uIGcApprovalTable, this.SelectRow5And6Params.UIGcApprovalTableSendKeys, ModifierKeys.Shift);
        }
        
        /// <summary>
        /// SelectRow7To9 - Use 'SelectRow7To9Params' to pass parameters into this method.
        /// </summary>
        public void SelectRow7To9()
        {
            #region Variable Declarations
            DXCell uINSFNorsksykepleierfoCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UINSFNorsksykepleierfoCell1;
            DXGrid uIGcApprovalTable = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable;
            #endregion

            // Click 'NSF - Norsk sykepleierforbund' cell
            Mouse.Click(uINSFNorsksykepleierfoCell1, new Point(51, 8));

            // Type 'Shift + {Down}' in 'gcApproval' table
            Keyboard.SendKeys(uIGcApprovalTable, this.SelectRow7To9Params.UIGcApprovalTableSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'gcApproval' table
            Keyboard.SendKeys(uIGcApprovalTable, this.SelectRow7To9Params.UIGcApprovalTableSendKeys1, ModifierKeys.Shift);
        }
        
        /// <summary>
        /// SelectRow8And9 - Use 'SelectRow8And9Params' to pass parameters into this method.
        /// </summary>
        public void SelectRow8And9()
        {
            #region Variable Declarations
            DXCell uIFAGFagforbundetCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIFAGFagforbundetCell2;
            DXGrid uIGcApprovalTable = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable;
            #endregion

            // Click 'FAG - Fagforbundet' cell
            Mouse.Click(uIFAGFagforbundetCell2, new Point(54, 9));

            // Type 'Shift + {Down}' in 'gcApproval' table
            Keyboard.SendKeys(uIGcApprovalTable, this.SelectRow8And9Params.UIGcApprovalTableSendKeys, ModifierKeys.Shift);
        }
        
        /// <summary>
        /// SelectSvendsenLine
        /// </summary>
        public void SelectSvendsenLine()
        {
            #region Variable Declarations
            DXCell uILassenLiselotteCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UILassenLiselotteCell;
            #endregion

            // Click 'Lassen, Liselotte' cell
            Mouse.Click(uILassenLiselotteCell, new Point(41, 6));
        }
        
        /// <summary>
        /// SetFagforeningGladKFO - Use 'SetFagforeningGladKFOParams' to pass parameters into this method.
        /// </summary>
        public void SetFagforeningGladKFO()
        {
            #region Variable Declarations
            DXTreeListCell uIItem1100TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient1.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UINode0TreeListNode.UIItem1100TreeListCell;
            DXLookUpEdit uIEUnionCodeLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient1.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerLineVCustom.UIEUnionCodeLookUpEdit;
            #endregion

            // Click '1. 100%' TreeListCell
            Mouse.Click(uIItem1100TreeListCell, new Point(52, 7));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.UnionMembershipViewModel' in 'eUnionCode' LookUpEdit
            //ValueTypeName
            uIEUnionCodeLookUpEdit.ValueTypeName = this.SetFagforeningGladKFOParams.UIEUnionCodeLookUpEditValueTypeName;

            // Type 'KFO - KFO' in 'eUnionCode' LookUpEdit
            //ValueAsString
            uIEUnionCodeLookUpEdit.ValueAsString = this.SetFagforeningGladKFOParams.UIEUnionCodeLookUpEditValueAsString;
        }
        
        /// <summary>
        /// CheckRow3And4IsRepealed - Use 'CheckRow3And4IsRepealedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRow3And4IsRepealed()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell;
            DXCell uIGodkjennCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell;
            #endregion

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRow3And4IsRepealedExpectedValues.UIItemCellText, uIItemCell.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals ''
            Assert.AreEqual(this.CheckRow3And4IsRepealedExpectedValues.UIGodkjennCellText, uIGodkjennCell.Text);
        }
        
        /// <summary>
        /// CheckAllLinesApprovedStep57 - Use 'CheckAllLinesApprovedStep57ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAllLinesApprovedStep57()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell;
            DXCell uIGodkjennCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell;
            DXCell uIGodkjennCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell1;
            #endregion

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep57ExpectedValues.UIItemCellText, uIItemCell.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep57ExpectedValues.UIGodkjennCellText, uIGodkjennCell.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep57ExpectedValues.UIGodkjennCell1Text, uIGodkjennCell1.Text);
        }
        
        /// <summary>
        /// CheckAllLinesApprovedStep58 - Use 'CheckAllLinesApprovedStep58ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAllLinesApprovedStep58()
        {
            #region Variable Declarations
            DXCell uIGodkjennCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell;
            DXCell uIGodkjennCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell1;
            DXCell uIGodkjennCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell2;
            DXCell uIGodkjennCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell3;
            DXCell uIGodkjennCell4 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell4;
            #endregion

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep58ExpectedValues.UIGodkjennCellText, uIGodkjennCell.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep58ExpectedValues.UIGodkjennCell1Text, uIGodkjennCell1.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep58ExpectedValues.UIGodkjennCell2Text, uIGodkjennCell2.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep58ExpectedValues.UIGodkjennCell3Text, uIGodkjennCell3.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep58ExpectedValues.UIGodkjennCell4Text, uIGodkjennCell4.Text);
        }
        
        /// <summary>
        /// CheckAllLinesApprovedStep59 - Use 'CheckAllLinesApprovedStep59ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAllLinesApprovedStep59()
        {
            #region Variable Declarations
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell4;
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell1;
            DXCell uIGodkjennCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell;
            DXCell uIGodkjennCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell2;
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell3;
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell6;
            DXCell uIItemCell7 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell7;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell8;
            DXCell uIItemCell9 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell9;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell11;
            DXCell uIItemCell12 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell12;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell5;
            DXCell uIGodkjennCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell3;
            DXCell uIItemCell10 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell10;
            #endregion

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCell4Text, uIItemCell4.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCellText, uIItemCell.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCell1Text, uIItemCell1.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIGodkjennCellText, uIGodkjennCell.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIGodkjennCell2Text, uIGodkjennCell2.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCell3Text, uIItemCell3.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCell6Text, uIItemCell6.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCell7Text, uIItemCell7.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCell8Text, uIItemCell8.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCell9Text, uIItemCell9.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCell11Text, uIItemCell11.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCell12Text, uIItemCell12.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCell5Text, uIItemCell5.Text);

            // Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIGodkjennCell3Text, uIGodkjennCell3.Text);

            // Verify that the 'Text' property of cell equals 'Godkjenn'
            Assert.AreEqual(this.CheckAllLinesApprovedStep59ExpectedValues.UIItemCell10Text, uIItemCell10.Text);
        }
        
        /// <summary>
        /// CheckFTTCalculationsStep7 - Use 'CheckFTTCalculationsStep7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTCalculationsStep7()
        {
            #region Variable Declarations
            DXPivotGridCell uIItem75PivotGridCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem75PivotGridCell;
            DXPivotGridCell uIItem5PivotGridCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem5PivotGridCell;
            DXPivotGridCell uIItem75PivotGridCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem75PivotGridCell1;
            DXPivotGridCell uIItem5PivotGridCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem5PivotGridCell1;
            DXPivotGridCell uIItem75PivotGridCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem75PivotGridCell2;
            DXPivotGridCell uIItem5PivotGridCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem5PivotGridCell2;
            DXPivotGridCell uIItem75PivotGridCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem75PivotGridCell3;
            DXPivotGridCell uIItem5PivotGridCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem5PivotGridCell3;
            DXPivotGridCell uIItem75PivotGridCell4 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem75PivotGridCell4;
            DXPivotGridCell uIItem5PivotGridCell4 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem5PivotGridCell4;
            DXPivotGridCell uIItem75PivotGridCell5 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem75PivotGridCell5;
            DXPivotGridCell uIItem5PivotGridCell5 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem5PivotGridCell5;
            DXPivotGridCell uIItem75PivotGridCell6 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem75PivotGridCell6;
            DXPivotGridCell uIItem5PivotGridCell6 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem5PivotGridCell6;
            DXPivotGridCell uIItem75PivotGridCell7 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem75PivotGridCell7;
            DXPivotGridCell uIItem5PivotGridCell7 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem5PivotGridCell7;
            DXPivotGridCell uIItem75PivotGridCell8 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem75PivotGridCell8;
            DXPivotGridCell uIItem5PivotGridCell8 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem5PivotGridCell8;
            #endregion

            // Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem75PivotGridCellText, uIItem75PivotGridCell.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem5PivotGridCellText, uIItem5PivotGridCell.Text);

            // Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem75PivotGridCell1Text, uIItem75PivotGridCell1.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem5PivotGridCell1Text, uIItem5PivotGridCell1.Text);

            // Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem75PivotGridCell2Text, uIItem75PivotGridCell2.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem5PivotGridCell2Text, uIItem5PivotGridCell2.Text);

            // Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem75PivotGridCell3Text, uIItem75PivotGridCell3.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem5PivotGridCell3Text, uIItem5PivotGridCell3.Text);

            // Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem75PivotGridCell4Text, uIItem75PivotGridCell4.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem5PivotGridCell4Text, uIItem5PivotGridCell4.Text);

            // Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem75PivotGridCell5Text, uIItem75PivotGridCell5.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem5PivotGridCell5Text, uIItem5PivotGridCell5.Text);

            // Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem75PivotGridCell6Text, uIItem75PivotGridCell6.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem5PivotGridCell6Text, uIItem5PivotGridCell6.Text);

            // Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem75PivotGridCell7Text, uIItem75PivotGridCell7.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem5PivotGridCell7Text, uIItem5PivotGridCell7.Text);

            // Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem75PivotGridCell8Text, uIItem75PivotGridCell8.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '5'
            Assert.AreEqual(this.CheckFTTCalculationsStep7ExpectedValues.UIItem5PivotGridCell8Text, uIItem5PivotGridCell8.Text);
        }
        
        #region Properties
        public virtual AddCalendarplanAshiftsParams AddCalendarplanAshiftsParams
        {
            get
            {
                if ((this.mAddCalendarplanAshiftsParams == null))
                {
                    this.mAddCalendarplanAshiftsParams = new AddCalendarplanAshiftsParams();
                }
                return this.mAddCalendarplanAshiftsParams;
            }
        }
        
        public virtual AddCalendarplanAshiftsStep38Params AddCalendarplanAshiftsStep38Params
        {
            get
            {
                if ((this.mAddCalendarplanAshiftsStep38Params == null))
                {
                    this.mAddCalendarplanAshiftsStep38Params = new AddCalendarplanAshiftsStep38Params();
                }
                return this.mAddCalendarplanAshiftsStep38Params;
            }
        }
        
        public virtual AddCalendarplanNshiftsParams AddCalendarplanNshiftsParams
        {
            get
            {
                if ((this.mAddCalendarplanNshiftsParams == null))
                {
                    this.mAddCalendarplanNshiftsParams = new AddCalendarplanNshiftsParams();
                }
                return this.mAddCalendarplanNshiftsParams;
            }
        }
        
        public virtual ApproveGustavssonAndSvendsenRejectKaspersenStep36Params ApproveGustavssonAndSvendsenRejectKaspersenStep36Params
        {
            get
            {
                if ((this.mApproveGustavssonAndSvendsenRejectKaspersenStep36Params == null))
                {
                    this.mApproveGustavssonAndSvendsenRejectKaspersenStep36Params = new ApproveGustavssonAndSvendsenRejectKaspersenStep36Params();
                }
                return this.mApproveGustavssonAndSvendsenRejectKaspersenStep36Params;
            }
        }
        
        public virtual ChangeFagforeningSvendsenParams ChangeFagforeningSvendsenParams
        {
            get
            {
                if ((this.mChangeFagforeningSvendsenParams == null))
                {
                    this.mChangeFagforeningSvendsenParams = new ChangeFagforeningSvendsenParams();
                }
                return this.mChangeFagforeningSvendsenParams;
            }
        }
        
        public virtual CheckAllLederLinesApprovedStep27ExpectedValues CheckAllLederLinesApprovedStep27ExpectedValues
        {
            get
            {
                if ((this.mCheckAllLederLinesApprovedStep27ExpectedValues == null))
                {
                    this.mCheckAllLederLinesApprovedStep27ExpectedValues = new CheckAllLederLinesApprovedStep27ExpectedValues();
                }
                return this.mCheckAllLederLinesApprovedStep27ExpectedValues;
            }
        }
        
        public virtual CheckApprovedLinesDisabledExpectedValues CheckApprovedLinesDisabledExpectedValues
        {
            get
            {
                if ((this.mCheckApprovedLinesDisabledExpectedValues == null))
                {
                    this.mCheckApprovedLinesDisabledExpectedValues = new CheckApprovedLinesDisabledExpectedValues();
                }
                return this.mCheckApprovedLinesDisabledExpectedValues;
            }
        }
        
        public virtual CheckDataInTransefereWindowStep40ExpectedValues CheckDataInTransefereWindowStep40ExpectedValues
        {
            get
            {
                if ((this.mCheckDataInTransefereWindowStep40ExpectedValues == null))
                {
                    this.mCheckDataInTransefereWindowStep40ExpectedValues = new CheckDataInTransefereWindowStep40ExpectedValues();
                }
                return this.mCheckDataInTransefereWindowStep40ExpectedValues;
            }
        }
        
        public virtual CheckEffectuationOkStep62ExpectedValues CheckEffectuationOkStep62ExpectedValues
        {
            get
            {
                if ((this.mCheckEffectuationOkStep62ExpectedValues == null))
                {
                    this.mCheckEffectuationOkStep62ExpectedValues = new CheckEffectuationOkStep62ExpectedValues();
                }
                return this.mCheckEffectuationOkStep62ExpectedValues;
            }
        }
        
        public virtual CheckEmpUnionsStep26ExpectedValues CheckEmpUnionsStep26ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpUnionsStep26ExpectedValues == null))
                {
                    this.mCheckEmpUnionsStep26ExpectedValues = new CheckEmpUnionsStep26ExpectedValues();
                }
                return this.mCheckEmpUnionsStep26ExpectedValues;
            }
        }
        
        public virtual CheckFTTTransfereOkStep60ExpectedValues CheckFTTTransfereOkStep60ExpectedValues
        {
            get
            {
                if ((this.mCheckFTTTransfereOkStep60ExpectedValues == null))
                {
                    this.mCheckFTTTransfereOkStep60ExpectedValues = new CheckFTTTransfereOkStep60ExpectedValues();
                }
                return this.mCheckFTTTransfereOkStep60ExpectedValues;
            }
        }
        
        public virtual CheckLinesDisabledInEmployeeLineSettingsExpectedValues CheckLinesDisabledInEmployeeLineSettingsExpectedValues
        {
            get
            {
                if ((this.mCheckLinesDisabledInEmployeeLineSettingsExpectedValues == null))
                {
                    this.mCheckLinesDisabledInEmployeeLineSettingsExpectedValues = new CheckLinesDisabledInEmployeeLineSettingsExpectedValues();
                }
                return this.mCheckLinesDisabledInEmployeeLineSettingsExpectedValues;
            }
        }
        
        public virtual CheckLinesDisabledInEmployeeSettingsExpectedValues CheckLinesDisabledInEmployeeSettingsExpectedValues
        {
            get
            {
                if ((this.mCheckLinesDisabledInEmployeeSettingsExpectedValues == null))
                {
                    this.mCheckLinesDisabledInEmployeeSettingsExpectedValues = new CheckLinesDisabledInEmployeeSettingsExpectedValues();
                }
                return this.mCheckLinesDisabledInEmployeeSettingsExpectedValues;
            }
        }
        
        public virtual CheckNoNotificationsExpectedValues CheckNoNotificationsExpectedValues
        {
            get
            {
                if ((this.mCheckNoNotificationsExpectedValues == null))
                {
                    this.mCheckNoNotificationsExpectedValues = new CheckNoNotificationsExpectedValues();
                }
                return this.mCheckNoNotificationsExpectedValues;
            }
        }
        
        public virtual CheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindowExpectedValues CheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindowExpectedValues
        {
            get
            {
                if ((this.mCheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindowExpectedValues == null))
                {
                    this.mCheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindowExpectedValues = new CheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindowExpectedValues();
                }
                return this.mCheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindowExpectedValues;
            }
        }
        
        public virtual CheckRegMessagesStep47ExpectedValues CheckRegMessagesStep47ExpectedValues
        {
            get
            {
                if ((this.mCheckRegMessagesStep47ExpectedValues == null))
                {
                    this.mCheckRegMessagesStep47ExpectedValues = new CheckRegMessagesStep47ExpectedValues();
                }
                return this.mCheckRegMessagesStep47ExpectedValues;
            }
        }
        
        public virtual CheckRegStatusStep61ExpectedValues CheckRegStatusStep61ExpectedValues
        {
            get
            {
                if ((this.mCheckRegStatusStep61ExpectedValues == null))
                {
                    this.mCheckRegStatusStep61ExpectedValues = new CheckRegStatusStep61ExpectedValues();
                }
                return this.mCheckRegStatusStep61ExpectedValues;
            }
        }
        
        public virtual CheckRegStatusStep9ExpectedValues CheckRegStatusStep9ExpectedValues
        {
            get
            {
                if ((this.mCheckRegStatusStep9ExpectedValues == null))
                {
                    this.mCheckRegStatusStep9ExpectedValues = new CheckRegStatusStep9ExpectedValues();
                }
                return this.mCheckRegStatusStep9ExpectedValues;
            }
        }
        
        public virtual CheckRepresentations_Step19ExpectedValues CheckRepresentations_Step19ExpectedValues
        {
            get
            {
                if ((this.mCheckRepresentations_Step19ExpectedValues == null))
                {
                    this.mCheckRepresentations_Step19ExpectedValues = new CheckRepresentations_Step19ExpectedValues();
                }
                return this.mCheckRepresentations_Step19ExpectedValues;
            }
        }
        
        public virtual CheckRepresentations_Step3ExpectedValues CheckRepresentations_Step3ExpectedValues
        {
            get
            {
                if ((this.mCheckRepresentations_Step3ExpectedValues == null))
                {
                    this.mCheckRepresentations_Step3ExpectedValues = new CheckRepresentations_Step3ExpectedValues();
                }
                return this.mCheckRepresentations_Step3ExpectedValues;
            }
        }
        
        public virtual CheckRow3DisabledExpectedValues CheckRow3DisabledExpectedValues
        {
            get
            {
                if ((this.mCheckRow3DisabledExpectedValues == null))
                {
                    this.mCheckRow3DisabledExpectedValues = new CheckRow3DisabledExpectedValues();
                }
                return this.mCheckRow3DisabledExpectedValues;
            }
        }
        
        public virtual CheckRow4And5IsApprovedExpectedValues CheckRow4And5IsApprovedExpectedValues
        {
            get
            {
                if ((this.mCheckRow4And5IsApprovedExpectedValues == null))
                {
                    this.mCheckRow4And5IsApprovedExpectedValues = new CheckRow4And5IsApprovedExpectedValues();
                }
                return this.mCheckRow4And5IsApprovedExpectedValues;
            }
        }
        
        public virtual CheckRow7To9IsRejectedExpectedValues CheckRow7To9IsRejectedExpectedValues
        {
            get
            {
                if ((this.mCheckRow7To9IsRejectedExpectedValues == null))
                {
                    this.mCheckRow7To9IsRejectedExpectedValues = new CheckRow7To9IsRejectedExpectedValues();
                }
                return this.mCheckRow7To9IsRejectedExpectedValues;
            }
        }
        
        public virtual CheckRow8To9IsRepealedExpectedValues CheckRow8To9IsRepealedExpectedValues
        {
            get
            {
                if ((this.mCheckRow8To9IsRepealedExpectedValues == null))
                {
                    this.mCheckRow8To9IsRepealedExpectedValues = new CheckRow8To9IsRepealedExpectedValues();
                }
                return this.mCheckRow8To9IsRepealedExpectedValues;
            }
        }
        
        public virtual CheckRowsAreRepealedExpectedValues CheckRowsAreRepealedExpectedValues
        {
            get
            {
                if ((this.mCheckRowsAreRepealedExpectedValues == null))
                {
                    this.mCheckRowsAreRepealedExpectedValues = new CheckRowsAreRepealedExpectedValues();
                }
                return this.mCheckRowsAreRepealedExpectedValues;
            }
        }
        
        public virtual CheckWeekendPatternDisabledInEmployeeSettingsExpectedValues CheckWeekendPatternDisabledInEmployeeSettingsExpectedValues
        {
            get
            {
                if ((this.mCheckWeekendPatternDisabledInEmployeeSettingsExpectedValues == null))
                {
                    this.mCheckWeekendPatternDisabledInEmployeeSettingsExpectedValues = new CheckWeekendPatternDisabledInEmployeeSettingsExpectedValues();
                }
                return this.mCheckWeekendPatternDisabledInEmployeeSettingsExpectedValues;
            }
        }
        
        public virtual Copy1of3LastLineInDemandWindowParams Copy1of3LastLineInDemandWindowParams
        {
            get
            {
                if ((this.mCopy1of3LastLineInDemandWindowParams == null))
                {
                    this.mCopy1of3LastLineInDemandWindowParams = new Copy1of3LastLineInDemandWindowParams();
                }
                return this.mCopy1of3LastLineInDemandWindowParams;
            }
        }
        
        public virtual Copy2of3LastLineInDemandWindowParams Copy2of3LastLineInDemandWindowParams
        {
            get
            {
                if ((this.mCopy2of3LastLineInDemandWindowParams == null))
                {
                    this.mCopy2of3LastLineInDemandWindowParams = new Copy2of3LastLineInDemandWindowParams();
                }
                return this.mCopy2of3LastLineInDemandWindowParams;
            }
        }
        
        public virtual Copy3of3LastLineInDemandWindowParams Copy3of3LastLineInDemandWindowParams
        {
            get
            {
                if ((this.mCopy3of3LastLineInDemandWindowParams == null))
                {
                    this.mCopy3of3LastLineInDemandWindowParams = new Copy3of3LastLineInDemandWindowParams();
                }
                return this.mCopy3of3LastLineInDemandWindowParams;
            }
        }
        
        public virtual CopyLastLineInDemandWindowParams CopyLastLineInDemandWindowParams
        {
            get
            {
                if ((this.mCopyLastLineInDemandWindowParams == null))
                {
                    this.mCopyLastLineInDemandWindowParams = new CopyLastLineInDemandWindowParams();
                }
                return this.mCopyLastLineInDemandWindowParams;
            }
        }
        
        public virtual EditApprovalsStep45Params EditApprovalsStep45Params
        {
            get
            {
                if ((this.mEditApprovalsStep45Params == null))
                {
                    this.mEditApprovalsStep45Params = new EditApprovalsStep45Params();
                }
                return this.mEditApprovalsStep45Params;
            }
        }
        
        public virtual RemoveCalendarplanAshiftsStep46Params RemoveCalendarplanAshiftsStep46Params
        {
            get
            {
                if ((this.mRemoveCalendarplanAshiftsStep46Params == null))
                {
                    this.mRemoveCalendarplanAshiftsStep46Params = new RemoveCalendarplanAshiftsStep46Params();
                }
                return this.mRemoveCalendarplanAshiftsStep46Params;
            }
        }
        
        public virtual RemoveFagforeningSvendsenParams RemoveFagforeningSvendsenParams
        {
            get
            {
                if ((this.mRemoveFagforeningSvendsenParams == null))
                {
                    this.mRemoveFagforeningSvendsenParams = new RemoveFagforeningSvendsenParams();
                }
                return this.mRemoveFagforeningSvendsenParams;
            }
        }
        
        public virtual SelectGustavssonAndKaspersenLinesParams SelectGustavssonAndKaspersenLinesParams
        {
            get
            {
                if ((this.mSelectGustavssonAndKaspersenLinesParams == null))
                {
                    this.mSelectGustavssonAndKaspersenLinesParams = new SelectGustavssonAndKaspersenLinesParams();
                }
                return this.mSelectGustavssonAndKaspersenLinesParams;
            }
        }
        
        public virtual SelectRow5And6Params SelectRow5And6Params
        {
            get
            {
                if ((this.mSelectRow5And6Params == null))
                {
                    this.mSelectRow5And6Params = new SelectRow5And6Params();
                }
                return this.mSelectRow5And6Params;
            }
        }
        
        public virtual SelectRow7To9Params SelectRow7To9Params
        {
            get
            {
                if ((this.mSelectRow7To9Params == null))
                {
                    this.mSelectRow7To9Params = new SelectRow7To9Params();
                }
                return this.mSelectRow7To9Params;
            }
        }
        
        public virtual SelectRow8And9Params SelectRow8And9Params
        {
            get
            {
                if ((this.mSelectRow8And9Params == null))
                {
                    this.mSelectRow8And9Params = new SelectRow8And9Params();
                }
                return this.mSelectRow8And9Params;
            }
        }
        
        public virtual SetFagforeningGladKFOParams SetFagforeningGladKFOParams
        {
            get
            {
                if ((this.mSetFagforeningGladKFOParams == null))
                {
                    this.mSetFagforeningGladKFOParams = new SetFagforeningGladKFOParams();
                }
                return this.mSetFagforeningGladKFOParams;
            }
        }
        
        public virtual CheckRow3And4IsRepealedExpectedValues CheckRow3And4IsRepealedExpectedValues
        {
            get
            {
                if ((this.mCheckRow3And4IsRepealedExpectedValues == null))
                {
                    this.mCheckRow3And4IsRepealedExpectedValues = new CheckRow3And4IsRepealedExpectedValues();
                }
                return this.mCheckRow3And4IsRepealedExpectedValues;
            }
        }
        
        public virtual CheckAllLinesApprovedStep57ExpectedValues CheckAllLinesApprovedStep57ExpectedValues
        {
            get
            {
                if ((this.mCheckAllLinesApprovedStep57ExpectedValues == null))
                {
                    this.mCheckAllLinesApprovedStep57ExpectedValues = new CheckAllLinesApprovedStep57ExpectedValues();
                }
                return this.mCheckAllLinesApprovedStep57ExpectedValues;
            }
        }
        
        public virtual CheckAllLinesApprovedStep58ExpectedValues CheckAllLinesApprovedStep58ExpectedValues
        {
            get
            {
                if ((this.mCheckAllLinesApprovedStep58ExpectedValues == null))
                {
                    this.mCheckAllLinesApprovedStep58ExpectedValues = new CheckAllLinesApprovedStep58ExpectedValues();
                }
                return this.mCheckAllLinesApprovedStep58ExpectedValues;
            }
        }
        
        public virtual CheckAllLinesApprovedStep59ExpectedValues CheckAllLinesApprovedStep59ExpectedValues
        {
            get
            {
                if ((this.mCheckAllLinesApprovedStep59ExpectedValues == null))
                {
                    this.mCheckAllLinesApprovedStep59ExpectedValues = new CheckAllLinesApprovedStep59ExpectedValues();
                }
                return this.mCheckAllLinesApprovedStep59ExpectedValues;
            }
        }
        
        public virtual CheckFTTCalculationsStep7ExpectedValues CheckFTTCalculationsStep7ExpectedValues
        {
            get
            {
                if ((this.mCheckFTTCalculationsStep7ExpectedValues == null))
                {
                    this.mCheckFTTCalculationsStep7ExpectedValues = new CheckFTTCalculationsStep7ExpectedValues();
                }
                return this.mCheckFTTCalculationsStep7ExpectedValues;
            }
        }
        
        public UIRepresentasjonerWindow UIRepresentasjonerWindow
        {
            get
            {
                if ((this.mUIRepresentasjonerWindow == null))
                {
                    this.mUIRepresentasjonerWindow = new UIRepresentasjonerWindow();
                }
                return this.mUIRepresentasjonerWindow;
            }
        }
        
        public UIGodkjenningskravarbeWindow UIGodkjenningskravarbeWindow
        {
            get
            {
                if ((this.mUIGodkjenningskravarbeWindow == null))
                {
                    this.mUIGodkjenningskravarbeWindow = new UIGodkjenningskravarbeWindow();
                }
                return this.mUIGodkjenningskravarbeWindow;
            }
        }
        
        public UILeggtilansatteWindow UILeggtilansatteWindow
        {
            get
            {
                if ((this.mUILeggtilansatteWindow == null))
                {
                    this.mUILeggtilansatteWindow = new UILeggtilansatteWindow();
                }
                return this.mUILeggtilansatteWindow;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UIGT4003InformasjonWindow UIGT4003InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4003InformasjonWindow == null))
                {
                    this.mUIGT4003InformasjonWindow = new UIGT4003InformasjonWindow();
                }
                return this.mUIGT4003InformasjonWindow;
            }
        }
        
        public UIRegistreringsstatusWindow UIRegistreringsstatusWindow
        {
            get
            {
                if ((this.mUIRegistreringsstatusWindow == null))
                {
                    this.mUIRegistreringsstatusWindow = new UIRegistreringsstatusWindow();
                }
                return this.mUIRegistreringsstatusWindow;
            }
        }
        
        public UISkrivenkommentartilaWindow UISkrivenkommentartilaWindow
        {
            get
            {
                if ((this.mUISkrivenkommentartilaWindow == null))
                {
                    this.mUISkrivenkommentartilaWindow = new UISkrivenkommentartilaWindow();
                }
                return this.mUISkrivenkommentartilaWindow;
            }
        }
        
        public UIAnsattinnstillingerfWindow UIAnsattinnstillingerfWindow
        {
            get
            {
                if ((this.mUIAnsattinnstillingerfWindow == null))
                {
                    this.mUIAnsattinnstillingerfWindow = new UIAnsattinnstillingerfWindow();
                }
                return this.mUIAnsattinnstillingerfWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAnsattinnstillingerfWindow1 UIAnsattinnstillingerfWindow1
        {
            get
            {
                if ((this.mUIAnsattinnstillingerfWindow1 == null))
                {
                    this.mUIAnsattinnstillingerfWindow1 = new UIAnsattinnstillingerfWindow1();
                }
                return this.mUIAnsattinnstillingerfWindow1;
            }
        }
        
        public UILinjeinnstillingerGuWindow UILinjeinnstillingerGuWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerGuWindow == null))
                {
                    this.mUILinjeinnstillingerGuWindow = new UILinjeinnstillingerGuWindow();
                }
                return this.mUILinjeinnstillingerGuWindow;
            }
        }
        
        public UISøkingidatabaseloggWindow UISøkingidatabaseloggWindow
        {
            get
            {
                if ((this.mUISøkingidatabaseloggWindow == null))
                {
                    this.mUISøkingidatabaseloggWindow = new UISøkingidatabaseloggWindow();
                }
                return this.mUISøkingidatabaseloggWindow;
            }
        }
        
        public UIOverførtilleggWindow UIOverførtilleggWindow
        {
            get
            {
                if ((this.mUIOverførtilleggWindow == null))
                {
                    this.mUIOverførtilleggWindow = new UIOverførtilleggWindow();
                }
                return this.mUIOverførtilleggWindow;
            }
        }
        
        public UIIverksetteWindow UIIverksetteWindow
        {
            get
            {
                if ((this.mUIIverksetteWindow == null))
                {
                    this.mUIIverksetteWindow = new UIIverksetteWindow();
                }
                return this.mUIIverksetteWindow;
            }
        }
        
        public UISletteiverksettingWindow UISletteiverksettingWindow
        {
            get
            {
                if ((this.mUISletteiverksettingWindow == null))
                {
                    this.mUISletteiverksettingWindow = new UISletteiverksettingWindow();
                }
                return this.mUISletteiverksettingWindow;
            }
        }
        
        public UIKravtilgodkjenningWindow UIKravtilgodkjenningWindow
        {
            get
            {
                if ((this.mUIKravtilgodkjenningWindow == null))
                {
                    this.mUIKravtilgodkjenningWindow = new UIKravtilgodkjenningWindow();
                }
                return this.mUIKravtilgodkjenningWindow;
            }
        }
        
        public UIGT4001InformasjonWindow UIGT4001InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4001InformasjonWindow == null))
                {
                    this.mUIGT4001InformasjonWindow = new UIGT4001InformasjonWindow();
                }
                return this.mUIGT4001InformasjonWindow;
            }
        }
        
        public UIGT4006InformasjonWindow UIGT4006InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4006InformasjonWindow == null))
                {
                    this.mUIGT4006InformasjonWindow = new UIGT4006InformasjonWindow();
                }
                return this.mUIGT4006InformasjonWindow;
            }
        }
        
        public UIAnsatteiarbeidsplanWindow UIAnsatteiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIAnsatteiarbeidsplanWindow == null))
                {
                    this.mUIAnsatteiarbeidsplanWindow = new UIAnsatteiarbeidsplanWindow();
                }
                return this.mUIAnsatteiarbeidsplanWindow;
            }
        }
        
        public UIGT1002AdvarselWindow UIGT1002AdvarselWindow
        {
            get
            {
                if ((this.mUIGT1002AdvarselWindow == null))
                {
                    this.mUIGT1002AdvarselWindow = new UIGT1002AdvarselWindow();
                }
                return this.mUIGT1002AdvarselWindow;
            }
        }
        
        public UIBrukeradministrasjonWindow UIBrukeradministrasjonWindow
        {
            get
            {
                if ((this.mUIBrukeradministrasjonWindow == null))
                {
                    this.mUIBrukeradministrasjonWindow = new UIBrukeradministrasjonWindow();
                }
                return this.mUIBrukeradministrasjonWindow;
            }
        }
        
        public UIMikkelMikkelsenWindow UIMikkelMikkelsenWindow
        {
            get
            {
                if ((this.mUIMikkelMikkelsenWindow == null))
                {
                    this.mUIMikkelMikkelsenWindow = new UIMikkelMikkelsenWindow();
                }
                return this.mUIMikkelMikkelsenWindow;
            }
        }
        
        public UIItemWindow14 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow14();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow22 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow22();
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIGatAutomatedTestsDebWindow UIGatAutomatedTestsDebWindow
        {
            get
            {
                if ((this.mUIGatAutomatedTestsDebWindow == null))
                {
                    this.mUIGatAutomatedTestsDebWindow = new UIGatAutomatedTestsDebWindow();
                }
                return this.mUIGatAutomatedTestsDebWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddCalendarplanAshiftsParams mAddCalendarplanAshiftsParams;
        
        private AddCalendarplanAshiftsStep38Params mAddCalendarplanAshiftsStep38Params;
        
        private AddCalendarplanNshiftsParams mAddCalendarplanNshiftsParams;
        
        private ApproveGustavssonAndSvendsenRejectKaspersenStep36Params mApproveGustavssonAndSvendsenRejectKaspersenStep36Params;
        
        private ChangeFagforeningSvendsenParams mChangeFagforeningSvendsenParams;
        
        private CheckAllLederLinesApprovedStep27ExpectedValues mCheckAllLederLinesApprovedStep27ExpectedValues;
        
        private CheckApprovedLinesDisabledExpectedValues mCheckApprovedLinesDisabledExpectedValues;
        
        private CheckDataInTransefereWindowStep40ExpectedValues mCheckDataInTransefereWindowStep40ExpectedValues;
        
        private CheckEffectuationOkStep62ExpectedValues mCheckEffectuationOkStep62ExpectedValues;
        
        private CheckEmpUnionsStep26ExpectedValues mCheckEmpUnionsStep26ExpectedValues;
        
        private CheckFTTTransfereOkStep60ExpectedValues mCheckFTTTransfereOkStep60ExpectedValues;
        
        private CheckLinesDisabledInEmployeeLineSettingsExpectedValues mCheckLinesDisabledInEmployeeLineSettingsExpectedValues;
        
        private CheckLinesDisabledInEmployeeSettingsExpectedValues mCheckLinesDisabledInEmployeeSettingsExpectedValues;
        
        private CheckNoNotificationsExpectedValues mCheckNoNotificationsExpectedValues;
        
        private CheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindowExpectedValues mCheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindowExpectedValues;
        
        private CheckRegMessagesStep47ExpectedValues mCheckRegMessagesStep47ExpectedValues;
        
        private CheckRegStatusStep61ExpectedValues mCheckRegStatusStep61ExpectedValues;
        
        private CheckRegStatusStep9ExpectedValues mCheckRegStatusStep9ExpectedValues;
        
        private CheckRepresentations_Step19ExpectedValues mCheckRepresentations_Step19ExpectedValues;
        
        private CheckRepresentations_Step3ExpectedValues mCheckRepresentations_Step3ExpectedValues;
        
        private CheckRow3DisabledExpectedValues mCheckRow3DisabledExpectedValues;
        
        private CheckRow4And5IsApprovedExpectedValues mCheckRow4And5IsApprovedExpectedValues;
        
        private CheckRow7To9IsRejectedExpectedValues mCheckRow7To9IsRejectedExpectedValues;
        
        private CheckRow8To9IsRepealedExpectedValues mCheckRow8To9IsRepealedExpectedValues;
        
        private CheckRowsAreRepealedExpectedValues mCheckRowsAreRepealedExpectedValues;
        
        private CheckWeekendPatternDisabledInEmployeeSettingsExpectedValues mCheckWeekendPatternDisabledInEmployeeSettingsExpectedValues;
        
        private Copy1of3LastLineInDemandWindowParams mCopy1of3LastLineInDemandWindowParams;
        
        private Copy2of3LastLineInDemandWindowParams mCopy2of3LastLineInDemandWindowParams;
        
        private Copy3of3LastLineInDemandWindowParams mCopy3of3LastLineInDemandWindowParams;
        
        private CopyLastLineInDemandWindowParams mCopyLastLineInDemandWindowParams;
        
        private EditApprovalsStep45Params mEditApprovalsStep45Params;
        
        private RemoveCalendarplanAshiftsStep46Params mRemoveCalendarplanAshiftsStep46Params;
        
        private RemoveFagforeningSvendsenParams mRemoveFagforeningSvendsenParams;
        
        private SelectGustavssonAndKaspersenLinesParams mSelectGustavssonAndKaspersenLinesParams;
        
        private SelectRow5And6Params mSelectRow5And6Params;
        
        private SelectRow7To9Params mSelectRow7To9Params;
        
        private SelectRow8And9Params mSelectRow8And9Params;
        
        private SetFagforeningGladKFOParams mSetFagforeningGladKFOParams;
        
        private CheckRow3And4IsRepealedExpectedValues mCheckRow3And4IsRepealedExpectedValues;
        
        private CheckAllLinesApprovedStep57ExpectedValues mCheckAllLinesApprovedStep57ExpectedValues;
        
        private CheckAllLinesApprovedStep58ExpectedValues mCheckAllLinesApprovedStep58ExpectedValues;
        
        private CheckAllLinesApprovedStep59ExpectedValues mCheckAllLinesApprovedStep59ExpectedValues;
        
        private CheckFTTCalculationsStep7ExpectedValues mCheckFTTCalculationsStep7ExpectedValues;
        
        private UIRepresentasjonerWindow mUIRepresentasjonerWindow;
        
        private UIGodkjenningskravarbeWindow mUIGodkjenningskravarbeWindow;
        
        private UILeggtilansatteWindow mUILeggtilansatteWindow;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UIGT4003InformasjonWindow mUIGT4003InformasjonWindow;
        
        private UIRegistreringsstatusWindow mUIRegistreringsstatusWindow;
        
        private UISkrivenkommentartilaWindow mUISkrivenkommentartilaWindow;
        
        private UIAnsattinnstillingerfWindow mUIAnsattinnstillingerfWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIAnsattinnstillingerfWindow1 mUIAnsattinnstillingerfWindow1;
        
        private UILinjeinnstillingerGuWindow mUILinjeinnstillingerGuWindow;
        
        private UISøkingidatabaseloggWindow mUISøkingidatabaseloggWindow;
        
        private UIOverførtilleggWindow mUIOverførtilleggWindow;
        
        private UIIverksetteWindow mUIIverksetteWindow;
        
        private UISletteiverksettingWindow mUISletteiverksettingWindow;
        
        private UIKravtilgodkjenningWindow mUIKravtilgodkjenningWindow;
        
        private UIGT4001InformasjonWindow mUIGT4001InformasjonWindow;
        
        private UIGT4006InformasjonWindow mUIGT4006InformasjonWindow;
        
        private UIAnsatteiarbeidsplanWindow mUIAnsatteiarbeidsplanWindow;
        
        private UIGT1002AdvarselWindow mUIGT1002AdvarselWindow;
        
        private UIBrukeradministrasjonWindow mUIBrukeradministrasjonWindow;
        
        private UIMikkelMikkelsenWindow mUIMikkelMikkelsenWindow;
        
        private UIItemWindow14 mUIItemWindow1;
        
        private UIItemWindow22 mUIItemWindow2;
        
        private UIGatAutomatedTestsDebWindow mUIGatAutomatedTestsDebWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddCalendarplanAshifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddCalendarplanAshiftsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'a{Tab}' in '[Row]0[Column]RosterCell_5' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "a{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddCalendarplanAshiftsStep38'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddCalendarplanAshiftsStep38Params
    {
        
        #region Fields
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Type 'a{Down}' in '[Row]0[Column]RosterCell_9' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "a{Down}";
        
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Type 'a{Down}' in '[Row]1[Column]RosterCell_9' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditSendKeys = "a{Down}";
        
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Type 'a{Down}' in '[Row]2[Column]RosterCell_9' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEditSendKeys = "a{Down}";
        
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Type 'a{Down}' in '[Row]3[Column]RosterCell_9' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEditSendKeys = "a{Down}";
        
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Type 'a{Tab}' in '[Row]4[Column]RosterCell_9' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEditSendKeys = "a{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddCalendarplanNshifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddCalendarplanNshiftsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'n{Tab}' in '[Row]0[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit1SendKeys = "n{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ApproveGustavssonAndSvendsenRejectKaspersenStep36'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ApproveGustavssonAndSvendsenRejectKaspersenStep36Params
    {
        
        #region Fields
        /// <summary>
        /// Select '0' in '[Row]0[Column]reqColTillitsvalgt' combo box
        /// </summary>
        public string UIRow0ColumnreqColTillComboBoxValueAsString = "0";
        
        /// <summary>
        /// Select '0' in '[Row]1[Column]reqColTillitsvalgt' combo box
        /// </summary>
        public string UIRow1ColumnreqColTillComboBoxValueAsString = "0";
        
        /// <summary>
        /// Select '2' in '[Row]2[Column]reqColTillitsvalgt' combo box
        /// </summary>
        public string UIRow2ColumnreqColTillComboBoxValueAsString = "2";
        
        /// <summary>
        /// Type 'Avvises' in 'meComment' text box
        /// </summary>
        public string UIMeCommentEdit1ValueAsString = "Avvises";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeFagforeningSvendsen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ChangeFagforeningSvendsenParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.UnionMembershipViewModel' in 'eUnionCode' LookUpEdit
        /// </summary>
        public string UIEUnionCodeLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.UnionMembershipViewMode" +
            "l";
        
        /// <summary>
        /// Type 'KFO - KFO' in 'eUnionCode' LookUpEdit
        /// </summary>
        public string UIEUnionCodeLookUpEditValueAsString = "KFO - KFO";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAllLederLinesApprovedStep27'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAllLederLinesApprovedStep27ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell4Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCellText = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell1Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCellText = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCell1Text = "Godkjenn";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckApprovedLinesDisabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckApprovedLinesDisabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell3ValueAsString = "NewPlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (N) readonly'
        /// </summary>
        public string UIItemCell2ValueAsString = "PlanShift (N) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell4ValueAsString = "NewPlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell5ValueAsString = "NewPlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell6ValueAsString = "NewPlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell7ValueAsString = "NewPlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'PlanShift (N) readonly'
        /// </summary>
        public string UIItemCell11ValueAsString = "PlanShift (N) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
        /// </summary>
        public string UINCellValueAsString = "PlanShift (N) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCell8ValueAsString = "NewPlanShift (Empty) readonly";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDataInTransefereWindowStep40'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckDataInTransefereWindowStep40ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Gustavsson, Robert' cell equals 'Gustavsson, Robert'
        /// </summary>
        public string UIGustavssonRobertCellValueAsString = "Gustavsson, Robert";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Kaspersen, Kasper' cell equals 'Kaspersen, Kasper'
        /// </summary>
        public string UIKaspersenKasperCellValueAsString = "Kaspersen, Kasper";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Lassen, Liselotte' cell equals 'Lassen, Liselotte'
        /// </summary>
        public string UILassenLiselotteCellValueAsString = "Lassen, Liselotte";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Mikkelsen, Mikkel' cell equals 'Mikkelsen, Mikkel'
        /// </summary>
        public string UIMikkelsenMikkelCellValueAsString = "Mikkelsen, Mikkel";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Svendsen, Svanhild' cell equals 'Svendsen, Svanhild'
        /// </summary>
        public string UISvendsenSvanhildCellValueAsString = "Svendsen, Svanhild";
        
        /// <summary>
        /// Verify that the 'Enabled' property of '&Overfør' button equals 'True'
        /// </summary>
        public bool UIOverførButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEffectuationOkStep62'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEffectuationOkStep62ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Slett iverksetting' RibbonItem equals 'True'
        /// </summary>
        public bool UISlettiverksettingRibbonItemEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpUnionsStep26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpUnionsStep26ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'KFO' cell equals 'KFO'
        /// </summary>
        public string UIKFOCellValueAsString = "KFO";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Gustavsson, Robert' cell equals 'Gustavsson, Robert'
        /// </summary>
        public string UIGustavssonRobertCellValueAsString = "Gustavsson, Robert";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'FAG - Fagforbundet' cell equals 'FAG - Fagforbundet'
        /// </summary>
        public string UIFAGFagforbundetCellValueAsString = "FAG - Fagforbundet";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Kaspersen, Kasper' cell equals 'Kaspersen, Kasper'
        /// </summary>
        public string UIKaspersenKasperCellValueAsString = "Kaspersen, Kasper";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'NSFU - NSF Uorganisert' cell equals 'NSFU - NSF Uorganisert'
        /// </summary>
        public string UINSFUNSFUorganisertCellValueAsString = "NSFU - NSF Uorganisert";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Lassen, Liselotte' cell equals 'Lassen, Liselotte'
        /// </summary>
        public string UILassenLiselotteCellValueAsString = "Lassen, Liselotte";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'NSF - Norsk sykepleierforbund' cell equals 'NSF - Norsk sykepleierforbund'
        /// </summary>
        public string UINSFNorsksykepleierfoCellValueAsString = "NSF - Norsk sykepleierforbund";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Mikkelsen, Mikkel' cell equals 'Mikkelsen, Mikkel'
        /// </summary>
        public string UIMikkelsenMikkelCellValueAsString = "Mikkelsen, Mikkel";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'FAG - Fagforbundet' cell equals 'KFO'
        /// </summary>
        public string UIFAGFagforbundetCell1ValueAsString = "KFO";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Svendsen, Svanhild' cell equals 'Svendsen, Svanhild'
        /// </summary>
        public string UISvendsenSvanhildCellValueAsString = "Svendsen, Svanhild";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTTransfereOkStep60'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckFTTTransfereOkStep60ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Gustavsson, Robert' cell equals 'Gustavsson, Robert'
        /// </summary>
        public string UIGustavssonRobertCellValueAsString = "Gustavsson, Robert";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Kaspersen, Kasper' cell equals 'Kaspersen, Kasper'
        /// </summary>
        public string UIKaspersenKasperCellValueAsString = "Kaspersen, Kasper";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Lassen, Liselotte' cell equals 'Lassen, Liselotte'
        /// </summary>
        public string UILassenLiselotteCellValueAsString = "Lassen, Liselotte";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Mikkelsen, Mikkel' cell equals 'Mikkelsen, Mikkel'
        /// </summary>
        public string UIMikkelsenMikkelCellValueAsString = "Mikkelsen, Mikkel";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Svendsen, Svanhild' cell equals 'Svendsen, Svanhild'
        /// </summary>
        public string UISvendsenSvanhildCellValueAsString = "Svendsen, Svanhild";
        
        /// <summary>
        /// Verify that the 'Enabled' property of '&Overfør' button equals 'True'
        /// </summary>
        public bool UIOverførButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesDisabledInEmployeeLineSettings'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesDisabledInEmployeeLineSettingsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'eNumber[3]' text box equals 'True'
        /// </summary>
        public bool UIENumber3EditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'eNumber[2]' text box equals 'True'
        /// </summary>
        public bool UIENumber2EditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'eFlexibleHoursDescription' text box equals 'True'
        /// </summary>
        public bool UIEFlexibleHoursDescriEditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'leAvailableRulesets' LookUpEdit equals 'True'
        /// </summary>
        public bool UILeAvailableRulesetsLookUpEditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'eNumber[1]' text box equals 'True'
        /// </summary>
        public bool UIENumber1EditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'btnSetYearlyWorkTimePercentToDiff' button equals 'False'
        /// </summary>
        public bool UIBtnSetYearlyWorkTimeButtonEnabled = false;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'RadioGroupItem' radio button equals 'True'
        /// </summary>
        public bool UIRadioGroupItemRadioButtonReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'RadioGroupItem' radio button equals 'True'
        /// </summary>
        public bool UIRadioGroupItemRadioButton1ReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'drdToSporadic' LookUpEdit equals 'True'
        /// </summary>
        public bool UIDrdToSporadicLookUpEditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'chkUpdateSaldoBank' check box equals 'False'
        /// </summary>
        public bool UIChkUpdateSaldoBankCheckBoxEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'leOvertimeDefaultCode' combo box equals 'False'
        /// </summary>
        public bool UILeOvertimeDefaultCodComboBoxEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesDisabledInEmployeeSettings'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesDisabledInEmployeeSettingsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'chkEdit' check box equals 'False'
        /// </summary>
        public bool UIChkEditCheckBoxEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'chkEdit' check box equals 'False'
        /// </summary>
        public bool UIChkEditCheckBoxEnabled1 = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'chkEdit' check box equals 'False'
        /// </summary>
        public bool UIChkEditCheckBoxEnabled2 = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckNoNotifications'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckNoNotificationsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals 'Ingen meldinger'
        /// </summary>
        public string UILnkDetailPopupEditValueAsString = "Ingen meldinger";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckNoNotificationsDeleteEffectuationFromPayrollCalculationWindowExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals 'Det er 0 stk. melding(er)'
        /// </summary>
        public string UILnkDetailPopupEditValueAsString = "Det er 0 stk. melding(er)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRegMessagesStep47'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRegMessagesStep47ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linje 7 - 1 - Pirqete, Petronella - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 4 - 1 - Mikkelsen, Mikkel - Kan ikke iverksettes, den mangler godkjenning.'
        /// </summary>
        public string UILinje71PirqetePetronCellValueAsString = "Linje 4 - 1 - Mikkelsen, Mikkel - Kan ikke iverksettes, den mangler godkjenning.";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linje 5 - 1 - Svendsen, Svanhild - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 5 - 1 - Svendsen, Svanhild - Kan ikke iverksettes, den mangler godkjenning.'
        /// </summary>
        public string UILinje51SvendsenSvanhCellValueAsString = "Linje 5 - 1 - Svendsen, Svanhild - Kan ikke iverksettes, den mangler godkjenning." +
            "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linje 3 - 1 - Lassen, Liselotte - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 3 - 1 - Lassen, Liselotte - Kan ikke iverksettes, den mangler godkjenning.'
        /// </summary>
        public string UILinje31LassenLiselotCellValueAsString = "Linje 3 - 1 - Lassen, Liselotte - Kan ikke iverksettes, den mangler godkjenning.";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linje 1 - 1 - Gustavsson, Robert - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 1 - 1 - Gustavsson, Robert - Kan ikke iverksettes, den mangler godkjenning.'
        /// </summary>
        public string UILinje11GustavssonRobCellValueAsString = "Linje 1 - 1 - Gustavsson, Robert - Kan ikke iverksettes, den mangler godkjenning." +
            "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linje 2 - 1 - Kaspersen, Kasper - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 2 - 1 - Kaspersen, Kasper - Kan ikke iverksettes, den mangler godkjenning.'
        /// </summary>
        public string UILinje21KaspersenKaspCellValueAsString = "Linje 2 - 1 - Kaspersen, Kasper - Kan ikke iverksettes, den mangler godkjenning.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRegStatusStep61'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRegStatusStep61ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals 'Ingen meldinger'
        /// </summary>
        public string UILnkDetailPopupEditValueAsString = "Ingen meldinger";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRegStatusStep9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRegStatusStep9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linje 7 - 1 - Pirqete, Petronella - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 7 - 1 - Pirqete, Petronella - Kan ikke iverksettes, den mangler godkjenning.'
        /// </summary>
        public string UILinje71PirqetePetronCellValueAsString = "Linje 7 - 1 - Pirqete, Petronella - Kan ikke iverksettes, den mangler godkjenning" +
            ".";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
        /// </summary>
        public string UILinjenerikkegodkjentCellValueAsString = "Linjen er ikke godkjent.";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
        /// </summary>
        public string UILinjenerikkegodkjentCell1ValueAsString = "Linjen er ikke godkjent.";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
        /// </summary>
        public string UILinjenerikkegodkjentCell2ValueAsString = "Linjen er ikke godkjent.";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
        /// </summary>
        public string UILinjenerikkegodkjentCell3ValueAsString = "Linjen er ikke godkjent.";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
        /// </summary>
        public string UILinjenerikkegodkjentCell4ValueAsString = "Linjen er ikke godkjent.";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
        /// </summary>
        public string UILinjenerikkegodkjentCell5ValueAsString = "Linjen er ikke godkjent.";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
        /// </summary>
        public string UILinjenerikkegodkjentCell6ValueAsString = "Linjen er ikke godkjent.";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
        /// </summary>
        public string UILinjenerikkegodkjentCell7ValueAsString = "Linjen er ikke godkjent.";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linje 3 - 1 - Gustavsson, Robert - Kan ikke iverksettes, den mangler godkjenning.' cell equals 'Linje 3 - 1 - Gustavsson, Robert - Kan ikke iverksettes, den mangler godkjenning.'
        /// </summary>
        public string UILinje31GustavssonRobCellValueAsString = "Linje 3 - 1 - Gustavsson, Robert - Kan ikke iverksettes, den mangler godkjenning." +
            "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Linjen er ikke godkjent.' cell equals 'Linjen er ikke godkjent.'
        /// </summary>
        public string UILinjenerikkegodkjentCell8ValueAsString = "Linjen er ikke godkjent.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRepresentations_Step19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRepresentations_Step19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Leder 5080' cell equals 'Leder 5080'
        /// </summary>
        public string UILeder5080CellValueAsString = "Leder 5080";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5080 - Godkjenning' cell equals '5080 - Godkjenning'
        /// </summary>
        public string UIItem5080GodkjenningCellValueAsString = "5080 - Godkjenning";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Leder' cell equals 'Leder'
        /// </summary>
        public string UILederCell1ValueAsString = "Leder";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Rolle Tillitsvalgt FAG KFO 5080' cell equals 'Rolle Tillitsvalgt FAG KFO 5080'
        /// </summary>
        public string UIRolleTillitsvalgtFAGCellValueAsString = "Rolle Tillitsvalgt FAG KFO 5080";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5080 - Godkjenning' cell equals '5080 - Godkjenning'
        /// </summary>
        public string UIItem5080GodkjenningCell1ValueAsString = "5080 - Godkjenning";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Tillitsvalgt' cell equals 'Tillitsvalgt'
        /// </summary>
        public string UITillitsvalgtCellValueAsString = "Tillitsvalgt";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Tillitsvalgt NSF 5080' cell equals 'Tillitsvalgt NSF 5080'
        /// </summary>
        public string UITillitsvalgtNSF5080CellValueAsString = "Tillitsvalgt NSF 5080";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5080 - Godkjenning' cell equals '5080 - Godkjenning'
        /// </summary>
        public string UIItem5080GodkjenningCell2ValueAsString = "5080 - Godkjenning";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Tillitsvalgt' cell equals 'Tillitsvalgt'
        /// </summary>
        public string UITillitsvalgtCell1ValueAsString = "Tillitsvalgt";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Koordinator' cell equals 'Koordinator'
        /// </summary>
        public string UIKoordinatorCellValueAsString = "Koordinator";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5080 - Godkjenning' cell equals '5080 - Godkjenning'
        /// </summary>
        public string UIItem5080GodkjenningCell3ValueAsString = "5080 - Godkjenning";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Koordinator' cell equals 'Koordinator'
        /// </summary>
        public string UIKoordinatorCell1ValueAsString = "Koordinator";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRepresentations_Step3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRepresentations_Step3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Leder 5000' cell equals 'Leder 5000'
        /// </summary>
        public string UILeder5000CellValueAsString = "Leder 5000";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5000 - ARBEIDSPLANKLINIKKEN' cell equals '5000 - ARBEIDSPLANKLINIKKEN'
        /// </summary>
        public string UIItem5000ARBEIDSPLANKCellValueAsString = "5000 - ARBEIDSPLANKLINIKKEN";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Leder' cell equals 'Leder'
        /// </summary>
        public string UILederCellValueAsString = "Leder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRow3Disabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRow3DisabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of cell equals 'GridControlCell'
        /// </summary>
        public string UIItemCell1ClassName = "GridControlCell";
        
        /// <summary>
        /// Verify that the 'ControlType' property of cell equals 'Cell'
        /// </summary>
        public string UIItemCell1ControlType = "Cell";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRow4And5IsApproved'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRow4And5IsApprovedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell1Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCellText = "Godkjenn";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRow7To9IsRejected'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRow7To9IsRejectedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Avvis'
        /// </summary>
        public string UIGodkjennCell2Text = "Avvis";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Avvis'
        /// </summary>
        public string UIItemCell2Text = "Avvis";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Avvis' cell equals 'Avvis'
        /// </summary>
        public string UIAvvisCellText = "Avvis";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRow8To9IsRepealed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRow8To9IsRepealedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Avvis' cell equals ''
        /// </summary>
        public string UIAvvisCellText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRowsAreRepealed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRowsAreRepealedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell3Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell6Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell7Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell8Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell9Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell4Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals ''
        /// </summary>
        public string UIGodkjennCellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals ''
        /// </summary>
        public string UIGodkjennCell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell11Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell12Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell5Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals ''
        /// </summary>
        public string UIGodkjennCell3Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell10Text = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWeekendPatternDisabledInEmployeeSettings'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckWeekendPatternDisabledInEmployeeSettingsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'chkFixedWeekendRotation' check box equals 'False'
        /// </summary>
        public bool UIChkFixedWeekendRotatCheckBoxEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'leFixedWeekendRotation' LookUpEdit equals 'False'
        /// </summary>
        public bool UILeFixedWeekendRotatiLookUpEditEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'chkUserDefinedWeekendRotation' check box equals 'False'
        /// </summary>
        public bool UIChkUserDefinedWeekenCheckBoxEnabled = false;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'eUserDefinedWeekendRotation' text box equals 'True'
        /// </summary>
        public bool UIEUserDefinedWeekendREditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Endre egendefinert helgemønster' button equals 'False'
        /// </summary>
        public bool UIEndreegendefinerthelButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Copy1of3LastLineInDemandWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Copy1of3LastLineInDemandWindowParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + c' in client
        /// </summary>
        public string UIItemClientSendKeys = "c";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Copy2of3LastLineInDemandWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Copy2of3LastLineInDemandWindowParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + c' in client
        /// </summary>
        public string UIItemClientSendKeys = "c";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Copy3of3LastLineInDemandWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Copy3of3LastLineInDemandWindowParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + c' in client
        /// </summary>
        public string UIItemClientSendKeys = "c";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CopyLastLineInDemandWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CopyLastLineInDemandWindowParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + c' in client
        /// </summary>
        public string UIItemClientSendKeys = "c";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditApprovalsStep45'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditApprovalsStep45Params
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Tillat iverksetting uten godkjenning' check box
        /// </summary>
        public bool UITillativerksettingutCheckBoxChecked = false;
        
        /// <summary>
        /// Clear 'Tillat overføring av faste tillegg uten godkjennin...' check box
        /// </summary>
        public bool UITillatoverføringavfaCheckBoxChecked = false;
        
        /// <summary>
        /// Clear 'Tillat publisering av arbeidsplan i MinGat uten go...' check box
        /// </summary>
        public bool UITillatpubliseringavaCheckBoxChecked = false;
        
        /// <summary>
        /// Clear 'Tillat iverksetting uten godkjenning' check box
        /// </summary>
        public bool UITillativerksettingutCheckBoxChecked1 = false;
        
        /// <summary>
        /// Clear 'Tillat overføring av faste tillegg uten godkjennin...' check box
        /// </summary>
        public bool UITillatoverføringavfaCheckBoxChecked1 = false;
        
        /// <summary>
        /// Clear 'Tillat publisering av arbeidsplan i MinGat uten go...' check box
        /// </summary>
        public bool UITillatpubliseringavaCheckBoxChecked1 = false;
        
        /// <summary>
        /// Clear 'Tillat iverksetting uten godkjenning' check box
        /// </summary>
        public bool UITillativerksettingutCheckBoxChecked2 = false;
        
        /// <summary>
        /// Clear 'Tillat overføring av faste tillegg uten godkjennin...' check box
        /// </summary>
        public bool UITillatoverføringavfaCheckBoxChecked2 = false;
        
        /// <summary>
        /// Clear 'Tillat publisering av arbeidsplan i MinGat uten go...' check box
        /// </summary>
        public bool UITillatpubliseringavaCheckBoxChecked2 = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RemoveCalendarplanAshiftsStep46'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RemoveCalendarplanAshiftsStep46Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Tab}' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Down}{Delete}{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RemoveFagforeningSvendsen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RemoveFagforeningSvendsenParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'eUnionCode' LookUpEdit
        /// </summary>
        public string UIEUnionCodeLookUpEditValueAsString = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectGustavssonAndKaspersenLines'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectGustavssonAndKaspersenLinesParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcApproval' table
        /// </summary>
        public string UIGcApprovalTableSendKeys = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcApproval' table
        /// </summary>
        public string UIGcApprovalTableSendKeys1 = "{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectRow5And6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectRow5And6Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcApproval' table
        /// </summary>
        public string UIGcApprovalTableSendKeys = "{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectRow7To9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectRow7To9Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcApproval' table
        /// </summary>
        public string UIGcApprovalTableSendKeys = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcApproval' table
        /// </summary>
        public string UIGcApprovalTableSendKeys1 = "{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectRow8And9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectRow8And9Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcApproval' table
        /// </summary>
        public string UIGcApprovalTableSendKeys = "{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetFagforeningGladKFO'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetFagforeningGladKFOParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.UnionMembershipViewModel' in 'eUnionCode' LookUpEdit
        /// </summary>
        public string UIEUnionCodeLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.UnionMembershipViewMode" +
            "l";
        
        /// <summary>
        /// Type 'KFO - KFO' in 'eUnionCode' LookUpEdit
        /// </summary>
        public string UIEUnionCodeLookUpEditValueAsString = "KFO - KFO";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRow3And4IsRepealed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRow3And4IsRepealedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals ''
        /// </summary>
        public string UIGodkjennCellText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAllLinesApprovedStep57'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAllLinesApprovedStep57ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCellText = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCellText = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCell1Text = "Godkjenn";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAllLinesApprovedStep58'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAllLinesApprovedStep58ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCellText = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCell1Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCell2Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCell3Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCell4Text = "Godkjenn";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAllLinesApprovedStep59'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAllLinesApprovedStep59ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell4Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCellText = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell1Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCellText = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCell2Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell3Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell6Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell7Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell8Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell9Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell11Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell12Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell5Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Godkjenn' cell equals 'Godkjenn'
        /// </summary>
        public string UIGodkjennCell3Text = "Godkjenn";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'Godkjenn'
        /// </summary>
        public string UIItemCell10Text = "Godkjenn";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTCalculationsStep7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckFTTCalculationsStep7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
        /// </summary>
        public string UIItem75PivotGridCellText = "7,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '5'
        /// </summary>
        public string UIItem5PivotGridCellText = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
        /// </summary>
        public string UIItem75PivotGridCell1Text = "7,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '5'
        /// </summary>
        public string UIItem5PivotGridCell1Text = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
        /// </summary>
        public string UIItem75PivotGridCell2Text = "7,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '5'
        /// </summary>
        public string UIItem5PivotGridCell2Text = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
        /// </summary>
        public string UIItem75PivotGridCell3Text = "7,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '5'
        /// </summary>
        public string UIItem5PivotGridCell3Text = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
        /// </summary>
        public string UIItem75PivotGridCell4Text = "7,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '5'
        /// </summary>
        public string UIItem5PivotGridCell4Text = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
        /// </summary>
        public string UIItem75PivotGridCell5Text = "7,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '5'
        /// </summary>
        public string UIItem5PivotGridCell5Text = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
        /// </summary>
        public string UIItem75PivotGridCell6Text = "7,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '5'
        /// </summary>
        public string UIItem5PivotGridCell6Text = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
        /// </summary>
        public string UIItem75PivotGridCell7Text = "7,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '5'
        /// </summary>
        public string UIItem5PivotGridCell7Text = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,5' PivotGridCell equals '7,5'
        /// </summary>
        public string UIItem75PivotGridCell8Text = "7,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '5'
        /// </summary>
        public string UIItem5PivotGridCell8Text = "5";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRepresentasjonerWindow : DXWindow
    {
        
        public UIRepresentasjonerWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Representasjoner";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Representasjoner");
            #endregion
        }
        
        #region Properties
        public UIGsLayoutControl1Custom UIGsLayoutControl1Custom
        {
            get
            {
                if ((this.mUIGsLayoutControl1Custom == null))
                {
                    this.mUIGsLayoutControl1Custom = new UIGsLayoutControl1Custom(this);
                }
                return this.mUIGsLayoutControl1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIGsLayoutControl1Custom mUIGsLayoutControl1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsLayoutControl1Custom : DXTestControl
    {
        
        public UIGsLayoutControl1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsLayoutControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Representasjoner");
            #endregion
        }
        
        #region Properties
        public UIRootLayoutGroup UIRootLayoutGroup
        {
            get
            {
                if ((this.mUIRootLayoutGroup == null))
                {
                    this.mUIRootLayoutGroup = new UIRootLayoutGroup(this);
                }
                return this.mUIRootLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRootLayoutGroup mUIRootLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRootLayoutGroup : DXBaseLayoutItem
    {
        
        public UIRootLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Root";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Representasjoner");
            #endregion
        }
        
        #region Properties
        public UILayoutControlItem1LayoutControlItem UILayoutControlItem1LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem1LayoutControlItem == null))
                {
                    this.mUILayoutControlItem1LayoutControlItem = new UILayoutControlItem1LayoutControlItem(this);
                }
                return this.mUILayoutControlItem1LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlItem1LayoutControlItem mUILayoutControlItem1LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlItem1LayoutControlItem : DXBaseLayoutItem
    {
        
        public UILayoutControlItem1LayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Representasjoner");
            #endregion
        }
        
        #region Properties
        public UIGrpRepresentationsClient UIGrpRepresentationsClient
        {
            get
            {
                if ((this.mUIGrpRepresentationsClient == null))
                {
                    this.mUIGrpRepresentationsClient = new UIGrpRepresentationsClient(this);
                }
                return this.mUIGrpRepresentationsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpRepresentationsClient mUIGrpRepresentationsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpRepresentationsClient : DXTestControl
    {
        
        public UIGrpRepresentationsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpRepresentations";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Representasjoner");
            #endregion
        }
        
        #region Properties
        public UIGcRepresentationsTable UIGcRepresentationsTable
        {
            get
            {
                if ((this.mUIGcRepresentationsTable == null))
                {
                    this.mUIGcRepresentationsTable = new UIGcRepresentationsTable(this);
                }
                return this.mUIGcRepresentationsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRepresentationsTable mUIGcRepresentationsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRepresentationsTable : DXGrid
    {
        
        public UIGcRepresentationsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentations";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Representasjoner");
            #endregion
        }
        
        #region Properties
        public DXCell UILeder5000Cell
        {
            get
            {
                if ((this.mUILeder5000Cell == null))
                {
                    this.mUILeder5000Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUILeder5000Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]1[Column]colName";
                    this.mUILeder5000Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILeder5000Cell.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUILeder5000Cell;
            }
        }
        
        public DXCell UIItem5000ARBEIDSPLANKCell
        {
            get
            {
                if ((this.mUIItem5000ARBEIDSPLANKCell == null))
                {
                    this.mUIItem5000ARBEIDSPLANKCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5000ARBEIDSPLANKCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]1[Column]colDepartmen" +
                        "t";
                    this.mUIItem5000ARBEIDSPLANKCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5000ARBEIDSPLANKCell.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUIItem5000ARBEIDSPLANKCell;
            }
        }
        
        public DXCell UILederCell
        {
            get
            {
                if ((this.mUILederCell == null))
                {
                    this.mUILederCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILederCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]1[Column]colRepresent" +
                        "ationType";
                    this.mUILederCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILederCell.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUILederCell;
            }
        }
        
        public DXCell UILeder5080Cell
        {
            get
            {
                if ((this.mUILeder5080Cell == null))
                {
                    this.mUILeder5080Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUILeder5080Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]5[Column]colName";
                    this.mUILeder5080Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILeder5080Cell.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUILeder5080Cell;
            }
        }
        
        public DXCell UIItem5080GodkjenningCell
        {
            get
            {
                if ((this.mUIItem5080GodkjenningCell == null))
                {
                    this.mUIItem5080GodkjenningCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5080GodkjenningCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]5[Column]colDepartmen" +
                        "t";
                    this.mUIItem5080GodkjenningCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5080GodkjenningCell.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUIItem5080GodkjenningCell;
            }
        }
        
        public DXCell UILederCell1
        {
            get
            {
                if ((this.mUILederCell1 == null))
                {
                    this.mUILederCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUILederCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]5[Column]colRepresent" +
                        "ationType";
                    this.mUILederCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILederCell1.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUILederCell1;
            }
        }
        
        public DXCell UIRolleTillitsvalgtFAGCell
        {
            get
            {
                if ((this.mUIRolleTillitsvalgtFAGCell == null))
                {
                    this.mUIRolleTillitsvalgtFAGCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRolleTillitsvalgtFAGCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]6[Column]colName";
                    this.mUIRolleTillitsvalgtFAGCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRolleTillitsvalgtFAGCell.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUIRolleTillitsvalgtFAGCell;
            }
        }
        
        public DXCell UIItem5080GodkjenningCell1
        {
            get
            {
                if ((this.mUIItem5080GodkjenningCell1 == null))
                {
                    this.mUIItem5080GodkjenningCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5080GodkjenningCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]6[Column]colDepartmen" +
                        "t";
                    this.mUIItem5080GodkjenningCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5080GodkjenningCell1.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUIItem5080GodkjenningCell1;
            }
        }
        
        public DXCell UITillitsvalgtCell
        {
            get
            {
                if ((this.mUITillitsvalgtCell == null))
                {
                    this.mUITillitsvalgtCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITillitsvalgtCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]6[Column]colRepresent" +
                        "ationType";
                    this.mUITillitsvalgtCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITillitsvalgtCell.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUITillitsvalgtCell;
            }
        }
        
        public DXCell UITillitsvalgtNSF5080Cell
        {
            get
            {
                if ((this.mUITillitsvalgtNSF5080Cell == null))
                {
                    this.mUITillitsvalgtNSF5080Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUITillitsvalgtNSF5080Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]7[Column]colName";
                    this.mUITillitsvalgtNSF5080Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITillitsvalgtNSF5080Cell.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUITillitsvalgtNSF5080Cell;
            }
        }
        
        public DXCell UIItem5080GodkjenningCell2
        {
            get
            {
                if ((this.mUIItem5080GodkjenningCell2 == null))
                {
                    this.mUIItem5080GodkjenningCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5080GodkjenningCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]7[Column]colDepartmen" +
                        "t";
                    this.mUIItem5080GodkjenningCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5080GodkjenningCell2.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUIItem5080GodkjenningCell2;
            }
        }
        
        public DXCell UITillitsvalgtCell1
        {
            get
            {
                if ((this.mUITillitsvalgtCell1 == null))
                {
                    this.mUITillitsvalgtCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUITillitsvalgtCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]7[Column]colRepresent" +
                        "ationType";
                    this.mUITillitsvalgtCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITillitsvalgtCell1.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUITillitsvalgtCell1;
            }
        }
        
        public DXCell UIKoordinatorCell
        {
            get
            {
                if ((this.mUIKoordinatorCell == null))
                {
                    this.mUIKoordinatorCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKoordinatorCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]8[Column]colName";
                    this.mUIKoordinatorCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKoordinatorCell.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUIKoordinatorCell;
            }
        }
        
        public DXCell UIItem5080GodkjenningCell3
        {
            get
            {
                if ((this.mUIItem5080GodkjenningCell3 == null))
                {
                    this.mUIItem5080GodkjenningCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5080GodkjenningCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]8[Column]colDepartmen" +
                        "t";
                    this.mUIItem5080GodkjenningCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5080GodkjenningCell3.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUIItem5080GodkjenningCell3;
            }
        }
        
        public DXCell UIKoordinatorCell1
        {
            get
            {
                if ((this.mUIKoordinatorCell1 == null))
                {
                    this.mUIKoordinatorCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKoordinatorCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRepresentationsGridControlCell[View]gvRepresentations[Row]8[Column]colRepresent" +
                        "ationType";
                    this.mUIKoordinatorCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKoordinatorCell1.WindowTitles.Add("Representasjoner");
                    #endregion
                }
                return this.mUIKoordinatorCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUILeder5000Cell;
        
        private DXCell mUIItem5000ARBEIDSPLANKCell;
        
        private DXCell mUILederCell;
        
        private DXCell mUILeder5080Cell;
        
        private DXCell mUIItem5080GodkjenningCell;
        
        private DXCell mUILederCell1;
        
        private DXCell mUIRolleTillitsvalgtFAGCell;
        
        private DXCell mUIItem5080GodkjenningCell1;
        
        private DXCell mUITillitsvalgtCell;
        
        private DXCell mUITillitsvalgtNSF5080Cell;
        
        private DXCell mUIItem5080GodkjenningCell2;
        
        private DXCell mUITillitsvalgtCell1;
        
        private DXCell mUIKoordinatorCell;
        
        private DXCell mUIItem5080GodkjenningCell3;
        
        private DXCell mUIKoordinatorCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGodkjenningskravarbeWindow : WinWindow
    {
        
        public UIGodkjenningskravarbeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Godkjenningskrav - arbeidsplan";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmRegEdit";
            this.WindowTitles.Add("Godkjenningskrav - arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.WindowTitles.Add("Godkjenningskrav - arbeidsplan");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.WindowTitles.Add("Godkjenningskrav - arbeidsplan");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeggtilansatteWindow : DXWindow
    {
        
        public UILeggtilansatteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Legg til ansatte";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UISelectDepartmentEmplCustom UISelectDepartmentEmplCustom
        {
            get
            {
                if ((this.mUISelectDepartmentEmplCustom == null))
                {
                    this.mUISelectDepartmentEmplCustom = new UISelectDepartmentEmplCustom(this);
                }
                return this.mUISelectDepartmentEmplCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISelectDepartmentEmplCustom mUISelectDepartmentEmplCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectDepartmentEmplCustom : DXTestControl
    {
        
        public UISelectDepartmentEmplCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SelectDepartmentEmployeesView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SelectDepartmentEmployeesView";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentContainerClient UIPcContentContainerClient
        {
            get
            {
                if ((this.mUIPcContentContainerClient == null))
                {
                    this.mUIPcContentContainerClient = new UIPcContentContainerClient(this);
                }
                return this.mUIPcContentContainerClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentContainerClient mUIPcContentContainerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentContainerClient : DXTestControl
    {
        
        public UIPcContentContainerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContentContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIGcDepartmentEmployeeTable UIGcDepartmentEmployeeTable
        {
            get
            {
                if ((this.mUIGcDepartmentEmployeeTable == null))
                {
                    this.mUIGcDepartmentEmployeeTable = new UIGcDepartmentEmployeeTable(this);
                }
                return this.mUIGcDepartmentEmployeeTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDepartmentEmployeeTable mUIGcDepartmentEmployeeTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDepartmentEmployeeTable : DXGrid
    {
        
        public UIGcDepartmentEmployeeTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXCell UIBastantBjarneCell
        {
            get
            {
                if ((this.mUIBastantBjarneCell == null))
                {
                    this.mUIBastantBjarneCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBastantBjarneCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]0[Column]colE" +
                        "mployee";
                    this.mUIBastantBjarneCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBastantBjarneCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIBastantBjarneCell;
            }
        }
        
        public DXCell UIGustavssonRobertCell
        {
            get
            {
                if ((this.mUIGustavssonRobertCell == null))
                {
                    this.mUIGustavssonRobertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]3[Column]colE" +
                        "mployee";
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGustavssonRobertCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIGustavssonRobertCell;
            }
        }
        
        public DXCell UIKaspersenKasperCell
        {
            get
            {
                if ((this.mUIKaspersenKasperCell == null))
                {
                    this.mUIKaspersenKasperCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKaspersenKasperCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]4[Column]colE" +
                        "mployee";
                    this.mUIKaspersenKasperCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKaspersenKasperCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIKaspersenKasperCell;
            }
        }
        
        public DXCell UILassenLiselotteCell
        {
            get
            {
                if ((this.mUILassenLiselotteCell == null))
                {
                    this.mUILassenLiselotteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILassenLiselotteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]5[Column]colE" +
                        "mployee";
                    this.mUILassenLiselotteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILassenLiselotteCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUILassenLiselotteCell;
            }
        }
        
        public DXCell UIMikkelsenMikkelCell
        {
            get
            {
                if ((this.mUIMikkelsenMikkelCell == null))
                {
                    this.mUIMikkelsenMikkelCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMikkelsenMikkelCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]6[Column]colE" +
                        "mployee";
                    this.mUIMikkelsenMikkelCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMikkelsenMikkelCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIMikkelsenMikkelCell;
            }
        }
        
        public DXCell UISvendsenSvanhildCell
        {
            get
            {
                if ((this.mUISvendsenSvanhildCell == null))
                {
                    this.mUISvendsenSvanhildCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISvendsenSvanhildCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]8[Column]colE" +
                        "mployee";
                    this.mUISvendsenSvanhildCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISvendsenSvanhildCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUISvendsenSvanhildCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIBastantBjarneCell;
        
        private DXCell mUIGustavssonRobertCell;
        
        private DXCell mUIKaspersenKasperCell;
        
        private DXCell mUILassenLiselotteCell;
        
        private DXCell mUIMikkelsenMikkelCell;
        
        private DXCell mUISvendsenSvanhildCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIDpnlVisualizationDockPanel UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        
        public UIRcMenuRibbon UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        
        public UIDpnlVisualizationDockPanel1 UIDpnlVisualizationDockPanel1
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel1 == null))
                {
                    this.mUIDpnlVisualizationDockPanel1 = new UIDpnlVisualizationDockPanel1(this);
                }
                return this.mUIDpnlVisualizationDockPanel1;
            }
        }
        
        public UIPnlRosterPlanClient1 UIPnlRosterPlanClient1
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient1 == null))
                {
                    this.mUIPnlRosterPlanClient1 = new UIPnlRosterPlanClient1(this);
                }
                return this.mUIPnlRosterPlanClient1;
            }
        }
        
        public UIPnlRosterPlanClient2 UIPnlRosterPlanClient2
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient2 == null))
                {
                    this.mUIPnlRosterPlanClient2 = new UIPnlRosterPlanClient2(this);
                }
                return this.mUIPnlRosterPlanClient2;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        
        private UIDpnlVisualizationDockPanel mUIDpnlVisualizationDockPanel;
        
        private UIRcMenuRibbon mUIRcMenuRibbon;
        
        private UIDpnlVisualizationDockPanel1 mUIDpnlVisualizationDockPanel1;
        
        private UIPnlRosterPlanClient1 mUIPnlRosterPlanClient1;
        
        private UIPnlRosterPlanClient2 mUIPnlRosterPlanClient2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_5";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]RosterCell_5";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit == null))
                {
                    this.mUIRow0ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_5";
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_6";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_1";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_2";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_3";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_4";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXCell UINCell
        {
            get
            {
                if ((this.mUINCell == null))
                {
                    this.mUINCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_6";
                    this.mUINCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_24";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXCell UIKaspersenKasperCell
        {
            get
            {
                if ((this.mUIKaspersenKasperCell == null))
                {
                    this.mUIKaspersenKasperCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKaspersenKasperCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]Col_EmployeeName";
                    this.mUIKaspersenKasperCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKaspersenKasperCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKaspersenKasperCell;
            }
        }
        
        public DXCell UIGustavssonRobertCell
        {
            get
            {
                if ((this.mUIGustavssonRobertCell == null))
                {
                    this.mUIGustavssonRobertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_EmployeeName";
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGustavssonRobertCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGustavssonRobertCell;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_9";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_9";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_9";
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItemCell11;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell3;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell5;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell7;
        
        private DXCell mUINCell;
        
        private DXCell mUIItemCell8;
        
        private DXCell mUIKaspersenKasperCell;
        
        private DXCell mUIGustavssonRobertCell;
        
        private DXCell mUIItemCell9;
        
        private DXCell mUIItemCell12;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable1 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable1(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable1 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable1 : DXGrid
    {
        
        public UIGcRosterPlanTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIGustavssonRobertCell
        {
            get
            {
                if ((this.mUIGustavssonRobertCell == null))
                {
                    this.mUIGustavssonRobertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]EmployeeName";
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGustavssonRobertCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGustavssonRobertCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIGustavssonRobertCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlVisualizationDockPanel : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel3_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        
        public UITcSubtabsTabList UITcSubtabsTabList
        {
            get
            {
                if ((this.mUITcSubtabsTabList == null))
                {
                    this.mUITcSubtabsTabList = new UITcSubtabsTabList(this);
                }
                return this.mUITcSubtabsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList mUITcVisualizationTabList;
        
        private UITcSubtabsTabList mUITcSubtabsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcVisualizationTabList : DXTestControl
    {
        
        public UITcVisualizationTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        
        public UITpApprovalClient UITpApprovalClient
        {
            get
            {
                if ((this.mUITpApprovalClient == null))
                {
                    this.mUITpApprovalClient = new UITpApprovalClient(this);
                }
                return this.mUITpApprovalClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient mUITpFixedPaymentClient;
        
        private UITpApprovalClient mUITpApprovalClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpFixedPaymentClient : DXTestControl
    {
        
        public UITpFixedPaymentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFixedPaymentControlCustom : DXTestControl
    {
        
        public UIFixedPaymentControlCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHost1Custom : DXTestControl
    {
        
        public UIViewHost1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient1 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient1(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient1 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient1 : DXTestControl
    {
        
        public UIPcViewClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom1 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom1(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom1 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFixedPaymentControlCustom1 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPgcCalculationResultPivotGrid : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem75PivotGridCell
        {
            get
            {
                if ((this.mUIItem75PivotGridCell == null))
                {
                    this.mUIItem75PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]0";
                    this.mUIItem75PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell
        {
            get
            {
                if ((this.mUIItem5PivotGridCell == null))
                {
                    this.mUIItem5PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem5PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell1
        {
            get
            {
                if ((this.mUIItem75PivotGridCell1 == null))
                {
                    this.mUIItem75PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]1";
                    this.mUIItem75PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell1
        {
            get
            {
                if ((this.mUIItem5PivotGridCell1 == null))
                {
                    this.mUIItem5PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem5PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell2
        {
            get
            {
                if ((this.mUIItem75PivotGridCell2 == null))
                {
                    this.mUIItem75PivotGridCell2 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]2";
                    this.mUIItem75PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell2;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell2
        {
            get
            {
                if ((this.mUIItem5PivotGridCell2 == null))
                {
                    this.mUIItem5PivotGridCell2 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]2";
                    this.mUIItem5PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell2;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell3
        {
            get
            {
                if ((this.mUIItem75PivotGridCell3 == null))
                {
                    this.mUIItem75PivotGridCell3 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]3";
                    this.mUIItem75PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell3;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell3
        {
            get
            {
                if ((this.mUIItem5PivotGridCell3 == null))
                {
                    this.mUIItem5PivotGridCell3 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]3";
                    this.mUIItem5PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell3;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell4
        {
            get
            {
                if ((this.mUIItem75PivotGridCell4 == null))
                {
                    this.mUIItem75PivotGridCell4 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]4";
                    this.mUIItem75PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell4;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell4
        {
            get
            {
                if ((this.mUIItem5PivotGridCell4 == null))
                {
                    this.mUIItem5PivotGridCell4 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]4";
                    this.mUIItem5PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell4;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell5
        {
            get
            {
                if ((this.mUIItem75PivotGridCell5 == null))
                {
                    this.mUIItem75PivotGridCell5 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]5";
                    this.mUIItem75PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell5;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell5
        {
            get
            {
                if ((this.mUIItem5PivotGridCell5 == null))
                {
                    this.mUIItem5PivotGridCell5 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]5";
                    this.mUIItem5PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell5;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell6
        {
            get
            {
                if ((this.mUIItem75PivotGridCell6 == null))
                {
                    this.mUIItem75PivotGridCell6 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]6";
                    this.mUIItem75PivotGridCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell6;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell6
        {
            get
            {
                if ((this.mUIItem5PivotGridCell6 == null))
                {
                    this.mUIItem5PivotGridCell6 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]6";
                    this.mUIItem5PivotGridCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell6;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell7
        {
            get
            {
                if ((this.mUIItem75PivotGridCell7 == null))
                {
                    this.mUIItem75PivotGridCell7 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]7";
                    this.mUIItem75PivotGridCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell7;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell7
        {
            get
            {
                if ((this.mUIItem5PivotGridCell7 == null))
                {
                    this.mUIItem5PivotGridCell7 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]7";
                    this.mUIItem5PivotGridCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell7;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell8
        {
            get
            {
                if ((this.mUIItem75PivotGridCell8 == null))
                {
                    this.mUIItem75PivotGridCell8 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]8";
                    this.mUIItem75PivotGridCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell8;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell8
        {
            get
            {
                if ((this.mUIItem5PivotGridCell8 == null))
                {
                    this.mUIItem5PivotGridCell8 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]8";
                    this.mUIItem5PivotGridCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell8;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem75PivotGridCell;
        
        private DXPivotGridCell mUIItem5PivotGridCell;
        
        private DXPivotGridCell mUIItem75PivotGridCell1;
        
        private DXPivotGridCell mUIItem5PivotGridCell1;
        
        private DXPivotGridCell mUIItem75PivotGridCell2;
        
        private DXPivotGridCell mUIItem5PivotGridCell2;
        
        private DXPivotGridCell mUIItem75PivotGridCell3;
        
        private DXPivotGridCell mUIItem5PivotGridCell3;
        
        private DXPivotGridCell mUIItem75PivotGridCell4;
        
        private DXPivotGridCell mUIItem5PivotGridCell4;
        
        private DXPivotGridCell mUIItem75PivotGridCell5;
        
        private DXPivotGridCell mUIItem5PivotGridCell5;
        
        private DXPivotGridCell mUIItem75PivotGridCell6;
        
        private DXPivotGridCell mUIItem5PivotGridCell6;
        
        private DXPivotGridCell mUIItem75PivotGridCell7;
        
        private DXPivotGridCell mUIItem5PivotGridCell7;
        
        private DXPivotGridCell mUIItem75PivotGridCell8;
        
        private DXPivotGridCell mUIItem5PivotGridCell8;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpApprovalClient : DXTestControl
    {
        
        public UITpApprovalClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UILcMainCustom
        {
            get
            {
                if ((this.mUILcMainCustom == null))
                {
                    this.mUILcMainCustom = new DXTestControl(this);
                    #region Search Criteria
                    this.mUILcMainCustom.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
                    this.mUILcMainCustom.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
                    this.mUILcMainCustom.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUILcMainCustom.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILcMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUILcMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcSubtabsTabList : DXTestControl
    {
        
        public UITcSubtabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabs";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabControlViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewTabPageClient UIViewTabPageClient
        {
            get
            {
                if ((this.mUIViewTabPageClient == null))
                {
                    this.mUIViewTabPageClient = new UIViewTabPageClient(this);
                }
                return this.mUIViewTabPageClient;
            }
        }
        
        public UIViewTabPageClient1 UIViewTabPageClient1
        {
            get
            {
                if ((this.mUIViewTabPageClient1 == null))
                {
                    this.mUIViewTabPageClient1 = new UIViewTabPageClient1(this);
                }
                return this.mUIViewTabPageClient1;
            }
        }
        
        public UIViewTabPageClient2 UIViewTabPageClient2
        {
            get
            {
                if ((this.mUIViewTabPageClient2 == null))
                {
                    this.mUIViewTabPageClient2 = new UIViewTabPageClient2(this);
                }
                return this.mUIViewTabPageClient2;
            }
        }
        
        public UIViewTabPageClient3 UIViewTabPageClient3
        {
            get
            {
                if ((this.mUIViewTabPageClient3 == null))
                {
                    this.mUIViewTabPageClient3 = new UIViewTabPageClient3(this);
                }
                return this.mUIViewTabPageClient3;
            }
        }
        #endregion
        
        #region Fields
        private UIViewTabPageClient mUIViewTabPageClient;
        
        private UIViewTabPageClient1 mUIViewTabPageClient1;
        
        private UIViewTabPageClient2 mUIViewTabPageClient2;
        
        private UIViewTabPageClient3 mUIViewTabPageClient3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient : DXTestControl
    {
        
        public UIViewTabPageClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[8]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIApprovalViewCustom UIApprovalViewCustom
        {
            get
            {
                if ((this.mUIApprovalViewCustom == null))
                {
                    this.mUIApprovalViewCustom = new UIApprovalViewCustom(this);
                }
                return this.mUIApprovalViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIApprovalViewCustom mUIApprovalViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIApprovalViewCustom : DXTestControl
    {
        
        public UIApprovalViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ApprovalView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ApprovalView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcMainCustom UILcMainCustom
        {
            get
            {
                if ((this.mUILcMainCustom == null))
                {
                    this.mUILcMainCustom = new UILcMainCustom(this);
                }
                return this.mUILcMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainCustom mUILcMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainCustom : DXTestControl
    {
        
        public UILcMainCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroup1LayoutGroup UILayoutControlGroup1LayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroup1LayoutGroup == null))
                {
                    this.mUILayoutControlGroup1LayoutGroup = new UILayoutControlGroup1LayoutGroup(this);
                }
                return this.mUILayoutControlGroup1LayoutGroup;
            }
        }
        
        public DXButton UIGodkjennButton
        {
            get
            {
                if ((this.mUIGodkjennButton == null))
                {
                    this.mUIGodkjennButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGodkjennButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnApprove";
                    this.mUIGodkjennButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGodkjennButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIGodkjennButton.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennButton;
            }
        }
        
        public UIEndrekravButton UIEndrekravButton
        {
            get
            {
                if ((this.mUIEndrekravButton == null))
                {
                    this.mUIEndrekravButton = new UIEndrekravButton(this);
                }
                return this.mUIEndrekravButton;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroup1LayoutGroup mUILayoutControlGroup1LayoutGroup;
        
        private DXButton mUIGodkjennButton;
        
        private UIEndrekravButton mUIEndrekravButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlGroup1LayoutGroup : DXBaseLayoutItem
    {
        
        public UILayoutControlGroup1LayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroup1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlItem2LayoutControlItem UILayoutControlItem2LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem2LayoutControlItem == null))
                {
                    this.mUILayoutControlItem2LayoutControlItem = new UILayoutControlItem2LayoutControlItem(this);
                }
                return this.mUILayoutControlItem2LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlItem2LayoutControlItem mUILayoutControlItem2LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlItem2LayoutControlItem : DXBaseLayoutItem
    {
        
        public UILayoutControlItem2LayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcApprovalTable UIGcApprovalTable
        {
            get
            {
                if ((this.mUIGcApprovalTable == null))
                {
                    this.mUIGcApprovalTable = new UIGcApprovalTable(this);
                }
                return this.mUIGcApprovalTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcApprovalTable mUIGcApprovalTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcApprovalTable : DXGrid
    {
        
        public UIGcApprovalTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRow0ColumnreqColLedeComboBox UIRow0ColumnreqColLedeComboBox
        {
            get
            {
                if ((this.mUIRow0ColumnreqColLedeComboBox == null))
                {
                    this.mUIRow0ColumnreqColLedeComboBox = new UIRow0ColumnreqColLedeComboBox(this);
                }
                return this.mUIRow0ColumnreqColLedeComboBox;
            }
        }
        
        public DXCell UISvendsenSvanhildCell
        {
            get
            {
                if ((this.mUISvendsenSvanhildCell == null))
                {
                    this.mUISvendsenSvanhildCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISvendsenSvanhildCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]4[Column]colName";
                    this.mUISvendsenSvanhildCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISvendsenSvanhildCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISvendsenSvanhildCell;
            }
        }
        
        public DXComboBox UIRow7ColumnreqColLedeComboBox
        {
            get
            {
                if ((this.mUIRow7ColumnreqColLedeComboBox == null))
                {
                    this.mUIRow7ColumnreqColLedeComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUIRow7ColumnreqColLedeComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]7[Column]reqColLeder";
                    this.mUIRow7ColumnreqColLedeComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
                    this.mUIRow7ColumnreqColLedeComboBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow7ColumnreqColLedeComboBox;
            }
        }
        
        public DXComboBox UIRow6ColumnreqColLedeComboBox
        {
            get
            {
                if ((this.mUIRow6ColumnreqColLedeComboBox == null))
                {
                    this.mUIRow6ColumnreqColLedeComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUIRow6ColumnreqColLedeComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]6[Column]reqColLeder";
                    this.mUIRow6ColumnreqColLedeComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
                    this.mUIRow6ColumnreqColLedeComboBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow6ColumnreqColLedeComboBox;
            }
        }
        
        public UIRow4ColumnreqColTillComboBox UIRow4ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow4ColumnreqColTillComboBox == null))
                {
                    this.mUIRow4ColumnreqColTillComboBox = new UIRow4ColumnreqColTillComboBox(this);
                }
                return this.mUIRow4ColumnreqColTillComboBox;
            }
        }
        
        public UIRow4ColumnreqColLedeComboBox UIRow4ColumnreqColLedeComboBox
        {
            get
            {
                if ((this.mUIRow4ColumnreqColLedeComboBox == null))
                {
                    this.mUIRow4ColumnreqColLedeComboBox = new UIRow4ColumnreqColLedeComboBox(this);
                }
                return this.mUIRow4ColumnreqColLedeComboBox;
            }
        }
        
        public UIRow3ColumnreqColTillComboBox UIRow3ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow3ColumnreqColTillComboBox == null))
                {
                    this.mUIRow3ColumnreqColTillComboBox = new UIRow3ColumnreqColTillComboBox(this);
                }
                return this.mUIRow3ColumnreqColTillComboBox;
            }
        }
        
        public UIRow3ColumnreqColLedeComboBox UIRow3ColumnreqColLedeComboBox
        {
            get
            {
                if ((this.mUIRow3ColumnreqColLedeComboBox == null))
                {
                    this.mUIRow3ColumnreqColLedeComboBox = new UIRow3ColumnreqColLedeComboBox(this);
                }
                return this.mUIRow3ColumnreqColLedeComboBox;
            }
        }
        
        public UIRow2ColumnreqColTillComboBox UIRow2ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow2ColumnreqColTillComboBox == null))
                {
                    this.mUIRow2ColumnreqColTillComboBox = new UIRow2ColumnreqColTillComboBox(this);
                }
                return this.mUIRow2ColumnreqColTillComboBox;
            }
        }
        
        public UIRow2ColumnreqColLedeComboBox UIRow2ColumnreqColLedeComboBox
        {
            get
            {
                if ((this.mUIRow2ColumnreqColLedeComboBox == null))
                {
                    this.mUIRow2ColumnreqColLedeComboBox = new UIRow2ColumnreqColLedeComboBox(this);
                }
                return this.mUIRow2ColumnreqColLedeComboBox;
            }
        }
        
        public UIRow1ColumnreqColTillComboBox UIRow1ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow1ColumnreqColTillComboBox == null))
                {
                    this.mUIRow1ColumnreqColTillComboBox = new UIRow1ColumnreqColTillComboBox(this);
                }
                return this.mUIRow1ColumnreqColTillComboBox;
            }
        }
        
        public UIRow1ColumnreqColLedeComboBox UIRow1ColumnreqColLedeComboBox
        {
            get
            {
                if ((this.mUIRow1ColumnreqColLedeComboBox == null))
                {
                    this.mUIRow1ColumnreqColLedeComboBox = new UIRow1ColumnreqColLedeComboBox(this);
                }
                return this.mUIRow1ColumnreqColLedeComboBox;
            }
        }
        
        public UIRow0ColumnreqColTillComboBox UIRow0ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow0ColumnreqColTillComboBox == null))
                {
                    this.mUIRow0ColumnreqColTillComboBox = new UIRow0ColumnreqColTillComboBox(this);
                }
                return this.mUIRow0ColumnreqColTillComboBox;
            }
        }
        
        public DXColumnHeader UIReqColLederColumnHeader
        {
            get
            {
                if ((this.mUIReqColLederColumnHeader == null))
                {
                    this.mUIReqColLederColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIReqColLederColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlColumnHeader[View]gvApproval[Column]reqColLeder";
                    this.mUIReqColLederColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIReqColLederColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIReqColLederColumnHeader;
            }
        }
        
        public DXCell UINSFUNSFUorganisertCell
        {
            get
            {
                if ((this.mUINSFUNSFUorganisertCell == null))
                {
                    this.mUINSFUNSFUorganisertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINSFUNSFUorganisertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]2[Column]colUnion";
                    this.mUINSFUNSFUorganisertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINSFUNSFUorganisertCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINSFUNSFUorganisertCell;
            }
        }
        
        public DXCell UINSFNorsksykepleierfoCell1
        {
            get
            {
                if ((this.mUINSFNorsksykepleierfoCell1 == null))
                {
                    this.mUINSFNorsksykepleierfoCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUINSFNorsksykepleierfoCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]4[Column]colUnion";
                    this.mUINSFNorsksykepleierfoCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINSFNorsksykepleierfoCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINSFNorsksykepleierfoCell1;
            }
        }
        
        public DXCell UINSFNorsksykepleierfoCell
        {
            get
            {
                if ((this.mUINSFNorsksykepleierfoCell == null))
                {
                    this.mUINSFNorsksykepleierfoCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINSFNorsksykepleierfoCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]3[Column]colUnion";
                    this.mUINSFNorsksykepleierfoCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINSFNorsksykepleierfoCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINSFNorsksykepleierfoCell;
            }
        }
        
        public DXCell UIMikkelsenMikkelCell
        {
            get
            {
                if ((this.mUIMikkelsenMikkelCell == null))
                {
                    this.mUIMikkelsenMikkelCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMikkelsenMikkelCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]3[Column]colName";
                    this.mUIMikkelsenMikkelCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMikkelsenMikkelCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIMikkelsenMikkelCell;
            }
        }
        
        public DXCell UILassenLiselotteCell
        {
            get
            {
                if ((this.mUILassenLiselotteCell == null))
                {
                    this.mUILassenLiselotteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILassenLiselotteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]2[Column]colName";
                    this.mUILassenLiselotteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILassenLiselotteCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILassenLiselotteCell;
            }
        }
        
        public DXCell UIKFOCell
        {
            get
            {
                if ((this.mUIKFOCell == null))
                {
                    this.mUIKFOCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKFOCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]colUnion";
                    this.mUIKFOCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKFOCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKFOCell;
            }
        }
        
        public DXCell UIKaspersenKasperCell
        {
            get
            {
                if ((this.mUIKaspersenKasperCell == null))
                {
                    this.mUIKaspersenKasperCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKaspersenKasperCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]colName";
                    this.mUIKaspersenKasperCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKaspersenKasperCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKaspersenKasperCell;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]4[Column]reqColKoordinator";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]3[Column]reqColKoordinator";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]2[Column]reqColKoordinator";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]reqColKoordinator";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]2[Column]reqColTillitsvalgt";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColLeder";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColKoordinator";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]5[Column]reqColLeder";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]reqColTillitsvalgt";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColTillitsvalgt";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXCell UIItemCell10
        {
            get
            {
                if ((this.mUIItemCell10 == null))
                {
                    this.mUIItemCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]4[Column]reqColTillitsvalgt";
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell10;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]2[Column]reqColLeder";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]reqColLeder";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIGustavssonRobertCell
        {
            get
            {
                if ((this.mUIGustavssonRobertCell == null))
                {
                    this.mUIGustavssonRobertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]colName";
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGustavssonRobertCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGustavssonRobertCell;
            }
        }
        
        public DXCell UIGodkjennCell3
        {
            get
            {
                if ((this.mUIGodkjennCell3 == null))
                {
                    this.mUIGodkjennCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]3[Column]reqColTillitsvalgt";
                    this.mUIGodkjennCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell3;
            }
        }
        
        public DXCell UIGodkjennCell2
        {
            get
            {
                if ((this.mUIGodkjennCell2 == null))
                {
                    this.mUIGodkjennCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]4[Column]reqColLeder";
                    this.mUIGodkjennCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell2;
            }
        }
        
        public DXCell UIGodkjennCell1
        {
            get
            {
                if ((this.mUIGodkjennCell1 == null))
                {
                    this.mUIGodkjennCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]4[Column]reqColLeder";
                    this.mUIGodkjennCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell1;
            }
        }
        
        public DXCell UIGodkjennCell
        {
            get
            {
                if ((this.mUIGodkjennCell == null))
                {
                    this.mUIGodkjennCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]3[Column]reqColLeder";
                    this.mUIGodkjennCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell;
            }
        }
        
        public DXCell UIFAGFagforbundetCell2
        {
            get
            {
                if ((this.mUIFAGFagforbundetCell2 == null))
                {
                    this.mUIFAGFagforbundetCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFAGFagforbundetCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]5[Column]colUnion";
                    this.mUIFAGFagforbundetCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFAGFagforbundetCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFAGFagforbundetCell2;
            }
        }
        
        public DXCell UIFAGFagforbundetCell1
        {
            get
            {
                if ((this.mUIFAGFagforbundetCell1 == null))
                {
                    this.mUIFAGFagforbundetCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFAGFagforbundetCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]4[Column]colUnion";
                    this.mUIFAGFagforbundetCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFAGFagforbundetCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFAGFagforbundetCell1;
            }
        }
        
        public DXCell UIFAGFagforbundetCell
        {
            get
            {
                if ((this.mUIFAGFagforbundetCell == null))
                {
                    this.mUIFAGFagforbundetCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFAGFagforbundetCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]colUnion";
                    this.mUIFAGFagforbundetCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFAGFagforbundetCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFAGFagforbundetCell;
            }
        }
        
        public DXCell UIAvvisCell1
        {
            get
            {
                if ((this.mUIAvvisCell1 == null))
                {
                    this.mUIAvvisCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIAvvisCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]8[Column]reqColLeder";
                    this.mUIAvvisCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAvvisCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAvvisCell1;
            }
        }
        
        public DXCell UIAvvisCell
        {
            get
            {
                if ((this.mUIAvvisCell == null))
                {
                    this.mUIAvvisCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAvvisCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]6[Column]reqColLeder";
                    this.mUIAvvisCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAvvisCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAvvisCell;
            }
        }
        
        public DXCell UISykepleierdagCell
        {
            get
            {
                if ((this.mUISykepleierdagCell == null))
                {
                    this.mUISykepleierdagCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISykepleierdagCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]4[Column]colPosition";
                    this.mUISykepleierdagCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISykepleierdagCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISykepleierdagCell;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0ColumnreqColLedeComboBox mUIRow0ColumnreqColLedeComboBox;
        
        private DXCell mUISvendsenSvanhildCell;
        
        private DXComboBox mUIRow7ColumnreqColLedeComboBox;
        
        private DXComboBox mUIRow6ColumnreqColLedeComboBox;
        
        private UIRow4ColumnreqColTillComboBox mUIRow4ColumnreqColTillComboBox;
        
        private UIRow4ColumnreqColLedeComboBox mUIRow4ColumnreqColLedeComboBox;
        
        private UIRow3ColumnreqColTillComboBox mUIRow3ColumnreqColTillComboBox;
        
        private UIRow3ColumnreqColLedeComboBox mUIRow3ColumnreqColLedeComboBox;
        
        private UIRow2ColumnreqColTillComboBox mUIRow2ColumnreqColTillComboBox;
        
        private UIRow2ColumnreqColLedeComboBox mUIRow2ColumnreqColLedeComboBox;
        
        private UIRow1ColumnreqColTillComboBox mUIRow1ColumnreqColTillComboBox;
        
        private UIRow1ColumnreqColLedeComboBox mUIRow1ColumnreqColLedeComboBox;
        
        private UIRow0ColumnreqColTillComboBox mUIRow0ColumnreqColTillComboBox;
        
        private DXColumnHeader mUIReqColLederColumnHeader;
        
        private DXCell mUINSFUNSFUorganisertCell;
        
        private DXCell mUINSFNorsksykepleierfoCell1;
        
        private DXCell mUINSFNorsksykepleierfoCell;
        
        private DXCell mUIMikkelsenMikkelCell;
        
        private DXCell mUILassenLiselotteCell;
        
        private DXCell mUIKFOCell;
        
        private DXCell mUIKaspersenKasperCell;
        
        private DXCell mUIItemCell9;
        
        private DXCell mUIItemCell8;
        
        private DXCell mUIItemCell7;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell5;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell3;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItemCell12;
        
        private DXCell mUIItemCell11;
        
        private DXCell mUIItemCell10;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIGustavssonRobertCell;
        
        private DXCell mUIGodkjennCell3;
        
        private DXCell mUIGodkjennCell2;
        
        private DXCell mUIGodkjennCell1;
        
        private DXCell mUIGodkjennCell;
        
        private DXCell mUIFAGFagforbundetCell2;
        
        private DXCell mUIFAGFagforbundetCell1;
        
        private DXCell mUIFAGFagforbundetCell;
        
        private DXCell mUIAvvisCell1;
        
        private DXCell mUIAvvisCell;
        
        private DXCell mUISykepleierdagCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow0ColumnreqColLedeComboBox : DXComboBox
    {
        
        public UIRow0ColumnreqColLedeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLeder";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLederPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList : DXListBox
    {
        
        public UIPopupImageComboBoxEdList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLederPopupFormPopu" +
                "pImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLederPopupFormPopu" +
                        "pImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        
        public DXListBoxItem UIAvvisListItem
        {
            get
            {
                if ((this.mUIAvvisListItem == null))
                {
                    this.mUIAvvisListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIAvvisListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLederPopupFormPopu" +
                        "pImageComboBoxEditListBox[0]Item[2]";
                    this.mUIAvvisListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIAvvisListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAvvisListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        
        private DXListBoxItem mUIAvvisListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow4ColumnreqColTillComboBox : DXComboBox
    {
        
        public UIRow4ColumnreqColTillComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]4[Column]reqColTillitsvalgt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow1 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow1(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow1 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow1 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]4[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList1 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList1(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList1 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList1 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]4[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]4[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow4ColumnreqColLedeComboBox : DXComboBox
    {
        
        public UIRow4ColumnreqColLedeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]4[Column]reqColLeder";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow2 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow2(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow2 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow2 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]4[Column]reqColLederPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList2 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList2(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList2 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList2 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]4[Column]reqColLederPopupFormPopu" +
                "pImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]4[Column]reqColLederPopupFormPopu" +
                        "pImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow3ColumnreqColTillComboBox : DXComboBox
    {
        
        public UIRow3ColumnreqColTillComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]3[Column]reqColTillitsvalgt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow3 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow3(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow3 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow3 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]3[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList3 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList3(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList3 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList3 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]3[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]3[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        
        public DXListBoxItem UIPopupImageComboBoxEdListItem
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdListItem == null))
                {
                    this.mUIPopupImageComboBoxEdListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIPopupImageComboBoxEdListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]3[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[0]";
                    this.mUIPopupImageComboBoxEdListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIPopupImageComboBoxEdListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIPopupImageComboBoxEdListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        
        private DXListBoxItem mUIPopupImageComboBoxEdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow3ColumnreqColLedeComboBox : DXComboBox
    {
        
        public UIRow3ColumnreqColLedeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]3[Column]reqColLeder";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow4 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow4(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow4 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow4 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]3[Column]reqColLederPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList4 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList4(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList4 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList4 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]3[Column]reqColLederPopupFormPopu" +
                "pImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]3[Column]reqColLederPopupFormPopu" +
                        "pImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow2ColumnreqColTillComboBox : DXComboBox
    {
        
        public UIRow2ColumnreqColTillComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow5 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow5(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow5 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow5 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList5 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList5(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList5 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList5 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow2ColumnreqColLedeComboBox : DXComboBox
    {
        
        public UIRow2ColumnreqColLedeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColLeder";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow6 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow6(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow6 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow6 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColLederPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList6 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList6(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList6 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList6 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColLederPopupFormPopu" +
                "pImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColLederPopupFormPopu" +
                        "pImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow1ColumnreqColTillComboBox : DXComboBox
    {
        
        public UIRow1ColumnreqColTillComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow7 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow7(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow7 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow7 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList7 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList7(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList7 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList7 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        
        public DXListBoxItem UIPopupImageComboBoxEdListItem
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdListItem == null))
                {
                    this.mUIPopupImageComboBoxEdListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIPopupImageComboBoxEdListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[0]";
                    this.mUIPopupImageComboBoxEdListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIPopupImageComboBoxEdListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIPopupImageComboBoxEdListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        
        private DXListBoxItem mUIPopupImageComboBoxEdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow1ColumnreqColLedeComboBox : DXComboBox
    {
        
        public UIRow1ColumnreqColLedeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColLeder";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow8 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow8(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow8 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow8 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColLederPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList8 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList8(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList8 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList8 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColLederPopupFormPopu" +
                "pImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColLederPopupFormPopu" +
                        "pImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow0ColumnreqColTillComboBox : DXComboBox
    {
        
        public UIRow0ColumnreqColTillComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow9 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow9(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow9 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow9 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList9 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList9(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList9 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList9 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        
        public DXListBoxItem UIPopupImageComboBoxEdListItem
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdListItem == null))
                {
                    this.mUIPopupImageComboBoxEdListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIPopupImageComboBoxEdListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[0]";
                    this.mUIPopupImageComboBoxEdListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIPopupImageComboBoxEdListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIPopupImageComboBoxEdListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        
        private DXListBoxItem mUIPopupImageComboBoxEdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEndrekravButton : DXButton
    {
        
        public UIEndrekravButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "btnChangeRequirements";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIVelgalleButton
        {
            get
            {
                if ((this.mUIVelgalleButton == null))
                {
                    this.mUIVelgalleButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIVelgalleButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSelectAll";
                    this.mUIVelgalleButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIVelgalleButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIVelgalleButton.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIVelgalleButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIVelgalleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient1 : DXTestControl
    {
        
        public UIViewTabPageClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[4]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIApprovalViewCustom1 UIApprovalViewCustom
        {
            get
            {
                if ((this.mUIApprovalViewCustom == null))
                {
                    this.mUIApprovalViewCustom = new UIApprovalViewCustom1(this);
                }
                return this.mUIApprovalViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIApprovalViewCustom1 mUIApprovalViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIApprovalViewCustom1 : DXTestControl
    {
        
        public UIApprovalViewCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ApprovalView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ApprovalView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcMainCustom1 UILcMainCustom
        {
            get
            {
                if ((this.mUILcMainCustom == null))
                {
                    this.mUILcMainCustom = new UILcMainCustom1(this);
                }
                return this.mUILcMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainCustom1 mUILcMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainCustom1 : DXTestControl
    {
        
        public UILcMainCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroup1LayoutGroup1 UILayoutControlGroup1LayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroup1LayoutGroup == null))
                {
                    this.mUILayoutControlGroup1LayoutGroup = new UILayoutControlGroup1LayoutGroup1(this);
                }
                return this.mUILayoutControlGroup1LayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroup1LayoutGroup1 mUILayoutControlGroup1LayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlGroup1LayoutGroup1 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroup1LayoutGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroup1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlItem2LayoutControlItem1 UILayoutControlItem2LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem2LayoutControlItem == null))
                {
                    this.mUILayoutControlItem2LayoutControlItem = new UILayoutControlItem2LayoutControlItem1(this);
                }
                return this.mUILayoutControlItem2LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlItem2LayoutControlItem1 mUILayoutControlItem2LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlItem2LayoutControlItem1 : DXBaseLayoutItem
    {
        
        public UILayoutControlItem2LayoutControlItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcApprovalTable1 UIGcApprovalTable
        {
            get
            {
                if ((this.mUIGcApprovalTable == null))
                {
                    this.mUIGcApprovalTable = new UIGcApprovalTable1(this);
                }
                return this.mUIGcApprovalTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcApprovalTable1 mUIGcApprovalTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcApprovalTable1 : DXGrid
    {
        
        public UIGcApprovalTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRow0ColumnreqColTillComboBox1 UIRow0ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow0ColumnreqColTillComboBox == null))
                {
                    this.mUIRow0ColumnreqColTillComboBox = new UIRow0ColumnreqColTillComboBox1(this);
                }
                return this.mUIRow0ColumnreqColTillComboBox;
            }
        }
        
        public UIRow1ColumnreqColTillComboBox1 UIRow1ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow1ColumnreqColTillComboBox == null))
                {
                    this.mUIRow1ColumnreqColTillComboBox = new UIRow1ColumnreqColTillComboBox1(this);
                }
                return this.mUIRow1ColumnreqColTillComboBox;
            }
        }
        
        public UIRow2ColumnreqColTillComboBox1 UIRow2ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow2ColumnreqColTillComboBox == null))
                {
                    this.mUIRow2ColumnreqColTillComboBox = new UIRow2ColumnreqColTillComboBox1(this);
                }
                return this.mUIRow2ColumnreqColTillComboBox;
            }
        }
        
        public DXCell UINSFUNSFUorganisertCell
        {
            get
            {
                if ((this.mUINSFUNSFUorganisertCell == null))
                {
                    this.mUINSFUNSFUorganisertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINSFUNSFUorganisertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]colUnion";
                    this.mUINSFUNSFUorganisertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINSFUNSFUorganisertCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINSFUNSFUorganisertCell;
            }
        }
        
        public DXCell UIGodkjennCell
        {
            get
            {
                if ((this.mUIGodkjennCell == null))
                {
                    this.mUIGodkjennCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]reqColTillitsvalgt";
                    this.mUIGodkjennCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColTillitsvalgt";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIGustavssonRobertCell
        {
            get
            {
                if ((this.mUIGustavssonRobertCell == null))
                {
                    this.mUIGustavssonRobertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]colName";
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGustavssonRobertCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGustavssonRobertCell;
            }
        }
        
        public DXCell UIGodkjennCell1
        {
            get
            {
                if ((this.mUIGodkjennCell1 == null))
                {
                    this.mUIGodkjennCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]2[Column]reqColTillitsvalgt";
                    this.mUIGodkjennCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell1;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0ColumnreqColTillComboBox1 mUIRow0ColumnreqColTillComboBox;
        
        private UIRow1ColumnreqColTillComboBox1 mUIRow1ColumnreqColTillComboBox;
        
        private UIRow2ColumnreqColTillComboBox1 mUIRow2ColumnreqColTillComboBox;
        
        private DXCell mUINSFUNSFUorganisertCell;
        
        private DXCell mUIGodkjennCell;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIGustavssonRobertCell;
        
        private DXCell mUIGodkjennCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow0ColumnreqColTillComboBox1 : DXComboBox
    {
        
        public UIRow0ColumnreqColTillComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow10 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow10(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow10 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow10 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList10 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList10(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList10 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList10 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        
        public DXListBoxItem UIPopupImageComboBoxEdListItem
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdListItem == null))
                {
                    this.mUIPopupImageComboBoxEdListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIPopupImageComboBoxEdListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[0]";
                    this.mUIPopupImageComboBoxEdListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIPopupImageComboBoxEdListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIPopupImageComboBoxEdListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        
        private DXListBoxItem mUIPopupImageComboBoxEdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow1ColumnreqColTillComboBox1 : DXComboBox
    {
        
        public UIRow1ColumnreqColTillComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow11 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow11(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        
        public UIPopupImageComboBoxEdWindow12 UIPopupImageComboBoxEdWindow1
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow1 == null))
                {
                    this.mUIPopupImageComboBoxEdWindow1 = new UIPopupImageComboBoxEdWindow12(this);
                }
                return this.mUIPopupImageComboBoxEdWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow11 mUIPopupImageComboBoxEdWindow;
        
        private UIPopupImageComboBoxEdWindow12 mUIPopupImageComboBoxEdWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow11 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList11 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList11(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList11 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList11 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow12 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList12 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList12(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList12 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList12 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow2ColumnreqColTillComboBox1 : DXComboBox
    {
        
        public UIRow2ColumnreqColTillComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow13 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow13(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow13 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow13 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList13 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList13(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList13 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList13 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIPopupImageComboBoxEdListItem
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdListItem == null))
                {
                    this.mUIPopupImageComboBoxEdListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIPopupImageComboBoxEdListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[0]";
                    this.mUIPopupImageComboBoxEdListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIPopupImageComboBoxEdListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIPopupImageComboBoxEdListItem;
            }
        }
        
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIPopupImageComboBoxEdListItem;
        
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient2 : DXTestControl
    {
        
        public UIViewTabPageClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[5]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIApprovalViewCustom2 UIApprovalViewCustom
        {
            get
            {
                if ((this.mUIApprovalViewCustom == null))
                {
                    this.mUIApprovalViewCustom = new UIApprovalViewCustom2(this);
                }
                return this.mUIApprovalViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIApprovalViewCustom2 mUIApprovalViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIApprovalViewCustom2 : DXTestControl
    {
        
        public UIApprovalViewCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ApprovalView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ApprovalView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcMainCustom2 UILcMainCustom
        {
            get
            {
                if ((this.mUILcMainCustom == null))
                {
                    this.mUILcMainCustom = new UILcMainCustom2(this);
                }
                return this.mUILcMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainCustom2 mUILcMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainCustom2 : DXTestControl
    {
        
        public UILcMainCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroup1LayoutGroup2 UILayoutControlGroup1LayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroup1LayoutGroup == null))
                {
                    this.mUILayoutControlGroup1LayoutGroup = new UILayoutControlGroup1LayoutGroup2(this);
                }
                return this.mUILayoutControlGroup1LayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroup1LayoutGroup2 mUILayoutControlGroup1LayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlGroup1LayoutGroup2 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroup1LayoutGroup2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroup1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlItem2LayoutControlItem2 UILayoutControlItem2LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem2LayoutControlItem == null))
                {
                    this.mUILayoutControlItem2LayoutControlItem = new UILayoutControlItem2LayoutControlItem2(this);
                }
                return this.mUILayoutControlItem2LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlItem2LayoutControlItem2 mUILayoutControlItem2LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlItem2LayoutControlItem2 : DXBaseLayoutItem
    {
        
        public UILayoutControlItem2LayoutControlItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcApprovalTable2 UIGcApprovalTable
        {
            get
            {
                if ((this.mUIGcApprovalTable == null))
                {
                    this.mUIGcApprovalTable = new UIGcApprovalTable2(this);
                }
                return this.mUIGcApprovalTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcApprovalTable2 mUIGcApprovalTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcApprovalTable2 : DXGrid
    {
        
        public UIGcApprovalTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIGodkjennCell
        {
            get
            {
                if ((this.mUIGodkjennCell == null))
                {
                    this.mUIGodkjennCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColKoordinator";
                    this.mUIGodkjennCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell;
            }
        }
        
        public DXCell UIGodkjennCell1
        {
            get
            {
                if ((this.mUIGodkjennCell1 == null))
                {
                    this.mUIGodkjennCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]reqColKoordinator";
                    this.mUIGodkjennCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell1;
            }
        }
        
        public DXCell UIGodkjennCell2
        {
            get
            {
                if ((this.mUIGodkjennCell2 == null))
                {
                    this.mUIGodkjennCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]2[Column]reqColKoordinator";
                    this.mUIGodkjennCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell2;
            }
        }
        
        public DXCell UIGodkjennCell3
        {
            get
            {
                if ((this.mUIGodkjennCell3 == null))
                {
                    this.mUIGodkjennCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]3[Column]reqColKoordinator";
                    this.mUIGodkjennCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell3;
            }
        }
        
        public DXCell UIGodkjennCell4
        {
            get
            {
                if ((this.mUIGodkjennCell4 == null))
                {
                    this.mUIGodkjennCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]4[Column]reqColKoordinator";
                    this.mUIGodkjennCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell4;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIGodkjennCell;
        
        private DXCell mUIGodkjennCell1;
        
        private DXCell mUIGodkjennCell2;
        
        private DXCell mUIGodkjennCell3;
        
        private DXCell mUIGodkjennCell4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient3 : DXTestControl
    {
        
        public UIViewTabPageClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[2]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentViewCustom UIFixedPaymentViewCustom
        {
            get
            {
                if ((this.mUIFixedPaymentViewCustom == null))
                {
                    this.mUIFixedPaymentViewCustom = new UIFixedPaymentViewCustom(this);
                }
                return this.mUIFixedPaymentViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentViewCustom mUIFixedPaymentViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFixedPaymentViewCustom : DXTestControl
    {
        
        public UIFixedPaymentViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom2 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom2(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom2 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFixedPaymentControlCustom2 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom1 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom1(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom1 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHost1Custom1 : DXTestControl
    {
        
        public UIViewHost1Custom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient2 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient2(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient2 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient2 : DXTestControl
    {
        
        public UIPcViewClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom3 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom3(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom3 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFixedPaymentControlCustom3 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid1 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid1(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid1 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPgcCalculationResultPivotGrid1 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem75PivotGridCell
        {
            get
            {
                if ((this.mUIItem75PivotGridCell == null))
                {
                    this.mUIItem75PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]0";
                    this.mUIItem75PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell
        {
            get
            {
                if ((this.mUIItem5PivotGridCell == null))
                {
                    this.mUIItem5PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem5PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell1
        {
            get
            {
                if ((this.mUIItem75PivotGridCell1 == null))
                {
                    this.mUIItem75PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]1";
                    this.mUIItem75PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell1
        {
            get
            {
                if ((this.mUIItem5PivotGridCell1 == null))
                {
                    this.mUIItem5PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem5PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell2
        {
            get
            {
                if ((this.mUIItem75PivotGridCell2 == null))
                {
                    this.mUIItem75PivotGridCell2 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]2";
                    this.mUIItem75PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell2;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell2
        {
            get
            {
                if ((this.mUIItem5PivotGridCell2 == null))
                {
                    this.mUIItem5PivotGridCell2 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]2";
                    this.mUIItem5PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell2;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell3
        {
            get
            {
                if ((this.mUIItem75PivotGridCell3 == null))
                {
                    this.mUIItem75PivotGridCell3 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]3";
                    this.mUIItem75PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell3;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell3
        {
            get
            {
                if ((this.mUIItem5PivotGridCell3 == null))
                {
                    this.mUIItem5PivotGridCell3 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]3";
                    this.mUIItem5PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell3;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell4
        {
            get
            {
                if ((this.mUIItem75PivotGridCell4 == null))
                {
                    this.mUIItem75PivotGridCell4 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]4";
                    this.mUIItem75PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell4;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell4
        {
            get
            {
                if ((this.mUIItem5PivotGridCell4 == null))
                {
                    this.mUIItem5PivotGridCell4 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]4";
                    this.mUIItem5PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell4;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell5
        {
            get
            {
                if ((this.mUIItem75PivotGridCell5 == null))
                {
                    this.mUIItem75PivotGridCell5 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]5";
                    this.mUIItem75PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell5;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell5
        {
            get
            {
                if ((this.mUIItem5PivotGridCell5 == null))
                {
                    this.mUIItem5PivotGridCell5 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]5";
                    this.mUIItem5PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell5;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell6
        {
            get
            {
                if ((this.mUIItem75PivotGridCell6 == null))
                {
                    this.mUIItem75PivotGridCell6 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]6";
                    this.mUIItem75PivotGridCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell6;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell6
        {
            get
            {
                if ((this.mUIItem5PivotGridCell6 == null))
                {
                    this.mUIItem5PivotGridCell6 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]6";
                    this.mUIItem5PivotGridCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell6;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell7
        {
            get
            {
                if ((this.mUIItem75PivotGridCell7 == null))
                {
                    this.mUIItem75PivotGridCell7 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]7";
                    this.mUIItem75PivotGridCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell7;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell7
        {
            get
            {
                if ((this.mUIItem5PivotGridCell7 == null))
                {
                    this.mUIItem5PivotGridCell7 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]7";
                    this.mUIItem5PivotGridCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell7;
            }
        }
        
        public DXPivotGridCell UIItem75PivotGridCell8
        {
            get
            {
                if ((this.mUIItem75PivotGridCell8 == null))
                {
                    this.mUIItem75PivotGridCell8 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem75PivotGridCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]8";
                    this.mUIItem75PivotGridCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem75PivotGridCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75PivotGridCell8;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell8
        {
            get
            {
                if ((this.mUIItem5PivotGridCell8 == null))
                {
                    this.mUIItem5PivotGridCell8 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]8";
                    this.mUIItem5PivotGridCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem5PivotGridCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5PivotGridCell8;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem75PivotGridCell;
        
        private DXPivotGridCell mUIItem5PivotGridCell;
        
        private DXPivotGridCell mUIItem75PivotGridCell1;
        
        private DXPivotGridCell mUIItem5PivotGridCell1;
        
        private DXPivotGridCell mUIItem75PivotGridCell2;
        
        private DXPivotGridCell mUIItem5PivotGridCell2;
        
        private DXPivotGridCell mUIItem75PivotGridCell3;
        
        private DXPivotGridCell mUIItem5PivotGridCell3;
        
        private DXPivotGridCell mUIItem75PivotGridCell4;
        
        private DXPivotGridCell mUIItem5PivotGridCell4;
        
        private DXPivotGridCell mUIItem75PivotGridCell5;
        
        private DXPivotGridCell mUIItem5PivotGridCell5;
        
        private DXPivotGridCell mUIItem75PivotGridCell6;
        
        private DXPivotGridCell mUIItem5PivotGridCell6;
        
        private DXPivotGridCell mUIItem75PivotGridCell7;
        
        private DXPivotGridCell mUIItem5PivotGridCell7;
        
        private DXPivotGridCell mUIItem75PivotGridCell8;
        
        private DXPivotGridCell mUIItem5PivotGridCell8;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRcMenuRibbon : DXRibbon
    {
        
        public UIRcMenuRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpPlanRibbonPage UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpPlanRibbonPage mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpPlanRibbonPage : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGrpEffectuateRibbonPageGroup UIGrpEffectuateRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpEffectuateRibbonPageGroup == null))
                {
                    this.mUIGrpEffectuateRibbonPageGroup = new UIGrpEffectuateRibbonPageGroup(this);
                }
                return this.mUIGrpEffectuateRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpEffectuateRibbonPageGroup mUIGrpEffectuateRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpEffectuateRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpEffectuateRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpEffectuate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonItem UISlettiverksettingRibbonItem
        {
            get
            {
                if ((this.mUISlettiverksettingRibbonItem == null))
                {
                    this.mUISlettiverksettingRibbonItem = new DXRibbonItem(this);
                    #region Search Criteria
                    this.mUISlettiverksettingRibbonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "mnuDeleteEff";
                    this.mUISlettiverksettingRibbonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonItem";
                    this.mUISlettiverksettingRibbonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISlettiverksettingRibbonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonItem mUISlettiverksettingRibbonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlVisualizationDockPanel1 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom1 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom1(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom1 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel3_ContainerCustom1 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList1 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList1(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList1 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcVisualizationTabList1 : DXTestControl
    {
        
        public UITcVisualizationTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITpApprovalClient1 UITpApprovalClient
        {
            get
            {
                if ((this.mUITpApprovalClient == null))
                {
                    this.mUITpApprovalClient = new UITpApprovalClient1(this);
                }
                return this.mUITpApprovalClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpApprovalClient1 mUITpApprovalClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpApprovalClient1 : DXTestControl
    {
        
        public UITpApprovalClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcMainCustom3 UILcMainCustom
        {
            get
            {
                if ((this.mUILcMainCustom == null))
                {
                    this.mUILcMainCustom = new UILcMainCustom3(this);
                }
                return this.mUILcMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainCustom3 mUILcMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainCustom3 : DXTestControl
    {
        
        public UILcMainCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroup1LayoutGroup3 UILayoutControlGroup1LayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroup1LayoutGroup == null))
                {
                    this.mUILayoutControlGroup1LayoutGroup = new UILayoutControlGroup1LayoutGroup3(this);
                }
                return this.mUILayoutControlGroup1LayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroup1LayoutGroup3 mUILayoutControlGroup1LayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlGroup1LayoutGroup3 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroup1LayoutGroup3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroup1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlItem2LayoutControlItem3 UILayoutControlItem2LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem2LayoutControlItem == null))
                {
                    this.mUILayoutControlItem2LayoutControlItem = new UILayoutControlItem2LayoutControlItem3(this);
                }
                return this.mUILayoutControlItem2LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlItem2LayoutControlItem3 mUILayoutControlItem2LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlItem2LayoutControlItem3 : DXBaseLayoutItem
    {
        
        public UILayoutControlItem2LayoutControlItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXGrid UIGcApprovalTable
        {
            get
            {
                if ((this.mUIGcApprovalTable == null))
                {
                    this.mUIGcApprovalTable = new DXGrid(this);
                    #region Search Criteria
                    this.mUIGcApprovalTable.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApproval";
                    this.mUIGcApprovalTable.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
                    this.mUIGcApprovalTable.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGcApprovalTable;
            }
        }
        #endregion
        
        #region Fields
        private DXGrid mUIGcApprovalTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient1 : DXTestControl
    {
        
        public UIPnlRosterPlanClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable2 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable2(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable2 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable2 : DXGrid
    {
        
        public UIGcRosterPlanTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_9";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit == null))
                {
                    this.mUIRow0ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_9";
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit == null))
                {
                    this.mUIRow1ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_9";
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit == null))
                {
                    this.mUIRow2ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_9";
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit == null))
                {
                    this.mUIRow3ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_9";
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit == null))
                {
                    this.mUIRow4ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_9";
                    this.mUIRow4ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIACell;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient2 : DXTestControl
    {
        
        public UIPnlRosterPlanClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanGrid1Custom1 UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom1(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanGrid1Custom1 mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom1 : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable3 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable3(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable3 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable3 : DXGrid
    {
        
        public UIGcRosterPlanTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIGustavssonRobertCell
        {
            get
            {
                if ((this.mUIGustavssonRobertCell == null))
                {
                    this.mUIGustavssonRobertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle1";
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGustavssonRobertCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGustavssonRobertCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIGustavssonRobertCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT4003InformasjonWindow : DXWindow
    {
        
        public UIGT4003InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4003 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4003 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4003 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRegistreringsstatusWindow : DXWindow
    {
        
        public UIRegistreringsstatusWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Registreringsstatus";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILcMessagesCustom UILcMessagesCustom
        {
            get
            {
                if ((this.mUILcMessagesCustom == null))
                {
                    this.mUILcMessagesCustom = new UILcMessagesCustom(this);
                }
                return this.mUILcMessagesCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMessagesCustom mUILcMessagesCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMessagesCustom : DXTestControl
    {
        
        public UILcMessagesCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILcgMessagesLayoutGroup UILcgMessagesLayoutGroup
        {
            get
            {
                if ((this.mUILcgMessagesLayoutGroup == null))
                {
                    this.mUILcgMessagesLayoutGroup = new UILcgMessagesLayoutGroup(this);
                }
                return this.mUILcgMessagesLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILcgMessagesLayoutGroup mUILcgMessagesLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcgMessagesLayoutGroup : DXBaseLayoutItem
    {
        
        public UILcgMessagesLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcgMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILciMessagesLayoutControlItem UILciMessagesLayoutControlItem
        {
            get
            {
                if ((this.mUILciMessagesLayoutControlItem == null))
                {
                    this.mUILciMessagesLayoutControlItem = new UILciMessagesLayoutControlItem(this);
                }
                return this.mUILciMessagesLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILciMessagesLayoutControlItem mUILciMessagesLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILciMessagesLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILciMessagesLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UIGMessagesTable UIGMessagesTable
        {
            get
            {
                if ((this.mUIGMessagesTable == null))
                {
                    this.mUIGMessagesTable = new UIGMessagesTable(this);
                }
                return this.mUIGMessagesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGMessagesTable mUIGMessagesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGMessagesTable : DXGrid
    {
        
        public UIGMessagesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public DXCell UILinje71PirqetePetronCell
        {
            get
            {
                if ((this.mUILinje71PirqetePetronCell == null))
                {
                    this.mUILinje71PirqetePetronCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILinje71PirqetePetronCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]0[Column]gvMessagesColumn_Text";
                    this.mUILinje71PirqetePetronCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinje71PirqetePetronCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinje71PirqetePetronCell;
            }
        }
        
        public DXCell UILinjenerikkegodkjentCell
        {
            get
            {
                if ((this.mUILinjenerikkegodkjentCell == null))
                {
                    this.mUILinjenerikkegodkjentCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILinjenerikkegodkjentCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]0[Column]gvMessagesColumn_Info";
                    this.mUILinjenerikkegodkjentCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinjenerikkegodkjentCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinjenerikkegodkjentCell;
            }
        }
        
        public DXCell UILinjenerikkegodkjentCell1
        {
            get
            {
                if ((this.mUILinjenerikkegodkjentCell1 == null))
                {
                    this.mUILinjenerikkegodkjentCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUILinjenerikkegodkjentCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]1[Column]gvMessagesColumn_Info";
                    this.mUILinjenerikkegodkjentCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinjenerikkegodkjentCell1.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinjenerikkegodkjentCell1;
            }
        }
        
        public DXCell UILinjenerikkegodkjentCell2
        {
            get
            {
                if ((this.mUILinjenerikkegodkjentCell2 == null))
                {
                    this.mUILinjenerikkegodkjentCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUILinjenerikkegodkjentCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]2[Column]gvMessagesColumn_Info";
                    this.mUILinjenerikkegodkjentCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinjenerikkegodkjentCell2.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinjenerikkegodkjentCell2;
            }
        }
        
        public DXCell UILinjenerikkegodkjentCell3
        {
            get
            {
                if ((this.mUILinjenerikkegodkjentCell3 == null))
                {
                    this.mUILinjenerikkegodkjentCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUILinjenerikkegodkjentCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]3[Column]gvMessagesColumn_Info";
                    this.mUILinjenerikkegodkjentCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinjenerikkegodkjentCell3.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinjenerikkegodkjentCell3;
            }
        }
        
        public DXCell UILinjenerikkegodkjentCell4
        {
            get
            {
                if ((this.mUILinjenerikkegodkjentCell4 == null))
                {
                    this.mUILinjenerikkegodkjentCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUILinjenerikkegodkjentCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]4[Column]gvMessagesColumn_Info";
                    this.mUILinjenerikkegodkjentCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinjenerikkegodkjentCell4.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinjenerikkegodkjentCell4;
            }
        }
        
        public DXCell UILinjenerikkegodkjentCell5
        {
            get
            {
                if ((this.mUILinjenerikkegodkjentCell5 == null))
                {
                    this.mUILinjenerikkegodkjentCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUILinjenerikkegodkjentCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]5[Column]gvMessagesColumn_Info";
                    this.mUILinjenerikkegodkjentCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinjenerikkegodkjentCell5.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinjenerikkegodkjentCell5;
            }
        }
        
        public DXCell UILinjenerikkegodkjentCell6
        {
            get
            {
                if ((this.mUILinjenerikkegodkjentCell6 == null))
                {
                    this.mUILinjenerikkegodkjentCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUILinjenerikkegodkjentCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]6[Column]gvMessagesColumn_Info";
                    this.mUILinjenerikkegodkjentCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinjenerikkegodkjentCell6.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinjenerikkegodkjentCell6;
            }
        }
        
        public DXCell UILinjenerikkegodkjentCell7
        {
            get
            {
                if ((this.mUILinjenerikkegodkjentCell7 == null))
                {
                    this.mUILinjenerikkegodkjentCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUILinjenerikkegodkjentCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]7[Column]gvMessagesColumn_Info";
                    this.mUILinjenerikkegodkjentCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinjenerikkegodkjentCell7.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinjenerikkegodkjentCell7;
            }
        }
        
        public DXCell UILinje31GustavssonRobCell
        {
            get
            {
                if ((this.mUILinje31GustavssonRobCell == null))
                {
                    this.mUILinje31GustavssonRobCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILinje31GustavssonRobCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]8[Column]gvMessagesColumn_Text";
                    this.mUILinje31GustavssonRobCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinje31GustavssonRobCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinje31GustavssonRobCell;
            }
        }
        
        public DXCell UILinjenerikkegodkjentCell8
        {
            get
            {
                if ((this.mUILinjenerikkegodkjentCell8 == null))
                {
                    this.mUILinjenerikkegodkjentCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUILinjenerikkegodkjentCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]8[Column]gvMessagesColumn_Info";
                    this.mUILinjenerikkegodkjentCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinjenerikkegodkjentCell8.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinjenerikkegodkjentCell8;
            }
        }
        
        public DXCell UILinje51SvendsenSvanhCell
        {
            get
            {
                if ((this.mUILinje51SvendsenSvanhCell == null))
                {
                    this.mUILinje51SvendsenSvanhCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILinje51SvendsenSvanhCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]1[Column]gvMessagesColumn_Text";
                    this.mUILinje51SvendsenSvanhCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinje51SvendsenSvanhCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinje51SvendsenSvanhCell;
            }
        }
        
        public DXCell UILinje31LassenLiselotCell
        {
            get
            {
                if ((this.mUILinje31LassenLiselotCell == null))
                {
                    this.mUILinje31LassenLiselotCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILinje31LassenLiselotCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]2[Column]gvMessagesColumn_Text";
                    this.mUILinje31LassenLiselotCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinje31LassenLiselotCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinje31LassenLiselotCell;
            }
        }
        
        public DXCell UILinje11GustavssonRobCell
        {
            get
            {
                if ((this.mUILinje11GustavssonRobCell == null))
                {
                    this.mUILinje11GustavssonRobCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILinje11GustavssonRobCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]3[Column]gvMessagesColumn_Text";
                    this.mUILinje11GustavssonRobCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinje11GustavssonRobCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinje11GustavssonRobCell;
            }
        }
        
        public DXCell UILinje21KaspersenKaspCell
        {
            get
            {
                if ((this.mUILinje21KaspersenKaspCell == null))
                {
                    this.mUILinje21KaspersenKaspCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILinje21KaspersenKaspCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]4[Column]gvMessagesColumn_Text";
                    this.mUILinje21KaspersenKaspCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILinje21KaspersenKaspCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUILinje21KaspersenKaspCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUILinje71PirqetePetronCell;
        
        private DXCell mUILinjenerikkegodkjentCell;
        
        private DXCell mUILinjenerikkegodkjentCell1;
        
        private DXCell mUILinjenerikkegodkjentCell2;
        
        private DXCell mUILinjenerikkegodkjentCell3;
        
        private DXCell mUILinjenerikkegodkjentCell4;
        
        private DXCell mUILinjenerikkegodkjentCell5;
        
        private DXCell mUILinjenerikkegodkjentCell6;
        
        private DXCell mUILinjenerikkegodkjentCell7;
        
        private DXCell mUILinje31GustavssonRobCell;
        
        private DXCell mUILinjenerikkegodkjentCell8;
        
        private DXCell mUILinje51SvendsenSvanhCell;
        
        private DXCell mUILinje31LassenLiselotCell;
        
        private DXCell mUILinje11GustavssonRobCell;
        
        private DXCell mUILinje21KaspersenKaspCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISkrivenkommentartilaWindow : DXWindow
    {
        
        public UISkrivenkommentartilaWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Skriv en kommentar til avvisningen...";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Skriv en kommentar til avvisningen...");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIMeCommentEdit
        {
            get
            {
                if ((this.mUIMeCommentEdit == null))
                {
                    this.mUIMeCommentEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIMeCommentEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "meComment";
                    this.mUIMeCommentEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSMemoEdit";
                    this.mUIMeCommentEdit.WindowTitles.Add("Skriv en kommentar til avvisningen...");
                    #endregion
                }
                return this.mUIMeCommentEdit;
            }
        }
        
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "_btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Skriv en kommentar til avvisningen...");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public DXTextEdit UIMeCommentEdit1
        {
            get
            {
                if ((this.mUIMeCommentEdit1 == null))
                {
                    this.mUIMeCommentEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIMeCommentEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "meComment";
                    this.mUIMeCommentEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSMemoEdit";
                    this.mUIMeCommentEdit1.WindowTitles.Add("Skriv en kommentar til avvisningen...");
                    #endregion
                }
                return this.mUIMeCommentEdit1;
            }
        }
        
        public DXButton UIOKButton1
        {
            get
            {
                if ((this.mUIOKButton1 == null))
                {
                    this.mUIOKButton1 = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton1.SearchProperties[DXTestControl.PropertyNames.Name] = "_btnOk";
                    this.mUIOKButton1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton1.WindowTitles.Add("Skriv en kommentar til avvisningen...");
                    #endregion
                }
                return this.mUIOKButton1;
            }
        }
        
        public DXButton UIAvbrytButton
        {
            get
            {
                if ((this.mUIAvbrytButton == null))
                {
                    this.mUIAvbrytButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.Name] = "_btnCancel";
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIAvbrytButton.WindowTitles.Add("Skriv en kommentar til avvisningen...");
                    #endregion
                }
                return this.mUIAvbrytButton;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIMeCommentEdit;
        
        private DXButton mUIOKButton;
        
        private DXTextEdit mUIMeCommentEdit1;
        
        private DXButton mUIOKButton1;
        
        private DXButton mUIAvbrytButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsattinnstillingerfWindow : DXWindow
    {
        
        public UIAnsattinnstillingerfWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansattinnstillinger for ansattlinje 2";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public UIPaMainContentClient UIPaMainContentClient
        {
            get
            {
                if ((this.mUIPaMainContentClient == null))
                {
                    this.mUIPaMainContentClient = new UIPaMainContentClient(this);
                }
                return this.mUIPaMainContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaMainContentClient mUIPaMainContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaMainContentClient : DXTestControl
    {
        
        public UIPaMainContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paMainContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public UIGsTabControl1TabList UIGsTabControl1TabList
        {
            get
            {
                if ((this.mUIGsTabControl1TabList == null))
                {
                    this.mUIGsTabControl1TabList = new UIGsTabControl1TabList(this);
                }
                return this.mUIGsTabControl1TabList;
            }
        }
        #endregion
        
        #region Fields
        private UIGsTabControl1TabList mUIGsTabControl1TabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsTabControl1TabList : DXTestControl
    {
        
        public UIGsTabControl1TabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsTabControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public UITabRosterSetupClient UITabRosterSetupClient
        {
            get
            {
                if ((this.mUITabRosterSetupClient == null))
                {
                    this.mUITabRosterSetupClient = new UITabRosterSetupClient(this);
                }
                return this.mUITabRosterSetupClient;
            }
        }
        
        public DXTestControl UIXtraTabControlHeaderTabPage
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage == null))
                {
                    this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "gsTabControl1PageHeader2";
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage;
            }
        }
        
        public UITabBaseClient UITabBaseClient
        {
            get
            {
                if ((this.mUITabBaseClient == null))
                {
                    this.mUITabBaseClient = new UITabBaseClient(this);
                }
                return this.mUITabBaseClient;
            }
        }
        #endregion
        
        #region Fields
        private UITabRosterSetupClient mUITabRosterSetupClient;
        
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        
        private UITabBaseClient mUITabBaseClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabRosterSetupClient : DXTestControl
    {
        
        public UITabRosterSetupClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabRosterSetup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public UINbcRosterSetupNavBar UINbcRosterSetupNavBar
        {
            get
            {
                if ((this.mUINbcRosterSetupNavBar == null))
                {
                    this.mUINbcRosterSetupNavBar = new UINbcRosterSetupNavBar(this);
                }
                return this.mUINbcRosterSetupNavBar;
            }
        }
        #endregion
        
        #region Fields
        private UINbcRosterSetupNavBar mUINbcRosterSetupNavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINbcRosterSetupNavBar : DXNavBar
    {
        
        public UINbcRosterSetupNavBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public UIF3LengdeVaktfragrunnNavBarGroup UIF3LengdeVaktfragrunnNavBarGroup
        {
            get
            {
                if ((this.mUIF3LengdeVaktfragrunnNavBarGroup == null))
                {
                    this.mUIF3LengdeVaktfragrunnNavBarGroup = new UIF3LengdeVaktfragrunnNavBarGroup(this);
                }
                return this.mUIF3LengdeVaktfragrunnNavBarGroup;
            }
        }
        
        public UIF3kanbrukespåhalveheNavBarGroup UIF3kanbrukespåhalveheNavBarGroup
        {
            get
            {
                if ((this.mUIF3kanbrukespåhalveheNavBarGroup == null))
                {
                    this.mUIF3kanbrukespåhalveheNavBarGroup = new UIF3kanbrukespåhalveheNavBarGroup(this);
                }
                return this.mUIF3kanbrukespåhalveheNavBarGroup;
            }
        }
        
        public UIF3kanbrukespåsøndageNavBarGroup UIF3kanbrukespåsøndageNavBarGroup
        {
            get
            {
                if ((this.mUIF3kanbrukespåsøndageNavBarGroup == null))
                {
                    this.mUIF3kanbrukespåsøndageNavBarGroup = new UIF3kanbrukespåsøndageNavBarGroup(this);
                }
                return this.mUIF3kanbrukespåsøndageNavBarGroup;
            }
        }
        
        public UIKravtilF1hverukeJaNavBarGroup UIKravtilF1hverukeJaNavBarGroup
        {
            get
            {
                if ((this.mUIKravtilF1hverukeJaNavBarGroup == null))
                {
                    this.mUIKravtilF1hverukeJaNavBarGroup = new UIKravtilF1hverukeJaNavBarGroup(this);
                }
                return this.mUIKravtilF1hverukeJaNavBarGroup;
            }
        }
        
        public UIMaksantallsøndagerpåNavBarGroup UIMaksantallsøndagerpåNavBarGroup
        {
            get
            {
                if ((this.mUIMaksantallsøndagerpåNavBarGroup == null))
                {
                    this.mUIMaksantallsøndagerpåNavBarGroup = new UIMaksantallsøndagerpåNavBarGroup(this);
                }
                return this.mUIMaksantallsøndagerpåNavBarGroup;
            }
        }
        
        public UINavBarGroupControlCoScrollableControl UINavBarGroupControlCoScrollableControl
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl = new UINavBarGroupControlCoScrollableControl(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl;
            }
        }
        
        public UINavBarGroupControlCoScrollableControl1 UINavBarGroupControlCoScrollableControl1
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl1 == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl1 = new UINavBarGroupControlCoScrollableControl1(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl1;
            }
        }
        
        public UINavBarGroupControlCoScrollableControl2 UINavBarGroupControlCoScrollableControl2
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl2 == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl2 = new UINavBarGroupControlCoScrollableControl2(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl2;
            }
        }
        
        public UINavBarGroupControlCoScrollableControl3 UINavBarGroupControlCoScrollableControl3
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl3 == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl3 = new UINavBarGroupControlCoScrollableControl3(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl3;
            }
        }
        
        public UINavBarGroupControlCoScrollableControl4 UINavBarGroupControlCoScrollableControl4
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl4 == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl4 = new UINavBarGroupControlCoScrollableControl4(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl4;
            }
        }
        #endregion
        
        #region Fields
        private UIF3LengdeVaktfragrunnNavBarGroup mUIF3LengdeVaktfragrunnNavBarGroup;
        
        private UIF3kanbrukespåhalveheNavBarGroup mUIF3kanbrukespåhalveheNavBarGroup;
        
        private UIF3kanbrukespåsøndageNavBarGroup mUIF3kanbrukespåsøndageNavBarGroup;
        
        private UIKravtilF1hverukeJaNavBarGroup mUIKravtilF1hverukeJaNavBarGroup;
        
        private UIMaksantallsøndagerpåNavBarGroup mUIMaksantallsøndagerpåNavBarGroup;
        
        private UINavBarGroupControlCoScrollableControl mUINavBarGroupControlCoScrollableControl;
        
        private UINavBarGroupControlCoScrollableControl1 mUINavBarGroupControlCoScrollableControl1;
        
        private UINavBarGroupControlCoScrollableControl2 mUINavBarGroupControlCoScrollableControl2;
        
        private UINavBarGroupControlCoScrollableControl3 mUINavBarGroupControlCoScrollableControl3;
        
        private UINavBarGroupControlCoScrollableControl4 mUINavBarGroupControlCoScrollableControl4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIF3LengdeVaktfragrunnNavBarGroup : DXNavBarGroup
    {
        
        public UIF3LengdeVaktfragrunnNavBarGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "F3 Lengde - Vakt fra grunnplan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public DXNavBarGroupButton UIF3LengdeVaktfragrunnNavBarGroupButton
        {
            get
            {
                if ((this.mUIF3LengdeVaktfragrunnNavBarGroupButton == null))
                {
                    this.mUIF3LengdeVaktfragrunnNavBarGroupButton = new DXNavBarGroupButton(this);
                    #region Search Criteria
                    this.mUIF3LengdeVaktfragrunnNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.Name] = "F3 Lengde - Vakt fra grunnplan";
                    this.mUIF3LengdeVaktfragrunnNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupButton";
                    this.mUIF3LengdeVaktfragrunnNavBarGroupButton.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
                    #endregion
                }
                return this.mUIF3LengdeVaktfragrunnNavBarGroupButton;
            }
        }
        #endregion
        
        #region Fields
        private DXNavBarGroupButton mUIF3LengdeVaktfragrunnNavBarGroupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIF3kanbrukespåhalveheNavBarGroup : DXNavBarGroup
    {
        
        public UIF3kanbrukespåhalveheNavBarGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "F3 kan brukes på halve helligdager? - Nei";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public DXNavBarGroupButton UIF3kanbrukespåhalveheNavBarGroupButton
        {
            get
            {
                if ((this.mUIF3kanbrukespåhalveheNavBarGroupButton == null))
                {
                    this.mUIF3kanbrukespåhalveheNavBarGroupButton = new DXNavBarGroupButton(this);
                    #region Search Criteria
                    this.mUIF3kanbrukespåhalveheNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.Name] = "F3 kan brukes på halve helligdager? - Nei";
                    this.mUIF3kanbrukespåhalveheNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupButton";
                    this.mUIF3kanbrukespåhalveheNavBarGroupButton.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
                    #endregion
                }
                return this.mUIF3kanbrukespåhalveheNavBarGroupButton;
            }
        }
        #endregion
        
        #region Fields
        private DXNavBarGroupButton mUIF3kanbrukespåhalveheNavBarGroupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIF3kanbrukespåsøndageNavBarGroup : DXNavBarGroup
    {
        
        public UIF3kanbrukespåsøndageNavBarGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "F3 kan brukes på søndager? - Ja";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public DXNavBarGroupButton UIF3kanbrukespåsøndageNavBarGroupButton
        {
            get
            {
                if ((this.mUIF3kanbrukespåsøndageNavBarGroupButton == null))
                {
                    this.mUIF3kanbrukespåsøndageNavBarGroupButton = new DXNavBarGroupButton(this);
                    #region Search Criteria
                    this.mUIF3kanbrukespåsøndageNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.Name] = "F3 kan brukes på søndager? - Ja";
                    this.mUIF3kanbrukespåsøndageNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupButton";
                    this.mUIF3kanbrukespåsøndageNavBarGroupButton.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
                    #endregion
                }
                return this.mUIF3kanbrukespåsøndageNavBarGroupButton;
            }
        }
        #endregion
        
        #region Fields
        private DXNavBarGroupButton mUIF3kanbrukespåsøndageNavBarGroupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIKravtilF1hverukeJaNavBarGroup : DXNavBarGroup
    {
        
        public UIKravtilF1hverukeJaNavBarGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Krav til F1 hver uke? - Ja";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public DXNavBarGroupButton UIKravtilF1hverukeJaNavBarGroupButton
        {
            get
            {
                if ((this.mUIKravtilF1hverukeJaNavBarGroupButton == null))
                {
                    this.mUIKravtilF1hverukeJaNavBarGroupButton = new DXNavBarGroupButton(this);
                    #region Search Criteria
                    this.mUIKravtilF1hverukeJaNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Krav til F1 hver uke? - Ja";
                    this.mUIKravtilF1hverukeJaNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupButton";
                    this.mUIKravtilF1hverukeJaNavBarGroupButton.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
                    #endregion
                }
                return this.mUIKravtilF1hverukeJaNavBarGroupButton;
            }
        }
        #endregion
        
        #region Fields
        private DXNavBarGroupButton mUIKravtilF1hverukeJaNavBarGroupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMaksantallsøndagerpåNavBarGroup : DXNavBarGroup
    {
        
        public UIMaksantallsøndagerpåNavBarGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks antall søndager på rad (§10-8). - 1,00";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public DXNavBarGroupButton UIMaksantallsøndagerpåNavBarGroupButton
        {
            get
            {
                if ((this.mUIMaksantallsøndagerpåNavBarGroupButton == null))
                {
                    this.mUIMaksantallsøndagerpåNavBarGroupButton = new DXNavBarGroupButton(this);
                    #region Search Criteria
                    this.mUIMaksantallsøndagerpåNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks antall søndager på rad (§10-8). - 1,00";
                    this.mUIMaksantallsøndagerpåNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupButton";
                    this.mUIMaksantallsøndagerpåNavBarGroupButton.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
                    #endregion
                }
                return this.mUIMaksantallsøndagerpåNavBarGroupButton;
            }
        }
        #endregion
        
        #region Fields
        private DXNavBarGroupButton mUIMaksantallsøndagerpåNavBarGroupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEditClient : DXTestControl
    {
        
        public UIPnlEditClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkEditCheckBox
        {
            get
            {
                if ((this.mUIChkEditCheckBox == null))
                {
                    this.mUIChkEditCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIChkEditCheckBox.WindowTitles.Add("Ansattinnstillinger for ansattlinje");
                    #endregion
                }
                return this.mUIChkEditCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkEditCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl1 : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient1 UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient1(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient1 mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEditClient1 : DXTestControl
    {
        
        public UIPnlEditClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkEditCheckBox
        {
            get
            {
                if ((this.mUIChkEditCheckBox == null))
                {
                    this.mUIChkEditCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIChkEditCheckBox.WindowTitles.Add("Ansattinnstillinger for ansattlinje");
                    #endregion
                }
                return this.mUIChkEditCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkEditCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl2 : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[8]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient2 UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient2(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient2 mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEditClient2 : DXTestControl
    {
        
        public UIPnlEditClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkEditCheckBox
        {
            get
            {
                if ((this.mUIChkEditCheckBox == null))
                {
                    this.mUIChkEditCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIChkEditCheckBox.WindowTitles.Add("Ansattinnstillinger for ansattlinje");
                    #endregion
                }
                return this.mUIChkEditCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkEditCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl3 : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[10]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient3 UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient3(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient3 mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEditClient3 : DXTestControl
    {
        
        public UIPnlEditClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public UISneNumericWindow UISneNumericWindow
        {
            get
            {
                if ((this.mUISneNumericWindow == null))
                {
                    this.mUISneNumericWindow = new UISneNumericWindow(this);
                }
                return this.mUISneNumericWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISneNumericWindow mUISneNumericWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISneNumericWindow : WinWindow
    {
        
        public UISneNumericWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sneNumeric";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public WinClient UISneNumericClient
        {
            get
            {
                if ((this.mUISneNumericClient == null))
                {
                    this.mUISneNumericClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISneNumericClient.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
                    #endregion
                }
                return this.mUISneNumericClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISneNumericClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl4 : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[9]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient4 UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient4(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient4 mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEditClient4 : DXTestControl
    {
        
        public UIPnlEditClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
            #endregion
        }
        
        #region Properties
        public DXComboBox UICmbChoicesComboBox
        {
            get
            {
                if ((this.mUICmbChoicesComboBox == null))
                {
                    this.mUICmbChoicesComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUICmbChoicesComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "cmbChoices";
                    this.mUICmbChoicesComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSComboBoxEdit";
                    this.mUICmbChoicesComboBox.WindowTitles.Add("Ansattinnstillinger for ansattlinje 2");
                    #endregion
                }
                return this.mUICmbChoicesComboBox;
            }
        }
        #endregion
        
        #region Fields
        private DXComboBox mUICmbChoicesComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabBaseClient : DXTestControl
    {
        
        public UITabBaseClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabBase";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje");
            #endregion
        }
        
        #region Properties
        public UIGrpWeekendRotationClient UIGrpWeekendRotationClient
        {
            get
            {
                if ((this.mUIGrpWeekendRotationClient == null))
                {
                    this.mUIGrpWeekendRotationClient = new UIGrpWeekendRotationClient(this);
                }
                return this.mUIGrpWeekendRotationClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpWeekendRotationClient mUIGrpWeekendRotationClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpWeekendRotationClient : DXTestControl
    {
        
        public UIGrpWeekendRotationClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpWeekendRotation";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkFixedWeekendRotatCheckBox
        {
            get
            {
                if ((this.mUIChkFixedWeekendRotatCheckBox == null))
                {
                    this.mUIChkFixedWeekendRotatCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkFixedWeekendRotatCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkFixedWeekendRotation";
                    this.mUIChkFixedWeekendRotatCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkFixedWeekendRotatCheckBox.WindowTitles.Add("Ansattinnstillinger for ansattlinje");
                    #endregion
                }
                return this.mUIChkFixedWeekendRotatCheckBox;
            }
        }
        
        public DXLookUpEdit UILeFixedWeekendRotatiLookUpEdit
        {
            get
            {
                if ((this.mUILeFixedWeekendRotatiLookUpEdit == null))
                {
                    this.mUILeFixedWeekendRotatiLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILeFixedWeekendRotatiLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leFixedWeekendRotation";
                    this.mUILeFixedWeekendRotatiLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    this.mUILeFixedWeekendRotatiLookUpEdit.WindowTitles.Add("Ansattinnstillinger for ansattlinje");
                    #endregion
                }
                return this.mUILeFixedWeekendRotatiLookUpEdit;
            }
        }
        
        public DXCheckBox UIChkUserDefinedWeekenCheckBox
        {
            get
            {
                if ((this.mUIChkUserDefinedWeekenCheckBox == null))
                {
                    this.mUIChkUserDefinedWeekenCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkUserDefinedWeekenCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkUserDefinedWeekendRotation";
                    this.mUIChkUserDefinedWeekenCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkUserDefinedWeekenCheckBox.WindowTitles.Add("Ansattinnstillinger for ansattlinje");
                    #endregion
                }
                return this.mUIChkUserDefinedWeekenCheckBox;
            }
        }
        
        public DXTextEdit UIEUserDefinedWeekendREdit
        {
            get
            {
                if ((this.mUIEUserDefinedWeekendREdit == null))
                {
                    this.mUIEUserDefinedWeekendREdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIEUserDefinedWeekendREdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eUserDefinedWeekendRotation";
                    this.mUIEUserDefinedWeekendREdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIEUserDefinedWeekendREdit.WindowTitles.Add("Ansattinnstillinger for ansattlinje");
                    #endregion
                }
                return this.mUIEUserDefinedWeekendREdit;
            }
        }
        
        public DXButton UIEndreegendefinerthelButton
        {
            get
            {
                if ((this.mUIEndreegendefinerthelButton == null))
                {
                    this.mUIEndreegendefinerthelButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIEndreegendefinerthelButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnChangeUserDefinedWeekendRotation";
                    this.mUIEndreegendefinerthelButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIEndreegendefinerthelButton.WindowTitles.Add("Ansattinnstillinger for ansattlinje");
                    #endregion
                }
                return this.mUIEndreegendefinerthelButton;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkFixedWeekendRotatCheckBox;
        
        private DXLookUpEdit mUILeFixedWeekendRotatiLookUpEdit;
        
        private DXCheckBox mUIChkUserDefinedWeekenCheckBox;
        
        private DXTextEdit mUIEUserDefinedWeekendREdit;
        
        private DXButton mUIEndreegendefinerthelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIEndreansattinnstilliMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIEndreansattinnstilliMenuBaseButtonItem == null))
                {
                    this.mUIEndreansattinnstilliMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIEndreansattinnstilliMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIEndreansattinnstilliMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIEndreansattinnstilliMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIBarButtonItemLink1MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink1MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink1MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink1MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIEndreansattinnstilliMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIBarButtonItemLink1MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsattinnstillingerfWindow1 : DXWindow
    {
        
        public UIAnsattinnstillingerfWindow1()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansattinnstillinger for ansattlinje 1";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPaMainContentClient1 UIPaMainContentClient
        {
            get
            {
                if ((this.mUIPaMainContentClient == null))
                {
                    this.mUIPaMainContentClient = new UIPaMainContentClient1(this);
                }
                return this.mUIPaMainContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaMainContentClient1 mUIPaMainContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaMainContentClient1 : DXTestControl
    {
        
        public UIPaMainContentClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paMainContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            #endregion
        }
        
        #region Properties
        public UIGsTabControl1TabList1 UIGsTabControl1TabList
        {
            get
            {
                if ((this.mUIGsTabControl1TabList == null))
                {
                    this.mUIGsTabControl1TabList = new UIGsTabControl1TabList1(this);
                }
                return this.mUIGsTabControl1TabList;
            }
        }
        #endregion
        
        #region Fields
        private UIGsTabControl1TabList1 mUIGsTabControl1TabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsTabControl1TabList1 : DXTestControl
    {
        
        public UIGsTabControl1TabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsTabControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITabRosterSetupClient1 UITabRosterSetupClient
        {
            get
            {
                if ((this.mUITabRosterSetupClient == null))
                {
                    this.mUITabRosterSetupClient = new UITabRosterSetupClient1(this);
                }
                return this.mUITabRosterSetupClient;
            }
        }
        #endregion
        
        #region Fields
        private UITabRosterSetupClient1 mUITabRosterSetupClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabRosterSetupClient1 : DXTestControl
    {
        
        public UITabRosterSetupClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabRosterSetup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UINbcRosterSetupNavBar1 UINbcRosterSetupNavBar
        {
            get
            {
                if ((this.mUINbcRosterSetupNavBar == null))
                {
                    this.mUINbcRosterSetupNavBar = new UINbcRosterSetupNavBar1(this);
                }
                return this.mUINbcRosterSetupNavBar;
            }
        }
        #endregion
        
        #region Fields
        private UINbcRosterSetupNavBar1 mUINbcRosterSetupNavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINbcRosterSetupNavBar1 : DXNavBar
    {
        
        public UINbcRosterSetupNavBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public UINavBarGroupControlCoScrollableControl5 UINavBarGroupControlCoScrollableControl
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl = new UINavBarGroupControlCoScrollableControl5(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl;
            }
        }
        
        public UINavBarGroupControlCoScrollableControl11 UINavBarGroupControlCoScrollableControl1
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl1 == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl1 = new UINavBarGroupControlCoScrollableControl11(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl1;
            }
        }
        
        public UINavBarGroupControlCoScrollableControl21 UINavBarGroupControlCoScrollableControl2
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl2 == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl2 = new UINavBarGroupControlCoScrollableControl21(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl2;
            }
        }
        #endregion
        
        #region Fields
        private UINavBarGroupControlCoScrollableControl5 mUINavBarGroupControlCoScrollableControl;
        
        private UINavBarGroupControlCoScrollableControl11 mUINavBarGroupControlCoScrollableControl1;
        
        private UINavBarGroupControlCoScrollableControl21 mUINavBarGroupControlCoScrollableControl2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl5 : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient5 UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient5(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient5 mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEditClient5 : DXTestControl
    {
        
        public UIPnlEditClient5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkEditCheckBox
        {
            get
            {
                if ((this.mUIChkEditCheckBox == null))
                {
                    this.mUIChkEditCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIChkEditCheckBox.WindowTitles.Add("Ansattinnstillinger for ansattlinje 1");
                    #endregion
                }
                return this.mUIChkEditCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkEditCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl11 : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient6 UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient6(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient6 mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEditClient6 : DXTestControl
    {
        
        public UIPnlEditClient6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkEditCheckBox
        {
            get
            {
                if ((this.mUIChkEditCheckBox == null))
                {
                    this.mUIChkEditCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIChkEditCheckBox.WindowTitles.Add("Ansattinnstillinger for ansattlinje 1");
                    #endregion
                }
                return this.mUIChkEditCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkEditCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl21 : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[2]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient7 UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient7(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient7 mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEditClient7 : DXTestControl
    {
        
        public UIPnlEditClient7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkEditCheckBox
        {
            get
            {
                if ((this.mUIChkEditCheckBox == null))
                {
                    this.mUIChkEditCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIChkEditCheckBox.WindowTitles.Add("Ansattinnstillinger for ansattlinje 1");
                    #endregion
                }
                return this.mUIChkEditCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkEditCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILinjeinnstillingerGuWindow : DXWindow
    {
        
        public UILinjeinnstillingerGuWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Linjeinnstillinger - [Gustavsson, Robert]";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client mUIGsPanelControl3Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl3Client : DXTestControl
    {
        
        public UIGsPanelControl3Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIENumber3Edit
        {
            get
            {
                if ((this.mUIENumber3Edit == null))
                {
                    this.mUIENumber3Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber3Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[3]";
                    this.mUIENumber3Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber3Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber3Edit.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIENumber3Edit;
            }
        }
        
        public DXTextEdit UIENumber2Edit
        {
            get
            {
                if ((this.mUIENumber2Edit == null))
                {
                    this.mUIENumber2Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber2Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[2]";
                    this.mUIENumber2Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber2Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber2Edit.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIENumber2Edit;
            }
        }
        
        public DXTextEdit UIEFlexibleHoursDescriEdit
        {
            get
            {
                if ((this.mUIEFlexibleHoursDescriEdit == null))
                {
                    this.mUIEFlexibleHoursDescriEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIEFlexibleHoursDescriEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eFlexibleHoursDescription";
                    this.mUIEFlexibleHoursDescriEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIEFlexibleHoursDescriEdit.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIEFlexibleHoursDescriEdit;
            }
        }
        
        public DXLookUpEdit UILeAvailableRulesetsLookUpEdit
        {
            get
            {
                if ((this.mUILeAvailableRulesetsLookUpEdit == null))
                {
                    this.mUILeAvailableRulesetsLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILeAvailableRulesetsLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leAvailableRulesets";
                    this.mUILeAvailableRulesetsLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    this.mUILeAvailableRulesetsLookUpEdit.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUILeAvailableRulesetsLookUpEdit;
            }
        }
        
        public DXTextEdit UIENumber1Edit
        {
            get
            {
                if ((this.mUIENumber1Edit == null))
                {
                    this.mUIENumber1Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[1]";
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber1Edit.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIENumber1Edit;
            }
        }
        
        public DXButton UIBtnSetYearlyWorkTimeButton
        {
            get
            {
                if ((this.mUIBtnSetYearlyWorkTimeButton == null))
                {
                    this.mUIBtnSetYearlyWorkTimeButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIBtnSetYearlyWorkTimeButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSetYearlyWorkTimePercentToDiff";
                    this.mUIBtnSetYearlyWorkTimeButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIBtnSetYearlyWorkTimeButton.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIBtnSetYearlyWorkTimeButton;
            }
        }
        
        public UIRgCalculatedTimeRadioGroup UIRgCalculatedTimeRadioGroup
        {
            get
            {
                if ((this.mUIRgCalculatedTimeRadioGroup == null))
                {
                    this.mUIRgCalculatedTimeRadioGroup = new UIRgCalculatedTimeRadioGroup(this);
                }
                return this.mUIRgCalculatedTimeRadioGroup;
            }
        }
        
        public UIGcOvertimeClient UIGcOvertimeClient
        {
            get
            {
                if ((this.mUIGcOvertimeClient == null))
                {
                    this.mUIGcOvertimeClient = new UIGcOvertimeClient(this);
                }
                return this.mUIGcOvertimeClient;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIENumber3Edit;
        
        private DXTextEdit mUIENumber2Edit;
        
        private DXTextEdit mUIEFlexibleHoursDescriEdit;
        
        private DXLookUpEdit mUILeAvailableRulesetsLookUpEdit;
        
        private DXTextEdit mUIENumber1Edit;
        
        private DXButton mUIBtnSetYearlyWorkTimeButton;
        
        private UIRgCalculatedTimeRadioGroup mUIRgCalculatedTimeRadioGroup;
        
        private UIGcOvertimeClient mUIGcOvertimeClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRgCalculatedTimeRadioGroup : DXRadioGroup
    {
        
        public UIRgCalculatedTimeRadioGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rgCalculatedTime";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSRadioGroup";
            this.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
            #endregion
        }
        
        #region Properties
        public DXRadioButton UIRadioGroupItemRadioButton
        {
            get
            {
                if ((this.mUIRadioGroupItemRadioButton == null))
                {
                    this.mUIRadioGroupItemRadioButton = new DXRadioButton(this);
                    #region Search Criteria
                    this.mUIRadioGroupItemRadioButton.SearchProperties[DXTestControl.PropertyNames.Name] = "rgCalculatedTimeItem[0]";
                    this.mUIRadioGroupItemRadioButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RadioGroupItem";
                    this.mUIRadioGroupItemRadioButton.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIRadioGroupItemRadioButton;
            }
        }
        
        public DXRadioButton UIRadioGroupItemRadioButton1
        {
            get
            {
                if ((this.mUIRadioGroupItemRadioButton1 == null))
                {
                    this.mUIRadioGroupItemRadioButton1 = new DXRadioButton(this);
                    #region Search Criteria
                    this.mUIRadioGroupItemRadioButton1.SearchProperties[DXTestControl.PropertyNames.Name] = "rgCalculatedTimeItem[1]";
                    this.mUIRadioGroupItemRadioButton1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RadioGroupItem";
                    this.mUIRadioGroupItemRadioButton1.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIRadioGroupItemRadioButton1;
            }
        }
        #endregion
        
        #region Fields
        private DXRadioButton mUIRadioGroupItemRadioButton;
        
        private DXRadioButton mUIRadioGroupItemRadioButton1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcOvertimeClient : DXTestControl
    {
        
        public UIGcOvertimeClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcOvertime";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UIDrdToSporadicLookUpEdit
        {
            get
            {
                if ((this.mUIDrdToSporadicLookUpEdit == null))
                {
                    this.mUIDrdToSporadicLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIDrdToSporadicLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "drdToSporadic";
                    this.mUIDrdToSporadicLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    this.mUIDrdToSporadicLookUpEdit.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIDrdToSporadicLookUpEdit;
            }
        }
        
        public DXCheckBox UIChkUpdateSaldoBankCheckBox
        {
            get
            {
                if ((this.mUIChkUpdateSaldoBankCheckBox == null))
                {
                    this.mUIChkUpdateSaldoBankCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkUpdateSaldoBankCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkUpdateSaldoBank";
                    this.mUIChkUpdateSaldoBankCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkUpdateSaldoBankCheckBox.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIChkUpdateSaldoBankCheckBox;
            }
        }
        
        public DXComboBox UILeOvertimeDefaultCodComboBox
        {
            get
            {
                if ((this.mUILeOvertimeDefaultCodComboBox == null))
                {
                    this.mUILeOvertimeDefaultCodComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUILeOvertimeDefaultCodComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "leOvertimeDefaultCode";
                    this.mUILeOvertimeDefaultCodComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSComboBoxEdit";
                    this.mUILeOvertimeDefaultCodComboBox.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUILeOvertimeDefaultCodComboBox;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUIDrdToSporadicLookUpEdit;
        
        private DXCheckBox mUIChkUpdateSaldoBankCheckBox;
        
        private DXComboBox mUILeOvertimeDefaultCodComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISøkingidatabaseloggWindow : DXWindow
    {
        
        public UISøkingidatabaseloggWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Søking i database-logg";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public UIPaResultsClient UIPaResultsClient
        {
            get
            {
                if ((this.mUIPaResultsClient == null))
                {
                    this.mUIPaResultsClient = new UIPaResultsClient(this);
                }
                return this.mUIPaResultsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaResultsClient mUIPaResultsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaResultsClient : DXTestControl
    {
        
        public UIPaResultsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public UITlContextsTreeList UITlContextsTreeList
        {
            get
            {
                if ((this.mUITlContextsTreeList == null))
                {
                    this.mUITlContextsTreeList = new UITlContextsTreeList(this);
                }
                return this.mUITlContextsTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UITlContextsTreeList mUITlContextsTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITlContextsTreeList : DXTreeList
    {
        
        public UITlContextsTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tlContexts";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTreeList";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public UINode31TreeListNode UINode31TreeListNode
        {
            get
            {
                if ((this.mUINode31TreeListNode == null))
                {
                    this.mUINode31TreeListNode = new UINode31TreeListNode(this);
                }
                return this.mUINode31TreeListNode;
            }
        }
        
        public UINode32TreeListNode UINode32TreeListNode
        {
            get
            {
                if ((this.mUINode32TreeListNode == null))
                {
                    this.mUINode32TreeListNode = new UINode32TreeListNode(this);
                }
                return this.mUINode32TreeListNode;
            }
        }
        
        public UINode33TreeListNode UINode33TreeListNode
        {
            get
            {
                if ((this.mUINode33TreeListNode == null))
                {
                    this.mUINode33TreeListNode = new UINode33TreeListNode(this);
                }
                return this.mUINode33TreeListNode;
            }
        }
        
        public UINode34TreeListNode UINode34TreeListNode
        {
            get
            {
                if ((this.mUINode34TreeListNode == null))
                {
                    this.mUINode34TreeListNode = new UINode34TreeListNode(this);
                }
                return this.mUINode34TreeListNode;
            }
        }
        
        public UINode35TreeListNode UINode35TreeListNode
        {
            get
            {
                if ((this.mUINode35TreeListNode == null))
                {
                    this.mUINode35TreeListNode = new UINode35TreeListNode(this);
                }
                return this.mUINode35TreeListNode;
            }
        }
        
        public UINode15TreeListNode UINode15TreeListNode
        {
            get
            {
                if ((this.mUINode15TreeListNode == null))
                {
                    this.mUINode15TreeListNode = new UINode15TreeListNode(this);
                }
                return this.mUINode15TreeListNode;
            }
        }
        
        public UINode16TreeListNode UINode16TreeListNode
        {
            get
            {
                if ((this.mUINode16TreeListNode == null))
                {
                    this.mUINode16TreeListNode = new UINode16TreeListNode(this);
                }
                return this.mUINode16TreeListNode;
            }
        }
        
        public UINode17TreeListNode UINode17TreeListNode
        {
            get
            {
                if ((this.mUINode17TreeListNode == null))
                {
                    this.mUINode17TreeListNode = new UINode17TreeListNode(this);
                }
                return this.mUINode17TreeListNode;
            }
        }
        
        public UINode18TreeListNode UINode18TreeListNode
        {
            get
            {
                if ((this.mUINode18TreeListNode == null))
                {
                    this.mUINode18TreeListNode = new UINode18TreeListNode(this);
                }
                return this.mUINode18TreeListNode;
            }
        }
        
        public UINode19TreeListNode UINode19TreeListNode
        {
            get
            {
                if ((this.mUINode19TreeListNode == null))
                {
                    this.mUINode19TreeListNode = new UINode19TreeListNode(this);
                }
                return this.mUINode19TreeListNode;
            }
        }
        
        public UINode22TreeListNode UINode22TreeListNode
        {
            get
            {
                if ((this.mUINode22TreeListNode == null))
                {
                    this.mUINode22TreeListNode = new UINode22TreeListNode(this);
                }
                return this.mUINode22TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode31TreeListNode mUINode31TreeListNode;
        
        private UINode32TreeListNode mUINode32TreeListNode;
        
        private UINode33TreeListNode mUINode33TreeListNode;
        
        private UINode34TreeListNode mUINode34TreeListNode;
        
        private UINode35TreeListNode mUINode35TreeListNode;
        
        private UINode15TreeListNode mUINode15TreeListNode;
        
        private UINode16TreeListNode mUINode16TreeListNode;
        
        private UINode17TreeListNode mUINode17TreeListNode;
        
        private UINode18TreeListNode mUINode18TreeListNode;
        
        private UINode19TreeListNode mUINode19TreeListNode;
        
        private UINode22TreeListNode mUINode22TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode31TreeListNode : DXTreeListNode
    {
        
        public UINode31TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node31";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIEndringerforlinjemedTreeListCell
        {
            get
            {
                if ((this.mUIEndringerforlinjemedTreeListCell == null))
                {
                    this.mUIEndringerforlinjemedTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextDescription";
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIEndringerforlinjemedTreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIEndringerforlinjemedTreeListCell;
            }
        }
        
        public DXTreeListCell UIBJARNETreeListCell
        {
            get
            {
                if ((this.mUIBJARNETreeListCell == null))
                {
                    this.mUIBJARNETreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextUser";
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIBJARNETreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIBJARNETreeListCell;
            }
        }
        
        public DXTreeListCell UIItem20262TreeListCell
        {
            get
            {
                if ((this.mUIItem20262TreeListCell == null))
                {
                    this.mUIItem20262TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem20262TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextID";
                    this.mUIItem20262TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem20262TreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIItem20262TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIEndringerforlinjemedTreeListCell;
        
        private DXTreeListCell mUIBJARNETreeListCell;
        
        private DXTreeListCell mUIItem20262TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode32TreeListNode : DXTreeListNode
    {
        
        public UINode32TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node32";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIEndringerforlinjemedTreeListCell
        {
            get
            {
                if ((this.mUIEndringerforlinjemedTreeListCell == null))
                {
                    this.mUIEndringerforlinjemedTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextDescription";
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIEndringerforlinjemedTreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIEndringerforlinjemedTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIEndringerforlinjemedTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode33TreeListNode : DXTreeListNode
    {
        
        public UINode33TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node33";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIEndringerforlinjemedTreeListCell
        {
            get
            {
                if ((this.mUIEndringerforlinjemedTreeListCell == null))
                {
                    this.mUIEndringerforlinjemedTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextDescription";
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIEndringerforlinjemedTreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIEndringerforlinjemedTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIEndringerforlinjemedTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode34TreeListNode : DXTreeListNode
    {
        
        public UINode34TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node34";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIEndringerforlinjemedTreeListCell
        {
            get
            {
                if ((this.mUIEndringerforlinjemedTreeListCell == null))
                {
                    this.mUIEndringerforlinjemedTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextDescription";
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIEndringerforlinjemedTreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIEndringerforlinjemedTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIEndringerforlinjemedTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode35TreeListNode : DXTreeListNode
    {
        
        public UINode35TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node35";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIEndringerforlinjemedTreeListCell
        {
            get
            {
                if ((this.mUIEndringerforlinjemedTreeListCell == null))
                {
                    this.mUIEndringerforlinjemedTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextDescription";
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIEndringerforlinjemedTreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIEndringerforlinjemedTreeListCell;
            }
        }
        
        public DXTreeListCell UIBJARNETreeListCell
        {
            get
            {
                if ((this.mUIBJARNETreeListCell == null))
                {
                    this.mUIBJARNETreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextUser";
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIBJARNETreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIBJARNETreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIEndringerforlinjemedTreeListCell;
        
        private DXTreeListCell mUIBJARNETreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode15TreeListNode : DXTreeListNode
    {
        
        public UINode15TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node17";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem21893TreeListCell
        {
            get
            {
                if ((this.mUIItem21893TreeListCell == null))
                {
                    this.mUIItem21893TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem21893TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextID";
                    this.mUIItem21893TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem21893TreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIItem21893TreeListCell;
            }
        }
        
        public DXTreeListCell UIBJARNETreeListCell
        {
            get
            {
                if ((this.mUIBJARNETreeListCell == null))
                {
                    this.mUIBJARNETreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextUser";
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIBJARNETreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIBJARNETreeListCell;
            }
        }
        
        public DXTreeListCell UIEndringerforlinjemedTreeListCell
        {
            get
            {
                if ((this.mUIEndringerforlinjemedTreeListCell == null))
                {
                    this.mUIEndringerforlinjemedTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextDescription";
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIEndringerforlinjemedTreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIEndringerforlinjemedTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem21893TreeListCell;
        
        private DXTreeListCell mUIBJARNETreeListCell;
        
        private DXTreeListCell mUIEndringerforlinjemedTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode16TreeListNode : DXTreeListNode
    {
        
        public UINode16TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node18";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIBJARNETreeListCell
        {
            get
            {
                if ((this.mUIBJARNETreeListCell == null))
                {
                    this.mUIBJARNETreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextUser";
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIBJARNETreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIBJARNETreeListCell;
            }
        }
        
        public DXTreeListCell UIEndringerforlinjemedTreeListCell
        {
            get
            {
                if ((this.mUIEndringerforlinjemedTreeListCell == null))
                {
                    this.mUIEndringerforlinjemedTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextDescription";
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIEndringerforlinjemedTreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIEndringerforlinjemedTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIBJARNETreeListCell;
        
        private DXTreeListCell mUIEndringerforlinjemedTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode17TreeListNode : DXTreeListNode
    {
        
        public UINode17TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node19";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIBJARNETreeListCell
        {
            get
            {
                if ((this.mUIBJARNETreeListCell == null))
                {
                    this.mUIBJARNETreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextUser";
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIBJARNETreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIBJARNETreeListCell;
            }
        }
        
        public DXTreeListCell UIEndringerforlinjemedTreeListCell
        {
            get
            {
                if ((this.mUIEndringerforlinjemedTreeListCell == null))
                {
                    this.mUIEndringerforlinjemedTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextDescription";
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIEndringerforlinjemedTreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIEndringerforlinjemedTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIBJARNETreeListCell;
        
        private DXTreeListCell mUIEndringerforlinjemedTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode18TreeListNode : DXTreeListNode
    {
        
        public UINode18TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node20";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIBJARNETreeListCell
        {
            get
            {
                if ((this.mUIBJARNETreeListCell == null))
                {
                    this.mUIBJARNETreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextUser";
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIBJARNETreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIBJARNETreeListCell;
            }
        }
        
        public DXTreeListCell UIEndringerforlinjemedTreeListCell
        {
            get
            {
                if ((this.mUIEndringerforlinjemedTreeListCell == null))
                {
                    this.mUIEndringerforlinjemedTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextDescription";
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIEndringerforlinjemedTreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIEndringerforlinjemedTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIBJARNETreeListCell;
        
        private DXTreeListCell mUIEndringerforlinjemedTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode19TreeListNode : DXTreeListNode
    {
        
        public UINode19TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node21";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIBJARNETreeListCell
        {
            get
            {
                if ((this.mUIBJARNETreeListCell == null))
                {
                    this.mUIBJARNETreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextUser";
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIBJARNETreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIBJARNETreeListCell;
            }
        }
        
        public DXTreeListCell UIEndringerforlinjemedTreeListCell
        {
            get
            {
                if ((this.mUIEndringerforlinjemedTreeListCell == null))
                {
                    this.mUIEndringerforlinjemedTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextDescription";
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIEndringerforlinjemedTreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIEndringerforlinjemedTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIBJARNETreeListCell;
        
        private DXTreeListCell mUIEndringerforlinjemedTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode22TreeListNode : DXTreeListNode
    {
        
        public UINode22TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node22";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Søking i database-logg");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIBJARNETreeListCell
        {
            get
            {
                if ((this.mUIBJARNETreeListCell == null))
                {
                    this.mUIBJARNETreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextUser";
                    this.mUIBJARNETreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIBJARNETreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIBJARNETreeListCell;
            }
        }
        
        public DXTreeListCell UIEndringerforlinjemedTreeListCell
        {
            get
            {
                if ((this.mUIEndringerforlinjemedTreeListCell == null))
                {
                    this.mUIEndringerforlinjemedTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colContextDescription";
                    this.mUIEndringerforlinjemedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIEndringerforlinjemedTreeListCell.WindowTitles.Add("Søking i database-logg");
                    #endregion
                }
                return this.mUIEndringerforlinjemedTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIBJARNETreeListCell;
        
        private DXTreeListCell mUIEndringerforlinjemedTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOverførtilleggWindow : DXWindow
    {
        
        public UIOverførtilleggWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Overfør tillegg";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Overfør tillegg");
            #endregion
        }
        
        #region Properties
        public UIGcExportsTable UIGcExportsTable
        {
            get
            {
                if ((this.mUIGcExportsTable == null))
                {
                    this.mUIGcExportsTable = new UIGcExportsTable(this);
                }
                return this.mUIGcExportsTable;
            }
        }
        
        public DXButton UIOverførButton
        {
            get
            {
                if ((this.mUIOverførButton == null))
                {
                    this.mUIOverførButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnExport";
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIOverførButton.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIOverførButton;
            }
        }
        #endregion
        
        #region Fields
        private UIGcExportsTable mUIGcExportsTable;
        
        private DXButton mUIOverførButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcExportsTable : DXGrid
    {
        
        public UIGcExportsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExports";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Overfør tillegg");
            #endregion
        }
        
        #region Properties
        public DXCell UIGustavssonRobertCell
        {
            get
            {
                if ((this.mUIGustavssonRobertCell == null))
                {
                    this.mUIGustavssonRobertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]0[Column]colEmployee";
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGustavssonRobertCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIGustavssonRobertCell;
            }
        }
        
        public DXCell UIKaspersenKasperCell
        {
            get
            {
                if ((this.mUIKaspersenKasperCell == null))
                {
                    this.mUIKaspersenKasperCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKaspersenKasperCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]1[Column]colEmployee";
                    this.mUIKaspersenKasperCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKaspersenKasperCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIKaspersenKasperCell;
            }
        }
        
        public DXCell UILassenLiselotteCell
        {
            get
            {
                if ((this.mUILassenLiselotteCell == null))
                {
                    this.mUILassenLiselotteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILassenLiselotteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]2[Column]colEmployee";
                    this.mUILassenLiselotteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILassenLiselotteCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUILassenLiselotteCell;
            }
        }
        
        public DXCell UIMikkelsenMikkelCell
        {
            get
            {
                if ((this.mUIMikkelsenMikkelCell == null))
                {
                    this.mUIMikkelsenMikkelCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMikkelsenMikkelCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]3[Column]colEmployee";
                    this.mUIMikkelsenMikkelCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMikkelsenMikkelCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIMikkelsenMikkelCell;
            }
        }
        
        public DXCell UISvendsenSvanhildCell
        {
            get
            {
                if ((this.mUISvendsenSvanhildCell == null))
                {
                    this.mUISvendsenSvanhildCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISvendsenSvanhildCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]4[Column]colEmployee";
                    this.mUISvendsenSvanhildCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISvendsenSvanhildCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUISvendsenSvanhildCell;
            }
        }
        
        public DXColumnHeader UIDXCheckboxSelectorCoColumnHeader
        {
            get
            {
                if ((this.mUIDXCheckboxSelectorCoColumnHeader == null))
                {
                    this.mUIDXCheckboxSelectorCoColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIDXCheckboxSelectorCoColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlColumnHeader[View]gvExports[Column]DX$CheckboxSelectorColumn";
                    this.mUIDXCheckboxSelectorCoColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIDXCheckboxSelectorCoColumnHeader.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIDXCheckboxSelectorCoColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIGustavssonRobertCell;
        
        private DXCell mUIKaspersenKasperCell;
        
        private DXCell mUILassenLiselotteCell;
        
        private DXCell mUIMikkelsenMikkelCell;
        
        private DXCell mUISvendsenSvanhildCell;
        
        private DXColumnHeader mUIDXCheckboxSelectorCoColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIverksetteWindow : DXWindow
    {
        
        public UIIverksetteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Iverksette";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Iverksette");
            #endregion
        }
        
        #region Properties
        public UIPnlTopClient UIPnlTopClient
        {
            get
            {
                if ((this.mUIPnlTopClient == null))
                {
                    this.mUIPnlTopClient = new UIPnlTopClient(this);
                }
                return this.mUIPnlTopClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlTopClient mUIPnlTopClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlTopClient : DXTestControl
    {
        
        public UIPnlTopClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlTop";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Iverksette");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UILnkDetailPopupEdit
        {
            get
            {
                if ((this.mUILnkDetailPopupEdit == null))
                {
                    this.mUILnkDetailPopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "lnkDetail";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "5";
                    this.mUILnkDetailPopupEdit.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUILnkDetailPopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUILnkDetailPopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISletteiverksettingWindow : DXWindow
    {
        
        public UISletteiverksettingWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Slette iverksetting";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Slette iverksetting");
            #endregion
        }
        
        #region Properties
        public UIPnlToppMenuClient UIPnlToppMenuClient
        {
            get
            {
                if ((this.mUIPnlToppMenuClient == null))
                {
                    this.mUIPnlToppMenuClient = new UIPnlToppMenuClient(this);
                }
                return this.mUIPnlToppMenuClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlToppMenuClient mUIPnlToppMenuClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlToppMenuClient : DXTestControl
    {
        
        public UIPnlToppMenuClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlToppMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Slette iverksetting");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UILnkDetailPopupEdit
        {
            get
            {
                if ((this.mUILnkDetailPopupEdit == null))
                {
                    this.mUILnkDetailPopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "lnkDetail";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "5";
                    this.mUILnkDetailPopupEdit.WindowTitles.Add("Slette iverksetting");
                    #endregion
                }
                return this.mUILnkDetailPopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUILnkDetailPopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIKravtilgodkjenningWindow : WinWindow
    {
        
        public UIKravtilgodkjenningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Krav til godkjenning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmRegEdit";
            this.WindowTitles.Add("Krav til godkjenning");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIKravtilgodkjenningClient UIKravtilgodkjenningClient
        {
            get
            {
                if ((this.mUIKravtilgodkjenningClient == null))
                {
                    this.mUIKravtilgodkjenningClient = new UIKravtilgodkjenningClient(this);
                }
                return this.mUIKravtilgodkjenningClient;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemClient1 UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient1(this);
                }
                return this.mUIItemClient;
            }
        }
        
        public UIItemClient11 UIItemClient1
        {
            get
            {
                if ((this.mUIItemClient1 == null))
                {
                    this.mUIItemClient1 = new UIItemClient11(this);
                }
                return this.mUIItemClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIKravtilgodkjenningClient mUIKravtilgodkjenningClient;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemClient1 mUIItemClient;
        
        private UIItemClient11 mUIItemClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.WindowTitles.Add("Krav til godkjenning");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.WindowTitles.Add("Krav til godkjenning");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIKravtilgodkjenningClient : WinClient
    {
        
        public UIKravtilgodkjenningClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Krav til godkjenning";
            this.WindowTitles.Add("Krav til godkjenning");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.SearchProperties[WinControl.PropertyNames.Name] = " ";
                    this.mUIItemClient.WindowTitles.Add("Krav til godkjenning");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TScrollBox";
            this.WindowTitles.Add("Krav til godkjenning");
            #endregion
        }
        
        #region Properties
        public UIItemClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient : WinClient
    {
        
        public UIItemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Krav til godkjenning");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UITillativerksettingutCheckBox
        {
            get
            {
                if ((this.mUITillativerksettingutCheckBox == null))
                {
                    this.mUITillativerksettingutCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUITillativerksettingutCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Tillat iverksetting uten godkjenning";
                    this.mUITillativerksettingutCheckBox.WindowTitles.Add("Krav til godkjenning");
                    #endregion
                }
                return this.mUITillativerksettingutCheckBox;
            }
        }
        
        public WinCheckBox UITillatoverføringavfaCheckBox
        {
            get
            {
                if ((this.mUITillatoverføringavfaCheckBox == null))
                {
                    this.mUITillatoverføringavfaCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUITillatoverføringavfaCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Tillat overføring av faste tillegg uten godkjenning";
                    this.mUITillatoverføringavfaCheckBox.WindowTitles.Add("Krav til godkjenning");
                    #endregion
                }
                return this.mUITillatoverføringavfaCheckBox;
            }
        }
        
        public WinCheckBox UITillatpubliseringavaCheckBox
        {
            get
            {
                if ((this.mUITillatpubliseringavaCheckBox == null))
                {
                    this.mUITillatpubliseringavaCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUITillatpubliseringavaCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Tillat publisering av arbeidsplan i MinGat uten godkjenning";
                    this.mUITillatpubliseringavaCheckBox.WindowTitles.Add("Krav til godkjenning");
                    #endregion
                }
                return this.mUITillatpubliseringavaCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUITillativerksettingutCheckBox;
        
        private WinCheckBox mUITillatoverføringavfaCheckBox;
        
        private WinCheckBox mUITillatpubliseringavaCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient1 : WinClient
    {
        
        public UIItemClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Krav til godkjenning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Krav til godkjenning");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient11 : WinClient
    {
        
        public UIItemClient11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Krav til godkjenning");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.SearchProperties[WinControl.PropertyNames.Name] = " ";
                    this.mUIItemClient.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItemClient.WindowTitles.Add("Krav til godkjenning");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT4001InformasjonWindow : DXWindow
    {
        
        public UIGT4001InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4001 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4001 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4001 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT4006InformasjonWindow : DXWindow
    {
        
        public UIGT4006InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4006 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4006 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4006 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsatteiarbeidsplanWindow : DXWindow
    {
        
        public UIAnsatteiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlOuterClient UIPanelControlOuterClient
        {
            get
            {
                if ((this.mUIPanelControlOuterClient == null))
                {
                    this.mUIPanelControlOuterClient = new UIPanelControlOuterClient(this);
                }
                return this.mUIPanelControlOuterClient;
            }
        }
        
        public UIPanelControlOuterClient1 UIPanelControlOuterClient1
        {
            get
            {
                if ((this.mUIPanelControlOuterClient1 == null))
                {
                    this.mUIPanelControlOuterClient1 = new UIPanelControlOuterClient1(this);
                }
                return this.mUIPanelControlOuterClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlOuterClient mUIPanelControlOuterClient;
        
        private UIPanelControlOuterClient1 mUIPanelControlOuterClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlOuterClient : DXTestControl
    {
        
        public UIPanelControlOuterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlRightClient UIPanelControlRightClient
        {
            get
            {
                if ((this.mUIPanelControlRightClient == null))
                {
                    this.mUIPanelControlRightClient = new UIPanelControlRightClient(this);
                }
                return this.mUIPanelControlRightClient;
            }
        }
        
        public UIPanelControlLeftClient UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlRightClient mUIPanelControlRightClient;
        
        private UIPanelControlLeftClient mUIPanelControlLeftClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlRightClient : DXTestControl
    {
        
        public UIPanelControlRightClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlRight";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom1 UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom1(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom1 mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom1 : DXTestControl
    {
        
        public UIViewHostCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient3 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient3(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient3 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient3 : DXTestControl
    {
        
        public UIPcViewClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIEmployeeEditorsViewCustom UIEmployeeEditorsViewCustom
        {
            get
            {
                if ((this.mUIEmployeeEditorsViewCustom == null))
                {
                    this.mUIEmployeeEditorsViewCustom = new UIEmployeeEditorsViewCustom(this);
                }
                return this.mUIEmployeeEditorsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeEditorsViewCustom mUIEmployeeEditorsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeEditorsViewCustom : DXTestControl
    {
        
        public UIEmployeeEditorsViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeEditorsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeEditorsView";
            #endregion
        }
        
        #region Properties
        public UIPcContentClient1 UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient1(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient1 mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient1 : DXTestControl
    {
        
        public UIPcContentClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIXscContentScrollableControl UIXscContentScrollableControl
        {
            get
            {
                if ((this.mUIXscContentScrollableControl == null))
                {
                    this.mUIXscContentScrollableControl = new UIXscContentScrollableControl(this);
                }
                return this.mUIXscContentScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscContentScrollableControl mUIXscContentScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXscContentScrollableControl : DXScrollableControl
    {
        
        public UIXscContentScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            #endregion
        }
        
        #region Properties
        public UIGroupControlViewHostCustom UIGroupControlViewHostCustom
        {
            get
            {
                if ((this.mUIGroupControlViewHostCustom == null))
                {
                    this.mUIGroupControlViewHostCustom = new UIGroupControlViewHostCustom(this);
                }
                return this.mUIGroupControlViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlViewHostCustom mUIGroupControlViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlViewHostCustom : DXTestControl
    {
        
        public UIGroupControlViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControlViewHost";
            #endregion
        }
        
        #region Properties
        public UIGroupControlClient UIGroupControlClient
        {
            get
            {
                if ((this.mUIGroupControlClient == null))
                {
                    this.mUIGroupControlClient = new UIGroupControlClient(this);
                }
                return this.mUIGroupControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlClient mUIGroupControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlClient : DXTestControl
    {
        
        public UIGroupControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerLineVCustom UIEmployeeManagerLineVCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerLineVCustom == null))
                {
                    this.mUIEmployeeManagerLineVCustom = new UIEmployeeManagerLineVCustom(this);
                }
                return this.mUIEmployeeManagerLineVCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerLineVCustom mUIEmployeeManagerLineVCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerLineVCustom : DXTestControl
    {
        
        public UIEmployeeManagerLineVCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerLineView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerLineView";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UIEUnionCodeLookUpEdit
        {
            get
            {
                if ((this.mUIEUnionCodeLookUpEdit == null))
                {
                    this.mUIEUnionCodeLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIEUnionCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eUnionCode";
                    this.mUIEUnionCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchLookUpEdit";
                    #endregion
                }
                return this.mUIEUnionCodeLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUIEUnionCodeLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlLeftClient : DXTestControl
    {
        
        public UIPanelControlLeftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITreeListEmployeeTreeList UITreeListEmployeeTreeList
        {
            get
            {
                if ((this.mUITreeListEmployeeTreeList == null))
                {
                    this.mUITreeListEmployeeTreeList = new UITreeListEmployeeTreeList(this);
                }
                return this.mUITreeListEmployeeTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListEmployeeTreeList mUITreeListEmployeeTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListEmployeeTreeList : DXTreeList
    {
        
        public UITreeListEmployeeTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode4TreeListNode UINode4TreeListNode
        {
            get
            {
                if ((this.mUINode4TreeListNode == null))
                {
                    this.mUINode4TreeListNode = new UINode4TreeListNode(this);
                }
                return this.mUINode4TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode4TreeListNode mUINode4TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode4TreeListNode : DXTreeListNode
    {
        
        public UINode4TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node4";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode : DXTreeListNode
    {
        
        public UINode0TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem150TreeListCell
        {
            get
            {
                if ((this.mUIItem150TreeListCell == null))
                {
                    this.mUIItem150TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem150TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem150TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem150TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlOuterClient1 : DXTestControl
    {
        
        public UIPanelControlOuterClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient1 UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient1(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        
        public UIPanelControlRightClient1 UIPanelControlRightClient
        {
            get
            {
                if ((this.mUIPanelControlRightClient == null))
                {
                    this.mUIPanelControlRightClient = new UIPanelControlRightClient1(this);
                }
                return this.mUIPanelControlRightClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient1 mUIPanelControlLeftClient;
        
        private UIPanelControlRightClient1 mUIPanelControlRightClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlLeftClient1 : DXTestControl
    {
        
        public UIPanelControlLeftClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITreeListEmployeeTreeList1 UITreeListEmployeeTreeList
        {
            get
            {
                if ((this.mUITreeListEmployeeTreeList == null))
                {
                    this.mUITreeListEmployeeTreeList = new UITreeListEmployeeTreeList1(this);
                }
                return this.mUITreeListEmployeeTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListEmployeeTreeList1 mUITreeListEmployeeTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListEmployeeTreeList1 : DXTreeList
    {
        
        public UITreeListEmployeeTreeList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode1TreeListNode UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode1TreeListNode mUINode1TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode : DXTreeListNode
    {
        
        public UINode1TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode1 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode1(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode1 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode1 : DXTreeListNode
    {
        
        public UINode0TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem1100TreeListCell
        {
            get
            {
                if ((this.mUIItem1100TreeListCell == null))
                {
                    this.mUIItem1100TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem1100TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem1100TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem1100TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlRightClient1 : DXTestControl
    {
        
        public UIPanelControlRightClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlRight";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom2 UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom2(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom2 mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom2 : DXTestControl
    {
        
        public UIViewHostCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient4 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient4(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient4 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient4 : DXTestControl
    {
        
        public UIPcViewClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIEmployeeEditorsViewCustom1 UIEmployeeEditorsViewCustom
        {
            get
            {
                if ((this.mUIEmployeeEditorsViewCustom == null))
                {
                    this.mUIEmployeeEditorsViewCustom = new UIEmployeeEditorsViewCustom1(this);
                }
                return this.mUIEmployeeEditorsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeEditorsViewCustom1 mUIEmployeeEditorsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeEditorsViewCustom1 : DXTestControl
    {
        
        public UIEmployeeEditorsViewCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeEditorsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeEditorsView";
            #endregion
        }
        
        #region Properties
        public UIPcContentClient2 UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient2(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient2 mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient2 : DXTestControl
    {
        
        public UIPcContentClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIXscContentScrollableControl1 UIXscContentScrollableControl
        {
            get
            {
                if ((this.mUIXscContentScrollableControl == null))
                {
                    this.mUIXscContentScrollableControl = new UIXscContentScrollableControl1(this);
                }
                return this.mUIXscContentScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscContentScrollableControl1 mUIXscContentScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXscContentScrollableControl1 : DXScrollableControl
    {
        
        public UIXscContentScrollableControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            #endregion
        }
        
        #region Properties
        public UIGroupControlViewHostCustom1 UIGroupControlViewHostCustom
        {
            get
            {
                if ((this.mUIGroupControlViewHostCustom == null))
                {
                    this.mUIGroupControlViewHostCustom = new UIGroupControlViewHostCustom1(this);
                }
                return this.mUIGroupControlViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlViewHostCustom1 mUIGroupControlViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlViewHostCustom1 : DXTestControl
    {
        
        public UIGroupControlViewHostCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControlViewHost";
            #endregion
        }
        
        #region Properties
        public UIGroupControlClient1 UIGroupControlClient
        {
            get
            {
                if ((this.mUIGroupControlClient == null))
                {
                    this.mUIGroupControlClient = new UIGroupControlClient1(this);
                }
                return this.mUIGroupControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlClient1 mUIGroupControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlClient1 : DXTestControl
    {
        
        public UIGroupControlClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerLineVCustom1 UIEmployeeManagerLineVCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerLineVCustom == null))
                {
                    this.mUIEmployeeManagerLineVCustom = new UIEmployeeManagerLineVCustom1(this);
                }
                return this.mUIEmployeeManagerLineVCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerLineVCustom1 mUIEmployeeManagerLineVCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerLineVCustom1 : DXTestControl
    {
        
        public UIEmployeeManagerLineVCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerLineView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerLineView";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UIEUnionCodeLookUpEdit
        {
            get
            {
                if ((this.mUIEUnionCodeLookUpEdit == null))
                {
                    this.mUIEUnionCodeLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIEUnionCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eUnionCode";
                    this.mUIEUnionCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchLookUpEdit";
                    #endregion
                }
                return this.mUIEUnionCodeLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUIEUnionCodeLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT1002AdvarselWindow : DXWindow
    {
        
        public UIGT1002AdvarselWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-1002 - Advarsel";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-1002 - Advarsel");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btOK";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("GT-1002 - Advarsel");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBrukeradministrasjonWindow : WinWindow
    {
        
        public UIBrukeradministrasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Bruker administrasjon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmFullAdm";
            this.WindowTitles.Add("Bruker administrasjon");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow31 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow31(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemClient3 UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient3(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UIItemWindow31 mUIItemWindow3;
        
        private UIItemClient3 mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.WindowTitles.Add("Bruker administrasjon");
            #endregion
        }
        
        #region Properties
        public UIBrukereClient UIBrukereClient
        {
            get
            {
                if ((this.mUIBrukereClient == null))
                {
                    this.mUIBrukereClient = new UIBrukereClient(this);
                }
                return this.mUIBrukereClient;
            }
        }
        #endregion
        
        #region Fields
        private UIBrukereClient mUIBrukereClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBrukereClient : WinClient
    {
        
        public UIBrukereClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Bruker administrasjon");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.SearchProperties[WinControl.PropertyNames.Name] = " ";
                    this.mUIItemClient.WindowTitles.Add("Bruker administrasjon");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TMSEdit";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "12";
            this.WindowTitles.Add("Bruker administrasjon");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Bruker administrasjon");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = " ";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "8";
            this.WindowTitles.Add("Bruker administrasjon");
            #endregion
        }
        
        #region Properties
        public UIItemClient2 UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient2(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemClient2 mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient2 : WinClient
    {
        
        public UIItemClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Bruker administrasjon");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Bruker administrasjon");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow31 : WinWindow
    {
        
        public UIItemWindow31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "10";
            this.WindowTitles.Add("Bruker administrasjon");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.WindowTitles.Add("Bruker administrasjon");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient3 : WinClient
    {
        
        public UIItemClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Bruker administrasjon");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient1
        {
            get
            {
                if ((this.mUIItemClient1 == null))
                {
                    this.mUIItemClient1 = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient1.SearchProperties[WinControl.PropertyNames.Name] = " ";
                    this.mUIItemClient1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItemClient1.WindowTitles.Add("Bruker administrasjon");
                    #endregion
                }
                return this.mUIItemClient1;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMikkelMikkelsenWindow : WinWindow
    {
        
        public UIMikkelMikkelsenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Mikkel Mikkelsen";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmBrkGrp";
            this.WindowTitles.Add("Mikkel Mikkelsen");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemClient4 UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient4(this);
                }
                return this.mUIItemClient;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemClient12 UIItemClient1
        {
            get
            {
                if ((this.mUIItemClient1 == null))
                {
                    this.mUIItemClient1 = new UIItemClient12(this);
                }
                return this.mUIItemClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UIItemClient4 mUIItemClient;
        
        private UIItemWindow13 mUIItemWindow1;
        
        private UIItemClient12 mUIItemClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.WindowTitles.Add("Mikkel Mikkelsen");
            #endregion
        }
        
        #region Properties
        public WinClient UIMikkelMikkelsenClient
        {
            get
            {
                if ((this.mUIMikkelMikkelsenClient == null))
                {
                    this.mUIMikkelMikkelsenClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIMikkelMikkelsenClient.WindowTitles.Add("Mikkel Mikkelsen");
                    #endregion
                }
                return this.mUIMikkelMikkelsenClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIMikkelMikkelsenClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient4 : WinClient
    {
        
        public UIItemClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Mikkel Mikkelsen");
            #endregion
        }
        
        #region Properties
        public WinButton UIFjernButton
        {
            get
            {
                if ((this.mUIFjernButton == null))
                {
                    this.mUIFjernButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFjernButton.SearchProperties[WinButton.PropertyNames.Name] = "Fjern ->";
                    this.mUIFjernButton.WindowTitles.Add("Mikkel Mikkelsen");
                    #endregion
                }
                return this.mUIFjernButton;
            }
        }
        
        public WinButton UILeggtilButton
        {
            get
            {
                if ((this.mUILeggtilButton == null))
                {
                    this.mUILeggtilButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILeggtilButton.SearchProperties[WinButton.PropertyNames.Name] = "<- Legg til";
                    this.mUILeggtilButton.WindowTitles.Add("Mikkel Mikkelsen");
                    #endregion
                }
                return this.mUILeggtilButton;
            }
        }
        
        public WinButton UIAlleButton
        {
            get
            {
                if ((this.mUIAlleButton == null))
                {
                    this.mUIAlleButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAlleButton.SearchProperties[WinButton.PropertyNames.Name] = "Alle ->>";
                    this.mUIAlleButton.WindowTitles.Add("Mikkel Mikkelsen");
                    #endregion
                }
                return this.mUIAlleButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFjernButton;
        
        private WinButton mUILeggtilButton;
        
        private WinButton mUIAlleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Mikkel Mikkelsen");
            #endregion
        }
        
        #region Properties
        public WinClient UIMikkelMikkelsenClient
        {
            get
            {
                if ((this.mUIMikkelMikkelsenClient == null))
                {
                    this.mUIMikkelMikkelsenClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIMikkelMikkelsenClient.WindowTitles.Add("Mikkel Mikkelsen");
                    #endregion
                }
                return this.mUIMikkelMikkelsenClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIMikkelMikkelsenClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient12 : WinClient
    {
        
        public UIItemClient12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Mikkel Mikkelsen");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Mikkel Mikkelsen");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow14 : WinWindow
    {
        
        public UIItemWindow14()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu1 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu1(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu1 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu1 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIEndreansattinnstilliMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIEndreansattinnstilliMenuBaseButtonItem == null))
                {
                    this.mUIEndreansattinnstilliMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIEndreansattinnstilliMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIEndreansattinnstilliMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIEndreansattinnstilliMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIEndrelinjeinnstillinMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIEndrelinjeinnstillinMenuBaseButtonItem == null))
                {
                    this.mUIEndrelinjeinnstillinMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIEndrelinjeinnstillinMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIEndrelinjeinnstillinMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIEndrelinjeinnstillinMenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIEndreansattinnstilliMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIEndrelinjeinnstillinMenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow22 : WinWindow
    {
        
        public UIItemWindow22()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu2 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu2(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu2 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu2 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIEndreansattinnstilliMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIEndreansattinnstilliMenuBaseButtonItem == null))
                {
                    this.mUIEndreansattinnstilliMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIEndreansattinnstilliMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIEndreansattinnstilliMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIEndreansattinnstilliMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIEndrelinjeinnstillinMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIEndrelinjeinnstillinMenuBaseButtonItem == null))
                {
                    this.mUIEndrelinjeinnstillinMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIEndrelinjeinnstillinMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIEndrelinjeinnstillinMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIEndrelinjeinnstillinMenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIEndreansattinnstilliMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIEndrelinjeinnstillinMenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatAutomatedTestsDebWindow : WpfWindow
    {
        
        public UIGatAutomatedTestsDebWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "GatAutomatedTests (Debugging) - Microsoft Visual Studio  (Administrator)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GatAutomatedTests (Debugging) - Microsoft Visual Studio  (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WrapListView";
            this.WindowTitles.Add("GatAutomatedTests (Debugging) - Microsoft Visual Studio  (Administrator)");
            #endregion
        }
        
        #region Properties
        public UITrackingListViewTable UITrackingListViewTable
        {
            get
            {
                if ((this.mUITrackingListViewTable == null))
                {
                    this.mUITrackingListViewTable = new UITrackingListViewTable(this);
                }
                return this.mUITrackingListViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UITrackingListViewTable mUITrackingListViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITrackingListViewTable : WpfTable
    {
        
        public UITrackingListViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "Tracking List View";
            this.WindowTitles.Add("GatAutomatedTests (Debugging) - Microsoft Visual Studio  (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIHeaderRowHeader UIHeaderRowHeader
        {
            get
            {
                if ((this.mUIHeaderRowHeader == null))
                {
                    this.mUIHeaderRowHeader = new UIHeaderRowHeader(this);
                }
                return this.mUIHeaderRowHeader;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderRowHeader mUIHeaderRowHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIHeaderRowHeader : WpfControl
    {
        
        public UIHeaderRowHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Header";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Header Row";
            this.WindowTitles.Add("GatAutomatedTests (Debugging) - Microsoft Visual Studio  (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfControl UILineHeaderItem
        {
            get
            {
                if ((this.mUILineHeaderItem == null))
                {
                    this.mUILineHeaderItem = new WpfControl(this);
                    #region Search Criteria
                    this.mUILineHeaderItem.SearchProperties[WpfControl.PropertyNames.ControlType] = "HeaderItem";
                    this.mUILineHeaderItem.SearchProperties[WpfControl.PropertyNames.AutomationId] = "line";
                    this.mUILineHeaderItem.WindowTitles.Add("GatAutomatedTests (Debugging) - Microsoft Visual Studio  (Administrator)");
                    #endregion
                }
                return this.mUILineHeaderItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUILineHeaderItem;
        #endregion
    }
}
