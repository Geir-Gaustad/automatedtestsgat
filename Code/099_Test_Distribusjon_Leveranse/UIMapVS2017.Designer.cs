// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _099_Test_Distribusjon_Leveranse.UIMapVS2017Classes
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v19_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMapVS2017
    {
        
        /// <summary>
        /// CheckAppService - Use 'CheckAppServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAppService()
        {
            #region Variable Declarations
            HtmlHyperlink uIProcessAppFlexQueueHyperlink = this.UIAppServiceWebServiceWindow.UIAppServiceWebServiceDocument.UIContentPane.UIProcessAppFlexQueueHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'ProcessAppFlexQueue' link equals 'ProcessAppFlexQueue'
            Assert.AreEqual(this.CheckAppServiceExpectedValues.UIProcessAppFlexQueueHyperlinkInnerText, uIProcessAppFlexQueueHyperlink.InnerText);

            // Verify that the 'Href' property of 'ProcessAppFlexQueue' link equals 'http://localhost/GatWs1/AppService.asmx?op=ProcessAppFlexQueue'
            Assert.AreEqual(this.CheckAppServiceExpectedValues.UIProcessAppFlexQueueHyperlinkHref, uIProcessAppFlexQueueHyperlink.Href);
        }
        
        /// <summary>
        /// CheckBussinesAnalyzeService - Use 'CheckBussinesAnalyzeServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckBussinesAnalyzeService()
        {
            #region Variable Declarations
            HtmlHyperlink uIExecuteBusinessFunctHyperlink = this.UIAppServiceWebServiceWindow.UIBussinesAnalyzeServiDocument.UIContentPane.UIExecuteBusinessFunctHyperlink;
            HtmlHyperlink uIUpdateBussinessAnalyHyperlink = this.UIAppServiceWebServiceWindow.UIBussinesAnalyzeServiDocument.UIContentPane.UIUpdateBussinessAnalyHyperlink;
            #endregion

            // Verify that the 'Href' property of 'ExecuteBusinessFunctionForShiftsOverrideScheduler' link equals 'http://localhost/GatWs1/BussinesAnalyzeService.asmx?op=ExecuteBusinessFunctionForShiftsOverrideScheduler'
            Assert.AreEqual(this.CheckBussinesAnalyzeServiceExpectedValues.UIExecuteBusinessFunctHyperlinkHref, uIExecuteBusinessFunctHyperlink.Href);

            // Verify that the 'Href' property of 'UpdateBussinessAnalyzeData' link equals 'http://localhost/GatWs1/BussinesAnalyzeService.asmx?op=UpdateBussinessAnalyzeData'
            Assert.AreEqual(this.CheckBussinesAnalyzeServiceExpectedValues.UIUpdateBussinessAnalyHyperlinkHref, uIUpdateBussinessAnalyHyperlink.Href);
        }
        
        /// <summary>
        /// CheckCalendarIntegrationWebService - Use 'CheckCalendarIntegrationWebServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalendarIntegrationWebService()
        {
            #region Variable Declarations
            HtmlHyperlink uIDistributeHyperlink = this.UIAppServiceWebServiceWindow.UICalendarIntegrationWDocument.UIContentPane.UIDistributeHyperlink;
            #endregion

            // Verify that the 'Href' property of 'Distribute' link equals 'http://localhost/GatWs1/CalendarIntegrationWebService.asmx?op=Distribute'
            Assert.AreEqual(this.CheckCalendarIntegrationWebServiceExpectedValues.UIDistributeHyperlinkHref, uIDistributeHyperlink.Href);
        }
        
        /// <summary>
        /// CheckCalendarService - Use 'CheckCalendarServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalendarService()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetJourShiftsHyperlink = this.UIAppServiceWebServiceWindow.UICalendarServiceWebSeDocument.UIContentPane.UIGetJourShiftsHyperlink;
            #endregion

            // Verify that the 'Href' property of 'GetJourShifts' link equals 'http://localhost/GatWs1/CalendarService.asmx?op=GetJourShifts'
            Assert.AreEqual(this.CheckCalendarServiceExpectedValues.UIGetJourShiftsHyperlinkHref, uIGetJourShiftsHyperlink.Href);
        }
        
        /// <summary>
        /// CheckCommunicationQueueService - Use 'CheckCommunicationQueueServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCommunicationQueueService()
        {
            #region Variable Declarations
            HtmlHyperlink uIFillMessageQueueWithHyperlink = this.UIGatWebservices2MainPWindow.UICommunicationQueueSeDocument.UIContentPane.UIFillMessageQueueWithHyperlink;
            HtmlHyperlink uIFillMessageQueueWithHyperlink1 = this.UIGatWebservices2MainPWindow.UICommunicationQueueSeDocument.UIContentPane.UIFillMessageQueueWithHyperlink1;
            HtmlHyperlink uIProcessMailQueueHyperlink = this.UIGatWebservices2MainPWindow.UICommunicationQueueSeDocument.UIContentPane.UIProcessMailQueueHyperlink;
            #endregion

            // Verify that the 'Href' property of 'FillMessageQueueWithDashboardWarnings' link equals 'http://localhost/GatWs2/CommunicationQueueService.asmx?op=FillMessageQueueWithDashboardWarnings'
            Assert.AreEqual(this.CheckCommunicationQueueServiceExpectedValues.UIFillMessageQueueWithHyperlinkHref, uIFillMessageQueueWithHyperlink.Href);

            // Verify that the 'Href' property of 'FillMessageQueueWithDashboardWarningsOverrideSched...' link equals 'http://localhost/GatWs2/CommunicationQueueService.asmx?op=FillMessageQueueWithDashboardWarningsOverrideScheduler'
            Assert.AreEqual(this.CheckCommunicationQueueServiceExpectedValues.UIFillMessageQueueWithHyperlink1Href, uIFillMessageQueueWithHyperlink1.Href);

            // Verify that the 'Href' property of 'ProcessMailQueue' link equals 'http://localhost/GatWs2/CommunicationQueueService.asmx?op=ProcessMailQueue'
            Assert.AreEqual(this.CheckCommunicationQueueServiceExpectedValues.UIProcessMailQueueHyperlinkHref, uIProcessMailQueueHyperlink.Href);
        }
        
        /// <summary>
        /// CheckDepartmentServiceV20182 - Use 'CheckDepartmentServiceV20182ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDepartmentServiceV20182()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetDepartmentRosterHyperlink = this.UIDepartmentServiceV20Window.UIDepartmentServiceV20Document.UIContentPane.UIGetDepartmentRosterHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'GetDepartmentRoster' link equals 'GetDepartmentRoster'
            Assert.AreEqual(this.CheckDepartmentServiceV20182ExpectedValues.UIGetDepartmentRosterHyperlinkInnerText, uIGetDepartmentRosterHyperlink.InnerText);
        }
        
        /// <summary>
        /// CheckDepartmentServiceV20191 - Use 'CheckDepartmentServiceV20191ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDepartmentServiceV20191()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetDepartmentRosterHyperlink = this.UIDepartmentServiceV20Window1.UIDepartmentServiceV20Document.UIContentPane.UIGetDepartmentRosterHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'GetDepartmentRoster' link equals 'GetDepartmentRoster'
            Assert.AreEqual(this.CheckDepartmentServiceV20191ExpectedValues.UIGetDepartmentRosterHyperlinkInnerText, uIGetDepartmentRosterHyperlink.InnerText);
        }
        
        /// <summary>
        /// CheckEmployeeChangeTrackingService - Use 'CheckEmployeeChangeTrackingServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeeChangeTrackingService()
        {
            #region Variable Declarations
            HtmlHyperlink uIPushEmployeeDataChanHyperlink = this.UIDepartmentServiceV20Window1.UIEmployeeChangeTrackiDocument.UIContentPane.UIPushEmployeeDataChanHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'PushEmployeeDataChanges' link equals 'PushEmployeeDataChanges'
            Assert.AreEqual(this.CheckEmployeeChangeTrackingServiceExpectedValues.UIPushEmployeeDataChanHyperlinkInnerText, uIPushEmployeeDataChanHyperlink.InnerText);

            // Verify that the 'Href' property of 'PushEmployeeDataChanges' link equals 'http://localhost/GatWs1/EmployeeChangeTrackingService.asmx?op=PushEmployeeDataChanges'
            Assert.AreEqual(this.CheckEmployeeChangeTrackingServiceExpectedValues.UIPushEmployeeDataChanHyperlinkHref, uIPushEmployeeDataChanHyperlink.Href);
        }
        
        /// <summary>
        /// CheckEmployeeServiceV63 - Use 'CheckEmployeeServiceV63ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeeServiceV63()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetEmployeeHyperlink = this.UIDepartmentServiceV20Window1.UIEmployeeServiceV63WeDocument.UIContentPane.UIGetEmployeeHyperlink;
            HtmlHyperlink uIGetJobAgreementHyperlink = this.UIDepartmentServiceV20Window1.UIEmployeeServiceV63WeDocument.UIContentPane.UIGetJobAgreementHyperlink;
            HtmlHyperlink uIGetWorkHoursHyperlink = this.UIDepartmentServiceV20Window1.UIEmployeeServiceV63WeDocument.UIContentPane.UIGetWorkHoursHyperlink;
            HtmlHyperlink uIUpdateEmployeeHyperlink = this.UIDepartmentServiceV20Window1.UIEmployeeServiceV63WeDocument.UIContentPane.UIUpdateEmployeeHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'GetEmployee' link equals 'GetEmployee'
            Assert.AreEqual(this.CheckEmployeeServiceV63ExpectedValues.UIGetEmployeeHyperlinkInnerText, uIGetEmployeeHyperlink.InnerText);

            // Verify that the 'Href' property of 'GetEmployee' link equals 'http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetEmployee'
            Assert.AreEqual(this.CheckEmployeeServiceV63ExpectedValues.UIGetEmployeeHyperlinkHref, uIGetEmployeeHyperlink.Href);

            // Verify that the 'InnerText' property of 'GetJobAgreement' link equals 'GetJobAgreement'
            Assert.AreEqual(this.CheckEmployeeServiceV63ExpectedValues.UIGetJobAgreementHyperlinkInnerText, uIGetJobAgreementHyperlink.InnerText);

            // Verify that the 'Href' property of 'GetJobAgreement' link equals 'http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetJobAgreement'
            Assert.AreEqual(this.CheckEmployeeServiceV63ExpectedValues.UIGetJobAgreementHyperlinkHref, uIGetJobAgreementHyperlink.Href);

            // Verify that the 'InnerText' property of 'GetWorkHours' link equals 'GetWorkHours'
            Assert.AreEqual(this.CheckEmployeeServiceV63ExpectedValues.UIGetWorkHoursHyperlinkInnerText, uIGetWorkHoursHyperlink.InnerText);

            // Verify that the 'Href' property of 'GetWorkHours' link equals 'http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetWorkHours'
            Assert.AreEqual(this.CheckEmployeeServiceV63ExpectedValues.UIGetWorkHoursHyperlinkHref, uIGetWorkHoursHyperlink.Href);

            // Verify that the 'InnerText' property of 'UpdateEmployee' link equals 'UpdateEmployee'
            Assert.AreEqual(this.CheckEmployeeServiceV63ExpectedValues.UIUpdateEmployeeHyperlinkInnerText, uIUpdateEmployeeHyperlink.InnerText);

            // Verify that the 'Href' property of 'UpdateEmployee' link equals 'http://localhost/GatWs1/EmployeeServiceV63.asmx?op=UpdateEmployee'
            Assert.AreEqual(this.CheckEmployeeServiceV63ExpectedValues.UIUpdateEmployeeHyperlinkHref, uIUpdateEmployeeHyperlink.Href);
        }
        
        /// <summary>
        /// CheckExportService - Use 'CheckExportServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckExportService()
        {
            #region Variable Declarations
            HtmlHyperlink uIPostAfterSystemExporHyperlink = this.UIAppServiceWebServiceWindow.UIExportServiceWebServDocument.UIContentPane.UIPostAfterSystemExporHyperlink;
            HtmlHyperlink uIProcessAfterSystemExHyperlink = this.UIAppServiceWebServiceWindow.UIExportServiceWebServDocument.UIContentPane.UIProcessAfterSystemExHyperlink;
            HtmlHyperlink uIProcessNextAfterSystHyperlink = this.UIAppServiceWebServiceWindow.UIExportServiceWebServDocument.UIContentPane.UIProcessNextAfterSystHyperlink;
            #endregion

            // Verify that the 'Href' property of 'PostAfterSystemExportReceipt' link equals 'http://localhost/GatWs1/ExportService.asmx?op=PostAfterSystemExportReceipt'
            Assert.AreEqual(this.CheckExportServiceExpectedValues.UIPostAfterSystemExporHyperlinkHref, uIPostAfterSystemExporHyperlink.Href);

            // Verify that the 'Href' property of 'ProcessAfterSystemExport' link equals 'http://localhost/GatWs1/ExportService.asmx?op=ProcessAfterSystemExport'
            Assert.AreEqual(this.CheckExportServiceExpectedValues.UIProcessAfterSystemExHyperlinkHref, uIProcessAfterSystemExHyperlink.Href);

            // Verify that the 'Href' property of 'ProcessNextAfterSystemExportJob' link equals 'http://localhost/GatWs1/ExportService.asmx?op=ProcessNextAfterSystemExportJob'
            Assert.AreEqual(this.CheckExportServiceExpectedValues.UIProcessNextAfterSystHyperlinkHref, uIProcessNextAfterSystHyperlink.Href);
        }
        
        /// <summary>
        /// CheckExternalFlexService - Use 'CheckExternalFlexServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckExternalFlexService()
        {
            #region Variable Declarations
            HtmlHyperlink uIHttplocalhostGatWs1EHyperlink1 = this.UIGatExternalFlexServiWindow.UIGatExternalFlexServiDocument.UIContentPane.UIHttplocalhostGatWs1EHyperlink1;
            #endregion

            // Verify that the 'Href' property of 'http://localhost/GatWs1/ExternalFlexService.svc?si...' link equals 'http://localhost/GatWs1/ExternalFlexService.svc?singleWsdl'
            Assert.AreEqual(this.CheckExternalFlexServiceExpectedValues.UIHttplocalhostGatWs1EHyperlink1Href, uIHttplocalhostGatWs1EHyperlink1.Href);
        }
        
        /// <summary>
        /// CheckExternalFlexService_SE - Use 'CheckExternalFlexService_SEExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckExternalFlexService_SE()
        {
            #region Variable Declarations
            HtmlHyperlink uIHttplocalhostGatWs1_Hyperlink2 = this.UIGatExternalFlexServiWindow.UIGatExternalFlexServiDocument1.UIContentPane.UIHttplocalhostGatWs1_Hyperlink2;
            #endregion

            // Verify that the 'Href' property of 'http://localhost/GatWs1_se/ExternalFlexService.svc...' link equals 'http://localhost/GatWs1_se/ExternalFlexService.svc?singleWsdl'
            Assert.AreEqual(this.CheckExternalFlexService_SEExpectedValues.UIHttplocalhostGatWs1_Hyperlink2Href, uIHttplocalhostGatWs1_Hyperlink2.Href);
        }
        
        /// <summary>
        /// CheckFlexExportService - Use 'CheckFlexExportServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFlexExportService()
        {
            #region Variable Declarations
            HtmlHyperlink uIHttplocalhostGatWs1FHyperlink = this.UIAppServiceWebServiceWindow.UIGatFlexExportServiceDocument.UIContentPane.UIHttplocalhostGatWs1FHyperlink;
            #endregion

            // Verify that the 'Href' property of 'http://localhost/GatWs1/FlexExportService.svc?sing...' link equals 'http://localhost/GatWs1/FlexExportService.svc?singleWsdl'
            Assert.AreEqual(this.CheckFlexExportServiceExpectedValues.UIHttplocalhostGatWs1FHyperlinkHref, uIHttplocalhostGatWs1FHyperlink.Href);
        }
        
        /// <summary>
        /// CheckFlexExportService_SE - Use 'CheckFlexExportService_SEExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFlexExportService_SE()
        {
            #region Variable Declarations
            HtmlHyperlink uIHttplocalhostGatWs1_Hyperlink = this.UISickleaveMessageImpoWindow1.UIGatFlexExportServiceDocument.UIContentPane.UIHttplocalhostGatWs1_Hyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'http://localhost/GatWs1_se/FlexExportService.svc?s...' link equals 'http://localhost/GatWs1_se/FlexExportService.svc?singleWsdl'
            Assert.AreEqual(this.CheckFlexExportService_SEExpectedValues.UIHttplocalhostGatWs1_HyperlinkInnerText, uIHttplocalhostGatWs1_Hyperlink.InnerText);
        }
        
        /// <summary>
        /// CheckFlexService - Use 'CheckFlexServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFlexService()
        {
            #region Variable Declarations
            HtmlHyperlink uIUpdateUserAltIDHyperlink = this.UIAppServiceWebServiceWindow.UIGatFlexServicesWebSeDocument.UIContentPane.UIUpdateUserAltIDHyperlink;
            HtmlHyperlink uIDeleteQueueAbsencePeHyperlink = this.UIAppServiceWebServiceWindow.UIGatFlexServicesWebSeDocument.UIContentPane.UIDeleteQueueAbsencePeHyperlink;
            #endregion

            // Verify that the 'Href' property of 'UpdateUserAltID' link equals 'http://localhost/GatWs1/FlexService.asmx?op=UpdateUserAltID'
            Assert.AreEqual(this.CheckFlexServiceExpectedValues.UIUpdateUserAltIDHyperlinkHref, uIUpdateUserAltIDHyperlink.Href);

            // Verify that the 'Href' property of 'DeleteQueueAbsencePeriods' link equals 'http://localhost/GatWs1/FlexService.asmx?op=DeleteQueueAbsencePeriods'
            Assert.AreEqual(this.CheckFlexServiceExpectedValues.UIDeleteQueueAbsencePeHyperlinkHref, uIDeleteQueueAbsencePeHyperlink.Href);

            // Verify that the 'TagInstance' property of 'UpdateUserAltID' link equals '63'
            Assert.AreEqual(this.CheckFlexServiceExpectedValues.UIUpdateUserAltIDHyperlinkTagInstance, uIUpdateUserAltIDHyperlink.TagInstance);
        }
        
        /// <summary>
        /// CheckFlexService_SE - Use 'CheckFlexService_SEExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFlexService_SE()
        {
            #region Variable Declarations
            HtmlHyperlink uIDeleteQueueAbsencePeHyperlink = this.UISickleaveMessageImpoWindow2.UIGatFlexServicesWebSeDocument.UIContentPane.UIDeleteQueueAbsencePeHyperlink;
            HtmlHyperlink uIEmployeeIsFlexUserHyperlink = this.UISickleaveMessageImpoWindow2.UIGatFlexServicesWebSeDocument.UIContentPane.UIEmployeeIsFlexUserHyperlink;
            HtmlHyperlink uIEmployeeIsInHyperlink = this.UISickleaveMessageImpoWindow2.UIGatFlexServicesWebSeDocument.UIContentPane.UIEmployeeIsInHyperlink;
            HtmlHyperlink uIEmployeeIsInOutOrHasHyperlink = this.UISickleaveMessageImpoWindow2.UIGatFlexServicesWebSeDocument.UIContentPane.UIEmployeeIsInOutOrHasHyperlink;
            HtmlHyperlink uIEmployeeLastStampHyperlink = this.UISickleaveMessageImpoWindow2.UIGatFlexServicesWebSeDocument.UIContentPane.UIEmployeeLastStampHyperlink;
            HtmlHyperlink uIEmployeeLastStampTimHyperlink = this.UISickleaveMessageImpoWindow2.UIGatFlexServicesWebSeDocument.UIContentPane.UIEmployeeLastStampTimHyperlink;
            HtmlHyperlink uIUpdateUserAltIDHyperlink = this.UISickleaveMessageImpoWindow2.UIGatFlexServicesWebSeDocument.UIContentPane.UIUpdateUserAltIDHyperlink;
            #endregion

            // Verify that the 'Href' property of 'DeleteQueueAbsencePeriods' link equals 'http://localhost/GatWs1_se/FlexService.asmx?op=DeleteQueueAbsencePeriods'
            Assert.AreEqual(this.CheckFlexService_SEExpectedValues.UIDeleteQueueAbsencePeHyperlinkHref, uIDeleteQueueAbsencePeHyperlink.Href);

            // Verify that the 'InnerText' property of 'EmployeeIsFlexUser' link equals 'EmployeeIsFlexUser'
            Assert.AreEqual(this.CheckFlexService_SEExpectedValues.UIEmployeeIsFlexUserHyperlinkInnerText, uIEmployeeIsFlexUserHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'EmployeeIsIn' link equals 'EmployeeIsIn'
            Assert.AreEqual(this.CheckFlexService_SEExpectedValues.UIEmployeeIsInHyperlinkInnerText, uIEmployeeIsInHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'EmployeeIsInOutOrHasBeenHere' link equals 'EmployeeIsInOutOrHasBeenHere'
            Assert.AreEqual(this.CheckFlexService_SEExpectedValues.UIEmployeeIsInOutOrHasHyperlinkInnerText, uIEmployeeIsInOutOrHasHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'EmployeeLastStamp' link equals 'EmployeeLastStamp'
            Assert.AreEqual(this.CheckFlexService_SEExpectedValues.UIEmployeeLastStampHyperlinkInnerText, uIEmployeeLastStampHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'EmployeeLastStampTime' link equals 'EmployeeLastStampTime'
            Assert.AreEqual(this.CheckFlexService_SEExpectedValues.UIEmployeeLastStampTimHyperlinkInnerText, uIEmployeeLastStampTimHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'UpdateUserAltID' link equals 'UpdateUserAltID'
            Assert.AreEqual(this.CheckFlexService_SEExpectedValues.UIUpdateUserAltIDHyperlinkInnerText, uIUpdateUserAltIDHyperlink.InnerText);

            // Verify that the 'TagInstance' property of 'UpdateUserAltID' link equals '63'
            Assert.AreEqual(this.CheckFlexService_SEExpectedValues.UIUpdateUserAltIDHyperlinkTagInstance, uIUpdateUserAltIDHyperlink.TagInstance);
        }
        
        /// <summary>
        /// CheckGatFlexExternalServiceLink - Use 'CheckGatFlexExternalServiceLinkExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckGatFlexExternalServiceLink()
        {
            #region Variable Declarations
            HtmlHyperlink uIHttplocalhostGatWs1EHyperlink = this.UIGatExternalFlexServiWindow.UIGatExternalFlexServiDocument.UIContentPane.UIHttplocalhostGatWs1EHyperlink;
            HtmlHyperlink uIHttplocalhostGatWs1EHyperlink1 = this.UIGatExternalFlexServiWindow.UIGatExternalFlexServiDocument.UIContentPane.UIHttplocalhostGatWs1EHyperlink1;
            #endregion

            // Verify that the 'InnerText' property of 'http://localhost/GatWs1/ExternalFlexService.svc?ws...' link equals 'http://localhost/GatWs1/ExternalFlexService.svc?wsdl'
            Assert.AreEqual(this.CheckGatFlexExternalServiceLinkExpectedValues.UIHttplocalhostGatWs1EHyperlinkInnerText, uIHttplocalhostGatWs1EHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'http://localhost/GatWs1/ExternalFlexService.svc?si...' link equals 'http://localhost/GatWs1/ExternalFlexService.svc?singleWsdl'
            Assert.AreEqual(this.CheckGatFlexExternalServiceLinkExpectedValues.UIHttplocalhostGatWs1EHyperlink1InnerText, uIHttplocalhostGatWs1EHyperlink1.InnerText);
        }
        
        /// <summary>
        /// CheckGatFlexExternalServiceLink_se - Use 'CheckGatFlexExternalServiceLink_seExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckGatFlexExternalServiceLink_se()
        {
            #region Variable Declarations
            HtmlHyperlink uIHttplocalhostGatWs1_Hyperlink = this.UIGatExternalFlexServiWindow.UIGatExternalFlexServiDocument1.UIContentPane.UIHttplocalhostGatWs1_Hyperlink;
            HtmlHyperlink uIHttplocalhostGatWs1_Hyperlink1 = this.UIGatExternalFlexServiWindow.UIGatExternalFlexServiDocument1.UIContentPane.UIHttplocalhostGatWs1_Hyperlink1;
            #endregion

            // Verify that the 'InnerText' property of 'http://localhost/GatWs1_se/ExternalFlexService.svc...' link equals 'http://localhost/GatWs1_se/ExternalFlexService.svc?wsdl'
            Assert.AreEqual(this.CheckGatFlexExternalServiceLink_seExpectedValues.UIHttplocalhostGatWs1_HyperlinkInnerText, uIHttplocalhostGatWs1_Hyperlink.InnerText);

            // Verify that the 'InnerText' property of 'http://localhost/GatWs1_se/ExternalFlexService.svc...' link equals 'http://localhost/GatWs1_se/ExternalFlexService.svc?singleWsdl'
            Assert.AreEqual(this.CheckGatFlexExternalServiceLink_seExpectedValues.UIHttplocalhostGatWs1_Hyperlink1InnerText, uIHttplocalhostGatWs1_Hyperlink1.InnerText);
        }
        
        /// <summary>
        /// CheckGatGerica - Use 'CheckGatGericaExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckGatGerica()
        {
            #region Variable Declarations
            HtmlHyperlink uIA_PrsGericaWS_GenereHyperlink = this.UIDepartmentServiceV20Window2.UIGatGericaWebServiceDocument.UIContentPane.UIA_PrsGericaWS_GenereHyperlink;
            HtmlHyperlink uIFinnBrukerForIDHyperlink = this.UIDepartmentServiceV20Window2.UIGatGericaWebServiceDocument.UIContentPane.UIFinnBrukerForIDHyperlink;
            HtmlHyperlink uIGetVersionHyperlink = this.UIDepartmentServiceV20Window2.UIGatGericaWebServiceDocument.UIContentPane.UIGetVersionHyperlink;
            HtmlHyperlink uILesAnsettelseHyperlink = this.UIDepartmentServiceV20Window2.UIGatGericaWebServiceDocument.UIContentPane.UILesAnsettelseHyperlink;
            HtmlHyperlink uILesFravaerForPersonHyperlink = this.UIDepartmentServiceV20Window2.UIGatGericaWebServiceDocument.UIContentPane.UILesFravaerForPersonHyperlink;
            HtmlHyperlink uILesOrgenhetHyperlink = this.UIDepartmentServiceV20Window2.UIGatGericaWebServiceDocument.UIContentPane.UILesOrgenhetHyperlink;
            HtmlHyperlink uILesPersonHyperlink = this.UIDepartmentServiceV20Window2.UIGatGericaWebServiceDocument.UIContentPane.UILesPersonHyperlink;
            HtmlHyperlink uILesPlanForPeriodeHyperlink = this.UIDepartmentServiceV20Window2.UIGatGericaWebServiceDocument.UIContentPane.UILesPlanForPeriodeHyperlink;
            HtmlHyperlink uILesVaktForPersonHyperlink = this.UIDepartmentServiceV20Window2.UIGatGericaWebServiceDocument.UIContentPane.UILesVaktForPersonHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'A_PrsGericaWS_Generell_Info' link equals 'A_PrsGericaWS_Generell_Info'
            Assert.AreEqual(this.CheckGatGericaExpectedValues.UIA_PrsGericaWS_GenereHyperlinkInnerText, uIA_PrsGericaWS_GenereHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'FinnBrukerForID' link equals 'FinnBrukerForID'
            Assert.AreEqual(this.CheckGatGericaExpectedValues.UIFinnBrukerForIDHyperlinkInnerText, uIFinnBrukerForIDHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'GetVersion' link equals 'GetVersion'
            Assert.AreEqual(this.CheckGatGericaExpectedValues.UIGetVersionHyperlinkInnerText, uIGetVersionHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'LesAnsettelse' link equals 'LesAnsettelse'
            Assert.AreEqual(this.CheckGatGericaExpectedValues.UILesAnsettelseHyperlinkInnerText, uILesAnsettelseHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'LesFravaerForPerson' link equals 'LesFravaerForPerson'
            Assert.AreEqual(this.CheckGatGericaExpectedValues.UILesFravaerForPersonHyperlinkInnerText, uILesFravaerForPersonHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'LesOrgenhet' link equals 'LesOrgenhet'
            Assert.AreEqual(this.CheckGatGericaExpectedValues.UILesOrgenhetHyperlinkInnerText, uILesOrgenhetHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'LesPerson' link equals 'LesPerson'
            Assert.AreEqual(this.CheckGatGericaExpectedValues.UILesPersonHyperlinkInnerText, uILesPersonHyperlink.InnerText);

            // Verify that the 'InnerText' property of 'LesPlanForPeriode' link equals 'LesPlanForPeriode'
            Assert.AreEqual(this.CheckGatGericaExpectedValues.UILesPlanForPeriodeHyperlinkInnerText, uILesPlanForPeriodeHyperlink.InnerText);

            // Verify that the 'Href' property of 'LesVaktForPerson' link equals 'http://localhost/GatWs1/GatGerica.asmx?op=LesVaktForPerson'
            Assert.AreEqual(this.CheckGatGericaExpectedValues.UILesVaktForPersonHyperlinkHref, uILesVaktForPersonHyperlink.Href);
        }
        
        /// <summary>
        /// CheckGatTaskSchedulerDataService - Use 'CheckGatTaskSchedulerDataServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckGatTaskSchedulerDataService()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetScheduledTasksHyperlink = this.UIAppServiceWebServiceWindow.UIGatTaskSchedulerDataDocument.UIContentPane.UIGetScheduledTasksHyperlink;
            #endregion

            // Verify that the 'Href' property of 'GetScheduledTasks' link equals 'http://localhost/GatWs1/GatTaskSchedulerDataService.asmx?op=GetScheduledTasks'
            Assert.AreEqual(this.CheckGatTaskSchedulerDataServiceExpectedValues.UIGetScheduledTasksHyperlinkHref, uIGetScheduledTasksHyperlink.Href);
        }
        
        /// <summary>
        /// CheckIdmService - Use 'CheckIdmServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckIdmService()
        {
            #region Variable Declarations
            HtmlHyperlink uIActivateUserHyperlink = this.UIGatWebservices2MainPWindow.UIIdmServiceWebServiceDocument.UIContentPane.UIActivateUserHyperlink;
            HtmlHyperlink uIActivateUserByDateHyperlink = this.UIGatWebservices2MainPWindow.UIIdmServiceWebServiceDocument.UIContentPane.UIActivateUserByDateHyperlink;
            HtmlHyperlink uIAdvancedCreateOrUpdaHyperlink = this.UIGatWebservices2MainPWindow.UIIdmServiceWebServiceDocument.UIContentPane.UIAdvancedCreateOrUpdaHyperlink;
            HtmlHyperlink uIAdvancedCreateOrUpdaHyperlink1 = this.UIGatWebservices2MainPWindow.UIIdmServiceWebServiceDocument.UIContentPane.UIAdvancedCreateOrUpdaHyperlink1;
            HtmlHyperlink uIGetUsersHyperlink = this.UIGatWebservices2MainPWindow.UIIdmServiceWebServiceDocument.UIContentPane.UIGetUsersHyperlink;
            HtmlHyperlink uIGetUsers_UserNameHyperlink = this.UIGatWebservices2MainPWindow.UIIdmServiceWebServiceDocument.UIContentPane.UIGetUsers_UserNameHyperlink;
            HtmlHyperlink uIHelloWorldHyperlink = this.UIGatWebservices2MainPWindow.UIIdmServiceWebServiceDocument.UIContentPane.UIHelloWorldHyperlink;
            #endregion

            // Verify that the 'Href' property of 'ActivateUser' link equals 'http://localhost/GatWs2/IdmService.asmx?op=ActivateUser'
            Assert.AreEqual(this.CheckIdmServiceExpectedValues.UIActivateUserHyperlinkHref, uIActivateUserHyperlink.Href);

            // Verify that the 'Href' property of 'ActivateUserByDate' link equals 'http://localhost/GatWs2/IdmService.asmx?op=ActivateUserByDate'
            Assert.AreEqual(this.CheckIdmServiceExpectedValues.UIActivateUserByDateHyperlinkHref, uIActivateUserByDateHyperlink.Href);

            // Verify that the 'Href' property of 'AdvancedCreateOrUpdateUser' link equals 'http://localhost/GatWs2/IdmService.asmx?op=AdvancedCreateOrUpdateUser'
            Assert.AreEqual(this.CheckIdmServiceExpectedValues.UIAdvancedCreateOrUpdaHyperlinkHref, uIAdvancedCreateOrUpdaHyperlink.Href);

            // Verify that the 'Href' property of 'AdvancedCreateOrUpdateUserByToDate' link equals 'http://localhost/GatWs2/IdmService.asmx?op=AdvancedCreateOrUpdateUserByToDate'
            Assert.AreEqual(this.CheckIdmServiceExpectedValues.UIAdvancedCreateOrUpdaHyperlink1Href, uIAdvancedCreateOrUpdaHyperlink1.Href);

            // Verify that the 'Href' property of 'GetUsers' link equals 'http://localhost/GatWs2/IdmService.asmx?op=GetUsers'
            Assert.AreEqual(this.CheckIdmServiceExpectedValues.UIGetUsersHyperlinkHref, uIGetUsersHyperlink.Href);

            // Verify that the 'Href' property of 'GetUsers_UserName' link equals 'http://localhost/GatWs2/IdmService.asmx?op=GetUsers_UserName'
            Assert.AreEqual(this.CheckIdmServiceExpectedValues.UIGetUsers_UserNameHyperlinkHref, uIGetUsers_UserNameHyperlink.Href);

            // Verify that the 'Href' property of 'HelloWorld' link equals 'http://localhost/GatWs2/IdmService.asmx?op=HelloWorld'
            Assert.AreEqual(this.CheckIdmServiceExpectedValues.UIHelloWorldHyperlinkHref, uIHelloWorldHyperlink.Href);
        }
        
        /// <summary>
        /// CheckImportService - Use 'CheckImportServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckImportService()
        {
            #region Variable Declarations
            HtmlHyperlink uIInsertDepEmp_v2Hyperlink = this.UIDepartmentServiceV20Window3.UIImportServiceWebServDocument.UIContentPane.UIInsertDepEmp_v2Hyperlink;
            HtmlHyperlink uIInsertDepartment_v2Hyperlink = this.UIDepartmentServiceV20Window3.UIImportServiceWebServDocument.UIContentPane.UIInsertDepartment_v2Hyperlink;
            HtmlHyperlink uIInsertEmployeeHyperlink = this.UIDepartmentServiceV20Window3.UIImportServiceWebServDocument.UIContentPane.UIInsertEmployeeHyperlink;
            #endregion

            // Verify that the 'Href' property of 'InsertDepEmp_v2' link equals 'http://localhost/GatWs1/ImportService.asmx?op=InsertDepEmp_v2'
            Assert.AreEqual(this.CheckImportServiceExpectedValues.UIInsertDepEmp_v2HyperlinkHref, uIInsertDepEmp_v2Hyperlink.Href);

            // Verify that the 'Href' property of 'InsertDepartment_v2' link equals 'http://localhost/GatWs1/ImportService.asmx?op=InsertDepartment_v2'
            Assert.AreEqual(this.CheckImportServiceExpectedValues.UIInsertDepartment_v2HyperlinkHref, uIInsertDepartment_v2Hyperlink.Href);

            // Verify that the 'Href' property of 'InsertEmployee' link equals 'http://localhost/GatWs1/ImportService.asmx?op=InsertEmployee'
            Assert.AreEqual(this.CheckImportServiceExpectedValues.UIInsertEmployeeHyperlinkHref, uIInsertEmployeeHyperlink.Href);
        }
        
        /// <summary>
        /// CheckPatientInformationService - Use 'CheckPatientInformationServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPatientInformationService()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetDepartmentAppointHyperlink = this.UIDepartmentServiceV20Window4.UIPatientInformationSeDocument.UIContentPane.UIGetDepartmentAppointHyperlink;
            HtmlHyperlink uIGetEmployeeAppointmeHyperlink = this.UIDepartmentServiceV20Window4.UIPatientInformationSeDocument.UIContentPane.UIGetEmployeeAppointmeHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'GetDepartmentAppointments' link equals 'GetDepartmentAppointments'
            Assert.AreEqual(this.CheckPatientInformationServiceExpectedValues.UIGetDepartmentAppointHyperlinkInnerText, uIGetDepartmentAppointHyperlink.InnerText);

            // Verify that the 'Href' property of 'GetDepartmentAppointments' link equals 'http://localhost/GatWs1/PatientInformationService.asmx?op=GetDepartmentAppointments'
            Assert.AreEqual(this.CheckPatientInformationServiceExpectedValues.UIGetDepartmentAppointHyperlinkHref, uIGetDepartmentAppointHyperlink.Href);

            // Verify that the 'Href' property of 'GetEmployeeAppointments' link equals 'http://localhost/GatWs1/PatientInformationService.asmx?op=GetEmployeeAppointments'
            Assert.AreEqual(this.CheckPatientInformationServiceExpectedValues.UIGetEmployeeAppointmeHyperlinkHref, uIGetEmployeeAppointmeHyperlink.Href);
        }
        
        /// <summary>
        /// CheckPayslipImportService - Use 'CheckPayslipImportServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPayslipImportService()
        {
            #region Variable Declarations
            HtmlHyperlink uIImportPayslipsHyperlink = this.UIAppServiceWebServiceWindow.UIPayslipImportServiceDocument.UIContentPane.UIImportPayslipsHyperlink;
            #endregion

            // Verify that the 'Href' property of 'ImportPayslips' link equals 'http://localhost/GatWs1/PayslipImportService.asmx?op=ImportPayslips'
            Assert.AreEqual(this.CheckPayslipImportServiceExpectedValues.UIImportPayslipsHyperlinkHref, uIImportPayslipsHyperlink.Href);
        }
        
        /// <summary>
        /// CheckReshRosterService - Use 'CheckReshRosterServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckReshRosterService()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetReshRosterHyperlink = this.UIDepartmentServiceV20Window5.UIReshRosterServiceWebDocument.UIContentPane.UIGetReshRosterHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'GetReshRoster' link equals 'GetReshRoster'
            Assert.AreEqual(this.CheckReshRosterServiceExpectedValues.UIGetReshRosterHyperlinkInnerText, uIGetReshRosterHyperlink.InnerText);

            // Verify that the 'Href' property of 'GetReshRoster' link equals 'http://localhost/GatWs1/ReshRosterService.asmx?op=GetReshRoster'
            Assert.AreEqual(this.CheckReshRosterServiceExpectedValues.UIGetReshRosterHyperlinkHref, uIGetReshRosterHyperlink.Href);
        }
        
        /// <summary>
        /// CheckRoleDepartmentServiceV20182 - Use 'CheckRoleDepartmentServiceV20182ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleDepartmentServiceV20182()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetDepartmentRolesHyperlink = this.UIDepartmentServiceV20Window.UIRoleDepartmentServicDocument.UIContentPane.UIGetDepartmentRolesHyperlink;
            HtmlHyperlink uIGetDisplayRolesHyperlink = this.UIDepartmentServiceV20Window.UIRoleDepartmentServicDocument.UIContentPane.UIGetDisplayRolesHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'GetDepartmentRoles' link equals 'GetDepartmentRoles'
            Assert.AreEqual(this.CheckRoleDepartmentServiceV20182ExpectedValues.UIGetDepartmentRolesHyperlinkInnerText, uIGetDepartmentRolesHyperlink.InnerText);

            // Verify that the 'Href' property of 'GetDepartmentRoles' link equals 'http://localhost/GatWs1/RoleDepartmentServiceV20182.asmx?op=GetDepartmentRoles'
            Assert.AreEqual(this.CheckRoleDepartmentServiceV20182ExpectedValues.UIGetDepartmentRolesHyperlinkHref, uIGetDepartmentRolesHyperlink.Href);

            // Verify that the 'InnerText' property of 'GetDisplayRoles' link equals 'GetDisplayRoles'
            Assert.AreEqual(this.CheckRoleDepartmentServiceV20182ExpectedValues.UIGetDisplayRolesHyperlinkInnerText, uIGetDisplayRolesHyperlink.InnerText);

            // Verify that the 'Href' property of 'GetDisplayRoles' link equals 'http://localhost/GatWs1/RoleDepartmentServiceV20182.asmx?op=GetDisplayRoles'
            Assert.AreEqual(this.CheckRoleDepartmentServiceV20182ExpectedValues.UIGetDisplayRolesHyperlinkHref, uIGetDisplayRolesHyperlink.Href);
        }
        
        /// <summary>
        /// CheckSickleaveMessageImportService - Use 'CheckSickleaveMessageImportServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSickleaveMessageImportService()
        {
            #region Variable Declarations
            HtmlHyperlink uIHttplocalhostGatWs1SHyperlink2 = this.UISickleaveMessageImpoWindow.UISickleaveMessageImpoDocument.UIContentPane.UIHttplocalhostGatWs1SHyperlink2;
            #endregion

            // Verify that the 'Href' property of 'http://localhost/GatWs1/SickleaveMessageImportServ...' link equals 'http://localhost/GatWs1/SickleaveMessageImportService.svc?singleWsdl'
            Assert.AreEqual(this.CheckSickleaveMessageImportServiceExpectedValues.UIHttplocalhostGatWs1SHyperlink2Href, uIHttplocalhostGatWs1SHyperlink2.Href);
        }
        
        /// <summary>
        /// CheckSickleaveMessageImportService_SE - Use 'CheckSickleaveMessageImportService_SEExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSickleaveMessageImportService_SE()
        {
            #region Variable Declarations
            HtmlHyperlink uIHttplocalhostGatWs1_Hyperlink2 = this.UISickleaveMessageImpoWindow.UISickleaveMessageImpoDocument1.UIContentPane.UIHttplocalhostGatWs1_Hyperlink2;
            #endregion

            // Verify that the 'InnerText' property of 'http://localhost/GatWs1_se/SickleaveMessageImportS...' link equals 'http://localhost/GatWs1_se/SickleaveMessageImportService.svc?singleWsdl'
            Assert.AreEqual(this.CheckSickleaveMessageImportService_SEExpectedValues.UIHttplocalhostGatWs1_Hyperlink2InnerText, uIHttplocalhostGatWs1_Hyperlink2.InnerText);
        }
        
        /// <summary>
        /// CheckSmsByMailReader - Use 'CheckSmsByMailReaderExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSmsByMailReader()
        {
            #region Variable Declarations
            HtmlHyperlink uIReadMailQueueAndCreaHyperlink = this.UIAppServiceWebServiceWindow1.UISmsByMailReaderWebSeDocument.UIContentPane.UIReadMailQueueAndCreaHyperlink;
            #endregion

            // Verify that the 'Href' property of 'ReadMailQueueAndCreateSms' link equals 'http://localhost/GatWs1/SmsByMailReader.asmx?op=ReadMailQueueAndCreateSms'
            Assert.AreEqual(this.CheckSmsByMailReaderExpectedValues.UIReadMailQueueAndCreaHyperlinkHref, uIReadMailQueueAndCreaHyperlink.Href);
        }
        
        /// <summary>
        /// CheckSmsGatewayService - Use 'CheckSmsGatewayServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSmsGatewayService()
        {
            #region Variable Declarations
            HtmlHyperlink uIAddToInboxHyperlink = this.UIDepartmentServiceV20Window6.UISmsGatewayServiceWebDocument.UIContentPane.UIAddToInboxHyperlink;
            HtmlHyperlink uIGetMessagesInOutboxHyperlink = this.UIDepartmentServiceV20Window6.UISmsGatewayServiceWebDocument.UIContentPane.UIGetMessagesInOutboxHyperlink;
            HtmlHyperlink uIGetUnsentMessagesHyperlink = this.UIDepartmentServiceV20Window6.UISmsGatewayServiceWebDocument.UIContentPane.UIGetUnsentMessagesHyperlink;
            HtmlHyperlink uIMarkMessageHyperlink = this.UIDepartmentServiceV20Window6.UISmsGatewayServiceWebDocument.UIContentPane.UIMarkMessageHyperlink;
            HtmlHyperlink uIMessageCleanUpHyperlink = this.UIDepartmentServiceV20Window6.UISmsGatewayServiceWebDocument.UIContentPane.UIMessageCleanUpHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'AddToInbox' link equals 'AddToInbox'
            Assert.AreEqual(this.CheckSmsGatewayServiceExpectedValues.UIAddToInboxHyperlinkInnerText, uIAddToInboxHyperlink.InnerText);

            // Verify that the 'Href' property of 'AddToInbox' link equals 'http://localhost/GatWs1/SmsGatewayService.asmx?op=AddToInbox'
            Assert.AreEqual(this.CheckSmsGatewayServiceExpectedValues.UIAddToInboxHyperlinkHref, uIAddToInboxHyperlink.Href);

            // Verify that the 'Href' property of 'GetMessagesInOutbox' link equals 'http://localhost/GatWs1/SmsGatewayService.asmx?op=GetMessagesInOutbox'
            Assert.AreEqual(this.CheckSmsGatewayServiceExpectedValues.UIGetMessagesInOutboxHyperlinkHref, uIGetMessagesInOutboxHyperlink.Href);

            // Verify that the 'Href' property of 'GetUnsentMessages' link equals 'http://localhost/GatWs1/SmsGatewayService.asmx?op=GetUnsentMessages'
            Assert.AreEqual(this.CheckSmsGatewayServiceExpectedValues.UIGetUnsentMessagesHyperlinkHref, uIGetUnsentMessagesHyperlink.Href);

            // Verify that the 'Href' property of 'MarkMessage' link equals 'http://localhost/GatWs1/SmsGatewayService.asmx?op=MarkMessage'
            Assert.AreEqual(this.CheckSmsGatewayServiceExpectedValues.UIMarkMessageHyperlinkHref, uIMarkMessageHyperlink.Href);

            // Verify that the 'Href' property of 'MessageCleanUp' link equals 'http://localhost/GatWs1/SmsGatewayService.asmx?op=MessageCleanUp'
            Assert.AreEqual(this.CheckSmsGatewayServiceExpectedValues.UIMessageCleanUpHyperlinkHref, uIMessageCleanUpHyperlink.Href);
        }
        
        /// <summary>
        /// CheckSmsService - Use 'CheckSmsServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSmsService()
        {
            #region Variable Declarations
            HtmlHyperlink uIProcessSmsQueuesHyperlink = this.UIAppServiceWebServiceWindow2.UISmsServiceWebServiceDocument.UIContentPane.UIProcessSmsQueuesHyperlink;
            #endregion

            // Verify that the 'Href' property of 'ProcessSmsQueues' link equals 'http://localhost/GatWs1/SmsService.asmx?op=ProcessSmsQueues'
            Assert.AreEqual(this.CheckSmsServiceExpectedValues.UIProcessSmsQueuesHyperlinkHref, uIProcessSmsQueuesHyperlink.Href);
        }
        
        /// <summary>
        /// CheckSystemInformationService - Use 'CheckSystemInformationServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSystemInformationService()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetAliveStatusHyperlink = this.UIAppServiceWebServiceWindow3.UISystemInformationSerDocument.UIContentPane.UIGetAliveStatusHyperlink;
            #endregion

            // Verify that the 'Href' property of 'GetAliveStatus' link equals 'http://localhost/GatWs1/SystemInformationService.asmx?op=GetAliveStatus'
            Assert.AreEqual(this.CheckSystemInformationServiceExpectedValues.UIGetAliveStatusHyperlinkHref, uIGetAliveStatusHyperlink.Href);
        }
        
        /// <summary>
        /// CheckTaskAgreementService - Use 'CheckTaskAgreementServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTaskAgreementService()
        {
            #region Variable Declarations
            HtmlHyperlink uIUpdateTaskAgreementHyperlink = this.UIAppServiceWebServiceWindow4.UITaskAgreementServiceDocument.UIContentPane.UIUpdateTaskAgreementHyperlink;
            #endregion

            // Verify that the 'Href' property of 'UpdateTaskAgreement' link equals 'http://localhost/GatWs1/TaskAgreementService.asmx?op=UpdateTaskAgreement'
            Assert.AreEqual(this.CheckTaskAgreementServiceExpectedValues.UIUpdateTaskAgreementHyperlinkHref, uIUpdateTaskAgreementHyperlink.Href);
        }
        
        /// <summary>
        /// CheckTestService - Use 'CheckTestServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTestService()
        {
            #region Variable Declarations
            HtmlHyperlink uITestDatabaseConnectiHyperlink = this.UIAppServiceWebServiceWindow5.UITestServiceWebServicDocument.UIContentPane.UITestDatabaseConnectiHyperlink;
            #endregion

            // Verify that the 'Href' property of 'TestDatabaseConnection' link equals 'http://localhost/GatWs1/TestService.asmx?op=TestDatabaseConnection'
            Assert.AreEqual(this.CheckTestServiceExpectedValues.UITestDatabaseConnectiHyperlinkHref, uITestDatabaseConnectiHyperlink.Href);
        }
        
        /// <summary>
        /// CheckTimeregImport - Use 'CheckTimeregImportExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTimeregImport()
        {
            #region Variable Declarations
            HtmlHyperlink uIImportTimeregRegistrHyperlink = this.UIGatWebservices2MainPWindow.UITimeregImportWebServDocument.UIContentPane.UIImportTimeregRegistrHyperlink;
            #endregion

            // Verify that the 'Href' property of 'ImportTimeregRegistration' link equals 'http://localhost/GatWs2/TimeregImport.asmx?op=ImportTimeregRegistration'
            Assert.AreEqual(this.CheckTimeregImportExpectedValues.UIImportTimeregRegistrHyperlinkHref, uIImportTimeregRegistrHyperlink.Href);
        }
        
        /// <summary>
        /// CheckUniqueService - Use 'CheckUniqueServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckUniqueService()
        {
            #region Variable Declarations
            HtmlHyperlink uIProfilturnusFaaPersoHyperlink = this.UIGatWebservices2MainPWindow.UIUniqueServiceWebServDocument.UIContentPane.UIProfilturnusFaaPersoHyperlink;
            HtmlHyperlink uIProfilturnusFaaStillHyperlink = this.UIGatWebservices2MainPWindow.UIUniqueServiceWebServDocument.UIContentPane.UIProfilturnusFaaStillHyperlink;
            HtmlHyperlink uIProfilturnusFaaVaktpHyperlink = this.UIGatWebservices2MainPWindow.UIUniqueServiceWebServDocument.UIContentPane.UIProfilturnusFaaVaktpHyperlink;
            HtmlHyperlink uIProfilturnus_functioHyperlink = this.UIGatWebservices2MainPWindow.UIUniqueServiceWebServDocument.UIContentPane.UIProfilturnus_functioHyperlink;
            #endregion

            // Verify that the 'Href' property of 'ProfilturnusFaaPerson' link equals 'http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaPerson'
            Assert.AreEqual(this.CheckUniqueServiceExpectedValues.UIProfilturnusFaaPersoHyperlinkHref, uIProfilturnusFaaPersoHyperlink.Href);

            // Verify that the 'Href' property of 'ProfilturnusFaaStilling' link equals 'http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaStilling'
            Assert.AreEqual(this.CheckUniqueServiceExpectedValues.UIProfilturnusFaaStillHyperlinkHref, uIProfilturnusFaaStillHyperlink.Href);

            // Verify that the 'Href' property of 'ProfilturnusFaaVaktplan' link equals 'http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaVaktplan'
            Assert.AreEqual(this.CheckUniqueServiceExpectedValues.UIProfilturnusFaaVaktpHyperlinkHref, uIProfilturnusFaaVaktpHyperlink.Href);

            // Verify that the 'Href' property of 'profilturnus_function' link equals 'http://localhost/GatWs2/UniqueService.asmx?op=profilturnus_function'
            Assert.AreEqual(this.CheckUniqueServiceExpectedValues.UIProfilturnus_functioHyperlinkHref, uIProfilturnus_functioHyperlink.Href);
        }
        
        /// <summary>
        /// CheckWeaBreakService - Use 'CheckWeaBreakServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWeaBreakService()
        {
            #region Variable Declarations
            HtmlHyperlink uICalculateWeaAndSaveWHyperlink = this.UIAppServiceWebServiceWindow6.UIWeaBreakServiceWebSeDocument.UIContentPane.UICalculateWeaAndSaveWHyperlink;
            HtmlHyperlink uICalculateWeaAndSaveWHyperlink1 = this.UIAppServiceWebServiceWindow6.UIWeaBreakServiceWebSeDocument.UIContentPane.UICalculateWeaAndSaveWHyperlink1;
            HtmlHyperlink uICalculateWeaAndSaveWHyperlink2 = this.UIAppServiceWebServiceWindow6.UIWeaBreakServiceWebSeDocument.UIContentPane.UICalculateWeaAndSaveWHyperlink2;
            #endregion

            // Verify that the 'Href' property of 'CalculateWeaAndSaveWeaBreaksForEmployee' link equals 'http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksForEmployee'
            Assert.AreEqual(this.CheckWeaBreakServiceExpectedValues.UICalculateWeaAndSaveWHyperlinkHref, uICalculateWeaAndSaveWHyperlink.Href);

            // Verify that the 'Href' property of 'CalculateWeaAndSaveWeaBreaksOverrideScheduler' link equals 'http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksOverrideScheduler'
            Assert.AreEqual(this.CheckWeaBreakServiceExpectedValues.UICalculateWeaAndSaveWHyperlink1Href, uICalculateWeaAndSaveWHyperlink1.Href);

            // Verify that the 'Href' property of 'CalculateWeaAndSaveWeaBreaksUsingScheduler' link equals 'http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksUsingScheduler'
            Assert.AreEqual(this.CheckWeaBreakServiceExpectedValues.UICalculateWeaAndSaveWHyperlink2Href, uICalculateWeaAndSaveWHyperlink2.Href);
        }
        
        /// <summary>
        /// CheckWishPlan - Use 'CheckWishPlanExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWishPlan()
        {
            #region Variable Declarations
            WinText uIØnskeplanforBASEPLANText = this.UIMinønskeplanMinGatv2Window.UIItemWindow.UISilverlightControlWindow.UIØnskeplanforBASEPLANText;
            #endregion

            // Verify that the 'Name' property of 'Ønskeplan for BASEPLAN TIL AUTOTEST' label equals 'Ønskeplan for BASEPLAN TIL AUTOTEST'
            Assert.AreEqual(this.CheckWishPlanExpectedValues.UIØnskeplanforBASEPLANTextName, uIØnskeplanforBASEPLANText.Name);
        }
        
        /// <summary>
        /// CheckWishPlanWebService - Use 'CheckWishPlanWebServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWishPlanWebService()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetAdditionalDataHyperlink = this.UIGatWebservices2MainPWindow.UIWishPlanWebServiceWeDocument.UIContentPane.UIGetAdditionalDataHyperlink;
            HtmlHyperlink uIGetDemandHyperlink = this.UIGatWebservices2MainPWindow.UIWishPlanWebServiceWeDocument.UIContentPane.UIGetDemandHyperlink;
            HtmlHyperlink uIGetPlanHyperlink = this.UIGatWebservices2MainPWindow.UIWishPlanWebServiceWeDocument.UIContentPane.UIGetPlanHyperlink;
            HtmlHyperlink uISavePlanHyperlink = this.UIGatWebservices2MainPWindow.UIWishPlanWebServiceWeDocument.UIContentPane.UISavePlanHyperlink;
            #endregion

            // Verify that the 'Href' property of 'GetAdditionalData' link equals 'http://localhost/GatWs2/WishPlanWebService.asmx?op=GetAdditionalData'
            Assert.AreEqual(this.CheckWishPlanWebServiceExpectedValues.UIGetAdditionalDataHyperlinkHref, uIGetAdditionalDataHyperlink.Href);

            // Verify that the 'Href' property of 'GetDemand' link equals 'http://localhost/GatWs2/WishPlanWebService.asmx?op=GetDemand'
            Assert.AreEqual(this.CheckWishPlanWebServiceExpectedValues.UIGetDemandHyperlinkHref, uIGetDemandHyperlink.Href);

            // Verify that the 'Href' property of 'GetPlan' link equals 'http://localhost/GatWs2/WishPlanWebService.asmx?op=GetPlan'
            Assert.AreEqual(this.CheckWishPlanWebServiceExpectedValues.UIGetPlanHyperlinkHref, uIGetPlanHyperlink.Href);

            // Verify that the 'Href' property of 'SavePlan' link equals 'http://localhost/GatWs2/WishPlanWebService.asmx?op=SavePlan'
            Assert.AreEqual(this.CheckWishPlanWebServiceExpectedValues.UISavePlanHyperlinkHref, uISavePlanHyperlink.Href);
        }
        
        /// <summary>
        /// CountServices - Use 'CountServicesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CountServices()
        {
            #region Variable Declarations
            HtmlHyperlink uIWeaBreakServiceHyperlink = this.UIGatWebserviceMainPagWindow.UIGatWebserviceMainPagDocument.UIWeaBreakServiceHyperlink;
            #endregion

            // Verify that the 'TagInstance' property of 'WeaBreakService' link equals '28'
            Assert.AreEqual(this.CountServicesExpectedValues.UIWeaBreakServiceHyperlinkTagInstance, uIWeaBreakServiceHyperlink.TagInstance);
        }
        
        /// <summary>
        /// CountServicesWs2 - Use 'CountServicesWs2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CountServicesWs2()
        {
            #region Variable Declarations
            HtmlHyperlink uIWishPlanWebServiceHyperlink = this.UIGatWebservices2MainPWindow.UIGatWebservices2MainPDocument.UIWishPlanWebServiceHyperlink;
            #endregion

            // Verify that the 'TagInstance' property of 'WishPlanWebService' link equals '4'
            Assert.AreEqual(this.CountServicesWs2ExpectedValues.UIWishPlanWebServiceHyperlinkTagInstance, uIWishPlanWebServiceHyperlink.TagInstance);
        }
        
        /// <summary>
        /// OpenWishplan
        /// </summary>
        public void OpenWishplan()
        {
            #region Variable Declarations
            HtmlDiv uIMinGatPane1 = this.UIStartsidenMinGatv201Window.UIStartsidenMinGatv201Document.UIMinGatPane.UIMinGatPane1;
            HtmlHyperlink uIØnskeplanerHyperlink = this.UIStartsidenMinGatv201Window.UIStartsidenMinGatv201Document.UIMenuHeader_mainMenuPane.UIØnskeplanerHyperlink;
            #endregion

            // Click 'MinGat' pane
            Mouse.Click(uIMinGatPane1, new Point(36, 19));

            // Click 'Ønskeplaner' link
            Mouse.Click(uIØnskeplanerHyperlink, new Point(59, 29));
        }
        
        /// <summary>
        /// OpenWishplan_se
        /// </summary>
        public void OpenWishplan_se()
        {
            #region Variable Declarations
            HtmlDiv uIMinGatPane1 = this.UIStartsidanMinGatv201Window.UIStartsidanMinGatv201Document.UIMinGatPane.UIMinGatPane1;
            HtmlHyperlink uIÖnskeplanerHyperlink = this.UIStartsidanMinGatv201Window.UIStartsidanMinGatv201Document.UIMenuHeader_mainMenuPane.UIÖnskeplanerHyperlink;
            #endregion

            // Click 'MinGat' pane
            Mouse.Click(uIMinGatPane1, new Point(37, 21));

            // Click 'Önskeplaner' link
            Mouse.Click(uIÖnskeplanerHyperlink, new Point(58, 30));
        }
        
        /// <summary>
        /// SelectWishplan
        /// </summary>
        public void SelectWishplan()
        {
            #region Variable Declarations
            HtmlHyperlink uINyfaneHyperlink = this.UIMinønskeplanMinGatv2Window.UIMinønskeplanMinGatv2Document.UIMyWishPlansGridGridPane.UINyfaneHyperlink;
            #endregion

            // Click 'ny fane' link
            Mouse.Click(uINyfaneHyperlink, new Point(20, 10));
        }
        
        /// <summary>
        /// SelectWishplan_se
        /// </summary>
        public void SelectWishplan_se()
        {
            #region Variable Declarations
            HtmlHyperlink uINyflikHyperlink = this.UIMinønskeplanMinGatv2Window.UIMinønskeplanMinGatv2Document1.UIMyWishPlansGridGridPane.UINyflikHyperlink;
            #endregion

            // Click 'ny flik' link
            Mouse.Click(uINyflikHyperlink, new Point(20, 10));
        }
        
        /// <summary>
        /// SetupServiceJobs
        /// </summary>
        public void SetupServiceJobs()
        {
            #region Variable Declarations
            DXCell uIBehandlekømedendringCell = this.UIOppsettavservicejobbWindow.UIPanelControl1Client.UIRibbonViewHostCustom.UIPcViewClient.UIScheduledTasksViewCustom.UIGcTasksTable.UIBehandlekømedendringCell;
            DXRibbonItem uIAktivRibbonItem = this.UIOppsettavservicejobbWindow.UIRibbonControlRibbon.UIRibbonPage1RibbonPage.UIRpgServicesRibbonPageGroup.UIAktivRibbonItem;
            DXCell uIKalkulerAMLbruddCell = this.UIOppsettavservicejobbWindow.UIPanelControl1Client.UIRibbonViewHostCustom.UIPcViewClient.UIScheduledTasksViewCustom.UIGcTasksTable.UIKalkulerAMLbruddCell;
            DXCell uIOppdatereBussinessAnCell = this.UIOppsettavservicejobbWindow.UIPanelControl1Client.UIRibbonViewHostCustom.UIPcViewClient.UIScheduledTasksViewCustom.UIGcTasksTable.UIOppdatereBussinessAnCell;
            DXRibbonButtonItem uILagreRibbonBaseButtonItem = this.UIOppsettavservicejobbWindow.UIRibbonControlRibbon.UIRibbonPage1RibbonPage.UIRibbonPageGroup1RibbonPageGroup.UILagreRibbonBaseButtonItem;
            DXButton uICloseButton = this.UIOppsettavservicejobbWindow.UIRibbonControlRibbon.UICloseButton;
            #endregion

            // Click 'Behandle kø med endringer i fravær' cell
            Mouse.Click(uIBehandlekømedendringCell, new Point(62, 9));

            // Click 'Aktiv' RibbonItem
            Mouse.Click(uIAktivRibbonItem, new Point(58, 12));

            // Click 'Kalkuler AML brudd' cell
            Mouse.Click(uIKalkulerAMLbruddCell, new Point(65, 9));

            // Click 'Aktiv' RibbonItem
            Mouse.Click(uIAktivRibbonItem, new Point(59, 11));

            // Click 'Oppdatere Bussiness Analyze Data tabeller' cell
            Mouse.Click(uIOppdatereBussinessAnCell, new Point(97, 4));

            // Click 'Aktiv' RibbonItem
            Mouse.Click(uIAktivRibbonItem, new Point(50, 12));

            // Click 'Lagre' RibbonBaseButtonItem
            Mouse.Click(uILagreRibbonBaseButtonItem, new Point(21, 19));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(8, 8));
        }
        
        /// <summary>
        /// StempleInnOgUtJernhammer
        /// </summary>
        public void StempleInnOgUtJernhammer()
        {
            #region Variable Declarations
            WinListItem uIItemListItem = this.UIGATFlexWindow.UIDocumentsHostTabList.UIAlleansatteCustom.UIEmployeeSelectionConCustom.UIItemWindow.UITcEmployeesList.UIItemListItem;
            DXTestControl uIBtnClockInLabel = this.UIGATFlexWindow.UIDocumentsHostTabList.UIAnsattCustom.UIEmployeeClockControlCustom.UIXscMainScrollableControl.UIBtnClockInLabel;
            DXTestControl uIBtnClockOutLabel = this.UIGATFlexWindow.UIDocumentsHostTabList.UIAnsattCustom.UIEmployeeClockControlCustom.UIXscMainScrollableControl.UIBtnClockOutLabel;
            #endregion

            // Click list item numbered 8 in 'tcEmployees' list box
            Mouse.Click(uIItemListItem, new Point(131, 45));

            // Click 'btnClockIn' label
            Mouse.Click(uIBtnClockInLabel, new Point(134, 34));

            // Wait for 5 seconds for user delay between actions; Click list item numbered 8 in 'tcEmployees' list box
            Playback.Wait(5000);
            Mouse.Click(uIItemListItem, new Point(150, 51));

            // Click 'btnClockOut' label
            Mouse.Click(uIBtnClockOutLabel, new Point(132, 36));
        }
        
        /// <summary>
        /// StempleInnOgUtTorres
        /// </summary>
        public void StempleInnOgUtTorres()
        {
            #region Variable Declarations
            WinListItem uIItemListItem = this.UIGATFlexWindow.UIDocumentsHostTabList.UIAllaanställdaCustom.UIEmployeeSelectionConCustom.UIItemWindow.UITcEmployeesList.UIItemListItem;
            DXTestControl uIBtnClockInLabel = this.UIGATFlexWindow.UIDocumentsHostTabList.UIAnställdCustom.UIEmployeeClockControlCustom.UIXscMainScrollableControl.UIBtnClockInLabel;
            DXTestControl uIBtnClockOutLabel = this.UIGATFlexWindow.UIDocumentsHostTabList.UIAnställdCustom.UIEmployeeClockControlCustom.UIXscMainScrollableControl.UIBtnClockOutLabel;
            #endregion

            // Click list item numbered 14 in 'tcEmployees' list box
            Mouse.Click(uIItemListItem, new Point(126, 43));

            // Click 'btnClockIn' label
            Mouse.Click(uIBtnClockInLabel, new Point(131, 37));

            // Wait for 5 seconds for user delay between actions; Click list item numbered 14 in 'tcEmployees' list box
            Playback.Wait(5000);
            Mouse.Click(uIItemListItem, new Point(118, 50));

            // Click 'btnClockOut' label
            Mouse.Click(uIBtnClockOutLabel, new Point(126, 35));
        }
        
        /// <summary>
        /// TesService - Use 'TesServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TesService()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetWorkShiftDataHyperlink = this.UIDepartmentServiceV20Window7.UITesServiceWebServiceDocument.UIContentPane.UIGetWorkShiftDataHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'GetWorkShiftData' link equals 'GetWorkShiftData'
            Assert.AreEqual(this.TesServiceExpectedValues.UIGetWorkShiftDataHyperlinkInnerText, uIGetWorkShiftDataHyperlink.InnerText);

            // Verify that the 'Href' property of 'GetWorkShiftData' link equals 'http://localhost/GatWs1/TesService.asmx?op=GetWorkShiftData'
            Assert.AreEqual(this.TesServiceExpectedValues.UIGetWorkShiftDataHyperlinkHref, uIGetWorkShiftDataHyperlink.Href);
        }
        
        /// <summary>
        /// CheckDepartmentService - Use 'CheckDepartmentServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDepartmentService()
        {
            #region Variable Declarations
            HtmlHyperlink uIGetDepartmentRosterVHyperlink = this.UIDepartmentServiceWebWindow.UIDepartmentServiceWebDocument.UIContentPane.UIGetDepartmentRosterVHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'GetDepartmentRosterV20202' link equals 'GetDepartmentRosterV20202'
            Assert.AreEqual(this.CheckDepartmentServiceExpectedValues.UIGetDepartmentRosterVHyperlinkInnerText, uIGetDepartmentRosterVHyperlink.InnerText);
        }
        
        #region Properties
        public virtual CheckAppServiceExpectedValues CheckAppServiceExpectedValues
        {
            get
            {
                if ((this.mCheckAppServiceExpectedValues == null))
                {
                    this.mCheckAppServiceExpectedValues = new CheckAppServiceExpectedValues();
                }
                return this.mCheckAppServiceExpectedValues;
            }
        }
        
        public virtual CheckBussinesAnalyzeServiceExpectedValues CheckBussinesAnalyzeServiceExpectedValues
        {
            get
            {
                if ((this.mCheckBussinesAnalyzeServiceExpectedValues == null))
                {
                    this.mCheckBussinesAnalyzeServiceExpectedValues = new CheckBussinesAnalyzeServiceExpectedValues();
                }
                return this.mCheckBussinesAnalyzeServiceExpectedValues;
            }
        }
        
        public virtual CheckCalendarIntegrationWebServiceExpectedValues CheckCalendarIntegrationWebServiceExpectedValues
        {
            get
            {
                if ((this.mCheckCalendarIntegrationWebServiceExpectedValues == null))
                {
                    this.mCheckCalendarIntegrationWebServiceExpectedValues = new CheckCalendarIntegrationWebServiceExpectedValues();
                }
                return this.mCheckCalendarIntegrationWebServiceExpectedValues;
            }
        }
        
        public virtual CheckCalendarServiceExpectedValues CheckCalendarServiceExpectedValues
        {
            get
            {
                if ((this.mCheckCalendarServiceExpectedValues == null))
                {
                    this.mCheckCalendarServiceExpectedValues = new CheckCalendarServiceExpectedValues();
                }
                return this.mCheckCalendarServiceExpectedValues;
            }
        }
        
        public virtual CheckCommunicationQueueServiceExpectedValues CheckCommunicationQueueServiceExpectedValues
        {
            get
            {
                if ((this.mCheckCommunicationQueueServiceExpectedValues == null))
                {
                    this.mCheckCommunicationQueueServiceExpectedValues = new CheckCommunicationQueueServiceExpectedValues();
                }
                return this.mCheckCommunicationQueueServiceExpectedValues;
            }
        }
        
        public virtual CheckDepartmentServiceV20182ExpectedValues CheckDepartmentServiceV20182ExpectedValues
        {
            get
            {
                if ((this.mCheckDepartmentServiceV20182ExpectedValues == null))
                {
                    this.mCheckDepartmentServiceV20182ExpectedValues = new CheckDepartmentServiceV20182ExpectedValues();
                }
                return this.mCheckDepartmentServiceV20182ExpectedValues;
            }
        }
        
        public virtual CheckDepartmentServiceV20191ExpectedValues CheckDepartmentServiceV20191ExpectedValues
        {
            get
            {
                if ((this.mCheckDepartmentServiceV20191ExpectedValues == null))
                {
                    this.mCheckDepartmentServiceV20191ExpectedValues = new CheckDepartmentServiceV20191ExpectedValues();
                }
                return this.mCheckDepartmentServiceV20191ExpectedValues;
            }
        }
        
        public virtual CheckEmployeeChangeTrackingServiceExpectedValues CheckEmployeeChangeTrackingServiceExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeeChangeTrackingServiceExpectedValues == null))
                {
                    this.mCheckEmployeeChangeTrackingServiceExpectedValues = new CheckEmployeeChangeTrackingServiceExpectedValues();
                }
                return this.mCheckEmployeeChangeTrackingServiceExpectedValues;
            }
        }
        
        public virtual CheckEmployeeServiceV63ExpectedValues CheckEmployeeServiceV63ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeeServiceV63ExpectedValues == null))
                {
                    this.mCheckEmployeeServiceV63ExpectedValues = new CheckEmployeeServiceV63ExpectedValues();
                }
                return this.mCheckEmployeeServiceV63ExpectedValues;
            }
        }
        
        public virtual CheckExportServiceExpectedValues CheckExportServiceExpectedValues
        {
            get
            {
                if ((this.mCheckExportServiceExpectedValues == null))
                {
                    this.mCheckExportServiceExpectedValues = new CheckExportServiceExpectedValues();
                }
                return this.mCheckExportServiceExpectedValues;
            }
        }
        
        public virtual CheckExternalFlexServiceExpectedValues CheckExternalFlexServiceExpectedValues
        {
            get
            {
                if ((this.mCheckExternalFlexServiceExpectedValues == null))
                {
                    this.mCheckExternalFlexServiceExpectedValues = new CheckExternalFlexServiceExpectedValues();
                }
                return this.mCheckExternalFlexServiceExpectedValues;
            }
        }
        
        public virtual CheckExternalFlexService_SEExpectedValues CheckExternalFlexService_SEExpectedValues
        {
            get
            {
                if ((this.mCheckExternalFlexService_SEExpectedValues == null))
                {
                    this.mCheckExternalFlexService_SEExpectedValues = new CheckExternalFlexService_SEExpectedValues();
                }
                return this.mCheckExternalFlexService_SEExpectedValues;
            }
        }
        
        public virtual CheckFlexExportServiceExpectedValues CheckFlexExportServiceExpectedValues
        {
            get
            {
                if ((this.mCheckFlexExportServiceExpectedValues == null))
                {
                    this.mCheckFlexExportServiceExpectedValues = new CheckFlexExportServiceExpectedValues();
                }
                return this.mCheckFlexExportServiceExpectedValues;
            }
        }
        
        public virtual CheckFlexExportService_SEExpectedValues CheckFlexExportService_SEExpectedValues
        {
            get
            {
                if ((this.mCheckFlexExportService_SEExpectedValues == null))
                {
                    this.mCheckFlexExportService_SEExpectedValues = new CheckFlexExportService_SEExpectedValues();
                }
                return this.mCheckFlexExportService_SEExpectedValues;
            }
        }
        
        public virtual CheckFlexServiceExpectedValues CheckFlexServiceExpectedValues
        {
            get
            {
                if ((this.mCheckFlexServiceExpectedValues == null))
                {
                    this.mCheckFlexServiceExpectedValues = new CheckFlexServiceExpectedValues();
                }
                return this.mCheckFlexServiceExpectedValues;
            }
        }
        
        public virtual CheckFlexService_SEExpectedValues CheckFlexService_SEExpectedValues
        {
            get
            {
                if ((this.mCheckFlexService_SEExpectedValues == null))
                {
                    this.mCheckFlexService_SEExpectedValues = new CheckFlexService_SEExpectedValues();
                }
                return this.mCheckFlexService_SEExpectedValues;
            }
        }
        
        public virtual CheckGatFlexExternalServiceLinkExpectedValues CheckGatFlexExternalServiceLinkExpectedValues
        {
            get
            {
                if ((this.mCheckGatFlexExternalServiceLinkExpectedValues == null))
                {
                    this.mCheckGatFlexExternalServiceLinkExpectedValues = new CheckGatFlexExternalServiceLinkExpectedValues();
                }
                return this.mCheckGatFlexExternalServiceLinkExpectedValues;
            }
        }
        
        public virtual CheckGatFlexExternalServiceLink_seExpectedValues CheckGatFlexExternalServiceLink_seExpectedValues
        {
            get
            {
                if ((this.mCheckGatFlexExternalServiceLink_seExpectedValues == null))
                {
                    this.mCheckGatFlexExternalServiceLink_seExpectedValues = new CheckGatFlexExternalServiceLink_seExpectedValues();
                }
                return this.mCheckGatFlexExternalServiceLink_seExpectedValues;
            }
        }
        
        public virtual CheckGatGericaExpectedValues CheckGatGericaExpectedValues
        {
            get
            {
                if ((this.mCheckGatGericaExpectedValues == null))
                {
                    this.mCheckGatGericaExpectedValues = new CheckGatGericaExpectedValues();
                }
                return this.mCheckGatGericaExpectedValues;
            }
        }
        
        public virtual CheckGatTaskSchedulerDataServiceExpectedValues CheckGatTaskSchedulerDataServiceExpectedValues
        {
            get
            {
                if ((this.mCheckGatTaskSchedulerDataServiceExpectedValues == null))
                {
                    this.mCheckGatTaskSchedulerDataServiceExpectedValues = new CheckGatTaskSchedulerDataServiceExpectedValues();
                }
                return this.mCheckGatTaskSchedulerDataServiceExpectedValues;
            }
        }
        
        public virtual CheckIdmServiceExpectedValues CheckIdmServiceExpectedValues
        {
            get
            {
                if ((this.mCheckIdmServiceExpectedValues == null))
                {
                    this.mCheckIdmServiceExpectedValues = new CheckIdmServiceExpectedValues();
                }
                return this.mCheckIdmServiceExpectedValues;
            }
        }
        
        public virtual CheckImportServiceExpectedValues CheckImportServiceExpectedValues
        {
            get
            {
                if ((this.mCheckImportServiceExpectedValues == null))
                {
                    this.mCheckImportServiceExpectedValues = new CheckImportServiceExpectedValues();
                }
                return this.mCheckImportServiceExpectedValues;
            }
        }
        
        public virtual CheckPatientInformationServiceExpectedValues CheckPatientInformationServiceExpectedValues
        {
            get
            {
                if ((this.mCheckPatientInformationServiceExpectedValues == null))
                {
                    this.mCheckPatientInformationServiceExpectedValues = new CheckPatientInformationServiceExpectedValues();
                }
                return this.mCheckPatientInformationServiceExpectedValues;
            }
        }
        
        public virtual CheckPayslipImportServiceExpectedValues CheckPayslipImportServiceExpectedValues
        {
            get
            {
                if ((this.mCheckPayslipImportServiceExpectedValues == null))
                {
                    this.mCheckPayslipImportServiceExpectedValues = new CheckPayslipImportServiceExpectedValues();
                }
                return this.mCheckPayslipImportServiceExpectedValues;
            }
        }
        
        public virtual CheckReshRosterServiceExpectedValues CheckReshRosterServiceExpectedValues
        {
            get
            {
                if ((this.mCheckReshRosterServiceExpectedValues == null))
                {
                    this.mCheckReshRosterServiceExpectedValues = new CheckReshRosterServiceExpectedValues();
                }
                return this.mCheckReshRosterServiceExpectedValues;
            }
        }
        
        public virtual CheckRoleDepartmentServiceV20182ExpectedValues CheckRoleDepartmentServiceV20182ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleDepartmentServiceV20182ExpectedValues == null))
                {
                    this.mCheckRoleDepartmentServiceV20182ExpectedValues = new CheckRoleDepartmentServiceV20182ExpectedValues();
                }
                return this.mCheckRoleDepartmentServiceV20182ExpectedValues;
            }
        }
        
        public virtual CheckSickleaveMessageImportServiceExpectedValues CheckSickleaveMessageImportServiceExpectedValues
        {
            get
            {
                if ((this.mCheckSickleaveMessageImportServiceExpectedValues == null))
                {
                    this.mCheckSickleaveMessageImportServiceExpectedValues = new CheckSickleaveMessageImportServiceExpectedValues();
                }
                return this.mCheckSickleaveMessageImportServiceExpectedValues;
            }
        }
        
        public virtual CheckSickleaveMessageImportService_SEExpectedValues CheckSickleaveMessageImportService_SEExpectedValues
        {
            get
            {
                if ((this.mCheckSickleaveMessageImportService_SEExpectedValues == null))
                {
                    this.mCheckSickleaveMessageImportService_SEExpectedValues = new CheckSickleaveMessageImportService_SEExpectedValues();
                }
                return this.mCheckSickleaveMessageImportService_SEExpectedValues;
            }
        }
        
        public virtual CheckSmsByMailReaderExpectedValues CheckSmsByMailReaderExpectedValues
        {
            get
            {
                if ((this.mCheckSmsByMailReaderExpectedValues == null))
                {
                    this.mCheckSmsByMailReaderExpectedValues = new CheckSmsByMailReaderExpectedValues();
                }
                return this.mCheckSmsByMailReaderExpectedValues;
            }
        }
        
        public virtual CheckSmsGatewayServiceExpectedValues CheckSmsGatewayServiceExpectedValues
        {
            get
            {
                if ((this.mCheckSmsGatewayServiceExpectedValues == null))
                {
                    this.mCheckSmsGatewayServiceExpectedValues = new CheckSmsGatewayServiceExpectedValues();
                }
                return this.mCheckSmsGatewayServiceExpectedValues;
            }
        }
        
        public virtual CheckSmsServiceExpectedValues CheckSmsServiceExpectedValues
        {
            get
            {
                if ((this.mCheckSmsServiceExpectedValues == null))
                {
                    this.mCheckSmsServiceExpectedValues = new CheckSmsServiceExpectedValues();
                }
                return this.mCheckSmsServiceExpectedValues;
            }
        }
        
        public virtual CheckSystemInformationServiceExpectedValues CheckSystemInformationServiceExpectedValues
        {
            get
            {
                if ((this.mCheckSystemInformationServiceExpectedValues == null))
                {
                    this.mCheckSystemInformationServiceExpectedValues = new CheckSystemInformationServiceExpectedValues();
                }
                return this.mCheckSystemInformationServiceExpectedValues;
            }
        }
        
        public virtual CheckTaskAgreementServiceExpectedValues CheckTaskAgreementServiceExpectedValues
        {
            get
            {
                if ((this.mCheckTaskAgreementServiceExpectedValues == null))
                {
                    this.mCheckTaskAgreementServiceExpectedValues = new CheckTaskAgreementServiceExpectedValues();
                }
                return this.mCheckTaskAgreementServiceExpectedValues;
            }
        }
        
        public virtual CheckTestServiceExpectedValues CheckTestServiceExpectedValues
        {
            get
            {
                if ((this.mCheckTestServiceExpectedValues == null))
                {
                    this.mCheckTestServiceExpectedValues = new CheckTestServiceExpectedValues();
                }
                return this.mCheckTestServiceExpectedValues;
            }
        }
        
        public virtual CheckTimeregImportExpectedValues CheckTimeregImportExpectedValues
        {
            get
            {
                if ((this.mCheckTimeregImportExpectedValues == null))
                {
                    this.mCheckTimeregImportExpectedValues = new CheckTimeregImportExpectedValues();
                }
                return this.mCheckTimeregImportExpectedValues;
            }
        }
        
        public virtual CheckUniqueServiceExpectedValues CheckUniqueServiceExpectedValues
        {
            get
            {
                if ((this.mCheckUniqueServiceExpectedValues == null))
                {
                    this.mCheckUniqueServiceExpectedValues = new CheckUniqueServiceExpectedValues();
                }
                return this.mCheckUniqueServiceExpectedValues;
            }
        }
        
        public virtual CheckWeaBreakServiceExpectedValues CheckWeaBreakServiceExpectedValues
        {
            get
            {
                if ((this.mCheckWeaBreakServiceExpectedValues == null))
                {
                    this.mCheckWeaBreakServiceExpectedValues = new CheckWeaBreakServiceExpectedValues();
                }
                return this.mCheckWeaBreakServiceExpectedValues;
            }
        }
        
        public virtual CheckWishPlanExpectedValues CheckWishPlanExpectedValues
        {
            get
            {
                if ((this.mCheckWishPlanExpectedValues == null))
                {
                    this.mCheckWishPlanExpectedValues = new CheckWishPlanExpectedValues();
                }
                return this.mCheckWishPlanExpectedValues;
            }
        }
        
        public virtual CheckWishPlanWebServiceExpectedValues CheckWishPlanWebServiceExpectedValues
        {
            get
            {
                if ((this.mCheckWishPlanWebServiceExpectedValues == null))
                {
                    this.mCheckWishPlanWebServiceExpectedValues = new CheckWishPlanWebServiceExpectedValues();
                }
                return this.mCheckWishPlanWebServiceExpectedValues;
            }
        }
        
        public virtual CountServicesExpectedValues CountServicesExpectedValues
        {
            get
            {
                if ((this.mCountServicesExpectedValues == null))
                {
                    this.mCountServicesExpectedValues = new CountServicesExpectedValues();
                }
                return this.mCountServicesExpectedValues;
            }
        }
        
        public virtual CountServicesWs2ExpectedValues CountServicesWs2ExpectedValues
        {
            get
            {
                if ((this.mCountServicesWs2ExpectedValues == null))
                {
                    this.mCountServicesWs2ExpectedValues = new CountServicesWs2ExpectedValues();
                }
                return this.mCountServicesWs2ExpectedValues;
            }
        }
        
        public virtual TesServiceExpectedValues TesServiceExpectedValues
        {
            get
            {
                if ((this.mTesServiceExpectedValues == null))
                {
                    this.mTesServiceExpectedValues = new TesServiceExpectedValues();
                }
                return this.mTesServiceExpectedValues;
            }
        }
        
        public virtual CheckDepartmentServiceExpectedValues CheckDepartmentServiceExpectedValues
        {
            get
            {
                if ((this.mCheckDepartmentServiceExpectedValues == null))
                {
                    this.mCheckDepartmentServiceExpectedValues = new CheckDepartmentServiceExpectedValues();
                }
                return this.mCheckDepartmentServiceExpectedValues;
            }
        }
        
        public UIIIS100DetailedError4Window UIIIS100DetailedError4Window
        {
            get
            {
                if ((this.mUIIIS100DetailedError4Window == null))
                {
                    this.mUIIIS100DetailedError4Window = new UIIIS100DetailedError4Window();
                }
                return this.mUIIIS100DetailedError4Window;
            }
        }
        
        public UIGatExternalFlexServiWindow UIGatExternalFlexServiWindow
        {
            get
            {
                if ((this.mUIGatExternalFlexServiWindow == null))
                {
                    this.mUIGatExternalFlexServiWindow = new UIGatExternalFlexServiWindow();
                }
                return this.mUIGatExternalFlexServiWindow;
            }
        }
        
        public UIOppsettavservicejobbWindow UIOppsettavservicejobbWindow
        {
            get
            {
                if ((this.mUIOppsettavservicejobbWindow == null))
                {
                    this.mUIOppsettavservicejobbWindow = new UIOppsettavservicejobbWindow();
                }
                return this.mUIOppsettavservicejobbWindow;
            }
        }
        
        public UIGATFlexWindow UIGATFlexWindow
        {
            get
            {
                if ((this.mUIGATFlexWindow == null))
                {
                    this.mUIGATFlexWindow = new UIGATFlexWindow();
                }
                return this.mUIGATFlexWindow;
            }
        }
        
        public UIGATFlexWindow1 UIGATFlexWindow1
        {
            get
            {
                if ((this.mUIGATFlexWindow1 == null))
                {
                    this.mUIGATFlexWindow1 = new UIGATFlexWindow1();
                }
                return this.mUIGATFlexWindow1;
            }
        }
        
        public UISickleaveMessageImpoWindow UISickleaveMessageImpoWindow
        {
            get
            {
                if ((this.mUISickleaveMessageImpoWindow == null))
                {
                    this.mUISickleaveMessageImpoWindow = new UISickleaveMessageImpoWindow();
                }
                return this.mUISickleaveMessageImpoWindow;
            }
        }
        
        public UIDepartmentServiceV20Window UIDepartmentServiceV20Window
        {
            get
            {
                if ((this.mUIDepartmentServiceV20Window == null))
                {
                    this.mUIDepartmentServiceV20Window = new UIDepartmentServiceV20Window();
                }
                return this.mUIDepartmentServiceV20Window;
            }
        }
        
        public UIStartsidenMinGatv201Window UIStartsidenMinGatv201Window
        {
            get
            {
                if ((this.mUIStartsidenMinGatv201Window == null))
                {
                    this.mUIStartsidenMinGatv201Window = new UIStartsidenMinGatv201Window();
                }
                return this.mUIStartsidenMinGatv201Window;
            }
        }
        
        public UIMinønskeplanMinGatv2Window UIMinønskeplanMinGatv2Window
        {
            get
            {
                if ((this.mUIMinønskeplanMinGatv2Window == null))
                {
                    this.mUIMinønskeplanMinGatv2Window = new UIMinønskeplanMinGatv2Window();
                }
                return this.mUIMinønskeplanMinGatv2Window;
            }
        }
        
        public UIStartsidanMinGatv201Window UIStartsidanMinGatv201Window
        {
            get
            {
                if ((this.mUIStartsidanMinGatv201Window == null))
                {
                    this.mUIStartsidanMinGatv201Window = new UIStartsidanMinGatv201Window();
                }
                return this.mUIStartsidanMinGatv201Window;
            }
        }
        
        public UIDepartmentServiceV20Window1 UIDepartmentServiceV20Window1
        {
            get
            {
                if ((this.mUIDepartmentServiceV20Window1 == null))
                {
                    this.mUIDepartmentServiceV20Window1 = new UIDepartmentServiceV20Window1();
                }
                return this.mUIDepartmentServiceV20Window1;
            }
        }
        
        public UIDepartmentServiceV20Window2 UIDepartmentServiceV20Window2
        {
            get
            {
                if ((this.mUIDepartmentServiceV20Window2 == null))
                {
                    this.mUIDepartmentServiceV20Window2 = new UIDepartmentServiceV20Window2();
                }
                return this.mUIDepartmentServiceV20Window2;
            }
        }
        
        public UIDepartmentServiceV20Window3 UIDepartmentServiceV20Window3
        {
            get
            {
                if ((this.mUIDepartmentServiceV20Window3 == null))
                {
                    this.mUIDepartmentServiceV20Window3 = new UIDepartmentServiceV20Window3();
                }
                return this.mUIDepartmentServiceV20Window3;
            }
        }
        
        public UIDepartmentServiceV20Window4 UIDepartmentServiceV20Window4
        {
            get
            {
                if ((this.mUIDepartmentServiceV20Window4 == null))
                {
                    this.mUIDepartmentServiceV20Window4 = new UIDepartmentServiceV20Window4();
                }
                return this.mUIDepartmentServiceV20Window4;
            }
        }
        
        public UIDepartmentServiceV20Window5 UIDepartmentServiceV20Window5
        {
            get
            {
                if ((this.mUIDepartmentServiceV20Window5 == null))
                {
                    this.mUIDepartmentServiceV20Window5 = new UIDepartmentServiceV20Window5();
                }
                return this.mUIDepartmentServiceV20Window5;
            }
        }
        
        public UIDepartmentServiceV20Window6 UIDepartmentServiceV20Window6
        {
            get
            {
                if ((this.mUIDepartmentServiceV20Window6 == null))
                {
                    this.mUIDepartmentServiceV20Window6 = new UIDepartmentServiceV20Window6();
                }
                return this.mUIDepartmentServiceV20Window6;
            }
        }
        
        public UIDepartmentServiceV20Window7 UIDepartmentServiceV20Window7
        {
            get
            {
                if ((this.mUIDepartmentServiceV20Window7 == null))
                {
                    this.mUIDepartmentServiceV20Window7 = new UIDepartmentServiceV20Window7();
                }
                return this.mUIDepartmentServiceV20Window7;
            }
        }
        
        public UIGatWebserviceMainPagWindow UIGatWebserviceMainPagWindow
        {
            get
            {
                if ((this.mUIGatWebserviceMainPagWindow == null))
                {
                    this.mUIGatWebserviceMainPagWindow = new UIGatWebserviceMainPagWindow();
                }
                return this.mUIGatWebserviceMainPagWindow;
            }
        }
        
        public UIAppServiceWebServiceWindow UIAppServiceWebServiceWindow
        {
            get
            {
                if ((this.mUIAppServiceWebServiceWindow == null))
                {
                    this.mUIAppServiceWebServiceWindow = new UIAppServiceWebServiceWindow();
                }
                return this.mUIAppServiceWebServiceWindow;
            }
        }
        
        public UIAppServiceWebServiceWindow1 UIAppServiceWebServiceWindow1
        {
            get
            {
                if ((this.mUIAppServiceWebServiceWindow1 == null))
                {
                    this.mUIAppServiceWebServiceWindow1 = new UIAppServiceWebServiceWindow1();
                }
                return this.mUIAppServiceWebServiceWindow1;
            }
        }
        
        public UIAppServiceWebServiceWindow2 UIAppServiceWebServiceWindow2
        {
            get
            {
                if ((this.mUIAppServiceWebServiceWindow2 == null))
                {
                    this.mUIAppServiceWebServiceWindow2 = new UIAppServiceWebServiceWindow2();
                }
                return this.mUIAppServiceWebServiceWindow2;
            }
        }
        
        public UIAppServiceWebServiceWindow3 UIAppServiceWebServiceWindow3
        {
            get
            {
                if ((this.mUIAppServiceWebServiceWindow3 == null))
                {
                    this.mUIAppServiceWebServiceWindow3 = new UIAppServiceWebServiceWindow3();
                }
                return this.mUIAppServiceWebServiceWindow3;
            }
        }
        
        public UIAppServiceWebServiceWindow4 UIAppServiceWebServiceWindow4
        {
            get
            {
                if ((this.mUIAppServiceWebServiceWindow4 == null))
                {
                    this.mUIAppServiceWebServiceWindow4 = new UIAppServiceWebServiceWindow4();
                }
                return this.mUIAppServiceWebServiceWindow4;
            }
        }
        
        public UIAppServiceWebServiceWindow5 UIAppServiceWebServiceWindow5
        {
            get
            {
                if ((this.mUIAppServiceWebServiceWindow5 == null))
                {
                    this.mUIAppServiceWebServiceWindow5 = new UIAppServiceWebServiceWindow5();
                }
                return this.mUIAppServiceWebServiceWindow5;
            }
        }
        
        public UIAppServiceWebServiceWindow6 UIAppServiceWebServiceWindow6
        {
            get
            {
                if ((this.mUIAppServiceWebServiceWindow6 == null))
                {
                    this.mUIAppServiceWebServiceWindow6 = new UIAppServiceWebServiceWindow6();
                }
                return this.mUIAppServiceWebServiceWindow6;
            }
        }
        
        public UIGatWebservices2MainPWindow UIGatWebservices2MainPWindow
        {
            get
            {
                if ((this.mUIGatWebservices2MainPWindow == null))
                {
                    this.mUIGatWebservices2MainPWindow = new UIGatWebservices2MainPWindow();
                }
                return this.mUIGatWebservices2MainPWindow;
            }
        }
        
        public UIGatWebserviceMainPagWindow1 UIGatWebserviceMainPagWindow1
        {
            get
            {
                if ((this.mUIGatWebserviceMainPagWindow1 == null))
                {
                    this.mUIGatWebserviceMainPagWindow1 = new UIGatWebserviceMainPagWindow1();
                }
                return this.mUIGatWebserviceMainPagWindow1;
            }
        }
        
        public UIGatWebserviceMainPagWindow2 UIGatWebserviceMainPagWindow2
        {
            get
            {
                if ((this.mUIGatWebserviceMainPagWindow2 == null))
                {
                    this.mUIGatWebserviceMainPagWindow2 = new UIGatWebserviceMainPagWindow2();
                }
                return this.mUIGatWebserviceMainPagWindow2;
            }
        }
        
        public UISickleaveMessageImpoWindow1 UISickleaveMessageImpoWindow1
        {
            get
            {
                if ((this.mUISickleaveMessageImpoWindow1 == null))
                {
                    this.mUISickleaveMessageImpoWindow1 = new UISickleaveMessageImpoWindow1();
                }
                return this.mUISickleaveMessageImpoWindow1;
            }
        }
        
        public UISickleaveMessageImpoWindow2 UISickleaveMessageImpoWindow2
        {
            get
            {
                if ((this.mUISickleaveMessageImpoWindow2 == null))
                {
                    this.mUISickleaveMessageImpoWindow2 = new UISickleaveMessageImpoWindow2();
                }
                return this.mUISickleaveMessageImpoWindow2;
            }
        }
        
        public UIDepartmentServiceWebWindow UIDepartmentServiceWebWindow
        {
            get
            {
                if ((this.mUIDepartmentServiceWebWindow == null))
                {
                    this.mUIDepartmentServiceWebWindow = new UIDepartmentServiceWebWindow();
                }
                return this.mUIDepartmentServiceWebWindow;
            }
        }
        #endregion
        
        #region Fields
        private CheckAppServiceExpectedValues mCheckAppServiceExpectedValues;
        
        private CheckBussinesAnalyzeServiceExpectedValues mCheckBussinesAnalyzeServiceExpectedValues;
        
        private CheckCalendarIntegrationWebServiceExpectedValues mCheckCalendarIntegrationWebServiceExpectedValues;
        
        private CheckCalendarServiceExpectedValues mCheckCalendarServiceExpectedValues;
        
        private CheckCommunicationQueueServiceExpectedValues mCheckCommunicationQueueServiceExpectedValues;
        
        private CheckDepartmentServiceV20182ExpectedValues mCheckDepartmentServiceV20182ExpectedValues;
        
        private CheckDepartmentServiceV20191ExpectedValues mCheckDepartmentServiceV20191ExpectedValues;
        
        private CheckEmployeeChangeTrackingServiceExpectedValues mCheckEmployeeChangeTrackingServiceExpectedValues;
        
        private CheckEmployeeServiceV63ExpectedValues mCheckEmployeeServiceV63ExpectedValues;
        
        private CheckExportServiceExpectedValues mCheckExportServiceExpectedValues;
        
        private CheckExternalFlexServiceExpectedValues mCheckExternalFlexServiceExpectedValues;
        
        private CheckExternalFlexService_SEExpectedValues mCheckExternalFlexService_SEExpectedValues;
        
        private CheckFlexExportServiceExpectedValues mCheckFlexExportServiceExpectedValues;
        
        private CheckFlexExportService_SEExpectedValues mCheckFlexExportService_SEExpectedValues;
        
        private CheckFlexServiceExpectedValues mCheckFlexServiceExpectedValues;
        
        private CheckFlexService_SEExpectedValues mCheckFlexService_SEExpectedValues;
        
        private CheckGatFlexExternalServiceLinkExpectedValues mCheckGatFlexExternalServiceLinkExpectedValues;
        
        private CheckGatFlexExternalServiceLink_seExpectedValues mCheckGatFlexExternalServiceLink_seExpectedValues;
        
        private CheckGatGericaExpectedValues mCheckGatGericaExpectedValues;
        
        private CheckGatTaskSchedulerDataServiceExpectedValues mCheckGatTaskSchedulerDataServiceExpectedValues;
        
        private CheckIdmServiceExpectedValues mCheckIdmServiceExpectedValues;
        
        private CheckImportServiceExpectedValues mCheckImportServiceExpectedValues;
        
        private CheckPatientInformationServiceExpectedValues mCheckPatientInformationServiceExpectedValues;
        
        private CheckPayslipImportServiceExpectedValues mCheckPayslipImportServiceExpectedValues;
        
        private CheckReshRosterServiceExpectedValues mCheckReshRosterServiceExpectedValues;
        
        private CheckRoleDepartmentServiceV20182ExpectedValues mCheckRoleDepartmentServiceV20182ExpectedValues;
        
        private CheckSickleaveMessageImportServiceExpectedValues mCheckSickleaveMessageImportServiceExpectedValues;
        
        private CheckSickleaveMessageImportService_SEExpectedValues mCheckSickleaveMessageImportService_SEExpectedValues;
        
        private CheckSmsByMailReaderExpectedValues mCheckSmsByMailReaderExpectedValues;
        
        private CheckSmsGatewayServiceExpectedValues mCheckSmsGatewayServiceExpectedValues;
        
        private CheckSmsServiceExpectedValues mCheckSmsServiceExpectedValues;
        
        private CheckSystemInformationServiceExpectedValues mCheckSystemInformationServiceExpectedValues;
        
        private CheckTaskAgreementServiceExpectedValues mCheckTaskAgreementServiceExpectedValues;
        
        private CheckTestServiceExpectedValues mCheckTestServiceExpectedValues;
        
        private CheckTimeregImportExpectedValues mCheckTimeregImportExpectedValues;
        
        private CheckUniqueServiceExpectedValues mCheckUniqueServiceExpectedValues;
        
        private CheckWeaBreakServiceExpectedValues mCheckWeaBreakServiceExpectedValues;
        
        private CheckWishPlanExpectedValues mCheckWishPlanExpectedValues;
        
        private CheckWishPlanWebServiceExpectedValues mCheckWishPlanWebServiceExpectedValues;
        
        private CountServicesExpectedValues mCountServicesExpectedValues;
        
        private CountServicesWs2ExpectedValues mCountServicesWs2ExpectedValues;
        
        private TesServiceExpectedValues mTesServiceExpectedValues;
        
        private CheckDepartmentServiceExpectedValues mCheckDepartmentServiceExpectedValues;
        
        private UIIIS100DetailedError4Window mUIIIS100DetailedError4Window;
        
        private UIGatExternalFlexServiWindow mUIGatExternalFlexServiWindow;
        
        private UIOppsettavservicejobbWindow mUIOppsettavservicejobbWindow;
        
        private UIGATFlexWindow mUIGATFlexWindow;
        
        private UIGATFlexWindow1 mUIGATFlexWindow1;
        
        private UISickleaveMessageImpoWindow mUISickleaveMessageImpoWindow;
        
        private UIDepartmentServiceV20Window mUIDepartmentServiceV20Window;
        
        private UIStartsidenMinGatv201Window mUIStartsidenMinGatv201Window;
        
        private UIMinønskeplanMinGatv2Window mUIMinønskeplanMinGatv2Window;
        
        private UIStartsidanMinGatv201Window mUIStartsidanMinGatv201Window;
        
        private UIDepartmentServiceV20Window1 mUIDepartmentServiceV20Window1;
        
        private UIDepartmentServiceV20Window2 mUIDepartmentServiceV20Window2;
        
        private UIDepartmentServiceV20Window3 mUIDepartmentServiceV20Window3;
        
        private UIDepartmentServiceV20Window4 mUIDepartmentServiceV20Window4;
        
        private UIDepartmentServiceV20Window5 mUIDepartmentServiceV20Window5;
        
        private UIDepartmentServiceV20Window6 mUIDepartmentServiceV20Window6;
        
        private UIDepartmentServiceV20Window7 mUIDepartmentServiceV20Window7;
        
        private UIGatWebserviceMainPagWindow mUIGatWebserviceMainPagWindow;
        
        private UIAppServiceWebServiceWindow mUIAppServiceWebServiceWindow;
        
        private UIAppServiceWebServiceWindow1 mUIAppServiceWebServiceWindow1;
        
        private UIAppServiceWebServiceWindow2 mUIAppServiceWebServiceWindow2;
        
        private UIAppServiceWebServiceWindow3 mUIAppServiceWebServiceWindow3;
        
        private UIAppServiceWebServiceWindow4 mUIAppServiceWebServiceWindow4;
        
        private UIAppServiceWebServiceWindow5 mUIAppServiceWebServiceWindow5;
        
        private UIAppServiceWebServiceWindow6 mUIAppServiceWebServiceWindow6;
        
        private UIGatWebservices2MainPWindow mUIGatWebservices2MainPWindow;
        
        private UIGatWebserviceMainPagWindow1 mUIGatWebserviceMainPagWindow1;
        
        private UIGatWebserviceMainPagWindow2 mUIGatWebserviceMainPagWindow2;
        
        private UISickleaveMessageImpoWindow1 mUISickleaveMessageImpoWindow1;
        
        private UISickleaveMessageImpoWindow2 mUISickleaveMessageImpoWindow2;
        
        private UIDepartmentServiceWebWindow mUIDepartmentServiceWebWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAppService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAppServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'ProcessAppFlexQueue' link equals 'ProcessAppFlexQueue'
        /// </summary>
        public string UIProcessAppFlexQueueHyperlinkInnerText = "ProcessAppFlexQueue";
        
        /// <summary>
        /// Verify that the 'Href' property of 'ProcessAppFlexQueue' link equals 'http://localhost/GatWs1/AppService.asmx?op=ProcessAppFlexQueue'
        /// </summary>
        public string UIProcessAppFlexQueueHyperlinkHref = "http://localhost/GatWs1/AppService.asmx?op=ProcessAppFlexQueue";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckBussinesAnalyzeService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckBussinesAnalyzeServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'ExecuteBusinessFunctionForShiftsOverrideScheduler' link equals 'http://localhost/GatWs1/BussinesAnalyzeService.asmx?op=ExecuteBusinessFunctionForShiftsOverrideScheduler'
        /// </summary>
        public string UIExecuteBusinessFunctHyperlinkHref = "http://localhost/GatWs1/BussinesAnalyzeService.asmx?op=ExecuteBusinessFunctionFor" +
            "ShiftsOverrideScheduler";
        
        /// <summary>
        /// Verify that the 'Href' property of 'UpdateBussinessAnalyzeData' link equals 'http://localhost/GatWs1/BussinesAnalyzeService.asmx?op=UpdateBussinessAnalyzeData'
        /// </summary>
        public string UIUpdateBussinessAnalyHyperlinkHref = "http://localhost/GatWs1/BussinesAnalyzeService.asmx?op=UpdateBussinessAnalyzeData" +
            "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalendarIntegrationWebService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckCalendarIntegrationWebServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'Distribute' link equals 'http://localhost/GatWs1/CalendarIntegrationWebService.asmx?op=Distribute'
        /// </summary>
        public string UIDistributeHyperlinkHref = "http://localhost/GatWs1/CalendarIntegrationWebService.asmx?op=Distribute";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalendarService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckCalendarServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'GetJourShifts' link equals 'http://localhost/GatWs1/CalendarService.asmx?op=GetJourShifts'
        /// </summary>
        public string UIGetJourShiftsHyperlinkHref = "http://localhost/GatWs1/CalendarService.asmx?op=GetJourShifts";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCommunicationQueueService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckCommunicationQueueServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'FillMessageQueueWithDashboardWarnings' link equals 'http://localhost/GatWs2/CommunicationQueueService.asmx?op=FillMessageQueueWithDashboardWarnings'
        /// </summary>
        public string UIFillMessageQueueWithHyperlinkHref = "http://localhost/GatWs2/CommunicationQueueService.asmx?op=FillMessageQueueWithDas" +
            "hboardWarnings";
        
        /// <summary>
        /// Verify that the 'Href' property of 'FillMessageQueueWithDashboardWarningsOverrideSched...' link equals 'http://localhost/GatWs2/CommunicationQueueService.asmx?op=FillMessageQueueWithDashboardWarningsOverrideScheduler'
        /// </summary>
        public string UIFillMessageQueueWithHyperlink1Href = "http://localhost/GatWs2/CommunicationQueueService.asmx?op=FillMessageQueueWithDas" +
            "hboardWarningsOverrideScheduler";
        
        /// <summary>
        /// Verify that the 'Href' property of 'ProcessMailQueue' link equals 'http://localhost/GatWs2/CommunicationQueueService.asmx?op=ProcessMailQueue'
        /// </summary>
        public string UIProcessMailQueueHyperlinkHref = "http://localhost/GatWs2/CommunicationQueueService.asmx?op=ProcessMailQueue";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDepartmentServiceV20182'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckDepartmentServiceV20182ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetDepartmentRoster' link equals 'GetDepartmentRoster'
        /// </summary>
        public string UIGetDepartmentRosterHyperlinkInnerText = "GetDepartmentRoster";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDepartmentServiceV20191'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckDepartmentServiceV20191ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetDepartmentRoster' link equals 'GetDepartmentRoster'
        /// </summary>
        public string UIGetDepartmentRosterHyperlinkInnerText = "GetDepartmentRoster";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeeChangeTrackingService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeeChangeTrackingServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'PushEmployeeDataChanges' link equals 'PushEmployeeDataChanges'
        /// </summary>
        public string UIPushEmployeeDataChanHyperlinkInnerText = "PushEmployeeDataChanges";
        
        /// <summary>
        /// Verify that the 'Href' property of 'PushEmployeeDataChanges' link equals 'http://localhost/GatWs1/EmployeeChangeTrackingService.asmx?op=PushEmployeeDataChanges'
        /// </summary>
        public string UIPushEmployeeDataChanHyperlinkHref = "http://localhost/GatWs1/EmployeeChangeTrackingService.asmx?op=PushEmployeeDataCha" +
            "nges";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeeServiceV63'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeeServiceV63ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetEmployee' link equals 'GetEmployee'
        /// </summary>
        public string UIGetEmployeeHyperlinkInnerText = "GetEmployee";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetEmployee' link equals 'http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetEmployee'
        /// </summary>
        public string UIGetEmployeeHyperlinkHref = "http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetEmployee";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetJobAgreement' link equals 'GetJobAgreement'
        /// </summary>
        public string UIGetJobAgreementHyperlinkInnerText = "GetJobAgreement";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetJobAgreement' link equals 'http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetJobAgreement'
        /// </summary>
        public string UIGetJobAgreementHyperlinkHref = "http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetJobAgreement";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetWorkHours' link equals 'GetWorkHours'
        /// </summary>
        public string UIGetWorkHoursHyperlinkInnerText = "GetWorkHours";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetWorkHours' link equals 'http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetWorkHours'
        /// </summary>
        public string UIGetWorkHoursHyperlinkHref = "http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetWorkHours";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'UpdateEmployee' link equals 'UpdateEmployee'
        /// </summary>
        public string UIUpdateEmployeeHyperlinkInnerText = "UpdateEmployee";
        
        /// <summary>
        /// Verify that the 'Href' property of 'UpdateEmployee' link equals 'http://localhost/GatWs1/EmployeeServiceV63.asmx?op=UpdateEmployee'
        /// </summary>
        public string UIUpdateEmployeeHyperlinkHref = "http://localhost/GatWs1/EmployeeServiceV63.asmx?op=UpdateEmployee";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckExportService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckExportServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'PostAfterSystemExportReceipt' link equals 'http://localhost/GatWs1/ExportService.asmx?op=PostAfterSystemExportReceipt'
        /// </summary>
        public string UIPostAfterSystemExporHyperlinkHref = "http://localhost/GatWs1/ExportService.asmx?op=PostAfterSystemExportReceipt";
        
        /// <summary>
        /// Verify that the 'Href' property of 'ProcessAfterSystemExport' link equals 'http://localhost/GatWs1/ExportService.asmx?op=ProcessAfterSystemExport'
        /// </summary>
        public string UIProcessAfterSystemExHyperlinkHref = "http://localhost/GatWs1/ExportService.asmx?op=ProcessAfterSystemExport";
        
        /// <summary>
        /// Verify that the 'Href' property of 'ProcessNextAfterSystemExportJob' link equals 'http://localhost/GatWs1/ExportService.asmx?op=ProcessNextAfterSystemExportJob'
        /// </summary>
        public string UIProcessNextAfterSystHyperlinkHref = "http://localhost/GatWs1/ExportService.asmx?op=ProcessNextAfterSystemExportJob";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckExternalFlexService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckExternalFlexServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'http://localhost/GatWs1/ExternalFlexService.svc?si...' link equals 'http://localhost/GatWs1/ExternalFlexService.svc?singleWsdl'
        /// </summary>
        public string UIHttplocalhostGatWs1EHyperlink1Href = "http://localhost/GatWs1/ExternalFlexService.svc?singleWsdl";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckExternalFlexService_SE'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckExternalFlexService_SEExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'http://localhost/GatWs1_se/ExternalFlexService.svc...' link equals 'http://localhost/GatWs1_se/ExternalFlexService.svc?singleWsdl'
        /// </summary>
        public string UIHttplocalhostGatWs1_Hyperlink2Href = "http://localhost/GatWs1_se/ExternalFlexService.svc?singleWsdl";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFlexExportService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckFlexExportServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'http://localhost/GatWs1/FlexExportService.svc?sing...' link equals 'http://localhost/GatWs1/FlexExportService.svc?singleWsdl'
        /// </summary>
        public string UIHttplocalhostGatWs1FHyperlinkHref = "http://localhost/GatWs1/FlexExportService.svc?singleWsdl";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFlexExportService_SE'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckFlexExportService_SEExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'http://localhost/GatWs1_se/FlexExportService.svc?s...' link equals 'http://localhost/GatWs1_se/FlexExportService.svc?singleWsdl'
        /// </summary>
        public string UIHttplocalhostGatWs1_HyperlinkInnerText = "http://localhost/GatWs1_se/FlexExportService.svc?singleWsdl";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFlexService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckFlexServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'UpdateUserAltID' link equals 'http://localhost/GatWs1/FlexService.asmx?op=UpdateUserAltID'
        /// </summary>
        public string UIUpdateUserAltIDHyperlinkHref = "http://localhost/GatWs1/FlexService.asmx?op=UpdateUserAltID";
        
        /// <summary>
        /// Verify that the 'Href' property of 'DeleteQueueAbsencePeriods' link equals 'http://localhost/GatWs1/FlexService.asmx?op=DeleteQueueAbsencePeriods'
        /// </summary>
        public string UIDeleteQueueAbsencePeHyperlinkHref = "http://localhost/GatWs1/FlexService.asmx?op=DeleteQueueAbsencePeriods";
        
        /// <summary>
        /// Verify that the 'TagInstance' property of 'UpdateUserAltID' link equals '63'
        /// </summary>
        public int UIUpdateUserAltIDHyperlinkTagInstance = 63;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFlexService_SE'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckFlexService_SEExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'DeleteQueueAbsencePeriods' link equals 'http://localhost/GatWs1_se/FlexService.asmx?op=DeleteQueueAbsencePeriods'
        /// </summary>
        public string UIDeleteQueueAbsencePeHyperlinkHref = "http://localhost/GatWs1_se/FlexService.asmx?op=DeleteQueueAbsencePeriods";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'EmployeeIsFlexUser' link equals 'EmployeeIsFlexUser'
        /// </summary>
        public string UIEmployeeIsFlexUserHyperlinkInnerText = "EmployeeIsFlexUser";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'EmployeeIsIn' link equals 'EmployeeIsIn'
        /// </summary>
        public string UIEmployeeIsInHyperlinkInnerText = "EmployeeIsIn";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'EmployeeIsInOutOrHasBeenHere' link equals 'EmployeeIsInOutOrHasBeenHere'
        /// </summary>
        public string UIEmployeeIsInOutOrHasHyperlinkInnerText = "EmployeeIsInOutOrHasBeenHere";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'EmployeeLastStamp' link equals 'EmployeeLastStamp'
        /// </summary>
        public string UIEmployeeLastStampHyperlinkInnerText = "EmployeeLastStamp";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'EmployeeLastStampTime' link equals 'EmployeeLastStampTime'
        /// </summary>
        public string UIEmployeeLastStampTimHyperlinkInnerText = "EmployeeLastStampTime";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'UpdateUserAltID' link equals 'UpdateUserAltID'
        /// </summary>
        public string UIUpdateUserAltIDHyperlinkInnerText = "UpdateUserAltID";
        
        /// <summary>
        /// Verify that the 'TagInstance' property of 'UpdateUserAltID' link equals '63'
        /// </summary>
        public int UIUpdateUserAltIDHyperlinkTagInstance = 63;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckGatFlexExternalServiceLink'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckGatFlexExternalServiceLinkExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'http://localhost/GatWs1/ExternalFlexService.svc?ws...' link equals 'http://localhost/GatWs1/ExternalFlexService.svc?wsdl'
        /// </summary>
        public string UIHttplocalhostGatWs1EHyperlinkInnerText = "http://localhost/GatWs1/ExternalFlexService.svc?wsdl";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'http://localhost/GatWs1/ExternalFlexService.svc?si...' link equals 'http://localhost/GatWs1/ExternalFlexService.svc?singleWsdl'
        /// </summary>
        public string UIHttplocalhostGatWs1EHyperlink1InnerText = "http://localhost/GatWs1/ExternalFlexService.svc?singleWsdl";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckGatFlexExternalServiceLink_se'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckGatFlexExternalServiceLink_seExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'http://localhost/GatWs1_se/ExternalFlexService.svc...' link equals 'http://localhost/GatWs1_se/ExternalFlexService.svc?wsdl'
        /// </summary>
        public string UIHttplocalhostGatWs1_HyperlinkInnerText = "http://localhost/GatWs1_se/ExternalFlexService.svc?wsdl";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'http://localhost/GatWs1_se/ExternalFlexService.svc...' link equals 'http://localhost/GatWs1_se/ExternalFlexService.svc?singleWsdl'
        /// </summary>
        public string UIHttplocalhostGatWs1_Hyperlink1InnerText = "http://localhost/GatWs1_se/ExternalFlexService.svc?singleWsdl";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckGatGerica'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckGatGericaExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'A_PrsGericaWS_Generell_Info' link equals 'A_PrsGericaWS_Generell_Info'
        /// </summary>
        public string UIA_PrsGericaWS_GenereHyperlinkInnerText = "A_PrsGericaWS_Generell_Info";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'FinnBrukerForID' link equals 'FinnBrukerForID'
        /// </summary>
        public string UIFinnBrukerForIDHyperlinkInnerText = "FinnBrukerForID";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetVersion' link equals 'GetVersion'
        /// </summary>
        public string UIGetVersionHyperlinkInnerText = "GetVersion";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'LesAnsettelse' link equals 'LesAnsettelse'
        /// </summary>
        public string UILesAnsettelseHyperlinkInnerText = "LesAnsettelse";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'LesFravaerForPerson' link equals 'LesFravaerForPerson'
        /// </summary>
        public string UILesFravaerForPersonHyperlinkInnerText = "LesFravaerForPerson";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'LesOrgenhet' link equals 'LesOrgenhet'
        /// </summary>
        public string UILesOrgenhetHyperlinkInnerText = "LesOrgenhet";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'LesPerson' link equals 'LesPerson'
        /// </summary>
        public string UILesPersonHyperlinkInnerText = "LesPerson";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'LesPlanForPeriode' link equals 'LesPlanForPeriode'
        /// </summary>
        public string UILesPlanForPeriodeHyperlinkInnerText = "LesPlanForPeriode";
        
        /// <summary>
        /// Verify that the 'Href' property of 'LesVaktForPerson' link equals 'http://localhost/GatWs1/GatGerica.asmx?op=LesVaktForPerson'
        /// </summary>
        public string UILesVaktForPersonHyperlinkHref = "http://localhost/GatWs1/GatGerica.asmx?op=LesVaktForPerson";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckGatTaskSchedulerDataService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckGatTaskSchedulerDataServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'GetScheduledTasks' link equals 'http://localhost/GatWs1/GatTaskSchedulerDataService.asmx?op=GetScheduledTasks'
        /// </summary>
        public string UIGetScheduledTasksHyperlinkHref = "http://localhost/GatWs1/GatTaskSchedulerDataService.asmx?op=GetScheduledTasks";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckIdmService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckIdmServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'ActivateUser' link equals 'http://localhost/GatWs2/IdmService.asmx?op=ActivateUser'
        /// </summary>
        public string UIActivateUserHyperlinkHref = "http://localhost/GatWs2/IdmService.asmx?op=ActivateUser";
        
        /// <summary>
        /// Verify that the 'Href' property of 'ActivateUserByDate' link equals 'http://localhost/GatWs2/IdmService.asmx?op=ActivateUserByDate'
        /// </summary>
        public string UIActivateUserByDateHyperlinkHref = "http://localhost/GatWs2/IdmService.asmx?op=ActivateUserByDate";
        
        /// <summary>
        /// Verify that the 'Href' property of 'AdvancedCreateOrUpdateUser' link equals 'http://localhost/GatWs2/IdmService.asmx?op=AdvancedCreateOrUpdateUser'
        /// </summary>
        public string UIAdvancedCreateOrUpdaHyperlinkHref = "http://localhost/GatWs2/IdmService.asmx?op=AdvancedCreateOrUpdateUser";
        
        /// <summary>
        /// Verify that the 'Href' property of 'AdvancedCreateOrUpdateUserByToDate' link equals 'http://localhost/GatWs2/IdmService.asmx?op=AdvancedCreateOrUpdateUserByToDate'
        /// </summary>
        public string UIAdvancedCreateOrUpdaHyperlink1Href = "http://localhost/GatWs2/IdmService.asmx?op=AdvancedCreateOrUpdateUserByToDate";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetUsers' link equals 'http://localhost/GatWs2/IdmService.asmx?op=GetUsers'
        /// </summary>
        public string UIGetUsersHyperlinkHref = "http://localhost/GatWs2/IdmService.asmx?op=GetUsers";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetUsers_UserName' link equals 'http://localhost/GatWs2/IdmService.asmx?op=GetUsers_UserName'
        /// </summary>
        public string UIGetUsers_UserNameHyperlinkHref = "http://localhost/GatWs2/IdmService.asmx?op=GetUsers_UserName";
        
        /// <summary>
        /// Verify that the 'Href' property of 'HelloWorld' link equals 'http://localhost/GatWs2/IdmService.asmx?op=HelloWorld'
        /// </summary>
        public string UIHelloWorldHyperlinkHref = "http://localhost/GatWs2/IdmService.asmx?op=HelloWorld";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckImportService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckImportServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'InsertDepEmp_v2' link equals 'http://localhost/GatWs1/ImportService.asmx?op=InsertDepEmp_v2'
        /// </summary>
        public string UIInsertDepEmp_v2HyperlinkHref = "http://localhost/GatWs1/ImportService.asmx?op=InsertDepEmp_v2";
        
        /// <summary>
        /// Verify that the 'Href' property of 'InsertDepartment_v2' link equals 'http://localhost/GatWs1/ImportService.asmx?op=InsertDepartment_v2'
        /// </summary>
        public string UIInsertDepartment_v2HyperlinkHref = "http://localhost/GatWs1/ImportService.asmx?op=InsertDepartment_v2";
        
        /// <summary>
        /// Verify that the 'Href' property of 'InsertEmployee' link equals 'http://localhost/GatWs1/ImportService.asmx?op=InsertEmployee'
        /// </summary>
        public string UIInsertEmployeeHyperlinkHref = "http://localhost/GatWs1/ImportService.asmx?op=InsertEmployee";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPatientInformationService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckPatientInformationServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetDepartmentAppointments' link equals 'GetDepartmentAppointments'
        /// </summary>
        public string UIGetDepartmentAppointHyperlinkInnerText = "GetDepartmentAppointments";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetDepartmentAppointments' link equals 'http://localhost/GatWs1/PatientInformationService.asmx?op=GetDepartmentAppointments'
        /// </summary>
        public string UIGetDepartmentAppointHyperlinkHref = "http://localhost/GatWs1/PatientInformationService.asmx?op=GetDepartmentAppointmen" +
            "ts";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetEmployeeAppointments' link equals 'http://localhost/GatWs1/PatientInformationService.asmx?op=GetEmployeeAppointments'
        /// </summary>
        public string UIGetEmployeeAppointmeHyperlinkHref = "http://localhost/GatWs1/PatientInformationService.asmx?op=GetEmployeeAppointments" +
            "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPayslipImportService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckPayslipImportServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'ImportPayslips' link equals 'http://localhost/GatWs1/PayslipImportService.asmx?op=ImportPayslips'
        /// </summary>
        public string UIImportPayslipsHyperlinkHref = "http://localhost/GatWs1/PayslipImportService.asmx?op=ImportPayslips";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckReshRosterService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckReshRosterServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetReshRoster' link equals 'GetReshRoster'
        /// </summary>
        public string UIGetReshRosterHyperlinkInnerText = "GetReshRoster";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetReshRoster' link equals 'http://localhost/GatWs1/ReshRosterService.asmx?op=GetReshRoster'
        /// </summary>
        public string UIGetReshRosterHyperlinkHref = "http://localhost/GatWs1/ReshRosterService.asmx?op=GetReshRoster";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleDepartmentServiceV20182'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleDepartmentServiceV20182ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetDepartmentRoles' link equals 'GetDepartmentRoles'
        /// </summary>
        public string UIGetDepartmentRolesHyperlinkInnerText = "GetDepartmentRoles";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetDepartmentRoles' link equals 'http://localhost/GatWs1/RoleDepartmentServiceV20182.asmx?op=GetDepartmentRoles'
        /// </summary>
        public string UIGetDepartmentRolesHyperlinkHref = "http://localhost/GatWs1/RoleDepartmentServiceV20182.asmx?op=GetDepartmentRoles";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetDisplayRoles' link equals 'GetDisplayRoles'
        /// </summary>
        public string UIGetDisplayRolesHyperlinkInnerText = "GetDisplayRoles";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetDisplayRoles' link equals 'http://localhost/GatWs1/RoleDepartmentServiceV20182.asmx?op=GetDisplayRoles'
        /// </summary>
        public string UIGetDisplayRolesHyperlinkHref = "http://localhost/GatWs1/RoleDepartmentServiceV20182.asmx?op=GetDisplayRoles";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSickleaveMessageImportService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSickleaveMessageImportServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'http://localhost/GatWs1/SickleaveMessageImportServ...' link equals 'http://localhost/GatWs1/SickleaveMessageImportService.svc?singleWsdl'
        /// </summary>
        public string UIHttplocalhostGatWs1SHyperlink2Href = "http://localhost/GatWs1/SickleaveMessageImportService.svc?singleWsdl";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSickleaveMessageImportService_SE'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSickleaveMessageImportService_SEExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'http://localhost/GatWs1_se/SickleaveMessageImportS...' link equals 'http://localhost/GatWs1_se/SickleaveMessageImportService.svc?singleWsdl'
        /// </summary>
        public string UIHttplocalhostGatWs1_Hyperlink2InnerText = "http://localhost/GatWs1_se/SickleaveMessageImportService.svc?singleWsdl";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSmsByMailReader'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSmsByMailReaderExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'ReadMailQueueAndCreateSms' link equals 'http://localhost/GatWs1/SmsByMailReader.asmx?op=ReadMailQueueAndCreateSms'
        /// </summary>
        public string UIReadMailQueueAndCreaHyperlinkHref = "http://localhost/GatWs1/SmsByMailReader.asmx?op=ReadMailQueueAndCreateSms";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSmsGatewayService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSmsGatewayServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'AddToInbox' link equals 'AddToInbox'
        /// </summary>
        public string UIAddToInboxHyperlinkInnerText = "AddToInbox";
        
        /// <summary>
        /// Verify that the 'Href' property of 'AddToInbox' link equals 'http://localhost/GatWs1/SmsGatewayService.asmx?op=AddToInbox'
        /// </summary>
        public string UIAddToInboxHyperlinkHref = "http://localhost/GatWs1/SmsGatewayService.asmx?op=AddToInbox";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetMessagesInOutbox' link equals 'http://localhost/GatWs1/SmsGatewayService.asmx?op=GetMessagesInOutbox'
        /// </summary>
        public string UIGetMessagesInOutboxHyperlinkHref = "http://localhost/GatWs1/SmsGatewayService.asmx?op=GetMessagesInOutbox";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetUnsentMessages' link equals 'http://localhost/GatWs1/SmsGatewayService.asmx?op=GetUnsentMessages'
        /// </summary>
        public string UIGetUnsentMessagesHyperlinkHref = "http://localhost/GatWs1/SmsGatewayService.asmx?op=GetUnsentMessages";
        
        /// <summary>
        /// Verify that the 'Href' property of 'MarkMessage' link equals 'http://localhost/GatWs1/SmsGatewayService.asmx?op=MarkMessage'
        /// </summary>
        public string UIMarkMessageHyperlinkHref = "http://localhost/GatWs1/SmsGatewayService.asmx?op=MarkMessage";
        
        /// <summary>
        /// Verify that the 'Href' property of 'MessageCleanUp' link equals 'http://localhost/GatWs1/SmsGatewayService.asmx?op=MessageCleanUp'
        /// </summary>
        public string UIMessageCleanUpHyperlinkHref = "http://localhost/GatWs1/SmsGatewayService.asmx?op=MessageCleanUp";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSmsService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSmsServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'ProcessSmsQueues' link equals 'http://localhost/GatWs1/SmsService.asmx?op=ProcessSmsQueues'
        /// </summary>
        public string UIProcessSmsQueuesHyperlinkHref = "http://localhost/GatWs1/SmsService.asmx?op=ProcessSmsQueues";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSystemInformationService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSystemInformationServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'GetAliveStatus' link equals 'http://localhost/GatWs1/SystemInformationService.asmx?op=GetAliveStatus'
        /// </summary>
        public string UIGetAliveStatusHyperlinkHref = "http://localhost/GatWs1/SystemInformationService.asmx?op=GetAliveStatus";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTaskAgreementService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckTaskAgreementServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'UpdateTaskAgreement' link equals 'http://localhost/GatWs1/TaskAgreementService.asmx?op=UpdateTaskAgreement'
        /// </summary>
        public string UIUpdateTaskAgreementHyperlinkHref = "http://localhost/GatWs1/TaskAgreementService.asmx?op=UpdateTaskAgreement";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTestService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckTestServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'TestDatabaseConnection' link equals 'http://localhost/GatWs1/TestService.asmx?op=TestDatabaseConnection'
        /// </summary>
        public string UITestDatabaseConnectiHyperlinkHref = "http://localhost/GatWs1/TestService.asmx?op=TestDatabaseConnection";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTimeregImport'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckTimeregImportExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'ImportTimeregRegistration' link equals 'http://localhost/GatWs2/TimeregImport.asmx?op=ImportTimeregRegistration'
        /// </summary>
        public string UIImportTimeregRegistrHyperlinkHref = "http://localhost/GatWs2/TimeregImport.asmx?op=ImportTimeregRegistration";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckUniqueService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckUniqueServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'ProfilturnusFaaPerson' link equals 'http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaPerson'
        /// </summary>
        public string UIProfilturnusFaaPersoHyperlinkHref = "http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaPerson";
        
        /// <summary>
        /// Verify that the 'Href' property of 'ProfilturnusFaaStilling' link equals 'http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaStilling'
        /// </summary>
        public string UIProfilturnusFaaStillHyperlinkHref = "http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaStilling";
        
        /// <summary>
        /// Verify that the 'Href' property of 'ProfilturnusFaaVaktplan' link equals 'http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaVaktplan'
        /// </summary>
        public string UIProfilturnusFaaVaktpHyperlinkHref = "http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaVaktplan";
        
        /// <summary>
        /// Verify that the 'Href' property of 'profilturnus_function' link equals 'http://localhost/GatWs2/UniqueService.asmx?op=profilturnus_function'
        /// </summary>
        public string UIProfilturnus_functioHyperlinkHref = "http://localhost/GatWs2/UniqueService.asmx?op=profilturnus_function";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWeaBreakService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckWeaBreakServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'CalculateWeaAndSaveWeaBreaksForEmployee' link equals 'http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksForEmployee'
        /// </summary>
        public string UICalculateWeaAndSaveWHyperlinkHref = "http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksForEm" +
            "ployee";
        
        /// <summary>
        /// Verify that the 'Href' property of 'CalculateWeaAndSaveWeaBreaksOverrideScheduler' link equals 'http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksOverrideScheduler'
        /// </summary>
        public string UICalculateWeaAndSaveWHyperlink1Href = "http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksOverr" +
            "ideScheduler";
        
        /// <summary>
        /// Verify that the 'Href' property of 'CalculateWeaAndSaveWeaBreaksUsingScheduler' link equals 'http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksUsingScheduler'
        /// </summary>
        public string UICalculateWeaAndSaveWHyperlink2Href = "http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksUsing" +
            "Scheduler";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWishPlan'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckWishPlanExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Ønskeplan for BASEPLAN TIL AUTOTEST' label equals 'Ønskeplan for BASEPLAN TIL AUTOTEST'
        /// </summary>
        public string UIØnskeplanforBASEPLANTextName = "Ønskeplan for BASEPLAN TIL AUTOTEST";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWishPlanWebService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckWishPlanWebServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Href' property of 'GetAdditionalData' link equals 'http://localhost/GatWs2/WishPlanWebService.asmx?op=GetAdditionalData'
        /// </summary>
        public string UIGetAdditionalDataHyperlinkHref = "http://localhost/GatWs2/WishPlanWebService.asmx?op=GetAdditionalData";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetDemand' link equals 'http://localhost/GatWs2/WishPlanWebService.asmx?op=GetDemand'
        /// </summary>
        public string UIGetDemandHyperlinkHref = "http://localhost/GatWs2/WishPlanWebService.asmx?op=GetDemand";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetPlan' link equals 'http://localhost/GatWs2/WishPlanWebService.asmx?op=GetPlan'
        /// </summary>
        public string UIGetPlanHyperlinkHref = "http://localhost/GatWs2/WishPlanWebService.asmx?op=GetPlan";
        
        /// <summary>
        /// Verify that the 'Href' property of 'SavePlan' link equals 'http://localhost/GatWs2/WishPlanWebService.asmx?op=SavePlan'
        /// </summary>
        public string UISavePlanHyperlinkHref = "http://localhost/GatWs2/WishPlanWebService.asmx?op=SavePlan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CountServices'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CountServicesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TagInstance' property of 'WeaBreakService' link equals '28'
        /// </summary>
        public int UIWeaBreakServiceHyperlinkTagInstance = 28;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CountServicesWs2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CountServicesWs2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TagInstance' property of 'WishPlanWebService' link equals '4'
        /// </summary>
        public int UIWishPlanWebServiceHyperlinkTagInstance = 4;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TesService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TesServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetWorkShiftData' link equals 'GetWorkShiftData'
        /// </summary>
        public string UIGetWorkShiftDataHyperlinkInnerText = "GetWorkShiftData";
        
        /// <summary>
        /// Verify that the 'Href' property of 'GetWorkShiftData' link equals 'http://localhost/GatWs1/TesService.asmx?op=GetWorkShiftData'
        /// </summary>
        public string UIGetWorkShiftDataHyperlinkHref = "http://localhost/GatWs1/TesService.asmx?op=GetWorkShiftData";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDepartmentService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckDepartmentServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'GetDepartmentRosterV20202' link equals 'GetDepartmentRosterV20202'
        /// </summary>
        public string UIGetDepartmentRosterVHyperlinkInnerText = "GetDepartmentRosterV20202";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIIS100DetailedError4Window : BrowserWindow
    {
        
        public UIIIS100DetailedError4Window()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "IIS 10.0 Detailed Error - 404.3 - Not Found";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("IIS 10.0 Detailed Error - 404.3 - Not Found");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIIIS100DetailedError4Document UIIIS100DetailedError4Document
        {
            get
            {
                if ((this.mUIIIS100DetailedError4Document == null))
                {
                    this.mUIIIS100DetailedError4Document = new UIIIS100DetailedError4Document(this);
                }
                return this.mUIIIS100DetailedError4Document;
            }
        }
        #endregion
        
        #region Fields
        private UIIIS100DetailedError4Document mUIIIS100DetailedError4Document;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIIS100DetailedError4Document : HtmlDocument
    {
        
        public UIIIS100DetailedError4Document(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "IIS 10.0 Detailed Error - 404.3 - Not Found";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/ExternalFlexService.svc";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/ExternalFlexService.svc";
            this.WindowTitles.Add("IIS 10.0 Detailed Error - 404.3 - Not Found");
            #endregion
        }
        
        #region Properties
        public UIDetailsrightPane UIDetailsrightPane
        {
            get
            {
                if ((this.mUIDetailsrightPane == null))
                {
                    this.mUIDetailsrightPane = new UIDetailsrightPane(this);
                }
                return this.mUIDetailsrightPane;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsrightPane mUIDetailsrightPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsrightPane : HtmlDiv
    {
        
        public UIDetailsrightPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "details-right";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Requested URL\r\n   http://localhost:80/Ga";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"details-right\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("IIS 10.0 Detailed Error - 404.3 - Not Found");
            #endregion
        }
        
        #region Properties
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTable mUIItemTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Requested URL\r\n   http://localhost:80/Ga";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "border=\"0\" cellspacing=\"0\" cellpadding=\"0\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "4";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = null;
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("IIS 10.0 Detailed Error - 404.3 - Not Found");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIHttplocalhost80GatWsCell
        {
            get
            {
                if ((this.mUIHttplocalhost80GatWsCell == null))
                {
                    this.mUIHttplocalhost80GatWsCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIHttplocalhost80GatWsCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIHttplocalhost80GatWsCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIHttplocalhost80GatWsCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIHttplocalhost80GatWsCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "http://localhost:80/GatWs1/ExternalFlexS";
                    this.mUIHttplocalhost80GatWsCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIHttplocalhost80GatWsCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "0";
                    this.mUIHttplocalhost80GatWsCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIHttplocalhost80GatWsCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIHttplocalhost80GatWsCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "5";
                    this.mUIHttplocalhost80GatWsCell.WindowTitles.Add("IIS 10.0 Detailed Error - 404.3 - Not Found");
                    #endregion
                }
                return this.mUIHttplocalhost80GatWsCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIHttplocalhost80GatWsCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatExternalFlexServiWindow : BrowserWindow
    {
        
        public UIGatExternalFlexServiWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Gat.ExternalFlexService Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Gat.ExternalFlexService Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGatExternalFlexServiDocument UIGatExternalFlexServiDocument
        {
            get
            {
                if ((this.mUIGatExternalFlexServiDocument == null))
                {
                    this.mUIGatExternalFlexServiDocument = new UIGatExternalFlexServiDocument(this);
                }
                return this.mUIGatExternalFlexServiDocument;
            }
        }
        
        public UIGatExternalFlexServiDocument1 UIGatExternalFlexServiDocument1
        {
            get
            {
                if ((this.mUIGatExternalFlexServiDocument1 == null))
                {
                    this.mUIGatExternalFlexServiDocument1 = new UIGatExternalFlexServiDocument1(this);
                }
                return this.mUIGatExternalFlexServiDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UIGatExternalFlexServiDocument mUIGatExternalFlexServiDocument;
        
        private UIGatExternalFlexServiDocument1 mUIGatExternalFlexServiDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatExternalFlexServiDocument : HtmlDocument
    {
        
        public UIGatExternalFlexServiDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Gat.ExternalFlexService Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/ExternalFlexService.svc";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/ExternalFlexService.svc";
            this.WindowTitles.Add("Gat.ExternalFlexService Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane : HtmlDiv
    {
        
        public UIContentPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Gat.ExternalFlexService Service\r\n\r\n\r\nYou";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Gat.ExternalFlexService Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIHttplocalhostGatWs1EHyperlink
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1EHyperlink == null))
                {
                    this.mUIHttplocalhostGatWs1EHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1EHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1/ExternalFlexService.svc?wsdl";
                    this.mUIHttplocalhostGatWs1EHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/ExternalFlexService.svc";
                    this.mUIHttplocalhostGatWs1EHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1EHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/ExternalFlexService.svc?wsdl";
                    this.mUIHttplocalhostGatWs1EHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1EHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1/ExternalFl";
                    this.mUIHttplocalhostGatWs1EHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIHttplocalhostGatWs1EHyperlink.WindowTitles.Add("Gat.ExternalFlexService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1EHyperlink;
            }
        }
        
        public HtmlHyperlink UIHttplocalhostGatWs1EHyperlink1
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1EHyperlink1 == null))
                {
                    this.mUIHttplocalhostGatWs1EHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1EHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1/ExternalFlexService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1EHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/ExternalFlexService.svc";
                    this.mUIHttplocalhostGatWs1EHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1EHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/ExternalFlexService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1EHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1EHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1/ExternalFl";
                    this.mUIHttplocalhostGatWs1EHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHttplocalhostGatWs1EHyperlink1.WindowTitles.Add("Gat.ExternalFlexService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1EHyperlink1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIHttplocalhostGatWs1EHyperlink;
        
        private HtmlHyperlink mUIHttplocalhostGatWs1EHyperlink1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatExternalFlexServiDocument1 : HtmlDocument
    {
        
        public UIGatExternalFlexServiDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Gat.ExternalFlexService Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1_se/ExternalFlexService.svc";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1_se/ExternalFlexService.svc";
            this.WindowTitles.Add("Gat.ExternalFlexService Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane1 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane1(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane1 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane1 : HtmlDiv
    {
        
        public UIContentPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Gat.ExternalFlexService Service\r\n\r\n\r\nYou";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Gat.ExternalFlexService Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIHttplocalhostGatWs1_Hyperlink
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1_Hyperlink == null))
                {
                    this.mUIHttplocalhostGatWs1_Hyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1_Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1_se/ExternalFlexService.svc?wsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/ExternalFlexService.svc";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/ExternalFlexService.svc?wsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1_se/Externa";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIHttplocalhostGatWs1_Hyperlink.WindowTitles.Add("Gat.ExternalFlexService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1_Hyperlink;
            }
        }
        
        public HtmlHyperlink UIHttplocalhostGatWs1_Hyperlink1
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1_Hyperlink1 == null))
                {
                    this.mUIHttplocalhostGatWs1_Hyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1_Hyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1_se/ExternalFlexService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/ExternalFlexService.svc";
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/ExternalFlexService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1_se/Externa";
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHttplocalhostGatWs1_Hyperlink1.WindowTitles.Add("Gat.ExternalFlexService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1_Hyperlink1;
            }
        }
        
        public HtmlHyperlink UIHttplocalhostGatWs1_Hyperlink2
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1_Hyperlink2 == null))
                {
                    this.mUIHttplocalhostGatWs1_Hyperlink2 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1_Hyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1_se/ExternalFlexService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/ExternalFlexService.svc";
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/ExternalFlexService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1_se/Externa";
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHttplocalhostGatWs1_Hyperlink2.WindowTitles.Add("Gat.ExternalFlexService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1_Hyperlink2;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIHttplocalhostGatWs1_Hyperlink;
        
        private HtmlHyperlink mUIHttplocalhostGatWs1_Hyperlink1;
        
        private HtmlHyperlink mUIHttplocalhostGatWs1_Hyperlink2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOppsettavservicejobbWindow : DXWindow
    {
        
        public UIOppsettavservicejobbWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Oppsett av servicejobber";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Oppsett av servicejobber");
            #endregion
        }
        
        #region Properties
        public UIPanelControl1Client UIPanelControl1Client
        {
            get
            {
                if ((this.mUIPanelControl1Client == null))
                {
                    this.mUIPanelControl1Client = new UIPanelControl1Client(this);
                }
                return this.mUIPanelControl1Client;
            }
        }
        
        public UIRibbonControlRibbon UIRibbonControlRibbon
        {
            get
            {
                if ((this.mUIRibbonControlRibbon == null))
                {
                    this.mUIRibbonControlRibbon = new UIRibbonControlRibbon(this);
                }
                return this.mUIRibbonControlRibbon;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControl1Client mUIPanelControl1Client;
        
        private UIRibbonControlRibbon mUIRibbonControlRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControl1Client : DXTestControl
    {
        
        public UIPanelControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Oppsett av servicejobber");
            #endregion
        }
        
        #region Properties
        public UIRibbonViewHostCustom UIRibbonViewHostCustom
        {
            get
            {
                if ((this.mUIRibbonViewHostCustom == null))
                {
                    this.mUIRibbonViewHostCustom = new UIRibbonViewHostCustom(this);
                }
                return this.mUIRibbonViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonViewHostCustom mUIRibbonViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonViewHostCustom : DXTestControl
    {
        
        public UIRibbonViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonViewHost";
            this.WindowTitles.Add("Oppsett av servicejobber");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Oppsett av servicejobber");
            #endregion
        }
        
        #region Properties
        public UIScheduledTasksViewCustom UIScheduledTasksViewCustom
        {
            get
            {
                if ((this.mUIScheduledTasksViewCustom == null))
                {
                    this.mUIScheduledTasksViewCustom = new UIScheduledTasksViewCustom(this);
                }
                return this.mUIScheduledTasksViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIScheduledTasksViewCustom mUIScheduledTasksViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIScheduledTasksViewCustom : DXTestControl
    {
        
        public UIScheduledTasksViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ScheduledTasksView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ScheduledTasksView";
            this.WindowTitles.Add("Oppsett av servicejobber");
            #endregion
        }
        
        #region Properties
        public UIGcTasksTable UIGcTasksTable
        {
            get
            {
                if ((this.mUIGcTasksTable == null))
                {
                    this.mUIGcTasksTable = new UIGcTasksTable(this);
                }
                return this.mUIGcTasksTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcTasksTable mUIGcTasksTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcTasksTable : DXGrid
    {
        
        public UIGcTasksTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcTasks";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Oppsett av servicejobber");
            #endregion
        }
        
        #region Properties
        public DXCell UIBehandlekømedendringCell
        {
            get
            {
                if ((this.mUIBehandlekømedendringCell == null))
                {
                    this.mUIBehandlekømedendringCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBehandlekømedendringCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcTasksGridControlCell[View]gvTasks[Row]5[Column]colFriendlyName";
                    this.mUIBehandlekømedendringCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBehandlekømedendringCell.WindowTitles.Add("Oppsett av servicejobber");
                    #endregion
                }
                return this.mUIBehandlekømedendringCell;
            }
        }
        
        public DXCell UIKalkulerAMLbruddCell
        {
            get
            {
                if ((this.mUIKalkulerAMLbruddCell == null))
                {
                    this.mUIKalkulerAMLbruddCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKalkulerAMLbruddCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcTasksGridControlCell[View]gvTasks[Row]14[Column]colFriendlyName";
                    this.mUIKalkulerAMLbruddCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKalkulerAMLbruddCell.WindowTitles.Add("Oppsett av servicejobber");
                    #endregion
                }
                return this.mUIKalkulerAMLbruddCell;
            }
        }
        
        public DXCell UIOppdatereBussinessAnCell
        {
            get
            {
                if ((this.mUIOppdatereBussinessAnCell == null))
                {
                    this.mUIOppdatereBussinessAnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOppdatereBussinessAnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcTasksGridControlCell[View]gvTasks[Row]17[Column]colFriendlyName";
                    this.mUIOppdatereBussinessAnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOppdatereBussinessAnCell.WindowTitles.Add("Oppsett av servicejobber");
                    #endregion
                }
                return this.mUIOppdatereBussinessAnCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIBehandlekømedendringCell;
        
        private DXCell mUIKalkulerAMLbruddCell;
        
        private DXCell mUIOppdatereBussinessAnCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonControlRibbon : DXRibbon
    {
        
        public UIRibbonControlRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.WindowTitles.Add("Oppsett av servicejobber");
            #endregion
        }
        
        #region Properties
        public UIRibbonPage1RibbonPage UIRibbonPage1RibbonPage
        {
            get
            {
                if ((this.mUIRibbonPage1RibbonPage == null))
                {
                    this.mUIRibbonPage1RibbonPage = new UIRibbonPage1RibbonPage(this);
                }
                return this.mUIRibbonPage1RibbonPage;
            }
        }
        
        public DXButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new DXButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Close";
                    this.mUICloseButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WindowTitleButton";
                    this.mUICloseButton.WindowTitles.Add("Oppsett av servicejobber");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonPage1RibbonPage mUIRibbonPage1RibbonPage;
        
        private DXButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonPage1RibbonPage : DXRibbonPage
    {
        
        public UIRibbonPage1RibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonPage1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Oppsett av servicejobber");
            #endregion
        }
        
        #region Properties
        public UIRpgServicesRibbonPageGroup UIRpgServicesRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgServicesRibbonPageGroup == null))
                {
                    this.mUIRpgServicesRibbonPageGroup = new UIRpgServicesRibbonPageGroup(this);
                }
                return this.mUIRpgServicesRibbonPageGroup;
            }
        }
        
        public UIRibbonPageGroup1RibbonPageGroup UIRibbonPageGroup1RibbonPageGroup
        {
            get
            {
                if ((this.mUIRibbonPageGroup1RibbonPageGroup == null))
                {
                    this.mUIRibbonPageGroup1RibbonPageGroup = new UIRibbonPageGroup1RibbonPageGroup(this);
                }
                return this.mUIRibbonPageGroup1RibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgServicesRibbonPageGroup mUIRpgServicesRibbonPageGroup;
        
        private UIRibbonPageGroup1RibbonPageGroup mUIRibbonPageGroup1RibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpgServicesRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgServicesRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgServices";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Oppsett av servicejobber");
            #endregion
        }
        
        #region Properties
        public DXRibbonItem UIAktivRibbonItem
        {
            get
            {
                if ((this.mUIAktivRibbonItem == null))
                {
                    this.mUIAktivRibbonItem = new DXRibbonItem(this);
                    #region Search Criteria
                    this.mUIAktivRibbonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiActive";
                    this.mUIAktivRibbonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonItem";
                    this.mUIAktivRibbonItem.WindowTitles.Add("Oppsett av servicejobber");
                    #endregion
                }
                return this.mUIAktivRibbonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonItem mUIAktivRibbonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonPageGroup1RibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRibbonPageGroup1RibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonPageGroup1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Oppsett av servicejobber");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UILagreRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUILagreRibbonBaseButtonItem == null))
                {
                    this.mUILagreRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUILagreRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiSave";
                    this.mUILagreRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUILagreRibbonBaseButtonItem.WindowTitles.Add("Oppsett av servicejobber");
                    #endregion
                }
                return this.mUILagreRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUILagreRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGATFlexWindow : WinWindow
    {
        
        public UIGATFlexWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "GAT-Flex";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIDocumentsHostTabList UIDocumentsHostTabList
        {
            get
            {
                if ((this.mUIDocumentsHostTabList == null))
                {
                    this.mUIDocumentsHostTabList = new UIDocumentsHostTabList(this);
                }
                return this.mUIDocumentsHostTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIDocumentsHostTabList mUIDocumentsHostTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDocumentsHostTabList : DXTestControl
    {
        
        public UIDocumentsHostTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "DocumentsHost[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DocumentsHost";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIAlleansatteCustom UIAlleansatteCustom
        {
            get
            {
                if ((this.mUIAlleansatteCustom == null))
                {
                    this.mUIAlleansatteCustom = new UIAlleansatteCustom(this);
                }
                return this.mUIAlleansatteCustom;
            }
        }
        
        public UIAnsattCustom UIAnsattCustom
        {
            get
            {
                if ((this.mUIAnsattCustom == null))
                {
                    this.mUIAnsattCustom = new UIAnsattCustom(this);
                }
                return this.mUIAnsattCustom;
            }
        }
        
        public UIAllaanställdaCustom UIAllaanställdaCustom
        {
            get
            {
                if ((this.mUIAllaanställdaCustom == null))
                {
                    this.mUIAllaanställdaCustom = new UIAllaanställdaCustom(this);
                }
                return this.mUIAllaanställdaCustom;
            }
        }
        
        public UIAnställdCustom UIAnställdCustom
        {
            get
            {
                if ((this.mUIAnställdCustom == null))
                {
                    this.mUIAnställdCustom = new UIAnställdCustom(this);
                }
                return this.mUIAnställdCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIAlleansatteCustom mUIAlleansatteCustom;
        
        private UIAnsattCustom mUIAnsattCustom;
        
        private UIAllaanställdaCustom mUIAllaanställdaCustom;
        
        private UIAnställdCustom mUIAnställdCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAlleansatteCustom : DXTestControl
    {
        
        public UIAlleansatteCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Alle ansatte";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DocumentContainer";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIEmployeeSelectionConCustom UIEmployeeSelectionConCustom
        {
            get
            {
                if ((this.mUIEmployeeSelectionConCustom == null))
                {
                    this.mUIEmployeeSelectionConCustom = new UIEmployeeSelectionConCustom(this);
                }
                return this.mUIEmployeeSelectionConCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeSelectionConCustom mUIEmployeeSelectionConCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeSelectionConCustom : DXTestControl
    {
        
        public UIEmployeeSelectionConCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeSelectionControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeSelectionControl";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UITcEmployeesList UITcEmployeesList
        {
            get
            {
                if ((this.mUITcEmployeesList == null))
                {
                    this.mUITcEmployeesList = new UITcEmployeesList(this);
                }
                return this.mUITcEmployeesList;
            }
        }
        #endregion
        
        #region Fields
        private UITcEmployeesList mUITcEmployeesList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcEmployeesList : WinList
    {
        
        public UITcEmployeesList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public WinListItem UIItemListItem
        {
            get
            {
                if ((this.mUIItemListItem == null))
                {
                    this.mUIItemListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIItemListItem.SearchProperties[WinListItem.PropertyNames.Instance] = "8";
                    this.mUIItemListItem.WindowTitles.Add("GAT-Flex");
                    #endregion
                }
                return this.mUIItemListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIItemListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsattCustom : DXTestControl
    {
        
        public UIAnsattCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DocumentContainer";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIEmployeeClockControlCustom UIEmployeeClockControlCustom
        {
            get
            {
                if ((this.mUIEmployeeClockControlCustom == null))
                {
                    this.mUIEmployeeClockControlCustom = new UIEmployeeClockControlCustom(this);
                }
                return this.mUIEmployeeClockControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeClockControlCustom mUIEmployeeClockControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeClockControlCustom : DXTestControl
    {
        
        public UIEmployeeClockControlCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeClockControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeClockControl";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIXscMainScrollableControl UIXscMainScrollableControl
        {
            get
            {
                if ((this.mUIXscMainScrollableControl == null))
                {
                    this.mUIXscMainScrollableControl = new UIXscMainScrollableControl(this);
                }
                return this.mUIXscMainScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscMainScrollableControl mUIXscMainScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXscMainScrollableControl : DXScrollableControl
    {
        
        public UIXscMainScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public DXTestControl UIBtnClockInLabel
        {
            get
            {
                if ((this.mUIBtnClockInLabel == null))
                {
                    this.mUIBtnClockInLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIBtnClockInLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "btnClockIn";
                    this.mUIBtnClockInLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ExtendedLabelControl";
                    this.mUIBtnClockInLabel.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIBtnClockInLabel.WindowTitles.Add("GAT-Flex");
                    #endregion
                }
                return this.mUIBtnClockInLabel;
            }
        }
        
        public DXTestControl UIBtnClockOutLabel
        {
            get
            {
                if ((this.mUIBtnClockOutLabel == null))
                {
                    this.mUIBtnClockOutLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIBtnClockOutLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "btnClockOut";
                    this.mUIBtnClockOutLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ExtendedLabelControl";
                    this.mUIBtnClockOutLabel.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIBtnClockOutLabel.WindowTitles.Add("GAT-Flex");
                    #endregion
                }
                return this.mUIBtnClockOutLabel;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIBtnClockInLabel;
        
        private DXTestControl mUIBtnClockOutLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAllaanställdaCustom : DXTestControl
    {
        
        public UIAllaanställdaCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Alla anställda";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DocumentContainer";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIEmployeeSelectionConCustom1 UIEmployeeSelectionConCustom
        {
            get
            {
                if ((this.mUIEmployeeSelectionConCustom == null))
                {
                    this.mUIEmployeeSelectionConCustom = new UIEmployeeSelectionConCustom1(this);
                }
                return this.mUIEmployeeSelectionConCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeSelectionConCustom1 mUIEmployeeSelectionConCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeSelectionConCustom1 : DXTestControl
    {
        
        public UIEmployeeSelectionConCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeSelectionControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeSelectionControl";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UITcEmployeesList1 UITcEmployeesList
        {
            get
            {
                if ((this.mUITcEmployeesList == null))
                {
                    this.mUITcEmployeesList = new UITcEmployeesList1(this);
                }
                return this.mUITcEmployeesList;
            }
        }
        #endregion
        
        #region Fields
        private UITcEmployeesList1 mUITcEmployeesList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcEmployeesList1 : WinList
    {
        
        public UITcEmployeesList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public WinListItem UIItemListItem
        {
            get
            {
                if ((this.mUIItemListItem == null))
                {
                    this.mUIItemListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIItemListItem.SearchProperties[WinListItem.PropertyNames.Instance] = "14";
                    this.mUIItemListItem.WindowTitles.Add("GAT-Flex");
                    #endregion
                }
                return this.mUIItemListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIItemListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnställdCustom : DXTestControl
    {
        
        public UIAnställdCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Anställd";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DocumentContainer";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIEmployeeClockControlCustom1 UIEmployeeClockControlCustom
        {
            get
            {
                if ((this.mUIEmployeeClockControlCustom == null))
                {
                    this.mUIEmployeeClockControlCustom = new UIEmployeeClockControlCustom1(this);
                }
                return this.mUIEmployeeClockControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeClockControlCustom1 mUIEmployeeClockControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeClockControlCustom1 : DXTestControl
    {
        
        public UIEmployeeClockControlCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeClockControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeClockControl";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIXscMainScrollableControl1 UIXscMainScrollableControl
        {
            get
            {
                if ((this.mUIXscMainScrollableControl == null))
                {
                    this.mUIXscMainScrollableControl = new UIXscMainScrollableControl1(this);
                }
                return this.mUIXscMainScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscMainScrollableControl1 mUIXscMainScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXscMainScrollableControl1 : DXScrollableControl
    {
        
        public UIXscMainScrollableControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public DXTestControl UIBtnClockInLabel
        {
            get
            {
                if ((this.mUIBtnClockInLabel == null))
                {
                    this.mUIBtnClockInLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIBtnClockInLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "btnClockIn";
                    this.mUIBtnClockInLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ExtendedLabelControl";
                    this.mUIBtnClockInLabel.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIBtnClockInLabel.WindowTitles.Add("GAT-Flex");
                    #endregion
                }
                return this.mUIBtnClockInLabel;
            }
        }
        
        public DXTestControl UIBtnClockOutLabel
        {
            get
            {
                if ((this.mUIBtnClockOutLabel == null))
                {
                    this.mUIBtnClockOutLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIBtnClockOutLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "btnClockOut";
                    this.mUIBtnClockOutLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ExtendedLabelControl";
                    this.mUIBtnClockOutLabel.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIBtnClockOutLabel.WindowTitles.Add("GAT-Flex");
                    #endregion
                }
                return this.mUIBtnClockOutLabel;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIBtnClockInLabel;
        
        private DXTestControl mUIBtnClockOutLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGATFlexWindow1 : DXWindow
    {
        
        public UIGATFlexWindow1()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GAT-Flex";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIDocumentsHostTabList1 UIDocumentsHostTabList
        {
            get
            {
                if ((this.mUIDocumentsHostTabList == null))
                {
                    this.mUIDocumentsHostTabList = new UIDocumentsHostTabList1(this);
                }
                return this.mUIDocumentsHostTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIDocumentsHostTabList1 mUIDocumentsHostTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDocumentsHostTabList1 : DXTestControl
    {
        
        public UIDocumentsHostTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "DocumentsHost[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DocumentsHost";
            #endregion
        }
        
        #region Properties
        public UIAnsattCustom1 UIAnsattCustom
        {
            get
            {
                if ((this.mUIAnsattCustom == null))
                {
                    this.mUIAnsattCustom = new UIAnsattCustom1(this);
                }
                return this.mUIAnsattCustom;
            }
        }
        
        public UIAlleansatteCustom1 UIAlleansatteCustom
        {
            get
            {
                if ((this.mUIAlleansatteCustom == null))
                {
                    this.mUIAlleansatteCustom = new UIAlleansatteCustom1(this);
                }
                return this.mUIAlleansatteCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIAnsattCustom1 mUIAnsattCustom;
        
        private UIAlleansatteCustom1 mUIAlleansatteCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsattCustom1 : DXTestControl
    {
        
        public UIAnsattCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DocumentContainer";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIEmployeeClockControlCustom2 UIEmployeeClockControlCustom
        {
            get
            {
                if ((this.mUIEmployeeClockControlCustom == null))
                {
                    this.mUIEmployeeClockControlCustom = new UIEmployeeClockControlCustom2(this);
                }
                return this.mUIEmployeeClockControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeClockControlCustom2 mUIEmployeeClockControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeClockControlCustom2 : DXTestControl
    {
        
        public UIEmployeeClockControlCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeClockControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeClockControl";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIXscMainScrollableControl2 UIXscMainScrollableControl
        {
            get
            {
                if ((this.mUIXscMainScrollableControl == null))
                {
                    this.mUIXscMainScrollableControl = new UIXscMainScrollableControl2(this);
                }
                return this.mUIXscMainScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscMainScrollableControl2 mUIXscMainScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXscMainScrollableControl2 : DXScrollableControl
    {
        
        public UIXscMainScrollableControl2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public DXTestControl UIBtnClockInLabel
        {
            get
            {
                if ((this.mUIBtnClockInLabel == null))
                {
                    this.mUIBtnClockInLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIBtnClockInLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "btnClockIn";
                    this.mUIBtnClockInLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ExtendedLabelControl";
                    this.mUIBtnClockInLabel.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIBtnClockInLabel.WindowTitles.Add("GAT-Flex");
                    #endregion
                }
                return this.mUIBtnClockInLabel;
            }
        }
        
        public DXTestControl UIBtnClockOutLabel
        {
            get
            {
                if ((this.mUIBtnClockOutLabel == null))
                {
                    this.mUIBtnClockOutLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIBtnClockOutLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "btnClockOut";
                    this.mUIBtnClockOutLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ExtendedLabelControl";
                    this.mUIBtnClockOutLabel.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIBtnClockOutLabel.WindowTitles.Add("GAT-Flex");
                    #endregion
                }
                return this.mUIBtnClockOutLabel;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIBtnClockInLabel;
        
        private DXTestControl mUIBtnClockOutLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAlleansatteCustom1 : DXTestControl
    {
        
        public UIAlleansatteCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Alle ansatte";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DocumentContainer";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIEmployeeSelectionConCustom2 UIEmployeeSelectionConCustom
        {
            get
            {
                if ((this.mUIEmployeeSelectionConCustom == null))
                {
                    this.mUIEmployeeSelectionConCustom = new UIEmployeeSelectionConCustom2(this);
                }
                return this.mUIEmployeeSelectionConCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeSelectionConCustom2 mUIEmployeeSelectionConCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeSelectionConCustom2 : DXTestControl
    {
        
        public UIEmployeeSelectionConCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeSelectionControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeSelectionControl";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public UITcEmployeesList2 UITcEmployeesList
        {
            get
            {
                if ((this.mUITcEmployeesList == null))
                {
                    this.mUITcEmployeesList = new UITcEmployeesList2(this);
                }
                return this.mUITcEmployeesList;
            }
        }
        #endregion
        
        #region Fields
        private UITcEmployeesList2 mUITcEmployeesList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcEmployeesList2 : WinList
    {
        
        public UITcEmployeesList2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("GAT-Flex");
            #endregion
        }
        
        #region Properties
        public WinListItem UIItemListItem
        {
            get
            {
                if ((this.mUIItemListItem == null))
                {
                    this.mUIItemListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIItemListItem.SearchProperties[WinListItem.PropertyNames.Instance] = "8";
                    this.mUIItemListItem.WindowTitles.Add("GAT-Flex");
                    #endregion
                }
                return this.mUIItemListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIItemListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISickleaveMessageImpoWindow : BrowserWindow
    {
        
        public UISickleaveMessageImpoWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "SickleaveMessageImportService Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            this.WindowTitles.Add("AppService Web Service");
            this.WindowTitles.Add("BussinesAnalyzeService Web Service");
            this.WindowTitles.Add("CalendarIntegrationWebService Web Service");
            this.WindowTitles.Add("CalendarService Web Service");
            this.WindowTitles.Add("ExportService Web Service");
            this.WindowTitles.Add("Gat.FlexExportService Service");
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            this.WindowTitles.Add("GatTaskSchedulerDataService Web Service");
            this.WindowTitles.Add("PayslipImportService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UISickleaveMessageImpoDocument UISickleaveMessageImpoDocument
        {
            get
            {
                if ((this.mUISickleaveMessageImpoDocument == null))
                {
                    this.mUISickleaveMessageImpoDocument = new UISickleaveMessageImpoDocument(this);
                }
                return this.mUISickleaveMessageImpoDocument;
            }
        }
        
        public UISickleaveMessageImpoDocument1 UISickleaveMessageImpoDocument1
        {
            get
            {
                if ((this.mUISickleaveMessageImpoDocument1 == null))
                {
                    this.mUISickleaveMessageImpoDocument1 = new UISickleaveMessageImpoDocument1(this);
                }
                return this.mUISickleaveMessageImpoDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UISickleaveMessageImpoDocument mUISickleaveMessageImpoDocument;
        
        private UISickleaveMessageImpoDocument1 mUISickleaveMessageImpoDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISickleaveMessageImpoDocument : HtmlDocument
    {
        
        public UISickleaveMessageImpoDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "SickleaveMessageImportService Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/SickleaveMessageImportService.svc";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/SickleaveMessageImportService.svc";
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane2 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane2(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane2 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane2 : HtmlDiv
    {
        
        public UIContentPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "SickleaveMessageImportService Service\r\n\r\n";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIHttplocalhostGatWs1SHyperlink
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1SHyperlink == null))
                {
                    this.mUIHttplocalhostGatWs1SHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1SHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1/SickleaveMessageImportService.svc?wsdl";
                    this.mUIHttplocalhostGatWs1SHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/SickleaveMessageImportService.svc";
                    this.mUIHttplocalhostGatWs1SHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1SHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/SickleaveMessageImportService.svc?wsdl";
                    this.mUIHttplocalhostGatWs1SHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1SHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1/SickleaveM";
                    this.mUIHttplocalhostGatWs1SHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIHttplocalhostGatWs1SHyperlink.WindowTitles.Add("SickleaveMessageImportService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1SHyperlink;
            }
        }
        
        public HtmlHyperlink UIHttplocalhostGatWs1SHyperlink1
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1SHyperlink1 == null))
                {
                    this.mUIHttplocalhostGatWs1SHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1SHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1/SickleaveMessageImportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1SHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/SickleaveMessageImportService.svc";
                    this.mUIHttplocalhostGatWs1SHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1SHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/SickleaveMessageImportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1SHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1SHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1/SickleaveM";
                    this.mUIHttplocalhostGatWs1SHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHttplocalhostGatWs1SHyperlink1.WindowTitles.Add("SickleaveMessageImportService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1SHyperlink1;
            }
        }
        
        public HtmlHyperlink UIHttplocalhostGatWs1SHyperlink2
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1SHyperlink2 == null))
                {
                    this.mUIHttplocalhostGatWs1SHyperlink2 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1SHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIHttplocalhostGatWs1SHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHttplocalhostGatWs1SHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHttplocalhostGatWs1SHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1/SickleaveMessageImportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1SHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/SickleaveMessageImportService.svc";
                    this.mUIHttplocalhostGatWs1SHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1SHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/SickleaveMessageImportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1SHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1SHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1/SickleaveM";
                    this.mUIHttplocalhostGatWs1SHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHttplocalhostGatWs1SHyperlink2.WindowTitles.Add("SickleaveMessageImportService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1SHyperlink2;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIHttplocalhostGatWs1SHyperlink;
        
        private HtmlHyperlink mUIHttplocalhostGatWs1SHyperlink1;
        
        private HtmlHyperlink mUIHttplocalhostGatWs1SHyperlink2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISickleaveMessageImpoDocument1 : HtmlDocument
    {
        
        public UISickleaveMessageImpoDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "SickleaveMessageImportService Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1_se/SickleaveMessageImportService.svc";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1_se/SickleaveMessageImportService.svc";
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane3 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane3(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane3 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane3 : HtmlDiv
    {
        
        public UIContentPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "SickleaveMessageImportService Service\r\n\r\n";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIHttplocalhostGatWs1_Hyperlink
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1_Hyperlink == null))
                {
                    this.mUIHttplocalhostGatWs1_Hyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1_Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1_se/SickleaveMessageImportService.svc?wsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/SickleaveMessageImportService.svc";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/SickleaveMessageImportService.svc?wsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1_se/Sicklea";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIHttplocalhostGatWs1_Hyperlink.WindowTitles.Add("SickleaveMessageImportService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1_Hyperlink;
            }
        }
        
        public HtmlHyperlink UIHttplocalhostGatWs1_Hyperlink1
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1_Hyperlink1 == null))
                {
                    this.mUIHttplocalhostGatWs1_Hyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1_Hyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1_se/SickleaveMessageImportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/SickleaveMessageImportService.svc";
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/SickleaveMessageImportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1_se/Sicklea";
                    this.mUIHttplocalhostGatWs1_Hyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHttplocalhostGatWs1_Hyperlink1.WindowTitles.Add("SickleaveMessageImportService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1_Hyperlink1;
            }
        }
        
        public HtmlHyperlink UIHttplocalhostGatWs1_Hyperlink2
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1_Hyperlink2 == null))
                {
                    this.mUIHttplocalhostGatWs1_Hyperlink2 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1_Hyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1_se/SickleaveMessageImportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/SickleaveMessageImportService.svc";
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/SickleaveMessageImportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1_se/Sicklea";
                    this.mUIHttplocalhostGatWs1_Hyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHttplocalhostGatWs1_Hyperlink2.WindowTitles.Add("SickleaveMessageImportService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1_Hyperlink2;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIHttplocalhostGatWs1_Hyperlink;
        
        private HtmlHyperlink mUIHttplocalhostGatWs1_Hyperlink1;
        
        private HtmlHyperlink mUIHttplocalhostGatWs1_Hyperlink2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceV20Window : BrowserWindow
    {
        
        public UIDepartmentServiceV20Window()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "DepartmentServiceV20182 Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("DepartmentServiceV20182 Web Service");
            this.WindowTitles.Add("RoleDepartmentServiceV20182 Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDepartmentServiceV20Document UIDepartmentServiceV20Document
        {
            get
            {
                if ((this.mUIDepartmentServiceV20Document == null))
                {
                    this.mUIDepartmentServiceV20Document = new UIDepartmentServiceV20Document(this);
                }
                return this.mUIDepartmentServiceV20Document;
            }
        }
        
        public UIRoleDepartmentServicDocument UIRoleDepartmentServicDocument
        {
            get
            {
                if ((this.mUIRoleDepartmentServicDocument == null))
                {
                    this.mUIRoleDepartmentServicDocument = new UIRoleDepartmentServicDocument(this);
                }
                return this.mUIRoleDepartmentServicDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDepartmentServiceV20Document mUIDepartmentServiceV20Document;
        
        private UIRoleDepartmentServicDocument mUIRoleDepartmentServicDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceV20Document : HtmlDocument
    {
        
        public UIDepartmentServiceV20Document(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "DepartmentServiceV20182 Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/DepartmentServiceV20182.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/DepartmentServiceV20182.asmx";
            this.WindowTitles.Add("DepartmentServiceV20182 Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane4 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane4(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane4 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane4 : HtmlDiv
    {
        
        public UIContentPane4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "DepartmentServiceV20182\r\n\r\n\r\nDepartment ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("DepartmentServiceV20182 Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetDepartmentRosterHyperlink
        {
            get
            {
                if ((this.mUIGetDepartmentRosterHyperlink == null))
                {
                    this.mUIGetDepartmentRosterHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetDepartmentRosterHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetDepartmentRoster";
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/DepartmentServiceV20182.asmx";
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/DepartmentServiceV20182.asmx?op=GetDepartmentRoster";
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"DepartmentServiceV20182.asmx?op=Ge";
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIGetDepartmentRosterHyperlink.WindowTitles.Add("DepartmentServiceV20182 Web Service");
                    #endregion
                }
                return this.mUIGetDepartmentRosterHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetDepartmentRosterHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRoleDepartmentServicDocument : HtmlDocument
    {
        
        public UIRoleDepartmentServicDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "RoleDepartmentServiceV20182 Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/RoleDepartmentServiceV20182.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/RoleDepartmentServiceV20182.asmx";
            this.WindowTitles.Add("RoleDepartmentServiceV20182 Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane5 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane5(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane5 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane5 : HtmlDiv
    {
        
        public UIContentPane5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "RoleDepartmentServiceV20182\r\n\r\n\r\nService";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("RoleDepartmentServiceV20182 Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetDepartmentRolesHyperlink
        {
            get
            {
                if ((this.mUIGetDepartmentRolesHyperlink == null))
                {
                    this.mUIGetDepartmentRolesHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetDepartmentRolesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetDepartmentRoles";
                    this.mUIGetDepartmentRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/RoleDepartmentServiceV20182.asmx";
                    this.mUIGetDepartmentRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetDepartmentRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/RoleDepartmentServiceV20182.asmx?op=GetDepartmentRoles";
                    this.mUIGetDepartmentRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetDepartmentRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"RoleDepartmentServiceV20182.asmx?o";
                    this.mUIGetDepartmentRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGetDepartmentRolesHyperlink.WindowTitles.Add("RoleDepartmentServiceV20182 Web Service");
                    #endregion
                }
                return this.mUIGetDepartmentRolesHyperlink;
            }
        }
        
        public HtmlHyperlink UIGetDisplayRolesHyperlink
        {
            get
            {
                if ((this.mUIGetDisplayRolesHyperlink == null))
                {
                    this.mUIGetDisplayRolesHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetDisplayRolesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetDisplayRoles";
                    this.mUIGetDisplayRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/RoleDepartmentServiceV20182.asmx";
                    this.mUIGetDisplayRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetDisplayRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/RoleDepartmentServiceV20182.asmx?op=GetDisplayRoles";
                    this.mUIGetDisplayRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetDisplayRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"RoleDepartmentServiceV20182.asmx?o";
                    this.mUIGetDisplayRolesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIGetDisplayRolesHyperlink.WindowTitles.Add("RoleDepartmentServiceV20182 Web Service");
                    #endregion
                }
                return this.mUIGetDisplayRolesHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetDepartmentRolesHyperlink;
        
        private HtmlHyperlink mUIGetDisplayRolesHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStartsidenMinGatv201Window : BrowserWindow
    {
        
        public UIStartsidenMinGatv201Window()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Startsiden - MinGat v.2019.2.1.0";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Startsiden - MinGat v.2019.2.1.0");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIStartsidenMinGatv201Document UIStartsidenMinGatv201Document
        {
            get
            {
                if ((this.mUIStartsidenMinGatv201Document == null))
                {
                    this.mUIStartsidenMinGatv201Document = new UIStartsidenMinGatv201Document(this);
                }
                return this.mUIStartsidenMinGatv201Document;
            }
        }
        #endregion
        
        #region Fields
        private UIStartsidenMinGatv201Document mUIStartsidenMinGatv201Document;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStartsidenMinGatv201Document : HtmlDocument
    {
        
        public UIStartsidenMinGatv201Document(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Startsiden - MinGat v.2019.2.1.0";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/MinGat/Employee/Home";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://no-lab-ws-0018.internal.visma.com/MinGat/Employee/Home#!/start/";
            this.WindowTitles.Add("Startsiden - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public UIMinGatPane UIMinGatPane
        {
            get
            {
                if ((this.mUIMinGatPane == null))
                {
                    this.mUIMinGatPane = new UIMinGatPane(this);
                }
                return this.mUIMinGatPane;
            }
        }
        
        public UIMenuHeader_mainMenuPane UIMenuHeader_mainMenuPane
        {
            get
            {
                if ((this.mUIMenuHeader_mainMenuPane == null))
                {
                    this.mUIMenuHeader_mainMenuPane = new UIMenuHeader_mainMenuPane(this);
                }
                return this.mUIMenuHeader_mainMenuPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMinGatPane mUIMinGatPane;
        
        private UIMenuHeader_mainMenuPane mUIMenuHeader_mainMenuPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMinGatPane : HtmlDiv
    {
        
        public UIMinGatPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "mingat_employee";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "MinGat\r\n \r\n ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "mg-main-menu-button";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"mg-main-menu-button\" id=\"mingat_employee\" data-bind=\"click: toggleMainMenu" +
                ".bind($data), css: { \'menu-open\': ShowMainMenu }\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Startsiden - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIMinGatPane1
        {
            get
            {
                if ((this.mUIMinGatPane1 == null))
                {
                    this.mUIMinGatPane1 = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIMinGatPane1.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIMinGatPane1.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIMinGatPane1.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "MinGat";
                    this.mUIMinGatPane1.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIMinGatPane1.FilterProperties[HtmlDiv.PropertyNames.Class] = "caption";
                    this.mUIMinGatPane1.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"caption\" data-bind=\"text: MenuTitle\"";
                    this.mUIMinGatPane1.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "10";
                    this.mUIMinGatPane1.WindowTitles.Add("Startsiden - MinGat v.2019.2.1.0");
                    #endregion
                }
                return this.mUIMinGatPane1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIMinGatPane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMenuHeader_mainMenuPane : HtmlDiv
    {
        
        public UIMenuHeader_mainMenuPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuHeader_mainMenu";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Ansatt \r\n\r\n\r\n\r\n  \r\nStartsiden\r\n \r\n  \r\n\r\n";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"menuHeader_mainMenu\" style=\"display: block;\" data-bind=\"fadeVisible: ShowMain" +
                "Menu\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "20";
            this.WindowTitles.Add("Startsiden - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIØnskeplanerHyperlink
        {
            get
            {
                if ((this.mUIØnskeplanerHyperlink == null))
                {
                    this.mUIØnskeplanerHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIØnskeplanerHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "\r\n  \r\nØnskeplaner";
                    this.mUIØnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/MinGat/Employee/Home";
                    this.mUIØnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIØnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://no-lab-ws-0018.internal.visma.com/MinGat/Employee/Home#!/employee/mywishp" +
                        "lans/";
                    this.mUIØnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "nav-item";
                    this.mUIØnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"nav-item\" href=\"#!/employee/mywis";
                    this.mUIØnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "16";
                    this.mUIØnskeplanerHyperlink.WindowTitles.Add("Startsiden - MinGat v.2019.2.1.0");
                    #endregion
                }
                return this.mUIØnskeplanerHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIØnskeplanerHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMinønskeplanMinGatv2Window : BrowserWindow
    {
        
        public UIMinønskeplanMinGatv2Window()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Min ønskeplan - MinGat v.2019.2.1.0";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Min ønskeplan - MinGat v.2019.2.1.0");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIMinønskeplanMinGatv2Document UIMinønskeplanMinGatv2Document
        {
            get
            {
                if ((this.mUIMinønskeplanMinGatv2Document == null))
                {
                    this.mUIMinønskeplanMinGatv2Document = new UIMinønskeplanMinGatv2Document(this);
                }
                return this.mUIMinønskeplanMinGatv2Document;
            }
        }
        
        public UIMinønskeplanMinGatv2Document1 UIMinønskeplanMinGatv2Document1
        {
            get
            {
                if ((this.mUIMinønskeplanMinGatv2Document1 == null))
                {
                    this.mUIMinønskeplanMinGatv2Document1 = new UIMinønskeplanMinGatv2Document1(this);
                }
                return this.mUIMinønskeplanMinGatv2Document1;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMinønskeplanMinGatv2Document mUIMinønskeplanMinGatv2Document;
        
        private UIMinønskeplanMinGatv2Document1 mUIMinønskeplanMinGatv2Document1;
        
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMinønskeplanMinGatv2Document : HtmlDocument
    {
        
        public UIMinønskeplanMinGatv2Document(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Min ønskeplan - MinGat v.2019.2.1.0";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/MinGat/Employee/Home";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://no-lab-ws-0018.internal.visma.com/MinGat/Employee/Home#!/employee/mywishp" +
                "lans/";
            this.WindowTitles.Add("Min ønskeplan - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public HtmlCheckBox UIMyTimeLogPage_showAlCheckBox
        {
            get
            {
                if ((this.mUIMyTimeLogPage_showAlCheckBox == null))
                {
                    this.mUIMyTimeLogPage_showAlCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIMyTimeLogPage_showAlCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "myTimeLogPage_showAll";
                    this.mUIMyTimeLogPage_showAlCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = null;
                    this.mUIMyTimeLogPage_showAlCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mUIMyTimeLogPage_showAlCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUIMyTimeLogPage_showAlCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIMyTimeLogPage_showAlCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = "ui-hidden-accessible";
                    this.mUIMyTimeLogPage_showAlCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "class=\"ui-hidden-accessible\" id=\"myTimeL";
                    this.mUIMyTimeLogPage_showAlCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "2";
                    this.mUIMyTimeLogPage_showAlCheckBox.WindowTitles.Add("Min ønskeplan - MinGat v.2019.2.1.0");
                    #endregion
                }
                return this.mUIMyTimeLogPage_showAlCheckBox;
            }
        }
        
        public UIMyWishPlansGridGridPane UIMyWishPlansGridGridPane
        {
            get
            {
                if ((this.mUIMyWishPlansGridGridPane == null))
                {
                    this.mUIMyWishPlansGridGridPane = new UIMyWishPlansGridGridPane(this);
                }
                return this.mUIMyWishPlansGridGridPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCheckBox mUIMyTimeLogPage_showAlCheckBox;
        
        private UIMyWishPlansGridGridPane mUIMyWishPlansGridGridPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMyWishPlansGridGridPane : HtmlDiv
    {
        
        public UIMyWishPlansGridGridPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "myWishPlansGridGrid";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Dra en kolonne hit for å gruppere på den";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "dx-widget dx-visibility-change-handler";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"dx-widget dx-visibility-change-handler\" id=\"myWishPlansGridGrid\" role=\"pre" +
                "sentation\" style=\"width: 100%; height: 100%;\" data-bind=\"dxDataGrid: WishPlansDa" +
                "taGrid\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "204";
            this.WindowTitles.Add("Min ønskeplan - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UINyfaneHyperlink
        {
            get
            {
                if ((this.mUINyfaneHyperlink == null))
                {
                    this.mUINyfaneHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUINyfaneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUINyfaneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUINyfaneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = "_blank";
                    this.mUINyfaneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = " ny fane ";
                    this.mUINyfaneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/MinGat/Employee/MyWishPlans/ViewPlan/";
                    this.mUINyfaneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUINyfaneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "/MinGat/Employee/MyWishPlans/ViewPlan/?id=738161723";
                    this.mUINyfaneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUINyfaneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "style=\"text-decoration: underline;\" href";
                    this.mUINyfaneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "16";
                    this.mUINyfaneHyperlink.WindowTitles.Add("Min ønskeplan - MinGat v.2019.2.1.0");
                    #endregion
                }
                return this.mUINyfaneHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUINyfaneHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMinønskeplanMinGatv2Document1 : HtmlDocument
    {
        
        public UIMinønskeplanMinGatv2Document1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Min ønskeplan - MinGat v.2019.2.1.0";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/MinGat_se/Employee/Home";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://no-lab-ws-0018.internal.visma.com/MinGat_se/Employee/Home#!/employee/mywi" +
                "shplans/";
            this.WindowTitles.Add("Min ønskeplan - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public UIMyWishPlansGridGridPane1 UIMyWishPlansGridGridPane
        {
            get
            {
                if ((this.mUIMyWishPlansGridGridPane == null))
                {
                    this.mUIMyWishPlansGridGridPane = new UIMyWishPlansGridGridPane1(this);
                }
                return this.mUIMyWishPlansGridGridPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMyWishPlansGridGridPane1 mUIMyWishPlansGridGridPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMyWishPlansGridGridPane1 : HtmlDiv
    {
        
        public UIMyWishPlansGridGridPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "myWishPlansGridGrid";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Dra en kolonn här för att gruppera\r\n\r\n\r\n";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "dx-widget dx-visibility-change-handler";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"dx-widget dx-visibility-change-handler\" id=\"myWishPlansGridGrid\" role=\"pre" +
                "sentation\" style=\"width: 100%; height: 100%;\" data-bind=\"dxDataGrid: WishPlansDa" +
                "taGrid\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "201";
            this.WindowTitles.Add("Min ønskeplan - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UINyflikHyperlink
        {
            get
            {
                if ((this.mUINyflikHyperlink == null))
                {
                    this.mUINyflikHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUINyflikHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUINyflikHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUINyflikHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = "_blank";
                    this.mUINyflikHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = " ny flik ";
                    this.mUINyflikHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/MinGat_se/Employee/MyWishPlans/ViewPlan/";
                    this.mUINyflikHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUINyflikHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "/MinGat_se/Employee/MyWishPlans/ViewPlan/?id=738161723";
                    this.mUINyflikHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUINyflikHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "style=\"text-decoration: underline;\" href";
                    this.mUINyflikHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUINyflikHyperlink.WindowTitles.Add("Min ønskeplan - MinGat v.2019.2.1.0");
                    #endregion
                }
                return this.mUINyflikHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUINyflikHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "442037992";
            this.WindowTitles.Add("Min Ønskeplan - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public UISilverlightControlWindow UISilverlightControlWindow
        {
            get
            {
                if ((this.mUISilverlightControlWindow == null))
                {
                    this.mUISilverlightControlWindow = new UISilverlightControlWindow(this);
                }
                return this.mUISilverlightControlWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISilverlightControlWindow mUISilverlightControlWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISilverlightControlWindow : WinWindow
    {
        
        public UISilverlightControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Silverlight Control";
            this.WindowTitles.Add("Min Ønskeplan - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public WinText UIØnskeplanforBASEPLANText
        {
            get
            {
                if ((this.mUIØnskeplanforBASEPLANText == null))
                {
                    this.mUIØnskeplanforBASEPLANText = new WinText(this);
                    #region Search Criteria
                    this.mUIØnskeplanforBASEPLANText.SearchProperties[WinText.PropertyNames.Name] = "Ønskeplan for BASEPLAN TIL AUTOTEST";
                    this.mUIØnskeplanforBASEPLANText.WindowTitles.Add("Min Ønskeplan - MinGat v.2019.2.1.0");
                    #endregion
                }
                return this.mUIØnskeplanforBASEPLANText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIØnskeplanforBASEPLANText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStartsidanMinGatv201Window : BrowserWindow
    {
        
        public UIStartsidanMinGatv201Window()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Startsidan - MinGat v.2019.2.1.0";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Startsidan - MinGat v.2019.2.1.0");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIStartsidanMinGatv201Document UIStartsidanMinGatv201Document
        {
            get
            {
                if ((this.mUIStartsidanMinGatv201Document == null))
                {
                    this.mUIStartsidanMinGatv201Document = new UIStartsidanMinGatv201Document(this);
                }
                return this.mUIStartsidanMinGatv201Document;
            }
        }
        #endregion
        
        #region Fields
        private UIStartsidanMinGatv201Document mUIStartsidanMinGatv201Document;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStartsidanMinGatv201Document : HtmlDocument
    {
        
        public UIStartsidanMinGatv201Document(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Startsidan - MinGat v.2019.2.1.0";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/MinGat_se/Employee/Home";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://no-lab-ws-0018.internal.visma.com/MinGat_se/Employee/Home#!/start/";
            this.WindowTitles.Add("Startsidan - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public UIMinGatPane2 UIMinGatPane
        {
            get
            {
                if ((this.mUIMinGatPane == null))
                {
                    this.mUIMinGatPane = new UIMinGatPane2(this);
                }
                return this.mUIMinGatPane;
            }
        }
        
        public UIMenuHeader_mainMenuPane1 UIMenuHeader_mainMenuPane
        {
            get
            {
                if ((this.mUIMenuHeader_mainMenuPane == null))
                {
                    this.mUIMenuHeader_mainMenuPane = new UIMenuHeader_mainMenuPane1(this);
                }
                return this.mUIMenuHeader_mainMenuPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMinGatPane2 mUIMinGatPane;
        
        private UIMenuHeader_mainMenuPane1 mUIMenuHeader_mainMenuPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMinGatPane2 : HtmlDiv
    {
        
        public UIMinGatPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "mingat_employee";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "MinGat\r\n \r\n ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "mg-main-menu-button";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"mg-main-menu-button\" id=\"mingat_employee\" data-bind=\"click: toggleMainMenu" +
                ".bind($data), css: { \'menu-open\': ShowMainMenu }\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Startsidan - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIMinGatPane1
        {
            get
            {
                if ((this.mUIMinGatPane1 == null))
                {
                    this.mUIMinGatPane1 = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIMinGatPane1.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIMinGatPane1.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIMinGatPane1.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "MinGat";
                    this.mUIMinGatPane1.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIMinGatPane1.FilterProperties[HtmlDiv.PropertyNames.Class] = "caption";
                    this.mUIMinGatPane1.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"caption\" data-bind=\"text: MenuTitle\"";
                    this.mUIMinGatPane1.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "10";
                    this.mUIMinGatPane1.WindowTitles.Add("Startsidan - MinGat v.2019.2.1.0");
                    #endregion
                }
                return this.mUIMinGatPane1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIMinGatPane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMenuHeader_mainMenuPane1 : HtmlDiv
    {
        
        public UIMenuHeader_mainMenuPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuHeader_mainMenu";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Anställd \r\n\r\n\r\n\r\n  \r\nStartsidan\r\n \r\n  \r\n";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"menuHeader_mainMenu\" style=\"display: block;\" data-bind=\"fadeVisible: ShowMain" +
                "Menu\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "20";
            this.WindowTitles.Add("Startsidan - MinGat v.2019.2.1.0");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIÖnskeplanerHyperlink
        {
            get
            {
                if ((this.mUIÖnskeplanerHyperlink == null))
                {
                    this.mUIÖnskeplanerHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIÖnskeplanerHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIÖnskeplanerHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIÖnskeplanerHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIÖnskeplanerHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "\r\n  \r\nÖnskeplaner";
                    this.mUIÖnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/MinGat_se/Employee/Home";
                    this.mUIÖnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIÖnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://no-lab-ws-0018.internal.visma.com/MinGat_se/Employee/Home#!/employee/mywi" +
                        "shplans/";
                    this.mUIÖnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "nav-item";
                    this.mUIÖnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"nav-item\" href=\"#!/employee/mywis";
                    this.mUIÖnskeplanerHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "16";
                    this.mUIÖnskeplanerHyperlink.WindowTitles.Add("Startsidan - MinGat v.2019.2.1.0");
                    #endregion
                }
                return this.mUIÖnskeplanerHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIÖnskeplanerHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceV20Window1 : BrowserWindow
    {
        
        public UIDepartmentServiceV20Window1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "DepartmentServiceV20191 Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("DepartmentServiceV20191 Web Service");
            this.WindowTitles.Add("EmployeeChangeTrackingService Web Service");
            this.WindowTitles.Add("EmployeeServiceV63 Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDepartmentServiceV20Document1 UIDepartmentServiceV20Document
        {
            get
            {
                if ((this.mUIDepartmentServiceV20Document == null))
                {
                    this.mUIDepartmentServiceV20Document = new UIDepartmentServiceV20Document1(this);
                }
                return this.mUIDepartmentServiceV20Document;
            }
        }
        
        public UIEmployeeChangeTrackiDocument UIEmployeeChangeTrackiDocument
        {
            get
            {
                if ((this.mUIEmployeeChangeTrackiDocument == null))
                {
                    this.mUIEmployeeChangeTrackiDocument = new UIEmployeeChangeTrackiDocument(this);
                }
                return this.mUIEmployeeChangeTrackiDocument;
            }
        }
        
        public UIEmployeeServiceV63WeDocument UIEmployeeServiceV63WeDocument
        {
            get
            {
                if ((this.mUIEmployeeServiceV63WeDocument == null))
                {
                    this.mUIEmployeeServiceV63WeDocument = new UIEmployeeServiceV63WeDocument(this);
                }
                return this.mUIEmployeeServiceV63WeDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDepartmentServiceV20Document1 mUIDepartmentServiceV20Document;
        
        private UIEmployeeChangeTrackiDocument mUIEmployeeChangeTrackiDocument;
        
        private UIEmployeeServiceV63WeDocument mUIEmployeeServiceV63WeDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceV20Document1 : HtmlDocument
    {
        
        public UIDepartmentServiceV20Document1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "DepartmentServiceV20191 Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/DepartmentServiceV20191.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/DepartmentServiceV20191.asmx";
            this.WindowTitles.Add("DepartmentServiceV20191 Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane6 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane6(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane6 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane6 : HtmlDiv
    {
        
        public UIContentPane6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "DepartmentServiceV20191\r\n\r\n\r\nDepartment ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("DepartmentServiceV20191 Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetDepartmentRosterHyperlink
        {
            get
            {
                if ((this.mUIGetDepartmentRosterHyperlink == null))
                {
                    this.mUIGetDepartmentRosterHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetDepartmentRosterHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetDepartmentRoster";
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/DepartmentServiceV20191.asmx";
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/DepartmentServiceV20191.asmx?op=GetDepartmentRoster";
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"DepartmentServiceV20191.asmx?op=Ge";
                    this.mUIGetDepartmentRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIGetDepartmentRosterHyperlink.WindowTitles.Add("DepartmentServiceV20191 Web Service");
                    #endregion
                }
                return this.mUIGetDepartmentRosterHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetDepartmentRosterHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeChangeTrackiDocument : HtmlDocument
    {
        
        public UIEmployeeChangeTrackiDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "EmployeeChangeTrackingService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/EmployeeChangeTrackingService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/EmployeeChangeTrackingService.asmx";
            this.WindowTitles.Add("EmployeeChangeTrackingService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane7 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane7(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane7 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane7 : HtmlDiv
    {
        
        public UIContentPane7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "EmployeeChangeTrackingService\r\n\r\n\r\nServi";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("EmployeeChangeTrackingService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIPushEmployeeDataChanHyperlink
        {
            get
            {
                if ((this.mUIPushEmployeeDataChanHyperlink == null))
                {
                    this.mUIPushEmployeeDataChanHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIPushEmployeeDataChanHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "PushEmployeeDataChanges";
                    this.mUIPushEmployeeDataChanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/EmployeeChangeTrackingService.asmx";
                    this.mUIPushEmployeeDataChanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIPushEmployeeDataChanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/EmployeeChangeTrackingService.asmx?op=PushEmployeeDataCha" +
                        "nges";
                    this.mUIPushEmployeeDataChanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIPushEmployeeDataChanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"EmployeeChangeTrackingService.asmx";
                    this.mUIPushEmployeeDataChanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIPushEmployeeDataChanHyperlink.WindowTitles.Add("EmployeeChangeTrackingService Web Service");
                    #endregion
                }
                return this.mUIPushEmployeeDataChanHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIPushEmployeeDataChanHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeServiceV63WeDocument : HtmlDocument
    {
        
        public UIEmployeeServiceV63WeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "EmployeeServiceV63 Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/EmployeeServiceV63.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/EmployeeServiceV63.asmx";
            this.WindowTitles.Add("EmployeeServiceV63 Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane8 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane8(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane8 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane8 : HtmlDiv
    {
        
        public UIContentPane8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "EmployeeServiceV63\r\n\r\n\r\nEmployee related";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("EmployeeServiceV63 Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetEmployeeHyperlink
        {
            get
            {
                if ((this.mUIGetEmployeeHyperlink == null))
                {
                    this.mUIGetEmployeeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetEmployeeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetEmployee";
                    this.mUIGetEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/EmployeeServiceV63.asmx";
                    this.mUIGetEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetEmployee";
                    this.mUIGetEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"EmployeeServiceV63.asmx?op=GetEmpl";
                    this.mUIGetEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGetEmployeeHyperlink.WindowTitles.Add("EmployeeServiceV63 Web Service");
                    #endregion
                }
                return this.mUIGetEmployeeHyperlink;
            }
        }
        
        public HtmlHyperlink UIGetJobAgreementHyperlink
        {
            get
            {
                if ((this.mUIGetJobAgreementHyperlink == null))
                {
                    this.mUIGetJobAgreementHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetJobAgreementHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetJobAgreement";
                    this.mUIGetJobAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/EmployeeServiceV63.asmx";
                    this.mUIGetJobAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetJobAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetJobAgreement";
                    this.mUIGetJobAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetJobAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"EmployeeServiceV63.asmx?op=GetJobA";
                    this.mUIGetJobAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIGetJobAgreementHyperlink.WindowTitles.Add("EmployeeServiceV63 Web Service");
                    #endregion
                }
                return this.mUIGetJobAgreementHyperlink;
            }
        }
        
        public HtmlHyperlink UIGetWorkHoursHyperlink
        {
            get
            {
                if ((this.mUIGetWorkHoursHyperlink == null))
                {
                    this.mUIGetWorkHoursHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetWorkHoursHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetWorkHours";
                    this.mUIGetWorkHoursHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/EmployeeServiceV63.asmx";
                    this.mUIGetWorkHoursHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetWorkHoursHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/EmployeeServiceV63.asmx?op=GetWorkHours";
                    this.mUIGetWorkHoursHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetWorkHoursHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"EmployeeServiceV63.asmx?op=GetWork";
                    this.mUIGetWorkHoursHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIGetWorkHoursHyperlink.WindowTitles.Add("EmployeeServiceV63 Web Service");
                    #endregion
                }
                return this.mUIGetWorkHoursHyperlink;
            }
        }
        
        public HtmlHyperlink UIUpdateEmployeeHyperlink
        {
            get
            {
                if ((this.mUIUpdateEmployeeHyperlink == null))
                {
                    this.mUIUpdateEmployeeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIUpdateEmployeeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "UpdateEmployee";
                    this.mUIUpdateEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/EmployeeServiceV63.asmx";
                    this.mUIUpdateEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIUpdateEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/EmployeeServiceV63.asmx?op=UpdateEmployee";
                    this.mUIUpdateEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIUpdateEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"EmployeeServiceV63.asmx?op=UpdateE";
                    this.mUIUpdateEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUIUpdateEmployeeHyperlink.WindowTitles.Add("EmployeeServiceV63 Web Service");
                    #endregion
                }
                return this.mUIUpdateEmployeeHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetEmployeeHyperlink;
        
        private HtmlHyperlink mUIGetJobAgreementHyperlink;
        
        private HtmlHyperlink mUIGetWorkHoursHyperlink;
        
        private HtmlHyperlink mUIUpdateEmployeeHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceV20Window2 : BrowserWindow
    {
        
        public UIDepartmentServiceV20Window2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "DepartmentServiceV20191 Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("DepartmentServiceV20191 Web Service");
            this.WindowTitles.Add("EmployeeChangeTrackingService Web Service");
            this.WindowTitles.Add("EmployeeServiceV63 Web Service");
            this.WindowTitles.Add("Gat.ExternalFlexService Service");
            this.WindowTitles.Add("GatGerica Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGatGericaWebServiceDocument UIGatGericaWebServiceDocument
        {
            get
            {
                if ((this.mUIGatGericaWebServiceDocument == null))
                {
                    this.mUIGatGericaWebServiceDocument = new UIGatGericaWebServiceDocument(this);
                }
                return this.mUIGatGericaWebServiceDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGatGericaWebServiceDocument mUIGatGericaWebServiceDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatGericaWebServiceDocument : HtmlDocument
    {
        
        public UIGatGericaWebServiceDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "GatGerica Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/GatGerica.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/GatGerica.asmx";
            this.WindowTitles.Add("GatGerica Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane9 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane9(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane9 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane9 : HtmlDiv
    {
        
        public UIContentPane9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "GatGerica\r\n\r\n\r\nService adapter used by G";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("GatGerica Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIA_PrsGericaWS_GenereHyperlink
        {
            get
            {
                if ((this.mUIA_PrsGericaWS_GenereHyperlink == null))
                {
                    this.mUIA_PrsGericaWS_GenereHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIA_PrsGericaWS_GenereHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "A_PrsGericaWS_Generell_Info";
                    this.mUIA_PrsGericaWS_GenereHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/GatGerica.asmx";
                    this.mUIA_PrsGericaWS_GenereHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIA_PrsGericaWS_GenereHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/GatGerica.asmx?op=A_PrsGericaWS_Generell_Info";
                    this.mUIA_PrsGericaWS_GenereHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIA_PrsGericaWS_GenereHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"GatGerica.asmx?op=A_PrsGericaWS_Ge";
                    this.mUIA_PrsGericaWS_GenereHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIA_PrsGericaWS_GenereHyperlink.WindowTitles.Add("GatGerica Web Service");
                    #endregion
                }
                return this.mUIA_PrsGericaWS_GenereHyperlink;
            }
        }
        
        public HtmlHyperlink UIFinnBrukerForIDHyperlink
        {
            get
            {
                if ((this.mUIFinnBrukerForIDHyperlink == null))
                {
                    this.mUIFinnBrukerForIDHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIFinnBrukerForIDHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "FinnBrukerForID";
                    this.mUIFinnBrukerForIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/GatGerica.asmx";
                    this.mUIFinnBrukerForIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIFinnBrukerForIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/GatGerica.asmx?op=FinnBrukerForID";
                    this.mUIFinnBrukerForIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIFinnBrukerForIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"GatGerica.asmx?op=FinnBrukerForID\"";
                    this.mUIFinnBrukerForIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIFinnBrukerForIDHyperlink.WindowTitles.Add("GatGerica Web Service");
                    #endregion
                }
                return this.mUIFinnBrukerForIDHyperlink;
            }
        }
        
        public HtmlHyperlink UIGetVersionHyperlink
        {
            get
            {
                if ((this.mUIGetVersionHyperlink == null))
                {
                    this.mUIGetVersionHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetVersionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetVersion";
                    this.mUIGetVersionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/GatGerica.asmx";
                    this.mUIGetVersionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetVersionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/GatGerica.asmx?op=GetVersion";
                    this.mUIGetVersionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetVersionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"GatGerica.asmx?op=GetVersion\"";
                    this.mUIGetVersionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIGetVersionHyperlink.WindowTitles.Add("GatGerica Web Service");
                    #endregion
                }
                return this.mUIGetVersionHyperlink;
            }
        }
        
        public HtmlHyperlink UILesAnsettelseHyperlink
        {
            get
            {
                if ((this.mUILesAnsettelseHyperlink == null))
                {
                    this.mUILesAnsettelseHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILesAnsettelseHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "LesAnsettelse";
                    this.mUILesAnsettelseHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/GatGerica.asmx";
                    this.mUILesAnsettelseHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILesAnsettelseHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/GatGerica.asmx?op=LesAnsettelse";
                    this.mUILesAnsettelseHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILesAnsettelseHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"GatGerica.asmx?op=LesAnsettelse\"";
                    this.mUILesAnsettelseHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUILesAnsettelseHyperlink.WindowTitles.Add("GatGerica Web Service");
                    #endregion
                }
                return this.mUILesAnsettelseHyperlink;
            }
        }
        
        public HtmlHyperlink UILesFravaerForPersonHyperlink
        {
            get
            {
                if ((this.mUILesFravaerForPersonHyperlink == null))
                {
                    this.mUILesFravaerForPersonHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILesFravaerForPersonHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "LesFravaerForPerson";
                    this.mUILesFravaerForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/GatGerica.asmx";
                    this.mUILesFravaerForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILesFravaerForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/GatGerica.asmx?op=LesFravaerForPerson";
                    this.mUILesFravaerForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILesFravaerForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"GatGerica.asmx?op=LesFravaerForPer";
                    this.mUILesFravaerForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUILesFravaerForPersonHyperlink.WindowTitles.Add("GatGerica Web Service");
                    #endregion
                }
                return this.mUILesFravaerForPersonHyperlink;
            }
        }
        
        public HtmlHyperlink UILesOrgenhetHyperlink
        {
            get
            {
                if ((this.mUILesOrgenhetHyperlink == null))
                {
                    this.mUILesOrgenhetHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILesOrgenhetHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "LesOrgenhet";
                    this.mUILesOrgenhetHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/GatGerica.asmx";
                    this.mUILesOrgenhetHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILesOrgenhetHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/GatGerica.asmx?op=LesOrgenhet";
                    this.mUILesOrgenhetHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILesOrgenhetHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"GatGerica.asmx?op=LesOrgenhet\"";
                    this.mUILesOrgenhetHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUILesOrgenhetHyperlink.WindowTitles.Add("GatGerica Web Service");
                    #endregion
                }
                return this.mUILesOrgenhetHyperlink;
            }
        }
        
        public HtmlHyperlink UILesPersonHyperlink
        {
            get
            {
                if ((this.mUILesPersonHyperlink == null))
                {
                    this.mUILesPersonHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILesPersonHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "LesPerson";
                    this.mUILesPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/GatGerica.asmx";
                    this.mUILesPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILesPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/GatGerica.asmx?op=LesPerson";
                    this.mUILesPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILesPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"GatGerica.asmx?op=LesPerson\"";
                    this.mUILesPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "8";
                    this.mUILesPersonHyperlink.WindowTitles.Add("GatGerica Web Service");
                    #endregion
                }
                return this.mUILesPersonHyperlink;
            }
        }
        
        public HtmlHyperlink UILesPlanForPeriodeHyperlink
        {
            get
            {
                if ((this.mUILesPlanForPeriodeHyperlink == null))
                {
                    this.mUILesPlanForPeriodeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILesPlanForPeriodeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "LesPlanForPeriode";
                    this.mUILesPlanForPeriodeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/GatGerica.asmx";
                    this.mUILesPlanForPeriodeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILesPlanForPeriodeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/GatGerica.asmx?op=LesPlanForPeriode";
                    this.mUILesPlanForPeriodeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILesPlanForPeriodeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"GatGerica.asmx?op=LesPlanForPeriod";
                    this.mUILesPlanForPeriodeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "9";
                    this.mUILesPlanForPeriodeHyperlink.WindowTitles.Add("GatGerica Web Service");
                    #endregion
                }
                return this.mUILesPlanForPeriodeHyperlink;
            }
        }
        
        public HtmlHyperlink UILesVaktForPersonHyperlink
        {
            get
            {
                if ((this.mUILesVaktForPersonHyperlink == null))
                {
                    this.mUILesVaktForPersonHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILesVaktForPersonHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "LesVaktForPerson";
                    this.mUILesVaktForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/GatGerica.asmx";
                    this.mUILesVaktForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILesVaktForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/GatGerica.asmx?op=LesVaktForPerson";
                    this.mUILesVaktForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILesVaktForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"GatGerica.asmx?op=LesVaktForPerson";
                    this.mUILesVaktForPersonHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "11";
                    this.mUILesVaktForPersonHyperlink.WindowTitles.Add("GatGerica Web Service");
                    #endregion
                }
                return this.mUILesVaktForPersonHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIA_PrsGericaWS_GenereHyperlink;
        
        private HtmlHyperlink mUIFinnBrukerForIDHyperlink;
        
        private HtmlHyperlink mUIGetVersionHyperlink;
        
        private HtmlHyperlink mUILesAnsettelseHyperlink;
        
        private HtmlHyperlink mUILesFravaerForPersonHyperlink;
        
        private HtmlHyperlink mUILesOrgenhetHyperlink;
        
        private HtmlHyperlink mUILesPersonHyperlink;
        
        private HtmlHyperlink mUILesPlanForPeriodeHyperlink;
        
        private HtmlHyperlink mUILesVaktForPersonHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceV20Window3 : BrowserWindow
    {
        
        public UIDepartmentServiceV20Window3()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "DepartmentServiceV20191 Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("DepartmentServiceV20191 Web Service");
            this.WindowTitles.Add("EmployeeChangeTrackingService Web Service");
            this.WindowTitles.Add("EmployeeServiceV63 Web Service");
            this.WindowTitles.Add("Gat.ExternalFlexService Service");
            this.WindowTitles.Add("GatGerica Web Service");
            this.WindowTitles.Add("ImportService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIImportServiceWebServDocument UIImportServiceWebServDocument
        {
            get
            {
                if ((this.mUIImportServiceWebServDocument == null))
                {
                    this.mUIImportServiceWebServDocument = new UIImportServiceWebServDocument(this);
                }
                return this.mUIImportServiceWebServDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIImportServiceWebServDocument mUIImportServiceWebServDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIImportServiceWebServDocument : HtmlDocument
    {
        
        public UIImportServiceWebServDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "ImportService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/ImportService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/ImportService.asmx";
            this.WindowTitles.Add("ImportService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane10 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane10(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane10 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane10 : HtmlDiv
    {
        
        public UIContentPane10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "ImportService\r\n\r\n\r\nService for managing ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("ImportService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIInsertDepEmp_v2Hyperlink
        {
            get
            {
                if ((this.mUIInsertDepEmp_v2Hyperlink == null))
                {
                    this.mUIInsertDepEmp_v2Hyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIInsertDepEmp_v2Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "InsertDepEmp_v2";
                    this.mUIInsertDepEmp_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/ImportService.asmx";
                    this.mUIInsertDepEmp_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIInsertDepEmp_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/ImportService.asmx?op=InsertDepEmp_v2";
                    this.mUIInsertDepEmp_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIInsertDepEmp_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"ImportService.asmx?op=InsertDepEmp";
                    this.mUIInsertDepEmp_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIInsertDepEmp_v2Hyperlink.WindowTitles.Add("ImportService Web Service");
                    #endregion
                }
                return this.mUIInsertDepEmp_v2Hyperlink;
            }
        }
        
        public HtmlHyperlink UIInsertDepartment_v2Hyperlink
        {
            get
            {
                if ((this.mUIInsertDepartment_v2Hyperlink == null))
                {
                    this.mUIInsertDepartment_v2Hyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIInsertDepartment_v2Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "InsertDepartment_v2";
                    this.mUIInsertDepartment_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/ImportService.asmx";
                    this.mUIInsertDepartment_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIInsertDepartment_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/ImportService.asmx?op=InsertDepartment_v2";
                    this.mUIInsertDepartment_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIInsertDepartment_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"ImportService.asmx?op=InsertDepart";
                    this.mUIInsertDepartment_v2Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIInsertDepartment_v2Hyperlink.WindowTitles.Add("ImportService Web Service");
                    #endregion
                }
                return this.mUIInsertDepartment_v2Hyperlink;
            }
        }
        
        public HtmlHyperlink UIInsertEmployeeHyperlink
        {
            get
            {
                if ((this.mUIInsertEmployeeHyperlink == null))
                {
                    this.mUIInsertEmployeeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIInsertEmployeeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "InsertEmployee";
                    this.mUIInsertEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/ImportService.asmx";
                    this.mUIInsertEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIInsertEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/ImportService.asmx?op=InsertEmployee";
                    this.mUIInsertEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIInsertEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"ImportService.asmx?op=InsertEmploy";
                    this.mUIInsertEmployeeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIInsertEmployeeHyperlink.WindowTitles.Add("ImportService Web Service");
                    #endregion
                }
                return this.mUIInsertEmployeeHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIInsertDepEmp_v2Hyperlink;
        
        private HtmlHyperlink mUIInsertDepartment_v2Hyperlink;
        
        private HtmlHyperlink mUIInsertEmployeeHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceV20Window4 : BrowserWindow
    {
        
        public UIDepartmentServiceV20Window4()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "DepartmentServiceV20191 Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("DepartmentServiceV20191 Web Service");
            this.WindowTitles.Add("EmployeeChangeTrackingService Web Service");
            this.WindowTitles.Add("EmployeeServiceV63 Web Service");
            this.WindowTitles.Add("Gat.ExternalFlexService Service");
            this.WindowTitles.Add("GatGerica Web Service");
            this.WindowTitles.Add("ImportService Web Service");
            this.WindowTitles.Add("PatientInformationService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIPatientInformationSeDocument UIPatientInformationSeDocument
        {
            get
            {
                if ((this.mUIPatientInformationSeDocument == null))
                {
                    this.mUIPatientInformationSeDocument = new UIPatientInformationSeDocument(this);
                }
                return this.mUIPatientInformationSeDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIPatientInformationSeDocument mUIPatientInformationSeDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPatientInformationSeDocument : HtmlDocument
    {
        
        public UIPatientInformationSeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "PatientInformationService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/PatientInformationService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/PatientInformationService.asmx";
            this.WindowTitles.Add("PatientInformationService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane11 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane11(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane11 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane11 : HtmlDiv
    {
        
        public UIContentPane11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "PatientInformationService\r\n\r\n\r\nService f";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("PatientInformationService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetDepartmentAppointHyperlink
        {
            get
            {
                if ((this.mUIGetDepartmentAppointHyperlink == null))
                {
                    this.mUIGetDepartmentAppointHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetDepartmentAppointHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetDepartmentAppointments";
                    this.mUIGetDepartmentAppointHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/PatientInformationService.asmx";
                    this.mUIGetDepartmentAppointHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetDepartmentAppointHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/PatientInformationService.asmx?op=GetDepartmentAppointmen" +
                        "ts";
                    this.mUIGetDepartmentAppointHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetDepartmentAppointHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"PatientInformationService.asmx?op=";
                    this.mUIGetDepartmentAppointHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGetDepartmentAppointHyperlink.WindowTitles.Add("PatientInformationService Web Service");
                    #endregion
                }
                return this.mUIGetDepartmentAppointHyperlink;
            }
        }
        
        public HtmlHyperlink UIGetEmployeeAppointmeHyperlink
        {
            get
            {
                if ((this.mUIGetEmployeeAppointmeHyperlink == null))
                {
                    this.mUIGetEmployeeAppointmeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetEmployeeAppointmeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetEmployeeAppointments";
                    this.mUIGetEmployeeAppointmeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/PatientInformationService.asmx";
                    this.mUIGetEmployeeAppointmeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetEmployeeAppointmeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/PatientInformationService.asmx?op=GetEmployeeAppointments" +
                        "";
                    this.mUIGetEmployeeAppointmeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetEmployeeAppointmeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"PatientInformationService.asmx?op=";
                    this.mUIGetEmployeeAppointmeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIGetEmployeeAppointmeHyperlink.WindowTitles.Add("PatientInformationService Web Service");
                    #endregion
                }
                return this.mUIGetEmployeeAppointmeHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetDepartmentAppointHyperlink;
        
        private HtmlHyperlink mUIGetEmployeeAppointmeHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceV20Window5 : BrowserWindow
    {
        
        public UIDepartmentServiceV20Window5()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "DepartmentServiceV20191 Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("DepartmentServiceV20191 Web Service");
            this.WindowTitles.Add("EmployeeChangeTrackingService Web Service");
            this.WindowTitles.Add("EmployeeServiceV63 Web Service");
            this.WindowTitles.Add("Gat.ExternalFlexService Service");
            this.WindowTitles.Add("GatGerica Web Service");
            this.WindowTitles.Add("ImportService Web Service");
            this.WindowTitles.Add("PatientInformationService Web Service");
            this.WindowTitles.Add("ReshRosterService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIReshRosterServiceWebDocument UIReshRosterServiceWebDocument
        {
            get
            {
                if ((this.mUIReshRosterServiceWebDocument == null))
                {
                    this.mUIReshRosterServiceWebDocument = new UIReshRosterServiceWebDocument(this);
                }
                return this.mUIReshRosterServiceWebDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIReshRosterServiceWebDocument mUIReshRosterServiceWebDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIReshRosterServiceWebDocument : HtmlDocument
    {
        
        public UIReshRosterServiceWebDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "ReshRosterService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/ReshRosterService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/ReshRosterService.asmx";
            this.WindowTitles.Add("ReshRosterService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane12 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane12(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane12 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane12 : HtmlDiv
    {
        
        public UIContentPane12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "ReshRosterService\r\n\r\n\r\nResh roster servi";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("ReshRosterService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetReshRosterHyperlink
        {
            get
            {
                if ((this.mUIGetReshRosterHyperlink == null))
                {
                    this.mUIGetReshRosterHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetReshRosterHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetReshRoster";
                    this.mUIGetReshRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/ReshRosterService.asmx";
                    this.mUIGetReshRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetReshRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/ReshRosterService.asmx?op=GetReshRoster";
                    this.mUIGetReshRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetReshRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"ReshRosterService.asmx?op=GetReshR";
                    this.mUIGetReshRosterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGetReshRosterHyperlink.WindowTitles.Add("ReshRosterService Web Service");
                    #endregion
                }
                return this.mUIGetReshRosterHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetReshRosterHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceV20Window6 : BrowserWindow
    {
        
        public UIDepartmentServiceV20Window6()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "DepartmentServiceV20191 Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("DepartmentServiceV20191 Web Service");
            this.WindowTitles.Add("EmployeeChangeTrackingService Web Service");
            this.WindowTitles.Add("EmployeeServiceV63 Web Service");
            this.WindowTitles.Add("Gat.ExternalFlexService Service");
            this.WindowTitles.Add("GatGerica Web Service");
            this.WindowTitles.Add("ImportService Web Service");
            this.WindowTitles.Add("PatientInformationService Web Service");
            this.WindowTitles.Add("ReshRosterService Web Service");
            this.WindowTitles.Add("RoleDepartmentServiceV20182 Web Service");
            this.WindowTitles.Add("SmsGatewayService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UISmsGatewayServiceWebDocument UISmsGatewayServiceWebDocument
        {
            get
            {
                if ((this.mUISmsGatewayServiceWebDocument == null))
                {
                    this.mUISmsGatewayServiceWebDocument = new UISmsGatewayServiceWebDocument(this);
                }
                return this.mUISmsGatewayServiceWebDocument;
            }
        }
        #endregion
        
        #region Fields
        private UISmsGatewayServiceWebDocument mUISmsGatewayServiceWebDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISmsGatewayServiceWebDocument : HtmlDocument
    {
        
        public UISmsGatewayServiceWebDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "SmsGatewayService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/SmsGatewayService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/SmsGatewayService.asmx";
            this.WindowTitles.Add("SmsGatewayService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane13 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane13(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane13 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane13 : HtmlDiv
    {
        
        public UIContentPane13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "SmsGatewayService\r\n\r\n\r\nThis webservice r";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("SmsGatewayService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAddToInboxHyperlink
        {
            get
            {
                if ((this.mUIAddToInboxHyperlink == null))
                {
                    this.mUIAddToInboxHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAddToInboxHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "AddToInbox";
                    this.mUIAddToInboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/SmsGatewayService.asmx";
                    this.mUIAddToInboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAddToInboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/SmsGatewayService.asmx?op=AddToInbox";
                    this.mUIAddToInboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIAddToInboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"SmsGatewayService.asmx?op=AddToInb";
                    this.mUIAddToInboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIAddToInboxHyperlink.WindowTitles.Add("SmsGatewayService Web Service");
                    #endregion
                }
                return this.mUIAddToInboxHyperlink;
            }
        }
        
        public HtmlHyperlink UIGetMessagesInOutboxHyperlink
        {
            get
            {
                if ((this.mUIGetMessagesInOutboxHyperlink == null))
                {
                    this.mUIGetMessagesInOutboxHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetMessagesInOutboxHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetMessagesInOutbox";
                    this.mUIGetMessagesInOutboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/SmsGatewayService.asmx";
                    this.mUIGetMessagesInOutboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetMessagesInOutboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/SmsGatewayService.asmx?op=GetMessagesInOutbox";
                    this.mUIGetMessagesInOutboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetMessagesInOutboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"SmsGatewayService.asmx?op=GetMessa";
                    this.mUIGetMessagesInOutboxHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIGetMessagesInOutboxHyperlink.WindowTitles.Add("SmsGatewayService Web Service");
                    #endregion
                }
                return this.mUIGetMessagesInOutboxHyperlink;
            }
        }
        
        public HtmlHyperlink UIGetUnsentMessagesHyperlink
        {
            get
            {
                if ((this.mUIGetUnsentMessagesHyperlink == null))
                {
                    this.mUIGetUnsentMessagesHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetUnsentMessagesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetUnsentMessages";
                    this.mUIGetUnsentMessagesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/SmsGatewayService.asmx";
                    this.mUIGetUnsentMessagesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetUnsentMessagesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/SmsGatewayService.asmx?op=GetUnsentMessages";
                    this.mUIGetUnsentMessagesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetUnsentMessagesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"SmsGatewayService.asmx?op=GetUnsen";
                    this.mUIGetUnsentMessagesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIGetUnsentMessagesHyperlink.WindowTitles.Add("SmsGatewayService Web Service");
                    #endregion
                }
                return this.mUIGetUnsentMessagesHyperlink;
            }
        }
        
        public HtmlHyperlink UIMarkMessageHyperlink
        {
            get
            {
                if ((this.mUIMarkMessageHyperlink == null))
                {
                    this.mUIMarkMessageHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMarkMessageHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "MarkMessage";
                    this.mUIMarkMessageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/SmsGatewayService.asmx";
                    this.mUIMarkMessageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMarkMessageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/SmsGatewayService.asmx?op=MarkMessage";
                    this.mUIMarkMessageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMarkMessageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"SmsGatewayService.asmx?op=MarkMess";
                    this.mUIMarkMessageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUIMarkMessageHyperlink.WindowTitles.Add("SmsGatewayService Web Service");
                    #endregion
                }
                return this.mUIMarkMessageHyperlink;
            }
        }
        
        public HtmlHyperlink UIMessageCleanUpHyperlink
        {
            get
            {
                if ((this.mUIMessageCleanUpHyperlink == null))
                {
                    this.mUIMessageCleanUpHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMessageCleanUpHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "MessageCleanUp";
                    this.mUIMessageCleanUpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/SmsGatewayService.asmx";
                    this.mUIMessageCleanUpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMessageCleanUpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/SmsGatewayService.asmx?op=MessageCleanUp";
                    this.mUIMessageCleanUpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMessageCleanUpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"SmsGatewayService.asmx?op=MessageC";
                    this.mUIMessageCleanUpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIMessageCleanUpHyperlink.WindowTitles.Add("SmsGatewayService Web Service");
                    #endregion
                }
                return this.mUIMessageCleanUpHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAddToInboxHyperlink;
        
        private HtmlHyperlink mUIGetMessagesInOutboxHyperlink;
        
        private HtmlHyperlink mUIGetUnsentMessagesHyperlink;
        
        private HtmlHyperlink mUIMarkMessageHyperlink;
        
        private HtmlHyperlink mUIMessageCleanUpHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceV20Window7 : BrowserWindow
    {
        
        public UIDepartmentServiceV20Window7()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "DepartmentServiceV20191 Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("DepartmentServiceV20191 Web Service");
            this.WindowTitles.Add("EmployeeChangeTrackingService Web Service");
            this.WindowTitles.Add("EmployeeServiceV63 Web Service");
            this.WindowTitles.Add("Gat.ExternalFlexService Service");
            this.WindowTitles.Add("GatGerica Web Service");
            this.WindowTitles.Add("ImportService Web Service");
            this.WindowTitles.Add("PatientInformationService Web Service");
            this.WindowTitles.Add("ReshRosterService Web Service");
            this.WindowTitles.Add("RoleDepartmentServiceV20182 Web Service");
            this.WindowTitles.Add("SmsGatewayService Web Service");
            this.WindowTitles.Add("TesService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UITesServiceWebServiceDocument UITesServiceWebServiceDocument
        {
            get
            {
                if ((this.mUITesServiceWebServiceDocument == null))
                {
                    this.mUITesServiceWebServiceDocument = new UITesServiceWebServiceDocument(this);
                }
                return this.mUITesServiceWebServiceDocument;
            }
        }
        #endregion
        
        #region Fields
        private UITesServiceWebServiceDocument mUITesServiceWebServiceDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITesServiceWebServiceDocument : HtmlDocument
    {
        
        public UITesServiceWebServiceDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "TesService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/TesService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/TesService.asmx";
            this.WindowTitles.Add("TesService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane14 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane14(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane14 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane14 : HtmlDiv
    {
        
        public UIContentPane14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "TesService\r\n\r\n\r\nTES integration Service.";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("TesService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetWorkShiftDataHyperlink
        {
            get
            {
                if ((this.mUIGetWorkShiftDataHyperlink == null))
                {
                    this.mUIGetWorkShiftDataHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetWorkShiftDataHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetWorkShiftData";
                    this.mUIGetWorkShiftDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/TesService.asmx";
                    this.mUIGetWorkShiftDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetWorkShiftDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/TesService.asmx?op=GetWorkShiftData";
                    this.mUIGetWorkShiftDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetWorkShiftDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"TesService.asmx?op=GetWorkShiftDat";
                    this.mUIGetWorkShiftDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGetWorkShiftDataHyperlink.WindowTitles.Add("TesService Web Service");
                    #endregion
                }
                return this.mUIGetWorkShiftDataHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetWorkShiftDataHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWebserviceMainPagWindow : BrowserWindow
    {
        
        public UIGatWebserviceMainPagWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Gat Webservice Main Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Gat Webservice Main Page");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGatWebserviceMainPagDocument UIGatWebserviceMainPagDocument
        {
            get
            {
                if ((this.mUIGatWebserviceMainPagDocument == null))
                {
                    this.mUIGatWebserviceMainPagDocument = new UIGatWebserviceMainPagDocument(this);
                }
                return this.mUIGatWebserviceMainPagDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGatWebserviceMainPagDocument mUIGatWebserviceMainPagDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWebserviceMainPagDocument : HtmlDocument
    {
        
        public UIGatWebserviceMainPagDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Gat Webservice Main Page";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/";
            this.WindowTitles.Add("Gat Webservice Main Page");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIWeaBreakServiceHyperlink
        {
            get
            {
                if ((this.mUIWeaBreakServiceHyperlink == null))
                {
                    this.mUIWeaBreakServiceHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIWeaBreakServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "repInternalServices_lnkService_15";
                    this.mUIWeaBreakServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "WeaBreakService";
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/WeaBreakService.asmx";
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/WeaBreakService.asmx";
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"repInternalServices_lnkService_15\" h";
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "28";
                    this.mUIWeaBreakServiceHyperlink.WindowTitles.Add("Gat Webservice Main Page");
                    #endregion
                }
                return this.mUIWeaBreakServiceHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIWeaBreakServiceHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAppServiceWebServiceWindow : BrowserWindow
    {
        
        public UIAppServiceWebServiceWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "AppService Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("AppService Web Service");
            this.WindowTitles.Add("BussinesAnalyzeService Web Service");
            this.WindowTitles.Add("CalendarIntegrationWebService Web Service");
            this.WindowTitles.Add("CalendarService Web Service");
            this.WindowTitles.Add("ExportService Web Service");
            this.WindowTitles.Add("Gat.FlexExportService Service");
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            this.WindowTitles.Add("GatTaskSchedulerDataService Web Service");
            this.WindowTitles.Add("PayslipImportService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIAppServiceWebServiceDocument UIAppServiceWebServiceDocument
        {
            get
            {
                if ((this.mUIAppServiceWebServiceDocument == null))
                {
                    this.mUIAppServiceWebServiceDocument = new UIAppServiceWebServiceDocument(this);
                }
                return this.mUIAppServiceWebServiceDocument;
            }
        }
        
        public UIBussinesAnalyzeServiDocument UIBussinesAnalyzeServiDocument
        {
            get
            {
                if ((this.mUIBussinesAnalyzeServiDocument == null))
                {
                    this.mUIBussinesAnalyzeServiDocument = new UIBussinesAnalyzeServiDocument(this);
                }
                return this.mUIBussinesAnalyzeServiDocument;
            }
        }
        
        public UICalendarIntegrationWDocument UICalendarIntegrationWDocument
        {
            get
            {
                if ((this.mUICalendarIntegrationWDocument == null))
                {
                    this.mUICalendarIntegrationWDocument = new UICalendarIntegrationWDocument(this);
                }
                return this.mUICalendarIntegrationWDocument;
            }
        }
        
        public UICalendarServiceWebSeDocument UICalendarServiceWebSeDocument
        {
            get
            {
                if ((this.mUICalendarServiceWebSeDocument == null))
                {
                    this.mUICalendarServiceWebSeDocument = new UICalendarServiceWebSeDocument(this);
                }
                return this.mUICalendarServiceWebSeDocument;
            }
        }
        
        public UIExportServiceWebServDocument UIExportServiceWebServDocument
        {
            get
            {
                if ((this.mUIExportServiceWebServDocument == null))
                {
                    this.mUIExportServiceWebServDocument = new UIExportServiceWebServDocument(this);
                }
                return this.mUIExportServiceWebServDocument;
            }
        }
        
        public UIGatFlexExportServiceDocument UIGatFlexExportServiceDocument
        {
            get
            {
                if ((this.mUIGatFlexExportServiceDocument == null))
                {
                    this.mUIGatFlexExportServiceDocument = new UIGatFlexExportServiceDocument(this);
                }
                return this.mUIGatFlexExportServiceDocument;
            }
        }
        
        public UIGatFlexServicesWebSeDocument UIGatFlexServicesWebSeDocument
        {
            get
            {
                if ((this.mUIGatFlexServicesWebSeDocument == null))
                {
                    this.mUIGatFlexServicesWebSeDocument = new UIGatFlexServicesWebSeDocument(this);
                }
                return this.mUIGatFlexServicesWebSeDocument;
            }
        }
        
        public UIGatTaskSchedulerDataDocument UIGatTaskSchedulerDataDocument
        {
            get
            {
                if ((this.mUIGatTaskSchedulerDataDocument == null))
                {
                    this.mUIGatTaskSchedulerDataDocument = new UIGatTaskSchedulerDataDocument(this);
                }
                return this.mUIGatTaskSchedulerDataDocument;
            }
        }
        
        public UIPayslipImportServiceDocument UIPayslipImportServiceDocument
        {
            get
            {
                if ((this.mUIPayslipImportServiceDocument == null))
                {
                    this.mUIPayslipImportServiceDocument = new UIPayslipImportServiceDocument(this);
                }
                return this.mUIPayslipImportServiceDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIAppServiceWebServiceDocument mUIAppServiceWebServiceDocument;
        
        private UIBussinesAnalyzeServiDocument mUIBussinesAnalyzeServiDocument;
        
        private UICalendarIntegrationWDocument mUICalendarIntegrationWDocument;
        
        private UICalendarServiceWebSeDocument mUICalendarServiceWebSeDocument;
        
        private UIExportServiceWebServDocument mUIExportServiceWebServDocument;
        
        private UIGatFlexExportServiceDocument mUIGatFlexExportServiceDocument;
        
        private UIGatFlexServicesWebSeDocument mUIGatFlexServicesWebSeDocument;
        
        private UIGatTaskSchedulerDataDocument mUIGatTaskSchedulerDataDocument;
        
        private UIPayslipImportServiceDocument mUIPayslipImportServiceDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAppServiceWebServiceDocument : HtmlDocument
    {
        
        public UIAppServiceWebServiceDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "AppService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/AppService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/AppService.asmx";
            this.WindowTitles.Add("AppService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane15 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane15(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane15 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane15 : HtmlDiv
    {
        
        public UIContentPane15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "AppService\r\n\r\n\r\nThe following operations";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("AppService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIProcessAppFlexQueueHyperlink
        {
            get
            {
                if ((this.mUIProcessAppFlexQueueHyperlink == null))
                {
                    this.mUIProcessAppFlexQueueHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProcessAppFlexQueueHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIProcessAppFlexQueueHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIProcessAppFlexQueueHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIProcessAppFlexQueueHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ProcessAppFlexQueue";
                    this.mUIProcessAppFlexQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/AppService.asmx";
                    this.mUIProcessAppFlexQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProcessAppFlexQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/AppService.asmx?op=ProcessAppFlexQueue";
                    this.mUIProcessAppFlexQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIProcessAppFlexQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"AppService.asmx?op=ProcessAppFlexQ";
                    this.mUIProcessAppFlexQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIProcessAppFlexQueueHyperlink.WindowTitles.Add("AppService Web Service");
                    #endregion
                }
                return this.mUIProcessAppFlexQueueHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIProcessAppFlexQueueHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBussinesAnalyzeServiDocument : HtmlDocument
    {
        
        public UIBussinesAnalyzeServiDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "BussinesAnalyzeService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/BussinesAnalyzeService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/BussinesAnalyzeService.asmx";
            this.WindowTitles.Add("BussinesAnalyzeService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane16 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane16(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane16 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane16 : HtmlDiv
    {
        
        public UIContentPane16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "BussinesAnalyzeService\r\n\r\n\r\nService for ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("BussinesAnalyzeService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIExecuteBusinessFunctHyperlink
        {
            get
            {
                if ((this.mUIExecuteBusinessFunctHyperlink == null))
                {
                    this.mUIExecuteBusinessFunctHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIExecuteBusinessFunctHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIExecuteBusinessFunctHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIExecuteBusinessFunctHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIExecuteBusinessFunctHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ExecuteBusinessFunctionForShiftsOverrideScheduler";
                    this.mUIExecuteBusinessFunctHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/BussinesAnalyzeService.asmx";
                    this.mUIExecuteBusinessFunctHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIExecuteBusinessFunctHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/BussinesAnalyzeService.asmx?op=ExecuteBusinessFunctionFor" +
                        "ShiftsOverrideScheduler";
                    this.mUIExecuteBusinessFunctHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIExecuteBusinessFunctHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"BussinesAnalyzeService.asmx?op=Exe";
                    this.mUIExecuteBusinessFunctHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIExecuteBusinessFunctHyperlink.WindowTitles.Add("BussinesAnalyzeService Web Service");
                    #endregion
                }
                return this.mUIExecuteBusinessFunctHyperlink;
            }
        }
        
        public HtmlHyperlink UIUpdateBussinessAnalyHyperlink
        {
            get
            {
                if ((this.mUIUpdateBussinessAnalyHyperlink == null))
                {
                    this.mUIUpdateBussinessAnalyHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIUpdateBussinessAnalyHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIUpdateBussinessAnalyHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIUpdateBussinessAnalyHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIUpdateBussinessAnalyHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "UpdateBussinessAnalyzeData";
                    this.mUIUpdateBussinessAnalyHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/BussinesAnalyzeService.asmx";
                    this.mUIUpdateBussinessAnalyHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIUpdateBussinessAnalyHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/BussinesAnalyzeService.asmx?op=UpdateBussinessAnalyzeData" +
                        "";
                    this.mUIUpdateBussinessAnalyHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIUpdateBussinessAnalyHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"BussinesAnalyzeService.asmx?op=Upd";
                    this.mUIUpdateBussinessAnalyHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIUpdateBussinessAnalyHyperlink.WindowTitles.Add("BussinesAnalyzeService Web Service");
                    #endregion
                }
                return this.mUIUpdateBussinessAnalyHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIExecuteBusinessFunctHyperlink;
        
        private HtmlHyperlink mUIUpdateBussinessAnalyHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICalendarIntegrationWDocument : HtmlDocument
    {
        
        public UICalendarIntegrationWDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "CalendarIntegrationWebService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/CalendarIntegrationWebService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/CalendarIntegrationWebService.asmx";
            this.WindowTitles.Add("CalendarIntegrationWebService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane17 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane17(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane17 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane17 : HtmlDiv
    {
        
        public UIContentPane17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "CalendarIntegrationWebService\r\n\r\n\r\nServi";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("CalendarIntegrationWebService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIDistributeHyperlink
        {
            get
            {
                if ((this.mUIDistributeHyperlink == null))
                {
                    this.mUIDistributeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDistributeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDistributeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDistributeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDistributeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Distribute";
                    this.mUIDistributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/CalendarIntegrationWebService.asmx";
                    this.mUIDistributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDistributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/CalendarIntegrationWebService.asmx?op=Distribute";
                    this.mUIDistributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDistributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"CalendarIntegrationWebService.asmx";
                    this.mUIDistributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIDistributeHyperlink.WindowTitles.Add("CalendarIntegrationWebService Web Service");
                    #endregion
                }
                return this.mUIDistributeHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIDistributeHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICalendarServiceWebSeDocument : HtmlDocument
    {
        
        public UICalendarServiceWebSeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "CalendarService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/CalendarService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/CalendarService.asmx";
            this.WindowTitles.Add("CalendarService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane18 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane18(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane18 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane18 : HtmlDiv
    {
        
        public UIContentPane18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "CalendarService\r\n\r\n\r\nThe following opera";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("CalendarService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetJourShiftsHyperlink
        {
            get
            {
                if ((this.mUIGetJourShiftsHyperlink == null))
                {
                    this.mUIGetJourShiftsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetJourShiftsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIGetJourShiftsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIGetJourShiftsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIGetJourShiftsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetJourShifts";
                    this.mUIGetJourShiftsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/CalendarService.asmx";
                    this.mUIGetJourShiftsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetJourShiftsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/CalendarService.asmx?op=GetJourShifts";
                    this.mUIGetJourShiftsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetJourShiftsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"CalendarService.asmx?op=GetJourShi";
                    this.mUIGetJourShiftsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGetJourShiftsHyperlink.WindowTitles.Add("CalendarService Web Service");
                    #endregion
                }
                return this.mUIGetJourShiftsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetJourShiftsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIExportServiceWebServDocument : HtmlDocument
    {
        
        public UIExportServiceWebServDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "ExportService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/ExportService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/ExportService.asmx";
            this.WindowTitles.Add("ExportService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane19 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane19(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane19 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane19 : HtmlDiv
    {
        
        public UIContentPane19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "ExportService\r\n\r\n\r\nService for managing ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("ExportService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIPostAfterSystemExporHyperlink
        {
            get
            {
                if ((this.mUIPostAfterSystemExporHyperlink == null))
                {
                    this.mUIPostAfterSystemExporHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIPostAfterSystemExporHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIPostAfterSystemExporHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIPostAfterSystemExporHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIPostAfterSystemExporHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "PostAfterSystemExportReceipt";
                    this.mUIPostAfterSystemExporHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/ExportService.asmx";
                    this.mUIPostAfterSystemExporHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIPostAfterSystemExporHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/ExportService.asmx?op=PostAfterSystemExportReceipt";
                    this.mUIPostAfterSystemExporHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIPostAfterSystemExporHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"ExportService.asmx?op=PostAfterSys";
                    this.mUIPostAfterSystemExporHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIPostAfterSystemExporHyperlink.WindowTitles.Add("ExportService Web Service");
                    #endregion
                }
                return this.mUIPostAfterSystemExporHyperlink;
            }
        }
        
        public HtmlHyperlink UIProcessAfterSystemExHyperlink
        {
            get
            {
                if ((this.mUIProcessAfterSystemExHyperlink == null))
                {
                    this.mUIProcessAfterSystemExHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProcessAfterSystemExHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIProcessAfterSystemExHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIProcessAfterSystemExHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIProcessAfterSystemExHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ProcessAfterSystemExport";
                    this.mUIProcessAfterSystemExHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/ExportService.asmx";
                    this.mUIProcessAfterSystemExHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProcessAfterSystemExHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/ExportService.asmx?op=ProcessAfterSystemExport";
                    this.mUIProcessAfterSystemExHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIProcessAfterSystemExHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"ExportService.asmx?op=ProcessAfter";
                    this.mUIProcessAfterSystemExHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIProcessAfterSystemExHyperlink.WindowTitles.Add("ExportService Web Service");
                    #endregion
                }
                return this.mUIProcessAfterSystemExHyperlink;
            }
        }
        
        public HtmlHyperlink UIProcessNextAfterSystHyperlink
        {
            get
            {
                if ((this.mUIProcessNextAfterSystHyperlink == null))
                {
                    this.mUIProcessNextAfterSystHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProcessNextAfterSystHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIProcessNextAfterSystHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIProcessNextAfterSystHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIProcessNextAfterSystHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ProcessNextAfterSystemExportJob";
                    this.mUIProcessNextAfterSystHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/ExportService.asmx";
                    this.mUIProcessNextAfterSystHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProcessNextAfterSystHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/ExportService.asmx?op=ProcessNextAfterSystemExportJob";
                    this.mUIProcessNextAfterSystHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIProcessNextAfterSystHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"ExportService.asmx?op=ProcessNextA";
                    this.mUIProcessNextAfterSystHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIProcessNextAfterSystHyperlink.WindowTitles.Add("ExportService Web Service");
                    #endregion
                }
                return this.mUIProcessNextAfterSystHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIPostAfterSystemExporHyperlink;
        
        private HtmlHyperlink mUIProcessAfterSystemExHyperlink;
        
        private HtmlHyperlink mUIProcessNextAfterSystHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatFlexExportServiceDocument : HtmlDocument
    {
        
        public UIGatFlexExportServiceDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Gat.FlexExportService Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/FlexExportService.svc";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/FlexExportService.svc";
            this.WindowTitles.Add("Gat.FlexExportService Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane20 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane20(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane20 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane20 : HtmlDiv
    {
        
        public UIContentPane20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Gat.FlexExportService Service\r\n\r\n\r\nYou h";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Gat.FlexExportService Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIHttplocalhostGatWs1FHyperlink
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1FHyperlink == null))
                {
                    this.mUIHttplocalhostGatWs1FHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1FHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIHttplocalhostGatWs1FHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHttplocalhostGatWs1FHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHttplocalhostGatWs1FHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1/FlexExportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1FHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/FlexExportService.svc";
                    this.mUIHttplocalhostGatWs1FHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1FHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/FlexExportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1FHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1FHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1/FlexExport";
                    this.mUIHttplocalhostGatWs1FHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHttplocalhostGatWs1FHyperlink.WindowTitles.Add("Gat.FlexExportService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1FHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIHttplocalhostGatWs1FHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatFlexServicesWebSeDocument : HtmlDocument
    {
        
        public UIGatFlexServicesWebSeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Gat-Flex Services Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/FlexService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/FlexService.asmx";
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane21 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane21(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane21 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane21 : HtmlDiv
    {
        
        public UIContentPane21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Gat-Flex Services\r\n\r\n\r\nServices related ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIUpdateUserAltIDHyperlink
        {
            get
            {
                if ((this.mUIUpdateUserAltIDHyperlink == null))
                {
                    this.mUIUpdateUserAltIDHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIUpdateUserAltIDHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIUpdateUserAltIDHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIUpdateUserAltIDHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIUpdateUserAltIDHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "UpdateUserAltID";
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/FlexService.asmx";
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/FlexService.asmx?op=UpdateUserAltID";
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"FlexService.asmx?op=UpdateUserAltI";
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "63";
                    this.mUIUpdateUserAltIDHyperlink.WindowTitles.Add("Gat-Flex Services Web Service");
                    #endregion
                }
                return this.mUIUpdateUserAltIDHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteQueueAbsencePeHyperlink
        {
            get
            {
                if ((this.mUIDeleteQueueAbsencePeHyperlink == null))
                {
                    this.mUIDeleteQueueAbsencePeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteQueueAbsencePeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteQueueAbsencePeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteQueueAbsencePeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteQueueAbsencePeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "DeleteQueueAbsencePeriods";
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/FlexService.asmx";
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/FlexService.asmx?op=DeleteQueueAbsencePeriods";
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"FlexService.asmx?op=DeleteQueueAbs";
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIDeleteQueueAbsencePeHyperlink.WindowTitles.Add("Gat-Flex Services Web Service");
                    #endregion
                }
                return this.mUIDeleteQueueAbsencePeHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIUpdateUserAltIDHyperlink;
        
        private HtmlHyperlink mUIDeleteQueueAbsencePeHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatTaskSchedulerDataDocument : HtmlDocument
    {
        
        public UIGatTaskSchedulerDataDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "GatTaskSchedulerDataService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/GatTaskSchedulerDataService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/GatTaskSchedulerDataService.asmx";
            this.WindowTitles.Add("GatTaskSchedulerDataService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane22 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane22(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane22 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane22 : HtmlDiv
    {
        
        public UIContentPane22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "GatTaskSchedulerDataService\r\n\r\n\r\nService";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("GatTaskSchedulerDataService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetScheduledTasksHyperlink
        {
            get
            {
                if ((this.mUIGetScheduledTasksHyperlink == null))
                {
                    this.mUIGetScheduledTasksHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetScheduledTasksHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIGetScheduledTasksHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIGetScheduledTasksHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIGetScheduledTasksHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetScheduledTasks";
                    this.mUIGetScheduledTasksHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/GatTaskSchedulerDataService.asmx";
                    this.mUIGetScheduledTasksHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetScheduledTasksHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/GatTaskSchedulerDataService.asmx?op=GetScheduledTasks";
                    this.mUIGetScheduledTasksHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetScheduledTasksHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"GatTaskSchedulerDataService.asmx?o";
                    this.mUIGetScheduledTasksHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGetScheduledTasksHyperlink.WindowTitles.Add("GatTaskSchedulerDataService Web Service");
                    #endregion
                }
                return this.mUIGetScheduledTasksHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetScheduledTasksHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPayslipImportServiceDocument : HtmlDocument
    {
        
        public UIPayslipImportServiceDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "PayslipImportService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/PayslipImportService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/PayslipImportService.asmx";
            this.WindowTitles.Add("PayslipImportService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane23 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane23(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane23 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane23 : HtmlDiv
    {
        
        public UIContentPane23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "PayslipImportService\r\n\r\n\r\nService for ma";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("PayslipImportService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIImportPayslipsHyperlink
        {
            get
            {
                if ((this.mUIImportPayslipsHyperlink == null))
                {
                    this.mUIImportPayslipsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIImportPayslipsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIImportPayslipsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIImportPayslipsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIImportPayslipsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ImportPayslips";
                    this.mUIImportPayslipsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/PayslipImportService.asmx";
                    this.mUIImportPayslipsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIImportPayslipsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/PayslipImportService.asmx?op=ImportPayslips";
                    this.mUIImportPayslipsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIImportPayslipsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"PayslipImportService.asmx?op=Impor";
                    this.mUIImportPayslipsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIImportPayslipsHyperlink.WindowTitles.Add("PayslipImportService Web Service");
                    #endregion
                }
                return this.mUIImportPayslipsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIImportPayslipsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAppServiceWebServiceWindow1 : BrowserWindow
    {
        
        public UIAppServiceWebServiceWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "AppService Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("AppService Web Service");
            this.WindowTitles.Add("BussinesAnalyzeService Web Service");
            this.WindowTitles.Add("CalendarIntegrationWebService Web Service");
            this.WindowTitles.Add("CalendarService Web Service");
            this.WindowTitles.Add("ExportService Web Service");
            this.WindowTitles.Add("Gat.FlexExportService Service");
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            this.WindowTitles.Add("GatTaskSchedulerDataService Web Service");
            this.WindowTitles.Add("PayslipImportService Web Service");
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            this.WindowTitles.Add("SmsByMailReader Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UISmsByMailReaderWebSeDocument UISmsByMailReaderWebSeDocument
        {
            get
            {
                if ((this.mUISmsByMailReaderWebSeDocument == null))
                {
                    this.mUISmsByMailReaderWebSeDocument = new UISmsByMailReaderWebSeDocument(this);
                }
                return this.mUISmsByMailReaderWebSeDocument;
            }
        }
        #endregion
        
        #region Fields
        private UISmsByMailReaderWebSeDocument mUISmsByMailReaderWebSeDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISmsByMailReaderWebSeDocument : HtmlDocument
    {
        
        public UISmsByMailReaderWebSeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "SmsByMailReader Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/SmsByMailReader.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/SmsByMailReader.asmx";
            this.WindowTitles.Add("SmsByMailReader Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane24 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane24(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane24 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane24 : HtmlDiv
    {
        
        public UIContentPane24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "SmsByMailReader\r\n\r\n\r\nSMSByMailReader Ser";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("SmsByMailReader Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIReadMailQueueAndCreaHyperlink
        {
            get
            {
                if ((this.mUIReadMailQueueAndCreaHyperlink == null))
                {
                    this.mUIReadMailQueueAndCreaHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIReadMailQueueAndCreaHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ReadMailQueueAndCreateSms";
                    this.mUIReadMailQueueAndCreaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/SmsByMailReader.asmx";
                    this.mUIReadMailQueueAndCreaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIReadMailQueueAndCreaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/SmsByMailReader.asmx?op=ReadMailQueueAndCreateSms";
                    this.mUIReadMailQueueAndCreaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIReadMailQueueAndCreaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"SmsByMailReader.asmx?op=ReadMailQu";
                    this.mUIReadMailQueueAndCreaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIReadMailQueueAndCreaHyperlink.WindowTitles.Add("SmsByMailReader Web Service");
                    #endregion
                }
                return this.mUIReadMailQueueAndCreaHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIReadMailQueueAndCreaHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAppServiceWebServiceWindow2 : BrowserWindow
    {
        
        public UIAppServiceWebServiceWindow2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "AppService Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("AppService Web Service");
            this.WindowTitles.Add("BussinesAnalyzeService Web Service");
            this.WindowTitles.Add("CalendarIntegrationWebService Web Service");
            this.WindowTitles.Add("CalendarService Web Service");
            this.WindowTitles.Add("ExportService Web Service");
            this.WindowTitles.Add("Gat.FlexExportService Service");
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            this.WindowTitles.Add("GatTaskSchedulerDataService Web Service");
            this.WindowTitles.Add("PayslipImportService Web Service");
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            this.WindowTitles.Add("SmsByMailReader Web Service");
            this.WindowTitles.Add("SmsService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UISmsServiceWebServiceDocument UISmsServiceWebServiceDocument
        {
            get
            {
                if ((this.mUISmsServiceWebServiceDocument == null))
                {
                    this.mUISmsServiceWebServiceDocument = new UISmsServiceWebServiceDocument(this);
                }
                return this.mUISmsServiceWebServiceDocument;
            }
        }
        #endregion
        
        #region Fields
        private UISmsServiceWebServiceDocument mUISmsServiceWebServiceDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISmsServiceWebServiceDocument : HtmlDocument
    {
        
        public UISmsServiceWebServiceDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "SmsService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/SmsService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/SmsService.asmx";
            this.WindowTitles.Add("SmsService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane25 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane25(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane25 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane25 : HtmlDiv
    {
        
        public UIContentPane25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "SmsService\r\n\r\n\r\nService for managing SMS";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("SmsService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIProcessSmsQueuesHyperlink
        {
            get
            {
                if ((this.mUIProcessSmsQueuesHyperlink == null))
                {
                    this.mUIProcessSmsQueuesHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProcessSmsQueuesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ProcessSmsQueues";
                    this.mUIProcessSmsQueuesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/SmsService.asmx";
                    this.mUIProcessSmsQueuesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProcessSmsQueuesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/SmsService.asmx?op=ProcessSmsQueues";
                    this.mUIProcessSmsQueuesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIProcessSmsQueuesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"SmsService.asmx?op=ProcessSmsQueue";
                    this.mUIProcessSmsQueuesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIProcessSmsQueuesHyperlink.WindowTitles.Add("SmsService Web Service");
                    #endregion
                }
                return this.mUIProcessSmsQueuesHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIProcessSmsQueuesHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAppServiceWebServiceWindow3 : BrowserWindow
    {
        
        public UIAppServiceWebServiceWindow3()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "AppService Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("AppService Web Service");
            this.WindowTitles.Add("BussinesAnalyzeService Web Service");
            this.WindowTitles.Add("CalendarIntegrationWebService Web Service");
            this.WindowTitles.Add("CalendarService Web Service");
            this.WindowTitles.Add("ExportService Web Service");
            this.WindowTitles.Add("Gat.FlexExportService Service");
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            this.WindowTitles.Add("GatTaskSchedulerDataService Web Service");
            this.WindowTitles.Add("PayslipImportService Web Service");
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            this.WindowTitles.Add("SmsByMailReader Web Service");
            this.WindowTitles.Add("SmsService Web Service");
            this.WindowTitles.Add("SystemInformationService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UISystemInformationSerDocument UISystemInformationSerDocument
        {
            get
            {
                if ((this.mUISystemInformationSerDocument == null))
                {
                    this.mUISystemInformationSerDocument = new UISystemInformationSerDocument(this);
                }
                return this.mUISystemInformationSerDocument;
            }
        }
        #endregion
        
        #region Fields
        private UISystemInformationSerDocument mUISystemInformationSerDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISystemInformationSerDocument : HtmlDocument
    {
        
        public UISystemInformationSerDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "SystemInformationService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/SystemInformationService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/SystemInformationService.asmx";
            this.WindowTitles.Add("SystemInformationService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane26 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane26(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane26 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane26 : HtmlDiv
    {
        
        public UIContentPane26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "SystemInformationService\r\n\r\n\r\nService pr";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("SystemInformationService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetAliveStatusHyperlink
        {
            get
            {
                if ((this.mUIGetAliveStatusHyperlink == null))
                {
                    this.mUIGetAliveStatusHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetAliveStatusHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetAliveStatus";
                    this.mUIGetAliveStatusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/SystemInformationService.asmx";
                    this.mUIGetAliveStatusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetAliveStatusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/SystemInformationService.asmx?op=GetAliveStatus";
                    this.mUIGetAliveStatusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetAliveStatusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"SystemInformationService.asmx?op=G";
                    this.mUIGetAliveStatusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGetAliveStatusHyperlink.WindowTitles.Add("SystemInformationService Web Service");
                    #endregion
                }
                return this.mUIGetAliveStatusHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetAliveStatusHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAppServiceWebServiceWindow4 : BrowserWindow
    {
        
        public UIAppServiceWebServiceWindow4()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "AppService Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("AppService Web Service");
            this.WindowTitles.Add("BussinesAnalyzeService Web Service");
            this.WindowTitles.Add("CalendarIntegrationWebService Web Service");
            this.WindowTitles.Add("CalendarService Web Service");
            this.WindowTitles.Add("ExportService Web Service");
            this.WindowTitles.Add("Gat.FlexExportService Service");
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            this.WindowTitles.Add("GatTaskSchedulerDataService Web Service");
            this.WindowTitles.Add("PayslipImportService Web Service");
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            this.WindowTitles.Add("SmsByMailReader Web Service");
            this.WindowTitles.Add("SmsService Web Service");
            this.WindowTitles.Add("SystemInformationService Web Service");
            this.WindowTitles.Add("Gat Webservice Main Page");
            this.WindowTitles.Add("TaskAgreementService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UITaskAgreementServiceDocument UITaskAgreementServiceDocument
        {
            get
            {
                if ((this.mUITaskAgreementServiceDocument == null))
                {
                    this.mUITaskAgreementServiceDocument = new UITaskAgreementServiceDocument(this);
                }
                return this.mUITaskAgreementServiceDocument;
            }
        }
        #endregion
        
        #region Fields
        private UITaskAgreementServiceDocument mUITaskAgreementServiceDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITaskAgreementServiceDocument : HtmlDocument
    {
        
        public UITaskAgreementServiceDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "TaskAgreementService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/TaskAgreementService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/TaskAgreementService.asmx";
            this.WindowTitles.Add("TaskAgreementService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane27 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane27(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane27 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane27 : HtmlDiv
    {
        
        public UIContentPane27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "TaskAgreementService\r\n\r\n\r\nTask agreement";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("TaskAgreementService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIUpdateTaskAgreementHyperlink
        {
            get
            {
                if ((this.mUIUpdateTaskAgreementHyperlink == null))
                {
                    this.mUIUpdateTaskAgreementHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIUpdateTaskAgreementHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "UpdateTaskAgreement";
                    this.mUIUpdateTaskAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/TaskAgreementService.asmx";
                    this.mUIUpdateTaskAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIUpdateTaskAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/TaskAgreementService.asmx?op=UpdateTaskAgreement";
                    this.mUIUpdateTaskAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIUpdateTaskAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"TaskAgreementService.asmx?op=Updat";
                    this.mUIUpdateTaskAgreementHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIUpdateTaskAgreementHyperlink.WindowTitles.Add("TaskAgreementService Web Service");
                    #endregion
                }
                return this.mUIUpdateTaskAgreementHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIUpdateTaskAgreementHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAppServiceWebServiceWindow5 : BrowserWindow
    {
        
        public UIAppServiceWebServiceWindow5()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "AppService Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("AppService Web Service");
            this.WindowTitles.Add("BussinesAnalyzeService Web Service");
            this.WindowTitles.Add("CalendarIntegrationWebService Web Service");
            this.WindowTitles.Add("CalendarService Web Service");
            this.WindowTitles.Add("ExportService Web Service");
            this.WindowTitles.Add("Gat.FlexExportService Service");
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            this.WindowTitles.Add("GatTaskSchedulerDataService Web Service");
            this.WindowTitles.Add("PayslipImportService Web Service");
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            this.WindowTitles.Add("SmsByMailReader Web Service");
            this.WindowTitles.Add("SmsService Web Service");
            this.WindowTitles.Add("SystemInformationService Web Service");
            this.WindowTitles.Add("Gat Webservice Main Page");
            this.WindowTitles.Add("TaskAgreementService Web Service");
            this.WindowTitles.Add("TestService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UITestServiceWebServicDocument UITestServiceWebServicDocument
        {
            get
            {
                if ((this.mUITestServiceWebServicDocument == null))
                {
                    this.mUITestServiceWebServicDocument = new UITestServiceWebServicDocument(this);
                }
                return this.mUITestServiceWebServicDocument;
            }
        }
        #endregion
        
        #region Fields
        private UITestServiceWebServicDocument mUITestServiceWebServicDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITestServiceWebServicDocument : HtmlDocument
    {
        
        public UITestServiceWebServicDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "TestService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/TestService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/TestService.asmx";
            this.WindowTitles.Add("TestService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane28 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane28(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane28 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane28 : HtmlDiv
    {
        
        public UIContentPane28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "TestService\r\n\r\n\r\nContains methods for te";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("TestService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UITestDatabaseConnectiHyperlink
        {
            get
            {
                if ((this.mUITestDatabaseConnectiHyperlink == null))
                {
                    this.mUITestDatabaseConnectiHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUITestDatabaseConnectiHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "TestDatabaseConnection";
                    this.mUITestDatabaseConnectiHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/TestService.asmx";
                    this.mUITestDatabaseConnectiHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUITestDatabaseConnectiHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/TestService.asmx?op=TestDatabaseConnection";
                    this.mUITestDatabaseConnectiHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUITestDatabaseConnectiHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"TestService.asmx?op=TestDatabaseCo";
                    this.mUITestDatabaseConnectiHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUITestDatabaseConnectiHyperlink.WindowTitles.Add("TestService Web Service");
                    #endregion
                }
                return this.mUITestDatabaseConnectiHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUITestDatabaseConnectiHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAppServiceWebServiceWindow6 : BrowserWindow
    {
        
        public UIAppServiceWebServiceWindow6()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "AppService Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("AppService Web Service");
            this.WindowTitles.Add("BussinesAnalyzeService Web Service");
            this.WindowTitles.Add("CalendarIntegrationWebService Web Service");
            this.WindowTitles.Add("CalendarService Web Service");
            this.WindowTitles.Add("ExportService Web Service");
            this.WindowTitles.Add("Gat.FlexExportService Service");
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            this.WindowTitles.Add("GatTaskSchedulerDataService Web Service");
            this.WindowTitles.Add("PayslipImportService Web Service");
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            this.WindowTitles.Add("SmsByMailReader Web Service");
            this.WindowTitles.Add("SmsService Web Service");
            this.WindowTitles.Add("SystemInformationService Web Service");
            this.WindowTitles.Add("Gat Webservice Main Page");
            this.WindowTitles.Add("TaskAgreementService Web Service");
            this.WindowTitles.Add("TestService Web Service");
            this.WindowTitles.Add("WeaBreakService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIWeaBreakServiceWebSeDocument UIWeaBreakServiceWebSeDocument
        {
            get
            {
                if ((this.mUIWeaBreakServiceWebSeDocument == null))
                {
                    this.mUIWeaBreakServiceWebSeDocument = new UIWeaBreakServiceWebSeDocument(this);
                }
                return this.mUIWeaBreakServiceWebSeDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIWeaBreakServiceWebSeDocument mUIWeaBreakServiceWebSeDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWeaBreakServiceWebSeDocument : HtmlDocument
    {
        
        public UIWeaBreakServiceWebSeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "WeaBreakService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/WeaBreakService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/WeaBreakService.asmx";
            this.WindowTitles.Add("WeaBreakService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane29 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane29(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane29 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane29 : HtmlDiv
    {
        
        public UIContentPane29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "WeaBreakService\r\n\r\n\r\nGat Wea break relat";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("WeaBreakService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICalculateWeaAndSaveWHyperlink
        {
            get
            {
                if ((this.mUICalculateWeaAndSaveWHyperlink == null))
                {
                    this.mUICalculateWeaAndSaveWHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICalculateWeaAndSaveWHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "CalculateWeaAndSaveWeaBreaksForEmployee";
                    this.mUICalculateWeaAndSaveWHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/WeaBreakService.asmx";
                    this.mUICalculateWeaAndSaveWHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICalculateWeaAndSaveWHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksForEm" +
                        "ployee";
                    this.mUICalculateWeaAndSaveWHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUICalculateWeaAndSaveWHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"WeaBreakService.asmx?op=CalculateW";
                    this.mUICalculateWeaAndSaveWHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUICalculateWeaAndSaveWHyperlink.WindowTitles.Add("WeaBreakService Web Service");
                    #endregion
                }
                return this.mUICalculateWeaAndSaveWHyperlink;
            }
        }
        
        public HtmlHyperlink UICalculateWeaAndSaveWHyperlink1
        {
            get
            {
                if ((this.mUICalculateWeaAndSaveWHyperlink1 == null))
                {
                    this.mUICalculateWeaAndSaveWHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICalculateWeaAndSaveWHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "CalculateWeaAndSaveWeaBreaksOverrideScheduler";
                    this.mUICalculateWeaAndSaveWHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/WeaBreakService.asmx";
                    this.mUICalculateWeaAndSaveWHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICalculateWeaAndSaveWHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksOverr" +
                        "ideScheduler";
                    this.mUICalculateWeaAndSaveWHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUICalculateWeaAndSaveWHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"WeaBreakService.asmx?op=CalculateW";
                    this.mUICalculateWeaAndSaveWHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUICalculateWeaAndSaveWHyperlink1.WindowTitles.Add("WeaBreakService Web Service");
                    #endregion
                }
                return this.mUICalculateWeaAndSaveWHyperlink1;
            }
        }
        
        public HtmlHyperlink UICalculateWeaAndSaveWHyperlink2
        {
            get
            {
                if ((this.mUICalculateWeaAndSaveWHyperlink2 == null))
                {
                    this.mUICalculateWeaAndSaveWHyperlink2 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICalculateWeaAndSaveWHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "CalculateWeaAndSaveWeaBreaksUsingScheduler";
                    this.mUICalculateWeaAndSaveWHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/WeaBreakService.asmx";
                    this.mUICalculateWeaAndSaveWHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICalculateWeaAndSaveWHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/WeaBreakService.asmx?op=CalculateWeaAndSaveWeaBreaksUsing" +
                        "Scheduler";
                    this.mUICalculateWeaAndSaveWHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUICalculateWeaAndSaveWHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"WeaBreakService.asmx?op=CalculateW";
                    this.mUICalculateWeaAndSaveWHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUICalculateWeaAndSaveWHyperlink2.WindowTitles.Add("WeaBreakService Web Service");
                    #endregion
                }
                return this.mUICalculateWeaAndSaveWHyperlink2;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICalculateWeaAndSaveWHyperlink;
        
        private HtmlHyperlink mUICalculateWeaAndSaveWHyperlink1;
        
        private HtmlHyperlink mUICalculateWeaAndSaveWHyperlink2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWebservices2MainPWindow : BrowserWindow
    {
        
        public UIGatWebservices2MainPWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Gat Webservices2 Main Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Gat Webservices2 Main Page");
            this.WindowTitles.Add("IdmService Web Service");
            this.WindowTitles.Add("TimeregImport Web Service");
            this.WindowTitles.Add("UniqueService Web Service");
            this.WindowTitles.Add("CommunicationQueueService Web Service");
            this.WindowTitles.Add("WishPlanWebService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGatWebservices2MainPDocument UIGatWebservices2MainPDocument
        {
            get
            {
                if ((this.mUIGatWebservices2MainPDocument == null))
                {
                    this.mUIGatWebservices2MainPDocument = new UIGatWebservices2MainPDocument(this);
                }
                return this.mUIGatWebservices2MainPDocument;
            }
        }
        
        public UIIdmServiceWebServiceDocument UIIdmServiceWebServiceDocument
        {
            get
            {
                if ((this.mUIIdmServiceWebServiceDocument == null))
                {
                    this.mUIIdmServiceWebServiceDocument = new UIIdmServiceWebServiceDocument(this);
                }
                return this.mUIIdmServiceWebServiceDocument;
            }
        }
        
        public UITimeregImportWebServDocument UITimeregImportWebServDocument
        {
            get
            {
                if ((this.mUITimeregImportWebServDocument == null))
                {
                    this.mUITimeregImportWebServDocument = new UITimeregImportWebServDocument(this);
                }
                return this.mUITimeregImportWebServDocument;
            }
        }
        
        public UIUniqueServiceWebServDocument UIUniqueServiceWebServDocument
        {
            get
            {
                if ((this.mUIUniqueServiceWebServDocument == null))
                {
                    this.mUIUniqueServiceWebServDocument = new UIUniqueServiceWebServDocument(this);
                }
                return this.mUIUniqueServiceWebServDocument;
            }
        }
        
        public UICommunicationQueueSeDocument UICommunicationQueueSeDocument
        {
            get
            {
                if ((this.mUICommunicationQueueSeDocument == null))
                {
                    this.mUICommunicationQueueSeDocument = new UICommunicationQueueSeDocument(this);
                }
                return this.mUICommunicationQueueSeDocument;
            }
        }
        
        public UIWishPlanWebServiceWeDocument UIWishPlanWebServiceWeDocument
        {
            get
            {
                if ((this.mUIWishPlanWebServiceWeDocument == null))
                {
                    this.mUIWishPlanWebServiceWeDocument = new UIWishPlanWebServiceWeDocument(this);
                }
                return this.mUIWishPlanWebServiceWeDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGatWebservices2MainPDocument mUIGatWebservices2MainPDocument;
        
        private UIIdmServiceWebServiceDocument mUIIdmServiceWebServiceDocument;
        
        private UITimeregImportWebServDocument mUITimeregImportWebServDocument;
        
        private UIUniqueServiceWebServDocument mUIUniqueServiceWebServDocument;
        
        private UICommunicationQueueSeDocument mUICommunicationQueueSeDocument;
        
        private UIWishPlanWebServiceWeDocument mUIWishPlanWebServiceWeDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWebservices2MainPDocument : HtmlDocument
    {
        
        public UIGatWebservices2MainPDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Gat Webservices2 Main Page";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs2/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs2/";
            this.WindowTitles.Add("Gat Webservices2 Main Page");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIWishPlanWebServiceHyperlink
        {
            get
            {
                if ((this.mUIWishPlanWebServiceHyperlink == null))
                {
                    this.mUIWishPlanWebServiceHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIWishPlanWebServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "repInternalServices_lnkService_1";
                    this.mUIWishPlanWebServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIWishPlanWebServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIWishPlanWebServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "WishPlanWebService";
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/WishPlanWebService.asmx";
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/WishPlanWebService.asmx";
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"repInternalServices_lnkService_1\" hr";
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUIWishPlanWebServiceHyperlink.WindowTitles.Add("Gat Webservices2 Main Page");
                    #endregion
                }
                return this.mUIWishPlanWebServiceHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIWishPlanWebServiceHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIdmServiceWebServiceDocument : HtmlDocument
    {
        
        public UIIdmServiceWebServiceDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "IdmService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs2/IdmService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs2/IdmService.asmx";
            this.WindowTitles.Add("IdmService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane30 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane30(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane30 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane30 : HtmlDiv
    {
        
        public UIContentPane30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "IdmService\r\n\r\n\r\nThis is a web service fo";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("IdmService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIActivateUserHyperlink
        {
            get
            {
                if ((this.mUIActivateUserHyperlink == null))
                {
                    this.mUIActivateUserHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIActivateUserHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ActivateUser";
                    this.mUIActivateUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/IdmService.asmx";
                    this.mUIActivateUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIActivateUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/IdmService.asmx?op=ActivateUser";
                    this.mUIActivateUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIActivateUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"IdmService.asmx?op=ActivateUser\"";
                    this.mUIActivateUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIActivateUserHyperlink.WindowTitles.Add("IdmService Web Service");
                    #endregion
                }
                return this.mUIActivateUserHyperlink;
            }
        }
        
        public HtmlHyperlink UIActivateUserByDateHyperlink
        {
            get
            {
                if ((this.mUIActivateUserByDateHyperlink == null))
                {
                    this.mUIActivateUserByDateHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIActivateUserByDateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ActivateUserByDate";
                    this.mUIActivateUserByDateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/IdmService.asmx";
                    this.mUIActivateUserByDateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIActivateUserByDateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/IdmService.asmx?op=ActivateUserByDate";
                    this.mUIActivateUserByDateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIActivateUserByDateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"IdmService.asmx?op=ActivateUserByD";
                    this.mUIActivateUserByDateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIActivateUserByDateHyperlink.WindowTitles.Add("IdmService Web Service");
                    #endregion
                }
                return this.mUIActivateUserByDateHyperlink;
            }
        }
        
        public HtmlHyperlink UIAdvancedCreateOrUpdaHyperlink
        {
            get
            {
                if ((this.mUIAdvancedCreateOrUpdaHyperlink == null))
                {
                    this.mUIAdvancedCreateOrUpdaHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAdvancedCreateOrUpdaHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "AdvancedCreateOrUpdateUser";
                    this.mUIAdvancedCreateOrUpdaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/IdmService.asmx";
                    this.mUIAdvancedCreateOrUpdaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAdvancedCreateOrUpdaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/IdmService.asmx?op=AdvancedCreateOrUpdateUser";
                    this.mUIAdvancedCreateOrUpdaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIAdvancedCreateOrUpdaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"IdmService.asmx?op=AdvancedCreateO";
                    this.mUIAdvancedCreateOrUpdaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIAdvancedCreateOrUpdaHyperlink.WindowTitles.Add("IdmService Web Service");
                    #endregion
                }
                return this.mUIAdvancedCreateOrUpdaHyperlink;
            }
        }
        
        public HtmlHyperlink UIAdvancedCreateOrUpdaHyperlink1
        {
            get
            {
                if ((this.mUIAdvancedCreateOrUpdaHyperlink1 == null))
                {
                    this.mUIAdvancedCreateOrUpdaHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAdvancedCreateOrUpdaHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "AdvancedCreateOrUpdateUserByToDate";
                    this.mUIAdvancedCreateOrUpdaHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/IdmService.asmx";
                    this.mUIAdvancedCreateOrUpdaHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAdvancedCreateOrUpdaHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/IdmService.asmx?op=AdvancedCreateOrUpdateUserByToDate";
                    this.mUIAdvancedCreateOrUpdaHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIAdvancedCreateOrUpdaHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"IdmService.asmx?op=AdvancedCreateO";
                    this.mUIAdvancedCreateOrUpdaHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUIAdvancedCreateOrUpdaHyperlink1.WindowTitles.Add("IdmService Web Service");
                    #endregion
                }
                return this.mUIAdvancedCreateOrUpdaHyperlink1;
            }
        }
        
        public HtmlHyperlink UIGetUsersHyperlink
        {
            get
            {
                if ((this.mUIGetUsersHyperlink == null))
                {
                    this.mUIGetUsersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetUsersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetUsers";
                    this.mUIGetUsersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/IdmService.asmx";
                    this.mUIGetUsersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetUsersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/IdmService.asmx?op=GetUsers";
                    this.mUIGetUsersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetUsersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"IdmService.asmx?op=GetUsers\"";
                    this.mUIGetUsersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIGetUsersHyperlink.WindowTitles.Add("IdmService Web Service");
                    #endregion
                }
                return this.mUIGetUsersHyperlink;
            }
        }
        
        public HtmlHyperlink UIGetUsers_UserNameHyperlink
        {
            get
            {
                if ((this.mUIGetUsers_UserNameHyperlink == null))
                {
                    this.mUIGetUsers_UserNameHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetUsers_UserNameHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetUsers_UserName";
                    this.mUIGetUsers_UserNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/IdmService.asmx";
                    this.mUIGetUsers_UserNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetUsers_UserNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/IdmService.asmx?op=GetUsers_UserName";
                    this.mUIGetUsers_UserNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetUsers_UserNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"IdmService.asmx?op=GetUsers_UserNa";
                    this.mUIGetUsers_UserNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIGetUsers_UserNameHyperlink.WindowTitles.Add("IdmService Web Service");
                    #endregion
                }
                return this.mUIGetUsers_UserNameHyperlink;
            }
        }
        
        public HtmlHyperlink UIHelloWorldHyperlink
        {
            get
            {
                if ((this.mUIHelloWorldHyperlink == null))
                {
                    this.mUIHelloWorldHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHelloWorldHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "HelloWorld";
                    this.mUIHelloWorldHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/IdmService.asmx";
                    this.mUIHelloWorldHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHelloWorldHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/IdmService.asmx?op=HelloWorld";
                    this.mUIHelloWorldHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHelloWorldHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"IdmService.asmx?op=HelloWorld\"";
                    this.mUIHelloWorldHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "8";
                    this.mUIHelloWorldHyperlink.WindowTitles.Add("IdmService Web Service");
                    #endregion
                }
                return this.mUIHelloWorldHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIActivateUserHyperlink;
        
        private HtmlHyperlink mUIActivateUserByDateHyperlink;
        
        private HtmlHyperlink mUIAdvancedCreateOrUpdaHyperlink;
        
        private HtmlHyperlink mUIAdvancedCreateOrUpdaHyperlink1;
        
        private HtmlHyperlink mUIGetUsersHyperlink;
        
        private HtmlHyperlink mUIGetUsers_UserNameHyperlink;
        
        private HtmlHyperlink mUIHelloWorldHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITimeregImportWebServDocument : HtmlDocument
    {
        
        public UITimeregImportWebServDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "TimeregImport Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs2/TimeregImport.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs2/TimeregImport.asmx";
            this.WindowTitles.Add("TimeregImport Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane31 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane31(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane31 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane31 : HtmlDiv
    {
        
        public UIContentPane31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "TimeregImport\r\n\r\n\r\nThis web service has ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("TimeregImport Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIImportTimeregRegistrHyperlink
        {
            get
            {
                if ((this.mUIImportTimeregRegistrHyperlink == null))
                {
                    this.mUIImportTimeregRegistrHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIImportTimeregRegistrHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ImportTimeregRegistration";
                    this.mUIImportTimeregRegistrHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/TimeregImport.asmx";
                    this.mUIImportTimeregRegistrHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIImportTimeregRegistrHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/TimeregImport.asmx?op=ImportTimeregRegistration";
                    this.mUIImportTimeregRegistrHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIImportTimeregRegistrHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"TimeregImport.asmx?op=ImportTimere";
                    this.mUIImportTimeregRegistrHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIImportTimeregRegistrHyperlink.WindowTitles.Add("TimeregImport Web Service");
                    #endregion
                }
                return this.mUIImportTimeregRegistrHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIImportTimeregRegistrHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUniqueServiceWebServDocument : HtmlDocument
    {
        
        public UIUniqueServiceWebServDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "UniqueService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs2/UniqueService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs2/UniqueService.asmx";
            this.WindowTitles.Add("UniqueService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane32 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane32(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane32 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane32 : HtmlDiv
    {
        
        public UIContentPane32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "UniqueService\r\n\r\n\r\nThis web service is m";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("UniqueService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIProfilturnusFaaPersoHyperlink
        {
            get
            {
                if ((this.mUIProfilturnusFaaPersoHyperlink == null))
                {
                    this.mUIProfilturnusFaaPersoHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProfilturnusFaaPersoHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ProfilturnusFaaPerson";
                    this.mUIProfilturnusFaaPersoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/UniqueService.asmx";
                    this.mUIProfilturnusFaaPersoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProfilturnusFaaPersoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaPerson";
                    this.mUIProfilturnusFaaPersoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIProfilturnusFaaPersoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"UniqueService.asmx?op=Profilturnus";
                    this.mUIProfilturnusFaaPersoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIProfilturnusFaaPersoHyperlink.WindowTitles.Add("UniqueService Web Service");
                    #endregion
                }
                return this.mUIProfilturnusFaaPersoHyperlink;
            }
        }
        
        public HtmlHyperlink UIProfilturnusFaaStillHyperlink
        {
            get
            {
                if ((this.mUIProfilturnusFaaStillHyperlink == null))
                {
                    this.mUIProfilturnusFaaStillHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProfilturnusFaaStillHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ProfilturnusFaaStilling";
                    this.mUIProfilturnusFaaStillHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/UniqueService.asmx";
                    this.mUIProfilturnusFaaStillHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProfilturnusFaaStillHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaStilling";
                    this.mUIProfilturnusFaaStillHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIProfilturnusFaaStillHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"UniqueService.asmx?op=Profilturnus";
                    this.mUIProfilturnusFaaStillHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIProfilturnusFaaStillHyperlink.WindowTitles.Add("UniqueService Web Service");
                    #endregion
                }
                return this.mUIProfilturnusFaaStillHyperlink;
            }
        }
        
        public HtmlHyperlink UIProfilturnusFaaVaktpHyperlink
        {
            get
            {
                if ((this.mUIProfilturnusFaaVaktpHyperlink == null))
                {
                    this.mUIProfilturnusFaaVaktpHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProfilturnusFaaVaktpHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ProfilturnusFaaVaktplan";
                    this.mUIProfilturnusFaaVaktpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/UniqueService.asmx";
                    this.mUIProfilturnusFaaVaktpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProfilturnusFaaVaktpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/UniqueService.asmx?op=ProfilturnusFaaVaktplan";
                    this.mUIProfilturnusFaaVaktpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIProfilturnusFaaVaktpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"UniqueService.asmx?op=Profilturnus";
                    this.mUIProfilturnusFaaVaktpHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIProfilturnusFaaVaktpHyperlink.WindowTitles.Add("UniqueService Web Service");
                    #endregion
                }
                return this.mUIProfilturnusFaaVaktpHyperlink;
            }
        }
        
        public HtmlHyperlink UIProfilturnus_functioHyperlink
        {
            get
            {
                if ((this.mUIProfilturnus_functioHyperlink == null))
                {
                    this.mUIProfilturnus_functioHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProfilturnus_functioHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "profilturnus_function";
                    this.mUIProfilturnus_functioHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/UniqueService.asmx";
                    this.mUIProfilturnus_functioHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProfilturnus_functioHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/UniqueService.asmx?op=profilturnus_function";
                    this.mUIProfilturnus_functioHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIProfilturnus_functioHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"UniqueService.asmx?op=profilturnus";
                    this.mUIProfilturnus_functioHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUIProfilturnus_functioHyperlink.WindowTitles.Add("UniqueService Web Service");
                    #endregion
                }
                return this.mUIProfilturnus_functioHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIProfilturnusFaaPersoHyperlink;
        
        private HtmlHyperlink mUIProfilturnusFaaStillHyperlink;
        
        private HtmlHyperlink mUIProfilturnusFaaVaktpHyperlink;
        
        private HtmlHyperlink mUIProfilturnus_functioHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICommunicationQueueSeDocument : HtmlDocument
    {
        
        public UICommunicationQueueSeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "CommunicationQueueService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs2/CommunicationQueueService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs2/CommunicationQueueService.asmx";
            this.WindowTitles.Add("CommunicationQueueService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane33 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane33(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane33 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane33 : HtmlDiv
    {
        
        public UIContentPane33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "CommunicationQueueService\r\n\r\n\r\nService f";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("CommunicationQueueService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIFillMessageQueueWithHyperlink
        {
            get
            {
                if ((this.mUIFillMessageQueueWithHyperlink == null))
                {
                    this.mUIFillMessageQueueWithHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIFillMessageQueueWithHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "FillMessageQueueWithDashboardWarnings";
                    this.mUIFillMessageQueueWithHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/CommunicationQueueService.asmx";
                    this.mUIFillMessageQueueWithHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIFillMessageQueueWithHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/CommunicationQueueService.asmx?op=FillMessageQueueWithDas" +
                        "hboardWarnings";
                    this.mUIFillMessageQueueWithHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIFillMessageQueueWithHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"CommunicationQueueService.asmx?op=";
                    this.mUIFillMessageQueueWithHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIFillMessageQueueWithHyperlink.WindowTitles.Add("CommunicationQueueService Web Service");
                    #endregion
                }
                return this.mUIFillMessageQueueWithHyperlink;
            }
        }
        
        public HtmlHyperlink UIFillMessageQueueWithHyperlink1
        {
            get
            {
                if ((this.mUIFillMessageQueueWithHyperlink1 == null))
                {
                    this.mUIFillMessageQueueWithHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIFillMessageQueueWithHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "FillMessageQueueWithDashboardWarningsOverrideScheduler";
                    this.mUIFillMessageQueueWithHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/CommunicationQueueService.asmx";
                    this.mUIFillMessageQueueWithHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIFillMessageQueueWithHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/CommunicationQueueService.asmx?op=FillMessageQueueWithDas" +
                        "hboardWarningsOverrideScheduler";
                    this.mUIFillMessageQueueWithHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIFillMessageQueueWithHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"CommunicationQueueService.asmx?op=";
                    this.mUIFillMessageQueueWithHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIFillMessageQueueWithHyperlink1.WindowTitles.Add("CommunicationQueueService Web Service");
                    #endregion
                }
                return this.mUIFillMessageQueueWithHyperlink1;
            }
        }
        
        public HtmlHyperlink UIProcessMailQueueHyperlink
        {
            get
            {
                if ((this.mUIProcessMailQueueHyperlink == null))
                {
                    this.mUIProcessMailQueueHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProcessMailQueueHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "ProcessMailQueue";
                    this.mUIProcessMailQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/CommunicationQueueService.asmx";
                    this.mUIProcessMailQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProcessMailQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/CommunicationQueueService.asmx?op=ProcessMailQueue";
                    this.mUIProcessMailQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIProcessMailQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"CommunicationQueueService.asmx?op=";
                    this.mUIProcessMailQueueHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIProcessMailQueueHyperlink.WindowTitles.Add("CommunicationQueueService Web Service");
                    #endregion
                }
                return this.mUIProcessMailQueueHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIFillMessageQueueWithHyperlink;
        
        private HtmlHyperlink mUIFillMessageQueueWithHyperlink1;
        
        private HtmlHyperlink mUIProcessMailQueueHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWishPlanWebServiceWeDocument : HtmlDocument
    {
        
        public UIWishPlanWebServiceWeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "WishPlanWebService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs2/WishPlanWebService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs2/WishPlanWebService.asmx";
            this.WindowTitles.Add("WishPlanWebService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane34 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane34(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane34 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane34 : HtmlDiv
    {
        
        public UIContentPane34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "WishPlanWebService\r\n\r\n\r\nThis web service";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("WishPlanWebService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetAdditionalDataHyperlink
        {
            get
            {
                if ((this.mUIGetAdditionalDataHyperlink == null))
                {
                    this.mUIGetAdditionalDataHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetAdditionalDataHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetAdditionalData";
                    this.mUIGetAdditionalDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/WishPlanWebService.asmx";
                    this.mUIGetAdditionalDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetAdditionalDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/WishPlanWebService.asmx?op=GetAdditionalData";
                    this.mUIGetAdditionalDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetAdditionalDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"WishPlanWebService.asmx?op=GetAddi";
                    this.mUIGetAdditionalDataHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGetAdditionalDataHyperlink.WindowTitles.Add("WishPlanWebService Web Service");
                    #endregion
                }
                return this.mUIGetAdditionalDataHyperlink;
            }
        }
        
        public HtmlHyperlink UIGetDemandHyperlink
        {
            get
            {
                if ((this.mUIGetDemandHyperlink == null))
                {
                    this.mUIGetDemandHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetDemandHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetDemand";
                    this.mUIGetDemandHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/WishPlanWebService.asmx";
                    this.mUIGetDemandHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetDemandHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/WishPlanWebService.asmx?op=GetDemand";
                    this.mUIGetDemandHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetDemandHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"WishPlanWebService.asmx?op=GetDema";
                    this.mUIGetDemandHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIGetDemandHyperlink.WindowTitles.Add("WishPlanWebService Web Service");
                    #endregion
                }
                return this.mUIGetDemandHyperlink;
            }
        }
        
        public HtmlHyperlink UIGetPlanHyperlink
        {
            get
            {
                if ((this.mUIGetPlanHyperlink == null))
                {
                    this.mUIGetPlanHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetPlanHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetPlan";
                    this.mUIGetPlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/WishPlanWebService.asmx";
                    this.mUIGetPlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetPlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/WishPlanWebService.asmx?op=GetPlan";
                    this.mUIGetPlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetPlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"WishPlanWebService.asmx?op=GetPlan";
                    this.mUIGetPlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIGetPlanHyperlink.WindowTitles.Add("WishPlanWebService Web Service");
                    #endregion
                }
                return this.mUIGetPlanHyperlink;
            }
        }
        
        public HtmlHyperlink UISavePlanHyperlink
        {
            get
            {
                if ((this.mUISavePlanHyperlink == null))
                {
                    this.mUISavePlanHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUISavePlanHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "SavePlan";
                    this.mUISavePlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2/WishPlanWebService.asmx";
                    this.mUISavePlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUISavePlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2/WishPlanWebService.asmx?op=SavePlan";
                    this.mUISavePlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUISavePlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"WishPlanWebService.asmx?op=SavePla";
                    this.mUISavePlanHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUISavePlanHyperlink.WindowTitles.Add("WishPlanWebService Web Service");
                    #endregion
                }
                return this.mUISavePlanHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetAdditionalDataHyperlink;
        
        private HtmlHyperlink mUIGetDemandHyperlink;
        
        private HtmlHyperlink mUIGetPlanHyperlink;
        
        private HtmlHyperlink mUISavePlanHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWebserviceMainPagWindow1 : BrowserWindow
    {
        
        public UIGatWebserviceMainPagWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Gat Webservice Main Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Gat Webservice Main Page");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGatWebserviceMainPagDocument1 UIGatWebserviceMainPagDocument
        {
            get
            {
                if ((this.mUIGatWebserviceMainPagDocument == null))
                {
                    this.mUIGatWebserviceMainPagDocument = new UIGatWebserviceMainPagDocument1(this);
                }
                return this.mUIGatWebserviceMainPagDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGatWebserviceMainPagDocument1 mUIGatWebserviceMainPagDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWebserviceMainPagDocument1 : HtmlDocument
    {
        
        public UIGatWebserviceMainPagDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Gat Webservice Main Page";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1_se/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1_se/";
            this.WindowTitles.Add("Gat Webservice Main Page");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIWeaBreakServiceHyperlink
        {
            get
            {
                if ((this.mUIWeaBreakServiceHyperlink == null))
                {
                    this.mUIWeaBreakServiceHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIWeaBreakServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "repInternalServices_lnkService_15";
                    this.mUIWeaBreakServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIWeaBreakServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIWeaBreakServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "WeaBreakService";
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/WeaBreakService.asmx";
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/WeaBreakService.asmx";
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"repInternalServices_lnkService_15\" h";
                    this.mUIWeaBreakServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "28";
                    this.mUIWeaBreakServiceHyperlink.WindowTitles.Add("Gat Webservice Main Page");
                    #endregion
                }
                return this.mUIWeaBreakServiceHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIWeaBreakServiceHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWebserviceMainPagWindow2 : BrowserWindow
    {
        
        public UIGatWebserviceMainPagWindow2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Gat Webservice Main Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Gat Webservice Main Page");
            this.WindowTitles.Add("Gat Webservices2 Main Page");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGatWebservices2MainPDocument1 UIGatWebservices2MainPDocument
        {
            get
            {
                if ((this.mUIGatWebservices2MainPDocument == null))
                {
                    this.mUIGatWebservices2MainPDocument = new UIGatWebservices2MainPDocument1(this);
                }
                return this.mUIGatWebservices2MainPDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGatWebservices2MainPDocument1 mUIGatWebservices2MainPDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWebservices2MainPDocument1 : HtmlDocument
    {
        
        public UIGatWebservices2MainPDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Gat Webservices2 Main Page";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs2_se/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs2_se/";
            this.WindowTitles.Add("Gat Webservices2 Main Page");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIWishPlanWebServiceHyperlink
        {
            get
            {
                if ((this.mUIWishPlanWebServiceHyperlink == null))
                {
                    this.mUIWishPlanWebServiceHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIWishPlanWebServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "repInternalServices_lnkService_1";
                    this.mUIWishPlanWebServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIWishPlanWebServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIWishPlanWebServiceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "WishPlanWebService";
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs2_se/WishPlanWebService.asmx";
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs2_se/WishPlanWebService.asmx";
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"repInternalServices_lnkService_1\" hr";
                    this.mUIWishPlanWebServiceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUIWishPlanWebServiceHyperlink.WindowTitles.Add("Gat Webservices2 Main Page");
                    #endregion
                }
                return this.mUIWishPlanWebServiceHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIWishPlanWebServiceHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISickleaveMessageImpoWindow1 : BrowserWindow
    {
        
        public UISickleaveMessageImpoWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "SickleaveMessageImportService Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            this.WindowTitles.Add("Gat.FlexExportService Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGatFlexExportServiceDocument1 UIGatFlexExportServiceDocument
        {
            get
            {
                if ((this.mUIGatFlexExportServiceDocument == null))
                {
                    this.mUIGatFlexExportServiceDocument = new UIGatFlexExportServiceDocument1(this);
                }
                return this.mUIGatFlexExportServiceDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGatFlexExportServiceDocument1 mUIGatFlexExportServiceDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatFlexExportServiceDocument1 : HtmlDocument
    {
        
        public UIGatFlexExportServiceDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Gat.FlexExportService Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1_se/FlexExportService.svc";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1_se/FlexExportService.svc";
            this.WindowTitles.Add("Gat.FlexExportService Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane35 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane35(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane35 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane35 : HtmlDiv
    {
        
        public UIContentPane35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Gat.FlexExportService Service\r\n\r\n\r\nYou h";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Gat.FlexExportService Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIHttplocalhostGatWs1_Hyperlink
        {
            get
            {
                if ((this.mUIHttplocalhostGatWs1_Hyperlink == null))
                {
                    this.mUIHttplocalhostGatWs1_Hyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHttplocalhostGatWs1_Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "http://localhost/GatWs1_se/FlexExportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/FlexExportService.svc";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/FlexExportService.svc?singleWsdl";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"http://localhost/GatWs1_se/FlexExp";
                    this.mUIHttplocalhostGatWs1_Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHttplocalhostGatWs1_Hyperlink.WindowTitles.Add("Gat.FlexExportService Service");
                    #endregion
                }
                return this.mUIHttplocalhostGatWs1_Hyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIHttplocalhostGatWs1_Hyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISickleaveMessageImpoWindow2 : BrowserWindow
    {
        
        public UISickleaveMessageImpoWindow2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "SickleaveMessageImportService Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("SickleaveMessageImportService Service");
            this.WindowTitles.Add("Gat.FlexExportService Service");
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGatFlexServicesWebSeDocument1 UIGatFlexServicesWebSeDocument
        {
            get
            {
                if ((this.mUIGatFlexServicesWebSeDocument == null))
                {
                    this.mUIGatFlexServicesWebSeDocument = new UIGatFlexServicesWebSeDocument1(this);
                }
                return this.mUIGatFlexServicesWebSeDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGatFlexServicesWebSeDocument1 mUIGatFlexServicesWebSeDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatFlexServicesWebSeDocument1 : HtmlDocument
    {
        
        public UIGatFlexServicesWebSeDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Gat-Flex Services Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1_se/FlexService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1_se/FlexService.asmx";
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane36 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane36(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane36 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane36 : HtmlDiv
    {
        
        public UIContentPane36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Gat-Flex Services\r\n\r\n\r\nServices related ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Gat-Flex Services Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIDeleteQueueAbsencePeHyperlink
        {
            get
            {
                if ((this.mUIDeleteQueueAbsencePeHyperlink == null))
                {
                    this.mUIDeleteQueueAbsencePeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteQueueAbsencePeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteQueueAbsencePeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteQueueAbsencePeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteQueueAbsencePeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "DeleteQueueAbsencePeriods";
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/FlexService.asmx";
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/FlexService.asmx?op=DeleteQueueAbsencePeriods";
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"FlexService.asmx?op=DeleteQueueAbs";
                    this.mUIDeleteQueueAbsencePeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIDeleteQueueAbsencePeHyperlink.WindowTitles.Add("Gat-Flex Services Web Service");
                    #endregion
                }
                return this.mUIDeleteQueueAbsencePeHyperlink;
            }
        }
        
        public HtmlHyperlink UIEmployeeIsFlexUserHyperlink
        {
            get
            {
                if ((this.mUIEmployeeIsFlexUserHyperlink == null))
                {
                    this.mUIEmployeeIsFlexUserHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEmployeeIsFlexUserHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEmployeeIsFlexUserHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEmployeeIsFlexUserHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEmployeeIsFlexUserHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "EmployeeIsFlexUser";
                    this.mUIEmployeeIsFlexUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/FlexService.asmx";
                    this.mUIEmployeeIsFlexUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEmployeeIsFlexUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/FlexService.asmx?op=EmployeeIsFlexUser";
                    this.mUIEmployeeIsFlexUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIEmployeeIsFlexUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"FlexService.asmx?op=EmployeeIsFlex";
                    this.mUIEmployeeIsFlexUserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIEmployeeIsFlexUserHyperlink.WindowTitles.Add("Gat-Flex Services Web Service");
                    #endregion
                }
                return this.mUIEmployeeIsFlexUserHyperlink;
            }
        }
        
        public HtmlHyperlink UIEmployeeIsInHyperlink
        {
            get
            {
                if ((this.mUIEmployeeIsInHyperlink == null))
                {
                    this.mUIEmployeeIsInHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEmployeeIsInHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEmployeeIsInHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEmployeeIsInHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEmployeeIsInHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "EmployeeIsIn";
                    this.mUIEmployeeIsInHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/FlexService.asmx";
                    this.mUIEmployeeIsInHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEmployeeIsInHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/FlexService.asmx?op=EmployeeIsIn";
                    this.mUIEmployeeIsInHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIEmployeeIsInHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"FlexService.asmx?op=EmployeeIsIn\"";
                    this.mUIEmployeeIsInHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIEmployeeIsInHyperlink.WindowTitles.Add("Gat-Flex Services Web Service");
                    #endregion
                }
                return this.mUIEmployeeIsInHyperlink;
            }
        }
        
        public HtmlHyperlink UIEmployeeIsInOutOrHasHyperlink
        {
            get
            {
                if ((this.mUIEmployeeIsInOutOrHasHyperlink == null))
                {
                    this.mUIEmployeeIsInOutOrHasHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEmployeeIsInOutOrHasHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEmployeeIsInOutOrHasHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEmployeeIsInOutOrHasHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEmployeeIsInOutOrHasHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "EmployeeIsInOutOrHasBeenHere";
                    this.mUIEmployeeIsInOutOrHasHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/FlexService.asmx";
                    this.mUIEmployeeIsInOutOrHasHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEmployeeIsInOutOrHasHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/FlexService.asmx?op=EmployeeIsInOutOrHasBeenHere";
                    this.mUIEmployeeIsInOutOrHasHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIEmployeeIsInOutOrHasHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"FlexService.asmx?op=EmployeeIsInOu";
                    this.mUIEmployeeIsInOutOrHasHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUIEmployeeIsInOutOrHasHyperlink.WindowTitles.Add("Gat-Flex Services Web Service");
                    #endregion
                }
                return this.mUIEmployeeIsInOutOrHasHyperlink;
            }
        }
        
        public HtmlHyperlink UIEmployeeLastStampHyperlink
        {
            get
            {
                if ((this.mUIEmployeeLastStampHyperlink == null))
                {
                    this.mUIEmployeeLastStampHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEmployeeLastStampHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEmployeeLastStampHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEmployeeLastStampHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEmployeeLastStampHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "EmployeeLastStamp";
                    this.mUIEmployeeLastStampHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/FlexService.asmx";
                    this.mUIEmployeeLastStampHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEmployeeLastStampHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/FlexService.asmx?op=EmployeeLastStamp";
                    this.mUIEmployeeLastStampHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIEmployeeLastStampHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"FlexService.asmx?op=EmployeeLastSt";
                    this.mUIEmployeeLastStampHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIEmployeeLastStampHyperlink.WindowTitles.Add("Gat-Flex Services Web Service");
                    #endregion
                }
                return this.mUIEmployeeLastStampHyperlink;
            }
        }
        
        public HtmlHyperlink UIEmployeeLastStampTimHyperlink
        {
            get
            {
                if ((this.mUIEmployeeLastStampTimHyperlink == null))
                {
                    this.mUIEmployeeLastStampTimHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEmployeeLastStampTimHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEmployeeLastStampTimHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEmployeeLastStampTimHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEmployeeLastStampTimHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "EmployeeLastStampTime";
                    this.mUIEmployeeLastStampTimHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/FlexService.asmx";
                    this.mUIEmployeeLastStampTimHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEmployeeLastStampTimHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/FlexService.asmx?op=EmployeeLastStampTime";
                    this.mUIEmployeeLastStampTimHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIEmployeeLastStampTimHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"FlexService.asmx?op=EmployeeLastSt";
                    this.mUIEmployeeLastStampTimHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIEmployeeLastStampTimHyperlink.WindowTitles.Add("Gat-Flex Services Web Service");
                    #endregion
                }
                return this.mUIEmployeeLastStampTimHyperlink;
            }
        }
        
        public HtmlHyperlink UIUpdateUserAltIDHyperlink
        {
            get
            {
                if ((this.mUIUpdateUserAltIDHyperlink == null))
                {
                    this.mUIUpdateUserAltIDHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIUpdateUserAltIDHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIUpdateUserAltIDHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIUpdateUserAltIDHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIUpdateUserAltIDHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "UpdateUserAltID";
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1_se/FlexService.asmx";
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1_se/FlexService.asmx?op=UpdateUserAltID";
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"FlexService.asmx?op=UpdateUserAltI";
                    this.mUIUpdateUserAltIDHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "63";
                    this.mUIUpdateUserAltIDHyperlink.WindowTitles.Add("Gat-Flex Services Web Service");
                    #endregion
                }
                return this.mUIUpdateUserAltIDHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIDeleteQueueAbsencePeHyperlink;
        
        private HtmlHyperlink mUIEmployeeIsFlexUserHyperlink;
        
        private HtmlHyperlink mUIEmployeeIsInHyperlink;
        
        private HtmlHyperlink mUIEmployeeIsInOutOrHasHyperlink;
        
        private HtmlHyperlink mUIEmployeeLastStampHyperlink;
        
        private HtmlHyperlink mUIEmployeeLastStampTimHyperlink;
        
        private HtmlHyperlink mUIUpdateUserAltIDHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceWebWindow : BrowserWindow
    {
        
        public UIDepartmentServiceWebWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "DepartmentService Web Service";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("DepartmentService Web Service");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDepartmentServiceWebDocument UIDepartmentServiceWebDocument
        {
            get
            {
                if ((this.mUIDepartmentServiceWebDocument == null))
                {
                    this.mUIDepartmentServiceWebDocument = new UIDepartmentServiceWebDocument(this);
                }
                return this.mUIDepartmentServiceWebDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDepartmentServiceWebDocument mUIDepartmentServiceWebDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentServiceWebDocument : HtmlDocument
    {
        
        public UIDepartmentServiceWebDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "DepartmentService Web Service";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/GatWs1/DepartmentService.asmx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/GatWs1/DepartmentService.asmx";
            this.WindowTitles.Add("DepartmentService Web Service");
            #endregion
        }
        
        #region Properties
        public UIContentPane37 UIContentPane
        {
            get
            {
                if ((this.mUIContentPane == null))
                {
                    this.mUIContentPane = new UIContentPane37(this);
                }
                return this.mUIContentPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentPane37 mUIContentPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentPane37 : HtmlDiv
    {
        
        public UIContentPane37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "content";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "DepartmentService\r\n\r\n\r\nDepartment relate";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"content\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("DepartmentService Web Service");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGetDepartmentRosterVHyperlink
        {
            get
            {
                if ((this.mUIGetDepartmentRosterVHyperlink == null))
                {
                    this.mUIGetDepartmentRosterVHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGetDepartmentRosterVHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIGetDepartmentRosterVHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIGetDepartmentRosterVHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIGetDepartmentRosterVHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "GetDepartmentRosterV20202";
                    this.mUIGetDepartmentRosterVHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/GatWs1/DepartmentService.asmx";
                    this.mUIGetDepartmentRosterVHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGetDepartmentRosterVHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/GatWs1/DepartmentService.asmx?op=GetDepartmentRosterV20202";
                    this.mUIGetDepartmentRosterVHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGetDepartmentRosterVHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"DepartmentService.asmx?op=GetDepar";
                    this.mUIGetDepartmentRosterVHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIGetDepartmentRosterVHyperlink.WindowTitles.Add("DepartmentService Web Service");
                    #endregion
                }
                return this.mUIGetDepartmentRosterVHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGetDepartmentRosterVHyperlink;
        #endregion
    }
}
