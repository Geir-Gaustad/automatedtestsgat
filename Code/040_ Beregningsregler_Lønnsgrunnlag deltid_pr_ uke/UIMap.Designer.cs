// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _040__Beregningsregler_Lønnsgrunnlag_deltid_pr__uke
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v19_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// CheckValuesStep1 - Use 'CheckValuesStep1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep1()
        {
            #region Variable Declarations
            DXCell uIItem250Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem250Cell;
            DXCell uIItem550Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem550Cell;
            #endregion

            // Verify that the 'Text' property of '2,50' cell equals '2,50'
            Assert.AreEqual(this.CheckValuesStep1ExpectedValues.UIItem250CellText, uIItem250Cell.Text);

            // Verify that the 'Text' property of '5,50' cell equals '5,50'
            Assert.AreEqual(this.CheckValuesStep1ExpectedValues.UIItem550CellText, uIItem550Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep10 - Use 'CheckValuesStep10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep10()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem550Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem550Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '5,50' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem550CellText, uIItem550Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep11 - Use 'CheckValuesStep11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep11()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem1230Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem1230Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep11ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '4,50' cell equals '3,50'
            Assert.AreEqual(this.CheckValuesStep11ExpectedValues.UIItem450CellText, uIItem450Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep11ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '12,30' cell equals '4,50'
            Assert.AreEqual(this.CheckValuesStep11ExpectedValues.UIItem1230CellText, uIItem1230Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep12 - Use 'CheckValuesStep12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep12()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep12ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '4,50' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep12ExpectedValues.UIItem450CellText, uIItem450Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep14 - Use 'CheckValuesStep14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep14()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem1230Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem1230Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep14ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '4,50' cell equals '4,50'
            Assert.AreEqual(this.CheckValuesStep14ExpectedValues.UIItem450CellText, uIItem450Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep14ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '12,30' cell equals '3,50'
            Assert.AreEqual(this.CheckValuesStep14ExpectedValues.UIItem1230CellText, uIItem1230Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep2 - Use 'CheckValuesStep2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep2()
        {
            #region Variable Declarations
            DXCell uIItem1250Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem1250Cell;
            DXCell uIItem550Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem550Cell;
            #endregion

            // Verify that the 'Text' property of '12,50' cell equals '12,50'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem1250CellText, uIItem1250Cell.Text);

            // Verify that the 'Text' property of '5,50' cell equals '4,30'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem550CellText, uIItem550Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep3 - Use 'CheckValuesStep3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep3()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem1230Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem1230Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '4,50' cell equals '4,50'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem450CellText, uIItem450Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '12,30' cell equals '12,30'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem1230CellText, uIItem1230Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep4 - Use 'CheckValuesStep4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep4()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem430Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem430Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '4,50' cell equals '12,50'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem450CellText, uIItem450Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '4,30' cell equals '4,30'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem430CellText, uIItem430Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep5 - Use 'CheckValuesStep5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep5()
        {
            #region Variable Declarations
            DXCell uIItem27102023Cell = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem27102023Cell;
            DXCell uIItem200TimelønnCell = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem200TimelønnCell;
            DXCell uIItem8Cell = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem8Cell;
            DXCell uIItem8Cell1 = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem8Cell1;
            #endregion

            // Verify that the 'Text' property of '27.10.2023' cell equals '27.10.2023'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem27102023CellText, uIItem27102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '-8' cell equals '-8'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem8CellText, uIItem8Cell.Text);

            // Verify that the 'Text' property of '-8' cell equals '-8'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem8Cell1Text, uIItem8Cell1.Text);
        }
        
        /// <summary>
        /// CheckValuesStep6 - Use 'CheckValuesStep6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep6()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep6ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '4,50' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep6ExpectedValues.UIItem450CellText, uIItem450Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep6ExpectedValues.UIItem800CellText, uIItem800Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep9 - Use 'CheckValuesStep9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep9()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem550Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem550Cell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep9ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '5,50' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep9ExpectedValues.UIItem550CellText, uIItem550Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep9ExpectedValues.UIItem800CellText, uIItem800Cell.Text);
        }
        
        /// <summary>
        /// CreateAbsenceStep5
        /// </summary>
        public void CreateAbsenceStep5()
        {
            #region Variable Declarations
            DXCell uITurnusStandard355Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusStandard355Cell;
            DXRibbonButtonItem uIFraværRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIFraværRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Standard 35,5' cell to 'Fravær' RibbonBaseButtonItem
            uIFraværRibbonBaseButtonItem.EnsureClickable(new Point(24, 22));
            Mouse.StartDragging(uITurnusStandard355Cell, new Point(101, -15));
            Mouse.StopDragging(uIFraværRibbonBaseButtonItem, new Point(24, 22));
        }
        
        /// <summary>
        /// DeleteAbsenceStep8
        /// </summary>
        public void DeleteAbsenceStep8()
        {
            #region Variable Declarations
            DXCell uIItem27102023DCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UIFraværDockPanel.UIControlContainerCustom.UIGcAbsenceColumnTable.UIItem27102023DCell;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpMiscRibbonPageGroup.UISlettRibbonBaseButtonItem;
            #endregion

            // Move '27.10.2023 D' cell to 'Slett' RibbonBaseButtonItem
            uISlettRibbonBaseButtonItem.EnsureClickable(new Point(19, 18));
            Mouse.StartDragging(uIItem27102023DCell, new Point(3, 4));
            Mouse.StopDragging(uISlettRibbonBaseButtonItem, new Point(19, 18));
        }
        
        /// <summary>
        /// DeleteExtraShiftStep12
        /// </summary>
        public void DeleteExtraShiftStep12()
        {
            #region Variable Declarations
            DXCell uITurnusStandard355Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusStandard355Cell1;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpMiscRibbonPageGroup.UISlettRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Standard 35,5' cell to 'Slett' RibbonBaseButtonItem
            uISlettRibbonBaseButtonItem.EnsureClickable(new Point(22, 22));
            Mouse.StartDragging(uITurnusStandard355Cell1, new Point(35, 6));
            Mouse.StopDragging(uISlettRibbonBaseButtonItem, new Point(22, 22));
        }
        
        /// <summary>
        /// DeleteRemanageShiftStep4
        /// </summary>
        public void DeleteRemanageShiftStep4()
        {
            #region Variable Declarations
            DXCell uITurnusStandard355Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIAften00167770770FalsDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusStandard355Cell1;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpMiscRibbonPageGroup.UISlettRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Standard 35,5' cell to 'Slett' RibbonBaseButtonItem
            uISlettRibbonBaseButtonItem.EnsureClickable(new Point(18, 26));
            Mouse.StartDragging(uITurnusStandard355Cell1, new Point(44, 0));
            Mouse.StopDragging(uISlettRibbonBaseButtonItem, new Point(18, 26));
        }
        
        /// <summary>
        /// DragStandardTurnusToExtraStep1
        /// </summary>
        public void DragStandardTurnusToExtraStep1()
        {
            #region Variable Declarations
            DXCell uITurnusStandard355Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusStandard355Cell;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Standard 35,5' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(16, 24));
            Mouse.StartDragging(uITurnusStandard355Cell, new Point(44, 7));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(16, 24));
        }
        
        /// <summary>
        /// DragStandardTurnusToExtraStep10
        /// </summary>
        public void DragStandardTurnusToExtraStep10()
        {
            #region Variable Declarations
            DXCell uITurnusStandard355Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusStandard355Cell1;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Standard 35,5' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(20, 20));
            Mouse.StartDragging(uITurnusStandard355Cell1, new Point(-99, 3));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(20, 20));
        }
        
        /// <summary>
        /// DragStandardTurnusToExtraStep13
        /// </summary>
        public void DragStandardTurnusToExtraStep13()
        {
            #region Variable Declarations
            DXCell uITurnusStandard355Cell2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusStandard355Cell2;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Standard 35,5' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(22, 21));
            Mouse.StartDragging(uITurnusStandard355Cell2, new Point(9, 5));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(22, 21));
        }
        
        /// <summary>
        /// DragStandardTurnusToExtraStep2
        /// </summary>
        public void DragStandardTurnusToExtraStep2()
        {
            #region Variable Declarations
            DXCell uITurnusStandard355Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusStandard355Cell1;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Standard 35,5' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(20, 28));
            Mouse.StartDragging(uITurnusStandard355Cell1, new Point(-56, 2));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(20, 28));
        }
        
        /// <summary>
        /// DragStandardTurnusToExtraStep9
        /// </summary>
        public void DragStandardTurnusToExtraStep9()
        {
            #region Variable Declarations
            DXCell uITurnusStandard355Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusStandard355Cell;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Standard 35,5' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(21, 23));
            Mouse.StartDragging(uITurnusStandard355Cell, new Point(35, 7));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(21, 23));
        }
        
        /// <summary>
        /// DragStandardTurnusToRemanageStep3
        /// </summary>
        public void DragStandardTurnusToRemanageStep3()
        {
            #region Variable Declarations
            DXCell uITurnusStandard355Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIAften00167770770FalsDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusStandard355Cell;
            DXRibbonButtonItem uIForskjøvetvaktRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIForskjøvetvaktRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Standard 35,5' cell to 'Forskjøvet
            //vakt' RibbonBaseButtonItem
            uIForskjøvetvaktRibbonBaseButtonItem.EnsureClickable(new Point(26, 20));
            Mouse.StartDragging(uITurnusStandard355Cell, new Point(64, 0));
            Mouse.StopDragging(uIForskjøvetvaktRibbonBaseButtonItem, new Point(26, 20));
        }
        
        /// <summary>
        /// EditOvertimeRadioButtonsStep15 - Use 'EditOvertimeRadioButtonsStep15Params' to pass parameters into this method.
        /// </summary>
        public void EditOvertimeRadioButtonsStep15()
        {
            #region Variable Declarations
            WinClient uIGlobaltoppsettClient = this.UIGlobaltoppsettWindow.UIItemWindow.UIGlobaltoppsettClient;
            WinRadioButton uIKalkuleriregistrerinRadioButton = this.UIGlobaltoppsettWindow.UIRekkefølgepåkalkulerClient.UIKalkuleriregistrerinRadioButton;
            WinButton uILagreButton = this.UIGlobaltoppsettWindow.UIItemWindow1.UIGlobaltoppsettClient.UILagreButton;
            #endregion

            // Click 'Globalt oppsett' client
            Mouse.Click(uIGlobaltoppsettClient, new Point(43, 349));

            // Select 'Kalkuler i registreringsrekkefølge.' radio button
            uIKalkuleriregistrerinRadioButton.Selected = this.EditOvertimeRadioButtonsStep15Params.UIKalkuleriregistrerinRadioButtonSelected;

            // Click '&Lagre' button
            Mouse.Click(uILagreButton, new Point(43, 15));
        }
        
        /// <summary>
        /// EditOvertimeRadioButtonsStep16 - Use 'EditOvertimeRadioButtonsStep16Params' to pass parameters into this method.
        /// </summary>
        public void EditOvertimeRadioButtonsStep16()
        {
            #region Variable Declarations
            WinClient uIGlobaltoppsettClient = this.UIGlobaltoppsettWindow.UIItemWindow.UIGlobaltoppsettClient;
            WinRadioButton uIKalkulerikronologiskRadioButton = this.UIGlobaltoppsettWindow.UIRekkefølgepåkalkulerClient.UIKalkulerikronologiskRadioButton;
            WinButton uILagreButton = this.UIGlobaltoppsettWindow.UIItemWindow1.UIGlobaltoppsettClient.UILagreButton;
            #endregion

            // Click 'Globalt oppsett' client
            Mouse.Click(uIGlobaltoppsettClient, new Point(36, 353));

            // Select 'Kalkuler i kronologisk rekkefølge.' radio button
            uIKalkulerikronologiskRadioButton.Selected = this.EditOvertimeRadioButtonsStep16Params.UIKalkulerikronologiskRadioButtonSelected;

            // Click '&Lagre' button
            Mouse.Click(uILagreButton, new Point(46, 6));
        }
        
        /// <summary>
        /// DeleteAbsenceStep7
        /// </summary>
        public void DeleteAbsenceStep7()
        {
            #region Variable Declarations
            DXCell uITurnusStandard355Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UIFraværDockPanel.UIControlContainerCustom.UIGcAbsenceColumnTable.UITurnusStandard355Cell;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpMiscRibbonPageGroup.UISlettRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Standard 35,5' cell to 'Slett' RibbonBaseButtonItem
            uISlettRibbonBaseButtonItem.EnsureClickable(new Point(22, 23));
            Mouse.StartDragging(uITurnusStandard355Cell, new Point(55, -3));
            Mouse.StopDragging(uISlettRibbonBaseButtonItem, new Point(22, 23));
        }
        
        /// <summary>
        /// CheckValuesStep7 - Use 'CheckValuesStep7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep7()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem1230Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem1230Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '4,50' cell equals '2,50'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem450CellText, uIItem450Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '12,30' cell equals '5,50'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem1230CellText, uIItem1230Cell.Text);
        }
        
        /// <summary>
        /// CreateAbsenceStep7
        /// </summary>
        public void CreateAbsenceStep7()
        {
            #region Variable Declarations
            DXCell uITurnusStandard355Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusStandard355Cell;
            DXRibbonButtonItem uIFraværRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIFraværRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Standard 35,5' cell to 'Fravær' RibbonBaseButtonItem
            uIFraværRibbonBaseButtonItem.EnsureClickable(new Point(20, 23));
            Mouse.StartDragging(uITurnusStandard355Cell, new Point(49, 4));
            Mouse.StopDragging(uIFraværRibbonBaseButtonItem, new Point(20, 23));
        }
        
        /// <summary>
        /// CheckValuesStep13 - Use 'CheckValuesStep13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep13()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell2 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell2;
            DXCell uIItem1250Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem1250Cell;
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem550Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem550Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep13ExpectedValues.UIItem200TimelønnCell2Text, uIItem200TimelønnCell2.Text);

            // Verify that the 'Text' property of '12,50' cell equals '7,00'
            Assert.AreEqual(this.CheckValuesStep13ExpectedValues.UIItem1250CellText, uIItem1250Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep13ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '5,50' cell equals '1,00'
            Assert.AreEqual(this.CheckValuesStep13ExpectedValues.UIItem550CellText, uIItem550Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep15 - Use 'CheckValuesStep15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep15()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell2 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell2;
            DXCell uIItem1250Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem1250Cell;
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem550Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem550Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep15ExpectedValues.UIItem200TimelønnCell2Text, uIItem200TimelønnCell2.Text);

            // Verify that the 'Text' property of '12,50' cell equals '3,50'
            Assert.AreEqual(this.CheckValuesStep15ExpectedValues.UIItem1250CellText, uIItem1250Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep15ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '5,50' cell equals '4,50'
            Assert.AreEqual(this.CheckValuesStep15ExpectedValues.UIItem550CellText, uIItem550Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep13org - Use 'CheckValuesStep13orgExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep13org()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell1 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell1;
            DXCell uIItem250Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem250Cell;
            DXCell uIItem310Overtid100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem100Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep13orgExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '2,50' cell equals '7,00'
            Assert.AreEqual(this.CheckValuesStep13orgExpectedValues.UIItem250CellText, uIItem250Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep13orgExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '1,00' cell equals '1,00'
            Assert.AreEqual(this.CheckValuesStep13orgExpectedValues.UIItem100CellText, uIItem100Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep15org - Use 'CheckValuesStep15orgExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep15org()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell1 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell1;
            DXCell uIItem250Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem250Cell;
            DXCell uIItem310Overtid100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem100Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep15orgExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '2,50' cell equals '3,50'
            Assert.AreEqual(this.CheckValuesStep15orgExpectedValues.UIItem250CellText, uIItem250Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep15orgExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '1,00' cell equals '4,50'
            Assert.AreEqual(this.CheckValuesStep15orgExpectedValues.UIItem100CellText, uIItem100Cell.Text);
        }
        
        #region Properties
        public virtual CheckValuesStep1ExpectedValues CheckValuesStep1ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep1ExpectedValues == null))
                {
                    this.mCheckValuesStep1ExpectedValues = new CheckValuesStep1ExpectedValues();
                }
                return this.mCheckValuesStep1ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep10ExpectedValues CheckValuesStep10ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep10ExpectedValues == null))
                {
                    this.mCheckValuesStep10ExpectedValues = new CheckValuesStep10ExpectedValues();
                }
                return this.mCheckValuesStep10ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep11ExpectedValues CheckValuesStep11ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep11ExpectedValues == null))
                {
                    this.mCheckValuesStep11ExpectedValues = new CheckValuesStep11ExpectedValues();
                }
                return this.mCheckValuesStep11ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep12ExpectedValues CheckValuesStep12ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep12ExpectedValues == null))
                {
                    this.mCheckValuesStep12ExpectedValues = new CheckValuesStep12ExpectedValues();
                }
                return this.mCheckValuesStep12ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep14ExpectedValues CheckValuesStep14ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep14ExpectedValues == null))
                {
                    this.mCheckValuesStep14ExpectedValues = new CheckValuesStep14ExpectedValues();
                }
                return this.mCheckValuesStep14ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep2ExpectedValues CheckValuesStep2ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep2ExpectedValues == null))
                {
                    this.mCheckValuesStep2ExpectedValues = new CheckValuesStep2ExpectedValues();
                }
                return this.mCheckValuesStep2ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep3ExpectedValues CheckValuesStep3ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep3ExpectedValues == null))
                {
                    this.mCheckValuesStep3ExpectedValues = new CheckValuesStep3ExpectedValues();
                }
                return this.mCheckValuesStep3ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep4ExpectedValues CheckValuesStep4ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep4ExpectedValues == null))
                {
                    this.mCheckValuesStep4ExpectedValues = new CheckValuesStep4ExpectedValues();
                }
                return this.mCheckValuesStep4ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep5ExpectedValues CheckValuesStep5ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep5ExpectedValues == null))
                {
                    this.mCheckValuesStep5ExpectedValues = new CheckValuesStep5ExpectedValues();
                }
                return this.mCheckValuesStep5ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep6ExpectedValues CheckValuesStep6ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep6ExpectedValues == null))
                {
                    this.mCheckValuesStep6ExpectedValues = new CheckValuesStep6ExpectedValues();
                }
                return this.mCheckValuesStep6ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep9ExpectedValues CheckValuesStep9ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep9ExpectedValues == null))
                {
                    this.mCheckValuesStep9ExpectedValues = new CheckValuesStep9ExpectedValues();
                }
                return this.mCheckValuesStep9ExpectedValues;
            }
        }
        
        public virtual EditOvertimeRadioButtonsStep15Params EditOvertimeRadioButtonsStep15Params
        {
            get
            {
                if ((this.mEditOvertimeRadioButtonsStep15Params == null))
                {
                    this.mEditOvertimeRadioButtonsStep15Params = new EditOvertimeRadioButtonsStep15Params();
                }
                return this.mEditOvertimeRadioButtonsStep15Params;
            }
        }
        
        public virtual EditOvertimeRadioButtonsStep16Params EditOvertimeRadioButtonsStep16Params
        {
            get
            {
                if ((this.mEditOvertimeRadioButtonsStep16Params == null))
                {
                    this.mEditOvertimeRadioButtonsStep16Params = new EditOvertimeRadioButtonsStep16Params();
                }
                return this.mEditOvertimeRadioButtonsStep16Params;
            }
        }
        
        public virtual CheckValuesStep7ExpectedValues CheckValuesStep7ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep7ExpectedValues == null))
                {
                    this.mCheckValuesStep7ExpectedValues = new CheckValuesStep7ExpectedValues();
                }
                return this.mCheckValuesStep7ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep13ExpectedValues CheckValuesStep13ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep13ExpectedValues == null))
                {
                    this.mCheckValuesStep13ExpectedValues = new CheckValuesStep13ExpectedValues();
                }
                return this.mCheckValuesStep13ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep15ExpectedValues CheckValuesStep15ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep15ExpectedValues == null))
                {
                    this.mCheckValuesStep15ExpectedValues = new CheckValuesStep15ExpectedValues();
                }
                return this.mCheckValuesStep15ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep13orgExpectedValues CheckValuesStep13orgExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep13orgExpectedValues == null))
                {
                    this.mCheckValuesStep13orgExpectedValues = new CheckValuesStep13orgExpectedValues();
                }
                return this.mCheckValuesStep13orgExpectedValues;
            }
        }
        
        public virtual CheckValuesStep15orgExpectedValues CheckValuesStep15orgExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep15orgExpectedValues == null))
                {
                    this.mCheckValuesStep15orgExpectedValues = new CheckValuesStep15orgExpectedValues();
                }
                return this.mCheckValuesStep15orgExpectedValues;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        
        public UIMerarbeidovertidWindow UIMerarbeidovertidWindow
        {
            get
            {
                if ((this.mUIMerarbeidovertidWindow == null))
                {
                    this.mUIMerarbeidovertidWindow = new UIMerarbeidovertidWindow();
                }
                return this.mUIMerarbeidovertidWindow;
            }
        }
        
        public UIRekalkuleringWindow UIRekalkuleringWindow
        {
            get
            {
                if ((this.mUIRekalkuleringWindow == null))
                {
                    this.mUIRekalkuleringWindow = new UIRekalkuleringWindow();
                }
                return this.mUIRekalkuleringWindow;
            }
        }
        
        public UIFraværsregistreringWindow UIFraværsregistreringWindow
        {
            get
            {
                if ((this.mUIFraværsregistreringWindow == null))
                {
                    this.mUIFraværsregistreringWindow = new UIFraværsregistreringWindow();
                }
                return this.mUIFraværsregistreringWindow;
            }
        }
        
        public UIGlobaltoppsettWindow UIGlobaltoppsettWindow
        {
            get
            {
                if ((this.mUIGlobaltoppsettWindow == null))
                {
                    this.mUIGlobaltoppsettWindow = new UIGlobaltoppsettWindow();
                }
                return this.mUIGlobaltoppsettWindow;
            }
        }
        #endregion
        
        #region Fields
        private CheckValuesStep1ExpectedValues mCheckValuesStep1ExpectedValues;
        
        private CheckValuesStep10ExpectedValues mCheckValuesStep10ExpectedValues;
        
        private CheckValuesStep11ExpectedValues mCheckValuesStep11ExpectedValues;
        
        private CheckValuesStep12ExpectedValues mCheckValuesStep12ExpectedValues;
        
        private CheckValuesStep14ExpectedValues mCheckValuesStep14ExpectedValues;
        
        private CheckValuesStep2ExpectedValues mCheckValuesStep2ExpectedValues;
        
        private CheckValuesStep3ExpectedValues mCheckValuesStep3ExpectedValues;
        
        private CheckValuesStep4ExpectedValues mCheckValuesStep4ExpectedValues;
        
        private CheckValuesStep5ExpectedValues mCheckValuesStep5ExpectedValues;
        
        private CheckValuesStep6ExpectedValues mCheckValuesStep6ExpectedValues;
        
        private CheckValuesStep9ExpectedValues mCheckValuesStep9ExpectedValues;
        
        private EditOvertimeRadioButtonsStep15Params mEditOvertimeRadioButtonsStep15Params;
        
        private EditOvertimeRadioButtonsStep16Params mEditOvertimeRadioButtonsStep16Params;
        
        private CheckValuesStep7ExpectedValues mCheckValuesStep7ExpectedValues;
        
        private CheckValuesStep13ExpectedValues mCheckValuesStep13ExpectedValues;
        
        private CheckValuesStep15ExpectedValues mCheckValuesStep15ExpectedValues;
        
        private CheckValuesStep13orgExpectedValues mCheckValuesStep13orgExpectedValues;
        
        private CheckValuesStep15orgExpectedValues mCheckValuesStep15orgExpectedValues;
        
        private UIGatWindow mUIGatWindow;
        
        private UIMerarbeidovertidWindow mUIMerarbeidovertidWindow;
        
        private UIRekalkuleringWindow mUIRekalkuleringWindow;
        
        private UIFraværsregistreringWindow mUIFraværsregistreringWindow;
        
        private UIGlobaltoppsettWindow mUIGlobaltoppsettWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '2,50' cell equals '2,50'
        /// </summary>
        public string UIItem250CellText = "2,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '5,50' cell equals '5,50'
        /// </summary>
        public string UIItem550CellText = "5,50";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '5,50' cell equals '8,00'
        /// </summary>
        public string UIItem550CellText = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '3,50'
        /// </summary>
        public string UIItem450CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '12,30' cell equals '4,50'
        /// </summary>
        public string UIItem1230CellText = "4,50";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '8,00'
        /// </summary>
        public string UIItem450CellText = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '4,50'
        /// </summary>
        public string UIItem450CellText = "4,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '12,30' cell equals '3,50'
        /// </summary>
        public string UIItem1230CellText = "3,50";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '12,50' cell equals '12,50'
        /// </summary>
        public string UIItem1250CellText = "12,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '5,50' cell equals '4,30'
        /// </summary>
        public string UIItem550CellText = "4,30";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '4,50'
        /// </summary>
        public string UIItem450CellText = "4,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '12,30' cell equals '12,30'
        /// </summary>
        public string UIItem1230CellText = "12,30";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '12,50'
        /// </summary>
        public string UIItem450CellText = "12,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,30' cell equals '4,30'
        /// </summary>
        public string UIItem430CellText = "4,30";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '27.10.2023' cell equals '27.10.2023'
        /// </summary>
        public string UIItem27102023CellText = "27.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '-8' cell equals '-8'
        /// </summary>
        public string UIItem8CellText = "-8";
        
        /// <summary>
        /// Verify that the 'Text' property of '-8' cell equals '-8'
        /// </summary>
        public string UIItem8Cell1Text = "-8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '8,00'
        /// </summary>
        public string UIItem450CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '5,50' cell equals '8,00'
        /// </summary>
        public string UIItem550CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditOvertimeRadioButtonsStep15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditOvertimeRadioButtonsStep15Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Kalkuler i registreringsrekkefølge.' radio button
        /// </summary>
        public bool UIKalkuleriregistrerinRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditOvertimeRadioButtonsStep16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditOvertimeRadioButtonsStep16Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Kalkuler i kronologisk rekkefølge.' radio button
        /// </summary>
        public bool UIKalkulerikronologiskRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '2,50'
        /// </summary>
        public string UIItem450CellText = "2,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '12,30' cell equals '5,50'
        /// </summary>
        public string UIItem1230CellText = "5,50";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell2Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '12,50' cell equals '7,00'
        /// </summary>
        public string UIItem1250CellText = "7,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '5,50' cell equals '1,00'
        /// </summary>
        public string UIItem550CellText = "1,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell2Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '12,50' cell equals '3,50'
        /// </summary>
        public string UIItem1250CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '5,50' cell equals '4,50'
        /// </summary>
        public string UIItem550CellText = "4,50";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep13org'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep13orgExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,50' cell equals '7,00'
        /// </summary>
        public string UIItem250CellText = "7,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '1,00' cell equals '1,00'
        /// </summary>
        public string UIItem100CellText = "1,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep15org'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep15orgExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,50' cell equals '3,50'
        /// </summary>
        public string UIItem250CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '1,00' cell equals '4,50'
        /// </summary>
        public string UIItem100CellText = "4,50";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UICenterPanelDayDockPanel UICenterPanelDayDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayDockPanel == null))
                {
                    this.mUICenterPanelDayDockPanel = new UICenterPanelDayDockPanel(this);
                }
                return this.mUICenterPanelDayDockPanel;
            }
        }
        
        public UIRibbonControlRibbon UIRibbonControlRibbon
        {
            get
            {
                if ((this.mUIRibbonControlRibbon == null))
                {
                    this.mUIRibbonControlRibbon = new UIRibbonControlRibbon(this);
                }
                return this.mUIRibbonControlRibbon;
            }
        }
        
        public UIBottomPanelDockPanel UIBottomPanelDockPanel
        {
            get
            {
                if ((this.mUIBottomPanelDockPanel == null))
                {
                    this.mUIBottomPanelDockPanel = new UIBottomPanelDockPanel(this);
                }
                return this.mUIBottomPanelDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UICenterPanelDayDockPanel mUICenterPanelDayDockPanel;
        
        private UIRibbonControlRibbon mUIRibbonControlRibbon;
        
        private UIBottomPanelDockPanel mUIBottomPanelDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDay";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom : DXTestControl
    {
        
        public UIControlContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UICenterPanelDayWrappeDockPanel UICenterPanelDayWrappeDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayWrappeDockPanel == null))
                {
                    this.mUICenterPanelDayWrappeDockPanel = new UICenterPanelDayWrappeDockPanel(this);
                }
                return this.mUICenterPanelDayWrappeDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UICenterPanelDayWrappeDockPanel mUICenterPanelDayWrappeDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayWrappeDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayWrappeDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayWrapper";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIFriVikar00167770770FDockPanel UIFriVikar00167770770FDockPanel
        {
            get
            {
                if ((this.mUIFriVikar00167770770FDockPanel == null))
                {
                    this.mUIFriVikar00167770770FDockPanel = new UIFriVikar00167770770FDockPanel(this);
                }
                return this.mUIFriVikar00167770770FDockPanel;
            }
        }
        
        public UIAften00167770770FalsDockPanel UIAften00167770770FalsDockPanel
        {
            get
            {
                if ((this.mUIAften00167770770FalsDockPanel == null))
                {
                    this.mUIAften00167770770FalsDockPanel = new UIAften00167770770FalsDockPanel(this);
                }
                return this.mUIAften00167770770FalsDockPanel;
            }
        }
        
        public UIDag00167770770FalseDockPanel UIDag00167770770FalseDockPanel
        {
            get
            {
                if ((this.mUIDag00167770770FalseDockPanel == null))
                {
                    this.mUIDag00167770770FalseDockPanel = new UIDag00167770770FalseDockPanel(this);
                }
                return this.mUIDag00167770770FalseDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIFriVikar00167770770FDockPanel mUIFriVikar00167770770FDockPanel;
        
        private UIAften00167770770FalsDockPanel mUIAften00167770770FalsDockPanel;
        
        private UIDag00167770770FalseDockPanel mUIDag00167770770FalseDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFriVikar00167770770FDockPanel : DXDockPanel
    {
        
        public UIFriVikar00167770770FDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Fri / Vikar;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom1 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom1(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom1 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom1 : DXTestControl
    {
        
        public UIControlContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Fri / Vikar;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcFreeColumnTable UIGcFreeColumnTable
        {
            get
            {
                if ((this.mUIGcFreeColumnTable == null))
                {
                    this.mUIGcFreeColumnTable = new UIGcFreeColumnTable(this);
                }
                return this.mUIGcFreeColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcFreeColumnTable mUIGcFreeColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcFreeColumnTable : DXGrid
    {
        
        public UIGcFreeColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusStandard355Cell
        {
            get
            {
                if ((this.mUITurnusStandard355Cell == null))
                {
                    this.mUITurnusStandard355Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusStandard355Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumnGridControlCell[View]gvFreeColumn[Row]2[Column]colEmployeeName";
                    this.mUITurnusStandard355Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusStandard355Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusStandard355Cell;
            }
        }
        
        public DXCell UITurnusStandard355Cell1
        {
            get
            {
                if ((this.mUITurnusStandard355Cell1 == null))
                {
                    this.mUITurnusStandard355Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusStandard355Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumnGridControlCell[View]gvFreeColumn[Row]1[Column]colEmployeeName";
                    this.mUITurnusStandard355Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusStandard355Cell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusStandard355Cell1;
            }
        }
        
        public DXCell UITurnusStandard355Cell2
        {
            get
            {
                if ((this.mUITurnusStandard355Cell2 == null))
                {
                    this.mUITurnusStandard355Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusStandard355Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumnGridControlCell[View]gvFreeColumn[Row]3[Column]colEmployeeName";
                    this.mUITurnusStandard355Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusStandard355Cell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusStandard355Cell2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusStandard355Cell;
        
        private DXCell mUITurnusStandard355Cell1;
        
        private DXCell mUITurnusStandard355Cell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAften00167770770FalsDockPanel : DXDockPanel
    {
        
        public UIAften00167770770FalsDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Aften;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom2 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom2(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom2 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom2 : DXTestControl
    {
        
        public UIControlContainerCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Aften;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcDayColumnTable UIGcDayColumnTable
        {
            get
            {
                if ((this.mUIGcDayColumnTable == null))
                {
                    this.mUIGcDayColumnTable = new UIGcDayColumnTable(this);
                }
                return this.mUIGcDayColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDayColumnTable mUIGcDayColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDayColumnTable : DXGrid
    {
        
        public UIGcDayColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusStandard355Cell
        {
            get
            {
                if ((this.mUITurnusStandard355Cell == null))
                {
                    this.mUITurnusStandard355Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusStandard355Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]1[Column]colEmployeeName";
                    this.mUITurnusStandard355Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusStandard355Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusStandard355Cell;
            }
        }
        
        public DXCell UITurnusStandard355Cell1
        {
            get
            {
                if ((this.mUITurnusStandard355Cell1 == null))
                {
                    this.mUITurnusStandard355Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusStandard355Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]0[Column]colEmployeeName";
                    this.mUITurnusStandard355Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusStandard355Cell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusStandard355Cell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusStandard355Cell;
        
        private DXCell mUITurnusStandard355Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDag00167770770FalseDockPanel : DXDockPanel
    {
        
        public UIDag00167770770FalseDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom3 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom3(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom3 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom3 : DXTestControl
    {
        
        public UIControlContainerCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcDayColumnTable1 UIGcDayColumnTable
        {
            get
            {
                if ((this.mUIGcDayColumnTable == null))
                {
                    this.mUIGcDayColumnTable = new UIGcDayColumnTable1(this);
                }
                return this.mUIGcDayColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDayColumnTable1 mUIGcDayColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDayColumnTable1 : DXGrid
    {
        
        public UIGcDayColumnTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusStandard355Cell
        {
            get
            {
                if ((this.mUITurnusStandard355Cell == null))
                {
                    this.mUITurnusStandard355Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusStandard355Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]2[Column]colEmployeeName";
                    this.mUITurnusStandard355Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusStandard355Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusStandard355Cell;
            }
        }
        
        public DXCell UITurnusStandard355Cell1
        {
            get
            {
                if ((this.mUITurnusStandard355Cell1 == null))
                {
                    this.mUITurnusStandard355Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusStandard355Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]1[Column]colEmployeeName";
                    this.mUITurnusStandard355Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusStandard355Cell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusStandard355Cell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusStandard355Cell;
        
        private DXCell mUITurnusStandard355Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonControlRibbon : DXRibbon
    {
        
        public UIRibbonControlRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRpMainMenuRibbonPage UIRpMainMenuRibbonPage
        {
            get
            {
                if ((this.mUIRpMainMenuRibbonPage == null))
                {
                    this.mUIRpMainMenuRibbonPage = new UIRpMainMenuRibbonPage(this);
                }
                return this.mUIRpMainMenuRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpMainMenuRibbonPage mUIRpMainMenuRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpMainMenuRibbonPage : DXRibbonPage
    {
        
        public UIRpMainMenuRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpMainMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGrpDevianceRibbonPageGroup UIGrpDevianceRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpDevianceRibbonPageGroup == null))
                {
                    this.mUIGrpDevianceRibbonPageGroup = new UIGrpDevianceRibbonPageGroup(this);
                }
                return this.mUIGrpDevianceRibbonPageGroup;
            }
        }
        
        public UIGrpMiscRibbonPageGroup UIGrpMiscRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpMiscRibbonPageGroup == null))
                {
                    this.mUIGrpMiscRibbonPageGroup = new UIGrpMiscRibbonPageGroup(this);
                }
                return this.mUIGrpMiscRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpDevianceRibbonPageGroup mUIGrpDevianceRibbonPageGroup;
        
        private UIGrpMiscRibbonPageGroup mUIGrpMiscRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpDevianceRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpDevianceRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpDeviance";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIEkstraRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIEkstraRibbonBaseButtonItem == null))
                {
                    this.mUIEkstraRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIEkstraRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnExtra";
                    this.mUIEkstraRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIEkstraRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIEkstraRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIForskjøvetvaktRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIForskjøvetvaktRibbonBaseButtonItem == null))
                {
                    this.mUIForskjøvetvaktRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIForskjøvetvaktRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnRemanage";
                    this.mUIForskjøvetvaktRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIForskjøvetvaktRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIForskjøvetvaktRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIFraværRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIFraværRibbonBaseButtonItem == null))
                {
                    this.mUIFraværRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIFraværRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnAbsence";
                    this.mUIFraværRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIFraværRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIFraværRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIEkstraRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIForskjøvetvaktRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIFraværRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpMiscRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpMiscRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpMisc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UISlettRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUISlettRibbonBaseButtonItem == null))
                {
                    this.mUISlettRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnDelete";
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUISlettRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISlettRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUISlettRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBottomPanelDockPanel : DXDockPanel
    {
        
        public UIBottomPanelDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BottomPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIFraværDockPanel UIFraværDockPanel
        {
            get
            {
                if ((this.mUIFraværDockPanel == null))
                {
                    this.mUIFraværDockPanel = new UIFraværDockPanel(this);
                }
                return this.mUIFraværDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIFraværDockPanel mUIFraværDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFraværDockPanel : DXDockPanel
    {
        
        public UIFraværDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Fravær";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom4 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom4(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom4 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom4 : DXTestControl
    {
        
        public UIControlContainerCustom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FraværControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcAbsenceColumnTable UIGcAbsenceColumnTable
        {
            get
            {
                if ((this.mUIGcAbsenceColumnTable == null))
                {
                    this.mUIGcAbsenceColumnTable = new UIGcAbsenceColumnTable(this);
                }
                return this.mUIGcAbsenceColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAbsenceColumnTable mUIGcAbsenceColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAbsenceColumnTable : DXGrid
    {
        
        public UIGcAbsenceColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusStandard355Cell
        {
            get
            {
                if ((this.mUITurnusStandard355Cell == null))
                {
                    this.mUITurnusStandard355Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusStandard355Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceColumnGridControlCell[View]gvAbsenceColumn[Row]0[Column]gccFullName";
                    this.mUITurnusStandard355Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusStandard355Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusStandard355Cell;
            }
        }
        
        public DXCell UIItem27102023DCell
        {
            get
            {
                if ((this.mUIItem27102023DCell == null))
                {
                    this.mUIItem27102023DCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem27102023DCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceColumnGridControlCell[View]gvAbsenceColumn[Row]0[Column]gccAbsencePeriod" +
                        "";
                    this.mUIItem27102023DCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem27102023DCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem27102023DCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusStandard355Cell;
        
        private DXCell mUIItem27102023DCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMerarbeidovertidWindow : DXWindow
    {
        
        public UIMerarbeidovertidWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Merarbeid / overtid";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UIPanClientClient UIPanClientClient
        {
            get
            {
                if ((this.mUIPanClientClient == null))
                {
                    this.mUIPanClientClient = new UIPanClientClient(this);
                }
                return this.mUIPanClientClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanClientClient mUIPanClientClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanClientClient : DXTestControl
    {
        
        public UIPanClientClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panClient";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITcClientTabList UITcClientTabList
        {
            get
            {
                if ((this.mUITcClientTabList == null))
                {
                    this.mUITcClientTabList = new UITcClientTabList(this);
                }
                return this.mUITcClientTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcClientTabList mUITcClientTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcClientTabList : DXTestControl
    {
        
        public UITcClientTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcClient";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITpMainClient UITpMainClient
        {
            get
            {
                if ((this.mUITpMainClient == null))
                {
                    this.mUITpMainClient = new UITpMainClient(this);
                }
                return this.mUITpMainClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpMainClient mUITpMainClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpMainClient : DXTestControl
    {
        
        public UITpMainClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UIGcShiftDetailsClient UIGcShiftDetailsClient
        {
            get
            {
                if ((this.mUIGcShiftDetailsClient == null))
                {
                    this.mUIGcShiftDetailsClient = new UIGcShiftDetailsClient(this);
                }
                return this.mUIGcShiftDetailsClient;
            }
        }
        
        public UITcExtraDetailTabList UITcExtraDetailTabList
        {
            get
            {
                if ((this.mUITcExtraDetailTabList == null))
                {
                    this.mUITcExtraDetailTabList = new UITcExtraDetailTabList(this);
                }
                return this.mUITcExtraDetailTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIGcShiftDetailsClient mUIGcShiftDetailsClient;
        
        private UITcExtraDetailTabList mUITcExtraDetailTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcShiftDetailsClient : DXTestControl
    {
        
        public UIGcShiftDetailsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITcRegistrationTypeTabList UITcRegistrationTypeTabList
        {
            get
            {
                if ((this.mUITcRegistrationTypeTabList == null))
                {
                    this.mUITcRegistrationTypeTabList = new UITcRegistrationTypeTabList(this);
                }
                return this.mUITcRegistrationTypeTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcRegistrationTypeTabList mUITcRegistrationTypeTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcRegistrationTypeTabList : DXTestControl
    {
        
        public UITcRegistrationTypeTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcRegistrationType";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITpNewShiftClient UITpNewShiftClient
        {
            get
            {
                if ((this.mUITpNewShiftClient == null))
                {
                    this.mUITpNewShiftClient = new UITpNewShiftClient(this);
                }
                return this.mUITpNewShiftClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpNewShiftClient mUITpNewShiftClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpNewShiftClient : DXTestControl
    {
        
        public UITpNewShiftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpNewShift";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UICbShiftCodeLookUpEdit
        {
            get
            {
                if ((this.mUICbShiftCodeLookUpEdit == null))
                {
                    this.mUICbShiftCodeLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUICbShiftCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "cbShiftCode";
                    this.mUICbShiftCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    this.mUICbShiftCodeLookUpEdit.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUICbShiftCodeLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUICbShiftCodeLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcExtraDetailTabList : DXTestControl
    {
        
        public UITcExtraDetailTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcExtraDetail";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITpSalaryCalcClient UITpSalaryCalcClient
        {
            get
            {
                if ((this.mUITpSalaryCalcClient == null))
                {
                    this.mUITpSalaryCalcClient = new UITpSalaryCalcClient(this);
                }
                return this.mUITpSalaryCalcClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpSalaryCalcClient mUITpSalaryCalcClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpSalaryCalcClient : DXTestControl
    {
        
        public UITpSalaryCalcClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpSalaryCalc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UIGcAccountingLinesTable UIGcAccountingLinesTable
        {
            get
            {
                if ((this.mUIGcAccountingLinesTable == null))
                {
                    this.mUIGcAccountingLinesTable = new UIGcAccountingLinesTable(this);
                }
                return this.mUIGcAccountingLinesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAccountingLinesTable mUIGcAccountingLinesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAccountingLinesTable : DXGrid
    {
        
        public UIGcAccountingLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem250Cell
        {
            get
            {
                if ((this.mUIItem250Cell == null))
                {
                    this.mUIItem250Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem250Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]1[Column]colAmount";
                    this.mUIItem250Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem250Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem250Cell;
            }
        }
        
        public DXCell UIItem550Cell
        {
            get
            {
                if ((this.mUIItem550Cell == null))
                {
                    this.mUIItem550Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem550Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]0[Column]colAmount";
                    this.mUIItem550Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem550Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem550Cell;
            }
        }
        
        public DXCell UIItem1250Cell
        {
            get
            {
                if ((this.mUIItem1250Cell == null))
                {
                    this.mUIItem1250Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1250Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]3[Column]colAmount";
                    this.mUIItem1250Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1250Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem1250Cell;
            }
        }
        
        public DXCell UIItem200TimelønnCell
        {
            get
            {
                if ((this.mUIItem200TimelønnCell == null))
                {
                    this.mUIItem200TimelønnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]0[Column]colCostType";
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem200TimelønnCell;
            }
        }
        
        public DXCell UIItem800Cell
        {
            get
            {
                if ((this.mUIItem800Cell == null))
                {
                    this.mUIItem800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]0[Column]colEFOHours";
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem800Cell;
            }
        }
        
        public DXCell UIItem200TimelønnCell1
        {
            get
            {
                if ((this.mUIItem200TimelønnCell1 == null))
                {
                    this.mUIItem200TimelønnCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]1[Column]colCostType";
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell1.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem200TimelønnCell1;
            }
        }
        
        public DXCell UIItem310Overtid100Cell
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell == null))
                {
                    this.mUIItem310Overtid100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]2[Column]colCostType";
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell;
            }
        }
        
        public DXCell UIItem100Cell
        {
            get
            {
                if ((this.mUIItem100Cell == null))
                {
                    this.mUIItem100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]2[Column]colAmount";
                    this.mUIItem100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem100Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem100Cell;
            }
        }
        
        public DXCell UIItem200TimelønnCell2
        {
            get
            {
                if ((this.mUIItem200TimelønnCell2 == null))
                {
                    this.mUIItem200TimelønnCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]3[Column]colCostType";
                    this.mUIItem200TimelønnCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell2.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem200TimelønnCell2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem250Cell;
        
        private DXCell mUIItem550Cell;
        
        private DXCell mUIItem1250Cell;
        
        private DXCell mUIItem200TimelønnCell;
        
        private DXCell mUIItem800Cell;
        
        private DXCell mUIItem200TimelønnCell1;
        
        private DXCell mUIItem310Overtid100Cell;
        
        private DXCell mUIItem100Cell;
        
        private DXCell mUIItem200TimelønnCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRekalkuleringWindow : DXWindow
    {
        
        public UIRekalkuleringWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Rekalkulering";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public UIGcRecalculationTable UIGcRecalculationTable
        {
            get
            {
                if ((this.mUIGcRecalculationTable == null))
                {
                    this.mUIGcRecalculationTable = new UIGcRecalculationTable(this);
                }
                return this.mUIGcRecalculationTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRecalculationTable mUIGcRecalculationTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRecalculationTable : DXGrid
    {
        
        public UIGcRecalculationTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculation";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem200TimelønnCell
        {
            get
            {
                if ((this.mUIItem200TimelønnCell == null))
                {
                    this.mUIItem200TimelønnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]0[Column]colCostType";
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem200TimelønnCell;
            }
        }
        
        public DXCell UIItem450Cell
        {
            get
            {
                if ((this.mUIItem450Cell == null))
                {
                    this.mUIItem450Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem450Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]0[Column]colAmount";
                    this.mUIItem450Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem450Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem450Cell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell == null))
                {
                    this.mUIItem310Overtid100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]1[Column]colCostType";
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell;
            }
        }
        
        public DXCell UIItem1230Cell
        {
            get
            {
                if ((this.mUIItem1230Cell == null))
                {
                    this.mUIItem1230Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1230Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]1[Column]colAmount";
                    this.mUIItem1230Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1230Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem1230Cell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell1
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell1 == null))
                {
                    this.mUIItem310Overtid100Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]3[Column]colCostType";
                    this.mUIItem310Overtid100Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell1;
            }
        }
        
        public DXCell UIItem430Cell
        {
            get
            {
                if ((this.mUIItem430Cell == null))
                {
                    this.mUIItem430Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem430Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]3[Column]colAmount";
                    this.mUIItem430Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem430Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem430Cell;
            }
        }
        
        public DXCell UIItem800Cell
        {
            get
            {
                if ((this.mUIItem800Cell == null))
                {
                    this.mUIItem800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]0[Column]colEFOHours";
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem800Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem200TimelønnCell;
        
        private DXCell mUIItem450Cell;
        
        private DXCell mUIItem310Overtid100Cell;
        
        private DXCell mUIItem1230Cell;
        
        private DXCell mUIItem310Overtid100Cell1;
        
        private DXCell mUIItem430Cell;
        
        private DXCell mUIItem800Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFraværsregistreringWindow : DXWindow
    {
        
        public UIFraværsregistreringWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Fraværsregistrering";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIPnlShiftManagementClient UIPnlShiftManagementClient
        {
            get
            {
                if ((this.mUIPnlShiftManagementClient == null))
                {
                    this.mUIPnlShiftManagementClient = new UIPnlShiftManagementClient(this);
                }
                return this.mUIPnlShiftManagementClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlShiftManagementClient mUIPnlShiftManagementClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlShiftManagementClient : DXTestControl
    {
        
        public UIPnlShiftManagementClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlShiftManagement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UISccShiftManagementSplitContainerControl UISccShiftManagementSplitContainerControl
        {
            get
            {
                if ((this.mUISccShiftManagementSplitContainerControl == null))
                {
                    this.mUISccShiftManagementSplitContainerControl = new UISccShiftManagementSplitContainerControl(this);
                }
                return this.mUISccShiftManagementSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UISccShiftManagementSplitContainerControl mUISccShiftManagementSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISccShiftManagementSplitContainerControl : DXSplitContainerControl
    {
        
        public UISccShiftManagementSplitContainerControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "sccShiftManagement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSplitContainerControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UISplitGroupPanelClient UISplitGroupPanelClient
        {
            get
            {
                if ((this.mUISplitGroupPanelClient == null))
                {
                    this.mUISplitGroupPanelClient = new UISplitGroupPanelClient(this);
                }
                return this.mUISplitGroupPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UISplitGroupPanelClient mUISplitGroupPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISplitGroupPanelClient : DXTestControl
    {
        
        public UISplitGroupPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "sccShiftManagementSplitGroupPanel[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIGrcSalaryClient UIGrcSalaryClient
        {
            get
            {
                if ((this.mUIGrcSalaryClient == null))
                {
                    this.mUIGrcSalaryClient = new UIGrcSalaryClient(this);
                }
                return this.mUIGrcSalaryClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrcSalaryClient mUIGrcSalaryClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrcSalaryClient : DXTestControl
    {
        
        public UIGrcSalaryClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grcSalary";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UITcDeductPaymentTabList UITcDeductPaymentTabList
        {
            get
            {
                if ((this.mUITcDeductPaymentTabList == null))
                {
                    this.mUITcDeductPaymentTabList = new UITcDeductPaymentTabList(this);
                }
                return this.mUITcDeductPaymentTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcDeductPaymentTabList mUITcDeductPaymentTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcDeductPaymentTabList : DXTestControl
    {
        
        public UITcDeductPaymentTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcDeductPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UITabDeductPaymentClient UITabDeductPaymentClient
        {
            get
            {
                if ((this.mUITabDeductPaymentClient == null))
                {
                    this.mUITabDeductPaymentClient = new UITabDeductPaymentClient(this);
                }
                return this.mUITabDeductPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITabDeductPaymentClient mUITabDeductPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabDeductPaymentClient : DXTestControl
    {
        
        public UITabDeductPaymentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabDeductPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIGcPaymentLinesTable UIGcPaymentLinesTable
        {
            get
            {
                if ((this.mUIGcPaymentLinesTable == null))
                {
                    this.mUIGcPaymentLinesTable = new UIGcPaymentLinesTable(this);
                }
                return this.mUIGcPaymentLinesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcPaymentLinesTable mUIGcPaymentLinesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcPaymentLinesTable : DXGrid
    {
        
        public UIGcPaymentLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem27102023Cell
        {
            get
            {
                if ((this.mUIItem27102023Cell == null))
                {
                    this.mUIItem27102023Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem27102023Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]0[Column]gccPlDate";
                    this.mUIItem27102023Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem27102023Cell.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem27102023Cell;
            }
        }
        
        public DXCell UIItem200TimelønnCell
        {
            get
            {
                if ((this.mUIItem200TimelønnCell == null))
                {
                    this.mUIItem200TimelønnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]0[Column]gccPlTT";
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem200TimelønnCell;
            }
        }
        
        public DXCell UIItem8Cell
        {
            get
            {
                if ((this.mUIItem8Cell == null))
                {
                    this.mUIItem8Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem8Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]0[Column]gccPlHours";
                    this.mUIItem8Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem8Cell.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem8Cell;
            }
        }
        
        public DXCell UIItem8Cell1
        {
            get
            {
                if ((this.mUIItem8Cell1 == null))
                {
                    this.mUIItem8Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem8Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]0[Column]gccPlEfoHours";
                    this.mUIItem8Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem8Cell1.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem8Cell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem27102023Cell;
        
        private DXCell mUIItem200TimelønnCell;
        
        private DXCell mUIItem8Cell;
        
        private DXCell mUIItem8Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGlobaltoppsettWindow : WinWindow
    {
        
        public UIGlobaltoppsettWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Globalt oppsett";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmSetup";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIRekkefølgepåkalkulerClient UIRekkefølgepåkalkulerClient
        {
            get
            {
                if ((this.mUIRekkefølgepåkalkulerClient == null))
                {
                    this.mUIRekkefølgepåkalkulerClient = new UIRekkefølgepåkalkulerClient(this);
                }
                return this.mUIRekkefølgepåkalkulerClient;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIRekkefølgepåkalkulerClient mUIRekkefølgepåkalkulerClient;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxTreeList";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public WinClient UIGlobaltoppsettClient
        {
            get
            {
                if ((this.mUIGlobaltoppsettClient == null))
                {
                    this.mUIGlobaltoppsettClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIGlobaltoppsettClient.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUIGlobaltoppsettClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIGlobaltoppsettClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRekkefølgepåkalkulerClient : WinClient
    {
        
        public UIRekkefølgepåkalkulerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Rekkefølge på kalkulering av overtid";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIKalkuleriregistrerinRadioButton
        {
            get
            {
                if ((this.mUIKalkuleriregistrerinRadioButton == null))
                {
                    this.mUIKalkuleriregistrerinRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIKalkuleriregistrerinRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Kalkuler i registreringsrekkefølge.";
                    this.mUIKalkuleriregistrerinRadioButton.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUIKalkuleriregistrerinRadioButton;
            }
        }
        
        public WinRadioButton UIKalkulerikronologiskRadioButton
        {
            get
            {
                if ((this.mUIKalkulerikronologiskRadioButton == null))
                {
                    this.mUIKalkulerikronologiskRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIKalkulerikronologiskRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Kalkuler i kronologisk rekkefølge.";
                    this.mUIKalkulerikronologiskRadioButton.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUIKalkulerikronologiskRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIKalkuleriregistrerinRadioButton;
        
        private WinRadioButton mUIKalkulerikronologiskRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public UIGlobaltoppsettClient UIGlobaltoppsettClient
        {
            get
            {
                if ((this.mUIGlobaltoppsettClient == null))
                {
                    this.mUIGlobaltoppsettClient = new UIGlobaltoppsettClient(this);
                }
                return this.mUIGlobaltoppsettClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGlobaltoppsettClient mUIGlobaltoppsettClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGlobaltoppsettClient : WinClient
    {
        
        public UIGlobaltoppsettClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public WinButton UILagreButton
        {
            get
            {
                if ((this.mUILagreButton == null))
                {
                    this.mUILagreButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILagreButton.SearchProperties[WinButton.PropertyNames.Name] = "Lagre";
                    this.mUILagreButton.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUILagreButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILagreButton;
        #endregion
    }
}
