// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _028_Test_Helligdagsberegning_kalenderplan.UIMapVS2017Classes
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v19_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMapVS2017
    {
        
        /// <summary>
        /// AddRavelliShifts - Use 'AddRavelliShiftsParams' to pass parameters into this method.
        /// </summary>
        public void AddRavelliShifts()
        {
            #region Variable Declarations
            DXCell uIItemCell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell12;
            DXTextEdit uIRow4ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit;
            DXCell uIItemCell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell13;
            DXTextEdit uIRow4ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit1;
            DXCell uIItemCell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell14;
            DXTextEdit uIRow4ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit2;
            DXCell uIItemCell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell15;
            DXTextEdit uIRow4ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit3;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell12, new Point(13, 8));

            // Click cell
            Mouse.Click(uIItemCell12, new Point(13, 8));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_3' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit, this.AddRavelliShiftsParams.UIRow4ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell13, new Point(16, 8));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_4' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit1, this.AddRavelliShiftsParams.UIRow4ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell14, new Point(17, 4));

            // Click cell
            Mouse.Click(uIItemCell14, new Point(17, 10));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit2, this.AddRavelliShiftsParams.UIRow4ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell15, new Point(10, 11));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit3, this.AddRavelliShiftsParams.UIRow4ColumnRosterCellEdit3SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddRavelliShifts2 - Use 'AddRavelliShifts2Params' to pass parameters into this method.
        /// </summary>
        public void AddRavelliShifts2()
        {
            #region Variable Declarations
            DXCell uIItemCell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell17;
            DXTextEdit uIRow4ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit4;
            DXCell uIItemCell110 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell110;
            DXTextEdit uIRow4ColumnRosterCellEdit21 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit21;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell17, new Point(15, 6));

            // Click cell
            Mouse.Click(uIItemCell17, new Point(15, 6));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_33' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit4, this.AddRavelliShifts2Params.UIRow4ColumnRosterCellEdit4SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell110, new Point(21, 10));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_34' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit21, this.AddRavelliShifts2Params.UIRow4ColumnRosterCellEdit21SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// CheckAfterEditDahlinValidPeriods - Use 'CheckAfterEditDahlinValidPeriodsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAfterEditDahlinValidPeriods()
        {
            #region Variable Declarations
            DXCell uIDahlinMartinCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDahlinMartinCell;
            DXCell uIItem10av10Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem10av10Cell1;
            DXCell uIItem4av4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem4av4Cell1;
            #endregion

            // Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
            Assert.AreEqual(this.CheckAfterEditDahlinValidPeriodsExpectedValues.UIDahlinMartinCellText, uIDahlinMartinCell.Text);

            // Verify that the 'Text' property of '10 av 10' cell equals '6 av 10'
            Assert.AreEqual(this.CheckAfterEditDahlinValidPeriodsExpectedValues.UIItem10av10Cell1Text, uIItem10av10Cell1.Text);

            // Verify that the 'Text' property of '4 av 4' cell equals '2 av 4'
            Assert.AreEqual(this.CheckAfterEditDahlinValidPeriodsExpectedValues.UIItem4av4Cell1Text, uIItem4av4Cell1.Text);
        }
        
        /// <summary>
        /// CheckAfterEditRavelliNshifts - Use 'CheckAfterEditRavelliNshiftsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAfterEditRavelliNshifts()
        {
            #region Variable Declarations
            DXCell uIRavelliThomasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIRavelliThomasCell;
            DXCell uIItem4av10Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem4av10Cell1;
            DXCell uIItem3av4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem3av4Cell1;
            #endregion

            // Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Ravelli, Thomas'
            Assert.AreEqual(this.CheckAfterEditRavelliNshiftsExpectedValues.UIRavelliThomasCellText, uIRavelliThomasCell.Text);

            // Verify that the 'Text' property of '4 av 10' cell equals '2 av 10'
            Assert.AreEqual(this.CheckAfterEditRavelliNshiftsExpectedValues.UIItem4av10Cell1Text, uIItem4av10Cell1.Text);

            // Verify that the 'Text' property of '3 av 4' cell equals '2 av 4'
            Assert.AreEqual(this.CheckAfterEditRavelliNshiftsExpectedValues.UIItem3av4Cell1Text, uIItem3av4Cell1.Text);
        }
        
        /// <summary>
        /// CheckAfterEditRavelliNshifts2 - Use 'CheckAfterEditRavelliNshifts2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAfterEditRavelliNshifts2()
        {
            #region Variable Declarations
            DXCell uIRavelliThomasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIRavelliThomasCell;
            DXCell uIItem4av10Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem4av10Cell1;
            DXCell uIItem3av4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem3av4Cell1;
            #endregion

            // Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Ravelli, Thomas'
            Assert.AreEqual(this.CheckAfterEditRavelliNshifts2ExpectedValues.UIRavelliThomasCellText, uIRavelliThomasCell.Text);

            // Verify that the 'Text' property of '4 av 10' cell equals '4 av 10'
            Assert.AreEqual(this.CheckAfterEditRavelliNshifts2ExpectedValues.UIItem4av10Cell1Text, uIItem4av10Cell1.Text);

            // Verify that the 'Text' property of '3 av 4' cell equals '3 av 4'
            Assert.AreEqual(this.CheckAfterEditRavelliNshifts2ExpectedValues.UIItem3av4Cell1Text, uIItem3av4Cell1.Text);
        }
        
        /// <summary>
        /// CheckAfterEditRavelliNshifts3 - Use 'CheckAfterEditRavelliNshifts3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAfterEditRavelliNshifts3()
        {
            #region Variable Declarations
            DXCell uIRavelliThomasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIRavelliThomasCell;
            DXCell uIItem4av10Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem4av10Cell1;
            DXCell uIItem3av4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem3av4Cell1;
            #endregion

            // Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Ravelli, Thomas'
            Assert.AreEqual(this.CheckAfterEditRavelliNshifts3ExpectedValues.UIRavelliThomasCellText, uIRavelliThomasCell.Text);

            // Verify that the 'Text' property of '4 av 10' cell equals '8 av 10'
            Assert.AreEqual(this.CheckAfterEditRavelliNshifts3ExpectedValues.UIItem4av10Cell1Text, uIItem4av10Cell1.Text);

            // Verify that the 'Text' property of '3 av 4' cell equals '2 av 4'
            Assert.AreEqual(this.CheckAfterEditRavelliNshifts3ExpectedValues.UIItem3av4Cell1Text, uIItem3av4Cell1.Text);
        }
        
        /// <summary>
        /// CheckAfterInsertDahlinNshifts - Use 'CheckAfterInsertDahlinNshiftsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAfterInsertDahlinNshifts()
        {
            #region Variable Declarations
            DXCell uIDahlinMartinCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDahlinMartinCell;
            DXCell uIItem10av10Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem10av10Cell1;
            DXCell uIItem4av4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem4av4Cell1;
            #endregion

            // Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
            Assert.AreEqual(this.CheckAfterInsertDahlinNshiftsExpectedValues.UIDahlinMartinCellText, uIDahlinMartinCell.Text);

            // Verify that the 'Text' property of '10 av 10' cell equals '10 av 10'
            Assert.AreEqual(this.CheckAfterInsertDahlinNshiftsExpectedValues.UIItem10av10Cell1Text, uIItem10av10Cell1.Text);

            // Verify that the 'Text' property of '4 av 4' cell equals '4 av 4'
            Assert.AreEqual(this.CheckAfterInsertDahlinNshiftsExpectedValues.UIItem4av4Cell1Text, uIItem4av4Cell1.Text);
        }
        
        /// <summary>
        /// CheckAfterInsertDshifts - Use 'CheckAfterInsertDshiftsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAfterInsertDshifts()
        {
            #region Variable Declarations
            DXCell uIAnderssonKennethCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonKennethCell;
            DXCell uIItem0av10Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av10Cell1;
            DXCell uIItem0av4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av4Cell1;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Kenneth' cell equals 'Andersson, Kenneth'
            Assert.AreEqual(this.CheckAfterInsertDshiftsExpectedValues.UIAnderssonKennethCellText, uIAnderssonKennethCell.Text);

            // Verify that the 'Text' property of '0 av 10' cell equals '10 av 10'
            Assert.AreEqual(this.CheckAfterInsertDshiftsExpectedValues.UIItem0av10Cell1Text, uIItem0av10Cell1.Text);

            // Verify that the 'Text' property of '0 av 4' cell equals '4 av 4'
            Assert.AreEqual(this.CheckAfterInsertDshiftsExpectedValues.UIItem0av4Cell1Text, uIItem0av4Cell1.Text);
        }
        
        /// <summary>
        /// CheckAfterInsertRavelliNshifts - Use 'CheckAfterInsertRavelliNshiftsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAfterInsertRavelliNshifts()
        {
            #region Variable Declarations
            DXCell uIRavelliThomasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIRavelliThomasCell;
            DXCell uIItem4av10Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem4av10Cell1;
            DXCell uIItem3av4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem3av4Cell1;
            #endregion

            // Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Ravelli, Thomas'
            Assert.AreEqual(this.CheckAfterInsertRavelliNshiftsExpectedValues.UIRavelliThomasCellText, uIRavelliThomasCell.Text);

            // Verify that the 'Text' property of '4 av 10' cell equals '4 av 10'
            Assert.AreEqual(this.CheckAfterInsertRavelliNshiftsExpectedValues.UIItem4av10Cell1Text, uIItem4av10Cell1.Text);

            // Verify that the 'Text' property of '3 av 4' cell equals '3 av 4'
            Assert.AreEqual(this.CheckAfterInsertRavelliNshiftsExpectedValues.UIItem3av4Cell1Text, uIItem3av4Cell1.Text);
        }
        
        /// <summary>
        /// CheckAfterInsertRavelliNshifts2 - Use 'CheckAfterInsertRavelliNshifts2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAfterInsertRavelliNshifts2()
        {
            #region Variable Declarations
            DXCell uIRavelliThomasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIRavelliThomasCell;
            DXCell uIItem4av10Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem4av10Cell1;
            DXCell uIItem3av4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem3av4Cell1;
            #endregion

            // Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Ravelli, Thomas'
            Assert.AreEqual(this.CheckAfterInsertRavelliNshifts2ExpectedValues.UIRavelliThomasCellText, uIRavelliThomasCell.Text);

            // Verify that the 'Text' property of '4 av 10' cell equals '6 av 10'
            Assert.AreEqual(this.CheckAfterInsertRavelliNshifts2ExpectedValues.UIItem4av10Cell1Text, uIItem4av10Cell1.Text);

            // Verify that the 'Text' property of '3 av 4' cell equals '3 av 4'
            Assert.AreEqual(this.CheckAfterInsertRavelliNshifts2ExpectedValues.UIItem3av4Cell1Text, uIItem3av4Cell1.Text);
        }
        
        /// <summary>
        /// CheckAnderssonValues - Use 'CheckAnderssonValuesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAnderssonValues()
        {
            #region Variable Declarations
            DXCell uIAnderssonKennethCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonKennethCell;
            DXCell uIItem0av10Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av10Cell1;
            DXCell uIItem0av4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av4Cell1;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Kenneth' cell equals 'Andersson, Kenneth'
            Assert.AreEqual(this.CheckAnderssonValuesExpectedValues.UIAnderssonKennethCellText, uIAnderssonKennethCell.Text);

            // Verify that the 'Text' property of '0 av 10' cell equals '0 av 10'
            Assert.AreEqual(this.CheckAnderssonValuesExpectedValues.UIItem0av10Cell1Text, uIItem0av10Cell1.Text);

            // Verify that the 'Text' property of '0 av 4' cell equals '0 av 4'
            Assert.AreEqual(this.CheckAnderssonValuesExpectedValues.UIItem0av4Cell1Text, uIItem0av4Cell1.Text);
        }
        
        /// <summary>
        /// ChecksStep2 - Use 'ChecksStep2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ChecksStep2()
        {
            #region Variable Declarations
            DXCell uIF3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell;
            DXCell uIF3Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell1;
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            DXCell uIF3Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell2;
            DXCell uIF3Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell3;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXCell uIF3Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell4;
            DXCell uIF3Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell5;
            DXCell uIF3Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell6;
            DXCell uIF3Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell7;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIF3Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell8;
            DXCell uIF3Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell9;
            DXCell uIF3Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell10;
            DXCell uIF3Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell11;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXCell uIItemCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell7;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            DXCell uIItemCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell9;
            DXCell uIItemCell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell10;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell11;
            DXCell uIItemCell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell12;
            DXCell uIItemCell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell13;
            DXCell uIItemCell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell14;
            DXCell uIItemCell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell15;
            DXCell uIItemCell16 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell16;
            DXCell uIItemCell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell17;
            #endregion

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3CellValueAsString, uIF3Cell.ValueAsString, "Error F3 Andersson thursday");

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3Cell1ValueAsString, uIF3Cell1.ValueAsString, "Error F3 Andersson friday");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString, "Error F3 Andersson sunday");

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3Cell2ValueAsString, uIF3Cell2.ValueAsString, "Error F3 Andersson monday week 2");

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3Cell3ValueAsString, uIF3Cell3.ValueAsString, "Error F3 Andersson thursday week 2");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell1ValueAsString, uIItemCell1.ValueAsString, "Error F3 Andersson saturday week 5");

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3Cell4ValueAsString, uIF3Cell4.ValueAsString, "Error F3 Dahlin thursday line 1");

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3Cell5ValueAsString, uIF3Cell5.ValueAsString, "Error F3 Dahlin thursday line 2");

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3Cell6ValueAsString, uIF3Cell6.ValueAsString, "Error F3 Dahlin friday line 1");

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3Cell7ValueAsString, uIF3Cell7.ValueAsString, "Error F3 Dahlin friday line 2");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell2ValueAsString, uIItemCell2.ValueAsString, "Error F3 Dahlin sunday line 1");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell3ValueAsString, uIItemCell3.ValueAsString, "Error F3 Dahlin sunday line 2");

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3Cell8ValueAsString, uIF3Cell8.ValueAsString, "Error F3 Dahlin monday line 1 week 2");

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3Cell9ValueAsString, uIF3Cell9.ValueAsString, "Error F3 Dahlin monday line 2 week 2");

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3Cell10ValueAsString, uIF3Cell10.ValueAsString, "Error F3 Dahlin thursday line 1 week 3");

            // Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIF3Cell11ValueAsString, uIF3Cell11.ValueAsString, "Error F3 Dahlin thursday line 2 week 3");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell4ValueAsString, uIItemCell4.ValueAsString, "Error F3 Dahlin saturday line 1 week 5");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell5ValueAsString, uIItemCell5.ValueAsString, "Error F3 Dahlin saturday line 2 week 5");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell6ValueAsString, uIItemCell6.ValueAsString, "Error F3 Nilsson thursday");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell7ValueAsString, uIItemCell7.ValueAsString, "Error F3 Nilsson friday");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell8ValueAsString, uIItemCell8.ValueAsString, "Error F3 Nilsson sunday");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell9ValueAsString, uIItemCell9.ValueAsString, "Error F3 Nilsson monday week 2");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell10ValueAsString, uIItemCell10.ValueAsString, "Error F3 Nilsson thursday week 3");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell11ValueAsString, uIItemCell11.ValueAsString, "Error F3 Nilsson saturday week 4");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell12ValueAsString, uIItemCell12.ValueAsString, "Error F3 Ravelli thursday");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell13ValueAsString, uIItemCell13.ValueAsString, "Error F3 Ravelli friday");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell14ValueAsString, uIItemCell14.ValueAsString, "Error F3 Ravelli sunday");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell15ValueAsString, uIItemCell15.ValueAsString, "Error F3 Ravelli monday week 2");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell16ValueAsString, uIItemCell16.ValueAsString, "Error F3 Ravelli thursday week 3");

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.ChecksStep2ExpectedValues.UIItemCell17ValueAsString, uIItemCell17.ValueAsString, "Error F3 Ravelli saturday week 5");
        }
        
        /// <summary>
        /// DeleteRavelliShifts - Use 'DeleteRavelliShiftsParams' to pass parameters into this method.
        /// </summary>
        public void DeleteRavelliShifts()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIBarButtonItemLink7MenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIBarButtonItemLink7MenuBaseButtonItem;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXButton uIJAButton = this.UIGT4001InformasjonWindow.UIJAButton;
            #endregion

            // Click 'BarButtonItemLink[8]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink7MenuBaseButtonItem, new Point(97, 6));

            // Type '{Delete}' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.DeleteRavelliShiftsParams.UIGcRosterPlanTableSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// EditRavelliShifts - Use 'EditRavelliShiftsParams' to pass parameters into this method.
        /// </summary>
        public void EditRavelliShifts()
        {
            #region Variable Declarations
            DXCell uIItemCell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell12;
            DXTextEdit uIRow4ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit;
            DXCell uIItemCell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell13;
            DXTextEdit uIRow4ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit1;
            DXCell uIItemCell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell14;
            DXTextEdit uIRow4ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit2;
            DXCell uIItemCell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell15;
            DXTextEdit uIRow4ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit3;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell12, new Point(11, 10));

            // Click cell
            Mouse.Click(uIItemCell12, new Point(11, 10));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_3' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit, this.EditRavelliShiftsParams.UIRow4ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell12, new Point(11, 10));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_3' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit, this.EditRavelliShiftsParams.UIRow4ColumnRosterCellEditSendKeys1, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell13, new Point(16, 11));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_4' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit1, this.EditRavelliShiftsParams.UIRow4ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell14, new Point(16, 10));

            // Click cell
            Mouse.Click(uIItemCell14, new Point(16, 10));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit2, this.EditRavelliShiftsParams.UIRow4ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell15, new Point(14, 12));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit3, this.EditRavelliShiftsParams.UIRow4ColumnRosterCellEdit3SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// EditRavelliShifts2 - Use 'EditRavelliShifts2Params' to pass parameters into this method.
        /// </summary>
        public void EditRavelliShifts2()
        {
            #region Variable Declarations
            DXCell uIItemCell20 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell20;
            DXTextEdit uIRow4ColumnRosterCellEdit5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit5;
            DXCell uIItemCell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell12;
            DXTextEdit uIRow4ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit;
            DXCell uIItemCell21 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell21;
            DXTextEdit uIRow4ColumnRosterCellEdit41 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit41;
            DXCell uIItemCell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell14;
            DXTextEdit uIRow4ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit2;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell20, new Point(14, 9));

            // Click cell
            Mouse.Click(uIItemCell20, new Point(14, 9));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_2' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit5, this.EditRavelliShifts2Params.UIRow4ColumnRosterCellEdit5SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell12, new Point(16, 4));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_3' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit, this.EditRavelliShifts2Params.UIRow4ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell12, new Point(16, 4));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_3' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit, this.EditRavelliShifts2Params.UIRow4ColumnRosterCellEditSendKeys1, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell21, new Point(19, 9));

            // Click cell
            Mouse.Click(uIItemCell21, new Point(19, 9));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_5' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit41, this.EditRavelliShifts2Params.UIRow4ColumnRosterCellEdit41SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell14, new Point(20, 10));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit2, this.EditRavelliShifts2Params.UIRow4ColumnRosterCellEdit2SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// EditRavelliShifts3 - Use 'EditRavelliShifts3Params' to pass parameters into this method.
        /// </summary>
        public void EditRavelliShifts3()
        {
            #region Variable Declarations
            DXCell uIItemCell20 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell20;
            DXTextEdit uIRow4ColumnRosterCellEdit5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit5;
            DXCell uIItemCell21 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell21;
            DXTextEdit uIRow4ColumnRosterCellEdit41 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit41;
            DXCell uIItemCell22 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell22;
            DXTextEdit uIRow4ColumnRosterCellEdit22 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit22;
            DXCell uIItemCell31 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell31;
            DXTextEdit uIRow4ColumnRosterCellEdit31 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit31;
            DXCell uIItemCell41 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell41;
            DXTextEdit uIRow4ColumnRosterCellEdit42 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit42;
            DXCell uIItemCell51 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell51;
            DXTextEdit uIRow4ColumnRosterCellEdit51 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit51;
            DXCell uIItemCell61 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell61;
            DXTextEdit uIRow4ColumnRosterCellEdit6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit6;
            DXCell uIItemCell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell17;
            DXTextEdit uIRow4ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit4;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell20, new Point(19, 10));

            // Click cell
            Mouse.Click(uIItemCell20, new Point(19, 10));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_2' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit5, this.EditRavelliShifts3Params.UIRow4ColumnRosterCellEdit5SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell21, new Point(17, 8));

            // Click cell
            Mouse.Click(uIItemCell21, new Point(17, 8));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_5' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit41, this.EditRavelliShifts3Params.UIRow4ColumnRosterCellEdit41SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell22, new Point(20, 6));

            // Click cell
            Mouse.Click(uIItemCell22, new Point(20, 6));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_12' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit22, this.EditRavelliShifts3Params.UIRow4ColumnRosterCellEdit22SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell31, new Point(26, 6));

            // Click cell
            Mouse.Click(uIItemCell31, new Point(23, 12));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_16' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit31, this.EditRavelliShifts3Params.UIRow4ColumnRosterCellEdit31SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell41, new Point(11, 7));

            // Click cell
            Mouse.Click(uIItemCell41, new Point(11, 7));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_19' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit42, this.EditRavelliShifts3Params.UIRow4ColumnRosterCellEdit42SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell51, new Point(19, 9));

            // Click cell
            Mouse.Click(uIItemCell51, new Point(19, 9));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_26' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit51, this.EditRavelliShifts3Params.UIRow4ColumnRosterCellEdit51SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell61, new Point(16, 8));

            // Click cell
            Mouse.Click(uIItemCell61, new Point(16, 8));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_32' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit6, this.EditRavelliShifts3Params.UIRow4ColumnRosterCellEdit6SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell61, new Point(16, 8));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_32' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit6, this.EditRavelliShifts3Params.UIRow4ColumnRosterCellEdit6SendKeys1, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell17, new Point(17, 8));

            // Type 'n{Tab}' in '[Row]4[Column]RosterCell_33' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit4, this.EditRavelliShifts3Params.UIRow4ColumnRosterCellEdit4SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertDahlinLine2Nshifts - Use 'InsertDahlinLine2NshiftsParams' to pass parameters into this method.
        /// </summary>
        public void InsertDahlinLine2Nshifts()
        {
            #region Variable Declarations
            DXCell uIF3Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell11;
            DXTextEdit uIRow2ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit;
            DXCell uIItemCell18 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell18;
            DXTextEdit uIRow2ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit2;
            DXCell uIItemCell19 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell19;
            DXTextEdit uIRow2ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit3;
            #endregion

            // Click 'F3' cell
            Mouse.Click(uIF3Cell11, new Point(6, 7));

            // Click 'F3' cell
            Mouse.Click(uIF3Cell11, new Point(6, 7));

            // Type 'n{Tab}' in '[Row]2[Column]RosterCell_17' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit, this.InsertDahlinLine2NshiftsParams.UIRow2ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell18, new Point(13, 10));

            // Click cell
            Mouse.Click(uIItemCell18, new Point(13, 10));

            // Type 'n{Tab}' in '[Row]2[Column]RosterCell_27' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit2, this.InsertDahlinLine2NshiftsParams.UIRow2ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell19, new Point(15, 8));

            // Click cell
            Mouse.Click(uIItemCell19, new Point(15, 8));

            // Type 'n{Tab}' in '[Row]2[Column]RosterCell_34' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit3, this.InsertDahlinLine2NshiftsParams.UIRow2ColumnRosterCellEdit3SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RightClickRavelliCell
        /// </summary>
        public void RightClickRavelliCell()
        {
            #region Variable Declarations
            DXCell uIRavelliThomasCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIRavelliThomasCell1;
            #endregion

            // Right-Click 'Ravelli, Thomas' cell
            Mouse.Click(uIRavelliThomasCell1, MouseButtons.Right, ModifierKeys.None, new Point(118, 9));
        }
        
        /// <summary>
        /// SelectEmployees_step_2
        /// </summary>
        public void SelectEmployees_step_2()
        {
            #region Variable Declarations
            DXCell uIAnderssonKennethCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnderssonKennethCell;
            DXCell uIDahlinMartinCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIDahlinMartinCell;
            DXCell uIDahlinMartinCell1 = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIDahlinMartinCell1;
            DXCell uINilssonRolandCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UINilssonRolandCell;
            DXCell uIRavelliThomasCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIRavelliThomasCell;
            #endregion

            // Click 'Andersson, Kenneth' cell
            Mouse.Click(uIAnderssonKennethCell, new Point(25, 8));

            // Click 'Dahlin, Martin' cell while pressing Control
            Mouse.Click(uIDahlinMartinCell, MouseButtons.Left, ModifierKeys.Control, new Point(25, 9));

            // Click 'Dahlin, Martin' cell while pressing Control
            Mouse.Click(uIDahlinMartinCell1, MouseButtons.Left, ModifierKeys.Control, new Point(25, 7));

            // Click 'Nilsson, Roland' cell while pressing Control
            Mouse.Click(uINilssonRolandCell, MouseButtons.Left, ModifierKeys.Control, new Point(30, 8));

            // Click 'Ravelli, Thomas' cell while pressing Control
            Mouse.Click(uIRavelliThomasCell, MouseButtons.Left, ModifierKeys.Control, new Point(32, 8));
        }
        
        #region Properties
        public virtual AddRavelliShiftsParams AddRavelliShiftsParams
        {
            get
            {
                if ((this.mAddRavelliShiftsParams == null))
                {
                    this.mAddRavelliShiftsParams = new AddRavelliShiftsParams();
                }
                return this.mAddRavelliShiftsParams;
            }
        }
        
        public virtual AddRavelliShifts2Params AddRavelliShifts2Params
        {
            get
            {
                if ((this.mAddRavelliShifts2Params == null))
                {
                    this.mAddRavelliShifts2Params = new AddRavelliShifts2Params();
                }
                return this.mAddRavelliShifts2Params;
            }
        }
        
        public virtual CheckAfterEditDahlinValidPeriodsExpectedValues CheckAfterEditDahlinValidPeriodsExpectedValues
        {
            get
            {
                if ((this.mCheckAfterEditDahlinValidPeriodsExpectedValues == null))
                {
                    this.mCheckAfterEditDahlinValidPeriodsExpectedValues = new CheckAfterEditDahlinValidPeriodsExpectedValues();
                }
                return this.mCheckAfterEditDahlinValidPeriodsExpectedValues;
            }
        }
        
        public virtual CheckAfterEditRavelliNshiftsExpectedValues CheckAfterEditRavelliNshiftsExpectedValues
        {
            get
            {
                if ((this.mCheckAfterEditRavelliNshiftsExpectedValues == null))
                {
                    this.mCheckAfterEditRavelliNshiftsExpectedValues = new CheckAfterEditRavelliNshiftsExpectedValues();
                }
                return this.mCheckAfterEditRavelliNshiftsExpectedValues;
            }
        }
        
        public virtual CheckAfterEditRavelliNshifts2ExpectedValues CheckAfterEditRavelliNshifts2ExpectedValues
        {
            get
            {
                if ((this.mCheckAfterEditRavelliNshifts2ExpectedValues == null))
                {
                    this.mCheckAfterEditRavelliNshifts2ExpectedValues = new CheckAfterEditRavelliNshifts2ExpectedValues();
                }
                return this.mCheckAfterEditRavelliNshifts2ExpectedValues;
            }
        }
        
        public virtual CheckAfterEditRavelliNshifts3ExpectedValues CheckAfterEditRavelliNshifts3ExpectedValues
        {
            get
            {
                if ((this.mCheckAfterEditRavelliNshifts3ExpectedValues == null))
                {
                    this.mCheckAfterEditRavelliNshifts3ExpectedValues = new CheckAfterEditRavelliNshifts3ExpectedValues();
                }
                return this.mCheckAfterEditRavelliNshifts3ExpectedValues;
            }
        }
        
        public virtual CheckAfterInsertDahlinNshiftsExpectedValues CheckAfterInsertDahlinNshiftsExpectedValues
        {
            get
            {
                if ((this.mCheckAfterInsertDahlinNshiftsExpectedValues == null))
                {
                    this.mCheckAfterInsertDahlinNshiftsExpectedValues = new CheckAfterInsertDahlinNshiftsExpectedValues();
                }
                return this.mCheckAfterInsertDahlinNshiftsExpectedValues;
            }
        }
        
        public virtual CheckAfterInsertDshiftsExpectedValues CheckAfterInsertDshiftsExpectedValues
        {
            get
            {
                if ((this.mCheckAfterInsertDshiftsExpectedValues == null))
                {
                    this.mCheckAfterInsertDshiftsExpectedValues = new CheckAfterInsertDshiftsExpectedValues();
                }
                return this.mCheckAfterInsertDshiftsExpectedValues;
            }
        }
        
        public virtual CheckAfterInsertRavelliNshiftsExpectedValues CheckAfterInsertRavelliNshiftsExpectedValues
        {
            get
            {
                if ((this.mCheckAfterInsertRavelliNshiftsExpectedValues == null))
                {
                    this.mCheckAfterInsertRavelliNshiftsExpectedValues = new CheckAfterInsertRavelliNshiftsExpectedValues();
                }
                return this.mCheckAfterInsertRavelliNshiftsExpectedValues;
            }
        }
        
        public virtual CheckAfterInsertRavelliNshifts2ExpectedValues CheckAfterInsertRavelliNshifts2ExpectedValues
        {
            get
            {
                if ((this.mCheckAfterInsertRavelliNshifts2ExpectedValues == null))
                {
                    this.mCheckAfterInsertRavelliNshifts2ExpectedValues = new CheckAfterInsertRavelliNshifts2ExpectedValues();
                }
                return this.mCheckAfterInsertRavelliNshifts2ExpectedValues;
            }
        }
        
        public virtual CheckAnderssonValuesExpectedValues CheckAnderssonValuesExpectedValues
        {
            get
            {
                if ((this.mCheckAnderssonValuesExpectedValues == null))
                {
                    this.mCheckAnderssonValuesExpectedValues = new CheckAnderssonValuesExpectedValues();
                }
                return this.mCheckAnderssonValuesExpectedValues;
            }
        }
        
        public virtual ChecksStep2ExpectedValues ChecksStep2ExpectedValues
        {
            get
            {
                if ((this.mChecksStep2ExpectedValues == null))
                {
                    this.mChecksStep2ExpectedValues = new ChecksStep2ExpectedValues();
                }
                return this.mChecksStep2ExpectedValues;
            }
        }
        
        public virtual DeleteRavelliShiftsParams DeleteRavelliShiftsParams
        {
            get
            {
                if ((this.mDeleteRavelliShiftsParams == null))
                {
                    this.mDeleteRavelliShiftsParams = new DeleteRavelliShiftsParams();
                }
                return this.mDeleteRavelliShiftsParams;
            }
        }
        
        public virtual EditRavelliShiftsParams EditRavelliShiftsParams
        {
            get
            {
                if ((this.mEditRavelliShiftsParams == null))
                {
                    this.mEditRavelliShiftsParams = new EditRavelliShiftsParams();
                }
                return this.mEditRavelliShiftsParams;
            }
        }
        
        public virtual EditRavelliShifts2Params EditRavelliShifts2Params
        {
            get
            {
                if ((this.mEditRavelliShifts2Params == null))
                {
                    this.mEditRavelliShifts2Params = new EditRavelliShifts2Params();
                }
                return this.mEditRavelliShifts2Params;
            }
        }
        
        public virtual EditRavelliShifts3Params EditRavelliShifts3Params
        {
            get
            {
                if ((this.mEditRavelliShifts3Params == null))
                {
                    this.mEditRavelliShifts3Params = new EditRavelliShifts3Params();
                }
                return this.mEditRavelliShifts3Params;
            }
        }
        
        public virtual InsertDahlinLine2NshiftsParams InsertDahlinLine2NshiftsParams
        {
            get
            {
                if ((this.mInsertDahlinLine2NshiftsParams == null))
                {
                    this.mInsertDahlinLine2NshiftsParams = new InsertDahlinLine2NshiftsParams();
                }
                return this.mInsertDahlinLine2NshiftsParams;
            }
        }
        
        public UILeggtilansatteWindow UILeggtilansatteWindow
        {
            get
            {
                if ((this.mUILeggtilansatteWindow == null))
                {
                    this.mUILeggtilansatteWindow = new UILeggtilansatteWindow();
                }
                return this.mUILeggtilansatteWindow;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UIAnsatteiarbeidsplanWindow UIAnsatteiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIAnsatteiarbeidsplanWindow == null))
                {
                    this.mUIAnsatteiarbeidsplanWindow = new UIAnsatteiarbeidsplanWindow();
                }
                return this.mUIAnsatteiarbeidsplanWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIGT4001InformasjonWindow UIGT4001InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4001InformasjonWindow == null))
                {
                    this.mUIGT4001InformasjonWindow = new UIGT4001InformasjonWindow();
                }
                return this.mUIGT4001InformasjonWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddRavelliShiftsParams mAddRavelliShiftsParams;
        
        private AddRavelliShifts2Params mAddRavelliShifts2Params;
        
        private CheckAfterEditDahlinValidPeriodsExpectedValues mCheckAfterEditDahlinValidPeriodsExpectedValues;
        
        private CheckAfterEditRavelliNshiftsExpectedValues mCheckAfterEditRavelliNshiftsExpectedValues;
        
        private CheckAfterEditRavelliNshifts2ExpectedValues mCheckAfterEditRavelliNshifts2ExpectedValues;
        
        private CheckAfterEditRavelliNshifts3ExpectedValues mCheckAfterEditRavelliNshifts3ExpectedValues;
        
        private CheckAfterInsertDahlinNshiftsExpectedValues mCheckAfterInsertDahlinNshiftsExpectedValues;
        
        private CheckAfterInsertDshiftsExpectedValues mCheckAfterInsertDshiftsExpectedValues;
        
        private CheckAfterInsertRavelliNshiftsExpectedValues mCheckAfterInsertRavelliNshiftsExpectedValues;
        
        private CheckAfterInsertRavelliNshifts2ExpectedValues mCheckAfterInsertRavelliNshifts2ExpectedValues;
        
        private CheckAnderssonValuesExpectedValues mCheckAnderssonValuesExpectedValues;
        
        private ChecksStep2ExpectedValues mChecksStep2ExpectedValues;
        
        private DeleteRavelliShiftsParams mDeleteRavelliShiftsParams;
        
        private EditRavelliShiftsParams mEditRavelliShiftsParams;
        
        private EditRavelliShifts2Params mEditRavelliShifts2Params;
        
        private EditRavelliShifts3Params mEditRavelliShifts3Params;
        
        private InsertDahlinLine2NshiftsParams mInsertDahlinLine2NshiftsParams;
        
        private UILeggtilansatteWindow mUILeggtilansatteWindow;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UIAnsatteiarbeidsplanWindow mUIAnsatteiarbeidsplanWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIGT4001InformasjonWindow mUIGT4001InformasjonWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRavelliShifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddRavelliShiftsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEditSendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_4' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit1SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit2SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit3SendKeys = "n{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRavelliShifts2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddRavelliShifts2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_33' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit4SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_34' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit21SendKeys = "n{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAfterEditDahlinValidPeriods'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAfterEditDahlinValidPeriodsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
        /// </summary>
        public string UIDahlinMartinCellText = "Dahlin, Martin";
        
        /// <summary>
        /// Verify that the 'Text' property of '10 av 10' cell equals '6 av 10'
        /// </summary>
        public string UIItem10av10Cell1Text = "6 av 10";
        
        /// <summary>
        /// Verify that the 'Text' property of '4 av 4' cell equals '2 av 4'
        /// </summary>
        public string UIItem4av4Cell1Text = "2 av 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAfterEditRavelliNshifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAfterEditRavelliNshiftsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Ravelli, Thomas'
        /// </summary>
        public string UIRavelliThomasCellText = "Ravelli, Thomas";
        
        /// <summary>
        /// Verify that the 'Text' property of '4 av 10' cell equals '2 av 10'
        /// </summary>
        public string UIItem4av10Cell1Text = "2 av 10";
        
        /// <summary>
        /// Verify that the 'Text' property of '3 av 4' cell equals '2 av 4'
        /// </summary>
        public string UIItem3av4Cell1Text = "2 av 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAfterEditRavelliNshifts2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAfterEditRavelliNshifts2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Ravelli, Thomas'
        /// </summary>
        public string UIRavelliThomasCellText = "Ravelli, Thomas";
        
        /// <summary>
        /// Verify that the 'Text' property of '4 av 10' cell equals '4 av 10'
        /// </summary>
        public string UIItem4av10Cell1Text = "4 av 10";
        
        /// <summary>
        /// Verify that the 'Text' property of '3 av 4' cell equals '3 av 4'
        /// </summary>
        public string UIItem3av4Cell1Text = "3 av 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAfterEditRavelliNshifts3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAfterEditRavelliNshifts3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Ravelli, Thomas'
        /// </summary>
        public string UIRavelliThomasCellText = "Ravelli, Thomas";
        
        /// <summary>
        /// Verify that the 'Text' property of '4 av 10' cell equals '8 av 10'
        /// </summary>
        public string UIItem4av10Cell1Text = "8 av 10";
        
        /// <summary>
        /// Verify that the 'Text' property of '3 av 4' cell equals '2 av 4'
        /// </summary>
        public string UIItem3av4Cell1Text = "2 av 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAfterInsertDahlinNshifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAfterInsertDahlinNshiftsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
        /// </summary>
        public string UIDahlinMartinCellText = "Dahlin, Martin";
        
        /// <summary>
        /// Verify that the 'Text' property of '10 av 10' cell equals '10 av 10'
        /// </summary>
        public string UIItem10av10Cell1Text = "10 av 10";
        
        /// <summary>
        /// Verify that the 'Text' property of '4 av 4' cell equals '4 av 4'
        /// </summary>
        public string UIItem4av4Cell1Text = "4 av 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAfterInsertDshifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAfterInsertDshiftsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Kenneth' cell equals 'Andersson, Kenneth'
        /// </summary>
        public string UIAnderssonKennethCellText = "Andersson, Kenneth";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 10' cell equals '10 av 10'
        /// </summary>
        public string UIItem0av10Cell1Text = "10 av 10";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 4' cell equals '4 av 4'
        /// </summary>
        public string UIItem0av4Cell1Text = "4 av 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAfterInsertRavelliNshifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAfterInsertRavelliNshiftsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Ravelli, Thomas'
        /// </summary>
        public string UIRavelliThomasCellText = "Ravelli, Thomas";
        
        /// <summary>
        /// Verify that the 'Text' property of '4 av 10' cell equals '4 av 10'
        /// </summary>
        public string UIItem4av10Cell1Text = "4 av 10";
        
        /// <summary>
        /// Verify that the 'Text' property of '3 av 4' cell equals '3 av 4'
        /// </summary>
        public string UIItem3av4Cell1Text = "3 av 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAfterInsertRavelliNshifts2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAfterInsertRavelliNshifts2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Ravelli, Thomas'
        /// </summary>
        public string UIRavelliThomasCellText = "Ravelli, Thomas";
        
        /// <summary>
        /// Verify that the 'Text' property of '4 av 10' cell equals '6 av 10'
        /// </summary>
        public string UIItem4av10Cell1Text = "6 av 10";
        
        /// <summary>
        /// Verify that the 'Text' property of '3 av 4' cell equals '3 av 4'
        /// </summary>
        public string UIItem3av4Cell1Text = "3 av 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAnderssonValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAnderssonValuesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Kenneth' cell equals 'Andersson, Kenneth'
        /// </summary>
        public string UIAnderssonKennethCellText = "Andersson, Kenneth";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 10' cell equals '0 av 10'
        /// </summary>
        public string UIItem0av10Cell1Text = "0 av 10";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 4' cell equals '0 av 4'
        /// </summary>
        public string UIItem0av4Cell1Text = "0 av 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChecksStep2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ChecksStep2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3CellValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3Cell1ValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCellValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3Cell2ValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3Cell3ValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell1ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3Cell4ValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3Cell5ValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3Cell6ValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3Cell7ValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell2ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell3ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3Cell8ValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3Cell9ValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3Cell10ValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F3' cell equals 'PlanShift (F3)'
        /// </summary>
        public string UIF3Cell11ValueAsString = "PlanShift (F3)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell4ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell5ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell6ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell7ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell8ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell9ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell10ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell11ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell12ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell13ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell14ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell15ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell16ValueAsString = "NewPlanShift (Empty)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIItemCell17ValueAsString = "NewPlanShift (Empty)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeleteRavelliShifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DeleteRavelliShiftsParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Delete}' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "{Delete}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditRavelliShifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditRavelliShiftsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEditSendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEditSendKeys1 = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_4' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit1SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit2SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit3SendKeys = "n{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditRavelliShifts2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditRavelliShifts2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_2' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit5SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEditSendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEditSendKeys1 = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_5' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit41SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit2SendKeys = "n{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditRavelliShifts3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditRavelliShifts3Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_2' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit5SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_5' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit41SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_12' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit22SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_16' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit31SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_19' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit42SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_26' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit51SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_32' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit6SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_32' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit6SendKeys1 = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]4[Column]RosterCell_33' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit4SendKeys = "n{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertDahlinLine2Nshifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class InsertDahlinLine2NshiftsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'n{Tab}' in '[Row]2[Column]RosterCell_17' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEditSendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]2[Column]RosterCell_27' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit2SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]2[Column]RosterCell_34' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit3SendKeys = "n{Tab}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeggtilansatteWindow : DXWindow
    {
        
        public UILeggtilansatteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Legg til ansatte";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UISelectDepartmentEmplCustom UISelectDepartmentEmplCustom
        {
            get
            {
                if ((this.mUISelectDepartmentEmplCustom == null))
                {
                    this.mUISelectDepartmentEmplCustom = new UISelectDepartmentEmplCustom(this);
                }
                return this.mUISelectDepartmentEmplCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISelectDepartmentEmplCustom mUISelectDepartmentEmplCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectDepartmentEmplCustom : DXTestControl
    {
        
        public UISelectDepartmentEmplCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SelectDepartmentEmployeesView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SelectDepartmentEmployeesView";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentContainerClient UIPcContentContainerClient
        {
            get
            {
                if ((this.mUIPcContentContainerClient == null))
                {
                    this.mUIPcContentContainerClient = new UIPcContentContainerClient(this);
                }
                return this.mUIPcContentContainerClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentContainerClient mUIPcContentContainerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentContainerClient : DXTestControl
    {
        
        public UIPcContentContainerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContentContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIGcDepartmentEmployeeTable UIGcDepartmentEmployeeTable
        {
            get
            {
                if ((this.mUIGcDepartmentEmployeeTable == null))
                {
                    this.mUIGcDepartmentEmployeeTable = new UIGcDepartmentEmployeeTable(this);
                }
                return this.mUIGcDepartmentEmployeeTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDepartmentEmployeeTable mUIGcDepartmentEmployeeTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDepartmentEmployeeTable : DXGrid
    {
        
        public UIGcDepartmentEmployeeTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnderssonKennethCell
        {
            get
            {
                if ((this.mUIAnderssonKennethCell == null))
                {
                    this.mUIAnderssonKennethCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonKennethCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]0[Column]colE" +
                        "mployee";
                    this.mUIAnderssonKennethCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonKennethCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnderssonKennethCell;
            }
        }
        
        public DXCell UIDahlinMartinCell
        {
            get
            {
                if ((this.mUIDahlinMartinCell == null))
                {
                    this.mUIDahlinMartinCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDahlinMartinCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]2[Column]colE" +
                        "mployee";
                    this.mUIDahlinMartinCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDahlinMartinCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIDahlinMartinCell;
            }
        }
        
        public DXCell UIDahlinMartinCell1
        {
            get
            {
                if ((this.mUIDahlinMartinCell1 == null))
                {
                    this.mUIDahlinMartinCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDahlinMartinCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]3[Column]colE" +
                        "mployee";
                    this.mUIDahlinMartinCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDahlinMartinCell1.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIDahlinMartinCell1;
            }
        }
        
        public DXCell UINilssonRolandCell
        {
            get
            {
                if ((this.mUINilssonRolandCell == null))
                {
                    this.mUINilssonRolandCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINilssonRolandCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]9[Column]colE" +
                        "mployee";
                    this.mUINilssonRolandCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINilssonRolandCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUINilssonRolandCell;
            }
        }
        
        public DXCell UIRavelliThomasCell
        {
            get
            {
                if ((this.mUIRavelliThomasCell == null))
                {
                    this.mUIRavelliThomasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRavelliThomasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]10[Column]col" +
                        "Employee";
                    this.mUIRavelliThomasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRavelliThomasCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIRavelliThomasCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnderssonKennethCell;
        
        private DXCell mUIDahlinMartinCell;
        
        private DXCell mUIDahlinMartinCell1;
        
        private DXCell mUINilssonRolandCell;
        
        private DXCell mUIRavelliThomasCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        
        public UIDpnlColumnsDockPanel UIDpnlColumnsDockPanel
        {
            get
            {
                if ((this.mUIDpnlColumnsDockPanel == null))
                {
                    this.mUIDpnlColumnsDockPanel = new UIDpnlColumnsDockPanel(this);
                }
                return this.mUIDpnlColumnsDockPanel;
            }
        }
        
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        
        private UIDpnlColumnsDockPanel mUIDpnlColumnsDockPanel;
        
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIF3Cell
        {
            get
            {
                if ((this.mUIF3Cell == null))
                {
                    this.mUIF3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_3";
                    this.mUIF3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell;
            }
        }
        
        public DXCell UIF3Cell1
        {
            get
            {
                if ((this.mUIF3Cell1 == null))
                {
                    this.mUIF3Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_4";
                    this.mUIF3Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell1;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIF3Cell2
        {
            get
            {
                if ((this.mUIF3Cell2 == null))
                {
                    this.mUIF3Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_7";
                    this.mUIF3Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell2;
            }
        }
        
        public DXCell UIF3Cell3
        {
            get
            {
                if ((this.mUIF3Cell3 == null))
                {
                    this.mUIF3Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_17";
                    this.mUIF3Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell3;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_33";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIF3Cell4
        {
            get
            {
                if ((this.mUIF3Cell4 == null))
                {
                    this.mUIF3Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_3";
                    this.mUIF3Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell4;
            }
        }
        
        public DXCell UIF3Cell5
        {
            get
            {
                if ((this.mUIF3Cell5 == null))
                {
                    this.mUIF3Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_3";
                    this.mUIF3Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell5;
            }
        }
        
        public DXCell UIF3Cell6
        {
            get
            {
                if ((this.mUIF3Cell6 == null))
                {
                    this.mUIF3Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_4";
                    this.mUIF3Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell6;
            }
        }
        
        public DXCell UIF3Cell7
        {
            get
            {
                if ((this.mUIF3Cell7 == null))
                {
                    this.mUIF3Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_4";
                    this.mUIF3Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell7;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_6";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_6";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXCell UIF3Cell8
        {
            get
            {
                if ((this.mUIF3Cell8 == null))
                {
                    this.mUIF3Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIF3Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell8;
            }
        }
        
        public DXCell UIF3Cell9
        {
            get
            {
                if ((this.mUIF3Cell9 == null))
                {
                    this.mUIF3Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_7";
                    this.mUIF3Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell9;
            }
        }
        
        public DXCell UIF3Cell10
        {
            get
            {
                if ((this.mUIF3Cell10 == null))
                {
                    this.mUIF3Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_17";
                    this.mUIF3Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell10;
            }
        }
        
        public DXCell UIF3Cell11
        {
            get
            {
                if ((this.mUIF3Cell11 == null))
                {
                    this.mUIF3Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_17";
                    this.mUIF3Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell11;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_33";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_33";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_3";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_4";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_6";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_7";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXCell UIItemCell10
        {
            get
            {
                if ((this.mUIItemCell10 == null))
                {
                    this.mUIItemCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_17";
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell10;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_33";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_3";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXCell UIItemCell13
        {
            get
            {
                if ((this.mUIItemCell13 == null))
                {
                    this.mUIItemCell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_4";
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell13;
            }
        }
        
        public DXCell UIItemCell14
        {
            get
            {
                if ((this.mUIItemCell14 == null))
                {
                    this.mUIItemCell14 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_6";
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell14.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell14;
            }
        }
        
        public DXCell UIItemCell15
        {
            get
            {
                if ((this.mUIItemCell15 == null))
                {
                    this.mUIItemCell15 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_7";
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell15.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell15;
            }
        }
        
        public DXCell UIItemCell16
        {
            get
            {
                if ((this.mUIItemCell16 == null))
                {
                    this.mUIItemCell16 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_17";
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell16.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell16;
            }
        }
        
        public DXCell UIItemCell17
        {
            get
            {
                if ((this.mUIItemCell17 == null))
                {
                    this.mUIItemCell17 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_33";
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell17.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell17;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit == null))
                {
                    this.mUIRow2ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_17";
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell18
        {
            get
            {
                if ((this.mUIItemCell18 == null))
                {
                    this.mUIItemCell18 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell18.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_27";
                    this.mUIItemCell18.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell18.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell18;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_27";
                    this.mUIRow2ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell19
        {
            get
            {
                if ((this.mUIItemCell19 == null))
                {
                    this.mUIItemCell19 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell19.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_34";
                    this.mUIItemCell19.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell19.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell19;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_34";
                    this.mUIRow2ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit3;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit == null))
                {
                    this.mUIRow4ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_3";
                    this.mUIRow4ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_4";
                    this.mUIRow4ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit1;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_6";
                    this.mUIRow4ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit2;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_7";
                    this.mUIRow4ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit3;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_33";
                    this.mUIRow4ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit4;
            }
        }
        
        public DXCell UIItemCell110
        {
            get
            {
                if ((this.mUIItemCell110 == null))
                {
                    this.mUIItemCell110 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell110.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_34";
                    this.mUIItemCell110.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell110.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell110;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit21
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit21 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit21 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_34";
                    this.mUIRow4ColumnRosterCellEdit21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit21.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit21;
            }
        }
        
        public DXCell UIRavelliThomasCell
        {
            get
            {
                if ((this.mUIRavelliThomasCell == null))
                {
                    this.mUIRavelliThomasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRavelliThomasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]Col_EmployeeName";
                    this.mUIRavelliThomasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRavelliThomasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRavelliThomasCell;
            }
        }
        
        public DXCell UIItemCell20
        {
            get
            {
                if ((this.mUIItemCell20 == null))
                {
                    this.mUIItemCell20 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell20.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_2";
                    this.mUIItemCell20.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell20.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell20;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit5
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit5 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit5 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_2";
                    this.mUIRow4ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit5;
            }
        }
        
        public DXCell UIItemCell21
        {
            get
            {
                if ((this.mUIItemCell21 == null))
                {
                    this.mUIItemCell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_5";
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell21.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell21;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit41
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit41 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit41 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit41.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_5";
                    this.mUIRow4ColumnRosterCellEdit41.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit41.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit41;
            }
        }
        
        public DXCell UIItemCell22
        {
            get
            {
                if ((this.mUIItemCell22 == null))
                {
                    this.mUIItemCell22 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_12";
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell22.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell22;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit22
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit22 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit22 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit22.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_12";
                    this.mUIRow4ColumnRosterCellEdit22.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit22.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit22;
            }
        }
        
        public DXCell UIItemCell31
        {
            get
            {
                if ((this.mUIItemCell31 == null))
                {
                    this.mUIItemCell31 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_16";
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell31.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell31;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit31
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit31 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit31 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit31.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_16";
                    this.mUIRow4ColumnRosterCellEdit31.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit31.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit31;
            }
        }
        
        public DXCell UIItemCell41
        {
            get
            {
                if ((this.mUIItemCell41 == null))
                {
                    this.mUIItemCell41 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell41.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_19";
                    this.mUIItemCell41.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell41.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell41;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit42
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit42 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit42 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit42.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_19";
                    this.mUIRow4ColumnRosterCellEdit42.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit42.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit42;
            }
        }
        
        public DXCell UIItemCell51
        {
            get
            {
                if ((this.mUIItemCell51 == null))
                {
                    this.mUIItemCell51 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell51.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_26";
                    this.mUIItemCell51.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell51.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell51;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit51
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit51 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit51 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit51.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_26";
                    this.mUIRow4ColumnRosterCellEdit51.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit51.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit51;
            }
        }
        
        public DXCell UIItemCell61
        {
            get
            {
                if ((this.mUIItemCell61 == null))
                {
                    this.mUIItemCell61 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell61.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_32";
                    this.mUIItemCell61.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell61.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell61;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit6
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit6 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit6 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_32";
                    this.mUIRow4ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit6;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIF3Cell;
        
        private DXCell mUIF3Cell1;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIF3Cell2;
        
        private DXCell mUIF3Cell3;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIF3Cell4;
        
        private DXCell mUIF3Cell5;
        
        private DXCell mUIF3Cell6;
        
        private DXCell mUIF3Cell7;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItemCell3;
        
        private DXCell mUIF3Cell8;
        
        private DXCell mUIF3Cell9;
        
        private DXCell mUIF3Cell10;
        
        private DXCell mUIF3Cell11;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell5;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell7;
        
        private DXCell mUIItemCell8;
        
        private DXCell mUIItemCell9;
        
        private DXCell mUIItemCell10;
        
        private DXCell mUIItemCell11;
        
        private DXCell mUIItemCell12;
        
        private DXCell mUIItemCell13;
        
        private DXCell mUIItemCell14;
        
        private DXCell mUIItemCell15;
        
        private DXCell mUIItemCell16;
        
        private DXCell mUIItemCell17;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit;
        
        private DXCell mUIItemCell18;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell19;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit3;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit1;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit2;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit3;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit4;
        
        private DXCell mUIItemCell110;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit21;
        
        private DXCell mUIRavelliThomasCell;
        
        private DXCell mUIItemCell20;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit5;
        
        private DXCell mUIItemCell21;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit41;
        
        private DXCell mUIItemCell22;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit22;
        
        private DXCell mUIItemCell31;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit31;
        
        private DXCell mUIItemCell41;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit42;
        
        private DXCell mUIItemCell51;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit51;
        
        private DXCell mUIItemCell61;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit6;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlColumnsDockPanel : DXDockPanel
    {
        
        public UIDpnlColumnsDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlColumns";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel1_ContainerCustom UIDockPanel1_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel1_ContainerCustom == null))
                {
                    this.mUIDockPanel1_ContainerCustom = new UIDockPanel1_ContainerCustom(this);
                }
                return this.mUIDockPanel1_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel1_ContainerCustom mUIDockPanel1_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel1_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel1_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel1_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcExtraGridTable UIGcExtraGridTable
        {
            get
            {
                if ((this.mUIGcExtraGridTable == null))
                {
                    this.mUIGcExtraGridTable = new UIGcExtraGridTable(this);
                }
                return this.mUIGcExtraGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcExtraGridTable mUIGcExtraGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcExtraGridTable : DXGrid
    {
        
        public UIGcExtraGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem10av10Cell
        {
            get
            {
                if ((this.mUIItem10av10Cell == null))
                {
                    this.mUIItem10av10Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem10av10Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]Col_SH";
                    this.mUIItem10av10Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem10av10Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem10av10Cell;
            }
        }
        
        public DXCell UIItem4av4Cell
        {
            get
            {
                if ((this.mUIItem4av4Cell == null))
                {
                    this.mUIItem4av4Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4av4Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]Col_H";
                    this.mUIItem4av4Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4av4Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem4av4Cell;
            }
        }
        
        public DXCell UIItem4av10Cell
        {
            get
            {
                if ((this.mUIItem4av10Cell == null))
                {
                    this.mUIItem4av10Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4av10Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]Col_SH";
                    this.mUIItem4av10Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4av10Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem4av10Cell;
            }
        }
        
        public DXCell UIItem3av4Cell
        {
            get
            {
                if ((this.mUIItem3av4Cell == null))
                {
                    this.mUIItem3av4Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3av4Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]Col_H";
                    this.mUIItem3av4Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3av4Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3av4Cell;
            }
        }
        
        public DXCell UIItem48Cell
        {
            get
            {
                if ((this.mUIItem48Cell == null))
                {
                    this.mUIItem48Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem48Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]Col_ColumnA";
                    this.mUIItem48Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem48Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem48Cell;
            }
        }
        
        public DXCell UIItem6398Cell
        {
            get
            {
                if ((this.mUIItem6398Cell == null))
                {
                    this.mUIItem6398Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6398Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]Col_ColumnB";
                    this.mUIItem6398Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6398Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6398Cell;
            }
        }
        
        public DXCell UIItem4799Cell
        {
            get
            {
                if ((this.mUIItem4799Cell == null))
                {
                    this.mUIItem4799Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4799Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]Col_ColumnD";
                    this.mUIItem4799Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4799Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem4799Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem10av10Cell;
        
        private DXCell mUIItem4av4Cell;
        
        private DXCell mUIItem4av10Cell;
        
        private DXCell mUIItem3av4Cell;
        
        private DXCell mUIItem48Cell;
        
        private DXCell mUIItem6398Cell;
        
        private DXCell mUIItem4799Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable1 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable1(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        
        public UIDpnlColumnsDockPanel1 UIDpnlColumnsDockPanel
        {
            get
            {
                if ((this.mUIDpnlColumnsDockPanel == null))
                {
                    this.mUIDpnlColumnsDockPanel = new UIDpnlColumnsDockPanel1(this);
                }
                return this.mUIDpnlColumnsDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable1 mUIGcRosterPlanTable;
        
        private UIDpnlColumnsDockPanel1 mUIDpnlColumnsDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable1 : DXGrid
    {
        
        public UIGcRosterPlanTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIRavelliThomasCell
        {
            get
            {
                if ((this.mUIRavelliThomasCell == null))
                {
                    this.mUIRavelliThomasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRavelliThomasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]ColumnHandle1";
                    this.mUIRavelliThomasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRavelliThomasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRavelliThomasCell;
            }
        }
        
        public DXCell UIAnderssonKennethCell
        {
            get
            {
                if ((this.mUIAnderssonKennethCell == null))
                {
                    this.mUIAnderssonKennethCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonKennethCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle1";
                    this.mUIAnderssonKennethCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonKennethCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnderssonKennethCell;
            }
        }
        
        public DXCell UIDahlinMartinCell
        {
            get
            {
                if ((this.mUIDahlinMartinCell == null))
                {
                    this.mUIDahlinMartinCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDahlinMartinCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]ColumnHandle1";
                    this.mUIDahlinMartinCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDahlinMartinCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDahlinMartinCell;
            }
        }
        
        public DXCell UIRavelliThomasCell1
        {
            get
            {
                if ((this.mUIRavelliThomasCell1 == null))
                {
                    this.mUIRavelliThomasCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIRavelliThomasCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]EmployeeName";
                    this.mUIRavelliThomasCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRavelliThomasCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRavelliThomasCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIRavelliThomasCell;
        
        private DXCell mUIAnderssonKennethCell;
        
        private DXCell mUIDahlinMartinCell;
        
        private DXCell mUIRavelliThomasCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlColumnsDockPanel1 : DXDockPanel
    {
        
        public UIDpnlColumnsDockPanel1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlColumns";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel1_ContainerCustom1 UIDockPanel1_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel1_ContainerCustom == null))
                {
                    this.mUIDockPanel1_ContainerCustom = new UIDockPanel1_ContainerCustom1(this);
                }
                return this.mUIDockPanel1_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel1_ContainerCustom1 mUIDockPanel1_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel1_ContainerCustom1 : DXTestControl
    {
        
        public UIDockPanel1_ContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel1_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcExtraGridTable1 UIGcExtraGridTable
        {
            get
            {
                if ((this.mUIGcExtraGridTable == null))
                {
                    this.mUIGcExtraGridTable = new UIGcExtraGridTable1(this);
                }
                return this.mUIGcExtraGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcExtraGridTable1 mUIGcExtraGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcExtraGridTable1 : DXGrid
    {
        
        public UIGcExtraGridTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem0av10Cell
        {
            get
            {
                if ((this.mUIItem0av10Cell == null))
                {
                    this.mUIItem0av10Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av10Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle42";
                    this.mUIItem0av10Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av10Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av10Cell;
            }
        }
        
        public DXCell UIItem0av4Cell
        {
            get
            {
                if ((this.mUIItem0av4Cell == null))
                {
                    this.mUIItem0av4Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av4Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle43";
                    this.mUIItem0av4Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av4Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av4Cell;
            }
        }
        
        public DXCell UIItem4av0Cell
        {
            get
            {
                if ((this.mUIItem4av0Cell == null))
                {
                    this.mUIItem4av0Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4av0Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle48";
                    this.mUIItem4av0Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4av0Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem4av0Cell;
            }
        }
        
        public DXCell UIItem0av0Cell
        {
            get
            {
                if ((this.mUIItem0av0Cell == null))
                {
                    this.mUIItem0av0Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle49";
                    this.mUIItem0av0Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell;
            }
        }
        
        public DXCell UIItem10av10Cell
        {
            get
            {
                if ((this.mUIItem10av10Cell == null))
                {
                    this.mUIItem10av10Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem10av10Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]ColumnHandle42";
                    this.mUIItem10av10Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem10av10Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem10av10Cell;
            }
        }
        
        public DXCell UIItem4av4Cell
        {
            get
            {
                if ((this.mUIItem4av4Cell == null))
                {
                    this.mUIItem4av4Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4av4Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]ColumnHandle43";
                    this.mUIItem4av4Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4av4Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem4av4Cell;
            }
        }
        
        public DXCell UIItem28Cell
        {
            get
            {
                if ((this.mUIItem28Cell == null))
                {
                    this.mUIItem28Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem28Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]ColumnHandle44";
                    this.mUIItem28Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem28Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem28Cell;
            }
        }
        
        public DXCell UIItem3732Cell
        {
            get
            {
                if ((this.mUIItem3732Cell == null))
                {
                    this.mUIItem3732Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3732Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]ColumnHandle45";
                    this.mUIItem3732Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3732Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3732Cell;
            }
        }
        
        public DXCell UIItem3732Cell1
        {
            get
            {
                if ((this.mUIItem3732Cell1 == null))
                {
                    this.mUIItem3732Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3732Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]ColumnHandle47";
                    this.mUIItem3732Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3732Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3732Cell1;
            }
        }
        
        public DXCell UIItem30Cell
        {
            get
            {
                if ((this.mUIItem30Cell == null))
                {
                    this.mUIItem30Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem30Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle44";
                    this.mUIItem30Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem30Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem30Cell;
            }
        }
        
        public DXCell UIItem3999Cell
        {
            get
            {
                if ((this.mUIItem3999Cell == null))
                {
                    this.mUIItem3999Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3999Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle45";
                    this.mUIItem3999Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3999Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3999Cell;
            }
        }
        
        public DXCell UIItem3999Cell1
        {
            get
            {
                if ((this.mUIItem3999Cell1 == null))
                {
                    this.mUIItem3999Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3999Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle47";
                    this.mUIItem3999Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3999Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3999Cell1;
            }
        }
        
        public DXCell UIItem4av10Cell
        {
            get
            {
                if ((this.mUIItem4av10Cell == null))
                {
                    this.mUIItem4av10Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4av10Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle42";
                    this.mUIItem4av10Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4av10Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem4av10Cell;
            }
        }
        
        public DXCell UIItem3av4Cell
        {
            get
            {
                if ((this.mUIItem3av4Cell == null))
                {
                    this.mUIItem3av4Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3av4Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle43";
                    this.mUIItem3av4Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3av4Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3av4Cell;
            }
        }
        
        public DXCell UIItem48Cell
        {
            get
            {
                if ((this.mUIItem48Cell == null))
                {
                    this.mUIItem48Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem48Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle44";
                    this.mUIItem48Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem48Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem48Cell;
            }
        }
        
        public DXCell UIItem6398Cell
        {
            get
            {
                if ((this.mUIItem6398Cell == null))
                {
                    this.mUIItem6398Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6398Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle45";
                    this.mUIItem6398Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6398Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6398Cell;
            }
        }
        
        public DXCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle46";
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public DXCell UIItem6398Cell1
        {
            get
            {
                if ((this.mUIItem6398Cell1 == null))
                {
                    this.mUIItem6398Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6398Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle47";
                    this.mUIItem6398Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6398Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6398Cell1;
            }
        }
        
        public DXCell UIItem0av0Cell1
        {
            get
            {
                if ((this.mUIItem0av0Cell1 == null))
                {
                    this.mUIItem0av0Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle48";
                    this.mUIItem0av0Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell1;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle49";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItem0av10Cell1
        {
            get
            {
                if ((this.mUIItem0av10Cell1 == null))
                {
                    this.mUIItem0av10Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av10Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle40";
                    this.mUIItem0av10Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av10Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av10Cell1;
            }
        }
        
        public DXCell UIItem0av4Cell1
        {
            get
            {
                if ((this.mUIItem0av4Cell1 == null))
                {
                    this.mUIItem0av4Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av4Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle41";
                    this.mUIItem0av4Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av4Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av4Cell1;
            }
        }
        
        public DXCell UIItem10av10Cell1
        {
            get
            {
                if ((this.mUIItem10av10Cell1 == null))
                {
                    this.mUIItem10av10Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem10av10Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]ColumnHandle40";
                    this.mUIItem10av10Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem10av10Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem10av10Cell1;
            }
        }
        
        public DXCell UIItem4av4Cell1
        {
            get
            {
                if ((this.mUIItem4av4Cell1 == null))
                {
                    this.mUIItem4av4Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4av4Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]ColumnHandle41";
                    this.mUIItem4av4Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4av4Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem4av4Cell1;
            }
        }
        
        public DXCell UIItem4av10Cell1
        {
            get
            {
                if ((this.mUIItem4av10Cell1 == null))
                {
                    this.mUIItem4av10Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4av10Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle40";
                    this.mUIItem4av10Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4av10Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem4av10Cell1;
            }
        }
        
        public DXCell UIItem3av4Cell1
        {
            get
            {
                if ((this.mUIItem3av4Cell1 == null))
                {
                    this.mUIItem3av4Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3av4Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle41";
                    this.mUIItem3av4Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3av4Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3av4Cell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem0av10Cell;
        
        private DXCell mUIItem0av4Cell;
        
        private DXCell mUIItem4av0Cell;
        
        private DXCell mUIItem0av0Cell;
        
        private DXCell mUIItem10av10Cell;
        
        private DXCell mUIItem4av4Cell;
        
        private DXCell mUIItem28Cell;
        
        private DXCell mUIItem3732Cell;
        
        private DXCell mUIItem3732Cell1;
        
        private DXCell mUIItem30Cell;
        
        private DXCell mUIItem3999Cell;
        
        private DXCell mUIItem3999Cell1;
        
        private DXCell mUIItem4av10Cell;
        
        private DXCell mUIItem3av4Cell;
        
        private DXCell mUIItem48Cell;
        
        private DXCell mUIItem6398Cell;
        
        private DXCell mUIItem0Cell;
        
        private DXCell mUIItem6398Cell1;
        
        private DXCell mUIItem0av0Cell1;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIItem0av10Cell1;
        
        private DXCell mUIItem0av4Cell1;
        
        private DXCell mUIItem10av10Cell1;
        
        private DXCell mUIItem4av4Cell1;
        
        private DXCell mUIItem4av10Cell1;
        
        private DXCell mUIItem3av4Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsatteiarbeidsplanWindow : DXWindow
    {
        
        public UIAnsatteiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlOuterClient UIPanelControlOuterClient
        {
            get
            {
                if ((this.mUIPanelControlOuterClient == null))
                {
                    this.mUIPanelControlOuterClient = new UIPanelControlOuterClient(this);
                }
                return this.mUIPanelControlOuterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlOuterClient mUIPanelControlOuterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlOuterClient : DXTestControl
    {
        
        public UIPanelControlOuterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        
        public UIPanelControlRightClient UIPanelControlRightClient
        {
            get
            {
                if ((this.mUIPanelControlRightClient == null))
                {
                    this.mUIPanelControlRightClient = new UIPanelControlRightClient(this);
                }
                return this.mUIPanelControlRightClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient mUIPanelControlLeftClient;
        
        private UIPanelControlRightClient mUIPanelControlRightClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlLeftClient : DXTestControl
    {
        
        public UIPanelControlLeftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITreeListEmployeeTreeList UITreeListEmployeeTreeList
        {
            get
            {
                if ((this.mUITreeListEmployeeTreeList == null))
                {
                    this.mUITreeListEmployeeTreeList = new UITreeListEmployeeTreeList(this);
                }
                return this.mUITreeListEmployeeTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListEmployeeTreeList mUITreeListEmployeeTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListEmployeeTreeList : DXTreeList
    {
        
        public UITreeListEmployeeTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode1TreeListNode UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode1TreeListNode mUINode1TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode : DXTreeListNode
    {
        
        public UINode1TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode1TreeListNode1 UINode1TreeListNode1
        {
            get
            {
                if ((this.mUINode1TreeListNode1 == null))
                {
                    this.mUINode1TreeListNode1 = new UINode1TreeListNode1(this);
                }
                return this.mUINode1TreeListNode1;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode mUINode0TreeListNode;
        
        private UINode1TreeListNode1 mUINode1TreeListNode1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode : DXTreeListNode
    {
        
        public UINode0TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem150TreeListCell
        {
            get
            {
                if ((this.mUIItem150TreeListCell == null))
                {
                    this.mUIItem150TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem150TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem150TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem150TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode1 : DXTreeListNode
    {
        
        public UINode1TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem225TreeListCell
        {
            get
            {
                if ((this.mUIItem225TreeListCell == null))
                {
                    this.mUIItem225TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem225TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem225TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem225TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem225TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem225TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlRightClient : DXTestControl
    {
        
        public UIPanelControlRightClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlRight";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom1 UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom1(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom1 mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom1 : DXTestControl
    {
        
        public UIViewHostCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient1 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient1(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient1 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient1 : DXTestControl
    {
        
        public UIPcViewClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIEmployeeEditorsViewCustom UIEmployeeEditorsViewCustom
        {
            get
            {
                if ((this.mUIEmployeeEditorsViewCustom == null))
                {
                    this.mUIEmployeeEditorsViewCustom = new UIEmployeeEditorsViewCustom(this);
                }
                return this.mUIEmployeeEditorsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeEditorsViewCustom mUIEmployeeEditorsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeEditorsViewCustom : DXTestControl
    {
        
        public UIEmployeeEditorsViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeEditorsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeEditorsView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient1 UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient1(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient1 mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient1 : DXTestControl
    {
        
        public UIPcContentClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIXscContentScrollableControl UIXscContentScrollableControl
        {
            get
            {
                if ((this.mUIXscContentScrollableControl == null))
                {
                    this.mUIXscContentScrollableControl = new UIXscContentScrollableControl(this);
                }
                return this.mUIXscContentScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscContentScrollableControl mUIXscContentScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXscContentScrollableControl : DXScrollableControl
    {
        
        public UIXscContentScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGroupControlViewHostCustom UIGroupControlViewHostCustom
        {
            get
            {
                if ((this.mUIGroupControlViewHostCustom == null))
                {
                    this.mUIGroupControlViewHostCustom = new UIGroupControlViewHostCustom(this);
                }
                return this.mUIGroupControlViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlViewHostCustom mUIGroupControlViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlViewHostCustom : DXTestControl
    {
        
        public UIGroupControlViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControlViewHost";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGroupControlClient UIGroupControlClient
        {
            get
            {
                if ((this.mUIGroupControlClient == null))
                {
                    this.mUIGroupControlClient = new UIGroupControlClient(this);
                }
                return this.mUIGroupControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlClient mUIGroupControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlClient : DXTestControl
    {
        
        public UIGroupControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[3]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerAvailCustom UIEmployeeManagerAvailCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerAvailCustom == null))
                {
                    this.mUIEmployeeManagerAvailCustom = new UIEmployeeManagerAvailCustom(this);
                }
                return this.mUIEmployeeManagerAvailCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerAvailCustom mUIEmployeeManagerAvailCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerAvailCustom : DXTestControl
    {
        
        public UIEmployeeManagerAvailCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerAvailabilityPeriodsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerAvailabilityPeriodsView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UINYButton
        {
            get
            {
                if ((this.mUINYButton == null))
                {
                    this.mUINYButton = new DXButton(this);
                    #region Search Criteria
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.Name] = "dropDownButtonNew";
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
                    this.mUINYButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUINYButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUINYButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupContainerBarConMenu UIPopupContainerBarConMenu
        {
            get
            {
                if ((this.mUIPopupContainerBarConMenu == null))
                {
                    this.mUIPopupContainerBarConMenu = new UIPopupContainerBarConMenu(this);
                }
                return this.mUIPopupContainerBarConMenu;
            }
        }
        
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupContainerBarConMenu mUIPopupContainerBarConMenu;
        
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerBarConMenu : DXMenu
    {
        
        public UIPopupContainerBarConMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupContainerBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerBarControl";
            #endregion
        }
        
        #region Properties
        public UIPopupControlContaineClient UIPopupControlContaineClient
        {
            get
            {
                if ((this.mUIPopupControlContaineClient == null))
                {
                    this.mUIPopupControlContaineClient = new UIPopupControlContaineClient(this);
                }
                return this.mUIPopupControlContaineClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupControlContaineClient mUIPopupControlContaineClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupControlContaineClient : DXTestControl
    {
        
        public UIPopupControlContaineClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "popupControlContainerNew";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupControlContainer";
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UISmartDateEditToDateDateTimeEdit
        {
            get
            {
                if ((this.mUISmartDateEditToDateDateTimeEdit == null))
                {
                    this.mUISmartDateEditToDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUISmartDateEditToDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "smartDateEditToDate";
                    this.mUISmartDateEditToDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    #endregion
                }
                return this.mUISmartDateEditToDateDateTimeEdit;
            }
        }
        
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonNewOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public DXDateTimePicker UISmartDateEditFromDatDateTimeEdit
        {
            get
            {
                if ((this.mUISmartDateEditFromDatDateTimeEdit == null))
                {
                    this.mUISmartDateEditFromDatDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUISmartDateEditFromDatDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "smartDateEditFromDate";
                    this.mUISmartDateEditFromDatDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    #endregion
                }
                return this.mUISmartDateEditFromDatDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUISmartDateEditToDateDateTimeEdit;
        
        private DXButton mUIOKButton;
        
        private DXDateTimePicker mUISmartDateEditFromDatDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink7MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink7MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink7MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink7MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[7]";
                    this.mUIBarButtonItemLink7MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink7MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink7MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT4001InformasjonWindow : DXWindow
    {
        
        public UIGT4001InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4001 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4001 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4001 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
}
