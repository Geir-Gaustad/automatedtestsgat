// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _032_Test_Rekalkulering_Overfort_Lonn_GATW_4284
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// ApproveFredrikseLevel1nStep6
        /// </summary>
        public void ApproveFredrikseLevel1nStep6()
        {
            #region Variable Declarations
            WinButton uILedernivå1Button = this.UIEksportavvariabellønWindow.UIElektronisksignaturaClient.UILedernivå1Button;
            WinClient uITsEmpListClient = this.UIGodkjenningavvariabeWindow.UIItemWindow.UITsEmpListClient;
            WinButton uIGodkjennvalgtelinjerButton = this.UIGodkjenningavvariabeWindow.UIItemWindow11.UITsManagerLev1ListClient.UIGodkjennvalgtelinjerButton;
            WinButton uIJAButton = this.UIAPPOV4000BekreftWindow.UIItemWindow.UIAPPOV4000BekreftClient.UIJAButton;
            #endregion

            // Click '&Leder nivå1' button
            Mouse.Click(uILedernivå1Button, new Point(55, 9));

            // Click 'tsEmpList' client
            Mouse.Click(uITsEmpListClient, new Point(82, 19));

            // Click '&Godkjenn valgte linjer' button
            Mouse.Click(uIGodkjennvalgtelinjerButton, new Point(62, 19));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(40, 8));
        }
        
        /// <summary>
        /// ApproveFredrikseLevel2nStep6
        /// </summary>
        public void ApproveFredrikseLevel2nStep6()
        {
            #region Variable Declarations
            WinButton uILedernivå2Button = this.UIEksportavvariabellønWindow.UIElektronisksignaturaClient.UILedernivå2Button;
            WinClient uITsEmpListClient = this.UIGodkjenningavvariabeWindow.UIItemWindow.UITsEmpListClient;
            WinButton uIGodkjennvalgtelinjerButton = this.UIGodkjenningavvariabeWindow.UIItemWindow1.UITsEmpListClient.UIGodkjennvalgtelinjerButton;
            WinButton uIJAButton = this.UIAPPOV4000BekreftWindow.UIItemWindow.UIAPPOV4000BekreftClient.UIJAButton;
            #endregion

            // Click 'Leder nivå2' button
            Mouse.Click(uILedernivå2Button, new Point(48, 12));

            // Click 'tsEmpList' client
            Mouse.Click(uITsEmpListClient, new Point(72, 18));

            // Click '&Godkjenn valgte linjer' button
            Mouse.Click(uIGodkjennvalgtelinjerButton, new Point(71, 15));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(40, 16));
        }
        
        /// <summary>
        /// ApproveFredriksenStep6
        /// </summary>
        public void ApproveFredriksenStep6()
        {
            #region Variable Declarations
            WinButton uIAnsatteButton = this.UIEksportavvariabellønWindow.UIElektronisksignaturaClient.UIAnsatteButton;
            WinClient uITsEmpListClient = this.UIGodkjenningavvariabeWindow.UIItemWindow.UITsEmpListClient;
            WinButton uIGodkjennvalgtelinjerButton = this.UIGodkjenningavvariabeWindow.UIItemWindow1.UITsEmpListClient.UIGodkjennvalgtelinjerButton;
            #endregion

            // Click '&Ansatte' button
            Mouse.Click(uIAnsatteButton, new Point(58, 4));

            // Click 'tsEmpList' client
            Mouse.Click(uITsEmpListClient, new Point(40, 21));

            // Click '&Godkjenn valgte linjer' button
            Mouse.Click(uIGodkjennvalgtelinjerButton, new Point(63, 22));
        }
        
        /// <summary>
        /// ApproveGundersenLevel2nStep11
        /// </summary>
        public void ApproveGundersenLevel2nStep11()
        {
            #region Variable Declarations
            WinButton uILedernivå2Button = this.UIEksportavvariabellønWindow.UIElektronisksignaturaClient.UILedernivå2Button;
            #endregion

            // Click 'Leder nivå2' button
            Mouse.Click(uILedernivå2Button, new Point(63, 9));
        }
        
        /// <summary>
        /// ApproveGundersenLevel2nStep11_2
        /// </summary>
        public void ApproveGundersenLevel2nStep11_2()
        {
            #region Variable Declarations
            WinClient uITsManagerLev1ListClient = this.UIGodkjenningavvariabeWindow.UIItemWindow2.UITsManagerLev1ListClient;
            WinMenuItem uIVelgalleusignertelinMenuItem = this.UIItemWindow1.UIContextMenu.UIVelgalleusignertelinMenuItem;
            WinButton uIGodkjennvalgtelinjerButton = this.UIGodkjenningavvariabeWindow.UIItemWindow1.UITsEmpListClient.UIGodkjennvalgtelinjerButton;
            WinButton uIJAButton = this.UIAPPOV4000BekreftWindow.UIItemWindow.UIAPPOV4000BekreftClient.UIJAButton;
            #endregion

            // Click 'tsManagerLev1List' client
            Mouse.Click(uITsManagerLev1ListClient, new Point(95, 10));

            // Click 'Velg alle usignerte linjer (Hvite linjer)' menu item
            Mouse.Click(uIVelgalleusignertelinMenuItem, new Point(90, 10));

            // Click '&Godkjenn valgte linjer' button
            Mouse.Click(uIGodkjennvalgtelinjerButton, new Point(68, 17));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(41, 13));
        }
        
        /// <summary>
        /// ApproveLinesLevel1nStep11
        /// </summary>
        public void ApproveLinesLevel1nStep11()
        {
            #region Variable Declarations
            WinButton uILedernivå1Button = this.UIEksportavvariabellønWindow.UIElektronisksignaturaClient.UILedernivå1Button;
            #endregion

            // Click '&Leder nivå1' button
            Mouse.Click(uILedernivå1Button, new Point(50, 11));
        }
        
        /// <summary>
        /// ApproveLinesLevel1nStep11_1
        /// </summary>
        public void ApproveLinesLevel1nStep11_1()
        {
            #region Variable Declarations
            WinClient uITsManagerLev1ListClient = this.UIGodkjenningavvariabeWindow.UIItemWindow2.UITsManagerLev1ListClient;
            WinMenuItem uIVelgalleusignertelinMenuItem = this.UIItemWindow1.UIContextMenu.UIVelgalleusignertelinMenuItem;
            WinButton uIGodkjennvalgtelinjerButton = this.UIGodkjenningavvariabeWindow.UIItemWindow11.UITsManagerLev1ListClient.UIGodkjennvalgtelinjerButton;
            WinButton uIJAButton = this.UIAPPOV4000BekreftWindow.UIItemWindow.UIAPPOV4000BekreftClient.UIJAButton;
            #endregion

            // Click 'tsManagerLev1List' client
            Mouse.Click(uITsManagerLev1ListClient, new Point(94, 9));

            // Click 'Velg alle usignerte linjer (Hvite linjer)' menu item
            Mouse.Click(uIVelgalleusignertelinMenuItem, new Point(91, 5));

            // Click '&Godkjenn valgte linjer' button
            Mouse.Click(uIGodkjennvalgtelinjerButton, new Point(71, 19));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(35, 3));
        }
        
        /// <summary>
        /// ChangeRulesetGundersen - Use 'ChangeRulesetGundersenParams' to pass parameters into this method.
        /// </summary>
        public void ChangeRulesetGundersen()
        {
            #region Variable Declarations
            WinClient uIItemClient = this.UIRegelsettWindow.UIItemWindow.UIItemClient;
            WinClient uIItemClient1 = this.UIRegelsettWindow.UIRegelsettClient.UIItemClient;
            WinCheckBox uIBrukreglerforovertidCheckBox = this.UIRegelsettWindow.UIItemWindow1.UIItemClient.UIBrukreglerforovertidCheckBox;
            WinButton uIOKButton = this.UIRegelsettWindow.UIItemClient.UIOKButton;
            WinClient uIItemClient2 = this.UIRegelsettWindow.UIItemClient1.UIItemClient;
            #endregion

            // Click client
            Mouse.Click(uIItemClient, new Point(127, 115));

            // Click client
            Mouse.Click(uIItemClient1, new Point(87, 33));

            // Clear 'Bruk regler for overtid i forkant/etterkant' check box
            uIBrukreglerforovertidCheckBox.Checked = this.ChangeRulesetGundersenParams.UIBrukreglerforovertidCheckBoxChecked;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(28, 24));

            // Click client
            Mouse.Click(uIItemClient2, new Point(347, 26));
        }
        
        /// <summary>
        /// CheckEmpStep4 - Use 'CheckEmpStep4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpStep4()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIEndrekonteringWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of combo box equals 'Fredriksen, Frank - TURNUS - 100% - 1'
            Assert.AreEqual(this.CheckEmpStep4ExpectedValues.UIItemComboBoxSelectedItem, uIItemComboBox.SelectedItem);
        }
        
        /// <summary>
        /// CheckExtraInList - Use 'CheckExtraInListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckExtraInList()
        {
            #region Variable Declarations
            DXGroupRow uIGridControlGroupRowGroupRow = this.UIVisningavdataforekspWindow.UIGListTable.UIGridControlGroupRowGroupRow;
            DXCell uIOvertid100Cell = this.UIVisningavdataforekspWindow.UIGListTable.UIOvertid100Cell;
            DXCell uIItem775Cell = this.UIVisningavdataforekspWindow.UIGListTable.UIItem775Cell;
            #endregion

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Fredriksen, Frank'
            Assert.AreEqual(this.CheckExtraInListExpectedValues.UIGridControlGroupRowGroupRowValueAsString, uIGridControlGroupRowGroupRow.ValueAsString);

            // Verify that the 'Text' property of 'Overtid 100%' cell equals 'Overtid 100%'
            Assert.AreEqual(this.CheckExtraInListExpectedValues.UIOvertid100CellText, uIOvertid100Cell.Text);

            // Verify that the 'Text' property of '7,75' cell equals '7,75'
            Assert.AreEqual(this.CheckExtraInListExpectedValues.UIItem775CellText, uIItem775Cell.Text);
        }
        
        /// <summary>
        /// CheckOvertimeBeforeStep8 - Use 'CheckOvertimeBeforeStep8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOvertimeBeforeStep8()
        {
            #region Variable Declarations
            DXGroupRow uIGridControlGroupRowGroupRow = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIGridControlGroupRowGroupRow;
            DXCell uIItem310Overtid100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem775Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem775Cell;
            DXGroupRow uIGridControlGroupRowGroupRow1 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIGridControlGroupRowGroupRow1;
            DXCell uIItem300Overtid50Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem300Overtid50Cell;
            DXCell uIItem200Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200Cell;
            #endregion

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'T-Overtid i forkant av vakt 100%'
            Assert.AreEqual(this.CheckOvertimeBeforeStep8ExpectedValues.UIGridControlGroupRowGroupRowValueAsString, uIGridControlGroupRowGroupRow.ValueAsString);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckOvertimeBeforeStep8ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '7,75' cell equals '1,00'
            Assert.AreEqual(this.CheckOvertimeBeforeStep8ExpectedValues.UIItem775CellText, uIItem775Cell.Text);

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'T-Overtid i forkant av vakt 50%'
            Assert.AreEqual(this.CheckOvertimeBeforeStep8ExpectedValues.UIGridControlGroupRowGroupRow1ValueAsString, uIGridControlGroupRowGroupRow1.ValueAsString);

            // Verify that the 'Text' property of '300 - Overtid 50%' cell equals '300 - Overtid 50%'
            Assert.AreEqual(this.CheckOvertimeBeforeStep8ExpectedValues.UIItem300Overtid50CellText, uIItem300Overtid50Cell.Text);

            // Verify that the 'Text' property of '2,00' cell equals '2,00'
            Assert.AreEqual(this.CheckOvertimeBeforeStep8ExpectedValues.UIItem200CellText, uIItem200Cell.Text);
        }
        
        /// <summary>
        /// CheckOvertimeBehindStep8 - Use 'CheckOvertimeBehindStep8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOvertimeBehindStep8()
        {
            #region Variable Declarations
            DXGroupRow uIGridControlGroupRowGroupRow = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIGridControlGroupRowGroupRow;
            DXCell uIItem310Overtid100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem775Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem775Cell;
            DXGroupRow uIGridControlGroupRowGroupRow1 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIGridControlGroupRowGroupRow1;
            DXCell uIItem300Overtid50Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem300Overtid50Cell;
            DXCell uIItem200Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200Cell;
            #endregion

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'T-Overtid i etterkant av vakt 100%'
            Assert.AreEqual(this.CheckOvertimeBehindStep8ExpectedValues.UIGridControlGroupRowGroupRowValueAsString, uIGridControlGroupRowGroupRow.ValueAsString);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckOvertimeBehindStep8ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '7,75' cell equals '6,00'
            Assert.AreEqual(this.CheckOvertimeBehindStep8ExpectedValues.UIItem775CellText, uIItem775Cell.Text);

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'T-Overtid i etterkant av vakt 50%'
            Assert.AreEqual(this.CheckOvertimeBehindStep8ExpectedValues.UIGridControlGroupRowGroupRow1ValueAsString, uIGridControlGroupRowGroupRow1.ValueAsString);

            // Verify that the 'Text' property of '300 - Overtid 50%' cell equals '300 - Overtid 50%'
            Assert.AreEqual(this.CheckOvertimeBehindStep8ExpectedValues.UIItem300Overtid50CellText, uIItem300Overtid50Cell.Text);

            // Verify that the 'Text' property of '2,00' cell equals '2,00'
            Assert.AreEqual(this.CheckOvertimeBehindStep8ExpectedValues.UIItem200CellText, uIItem200Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep10 - Use 'CheckValuesStep10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep10()
        {
            #region Variable Declarations
            DXGroupRow uIGridControlGroupRowGroupRow = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIGridControlGroupRowGroupRow;
            DXCell uIOvertidiforkantavvakCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIOvertidiforkantavvakCell;
            DXCell uIItem300Overtid50Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem300Overtid50Cell;
            DXCell uIItem400Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem400Cell;
            DXCell uIOvertidietterkantavvCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIOvertidietterkantavvCell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            #endregion

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Gundersen, Gunnar'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIGridControlGroupRowGroupRowValueAsString, uIGridControlGroupRowGroupRow.ValueAsString);

            // Verify that the 'Text' property of 'Overtid i forkant av vakt' cell equals 'Overtid i forkant av vakt'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIOvertidiforkantavvakCellText, uIOvertidiforkantavvakCell.Text);

            // Verify that the 'Text' property of '300 - Overtid 50%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem300Overtid50CellText, uIItem300Overtid50Cell.Text);

            // Verify that the 'Text' property of '4,00' cell equals '3,00'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem400CellText, uIItem400Cell.Text);

            // Verify that the 'Text' property of 'Overtid i etterkant av vakt' cell equals 'Overtid i etterkant av vakt'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIOvertidietterkantavvCellText, uIOvertidietterkantavvCell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem800CellText, uIItem800Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep2 - Use 'CheckValuesStep2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep2()
        {
            #region Variable Declarations
            DXCell uIItem310Overtid100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem775Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem775Cell;
            DXTextEdit uIETime3Edit = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UIGcShiftDetailsClient.UITcRegistrationTypeTabList.UITpNewShiftClient.UIETime3Edit;
            DXTextEdit uIETime1Edit = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UIGcShiftDetailsClient.UITcRegistrationTypeTabList.UITpNewShiftClient.UIETime1Edit;
            DXCell uIItem110Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITabClockTypeCalcClient.UITcTableChartTabList.UITpClockTypeCalcTableClient.UIGClockTypeCalcTable.UIItem110Cell;
            DXCell uIOvertidhelstillingCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITabClockTypeCalcClient.UITcTableChartTabList.UITpClockTypeCalcTableClient.UIGClockTypeCalcTable.UIOvertidhelstillingCell;
            DXCell uIItem110Cell1 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITabClockTypeCalcClient.UITcTableChartTabList.UITpClockTypeCalcTableClient.UIGClockTypeCalcTable.UIItem110Cell1;
            DXCell uIOvertidhelstillingCell1 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITabClockTypeCalcClient.UITcTableChartTabList.UITpClockTypeCalcTableClient.UIGClockTypeCalcTable.UIOvertidhelstillingCell1;
            #endregion

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '7,75' cell equals '7,75'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem775CellText, uIItem775Cell.Text);

            // Verify that the 'Text' property of 'eTime[3]' text box equals '15:00'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIETime3EditText, uIETime3Edit.Text);

            // Verify that the 'Text' property of 'eTime[1]' text box equals '23:00'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIETime1EditText, uIETime1Edit.Text);

            // Verify that the 'Text' property of '110' cell equals '110'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem110CellText, uIItem110Cell.Text);

            // Verify that the 'Text' property of 'Overtid ( hel stilling )' cell equals 'Overtid ( hel stilling )'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIOvertidhelstillingCellText, uIOvertidhelstillingCell.Text);

            // Verify that the 'Text' property of '110' cell equals '110'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem110Cell1Text, uIItem110Cell1.Text);

            // Verify that the 'Text' property of 'Overtid ( hel stilling )' cell equals 'Overtid ( hel stilling )'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIOvertidhelstillingCell1Text, uIOvertidhelstillingCell1.Text);
        }
        
        /// <summary>
        /// CheckValuesStep3 - Use 'CheckValuesStep3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep3()
        {
            #region Variable Declarations
            DXCell uIItem300Overtid50Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem300Overtid50Cell;
            DXCell uIItem400Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem400Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem375Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem375Cell;
            #endregion

            // Verify that the 'Text' property of '300 - Overtid 50%' cell equals '300 - Overtid 50%'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem300Overtid50CellText, uIItem300Overtid50Cell.Text);

            // Verify that the 'Text' property of '4,00' cell equals '4,00'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem400CellText, uIItem400Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '3,75' cell equals '3,75'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem375CellText, uIItem375Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep5 - Use 'CheckValuesStep5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep5()
        {
            #region Variable Declarations
            DXCell uIItem300Overtid50Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem300Overtid50Cell;
            DXCell uIItem400Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem400Cell;
            #endregion

            // Verify that the 'Text' property of '300 - Overtid 50%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem300Overtid50CellText, uIItem300Overtid50Cell.Text);

            // Verify that the 'Text' property of '4,00' cell equals '7,75'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem400CellText, uIItem400Cell.Text);
        }
        
        /// <summary>
        /// ClickStartExport
        /// </summary>
        public void ClickStartExport()
        {
            #region Variable Declarations
            DXButton uIStarteksportButton = this.UIVisningavdataforekspWindow.UIGsPanelControl1Client.UIStarteksportButton;
            #endregion

            // Click 'Start eksport!' button
            Mouse.Click(uIStarteksportButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickStartTransfere
        /// </summary>
        public void ClickStartTransfere()
        {
            #region Variable Declarations
            WinButton uIStartButton = this.UIEksportavvariabellønWindow.UIStarteksportavlønnsdClient.UIStartButton;
            #endregion

            // Click '&Start' button
            Mouse.Click(uIStartButton, new Point(25, 13));
        }
        
        /// <summary>
        /// CopyToClipBoardStep4
        /// </summary>
        public void CopyToClipBoardStep4()
        {
            #region Variable Declarations
            WinClient uIEndrekonteringClient = this.UIEndrekonteringWindow.UIItemWindow.UIEndrekonteringClient;
            WinMenuItem uIItemMenuItem1 = this.UIItemWindow1.UIContextMenu.UIItemMenuItem1;
            #endregion

            // Right-Click 'Endre kontering' client
            Mouse.Click(uIEndrekonteringClient, MouseButtons.Right, ModifierKeys.None, new Point(77, 20));

            // Click menu item numbered 5 in 'Context' menu item
            Mouse.Click(uIItemMenuItem1, new Point(101, 12));
        }
        
        /// <summary>
        /// DragFredriksenToExtraStep2
        /// </summary>
        public void DragFredriksenToExtraStep2()
        {
            #region Variable Declarations
            DXCell uIFredriksenFrankCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UIFredriksenFrankCell;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Fredriksen, Frank' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(20, 22));
            Mouse.StartDragging(uIFredriksenFrankCell, new Point(33, 6));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(20, 22));
        }
        
        /// <summary>
        /// DragGundersenToExtraStep8
        /// </summary>
        public void DragGundersenToExtraStep8()
        {
            #region Variable Declarations
            DXCell uIGundersenGunnarCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIGundersenGunnarCell1;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Gundersen, Gunnar' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(24, 29));
            Mouse.StartDragging(uIGundersenGunnarCell1, new Point(17, 7));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(24, 29));
        }
        
        /// <summary>
        /// OpenDeleteEffectuatuationFredriksenLine
        /// </summary>
        public void OpenDeleteEffectuatuationFredriksenLine()
        {
            #region Variable Declarations
            DXCell uIFredriksenFrankCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFredriksenFrankCell;
            DXMenuBaseButtonItem uISlettiverksettingpåaMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UISlettiverksettingpåaMenuBaseButtonItem;
            #endregion

            // Right-Click 'Fredriksen, Frank' cell
            Mouse.Click(uIFredriksenFrankCell, MouseButtons.Right, ModifierKeys.None, new Point(62, 5));

            // Click 'Slett iverksetting på ansatt (Fredriksen, Frank)...' MenuBaseButtonItem
            Mouse.Click(uISlettiverksettingpåaMenuBaseButtonItem, new Point(134, 8));
        }
        
        /// <summary>
        /// OpenEffectuateFredriksenLine
        /// </summary>
        public void OpenEffectuateFredriksenLine()
        {
            #region Variable Declarations
            DXCell uIFredriksenFrankCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFredriksenFrankCell;
            DXMenuBaseButtonItem uIIverksettansattFredrMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIIverksettansattFredrMenuBaseButtonItem;
            #endregion

            // Right-Click 'Fredriksen, Frank' cell
            Mouse.Click(uIFredriksenFrankCell, MouseButtons.Right, ModifierKeys.None, new Point(61, 7));

            // Click 'Iverksett ansatt (Fredriksen, Frank)...' MenuBaseButtonItem
            Mouse.Click(uIIverksettansattFredrMenuBaseButtonItem, new Point(127, 10));
        }
        
        /// <summary>
        /// OpenEffectuateGundersenLine
        /// </summary>
        public void OpenEffectuateGundersenLine()
        {
            #region Variable Declarations
            DXCell uIGundersenGunnarCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGundersenGunnarCell;
            DXMenuBaseButtonItem uIIverksettansattFredrMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIIverksettansattFredrMenuBaseButtonItem;
            #endregion

            // Right-Click 'Gundersen, Gunnar' cell
            Mouse.Click(uIGundersenGunnarCell, MouseButtons.Right, ModifierKeys.None, new Point(94, 8));

            // Click 'Iverksett ansatt (Fredriksen, Frank)...' MenuBaseButtonItem
            Mouse.Click(uIIverksettansattFredrMenuBaseButtonItem, new Point(112, 11));
        }
        
        /// <summary>
        /// OpenExtraShiftStep4
        /// </summary>
        public void OpenExtraShiftStep4()
        {
            #region Variable Declarations
            WinClient uITimelisteClient = this.UIGatWindow.UIItemWindow.UITimelisteClient;
            #endregion

            // Double-Click 'Timeliste' client
            Mouse.DoubleClick(uITimelisteClient, new Point(130, 25));
        }
        
        /// <summary>
        /// SelectGunnar
        /// </summary>
        public void SelectGunnar()
        {
            #region Variable Declarations
            WinClient uIAnsatteClient = this.UIGatWindow.UIItemWindow2.UIAnsatteClient;
            #endregion

            // Click 'Ansatte' client
            Mouse.Click(uIAnsatteClient, new Point(64, 77));
        }
        
        /// <summary>
        /// SetReport60Values2 - Use 'SetReport60Values2Params' to pass parameters into this method.
        /// </summary>
        public void SetReport60Values2()
        {
            #region Variable Declarations
            WinRadioButton uIPunsjegrunnlagforlønRadioButton = this.UIGatWindow.UIRapporttypeWindow.UIRapporttypeClient.UIPunsjegrunnlagforlønRadioButton;
            WinCheckBox uIKungodkjentetimelistCheckBox = this.UIGatWindow.UIRapporttypeWindow.UIRapporttypeClient.UIKungodkjentetimelistCheckBox;
            WinButton uISendtilutbetalingviaButton = this.UIGatWindow.UIItemWindow3.UIItemClient.UISendtilutbetalingviaButton;
            #endregion

            // Select 'Punsjegrunnlag for lønningskontoret (Punsje)' radio button
            uIPunsjegrunnlagforlønRadioButton.Selected = this.SetReport60Values2Params.UIPunsjegrunnlagforlønRadioButtonSelected;

            // Select 'Kun godkjente timelister' check box
            uIKungodkjentetimelistCheckBox.Checked = this.SetReport60Values2Params.UIKungodkjentetimelistCheckBoxChecked;

            // Click 'Send til utbetaling via lønnssystem' button
            Mouse.Click(uISendtilutbetalingviaButton, new Point(41, 9));
        }
        
        /// <summary>
        /// CheckFourRowsInListStep11 - Use 'CheckFourRowsInListStep11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFourRowsInListStep11()
        {
            #region Variable Declarations
            WinMenuItem uIRows4MenuItem = this.UIItemWindow1.UIContextMenu.UIRows4MenuItem;
            #endregion

            // Verify that the 'Name' property of 'Rows: 4' menu item equals 'Rows: 4'
            Assert.AreEqual(this.CheckFourRowsInListStep11ExpectedValues.UIRows4MenuItemName, uIRows4MenuItem.Name);
        }
        
        /// <summary>
        /// OpenMenu
        /// </summary>
        public void OpenMenu()
        {
            #region Variable Declarations
            WinClient uITsEmpListClient = this.UIGodkjenningavvariabeWindow.UIItemWindow.UITsEmpListClient;
            #endregion

            // Right-Click 'tsEmpList' client
            Mouse.Click(uITsEmpListClient, MouseButtons.Right, ModifierKeys.None, new Point(38, 21));
        }
        
        /// <summary>
        /// CheckExtraInListStep11_2 - Use 'CheckExtraInListStep11_2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckExtraInListStep11_2()
        {
            #region Variable Declarations
            WinMenuItem uIRows4MenuItem = this.UIItemWindow1.UIContextMenu.UIRows4MenuItem;
            #endregion

            // Verify that the 'Name' property of 'Rows: 4' menu item equals 'Rows: 4'
            Assert.AreEqual(this.CheckExtraInListStep11_2ExpectedValues.UIRows4MenuItemName, uIRows4MenuItem.Name);
        }
        
        /// <summary>
        /// SortList
        /// </summary>
        public void SortList()
        {
            #region Variable Declarations
            DXColumnHeader uIDetails_AmountColumnHeader = this.UIVisningavdataforekspWindow.UIGListTable.UIDetails_AmountColumnHeader;
            #endregion

            // Click 'details_Amount' column header
            Mouse.Click(uIDetails_AmountColumnHeader, new Point(54, 6));
        }
        
        /// <summary>
        /// CheckExtraInListStep11 - Use 'CheckExtraInListStep11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckExtraInListStep11()
        {
            #region Variable Declarations
            DXCell uIItem775Cell = this.UIVisningavdataforekspWindow.UIGListTable.UIItem775Cell;
            DXCell uIOvertid100Cell = this.UIVisningavdataforekspWindow.UIGListTable.UIOvertid100Cell;
            DXCell uIItem1Cell = this.UIVisningavdataforekspWindow.UIGListTable.UIItem1Cell;
            DXCell uIOvertid50Cell = this.UIVisningavdataforekspWindow.UIGListTable.UIOvertid50Cell;
            DXCell uIItem2Cell = this.UIVisningavdataforekspWindow.UIGListTable.UIItem2Cell;
            DXCell uIOvertid100Cell1 = this.UIVisningavdataforekspWindow.UIGListTable.UIOvertid100Cell1;
            DXCell uIItem2Cell1 = this.UIVisningavdataforekspWindow.UIGListTable.UIItem2Cell1;
            DXCell uIOvertid50Cell1 = this.UIVisningavdataforekspWindow.UIGListTable.UIOvertid50Cell1;
            #endregion

            // Verify that the 'Text' property of '7,75' cell equals '1'
            Assert.AreEqual(this.CheckExtraInListStep11ExpectedValues.UIItem775CellText, uIItem775Cell.Text);

            // Verify that the 'Text' property of 'Overtid 100%' cell equals 'Overtid 100%'
            Assert.AreEqual(this.CheckExtraInListStep11ExpectedValues.UIOvertid100CellText, uIOvertid100Cell.Text);

            // Verify that the 'Text' property of '1' cell equals '2'
            Assert.AreEqual(this.CheckExtraInListStep11ExpectedValues.UIItem1CellText, uIItem1Cell.Text);

            // Verify that the 'Text' property of 'Overtid 50%' cell equals 'Overtid 50%'
            Assert.AreEqual(this.CheckExtraInListStep11ExpectedValues.UIOvertid50CellText, uIOvertid50Cell.Text);

            // Verify that the 'Text' property of '2' cell equals '2'
            Assert.AreEqual(this.CheckExtraInListStep11ExpectedValues.UIItem2CellText, uIItem2Cell.Text);

            // Verify that the 'Text' property of 'Overtid 100%' cell equals 'Overtid 50%'
            Assert.AreEqual(this.CheckExtraInListStep11ExpectedValues.UIOvertid100Cell1Text, uIOvertid100Cell1.Text);

            // Verify that the 'Text' property of '2' cell equals '6'
            Assert.AreEqual(this.CheckExtraInListStep11ExpectedValues.UIItem2Cell1Text, uIItem2Cell1.Text);

            // Verify that the 'Text' property of 'Overtid 50%' cell equals 'Overtid 100%'
            Assert.AreEqual(this.CheckExtraInListStep11ExpectedValues.UIOvertid50Cell1Text, uIOvertid50Cell1.Text);
        }
        
        /// <summary>
        /// CheckLinesTransferedStep11 - Use 'CheckLinesTransferedStep11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLinesTransferedStep11()
        {
            #region Variable Declarations
            DXCell uIKlartiloverføringCell = this.UIExportloggWindow.UIGsLayoutControl1Custom.UI_LayoutGroup_RootLayoutGroup.UI_LayoutItem_JobsLayoutControlItem.UIGsPanelControl1Client.UI_JobsGridTable.UIKlartiloverføringCell;
            DXTestControl uI_Label_File_LinesExpLabel = this.UIExportloggWindow.UIGsLayoutControl1Custom.UI_LayoutGroup_RootLayoutGroup.UI_TabControl_ExportTrTabbedGroup.UI_LayoutTab_FileBasedLayoutGroup.UI_LayoutItem_FileBaseLayoutControlItem.UIGsPanelControl6Client.UIGsGroupControl2Client.UI_Label_File_LinesExpLabel;
            DXTestControl uI_Label_File_LinesExpLabel1 = this.UIExportloggWindow.UIGsLayoutControl1Custom.UI_LayoutGroup_RootLayoutGroup.UI_TabControl_ExportTrTabbedGroup.UI_LayoutTab_FileBasedLayoutGroup.UI_LayoutItem_FileBaseLayoutControlItem.UIGsPanelControl6Client.UIGsGroupControl2Client.UI_Label_File_LinesExpLabel1;
            DXTestControl uI_Label_File_TotalLinLabel = this.UIExportloggWindow.UIGsLayoutControl1Custom.UI_LayoutGroup_RootLayoutGroup.UI_TabControl_ExportTrTabbedGroup.UI_LayoutTab_FileBasedLayoutGroup.UI_LayoutItem_FileBaseLayoutControlItem.UIGsPanelControl6Client.UIGsGroupControl2Client.UI_Label_File_TotalLinLabel;
            DXTestControl uI_Label_File_TotalLinLabel1 = this.UIExportloggWindow.UIGsLayoutControl1Custom.UI_LayoutGroup_RootLayoutGroup.UI_TabControl_ExportTrTabbedGroup.UI_LayoutTab_FileBasedLayoutGroup.UI_LayoutItem_FileBaseLayoutControlItem.UIGsPanelControl6Client.UIGsGroupControl2Client.UI_Label_File_TotalLinLabel1;
            #endregion

            // Verify that the 'Text' property of 'Klar til overføring' cell equals 'Klar til overføring'
            Assert.AreEqual(this.CheckLinesTransferedStep11ExpectedValues.UIKlartiloverføringCellText, uIKlartiloverføringCell.Text);

            // Verify that the 'Text' property of '_Label_File_LinesExported' label equals 'Linjer eksportert'
            Assert.AreEqual(this.CheckLinesTransferedStep11ExpectedValues.UI_Label_File_LinesExpLabelText, uI_Label_File_LinesExpLabel.Text);

            // Verify that the 'Text' property of '_Label_File_LinesExported_Value' label equals '4'
            Assert.AreEqual(this.CheckLinesTransferedStep11ExpectedValues.UI_Label_File_LinesExpLabel1Text, uI_Label_File_LinesExpLabel1.Text);

            // Verify that the 'Text' property of '_Label_File_TotalLines' label equals 'Totalt'
            Assert.AreEqual(this.CheckLinesTransferedStep11ExpectedValues.UI_Label_File_TotalLinLabelText, uI_Label_File_TotalLinLabel.Text);

            // Verify that the 'Text' property of '_Label_File_TotalLines_Value' label equals '4'
            Assert.AreEqual(this.CheckLinesTransferedStep11ExpectedValues.UI_Label_File_TotalLinLabel1Text, uI_Label_File_TotalLinLabel1.Text);
        }
        
        #region Properties
        public virtual ChangeRulesetGundersenParams ChangeRulesetGundersenParams
        {
            get
            {
                if ((this.mChangeRulesetGundersenParams == null))
                {
                    this.mChangeRulesetGundersenParams = new ChangeRulesetGundersenParams();
                }
                return this.mChangeRulesetGundersenParams;
            }
        }
        
        public virtual CheckEmpStep4ExpectedValues CheckEmpStep4ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpStep4ExpectedValues == null))
                {
                    this.mCheckEmpStep4ExpectedValues = new CheckEmpStep4ExpectedValues();
                }
                return this.mCheckEmpStep4ExpectedValues;
            }
        }
        
        public virtual CheckExtraInListExpectedValues CheckExtraInListExpectedValues
        {
            get
            {
                if ((this.mCheckExtraInListExpectedValues == null))
                {
                    this.mCheckExtraInListExpectedValues = new CheckExtraInListExpectedValues();
                }
                return this.mCheckExtraInListExpectedValues;
            }
        }
        
        public virtual CheckOvertimeBeforeStep8ExpectedValues CheckOvertimeBeforeStep8ExpectedValues
        {
            get
            {
                if ((this.mCheckOvertimeBeforeStep8ExpectedValues == null))
                {
                    this.mCheckOvertimeBeforeStep8ExpectedValues = new CheckOvertimeBeforeStep8ExpectedValues();
                }
                return this.mCheckOvertimeBeforeStep8ExpectedValues;
            }
        }
        
        public virtual CheckOvertimeBehindStep8ExpectedValues CheckOvertimeBehindStep8ExpectedValues
        {
            get
            {
                if ((this.mCheckOvertimeBehindStep8ExpectedValues == null))
                {
                    this.mCheckOvertimeBehindStep8ExpectedValues = new CheckOvertimeBehindStep8ExpectedValues();
                }
                return this.mCheckOvertimeBehindStep8ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep10ExpectedValues CheckValuesStep10ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep10ExpectedValues == null))
                {
                    this.mCheckValuesStep10ExpectedValues = new CheckValuesStep10ExpectedValues();
                }
                return this.mCheckValuesStep10ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep2ExpectedValues CheckValuesStep2ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep2ExpectedValues == null))
                {
                    this.mCheckValuesStep2ExpectedValues = new CheckValuesStep2ExpectedValues();
                }
                return this.mCheckValuesStep2ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep3ExpectedValues CheckValuesStep3ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep3ExpectedValues == null))
                {
                    this.mCheckValuesStep3ExpectedValues = new CheckValuesStep3ExpectedValues();
                }
                return this.mCheckValuesStep3ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep5ExpectedValues CheckValuesStep5ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep5ExpectedValues == null))
                {
                    this.mCheckValuesStep5ExpectedValues = new CheckValuesStep5ExpectedValues();
                }
                return this.mCheckValuesStep5ExpectedValues;
            }
        }
        
        public virtual SetReport60Values2Params SetReport60Values2Params
        {
            get
            {
                if ((this.mSetReport60Values2Params == null))
                {
                    this.mSetReport60Values2Params = new SetReport60Values2Params();
                }
                return this.mSetReport60Values2Params;
            }
        }
        
        public virtual CheckFourRowsInListStep11ExpectedValues CheckFourRowsInListStep11ExpectedValues
        {
            get
            {
                if ((this.mCheckFourRowsInListStep11ExpectedValues == null))
                {
                    this.mCheckFourRowsInListStep11ExpectedValues = new CheckFourRowsInListStep11ExpectedValues();
                }
                return this.mCheckFourRowsInListStep11ExpectedValues;
            }
        }
        
        public virtual CheckExtraInListStep11_2ExpectedValues CheckExtraInListStep11_2ExpectedValues
        {
            get
            {
                if ((this.mCheckExtraInListStep11_2ExpectedValues == null))
                {
                    this.mCheckExtraInListStep11_2ExpectedValues = new CheckExtraInListStep11_2ExpectedValues();
                }
                return this.mCheckExtraInListStep11_2ExpectedValues;
            }
        }
        
        public virtual CheckExtraInListStep11ExpectedValues CheckExtraInListStep11ExpectedValues
        {
            get
            {
                if ((this.mCheckExtraInListStep11ExpectedValues == null))
                {
                    this.mCheckExtraInListStep11ExpectedValues = new CheckExtraInListStep11ExpectedValues();
                }
                return this.mCheckExtraInListStep11ExpectedValues;
            }
        }
        
        public virtual CheckLinesTransferedStep11ExpectedValues CheckLinesTransferedStep11ExpectedValues
        {
            get
            {
                if ((this.mCheckLinesTransferedStep11ExpectedValues == null))
                {
                    this.mCheckLinesTransferedStep11ExpectedValues = new CheckLinesTransferedStep11ExpectedValues();
                }
                return this.mCheckLinesTransferedStep11ExpectedValues;
            }
        }
        
        public UIMerarbeidovertidWindow UIMerarbeidovertidWindow
        {
            get
            {
                if ((this.mUIMerarbeidovertidWindow == null))
                {
                    this.mUIMerarbeidovertidWindow = new UIMerarbeidovertidWindow();
                }
                return this.mUIMerarbeidovertidWindow;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIRekalkuleringWindow UIRekalkuleringWindow
        {
            get
            {
                if ((this.mUIRekalkuleringWindow == null))
                {
                    this.mUIRekalkuleringWindow = new UIRekalkuleringWindow();
                }
                return this.mUIRekalkuleringWindow;
            }
        }
        
        public UIEndrekonteringWindow UIEndrekonteringWindow
        {
            get
            {
                if ((this.mUIEndrekonteringWindow == null))
                {
                    this.mUIEndrekonteringWindow = new UIEndrekonteringWindow();
                }
                return this.mUIEndrekonteringWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIEksportavvariabellønWindow UIEksportavvariabellønWindow
        {
            get
            {
                if ((this.mUIEksportavvariabellønWindow == null))
                {
                    this.mUIEksportavvariabellønWindow = new UIEksportavvariabellønWindow();
                }
                return this.mUIEksportavvariabellønWindow;
            }
        }
        
        public UIGodkjenningavvariabeWindow UIGodkjenningavvariabeWindow
        {
            get
            {
                if ((this.mUIGodkjenningavvariabeWindow == null))
                {
                    this.mUIGodkjenningavvariabeWindow = new UIGodkjenningavvariabeWindow();
                }
                return this.mUIGodkjenningavvariabeWindow;
            }
        }
        
        public UIAPPOV4000BekreftWindow UIAPPOV4000BekreftWindow
        {
            get
            {
                if ((this.mUIAPPOV4000BekreftWindow == null))
                {
                    this.mUIAPPOV4000BekreftWindow = new UIAPPOV4000BekreftWindow();
                }
                return this.mUIAPPOV4000BekreftWindow;
            }
        }
        
        public UIVisningavdataforekspWindow UIVisningavdataforekspWindow
        {
            get
            {
                if ((this.mUIVisningavdataforekspWindow == null))
                {
                    this.mUIVisningavdataforekspWindow = new UIVisningavdataforekspWindow();
                }
                return this.mUIVisningavdataforekspWindow;
            }
        }
        
        public UIRegelsettWindow UIRegelsettWindow
        {
            get
            {
                if ((this.mUIRegelsettWindow == null))
                {
                    this.mUIRegelsettWindow = new UIRegelsettWindow();
                }
                return this.mUIRegelsettWindow;
            }
        }
        
        public UIExportloggWindow UIExportloggWindow
        {
            get
            {
                if ((this.mUIExportloggWindow == null))
                {
                    this.mUIExportloggWindow = new UIExportloggWindow();
                }
                return this.mUIExportloggWindow;
            }
        }
        #endregion
        
        #region Fields
        private ChangeRulesetGundersenParams mChangeRulesetGundersenParams;
        
        private CheckEmpStep4ExpectedValues mCheckEmpStep4ExpectedValues;
        
        private CheckExtraInListExpectedValues mCheckExtraInListExpectedValues;
        
        private CheckOvertimeBeforeStep8ExpectedValues mCheckOvertimeBeforeStep8ExpectedValues;
        
        private CheckOvertimeBehindStep8ExpectedValues mCheckOvertimeBehindStep8ExpectedValues;
        
        private CheckValuesStep10ExpectedValues mCheckValuesStep10ExpectedValues;
        
        private CheckValuesStep2ExpectedValues mCheckValuesStep2ExpectedValues;
        
        private CheckValuesStep3ExpectedValues mCheckValuesStep3ExpectedValues;
        
        private CheckValuesStep5ExpectedValues mCheckValuesStep5ExpectedValues;
        
        private SetReport60Values2Params mSetReport60Values2Params;
        
        private CheckFourRowsInListStep11ExpectedValues mCheckFourRowsInListStep11ExpectedValues;
        
        private CheckExtraInListStep11_2ExpectedValues mCheckExtraInListStep11_2ExpectedValues;
        
        private CheckExtraInListStep11ExpectedValues mCheckExtraInListStep11ExpectedValues;
        
        private CheckLinesTransferedStep11ExpectedValues mCheckLinesTransferedStep11ExpectedValues;
        
        private UIMerarbeidovertidWindow mUIMerarbeidovertidWindow;
        
        private UIGatWindow mUIGatWindow;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UIRekalkuleringWindow mUIRekalkuleringWindow;
        
        private UIEndrekonteringWindow mUIEndrekonteringWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UIEksportavvariabellønWindow mUIEksportavvariabellønWindow;
        
        private UIGodkjenningavvariabeWindow mUIGodkjenningavvariabeWindow;
        
        private UIAPPOV4000BekreftWindow mUIAPPOV4000BekreftWindow;
        
        private UIVisningavdataforekspWindow mUIVisningavdataforekspWindow;
        
        private UIRegelsettWindow mUIRegelsettWindow;
        
        private UIExportloggWindow mUIExportloggWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeRulesetGundersen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ChangeRulesetGundersenParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Bruk regler for overtid i forkant/etterkant' check box
        /// </summary>
        public bool UIBrukreglerforovertidCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpStep4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpStep4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of combo box equals 'Fredriksen, Frank - TURNUS - 100% - 1'
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Fredriksen, Frank - TURNUS - 100% - 1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckExtraInList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckExtraInListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Fredriksen, Frank'
        /// </summary>
        public string UIGridControlGroupRowGroupRowValueAsString = "Fredriksen, Frank";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid 100%' cell equals 'Overtid 100%'
        /// </summary>
        public string UIOvertid100CellText = "Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,75' cell equals '7,75'
        /// </summary>
        public string UIItem775CellText = "7,75";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOvertimeBeforeStep8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOvertimeBeforeStep8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'T-Overtid i forkant av vakt 100%'
        /// </summary>
        public string UIGridControlGroupRowGroupRowValueAsString = "T-Overtid i forkant av vakt 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,75' cell equals '1,00'
        /// </summary>
        public string UIItem775CellText = "1,00";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'T-Overtid i forkant av vakt 50%'
        /// </summary>
        public string UIGridControlGroupRowGroupRow1ValueAsString = "T-Overtid i forkant av vakt 50%";
        
        /// <summary>
        /// Verify that the 'Text' property of '300 - Overtid 50%' cell equals '300 - Overtid 50%'
        /// </summary>
        public string UIItem300Overtid50CellText = "300 - Overtid 50%";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '2,00'
        /// </summary>
        public string UIItem200CellText = "2,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOvertimeBehindStep8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOvertimeBehindStep8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'T-Overtid i etterkant av vakt 100%'
        /// </summary>
        public string UIGridControlGroupRowGroupRowValueAsString = "T-Overtid i etterkant av vakt 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,75' cell equals '6,00'
        /// </summary>
        public string UIItem775CellText = "6,00";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'T-Overtid i etterkant av vakt 50%'
        /// </summary>
        public string UIGridControlGroupRowGroupRow1ValueAsString = "T-Overtid i etterkant av vakt 50%";
        
        /// <summary>
        /// Verify that the 'Text' property of '300 - Overtid 50%' cell equals '300 - Overtid 50%'
        /// </summary>
        public string UIItem300Overtid50CellText = "300 - Overtid 50%";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '2,00'
        /// </summary>
        public string UIItem200CellText = "2,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Gundersen, Gunnar'
        /// </summary>
        public string UIGridControlGroupRowGroupRowValueAsString = "Gundersen, Gunnar";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid i forkant av vakt' cell equals 'Overtid i forkant av vakt'
        /// </summary>
        public string UIOvertidiforkantavvakCellText = "Overtid i forkant av vakt";
        
        /// <summary>
        /// Verify that the 'Text' property of '300 - Overtid 50%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem300Overtid50CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,00' cell equals '3,00'
        /// </summary>
        public string UIItem400CellText = "3,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid i etterkant av vakt' cell equals 'Overtid i etterkant av vakt'
        /// </summary>
        public string UIOvertidietterkantavvCellText = "Overtid i etterkant av vakt";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,75' cell equals '7,75'
        /// </summary>
        public string UIItem775CellText = "7,75";
        
        /// <summary>
        /// Verify that the 'Text' property of 'eTime[3]' text box equals '15:00'
        /// </summary>
        public string UIETime3EditText = "15:00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'eTime[1]' text box equals '23:00'
        /// </summary>
        public string UIETime1EditText = "23:00";
        
        /// <summary>
        /// Verify that the 'Text' property of '110' cell equals '110'
        /// </summary>
        public string UIItem110CellText = "110";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid ( hel stilling )' cell equals 'Overtid ( hel stilling )'
        /// </summary>
        public string UIOvertidhelstillingCellText = "Overtid ( hel stilling )";
        
        /// <summary>
        /// Verify that the 'Text' property of '110' cell equals '110'
        /// </summary>
        public string UIItem110Cell1Text = "110";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid ( hel stilling )' cell equals 'Overtid ( hel stilling )'
        /// </summary>
        public string UIOvertidhelstillingCell1Text = "Overtid ( hel stilling )";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '300 - Overtid 50%' cell equals '300 - Overtid 50%'
        /// </summary>
        public string UIItem300Overtid50CellText = "300 - Overtid 50%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,00' cell equals '4,00'
        /// </summary>
        public string UIItem400CellText = "4,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,75' cell equals '3,75'
        /// </summary>
        public string UIItem375CellText = "3,75";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '300 - Overtid 50%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem300Overtid50CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,00' cell equals '7,75'
        /// </summary>
        public string UIItem400CellText = "7,75";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetReport60Values2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetReport60Values2Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Punsjegrunnlag for lønningskontoret (Punsje)' radio button
        /// </summary>
        public bool UIPunsjegrunnlagforlønRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Kun godkjente timelister' check box
        /// </summary>
        public bool UIKungodkjentetimelistCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFourRowsInListStep11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckFourRowsInListStep11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Rows: 4' menu item equals 'Rows: 4'
        /// </summary>
        public string UIRows4MenuItemName = "Rows: 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckExtraInListStep11_2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckExtraInListStep11_2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Rows: 4' menu item equals 'Rows: 4'
        /// </summary>
        public string UIRows4MenuItemName = "Rows: 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckExtraInListStep11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckExtraInListStep11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '7,75' cell equals '1'
        /// </summary>
        public string UIItem775CellText = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid 100%' cell equals 'Overtid 100%'
        /// </summary>
        public string UIOvertid100CellText = "Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' cell equals '2'
        /// </summary>
        public string UIItem1CellText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid 50%' cell equals 'Overtid 50%'
        /// </summary>
        public string UIOvertid50CellText = "Overtid 50%";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' cell equals '2'
        /// </summary>
        public string UIItem2CellText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid 100%' cell equals 'Overtid 50%'
        /// </summary>
        public string UIOvertid100Cell1Text = "Overtid 50%";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' cell equals '6'
        /// </summary>
        public string UIItem2Cell1Text = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid 50%' cell equals 'Overtid 100%'
        /// </summary>
        public string UIOvertid50Cell1Text = "Overtid 100%";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLinesTransferedStep11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLinesTransferedStep11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Klar til overføring' cell equals 'Klar til overføring'
        /// </summary>
        public string UIKlartiloverføringCellText = "Klar til overføring";
        
        /// <summary>
        /// Verify that the 'Text' property of '_Label_File_LinesExported' label equals 'Linjer eksportert'
        /// </summary>
        public string UI_Label_File_LinesExpLabelText = "Linjer eksportert";
        
        /// <summary>
        /// Verify that the 'Text' property of '_Label_File_LinesExported_Value' label equals '4'
        /// </summary>
        public string UI_Label_File_LinesExpLabel1Text = "4";
        
        /// <summary>
        /// Verify that the 'Text' property of '_Label_File_TotalLines' label equals 'Totalt'
        /// </summary>
        public string UI_Label_File_TotalLinLabelText = "Totalt";
        
        /// <summary>
        /// Verify that the 'Text' property of '_Label_File_TotalLines_Value' label equals '4'
        /// </summary>
        public string UI_Label_File_TotalLinLabel1Text = "4";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMerarbeidovertidWindow : DXWindow
    {
        
        public UIMerarbeidovertidWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Merarbeid / overtid";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl1Client UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        
        public UIPanClientClient UIPanClientClient
        {
            get
            {
                if ((this.mUIPanClientClient == null))
                {
                    this.mUIPanClientClient = new UIPanClientClient(this);
                }
                return this.mUIPanClientClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl1Client mUIGsPanelControl1Client;
        
        private UIPanClientClient mUIPanClientClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl1Client : DXTestControl
    {
        
        public UIGsPanelControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSave";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanClientClient : DXTestControl
    {
        
        public UIPanClientClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panClient";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITcClientTabList UITcClientTabList
        {
            get
            {
                if ((this.mUITcClientTabList == null))
                {
                    this.mUITcClientTabList = new UITcClientTabList(this);
                }
                return this.mUITcClientTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcClientTabList mUITcClientTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcClientTabList : DXTestControl
    {
        
        public UITcClientTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcClient";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITpMainClient UITpMainClient
        {
            get
            {
                if ((this.mUITpMainClient == null))
                {
                    this.mUITpMainClient = new UITpMainClient(this);
                }
                return this.mUITpMainClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpMainClient mUITpMainClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpMainClient : DXTestControl
    {
        
        public UITpMainClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITcExtraDetailTabList UITcExtraDetailTabList
        {
            get
            {
                if ((this.mUITcExtraDetailTabList == null))
                {
                    this.mUITcExtraDetailTabList = new UITcExtraDetailTabList(this);
                }
                return this.mUITcExtraDetailTabList;
            }
        }
        
        public UIGcShiftDetailsClient UIGcShiftDetailsClient
        {
            get
            {
                if ((this.mUIGcShiftDetailsClient == null))
                {
                    this.mUIGcShiftDetailsClient = new UIGcShiftDetailsClient(this);
                }
                return this.mUIGcShiftDetailsClient;
            }
        }
        #endregion
        
        #region Fields
        private UITcExtraDetailTabList mUITcExtraDetailTabList;
        
        private UIGcShiftDetailsClient mUIGcShiftDetailsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcExtraDetailTabList : DXTestControl
    {
        
        public UITcExtraDetailTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcExtraDetail";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITpSalaryCalcClient UITpSalaryCalcClient
        {
            get
            {
                if ((this.mUITpSalaryCalcClient == null))
                {
                    this.mUITpSalaryCalcClient = new UITpSalaryCalcClient(this);
                }
                return this.mUITpSalaryCalcClient;
            }
        }
        
        public UITabClockTypeCalcClient UITabClockTypeCalcClient
        {
            get
            {
                if ((this.mUITabClockTypeCalcClient == null))
                {
                    this.mUITabClockTypeCalcClient = new UITabClockTypeCalcClient(this);
                }
                return this.mUITabClockTypeCalcClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpSalaryCalcClient mUITpSalaryCalcClient;
        
        private UITabClockTypeCalcClient mUITabClockTypeCalcClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpSalaryCalcClient : DXTestControl
    {
        
        public UITpSalaryCalcClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpSalaryCalc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UIGcAccountingLinesTable UIGcAccountingLinesTable
        {
            get
            {
                if ((this.mUIGcAccountingLinesTable == null))
                {
                    this.mUIGcAccountingLinesTable = new UIGcAccountingLinesTable(this);
                }
                return this.mUIGcAccountingLinesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAccountingLinesTable mUIGcAccountingLinesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAccountingLinesTable : DXGrid
    {
        
        public UIGcAccountingLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem310Overtid100Cell
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell == null))
                {
                    this.mUIItem310Overtid100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]0[Column]colCostType";
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell;
            }
        }
        
        public DXCell UIItem775Cell
        {
            get
            {
                if ((this.mUIItem775Cell == null))
                {
                    this.mUIItem775Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem775Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]0[Column]colAmount";
                    this.mUIItem775Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem775Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem775Cell;
            }
        }
        
        public DXGroupRow UIGridControlGroupRowGroupRow
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow == null))
                {
                    this.mUIGridControlGroupRowGroupRow = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlGroupRow[View]gvAccountingLines[Row]-1[Column]gvcGrou" +
                        "p";
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow;
            }
        }
        
        public DXGroupRow UIGridControlGroupRowGroupRow1
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow1 == null))
                {
                    this.mUIGridControlGroupRowGroupRow1 = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlGroupRow[View]gvAccountingLines[Row]-2[Column]gvcGrou" +
                        "p";
                    this.mUIGridControlGroupRowGroupRow1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow1.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow1;
            }
        }
        
        public DXCell UIItem300Overtid50Cell
        {
            get
            {
                if ((this.mUIItem300Overtid50Cell == null))
                {
                    this.mUIItem300Overtid50Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem300Overtid50Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]1[Column]colCostType";
                    this.mUIItem300Overtid50Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem300Overtid50Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem300Overtid50Cell;
            }
        }
        
        public DXCell UIItem200Cell
        {
            get
            {
                if ((this.mUIItem200Cell == null))
                {
                    this.mUIItem200Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]1[Column]colAmount";
                    this.mUIItem200Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem200Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem310Overtid100Cell;
        
        private DXCell mUIItem775Cell;
        
        private DXGroupRow mUIGridControlGroupRowGroupRow;
        
        private DXGroupRow mUIGridControlGroupRowGroupRow1;
        
        private DXCell mUIItem300Overtid50Cell;
        
        private DXCell mUIItem200Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabClockTypeCalcClient : DXTestControl
    {
        
        public UITabClockTypeCalcClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabClockTypeCalc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITcTableChartTabList UITcTableChartTabList
        {
            get
            {
                if ((this.mUITcTableChartTabList == null))
                {
                    this.mUITcTableChartTabList = new UITcTableChartTabList(this);
                }
                return this.mUITcTableChartTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcTableChartTabList mUITcTableChartTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcTableChartTabList : DXTestControl
    {
        
        public UITcTableChartTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcTableChart";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITpClockTypeCalcTableClient UITpClockTypeCalcTableClient
        {
            get
            {
                if ((this.mUITpClockTypeCalcTableClient == null))
                {
                    this.mUITpClockTypeCalcTableClient = new UITpClockTypeCalcTableClient(this);
                }
                return this.mUITpClockTypeCalcTableClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpClockTypeCalcTableClient mUITpClockTypeCalcTableClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpClockTypeCalcTableClient : DXTestControl
    {
        
        public UITpClockTypeCalcTableClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpClockTypeCalcTable";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UIGClockTypeCalcTable UIGClockTypeCalcTable
        {
            get
            {
                if ((this.mUIGClockTypeCalcTable == null))
                {
                    this.mUIGClockTypeCalcTable = new UIGClockTypeCalcTable(this);
                }
                return this.mUIGClockTypeCalcTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGClockTypeCalcTable mUIGClockTypeCalcTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGClockTypeCalcTable : DXGrid
    {
        
        public UIGClockTypeCalcTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gClockTypeCalc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem110Cell
        {
            get
            {
                if ((this.mUIItem110Cell == null))
                {
                    this.mUIItem110Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem110Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gClockTypeCalcGridControlCell[View]gvClockTypeCalc[Row]0[Column]gvCTC_Id";
                    this.mUIItem110Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem110Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem110Cell;
            }
        }
        
        public DXCell UIOvertidhelstillingCell
        {
            get
            {
                if ((this.mUIOvertidhelstillingCell == null))
                {
                    this.mUIOvertidhelstillingCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOvertidhelstillingCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gClockTypeCalcGridControlCell[View]gvClockTypeCalc[Row]0[Column]gvCTC_Name";
                    this.mUIOvertidhelstillingCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOvertidhelstillingCell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIOvertidhelstillingCell;
            }
        }
        
        public DXCell UIItem110Cell1
        {
            get
            {
                if ((this.mUIItem110Cell1 == null))
                {
                    this.mUIItem110Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem110Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gClockTypeCalcGridControlCell[View]gvClockTypeCalc[Row]3[Column]gvCTC_Id";
                    this.mUIItem110Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem110Cell1.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem110Cell1;
            }
        }
        
        public DXCell UIOvertidhelstillingCell1
        {
            get
            {
                if ((this.mUIOvertidhelstillingCell1 == null))
                {
                    this.mUIOvertidhelstillingCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIOvertidhelstillingCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gClockTypeCalcGridControlCell[View]gvClockTypeCalc[Row]3[Column]gvCTC_Name";
                    this.mUIOvertidhelstillingCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOvertidhelstillingCell1.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIOvertidhelstillingCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem110Cell;
        
        private DXCell mUIOvertidhelstillingCell;
        
        private DXCell mUIItem110Cell1;
        
        private DXCell mUIOvertidhelstillingCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcShiftDetailsClient : DXTestControl
    {
        
        public UIGcShiftDetailsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            #endregion
        }
        
        #region Properties
        public UITcRegistrationTypeTabList UITcRegistrationTypeTabList
        {
            get
            {
                if ((this.mUITcRegistrationTypeTabList == null))
                {
                    this.mUITcRegistrationTypeTabList = new UITcRegistrationTypeTabList(this);
                }
                return this.mUITcRegistrationTypeTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcRegistrationTypeTabList mUITcRegistrationTypeTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcRegistrationTypeTabList : DXTestControl
    {
        
        public UITcRegistrationTypeTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcRegistrationType";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpNewShiftClient UITpNewShiftClient
        {
            get
            {
                if ((this.mUITpNewShiftClient == null))
                {
                    this.mUITpNewShiftClient = new UITpNewShiftClient(this);
                }
                return this.mUITpNewShiftClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpNewShiftClient mUITpNewShiftClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpNewShiftClient : DXTestControl
    {
        
        public UITpNewShiftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpNewShift";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIETime3Edit
        {
            get
            {
                if ((this.mUIETime3Edit == null))
                {
                    this.mUIETime3Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIETime3Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eTime[3]";
                    this.mUIETime3Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIETime3Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIETime3Edit.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIETime3Edit;
            }
        }
        
        public DXTextEdit UIETime1Edit
        {
            get
            {
                if ((this.mUIETime1Edit == null))
                {
                    this.mUIETime1Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIETime1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eTime[1]";
                    this.mUIETime1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIETime1Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIETime1Edit.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIETime1Edit;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIETime3Edit;
        
        private DXTextEdit mUIETime1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItem01042020Window UIItem01042020Window
        {
            get
            {
                if ((this.mUIItem01042020Window == null))
                {
                    this.mUIItem01042020Window = new UIItem01042020Window(this);
                }
                return this.mUIItem01042020Window;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIRapporttypeWindow UIRapporttypeWindow
        {
            get
            {
                if ((this.mUIRapporttypeWindow == null))
                {
                    this.mUIRapporttypeWindow = new UIRapporttypeWindow(this);
                }
                return this.mUIRapporttypeWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItem01042020Window mUIItem01042020Window;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIRapporttypeWindow mUIRapporttypeWindow;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow2 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UICenterPanelDayDockPanel UICenterPanelDayDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayDockPanel == null))
                {
                    this.mUICenterPanelDayDockPanel = new UICenterPanelDayDockPanel(this);
                }
                return this.mUICenterPanelDayDockPanel;
            }
        }
        
        public UIRibbonControlRibbon UIRibbonControlRibbon
        {
            get
            {
                if ((this.mUIRibbonControlRibbon == null))
                {
                    this.mUIRibbonControlRibbon = new UIRibbonControlRibbon(this);
                }
                return this.mUIRibbonControlRibbon;
            }
        }
        #endregion
        
        #region Fields
        private UICenterPanelDayDockPanel mUICenterPanelDayDockPanel;
        
        private UIRibbonControlRibbon mUIRibbonControlRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDay";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom : DXTestControl
    {
        
        public UIControlContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UICenterPanelDayWrappeDockPanel UICenterPanelDayWrappeDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayWrappeDockPanel == null))
                {
                    this.mUICenterPanelDayWrappeDockPanel = new UICenterPanelDayWrappeDockPanel(this);
                }
                return this.mUICenterPanelDayWrappeDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UICenterPanelDayWrappeDockPanel mUICenterPanelDayWrappeDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayWrappeDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayWrappeDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayWrapper";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIFriVikar00167770770FDockPanel UIFriVikar00167770770FDockPanel
        {
            get
            {
                if ((this.mUIFriVikar00167770770FDockPanel == null))
                {
                    this.mUIFriVikar00167770770FDockPanel = new UIFriVikar00167770770FDockPanel(this);
                }
                return this.mUIFriVikar00167770770FDockPanel;
            }
        }
        
        public UIDag00167770770FalseDockPanel UIDag00167770770FalseDockPanel
        {
            get
            {
                if ((this.mUIDag00167770770FalseDockPanel == null))
                {
                    this.mUIDag00167770770FalseDockPanel = new UIDag00167770770FalseDockPanel(this);
                }
                return this.mUIDag00167770770FalseDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIFriVikar00167770770FDockPanel mUIFriVikar00167770770FDockPanel;
        
        private UIDag00167770770FalseDockPanel mUIDag00167770770FalseDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFriVikar00167770770FDockPanel : DXDockPanel
    {
        
        public UIFriVikar00167770770FDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Fri / Vikar;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom1 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom1(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom1 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom1 : DXTestControl
    {
        
        public UIControlContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Fri / Vikar;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcFreeColumnTable UIGcFreeColumnTable
        {
            get
            {
                if ((this.mUIGcFreeColumnTable == null))
                {
                    this.mUIGcFreeColumnTable = new UIGcFreeColumnTable(this);
                }
                return this.mUIGcFreeColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcFreeColumnTable mUIGcFreeColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcFreeColumnTable : DXGrid
    {
        
        public UIGcFreeColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIFredriksenFrankCell
        {
            get
            {
                if ((this.mUIFredriksenFrankCell == null))
                {
                    this.mUIFredriksenFrankCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFredriksenFrankCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumnGridControlCell[View]gvFreeColumn[Row]2[Column]colEmployeeName";
                    this.mUIFredriksenFrankCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFredriksenFrankCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIFredriksenFrankCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIFredriksenFrankCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDag00167770770FalseDockPanel : DXDockPanel
    {
        
        public UIDag00167770770FalseDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom2 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom2(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom2 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom2 : DXTestControl
    {
        
        public UIControlContainerCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcDayColumnTable UIGcDayColumnTable
        {
            get
            {
                if ((this.mUIGcDayColumnTable == null))
                {
                    this.mUIGcDayColumnTable = new UIGcDayColumnTable(this);
                }
                return this.mUIGcDayColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDayColumnTable mUIGcDayColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDayColumnTable : DXGrid
    {
        
        public UIGcDayColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIGundersenGunnarCell
        {
            get
            {
                if ((this.mUIGundersenGunnarCell == null))
                {
                    this.mUIGundersenGunnarCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGundersenGunnarCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]0[Column]colEmployeeName";
                    this.mUIGundersenGunnarCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGundersenGunnarCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIGundersenGunnarCell;
            }
        }
        
        public DXCell UIGundersenGunnarCell1
        {
            get
            {
                if ((this.mUIGundersenGunnarCell1 == null))
                {
                    this.mUIGundersenGunnarCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGundersenGunnarCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]1[Column]colEmployeeName";
                    this.mUIGundersenGunnarCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGundersenGunnarCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIGundersenGunnarCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIGundersenGunnarCell;
        
        private DXCell mUIGundersenGunnarCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonControlRibbon : DXRibbon
    {
        
        public UIRibbonControlRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRpMainMenuRibbonPage UIRpMainMenuRibbonPage
        {
            get
            {
                if ((this.mUIRpMainMenuRibbonPage == null))
                {
                    this.mUIRpMainMenuRibbonPage = new UIRpMainMenuRibbonPage(this);
                }
                return this.mUIRpMainMenuRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpMainMenuRibbonPage mUIRpMainMenuRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpMainMenuRibbonPage : DXRibbonPage
    {
        
        public UIRpMainMenuRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpMainMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGrpDevianceRibbonPageGroup UIGrpDevianceRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpDevianceRibbonPageGroup == null))
                {
                    this.mUIGrpDevianceRibbonPageGroup = new UIGrpDevianceRibbonPageGroup(this);
                }
                return this.mUIGrpDevianceRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpDevianceRibbonPageGroup mUIGrpDevianceRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpDevianceRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpDevianceRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpDeviance";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIEkstraRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIEkstraRibbonBaseButtonItem == null))
                {
                    this.mUIEkstraRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIEkstraRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnExtra";
                    this.mUIEkstraRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIEkstraRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIEkstraRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIEkstraRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinClient UITimelisteClient
        {
            get
            {
                if ((this.mUITimelisteClient == null))
                {
                    this.mUITimelisteClient = new WinClient(this);
                    #region Search Criteria
                    this.mUITimelisteClient.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITimelisteClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUITimelisteClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem01042020Window : WinWindow
    {
        
        public UIItem01042020Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "01.04.2020";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TicDateEdit";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TicDateEdit";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRapporttypeWindow : WinWindow
    {
        
        public UIRapporttypeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Rapport type";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TGroupBox";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRapporttypeClient UIRapporttypeClient
        {
            get
            {
                if ((this.mUIRapporttypeClient == null))
                {
                    this.mUIRapporttypeClient = new UIRapporttypeClient(this);
                }
                return this.mUIRapporttypeClient;
            }
        }
        #endregion
        
        #region Fields
        private UIRapporttypeClient mUIRapporttypeClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRapporttypeClient : WinClient
    {
        
        public UIRapporttypeClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Rapport type";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIPunsjegrunnlagforlønRadioButton
        {
            get
            {
                if ((this.mUIPunsjegrunnlagforlønRadioButton == null))
                {
                    this.mUIPunsjegrunnlagforlønRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIPunsjegrunnlagforlønRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Punsjegrunnlag for lønningskontoret (Punsje)";
                    this.mUIPunsjegrunnlagforlønRadioButton.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIPunsjegrunnlagforlønRadioButton;
            }
        }
        
        public WinCheckBox UIKungodkjentetimelistCheckBox
        {
            get
            {
                if ((this.mUIKungodkjentetimelistCheckBox == null))
                {
                    this.mUIKungodkjentetimelistCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIKungodkjentetimelistCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Kun godkjente timelister";
                    this.mUIKungodkjentetimelistCheckBox.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIKungodkjentetimelistCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIPunsjegrunnlagforlønRadioButton;
        
        private WinCheckBox mUIKungodkjentetimelistCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = " ";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIItemClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient : WinClient
    {
        
        public UIItemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinButton UISendtilutbetalingviaButton
        {
            get
            {
                if ((this.mUISendtilutbetalingviaButton == null))
                {
                    this.mUISendtilutbetalingviaButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISendtilutbetalingviaButton.SearchProperties[WinButton.PropertyNames.Name] = "Send til utbetaling via lønnssystem";
                    this.mUISendtilutbetalingviaButton.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISendtilutbetalingviaButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISendtilutbetalingviaButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinClient UIAnsatteClient
        {
            get
            {
                if ((this.mUIAnsatteClient == null))
                {
                    this.mUIAnsatteClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAnsatteClient.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAnsatteClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAnsatteClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIFredriksenFrankCell
        {
            get
            {
                if ((this.mUIFredriksenFrankCell == null))
                {
                    this.mUIFredriksenFrankCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFredriksenFrankCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]EmployeeName";
                    this.mUIFredriksenFrankCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFredriksenFrankCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFredriksenFrankCell;
            }
        }
        
        public DXCell UIGundersenGunnarCell
        {
            get
            {
                if ((this.mUIGundersenGunnarCell == null))
                {
                    this.mUIGundersenGunnarCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGundersenGunnarCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]EmployeeName";
                    this.mUIGundersenGunnarCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGundersenGunnarCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGundersenGunnarCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIFredriksenFrankCell;
        
        private DXCell mUIGundersenGunnarCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIIverksettansattFredrMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIIverksettansattFredrMenuBaseButtonItem == null))
                {
                    this.mUIIverksettansattFredrMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIIverksettansattFredrMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[3]";
                    this.mUIIverksettansattFredrMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIIverksettansattFredrMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UISlettiverksettingpåaMenuBaseButtonItem
        {
            get
            {
                if ((this.mUISlettiverksettingpåaMenuBaseButtonItem == null))
                {
                    this.mUISlettiverksettingpåaMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUISlettiverksettingpåaMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[4]";
                    this.mUISlettiverksettingpåaMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUISlettiverksettingpåaMenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIIverksettansattFredrMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUISlettiverksettingpåaMenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRekalkuleringWindow : DXWindow
    {
        
        public UIRekalkuleringWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Rekalkulering";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public UIGcRecalculationTable UIGcRecalculationTable
        {
            get
            {
                if ((this.mUIGcRecalculationTable == null))
                {
                    this.mUIGcRecalculationTable = new UIGcRecalculationTable(this);
                }
                return this.mUIGcRecalculationTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRecalculationTable mUIGcRecalculationTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRecalculationTable : DXGrid
    {
        
        public UIGcRecalculationTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculation";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem300Overtid50Cell
        {
            get
            {
                if ((this.mUIItem300Overtid50Cell == null))
                {
                    this.mUIItem300Overtid50Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem300Overtid50Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]0[Column]colCostType";
                    this.mUIItem300Overtid50Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem300Overtid50Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem300Overtid50Cell;
            }
        }
        
        public DXCell UIItem400Cell
        {
            get
            {
                if ((this.mUIItem400Cell == null))
                {
                    this.mUIItem400Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem400Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]0[Column]colAmount";
                    this.mUIItem400Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem400Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem400Cell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell == null))
                {
                    this.mUIItem310Overtid100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]1[Column]colCostType";
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell;
            }
        }
        
        public DXCell UIItem375Cell
        {
            get
            {
                if ((this.mUIItem375Cell == null))
                {
                    this.mUIItem375Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem375Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]1[Column]colAmount";
                    this.mUIItem375Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem375Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem375Cell;
            }
        }
        
        public DXGroupRow UIGridControlGroupRowGroupRow
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow == null))
                {
                    this.mUIGridControlGroupRowGroupRow = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlGroupRow[View]gvRecalculation[Row]-1[Column]colEmployee" +
                        "DisplayName";
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow;
            }
        }
        
        public DXCell UIOvertidiforkantavvakCell
        {
            get
            {
                if ((this.mUIOvertidiforkantavvakCell == null))
                {
                    this.mUIOvertidiforkantavvakCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOvertidiforkantavvakCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]0[Column]colPreviousStatu" +
                        "sDisplayText";
                    this.mUIOvertidiforkantavvakCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOvertidiforkantavvakCell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIOvertidiforkantavvakCell;
            }
        }
        
        public DXCell UIOvertidietterkantavvCell
        {
            get
            {
                if ((this.mUIOvertidietterkantavvCell == null))
                {
                    this.mUIOvertidietterkantavvCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOvertidietterkantavvCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]1[Column]colPreviousStatu" +
                        "sDisplayText";
                    this.mUIOvertidietterkantavvCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOvertidietterkantavvCell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIOvertidietterkantavvCell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell1
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell1 == null))
                {
                    this.mUIItem310Overtid100Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-2[Row]0[Column]colCostType";
                    this.mUIItem310Overtid100Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell1;
            }
        }
        
        public DXCell UIItem800Cell
        {
            get
            {
                if ((this.mUIItem800Cell == null))
                {
                    this.mUIItem800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-2[Row]0[Column]colAmount";
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem800Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem300Overtid50Cell;
        
        private DXCell mUIItem400Cell;
        
        private DXCell mUIItem310Overtid100Cell;
        
        private DXCell mUIItem375Cell;
        
        private DXGroupRow mUIGridControlGroupRowGroupRow;
        
        private DXCell mUIOvertidiforkantavvakCell;
        
        private DXCell mUIOvertidietterkantavvCell;
        
        private DXCell mUIItem310Overtid100Cell1;
        
        private DXCell mUIItem800Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEndrekonteringWindow : WinWindow
    {
        
        public UIEndrekonteringWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Endre kontering";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmPosting";
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow5 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TgatGrid";
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public WinClient UIEndrekonteringClient
        {
            get
            {
                if ((this.mUIEndrekonteringClient == null))
                {
                    this.mUIEndrekonteringClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIEndrekonteringClient.WindowTitles.Add("Endre kontering");
                    #endregion
                }
                return this.mUIEndrekonteringClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIEndrekonteringClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TMSComboBox";
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Endre kontering");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIContextMenu UIContextMenu
        {
            get
            {
                if ((this.mUIContextMenu == null))
                {
                    this.mUIContextMenu = new UIContextMenu(this);
                }
                return this.mUIContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIContextMenu mUIContextMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContextMenu : WinMenu
    {
        
        public UIContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Context";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIItemMenuItem1
        {
            get
            {
                if ((this.mUIItemMenuItem1 == null))
                {
                    this.mUIItemMenuItem1 = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIItemMenuItem1.SearchProperties[WinMenuItem.PropertyNames.Instance] = "5";
                    #endregion
                }
                return this.mUIItemMenuItem1;
            }
        }
        
        public WinMenuItem UIVelgalleusignertelinMenuItem
        {
            get
            {
                if ((this.mUIVelgalleusignertelinMenuItem == null))
                {
                    this.mUIVelgalleusignertelinMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIVelgalleusignertelinMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Velg alle usignerte linjer (Hvite linjer)";
                    #endregion
                }
                return this.mUIVelgalleusignertelinMenuItem;
            }
        }
        
        public WinMenuItem UIRows4MenuItem
        {
            get
            {
                if ((this.mUIRows4MenuItem == null))
                {
                    this.mUIRows4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRows4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Rows: 4";
                    #endregion
                }
                return this.mUIRows4MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIItemMenuItem1;
        
        private WinMenuItem mUIVelgalleusignertelinMenuItem;
        
        private WinMenuItem mUIRows4MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEksportavvariabellønWindow : WinWindow
    {
        
        public UIEksportavvariabellønWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Eksport av variabel lønn";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmExportStatus";
            this.WindowTitles.Add("Eksport av variabel lønn");
            #endregion
        }
        
        #region Properties
        public UIElektronisksignaturaClient UIElektronisksignaturaClient
        {
            get
            {
                if ((this.mUIElektronisksignaturaClient == null))
                {
                    this.mUIElektronisksignaturaClient = new UIElektronisksignaturaClient(this);
                }
                return this.mUIElektronisksignaturaClient;
            }
        }
        
        public UIStarteksportavlønnsdClient UIStarteksportavlønnsdClient
        {
            get
            {
                if ((this.mUIStarteksportavlønnsdClient == null))
                {
                    this.mUIStarteksportavlønnsdClient = new UIStarteksportavlønnsdClient(this);
                }
                return this.mUIStarteksportavlønnsdClient;
            }
        }
        #endregion
        
        #region Fields
        private UIElektronisksignaturaClient mUIElektronisksignaturaClient;
        
        private UIStarteksportavlønnsdClient mUIStarteksportavlønnsdClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIElektronisksignaturaClient : WinClient
    {
        
        public UIElektronisksignaturaClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Elektronisk signatur av Timeliste - Variabel lønn";
            this.WindowTitles.Add("Eksport av variabel lønn");
            #endregion
        }
        
        #region Properties
        public WinButton UIAnsatteButton
        {
            get
            {
                if ((this.mUIAnsatteButton == null))
                {
                    this.mUIAnsatteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAnsatteButton.SearchProperties[WinButton.PropertyNames.Name] = "Ansatte";
                    this.mUIAnsatteButton.WindowTitles.Add("Eksport av variabel lønn");
                    #endregion
                }
                return this.mUIAnsatteButton;
            }
        }
        
        public WinButton UILedernivå1Button
        {
            get
            {
                if ((this.mUILedernivå1Button == null))
                {
                    this.mUILedernivå1Button = new WinButton(this);
                    #region Search Criteria
                    this.mUILedernivå1Button.SearchProperties[WinButton.PropertyNames.Name] = "Leder nivå1";
                    this.mUILedernivå1Button.WindowTitles.Add("Eksport av variabel lønn");
                    #endregion
                }
                return this.mUILedernivå1Button;
            }
        }
        
        public WinButton UILedernivå2Button
        {
            get
            {
                if ((this.mUILedernivå2Button == null))
                {
                    this.mUILedernivå2Button = new WinButton(this);
                    #region Search Criteria
                    this.mUILedernivå2Button.SearchProperties[WinButton.PropertyNames.Name] = "Leder nivå2";
                    this.mUILedernivå2Button.WindowTitles.Add("Eksport av variabel lønn");
                    #endregion
                }
                return this.mUILedernivå2Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAnsatteButton;
        
        private WinButton mUILedernivå1Button;
        
        private WinButton mUILedernivå2Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStarteksportavlønnsdClient : WinClient
    {
        
        public UIStarteksportavlønnsdClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Start eksport av lønnsdata";
            this.WindowTitles.Add("Eksport av variabel lønn");
            #endregion
        }
        
        #region Properties
        public WinButton UIStartButton
        {
            get
            {
                if ((this.mUIStartButton == null))
                {
                    this.mUIStartButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIStartButton.SearchProperties[WinButton.PropertyNames.Name] = "Start";
                    this.mUIStartButton.WindowTitles.Add("Eksport av variabel lønn");
                    #endregion
                }
                return this.mUIStartButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStartButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGodkjenningavvariabeWindow : WinWindow
    {
        
        public UIGodkjenningavvariabeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Godkjenning av variabel lønn";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmApproveOvertime";
            this.WindowTitles.Add("Godkjenning av variabel lønn");
            #endregion
        }
        
        #region Properties
        public UIItemWindow6 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow6(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow6 mUIItemWindow;
        
        private UIItemWindow13 mUIItemWindow1;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UIItemWindow21 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TgatGrid";
            this.WindowTitles.Add("Godkjenning av variabel lønn");
            #endregion
        }
        
        #region Properties
        public WinClient UITsEmpListClient
        {
            get
            {
                if ((this.mUITsEmpListClient == null))
                {
                    this.mUITsEmpListClient = new WinClient(this);
                    #region Search Criteria
                    this.mUITsEmpListClient.WindowTitles.Add("Godkjenning av variabel lønn");
                    #endregion
                }
                return this.mUITsEmpListClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUITsEmpListClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Godkjenning av variabel lønn");
            #endregion
        }
        
        #region Properties
        public UITsEmpListClient UITsEmpListClient
        {
            get
            {
                if ((this.mUITsEmpListClient == null))
                {
                    this.mUITsEmpListClient = new UITsEmpListClient(this);
                }
                return this.mUITsEmpListClient;
            }
        }
        #endregion
        
        #region Fields
        private UITsEmpListClient mUITsEmpListClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITsEmpListClient : WinClient
    {
        
        public UITsEmpListClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Godkjenning av variabel lønn");
            #endregion
        }
        
        #region Properties
        public WinButton UIGodkjennvalgtelinjerButton
        {
            get
            {
                if ((this.mUIGodkjennvalgtelinjerButton == null))
                {
                    this.mUIGodkjennvalgtelinjerButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIGodkjennvalgtelinjerButton.SearchProperties[WinButton.PropertyNames.Name] = "Godkjenn valgte linjer";
                    this.mUIGodkjennvalgtelinjerButton.WindowTitles.Add("Godkjenning av variabel lønn");
                    #endregion
                }
                return this.mUIGodkjennvalgtelinjerButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIGodkjennvalgtelinjerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Godkjenning av variabel lønn");
            #endregion
        }
        
        #region Properties
        public UITsManagerLev1ListClient UITsManagerLev1ListClient
        {
            get
            {
                if ((this.mUITsManagerLev1ListClient == null))
                {
                    this.mUITsManagerLev1ListClient = new UITsManagerLev1ListClient(this);
                }
                return this.mUITsManagerLev1ListClient;
            }
        }
        #endregion
        
        #region Fields
        private UITsManagerLev1ListClient mUITsManagerLev1ListClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITsManagerLev1ListClient : WinClient
    {
        
        public UITsManagerLev1ListClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Godkjenning av variabel lønn");
            #endregion
        }
        
        #region Properties
        public WinButton UIGodkjennvalgtelinjerButton
        {
            get
            {
                if ((this.mUIGodkjennvalgtelinjerButton == null))
                {
                    this.mUIGodkjennvalgtelinjerButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIGodkjennvalgtelinjerButton.SearchProperties[WinButton.PropertyNames.Name] = "Godkjenn valgte linjer";
                    this.mUIGodkjennvalgtelinjerButton.WindowTitles.Add("Godkjenning av variabel lønn");
                    #endregion
                }
                return this.mUIGodkjennvalgtelinjerButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIGodkjennvalgtelinjerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TicMenuButton";
            this.WindowTitles.Add("Godkjenning av variabel lønn");
            #endregion
        }
        
        #region Properties
        public WinClient UITsManagerLev1ListClient
        {
            get
            {
                if ((this.mUITsManagerLev1ListClient == null))
                {
                    this.mUITsManagerLev1ListClient = new WinClient(this);
                    #region Search Criteria
                    this.mUITsManagerLev1ListClient.WindowTitles.Add("Godkjenning av variabel lønn");
                    #endregion
                }
                return this.mUITsManagerLev1ListClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUITsManagerLev1ListClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAPPOV4000BekreftWindow : WinWindow
    {
        
        public UIAPPOV4000BekreftWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "APPOV-4000 - Bekreft";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfmMessage";
            this.WindowTitles.Add("APPOV-4000 - Bekreft");
            #endregion
        }
        
        #region Properties
        public UIItemWindow7 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow7(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow7 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.WindowTitles.Add("APPOV-4000 - Bekreft");
            #endregion
        }
        
        #region Properties
        public UIAPPOV4000BekreftClient UIAPPOV4000BekreftClient
        {
            get
            {
                if ((this.mUIAPPOV4000BekreftClient == null))
                {
                    this.mUIAPPOV4000BekreftClient = new UIAPPOV4000BekreftClient(this);
                }
                return this.mUIAPPOV4000BekreftClient;
            }
        }
        #endregion
        
        #region Fields
        private UIAPPOV4000BekreftClient mUIAPPOV4000BekreftClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAPPOV4000BekreftClient : WinClient
    {
        
        public UIAPPOV4000BekreftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("APPOV-4000 - Bekreft");
            #endregion
        }
        
        #region Properties
        public WinButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[WinButton.PropertyNames.Name] = "Ja";
                    this.mUIJAButton.WindowTitles.Add("APPOV-4000 - Bekreft");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVisningavdataforekspWindow : DXWindow
    {
        
        public UIVisningavdataforekspWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Visning av data for eksport";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Visning av data for eksport");
            #endregion
        }
        
        #region Properties
        public UIGListTable UIGListTable
        {
            get
            {
                if ((this.mUIGListTable == null))
                {
                    this.mUIGListTable = new UIGListTable(this);
                }
                return this.mUIGListTable;
            }
        }
        
        public UIGsPanelControl1Client1 UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client1(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGListTable mUIGListTable;
        
        private UIGsPanelControl1Client1 mUIGsPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGListTable : DXGrid
    {
        
        public UIGListTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Visning av data for eksport");
            #endregion
        }
        
        #region Properties
        public DXGroupRow UIGridControlGroupRowGroupRow
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow == null))
                {
                    this.mUIGridControlGroupRowGroupRow = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.Name] = "gListGridControlGroupRow[View]gvList[Row]-1[Column]details_FullName";
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow.WindowTitles.Add("Visning av data for eksport");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow;
            }
        }
        
        public DXCell UIOvertid100Cell
        {
            get
            {
                if ((this.mUIOvertid100Cell == null))
                {
                    this.mUIOvertid100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOvertid100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gListGridControlCell[View]gvList[Row]0[Column]export_oCtyName";
                    this.mUIOvertid100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOvertid100Cell.WindowTitles.Add("Visning av data for eksport");
                    #endregion
                }
                return this.mUIOvertid100Cell;
            }
        }
        
        public DXCell UIItem775Cell
        {
            get
            {
                if ((this.mUIItem775Cell == null))
                {
                    this.mUIItem775Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem775Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gListGridControlCell[View]gvList[Row]0[Column]details_Amount";
                    this.mUIItem775Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem775Cell.WindowTitles.Add("Visning av data for eksport");
                    #endregion
                }
                return this.mUIItem775Cell;
            }
        }
        
        public DXCell UIOvertid50Cell
        {
            get
            {
                if ((this.mUIOvertid50Cell == null))
                {
                    this.mUIOvertid50Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOvertid50Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gListGridControlCell[View]gvList[Row]1[Column]export_oCtyName";
                    this.mUIOvertid50Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOvertid50Cell.WindowTitles.Add("Visning av data for eksport");
                    #endregion
                }
                return this.mUIOvertid50Cell;
            }
        }
        
        public DXCell UIOvertid100Cell1
        {
            get
            {
                if ((this.mUIOvertid100Cell1 == null))
                {
                    this.mUIOvertid100Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIOvertid100Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gListGridControlCell[View]gvList[Row]2[Column]export_oCtyName";
                    this.mUIOvertid100Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOvertid100Cell1.WindowTitles.Add("Visning av data for eksport");
                    #endregion
                }
                return this.mUIOvertid100Cell1;
            }
        }
        
        public DXCell UIOvertid50Cell1
        {
            get
            {
                if ((this.mUIOvertid50Cell1 == null))
                {
                    this.mUIOvertid50Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIOvertid50Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gListGridControlCell[View]gvList[Row]3[Column]export_oCtyName";
                    this.mUIOvertid50Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOvertid50Cell1.WindowTitles.Add("Visning av data for eksport");
                    #endregion
                }
                return this.mUIOvertid50Cell1;
            }
        }
        
        public DXCell UIItem1Cell
        {
            get
            {
                if ((this.mUIItem1Cell == null))
                {
                    this.mUIItem1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gListGridControlCell[View]gvList[Row]1[Column]details_Amount";
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell.WindowTitles.Add("Visning av data for eksport");
                    #endregion
                }
                return this.mUIItem1Cell;
            }
        }
        
        public DXCell UIItem2Cell
        {
            get
            {
                if ((this.mUIItem2Cell == null))
                {
                    this.mUIItem2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gListGridControlCell[View]gvList[Row]2[Column]details_Amount";
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell.WindowTitles.Add("Visning av data for eksport");
                    #endregion
                }
                return this.mUIItem2Cell;
            }
        }
        
        public DXCell UIItem2Cell1
        {
            get
            {
                if ((this.mUIItem2Cell1 == null))
                {
                    this.mUIItem2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gListGridControlCell[View]gvList[Row]3[Column]details_Amount";
                    this.mUIItem2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell1.WindowTitles.Add("Visning av data for eksport");
                    #endregion
                }
                return this.mUIItem2Cell1;
            }
        }
        
        public DXColumnHeader UIDetails_AmountColumnHeader
        {
            get
            {
                if ((this.mUIDetails_AmountColumnHeader == null))
                {
                    this.mUIDetails_AmountColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIDetails_AmountColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gListGridControlColumnHeader[View]gvList[Column]details_Amount";
                    this.mUIDetails_AmountColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIDetails_AmountColumnHeader.WindowTitles.Add("Visning av data for eksport");
                    #endregion
                }
                return this.mUIDetails_AmountColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private DXGroupRow mUIGridControlGroupRowGroupRow;
        
        private DXCell mUIOvertid100Cell;
        
        private DXCell mUIItem775Cell;
        
        private DXCell mUIOvertid50Cell;
        
        private DXCell mUIOvertid100Cell1;
        
        private DXCell mUIOvertid50Cell1;
        
        private DXCell mUIItem1Cell;
        
        private DXCell mUIItem2Cell;
        
        private DXCell mUIItem2Cell1;
        
        private DXColumnHeader mUIDetails_AmountColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl1Client1 : DXTestControl
    {
        
        public UIGsPanelControl1Client1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Visning av data for eksport");
            #endregion
        }
        
        #region Properties
        public DXButton UIStarteksportButton
        {
            get
            {
                if ((this.mUIStarteksportButton == null))
                {
                    this.mUIStarteksportButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIStarteksportButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnExport";
                    this.mUIStarteksportButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIStarteksportButton.WindowTitles.Add("Visning av data for eksport");
                    #endregion
                }
                return this.mUIStarteksportButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIStarteksportButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRegelsettWindow : WinWindow
    {
        
        public UIRegelsettWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Regelsett";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmRegEdit";
            this.WindowTitles.Add("Regelsett");
            #endregion
        }
        
        #region Properties
        public UIItemWindow8 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow8(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIRegelsettClient UIRegelsettClient
        {
            get
            {
                if ((this.mUIRegelsettClient == null))
                {
                    this.mUIRegelsettClient = new UIRegelsettClient(this);
                }
                return this.mUIRegelsettClient;
            }
        }
        
        public UIItemWindow14 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow14(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemClient2 UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient2(this);
                }
                return this.mUIItemClient;
            }
        }
        
        public UIItemClient11 UIItemClient1
        {
            get
            {
                if ((this.mUIItemClient1 == null))
                {
                    this.mUIItemClient1 = new UIItemClient11(this);
                }
                return this.mUIItemClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow8 mUIItemWindow;
        
        private UIRegelsettClient mUIRegelsettClient;
        
        private UIItemWindow14 mUIItemWindow1;
        
        private UIItemClient2 mUIItemClient;
        
        private UIItemClient11 mUIItemClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow8 : WinWindow
    {
        
        public UIItemWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.WindowTitles.Add("Regelsett");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.WindowTitles.Add("Regelsett");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRegelsettClient : WinClient
    {
        
        public UIRegelsettClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Regelsett";
            this.WindowTitles.Add("Regelsett");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.SearchProperties[WinControl.PropertyNames.Name] = " ";
                    this.mUIItemClient.WindowTitles.Add("Regelsett");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow14 : WinWindow
    {
        
        public UIItemWindow14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TScrollBox";
            this.WindowTitles.Add("Regelsett");
            #endregion
        }
        
        #region Properties
        public UIItemClient1 UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient1(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemClient1 mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient1 : WinClient
    {
        
        public UIItemClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Regelsett");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIBrukreglerforovertidCheckBox
        {
            get
            {
                if ((this.mUIBrukreglerforovertidCheckBox == null))
                {
                    this.mUIBrukreglerforovertidCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIBrukreglerforovertidCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Bruk regler for overtid i forkant/etterkant";
                    this.mUIBrukreglerforovertidCheckBox.WindowTitles.Add("Regelsett");
                    #endregion
                }
                return this.mUIBrukreglerforovertidCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIBrukreglerforovertidCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient2 : WinClient
    {
        
        public UIItemClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Regelsett");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Regelsett");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient11 : WinClient
    {
        
        public UIItemClient11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Regelsett");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.SearchProperties[WinControl.PropertyNames.Name] = " ";
                    this.mUIItemClient.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItemClient.WindowTitles.Add("Regelsett");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIExportloggWindow : DXWindow
    {
        
        public UIExportloggWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Exportlogg";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UIGsLayoutControl1Custom UIGsLayoutControl1Custom
        {
            get
            {
                if ((this.mUIGsLayoutControl1Custom == null))
                {
                    this.mUIGsLayoutControl1Custom = new UIGsLayoutControl1Custom(this);
                }
                return this.mUIGsLayoutControl1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIGsLayoutControl1Custom mUIGsLayoutControl1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsLayoutControl1Custom : DXTestControl
    {
        
        public UIGsLayoutControl1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsLayoutControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UI_LayoutGroup_RootLayoutGroup UI_LayoutGroup_RootLayoutGroup
        {
            get
            {
                if ((this.mUI_LayoutGroup_RootLayoutGroup == null))
                {
                    this.mUI_LayoutGroup_RootLayoutGroup = new UI_LayoutGroup_RootLayoutGroup(this);
                }
                return this.mUI_LayoutGroup_RootLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UI_LayoutGroup_RootLayoutGroup mUI_LayoutGroup_RootLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UI_LayoutGroup_RootLayoutGroup : DXBaseLayoutItem
    {
        
        public UI_LayoutGroup_RootLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_LayoutGroup_Root";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UI_LayoutItem_JobsLayoutControlItem UI_LayoutItem_JobsLayoutControlItem
        {
            get
            {
                if ((this.mUI_LayoutItem_JobsLayoutControlItem == null))
                {
                    this.mUI_LayoutItem_JobsLayoutControlItem = new UI_LayoutItem_JobsLayoutControlItem(this);
                }
                return this.mUI_LayoutItem_JobsLayoutControlItem;
            }
        }
        
        public UI_TabControl_ExportTrTabbedGroup UI_TabControl_ExportTrTabbedGroup
        {
            get
            {
                if ((this.mUI_TabControl_ExportTrTabbedGroup == null))
                {
                    this.mUI_TabControl_ExportTrTabbedGroup = new UI_TabControl_ExportTrTabbedGroup(this);
                }
                return this.mUI_TabControl_ExportTrTabbedGroup;
            }
        }
        #endregion
        
        #region Fields
        private UI_LayoutItem_JobsLayoutControlItem mUI_LayoutItem_JobsLayoutControlItem;
        
        private UI_TabControl_ExportTrTabbedGroup mUI_TabControl_ExportTrTabbedGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UI_LayoutItem_JobsLayoutControlItem : DXBaseLayoutItem
    {
        
        public UI_LayoutItem_JobsLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_LayoutItem_Jobs";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl1Client2 UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client2(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl1Client2 mUIGsPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl1Client2 : DXTestControl
    {
        
        public UIGsPanelControl1Client2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UI_JobsGridTable UI_JobsGridTable
        {
            get
            {
                if ((this.mUI_JobsGridTable == null))
                {
                    this.mUI_JobsGridTable = new UI_JobsGridTable(this);
                }
                return this.mUI_JobsGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UI_JobsGridTable mUI_JobsGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UI_JobsGridTable : DXGrid
    {
        
        public UI_JobsGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_JobsGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public DXCell UIKlartiloverføringCell
        {
            get
            {
                if ((this.mUIKlartiloverføringCell == null))
                {
                    this.mUIKlartiloverføringCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKlartiloverføringCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_JobsGridGridControlCell[View]_JobsGridView[Row]0[Column]_Col_TransferStatus";
                    this.mUIKlartiloverføringCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKlartiloverføringCell.WindowTitles.Add("Exportlogg");
                    #endregion
                }
                return this.mUIKlartiloverføringCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIKlartiloverføringCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UI_TabControl_ExportTrTabbedGroup : DXBaseLayoutItem
    {
        
        public UI_TabControl_ExportTrTabbedGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_TabControl_ExportTransferType";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabbedGroup";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UI_LayoutTab_FileBasedLayoutGroup UI_LayoutTab_FileBasedLayoutGroup
        {
            get
            {
                if ((this.mUI_LayoutTab_FileBasedLayoutGroup == null))
                {
                    this.mUI_LayoutTab_FileBasedLayoutGroup = new UI_LayoutTab_FileBasedLayoutGroup(this);
                }
                return this.mUI_LayoutTab_FileBasedLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UI_LayoutTab_FileBasedLayoutGroup mUI_LayoutTab_FileBasedLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UI_LayoutTab_FileBasedLayoutGroup : DXBaseLayoutItem
    {
        
        public UI_LayoutTab_FileBasedLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_LayoutTab_FileBased";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UI_LayoutItem_FileBaseLayoutControlItem UI_LayoutItem_FileBaseLayoutControlItem
        {
            get
            {
                if ((this.mUI_LayoutItem_FileBaseLayoutControlItem == null))
                {
                    this.mUI_LayoutItem_FileBaseLayoutControlItem = new UI_LayoutItem_FileBaseLayoutControlItem(this);
                }
                return this.mUI_LayoutItem_FileBaseLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UI_LayoutItem_FileBaseLayoutControlItem mUI_LayoutItem_FileBaseLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UI_LayoutItem_FileBaseLayoutControlItem : DXBaseLayoutItem
    {
        
        public UI_LayoutItem_FileBaseLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_LayoutItem_FileBased";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl6Client UIGsPanelControl6Client
        {
            get
            {
                if ((this.mUIGsPanelControl6Client == null))
                {
                    this.mUIGsPanelControl6Client = new UIGsPanelControl6Client(this);
                }
                return this.mUIGsPanelControl6Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl6Client mUIGsPanelControl6Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl6Client : DXTestControl
    {
        
        public UIGsPanelControl6Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl6";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UIGsGroupControl2Client UIGsGroupControl2Client
        {
            get
            {
                if ((this.mUIGsGroupControl2Client == null))
                {
                    this.mUIGsGroupControl2Client = new UIGsGroupControl2Client(this);
                }
                return this.mUIGsGroupControl2Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsGroupControl2Client mUIGsGroupControl2Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsGroupControl2Client : DXTestControl
    {
        
        public UIGsGroupControl2Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGroupControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public DXTestControl UI_Label_File_LinesExpLabel
        {
            get
            {
                if ((this.mUI_Label_File_LinesExpLabel == null))
                {
                    this.mUI_Label_File_LinesExpLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUI_Label_File_LinesExpLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "_Label_File_LinesExported";
                    this.mUI_Label_File_LinesExpLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLabelControl";
                    this.mUI_Label_File_LinesExpLabel.WindowTitles.Add("Exportlogg");
                    #endregion
                }
                return this.mUI_Label_File_LinesExpLabel;
            }
        }
        
        public DXTestControl UI_Label_File_LinesExpLabel1
        {
            get
            {
                if ((this.mUI_Label_File_LinesExpLabel1 == null))
                {
                    this.mUI_Label_File_LinesExpLabel1 = new DXTestControl(this);
                    #region Search Criteria
                    this.mUI_Label_File_LinesExpLabel1.SearchProperties[DXTestControl.PropertyNames.Name] = "_Label_File_LinesExported_Value";
                    this.mUI_Label_File_LinesExpLabel1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLabelControl";
                    this.mUI_Label_File_LinesExpLabel1.WindowTitles.Add("Exportlogg");
                    #endregion
                }
                return this.mUI_Label_File_LinesExpLabel1;
            }
        }
        
        public DXTestControl UI_Label_File_TotalLinLabel
        {
            get
            {
                if ((this.mUI_Label_File_TotalLinLabel == null))
                {
                    this.mUI_Label_File_TotalLinLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUI_Label_File_TotalLinLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "_Label_File_TotalLines";
                    this.mUI_Label_File_TotalLinLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLabelControl";
                    this.mUI_Label_File_TotalLinLabel.WindowTitles.Add("Exportlogg");
                    #endregion
                }
                return this.mUI_Label_File_TotalLinLabel;
            }
        }
        
        public DXTestControl UI_Label_File_TotalLinLabel1
        {
            get
            {
                if ((this.mUI_Label_File_TotalLinLabel1 == null))
                {
                    this.mUI_Label_File_TotalLinLabel1 = new DXTestControl(this);
                    #region Search Criteria
                    this.mUI_Label_File_TotalLinLabel1.SearchProperties[DXTestControl.PropertyNames.Name] = "_Label_File_TotalLines_Value";
                    this.mUI_Label_File_TotalLinLabel1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLabelControl";
                    this.mUI_Label_File_TotalLinLabel1.WindowTitles.Add("Exportlogg");
                    #endregion
                }
                return this.mUI_Label_File_TotalLinLabel1;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUI_Label_File_LinesExpLabel;
        
        private DXTestControl mUI_Label_File_LinesExpLabel1;
        
        private DXTestControl mUI_Label_File_TotalLinLabel;
        
        private DXTestControl mUI_Label_File_TotalLinLabel1;
        #endregion
    }
}
