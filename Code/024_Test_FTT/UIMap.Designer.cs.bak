// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _024_Test_FTT
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddNewLineFromPositionGustavsson
        /// </summary>
        public void AddNewLineFromPositionGustavsson()
        {
            #region Variable Declarations
            DXCell uIKK1Cell = this.UIArbeidsplanKopiavFTTWindow11.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK1Cell;
            DXMenuItem uILeggtillinjefrastillMenuItem = this.UIItemWindow5.UIPopupMenuBarControlMenu.UILeggtillinjefrastillMenuItem;
            DXMenuBaseButtonItem uIBarButtonItemLink1MenuBaseButtonItem = this.UIItemWindow5.UIPopupMenuBarControlMenu.UILeggtillinjefrastillMenuItem.UIBarButtonItemLink1MenuBaseButtonItem;
            #endregion

            // Right-Click 'KK1' cell
            Mouse.Click(uIKK1Cell, MouseButtons.Right, ModifierKeys.None, new Point(19, 9));

            // Wait for 1 seconds for user delay between actions; Click 'Legg til linje fra stillingsforhold' menu item
            Playback.Wait(1000);
            Mouse.Click(uILeggtillinjefrastillMenuItem, new Point(139, 13));

            // Click 'BarButtonItemLink[1]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink1MenuBaseButtonItem, new Point(106, 11));
        }
        
        /// <summary>
        /// AddNewLineFromPositionGustavsson_2
        /// </summary>
        public void AddNewLineFromPositionGustavsson_2()
        {
            #region Variable Declarations
            DXMenuItem uILeggtillinjefrastillMenuItem = this.UIItemWindow6.UIPopupMenuBarControlMenu.UILeggtillinjefrastillMenuItem;
            DXMenuBaseButtonItem uIBarButtonItemLink2MenuBaseButtonItem = this.UIItemWindow6.UIPopupMenuBarControlMenu.UILeggtillinjefrastillMenuItem.UIBarButtonItemLink2MenuBaseButtonItem;
            #endregion

            // Right-Click 'Gustavsson, Robert' cell
           UIMapVS2017.RightClickGustavssonCellLine3();

            // Wait for 1 seconds for user delay between actions; Click 'Legg til linje fra stillingsforhold' menu item
            Playback.Wait(1000);
            Mouse.Click(uILeggtillinjefrastillMenuItem, new Point(124, 9));

            // Click 'BarButtonItemLink[2]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink2MenuBaseButtonItem, new Point(154, 8));
        }
        
        /// <summary>
        /// AddNewLineFromPositionOscarsson
        /// </summary>
        public void AddNewLineFromPositionOscarsson()
        {
            #region Variable Declarations
            DXMenuItem uILeggtillinjefrastillMenuItem = this.UIItemWindow10.UIPopupMenuBarControlMenu.UILeggtillinjefrastillMenuItem;
            DXMenuBaseButtonItem uIBarButtonItemLink1MenuBaseButtonItem = this.UIItemWindow10.UIPopupMenuBarControlMenu.UILeggtillinjefrastillMenuItem.UIBarButtonItemLink1MenuBaseButtonItem;
            #endregion

            // Right-Click 'Oscarsson, Per' cell
            UIMapVS2017.RightClickOscarssonPerCell();

            // Wait for 1 seconds for user delay between actions; Click 'Legg til linje fra stillingsforhold' menu item
            Playback.Wait(1000);
            Mouse.Click(uILeggtillinjefrastillMenuItem, new Point(133, 10));

            // Click 'BarButtonItemLink[1]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink1MenuBaseButtonItem, new Point(186, 11));
        }
        
        /// <summary>
        /// AddNewLineFromPositionPersbrandt
        /// </summary>
        public void AddNewLineFromPositionPersbrandt()
        {
            #region Variable Declarations
            DXMenuItem uILeggtillinjefrastillMenuItem = this.UIItemWindow8.UIPopupMenuBarControlMenu.UILeggtillinjefrastillMenuItem;
            DXMenuBaseButtonItem uIBarButtonItemLink1MenuBaseButtonItem = this.UIItemWindow8.UIPopupMenuBarControlMenu.UILeggtillinjefrastillMenuItem.UIBarButtonItemLink1MenuBaseButtonItem;
            #endregion

            // Right-Click 'Persbrandt, Mikael' cell
            UIMapVS2017.RightClickPersbrandtCell();

            // Wait for 1 seconds for user delay between actions; Click 'Legg til linje fra stillingsforhold' menu item
            Playback.Wait(1000);
            Mouse.Click(uILeggtillinjefrastillMenuItem, new Point(231, 12));

            // Click 'BarButtonItemLink[1]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink1MenuBaseButtonItem, new Point(162, 10));
        }
        
        /// <summary>
        /// AddNewLineFromPositionRheborg
        /// </summary>
        public void AddNewLineFromPositionRheborg()
        {
            #region Variable Declarations
            DXMenuItem uILeggtillinjefrastillMenuItem = this.UIItemWindow9.UIPopupMenuBarControlMenu.UILeggtillinjefrastillMenuItem;
            DXMenuBaseButtonItem uIBarButtonItemLink1MenuBaseButtonItem = this.UIItemWindow9.UIPopupMenuBarControlMenu.UILeggtillinjefrastillMenuItem.UIBarButtonItemLink1MenuBaseButtonItem;
            #endregion

            // Right-Click 'Rheborg, Johan' cell
            UIMapVS2017.RightClickRheborgCell();

            // Wait for 1 seconds for user delay between actions; Click 'Legg til linje fra stillingsforhold' menu item
            Playback.Wait(1000);
            Mouse.Click(uILeggtillinjefrastillMenuItem, new Point(146, 11));

            // Click 'BarButtonItemLink[1]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink1MenuBaseButtonItem, new Point(212, 12));
        }
        
        /// <summary>
        /// AddNewLineStormare
        /// </summary>
        public void AddNewLineStormare()
        {
            #region Variable Declarations
            DXCell uIACell = this.UIArbeidsplanFTTKalendWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell;
            DXMenuItem uILeggtilblanklinjefraMenuItem = this.UIItemWindow4.UIPopupMenuBarControlMenu.UILeggtilblanklinjefraMenuItem;
            DXMenuBaseButtonItem uIBarButtonItemLink0MenuBaseButtonItem = this.UIItemWindow4.UIPopupMenuBarControlMenu.UILeggtilblanklinjefraMenuItem.UIBarButtonItemLink0MenuBaseButtonItem;
            #endregion

            // Right-Click 'A' cell
            Mouse.Click(uIACell, MouseButtons.Right, ModifierKeys.None, new Point(23, 9));

            // Wait for 1 seconds for user delay between actions; Click 'Legg til blank linje fra avdeling' menu item
            Playback.Wait(1000);
            Mouse.Click(uILeggtilblanklinjefraMenuItem, new Point(111, 12));

            // Wait for 1 seconds for user delay between actions; Click 'BarButtonItemLink[0]' MenuBaseButtonItem
            Playback.Wait(1000);
            Mouse.Click(uIBarButtonItemLink0MenuBaseButtonItem, new Point(94, 8));
        }
        
        /// <summary>
        /// AddPeterHaber - Use 'AddPeterHaberParams' to pass parameters into this method.
        /// </summary>
        public void AddPeterHaber()
        {
            #region Variable Declarations
            DXButton uIAnsatteButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIAnsatteButton;
            DXButton uIUtvalgsalternativerButton = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UILeftAutoHideContaineClient.UIUtvalgsalternativerButton;
            DXCheckBox uICeDoIncludeExistingECheckBox = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIAutoHideControlClient.UIDpDepartmentSelectorDockPanel.UIDepartmentSelectorCoCustom.UICeDoIncludeExistingECheckBox;
            DXTreeListNode uINode12TreeListNode = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIAutoHideControlClient.UIDpDepartmentSelectorDockPanel.UIDepartmentSelectorCoCustom.UITlAccessibleDepartmeTreeList.UINode0TreeListNode.UINode8TreeListNode.UINode12TreeListNode;
            DXTreeListNode uINode13TreeListNode = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIAutoHideControlClient.UIDpDepartmentSelectorDockPanel.UIDepartmentSelectorCoCustom.UITlAccessibleDepartmeTreeList.UINode0TreeListNode.UINode8TreeListNode.UINode13TreeListNode;
            DXGrid uIGcDepartmentEmployeeTable = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable;
            DXCell uIHaberPeterCell1 = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIHaberPeterCell1;
            DXButton uIOKButton = this.UILeggtilansatteWindow.UIOKButton;
            DXTreeListCell uIItem5140OmregnettidTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode3TreeListNode.UINode0TreeListNode.UIItem5140OmregnettidTreeListCell;
            DXTextEdit uIEPositionPercentEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerLineVCustom.UIEPositionPercentEdit;
            DXCell uIHaberPeterCell2 = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIHaberPeterCell2;
            DXButton uISimpleButtonButton = this.UIAnsatteiarbeidsplanWindow.UISimpleButtonButton;
            #endregion

            // Click 'Ansatte...' button
            Mouse.Click(uIAnsatteButton, new Point(1, 1));

            // Click 'Utvalgsalternativer' button
            Mouse.Click(uIUtvalgsalternativerButton, new Point(8, 58));

            // Select 'ceDoIncludeExistingEmployees' check box
            uICeDoIncludeExistingECheckBox.Checked = this.AddPeterHaberParams.UICeDoIncludeExistingECheckBoxChecked;

            // Type 'True' in 'Node12' TreeListNode
            //Checked
            uINode12TreeListNode.Checked = this.AddPeterHaberParams.UINode12TreeListNodeChecked;

            // Type 'False' in 'Node13' TreeListNode
            //Checked
            uINode13TreeListNode.Checked = this.AddPeterHaberParams.UINode13TreeListNodeChecked;

            // Click 'gcDepartmentEmployees' table
            Mouse.Click(uIGcDepartmentEmployeeTable, new Point(447, 553));

            // Click 'Haber, Peter' cell
            Mouse.Click(uIHaberPeterCell1, new Point(35, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(1, 1));

            // Click '5140 - Omregnet tid' TreeListCell
            Mouse.Click(uIItem5140OmregnettidTreeListCell, new Point(21, 8));

            // Type 'System.Double' in 'ePositionPercent' text box
            //ValueTypeName
            uIEPositionPercentEdit.ValueTypeName = this.AddPeterHaberParams.UIEPositionPercentEditValueTypeName;

            // Type '50' in 'ePositionPercent' text box
            //ValueAsString
            uIEPositionPercentEdit.ValueAsString = this.AddPeterHaberParams.UIEPositionPercentEditValueAsString;

            // Type '{Tab}' in 'ePositionPercent' text box
            Keyboard.SendKeys(uIEPositionPercentEdit, this.AddPeterHaberParams.UIEPositionPercentEditSendKeys, ModifierKeys.None);

            // Click 'Ansatte...' button
            Mouse.Click(uIAnsatteButton, new Point(1, 1));

            // Click 'Haber, Peter' cell
            Mouse.Click(uIHaberPeterCell2, new Point(56, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(1, 1));

            // Click 'SimpleButton' button
            Mouse.Click(uISimpleButtonButton, new Point(1, 1));
        }
        
        /// <summary>
        /// CancelEditShiftCodeD2
        /// </summary>
        public void CancelEditShiftCodeD2()
        {
            #region Variable Declarations
            DXButton uIAvbrytButton = this.UIEndrevaktkodeD2Window.UIDbFooterCustom.UIAvbrytButton;
            #endregion

            // Click 'Avbryt' button
            Mouse.Click(uIAvbrytButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ChangeDshiftMonEklandToN - Use 'ChangeDshiftMonEklandToNParams' to pass parameters into this method.
        /// </summary>
        public void ChangeDshiftMonEklandToN()
        {
            #region Variable Declarations
            DXTextEdit uIRow3ColumnRosterCellEdit = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit;
            #endregion

            // Type '{Tab}' in '[Row]3[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit, "n" + this.ChangeDshiftMonEklandToNParams.UIRow3ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// CheckAdamsMasterDetailsPreviousTransfers_C1_S21 - Use 'CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAdamsMasterDetailsPreviousTransfers_C1_S21()
        {
            #region Variable Declarations
            DXCell uIItem400LørSøndagstilCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem400LørSøndagstilCell1;
            DXCell uIItem4162Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem4162Cell;
            DXCell uIItem410KveldNattilleCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem410KveldNattilleCell1;
            DXCell uIItem4162Cell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem4162Cell1;
            DXTextEdit uIRow4ColumncolFrom1Edit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow4ColumncolFrom1Edit;
            DXTextEdit uIRow4ColumncolTo1Edit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow4ColumncolTo1Edit;
            #endregion

            // Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
            Assert.AreEqual(this.CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues.UIItem400LørSøndagstilCell1Text, uIItem400LørSøndagstilCell1.Text);

            // Verify that the 'Text' property of '41,62' cell equals '26,76'
            Assert.AreEqual(this.CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues.UIItem4162CellText, uIItem4162Cell.Text);

            // Verify that the 'Text' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
            Assert.AreEqual(this.CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues.UIItem410KveldNattilleCell1Text, uIItem410KveldNattilleCell1.Text);

            // Verify that the 'Text' property of '41,62' cell equals '38,65'
            Assert.AreEqual(this.CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues.UIItem4162Cell1Text, uIItem4162Cell1.Text);

            // Verify that the 'ValueAsString' property of '[Row]4[Column]colFrom1' text box equals '05.08.2024'
            Assert.AreEqual(this.CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues.UIRow4ColumncolFrom1EditValueAsString, uIRow4ColumncolFrom1Edit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]4[Column]colTo1' text box equals '25.08.2024'
            Assert.AreEqual(this.CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues.UIRow4ColumncolTo1EditValueAsString, uIRow4ColumncolTo1Edit.ValueAsString);
        }
        
        /// <summary>
        /// CheckButtonEnabled_C3_S3 - Use 'CheckButtonEnabled_C3_S3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckButtonEnabled_C3_S3()
        {
            #region Variable Declarations
            DXButton uIKalkulerButton = this.UIArbeidsplanKopiavFFTWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpFixedPaymentClient.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIKalkulerButton;
            DXButton uIOverførButton = this.UIArbeidsplanKopiavFFTWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpFixedPaymentClient.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIOverførButton;
            DXButton uIStoppButton = this.UIArbeidsplanKopiavFFTWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpFixedPaymentClient.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIStoppButton;
            #endregion

            // Verify that the 'Enabled' property of 'Kalkuler' button equals 'True'
            Assert.AreEqual(this.CheckButtonEnabled_C3_S3ExpectedValues.UIKalkulerButtonEnabled, uIKalkulerButton.Enabled);

            // Verify that the 'Enabled' property of 'Overfør...' button equals 'False'
            Assert.AreEqual(this.CheckButtonEnabled_C3_S3ExpectedValues.UIOverførButtonEnabled, uIOverførButton.Enabled);

            // Verify that the 'Enabled' property of 'Stopp...' button equals 'False'
            Assert.AreEqual(this.CheckButtonEnabled_C3_S3ExpectedValues.UIStoppButtonEnabled, uIStoppButton.Enabled);
        }
        
        /// <summary>
        /// CheckCalculationEkland_C1_S8 - Use 'CheckCalculationEkland_C1_S8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculationEkland_C1_S8()
        {
            UIMapVS2017.CheckCalculationEkland_C1_S8();
        }
        
        /// <summary>
        /// CheckCalculationEkland_C1_S9 - Use 'CheckCalculationEkland_C1_S9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculationEkland_C1_S9()
        {
            UIMapVS2017.CheckCalculationEkland_C1_S9();
        }
        
        /// <summary>
        /// CheckCalculationEklandTwoLines_C1_S12 - Use 'CheckCalculationEklandTwoLines_C1_S12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculationEklandTwoLines_C1_S12()
        {
            UIMapVS2017.CheckCalculationEklandTwoLines_C1_S12();
        }
        
        /// <summary>
        /// CheckCalculations_C1_S19 - Use 'CheckCalculations_C1_S19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C1_S19()
        {
            UIMapVS2017.CheckCalculations_C1_S19();
        }
        
        /// <summary>
        /// CheckCalculations_C2_S2 - Use 'CheckCalculations_C2_S2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C2_S2()
        {
            UIMapVS2017.CheckCalculations_C2_S2();
        }
        
        /// <summary>
        /// CheckCalculations_C2_S3 - Use 'CheckCalculations_C2_S3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C2_S3()
        {
           UIMapVS2017.CheckCalculations_C2_S3();
        }
        
        /// <summary>
        /// CheckCalculations_C2_S5 - Use 'CheckCalculations_C2_S5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C2_S5()
        {
            #region Variable Declarations
            DXCell uIItem410KveldNattilleCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem410KveldNattilleCell;
            DXCell uIItem223Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem223Cell;
            DXCell uIItem400LørSøndagstilCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem400LørSøndagstilCell;
            DXCell uIItem1115Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem1115Cell;
            #endregion

            // Verify that the 'ValueAsString' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
            Assert.AreEqual(this.CheckCalculations_C2_S5ExpectedValues.UIItem410KveldNattilleCellValueAsString, uIItem410KveldNattilleCell.ValueAsString);

            // Verify that the 'Text' property of '22,3' cell equals '22,3'
            Assert.AreEqual(this.CheckCalculations_C2_S5ExpectedValues.UIItem223CellText, uIItem223Cell.Text);

            // Verify that the 'ValueAsString' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
            Assert.AreEqual(this.CheckCalculations_C2_S5ExpectedValues.UIItem400LørSøndagstilCellValueAsString, uIItem400LørSøndagstilCell.ValueAsString);

            // Verify that the 'Text' property of '11,15' cell equals '11,15'
            Assert.AreEqual(this.CheckCalculations_C2_S5ExpectedValues.UIItem1115CellText, uIItem1115Cell.Text);
        }
        
        /// <summary>
        /// CheckCalculations_C3_S11 - Use 'CheckCalculations_C3_S11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C3_S11()
        {
            UIMapVS2017.CheckCalculations_C3_S11();

        }
        
        /// <summary>
        /// CheckCalculations_C3_S15 - Use 'CheckCalculations_C3_S15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C3_S15()
        {
            UIMapVS2017.CheckCalculations_C3_S15();
        }
        
        /// <summary>
        /// CheckCalculations_C3_S16 - Use 'CheckCalculations_C3_S16ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C3_S16()
        {
           UIMapVS2017.CheckCalculations_C3_S16();
        }
        
        /// <summary>
        /// CheckCalculations_C3_S3 - Use 'CheckCalculations_C3_S3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C3_S3()
        {
           UIMapVS2017.CheckCalculations_C3_S3();
        }
        
        /// <summary>
        /// CheckCalculations_C4_S10 - Use 'CheckCalculations_C4_S10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C4_S10()
        {
            UIMapVS2017.CheckCalculations_C4_S10();
        }
        
        /// <summary>
        /// CheckCalculations_C4_S13 - Use 'CheckCalculations_C4_S13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C4_S13()
        {
            UIMapVS2017.CheckCalculations_C4_S13();
        }

        public List<string> CheckCalculations_C4_S15()
        {
            var errorList = new List<string>();
            var pivot = UIMapVS2017.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid;

            try
            {
                UIMapVS2017.CheckCalculations_C4_S15();
            }
            catch (Exception e)
            {
                errorList.Add("Chapter_4 step_15: " + e.Message);
            }

            var rows = pivot.RowCount;

            if (rows != 2)
                errorList.Add("Chapter_4 step_15: Unexpected rows");

            if (errorList.Count == 0)
                TestContext.WriteLine("Chapter_4 step_15: OK");

            return errorList;
        }

        /// <summary>
        /// CheckCalculations_C4_S19 - Use 'CheckCalculations_C4_S19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C4_S19()
        {
            UIMapVS2017.CheckCalculations_C4_S19();
        }
        
        /// <summary>
        /// CheckCalculations_C4_S20 - Use 'CheckCalculations_C4_S20ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C4_S20()
        {
            UIMapVS2017.CheckCalculations_C4_S20();
        }
        
        /// <summary>
        /// CheckCalculations_C4_S21 - Use 'CheckCalculations_C4_S21ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C4_S21()
        {
            UIMapVS2017.CheckCalculations_C4_S21();
        }
        
        /// <summary>
        /// CheckCalculations_C4_S25 - Use 'CheckCalculations_C4_S25ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C4_S25()
        {
          UIMapVS2017.CheckCalculations_C4_S25();
        }
        
        /// <summary>
        /// CheckCalculations_C4_S28 - Use 'CheckCalculations_C4_S28ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C4_S28()
        {
            UIMapVS2017.CheckCalculations_C4_S28();
        }
        
        /// <summary>
        /// CheckCalculations_C4_S29 - Use 'CheckCalculations_C4_S29ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C4_S29()
        {
            UIMapVS2017.CheckCalculations_C4_S29();
        }
        
        /// <summary>
        /// CheckCalculations_C4_S3 - Use 'CheckCalculations_C4_S3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C4_S3()
        {
            UIMapVS2017.CheckCalculations_C4_S3();
        }
        
        /// <summary>
        /// CheckCalculations_C4_S30 - Use 'CheckCalculations_C4_S30ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C4_S30()
        {
            UIMapVS2017.CheckCalculations_C4_S30();
        }
        
        /// <summary>
        /// CheckCalculations_C4_S5 - Use 'CheckCalculations_C4_S5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C4_S5()
        {
            UIMapVS2017.CheckCalculations_C4_S5();
        }
        
        /// <summary>
        /// CheckCalculations_C5_S2 - Use 'CheckCalculations_C5_S2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C5_S2()
        {
            UIMapVS2017.CheckCalculations_C5_S2();
        }
        
        /// <summary>
        /// CheckCalculations_C5_S4 - Use 'CheckCalculations_C5_S4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C5_S4()
        {
            UIMapVS2017.CheckCalculations_C5_S4();
        }
        
        /// <summary>
        /// CheckCalculations_C5_S5 - Use 'CheckCalculations_C5_S5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C5_S5()
        {
            UIMapVS2017.CheckCalculations_C5_S5();
        }
        
        /// <summary>
        /// CheckCalculations_C5_S6 - Use 'CheckCalculations_C5_S6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C5_S6()
        {
            UIMapVS2017.CheckCalculations_C5_S6();
        }
        
        /// <summary>
        /// CheckCalculations_C6_S13 - Use 'CheckCalculations_C6_S13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C6_S13()
        {
            UIMapVS2017.CheckCalculations_C6_S13();
        }
        
        /// <summary>
        /// CheckCalculations_C6_S17 - Use 'CheckCalculations_C6_S17ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C6_S17()
        {
            UIMapVS2017.CheckCalculations_C6_S17();
        }
        
        /// <summary>
        /// CheckCalculations_C6_S21 - Use 'CheckCalculations_C6_S21ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C6_S21()
        {
            UIMapVS2017.CheckCalculations_C6_S21();
        }
        
        /// <summary>
        /// CheckCalculations_C6_S26 - Use 'CheckCalculations_C6_S26ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C6_S26()
        {
            UIMapVS2017.CheckCalculations_C6_S26();
        }
        
        /// <summary>
        /// CheckCalculations_C6_S30 - Use 'CheckCalculations_C6_S30ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C6_S30()
        {
            UIMapVS2017.CheckCalculations_C6_S30();
        }
        
        /// <summary>
        /// CheckCalculations_C6_S33 - Use 'CheckCalculations_C6_S33ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C6_S33()
        {
            UIMapVS2017.CheckCalculations_C6_S33();
        }
        
        /// <summary>
        /// CheckCalculations_C6_S5 - Use 'CheckCalculations_C6_S5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C6_S5()
        {
           UIMapVS2017.CheckCalculations_C6_S5();
        }
        
        /// <summary>
        /// CheckCalculations_C6_S7 - Use 'CheckCalculations_C6_S7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C6_S7()
        {
            UIMapVS2017.CheckCalculations_C6_S7();
        }
        
        /// <summary>
        /// CheckCalculations_C6_S9 - Use 'CheckCalculations_C6_S9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalculations_C6_S9()
        {
            UIMapVS2017.CheckCalculations_C6_S9();
        }
        
        /// <summary>
        /// CheckCalulateFTTButtonDisabled - Use 'CheckCalulateFTTButtonDisabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCalulateFTTButtonDisabled()
        {
            #region Variable Declarations
            DXButton uIKalkulerButton = this.UIArbeidsplanKopiavFTTWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpFixedPaymentClient.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIKalkulerButton;
            #endregion

            // Verify that the 'Enabled' property of 'Kalkuler' button equals 'False'
            Assert.AreEqual(this.CheckCalulateFTTButtonDisabledExpectedValues.UIKalkulerButtonEnabled, uIKalkulerButton.Enabled);
        }
        
        /// <summary>
        /// CheckEditShiftClassesDisabled_C6_S2 - Use 'CheckEditShiftClassesDisabled_C6_S2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEditShiftClassesDisabled_C6_S2()
        {
            #region Variable Declarations
            DXLookUpEdit uISlue_Shiftclass_MondLookUpEdit = this.UIEndrevaktkodeD2Window.UIPcContentClient.UIPaNormalShiftcodePanClient.UITcExtraTabsTabList.UITpShiftClassClient.UIGcShiftClassForDoctoClient.UISlue_Shiftclass_MondLookUpEdit;
            DXLookUpEdit uISlue_Shiftclass_TuesLookUpEdit = this.UIEndrevaktkodeD2Window.UIPcContentClient.UIPaNormalShiftcodePanClient.UITcExtraTabsTabList.UITpShiftClassClient.UIGcShiftClassForDoctoClient.UISlue_Shiftclass_TuesLookUpEdit;
            DXLookUpEdit uISlue_Shiftclass_WednLookUpEdit = this.UIEndrevaktkodeD2Window.UIPcContentClient.UIPaNormalShiftcodePanClient.UITcExtraTabsTabList.UITpShiftClassClient.UIGcShiftClassForDoctoClient.UISlue_Shiftclass_WednLookUpEdit;
            DXLookUpEdit uISlue_Shiftclass_ThurLookUpEdit = this.UIEndrevaktkodeD2Window.UIPcContentClient.UIPaNormalShiftcodePanClient.UITcExtraTabsTabList.UITpShiftClassClient.UIGcShiftClassForDoctoClient.UISlue_Shiftclass_ThurLookUpEdit;
            DXLookUpEdit uISlue_Shiftclass_FridLookUpEdit = this.UIEndrevaktkodeD2Window.UIPcContentClient.UIPaNormalShiftcodePanClient.UITcExtraTabsTabList.UITpShiftClassClient.UIGcShiftClassForDoctoClient.UISlue_Shiftclass_FridLookUpEdit;
            DXLookUpEdit uISlue_Shiftclass_SatuLookUpEdit = this.UIEndrevaktkodeD2Window.UIPcContentClient.UIPaNormalShiftcodePanClient.UITcExtraTabsTabList.UITpShiftClassClient.UIGcShiftClassForDoctoClient.UISlue_Shiftclass_SatuLookUpEdit;
            DXLookUpEdit uISlue_Shiftclass_SundLookUpEdit = this.UIEndrevaktkodeD2Window.UIPcContentClient.UIPaNormalShiftcodePanClient.UITcExtraTabsTabList.UITpShiftClassClient.UIGcShiftClassForDoctoClient.UISlue_Shiftclass_SundLookUpEdit;
            #endregion

            // Verify that the 'ReadOnly' property of 'slue_Shiftclass_Monday' LookUpEdit equals 'True'
            Assert.AreEqual(this.CheckEditShiftClassesDisabled_C6_S2ExpectedValues.UISlue_Shiftclass_MondLookUpEditReadOnly, uISlue_Shiftclass_MondLookUpEdit.ReadOnly);

            // Verify that the 'ReadOnly' property of 'slue_Shiftclass_Tuesday' LookUpEdit equals 'True'
            Assert.AreEqual(this.CheckEditShiftClassesDisabled_C6_S2ExpectedValues.UISlue_Shiftclass_TuesLookUpEditReadOnly, uISlue_Shiftclass_TuesLookUpEdit.ReadOnly);

            // Verify that the 'ReadOnly' property of 'slue_Shiftclass_Wednesday' LookUpEdit equals 'True'
            Assert.AreEqual(this.CheckEditShiftClassesDisabled_C6_S2ExpectedValues.UISlue_Shiftclass_WednLookUpEditReadOnly, uISlue_Shiftclass_WednLookUpEdit.ReadOnly);

            // Verify that the 'ReadOnly' property of 'slue_Shiftclass_Thursday' LookUpEdit equals 'True'
            Assert.AreEqual(this.CheckEditShiftClassesDisabled_C6_S2ExpectedValues.UISlue_Shiftclass_ThurLookUpEditReadOnly, uISlue_Shiftclass_ThurLookUpEdit.ReadOnly);

            // Verify that the 'ReadOnly' property of 'slue_Shiftclass_Friday' LookUpEdit equals 'True'
            Assert.AreEqual(this.CheckEditShiftClassesDisabled_C6_S2ExpectedValues.UISlue_Shiftclass_FridLookUpEditReadOnly, uISlue_Shiftclass_FridLookUpEdit.ReadOnly);

            // Verify that the 'ReadOnly' property of 'slue_Shiftclass_Saturday' LookUpEdit equals 'True'
            Assert.AreEqual(this.CheckEditShiftClassesDisabled_C6_S2ExpectedValues.UISlue_Shiftclass_SatuLookUpEditReadOnly, uISlue_Shiftclass_SatuLookUpEdit.ReadOnly);

            // Verify that the 'ReadOnly' property of 'slue_Shiftclass_Sunday' LookUpEdit equals 'True'
            Assert.AreEqual(this.CheckEditShiftClassesDisabled_C6_S2ExpectedValues.UISlue_Shiftclass_SundLookUpEditReadOnly, uISlue_Shiftclass_SundLookUpEdit.ReadOnly);
        }
        
        /// <summary>
        /// CheckFTT1IsReadyInExportLog - Use 'CheckFTT1IsReadyInExportLogExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTT1IsReadyInExportLog()
        {
            #region Variable Declarations
            DXCell uIItem04012016Cell = this.UIExportloggWindow.UIGsLayoutControl1Custom.UI_LayoutGroup_RootLayoutGroup.UI_LayoutItem_JobsLayoutControlItem.UIGsPanelControl1Client.UI_JobsGridTable.UIItem04012016Cell;
            DXCell uIItem24012016Cell = this.UIExportloggWindow.UIGsLayoutControl1Custom.UI_LayoutGroup_RootLayoutGroup.UI_LayoutItem_JobsLayoutControlItem.UIGsPanelControl1Client.UI_JobsGridTable.UIItem24012016Cell;
            DXCell uIItem5150Cell = this.UIExportloggWindow.UIGsLayoutControl1Custom.UI_LayoutGroup_RootLayoutGroup.UI_LayoutItem_JobsLayoutControlItem.UIGsPanelControl1Client.UI_JobsGridTable.UIItem5150Cell;
            DXCell uIKlartiloverføringCell = this.UIExportloggWindow.UIGsLayoutControl1Custom.UI_LayoutGroup_RootLayoutGroup.UI_LayoutItem_JobsLayoutControlItem.UIGsPanelControl1Client.UI_JobsGridTable.UIKlartiloverføringCell;
            #endregion

            // Verify that the 'ValueAsString' property of '04.01.2016' cell equals '2024-08-05'
            Assert.AreEqual(this.CheckFTT1IsReadyInExportLogExpectedValues.UIItem04012016CellValueAsString, uIItem04012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '24.01.2016' cell equals '2024-08-25'
            Assert.AreEqual(this.CheckFTT1IsReadyInExportLogExpectedValues.UIItem24012016CellValueAsString, uIItem24012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5150' cell equals '5150'
            Assert.AreEqual(this.CheckFTT1IsReadyInExportLogExpectedValues.UIItem5150CellValueAsString, uIItem5150Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Klar til overføring' cell equals 'Klar til overføring'
            Assert.AreEqual(this.CheckFTT1IsReadyInExportLogExpectedValues.UIKlartiloverføringCellValueAsString, uIKlartiloverføringCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckFTTcode400_C1_S5 - Use 'CheckFTTcode400_C1_S5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTcode400_C1_S5()
        {
            UIMapVS2017.CheckFTTcode400_C1_S5();
        }
        
        /// <summary>
        /// CheckFTTcode410_C1_S5 - Use 'CheckFTTcode410_C1_S5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTcode410_C1_S5()
        {
            UIMapVS2017.CheckFTTcode410_C1_S5();
        }
        
        /// <summary>
        /// CheckFTTEmployeesToTransfere - Use 'CheckFTTEmployeesToTransfereExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTEmployeesToTransfere()
        {
            #region Variable Declarations
            DXTextEdit uIDeExportFromEdit = this.UIOverførtilleggWindow.UIDeExportFromEdit;
            DXCell uIAdamsMaudCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIAdamsMaudCell;
            DXCell uIBergmanIngridCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell;
            DXCell uIBergmanIngridCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell1;
            DXCell uIEklandBrittCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIEklandBrittCell;
            DXCell uIEklandBrittCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIEklandBrittCell1;
            #endregion

            // Verify that the 'ValueAsString' property of 'deExportFrom' text box equals '2024-05-08'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereExpectedValues.UIDeExportFromEditValueAsString, uIDeExportFromEdit.ValueAsString, "Startdate is wrong");

            // Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Adams, Maud'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereExpectedValues.UIAdamsMaudCellValueAsString, uIAdamsMaudCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Bergman, Ingrid'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereExpectedValues.UIBergmanIngridCellValueAsString, uIBergmanIngridCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Bergman, Ingrid'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereExpectedValues.UIBergmanIngridCell1ValueAsString, uIBergmanIngridCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Ekland, Britt' cell equals 'Ekland, Britt'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereExpectedValues.UIEklandBrittCellValueAsString, uIEklandBrittCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Ekland, Britt' cell equals 'Ekland, Britt'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereExpectedValues.UIEklandBrittCell1ValueAsString, uIEklandBrittCell1.ValueAsString);
        }
        
        /// <summary>
        /// CheckFTTEmployeesToTransfere_C2_S24 - Use 'CheckFTTEmployeesToTransfere_C2_S24ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTEmployeesToTransfere_C2_S24()
        {
            #region Variable Declarations
            DXCell uIAdamsMaudCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIAdamsMaudCell;
            DXCell uIBergmanIngridCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell;
            DXCell uIBergmanIngridCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell1;
            DXCell uIEklandBrittCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIEklandBrittCell;
            #endregion

            // Verify that the 'Text' property of 'Adams, Maud' cell equals 'Skarsgård, Stellan'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C2_S24ExpectedValues.UIAdamsMaudCellText, uIAdamsMaudCell.Text);

            // Verify that the 'Text' property of 'Bergman, Ingrid' cell equals 'Stormare, Peter'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C2_S24ExpectedValues.UIBergmanIngridCellText, uIBergmanIngridCell.Text);

            // Verify that the 'Text' property of 'Bergman, Ingrid' cell equals 'Stormare, Peter'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C2_S24ExpectedValues.UIBergmanIngridCell1Text, uIBergmanIngridCell1.Text);

            // Verify that the 'Text' property of 'Ekland, Britt' cell equals 'Edwall, Allan'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C2_S24ExpectedValues.UIEklandBrittCellText, uIEklandBrittCell.Text);
        }
        
        /// <summary>
        /// CheckFTTEmployeesToTransfere_C6_S23 - Use 'CheckFTTEmployeesToTransfere_C6_S23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTEmployeesToTransfere_C6_S23()
        {
            #region Variable Declarations
            DXCell uIAdamsMaudCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIAdamsMaudCell;
            DXCell uIItem1Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem1Cell;
            DXTextEdit uIRow0ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow0ColumncolFromEdit;
            DXTextEdit uIRow0ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow0ColumncolToEdit;
            DXCell uIBergmanIngridCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell;
            DXCell uIItem1Cell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem1Cell1;
            DXTextEdit uIRow1ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow1ColumncolFromEdit;
            DXTextEdit uIRow1ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow1ColumncolToEdit;
            DXCell uIBergmanIngridCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell1;
            DXCell uIItem2Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem2Cell;
            DXTextEdit uIRow2ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow2ColumncolFromEdit;
            DXTextEdit uIRow2ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow2ColumncolToEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Oscarsson, Per'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIAdamsMaudCellValueAsString, uIAdamsMaudCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1' cell equals '1'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIItem1CellValueAsString, uIItem1Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]0[Column]colFrom' text box equals '08.01.2024'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIRow0ColumncolFromEditValueAsString, uIRow0ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]0[Column]colTo' text box equals '21.01.2024'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIRow0ColumncolToEditValueAsString, uIRow0ColumncolToEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Oscarsson, Per'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIBergmanIngridCellValueAsString, uIBergmanIngridCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1' cell equals '1'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIItem1Cell1ValueAsString, uIItem1Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]1[Column]colFrom' text box equals '29.01.2024'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIRow1ColumncolFromEditValueAsString, uIRow1ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]1[Column]colTo' text box equals '04.02.2024'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIRow1ColumncolToEditValueAsString, uIRow1ColumncolToEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Oscarsson, Per'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIBergmanIngridCell1ValueAsString, uIBergmanIngridCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of '2' cell equals '2'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIItem2CellValueAsString, uIItem2Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]2[Column]colFrom' text box equals '22.01.2024'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIRow2ColumncolFromEditValueAsString, uIRow2ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]2[Column]colTo' text box equals '28.01.2024'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S23ExpectedValues.UIRow2ColumncolToEditValueAsString, uIRow2ColumncolToEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckFTTEmployeesToTransfere_C6_S35 - Use 'CheckFTTEmployeesToTransfere_C6_S35ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTEmployeesToTransfere_C6_S35()
        {
            #region Variable Declarations
            DXCell uIAdamsMaudCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIAdamsMaudCell;
            DXTextEdit uIRow0ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow0ColumncolFromEdit;
            DXTextEdit uIRow0ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow0ColumncolToEdit;
            DXCell uIItem400LørSøndagstilCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem400LørSøndagstilCell;
            DXCell uIItem1115Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem1115Cell;
            DXCell uIItem223Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem223Cell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Nyqvist, Mikael'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S35ExpectedValues.UIAdamsMaudCellValueAsString, uIAdamsMaudCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]0[Column]colFrom' text box equals '08.01.2024'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S35ExpectedValues.UIRow0ColumncolFromEditValueAsString, uIRow0ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]0[Column]colTo' text box equals '28.01.2024'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S35ExpectedValues.UIRow0ColumncolToEditValueAsString, uIRow0ColumncolToEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '400 - Lør./Søndagstillegg' cell equals '601 - VK Ordinær sats'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S35ExpectedValues.UIItem400LørSøndagstilCellValueAsString, uIItem400LørSøndagstilCell.ValueAsString);

            // Verify that the 'Text' property of '11,15' cell equals '151666,67'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S35ExpectedValues.UIItem1115CellText, uIItem1115Cell.Text);

            // Verify that the 'Text' property of '22,3' cell equals '30,58'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfere_C6_S35ExpectedValues.UIItem223CellText, uIItem223Cell.Text);
        }
        
        /// <summary>
        /// CheckFTTEmployeesToTransfereValues - Use 'CheckFTTEmployeesToTransfereValuesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTEmployeesToTransfereValues()
        {
            #region Variable Declarations
            DXCell uIAdamsMaudCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIAdamsMaudCell;
            DXCell uIItem5352Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem5352Cell;
            DXCell uIItem7136Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem7136Cell;
            DXCell uIItem0Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem0Cell;
            DXTextEdit uIRow1ColumncolEmployeEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow1ColumncolEmployeEdit;
            DXCell uIItem867Cell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem867Cell1;
            DXCell uIBergmanIngridCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell1;
            DXCell uIItem867Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem867Cell;
            DXCell uIItem2025Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem2025Cell;
            DXCell uIEklandBrittCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIEklandBrittCell;
            DXCell uIItem223Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem223Cell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Persbrandt, Mikael'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValuesExpectedValues.UIAdamsMaudCellValueAsString, uIAdamsMaudCell.ValueAsString);

            // Verify that the 'Text' property of '53,52' cell equals '53,52'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValuesExpectedValues.UIItem5352CellText, uIItem5352Cell.Text);

            // Verify that the 'Text' property of '71,36' cell equals '71,36'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValuesExpectedValues.UIItem7136CellText, uIItem7136Cell.Text);

            // Verify that the 'Text' property of '0' cell equals '0'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValuesExpectedValues.UIItem0CellText, uIItem0Cell.Text);

            // Verify that the 'ValueAsString' property of '[Row]1[Column]colEmployee' text box equals 'Persbrandt, Mikael'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValuesExpectedValues.UIRow1ColumncolEmployeEditValueAsString, uIRow1ColumncolEmployeEdit.ValueAsString);

            // Verify that the 'Text' property of '8,67' cell equals '8,67'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValuesExpectedValues.UIItem867Cell1Text, uIItem867Cell1.Text);

            // Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Gustavsson, Robert'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValuesExpectedValues.UIBergmanIngridCell1ValueAsString, uIBergmanIngridCell1.ValueAsString);

            // Verify that the 'Text' property of '8,67' cell equals '11,56'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValuesExpectedValues.UIItem867CellText, uIItem867Cell.Text);

            // Verify that the 'Text' property of '20,25' cell equals '20,25'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValuesExpectedValues.UIItem2025CellText, uIItem2025Cell.Text);

            // Verify that the 'ValueAsString' property of 'Ekland, Britt' cell equals 'Rheborg, Johan'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValuesExpectedValues.UIEklandBrittCellValueAsString, uIEklandBrittCell.ValueAsString);

            // Verify that the 'Text' property of '22,3' cell equals '18,8'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValuesExpectedValues.UIItem223CellText, uIItem223Cell.Text);
        }
        
        /// <summary>
        /// CheckFTTEmployeesToTransfereValues_C5_S7 - Use 'CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTEmployeesToTransfereValues_C5_S7()
        {
            #region Variable Declarations
            DXCell uIAdamsMaudCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIAdamsMaudCell;
            DXCell uIItem867Cell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem867Cell1;
            DXCell uIBergmanIngridCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell;
            DXCell uIItem867Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem867Cell;
            DXCell uIBergmanIngridCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell1;
            DXCell uIItem223Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem223Cell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Jähkel, Lennart'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues.UIAdamsMaudCellValueAsString, uIAdamsMaudCell.ValueAsString);

            // Verify that the 'Text' property of '8,67' cell equals '8,67'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues.UIItem867Cell1Text, uIItem867Cell1.Text);

            // Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Lassgård, Rolf'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues.UIBergmanIngridCellValueAsString, uIBergmanIngridCell.ValueAsString);

            // Verify that the 'Text' property of '8,67' cell equals '20,9'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues.UIItem867CellText, uIItem867Cell.Text);

            // Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Lassgård, Rolf'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues.UIBergmanIngridCell1ValueAsString, uIBergmanIngridCell1.ValueAsString);

            // Verify that the 'Text' property of '22,3' cell equals '8,67'
            Assert.AreEqual(this.CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues.UIItem223CellText, uIItem223Cell.Text);
        }
        
        /// <summary>
        /// CheckFTThasEmptyList - Use 'CheckFTThasEmptyListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTThasEmptyList()
        {
            UIMapVS2017.CheckFTThasEmptyList();
        }
        
        /// <summary>
        /// CheckFTTPeriod_C1_S5 - Use 'CheckFTTPeriod_C1_S5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTPeriod_C1_S5()
        {
            UIMapVS2017.CheckFTTPeriod_C1_S5();
        }
        
        /// <summary>
        /// CheckFTTransfereButtonIsDisabled - Use 'CheckFTTransfereButtonIsDisabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTransfereButtonIsDisabled()
        {
           UIMapVS2017.CheckFTTransfereButtonIsDisabled();
        }
        
        /// <summary>
        /// CheckFTTransfereButtonIsEnabled - Use 'CheckFTTransfereButtonIsEnabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTransfereButtonIsEnabled()
        {
            #region Variable Declarations
            DXButton uIOverførButton = this.UIOverførtilleggWindow.UIOverførButton;
            #endregion

            // Verify that the 'Enabled' property of '&Overfør' button equals 'True'
            Assert.AreEqual(this.CheckFTTransfereButtonIsEnabledExpectedValues.UIOverførButtonEnabled, uIOverførButton.Enabled, "Overfør skal være tilgjengelig");
        }
        
        /// <summary>
        /// CheckFTTransfereStormareHasOneLine - Use 'CheckFTTransfereStormareHasOneLineExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFTTransfereStormareHasOneOkLine()
        {
            UIMapVS2017.CheckFTTransfereStormareHasOneOkLine();
        }
        
        /// <summary>
        /// CheckMaxMasterDetails_C3_S5 - Use 'CheckMaxMasterDetails_C3_S5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckMaxMasterDetails_C3_S5()
        {
            #region Variable Declarations
            DXCell uIItem410KveldNattilleCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem410KveldNattilleCell;
            DXCell uIItem223Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem223Cell;
            DXCell uIItem400LørSøndagstilCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem400LørSøndagstilCell;
            DXCell uIItem1115Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem1115Cell;
            #endregion

            // Verify that the 'ValueAsString' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
            Assert.AreEqual(this.CheckMaxMasterDetails_C3_S5ExpectedValues.UIItem410KveldNattilleCellValueAsString, uIItem410KveldNattilleCell.ValueAsString);

            // Verify that the 'Text' property of '22,3' cell equals '62,44'
            Assert.AreEqual(this.CheckMaxMasterDetails_C3_S5ExpectedValues.UIItem223CellText, uIItem223Cell.Text);

            // Verify that the 'ValueAsString' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
            Assert.AreEqual(this.CheckMaxMasterDetails_C3_S5ExpectedValues.UIItem400LørSøndagstilCellValueAsString, uIItem400LørSøndagstilCell.ValueAsString);

            // Verify that the 'Text' property of '11,15' cell equals '11,89'
            Assert.AreEqual(this.CheckMaxMasterDetails_C3_S5ExpectedValues.UIItem1115CellText, uIItem1115Cell.Text);
        }

        public List<string> CheckNoCalculationEkland_C1_S7()
        {
            var errorList = new List<string>();
            var pivot = UIMapVS2017.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid;

            try
            {
                UIMapVS2017.CheckNoCalculationEkland_C1_S7();
            }
            catch (Exception e)
            {
                errorList.Add("Chapter_1 step_7: " + e.Message);
            }

            var rows = pivot.RowCount;

            if(rows != 5)
                errorList.Add("Chapter_1 step_7: Unexpected rows");

            if (errorList.Count == 0)
                TestContext.WriteLine("Chapter_1 step_7: OK");

            return errorList;
        }
        
        /// <summary>
        /// CheckShiftClassesData_C6_S10 - Use 'CheckShiftClassesData_C6_S10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftClassesData_C6_S10()
        {
            #region Variable Declarations
            DXPivotGridFieldValue uIOscarssonPerPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIOscarssonPerPivotGridFieldValue;
            DXPivotGridCell uIItem2PivotGridCell5 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell5;
            DXPivotGridCell uIItem15PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem15PivotGridCell1;
            DXPivotGridCell uIKr300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr300PivotGridCell;
            DXPivotGridFieldValue uIVollterSvenPivotGridFieldValue1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIVollterSvenPivotGridFieldValue1;
            DXPivotGridFieldValue uIEPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIEPivotGridFieldValue;
            DXPivotGridCell uIItem1PivotGridCell3 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell3;
            DXPivotGridCell uIItem5PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem5PivotGridCell;
            DXPivotGridCell uIKr500PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr500PivotGridCell;
            DXPivotGridFieldValue uIFPivotGridFieldValue1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIFPivotGridFieldValue1;
            DXPivotGridCell uIItem1PivotGridCell4 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell4;
            DXPivotGridCell uIItem6PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem6PivotGridCell1;
            DXPivotGridCell uIKr600PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell1;
            DXPivotGridFieldValue uIHPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIHPivotGridFieldValue;
            DXPivotGridCell uIItem1PivotGridCell5 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell5;
            DXPivotGridCell uIItem8PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem8PivotGridCell;
            DXPivotGridCell uIKr800PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr800PivotGridCell;
            DXPivotGridCell uIItem4PivotGridCell2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem4PivotGridCell2;
            DXPivotGridCell uIItem7PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem7PivotGridCell1;
            DXPivotGridCell uIKr2100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr2100PivotGridCell;
            DXPivotGridFieldValue uIItem01012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem01012016PivotGridFieldValue;
            #endregion

            // Verify that the 'Text' property of 'Oscarsson, Per' PivotGridFieldValue equals 'Oscarsson, Per'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIOscarssonPerPivotGridFieldValueText, uIOscarssonPerPivotGridFieldValue.Text, "Feil ansatt");

            // Verify that the 'Text' property of '2' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIItem2PivotGridCell5Text, uIItem2PivotGridCell5.Text);

            // Verify that the 'Text' property of '1,5' PivotGridCell equals '1,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIItem15PivotGridCell1Text, uIItem15PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 3,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIKr300PivotGridCellText, uIKr300PivotGridCell.Text);

            // Verify that the 'Text' property of 'Vollter, Sven' PivotGridFieldValue equals 'Vollter, Sven'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIVollterSvenPivotGridFieldValue1Text, uIVollterSvenPivotGridFieldValue1.Text, "Feil ansatt");

            // Verify that the 'Text' property of 'E' PivotGridFieldValue equals 'F'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIEPivotGridFieldValueText, uIEPivotGridFieldValue.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIItem1PivotGridCell3Text, uIItem1PivotGridCell3.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '6'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIItem5PivotGridCellText, uIItem5PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 5,00' PivotGridCell equals 'kr 6,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIKr500PivotGridCellText, uIKr500PivotGridCell.Text);

            // Verify that the 'Text' property of 'F' PivotGridFieldValue equals 'G'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIFPivotGridFieldValue1Text, uIFPivotGridFieldValue1.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIItem1PivotGridCell4Text, uIItem1PivotGridCell4.Text);

            // Verify that the 'Text' property of '6' PivotGridCell equals '7'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIItem6PivotGridCell1Text, uIItem6PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 14,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIKr600PivotGridCell1Text, uIKr600PivotGridCell1.Text);

            // Verify that the 'Text' property of 'H' PivotGridFieldValue equals 'H'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIHPivotGridFieldValueText, uIHPivotGridFieldValue.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIItem1PivotGridCell5Text, uIItem1PivotGridCell5.Text);

            // Verify that the 'Text' property of '8' PivotGridCell equals '8'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIItem8PivotGridCellText, uIItem8PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 8,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIKr800PivotGridCellText, uIKr800PivotGridCell.Text);

            // Verify that the 'Text' property of '4' PivotGridCell equals '4'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIItem4PivotGridCell2Text, uIItem4PivotGridCell2.Text);

            // Verify that the 'Text' property of '7' PivotGridCell equals '7'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIItem7PivotGridCell1Text, uIItem7PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 21,00' PivotGridCell equals 'kr 28,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIKr2100PivotGridCellText, uIKr2100PivotGridCell.Text);

            // Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S10ExpectedValues.UIItem01012016PivotGridFieldValueText, uIItem01012016PivotGridFieldValue.Text);
        }
        
        /// <summary>
        /// CheckShiftClassesData_C6_S14 - Use 'CheckShiftClassesData_C6_S14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftClassesData_C6_S14()
        {
            #region Variable Declarations
            DXPivotGridFieldValue uIItem01012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem01012016PivotGridFieldValue;
            DXPivotGridCell uIItem1PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell1;
            DXPivotGridCell uIItem6PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem6PivotGridCell;
            DXPivotGridCell uIItem15PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem15PivotGridCell1;
            DXPivotGridCell uIItem5PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem5PivotGridCell;
            DXPivotGridCell uIItem6PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem6PivotGridCell1;
            DXPivotGridCell uIItem8PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem8PivotGridCell;
            DXPivotGridCell uIItem7PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem7PivotGridCell1;
            DXPivotGridCell uIItem4PivotGridCell2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem4PivotGridCell2;
            DXPivotGridCell uIItem2PivotGridCell5 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell5;
            DXPivotGridCell uIKr100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr100PivotGridCell;
            DXPivotGridCell uIKr600PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell;
            DXPivotGridCell uIKr300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr300PivotGridCell;
            DXPivotGridCell uIKr500PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr500PivotGridCell;
            DXPivotGridCell uIKr800PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr800PivotGridCell;
            DXPivotGridCell uIKr2100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr2100PivotGridCell;
            DXPivotGridFieldValue uISum31012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UISum31012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem11012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem11012016PivotGridFieldValue;
            DXPivotGridFieldValue uISum31012016PivotGridFieldValue2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UISum31012016PivotGridFieldValue2;
            DXPivotGridCell uIItem100PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem100PivotGridCell1;
            DXPivotGridCell uIItem200PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem200PivotGridCell;
            DXPivotGridCell uIItem150PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem150PivotGridCell;
            DXPivotGridCell uIItem13125PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem13125PivotGridCell;
            DXPivotGridCell uIItem700PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem700PivotGridCell;
            DXPivotGridCell uIKr10000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr10000PivotGridCell;
            DXPivotGridCell uIKr20000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr20000PivotGridCell;
            DXPivotGridCell uIKr30000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr30000PivotGridCell;
            DXPivotGridCell uIKr50000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr50000PivotGridCell;
            DXPivotGridCell uIKr90000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr90000PivotGridCell;
            DXPivotGridCell uIKr10100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr10100PivotGridCell;
            DXPivotGridCell uIKr20200PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr20200PivotGridCell;
            DXPivotGridCell uIKr30300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr30300PivotGridCell;
            DXPivotGridCell uIKr600PivotGridCell2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell2;
            DXPivotGridCell uIKr70000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr70000PivotGridCell;
            DXPivotGridCell uIKr800PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr800PivotGridCell1;
            DXPivotGridCell uIKr71400PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr71400PivotGridCell;
            #endregion

            // Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem01012016PivotGridFieldValueText, uIItem01012016PivotGridFieldValue.Text, "Feil dato");

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem1PivotGridCell1Text, uIItem1PivotGridCell1.Text);

            // Verify that the 'Text' property of '6' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem6PivotGridCellText, uIItem6PivotGridCell.Text);

            // Verify that the 'Text' property of '1,5' PivotGridCell equals '1,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem15PivotGridCell1Text, uIItem15PivotGridCell1.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '6'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem5PivotGridCellText, uIItem5PivotGridCell.Text);

            // Verify that the 'Text' property of '6' PivotGridCell equals ''
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem6PivotGridCell1Text, uIItem6PivotGridCell1.Text);

            // Verify that the 'Text' property of '8' PivotGridCell equals '8'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem8PivotGridCellText, uIItem8PivotGridCell.Text);

            // Verify that the 'Text' property of '7' PivotGridCell equals '7'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem7PivotGridCell1Text, uIItem7PivotGridCell1.Text);

            // Verify that the 'Text' property of '4' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem4PivotGridCell2Text, uIItem4PivotGridCell2.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem2PivotGridCell5Text, uIItem2PivotGridCell5.Text);

            // Verify that the 'Text' property of 'kr 1,00' PivotGridCell equals 'kr 1,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr100PivotGridCellText, uIKr100PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 2,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr600PivotGridCellText, uIKr600PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 3,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr300PivotGridCellText, uIKr300PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 5,00' PivotGridCell equals 'kr 6,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr500PivotGridCellText, uIKr500PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 8,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr800PivotGridCellText, uIKr800PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 21,00' PivotGridCell equals 'kr 14,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr2100PivotGridCellText, uIKr2100PivotGridCell.Text);

            // Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UISum31012016PivotGridFieldValueText, uISum31012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '11.01.2016' PivotGridFieldValue equals '15.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem11012016PivotGridFieldValueText, uIItem11012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UISum31012016PivotGridFieldValue2Text, uISum31012016PivotGridFieldValue2.Text);

            // Verify that the 'Text' property of '100' PivotGridCell equals '100'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem100PivotGridCell1Text, uIItem100PivotGridCell1.Text);

            // Verify that the 'Text' property of '200' PivotGridCell equals '200'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem200PivotGridCellText, uIItem200PivotGridCell.Text);

            // Verify that the 'Text' property of '150' PivotGridCell equals '150'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem150PivotGridCellText, uIItem150PivotGridCell.Text);

            // Verify that the 'Text' property of '13125' PivotGridCell equals '700'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem13125PivotGridCellText, uIItem13125PivotGridCell.Text);

            // Verify that the 'Text' property of '700' PivotGridCell equals '700'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIItem700PivotGridCellText, uIItem700PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 100,00' PivotGridCell equals 'kr 100,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr10000PivotGridCellText, uIKr10000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 200,00' PivotGridCell equals 'kr 200,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr20000PivotGridCellText, uIKr20000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 300,00' PivotGridCell equals 'kr 300,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr30000PivotGridCellText, uIKr30000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 500,00' PivotGridCell equals 'kr 1 400,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr50000PivotGridCellText, uIKr50000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 900,00' PivotGridCell equals 'kr 1 400,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr90000PivotGridCellText, uIKr90000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 101,00' PivotGridCell equals 'kr 101,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr10100PivotGridCellText, uIKr10100PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 202,00' PivotGridCell equals 'kr 202,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr20200PivotGridCellText, uIKr20200PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 303,00' PivotGridCell equals 'kr 303,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr30300PivotGridCellText, uIKr30300PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 6,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr600PivotGridCell2Text, uIKr600PivotGridCell2.Text);

            // Verify that the 'Text' property of 'kr 700,00' PivotGridCell equals 'kr 1 400,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr70000PivotGridCellText, uIKr70000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 8,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr800PivotGridCell1Text, uIKr800PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 714,00' PivotGridCell equals 'kr 1 414,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S14ExpectedValues.UIKr71400PivotGridCellText, uIKr71400PivotGridCell.Text);
        }
        
        /// <summary>
        /// CheckShiftClassesData_C6_S18 - Use 'CheckShiftClassesData_C6_S18ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftClassesData_C6_S18()
        {
            #region Variable Declarations
            DXPivotGridFieldValue uIItem04012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem04012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem25012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem25012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem04012016PivotGridFieldValue1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem04012016PivotGridFieldValue1;
            DXPivotGridFieldValue uIItem17012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem17012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem31012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem31012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem31012016PivotGridFieldValue1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem31012016PivotGridFieldValue1;
            DXPivotGridFieldValue uISum31012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UISum31012016PivotGridFieldValue;
            DXPivotGridFieldValue uISum31012016PivotGridFieldValue3 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UISum31012016PivotGridFieldValue3;
            DXPivotGridCell uIKr100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr100PivotGridCell;
            DXPivotGridCell uIKr600PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell;
            DXPivotGridCell uIKr300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr300PivotGridCell;
            DXPivotGridCell uIKr2100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr2100PivotGridCell;
            DXPivotGridCell uIItem1PivotGridCell9 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell9;
            DXPivotGridCell uIItem1PivotGridCell10 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell10;
            DXPivotGridCell uIItem2PivotGridCell2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell2;
            DXPivotGridCell uIItem1PivotGridCell11 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell11;
            DXPivotGridCell uIItem1PivotGridCell12 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell12;
            DXPivotGridCell uIItem2PivotGridCell3 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell3;
            DXPivotGridCell uIItem4PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem4PivotGridCell1;
            DXPivotGridCell uIKr10000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr10000PivotGridCell;
            DXPivotGridCell uIKr20000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr20000PivotGridCell;
            DXPivotGridCell uIKr30000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr30000PivotGridCell;
            DXPivotGridCell uIKr10000PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr10000PivotGridCell1;
            DXPivotGridCell uIKr50000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr50000PivotGridCell;
            DXPivotGridCell uIKr60000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr60000PivotGridCell;
            DXPivotGridCell uIKr90000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr90000PivotGridCell;
            DXPivotGridCell uIItem2PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell;
            DXPivotGridCell uIItem2PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell1;
            DXPivotGridCell uIItem4PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem4PivotGridCell;
            DXPivotGridCell uIItem1PivotGridCell6 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell6;
            DXPivotGridCell uIItem1PivotGridCell7 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell7;
            DXPivotGridCell uIItem1PivotGridCell8 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell8;
            DXPivotGridCell uIItem3PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem3PivotGridCell;
            DXPivotGridCell uIItem505PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem505PivotGridCell;
            DXPivotGridCell uIItem101PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem101PivotGridCell;
            DXPivotGridCell uIItem7575PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem7575PivotGridCell;
            DXPivotGridCell uIItem100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem100PivotGridCell;
            DXPivotGridCell uIItem500PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem500PivotGridCell;
            DXPivotGridCell uIItem300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem300PivotGridCell;
            DXPivotGridCell uIItem1505PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1505PivotGridCell;
            DXPivotGridCell uIKr10100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr10100PivotGridCell;
            DXPivotGridCell uIKr20200PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr20200PivotGridCell;
            DXPivotGridCell uIKr30300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr30300PivotGridCell;
            DXPivotGridCell uIKr600PivotGridCell2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell2;
            DXPivotGridCell uIKr70000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr70000PivotGridCell;
            DXPivotGridCell uIKr800PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr800PivotGridCell1;
            DXPivotGridCell uIKr71400PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr71400PivotGridCell;
            #endregion

            // Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem04012016PivotGridFieldValueText, uIItem04012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '25.01.2016' PivotGridFieldValue equals '29.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem25012016PivotGridFieldValueText, uIItem25012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem04012016PivotGridFieldValue1Text, uIItem04012016PivotGridFieldValue1.Text);

            // Verify that the 'Text' property of '17.01.2016' PivotGridFieldValue equals '21.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem17012016PivotGridFieldValueText, uIItem17012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals '04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem31012016PivotGridFieldValueText, uIItem31012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals '04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem31012016PivotGridFieldValue1Text, uIItem31012016PivotGridFieldValue1.Text);

            // Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 21.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UISum31012016PivotGridFieldValueText, uISum31012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UISum31012016PivotGridFieldValue3Text, uISum31012016PivotGridFieldValue3.Text);

            // Verify that the 'Text' property of 'kr 1,00' PivotGridCell equals 'kr 1,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr100PivotGridCellText, uIKr100PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 2,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr600PivotGridCellText, uIKr600PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 3,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr300PivotGridCellText, uIKr300PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 21,00' PivotGridCell equals 'kr 3,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr2100PivotGridCellText, uIKr2100PivotGridCell.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem1PivotGridCell9Text, uIItem1PivotGridCell9.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem1PivotGridCell10Text, uIItem1PivotGridCell10.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem2PivotGridCell2Text, uIItem2PivotGridCell2.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem1PivotGridCell11Text, uIItem1PivotGridCell11.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem1PivotGridCell12Text, uIItem1PivotGridCell12.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem2PivotGridCell3Text, uIItem2PivotGridCell3.Text);

            // Verify that the 'Text' property of '4' PivotGridCell equals '4'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem4PivotGridCell1Text, uIItem4PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 100,00' PivotGridCell equals 'kr 100,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr10000PivotGridCellText, uIKr10000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 200,00' PivotGridCell equals 'kr 200,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr20000PivotGridCellText, uIKr20000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 300,00' PivotGridCell equals 'kr 300,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr30000PivotGridCellText, uIKr30000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 100,00' PivotGridCell equals 'kr 100,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr10000PivotGridCell1Text, uIKr10000PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 500,00' PivotGridCell equals 'kr 500,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr50000PivotGridCellText, uIKr50000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 600,00' PivotGridCell equals 'kr 600,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr60000PivotGridCellText, uIKr60000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 900,00' PivotGridCell equals 'kr 900,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr90000PivotGridCellText, uIKr90000PivotGridCell.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem2PivotGridCellText, uIItem2PivotGridCell.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem2PivotGridCell1Text, uIItem2PivotGridCell1.Text);

            // Verify that the 'Text' property of '4' PivotGridCell equals '4'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem4PivotGridCellText, uIItem4PivotGridCell.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem1PivotGridCell6Text, uIItem1PivotGridCell6.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem1PivotGridCell7Text, uIItem1PivotGridCell7.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem1PivotGridCell8Text, uIItem1PivotGridCell8.Text);

            // Verify that the 'Text' property of '3' PivotGridCell equals '6'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem3PivotGridCellText, uIItem3PivotGridCell.Text);

            // Verify that the 'Text' property of '50,5' PivotGridCell equals '50,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem505PivotGridCellText, uIItem505PivotGridCell.Text);

            // Verify that the 'Text' property of '101' PivotGridCell equals '101'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem101PivotGridCellText, uIItem101PivotGridCell.Text);

            // Verify that the 'Text' property of '75,75' PivotGridCell equals '75,75'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem7575PivotGridCellText, uIItem7575PivotGridCell.Text);

            // Verify that the 'Text' property of '100' PivotGridCell equals '100'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem100PivotGridCellText, uIItem100PivotGridCell.Text);

            // Verify that the 'Text' property of '500' PivotGridCell equals '500'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem500PivotGridCellText, uIItem500PivotGridCell.Text);

            // Verify that the 'Text' property of '300' PivotGridCell equals '300'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem300PivotGridCellText, uIItem300PivotGridCell.Text);

            // Verify that the 'Text' property of '150,5' PivotGridCell equals '150,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIItem1505PivotGridCellText, uIItem1505PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 101,00' PivotGridCell equals 'kr 101,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr10100PivotGridCellText, uIKr10100PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 202,00' PivotGridCell equals 'kr 202,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr20200PivotGridCellText, uIKr20200PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 303,00' PivotGridCell equals 'kr 303,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr30300PivotGridCellText, uIKr30300PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 100,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr600PivotGridCell2Text, uIKr600PivotGridCell2.Text);

            // Verify that the 'Text' property of 'kr 700,00' PivotGridCell equals 'kr 500,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr70000PivotGridCellText, uIKr70000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 600,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr800PivotGridCell1Text, uIKr800PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 714,00' PivotGridCell equals 'kr 903,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S18ExpectedValues.UIKr71400PivotGridCellText, uIKr71400PivotGridCell.Text);
        }
        
        /// <summary>
        /// CheckShiftClassesData_C6_S22 - Use 'CheckShiftClassesData_C6_S22ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftClassesData_C6_S22()
        {
            #region Variable Declarations
            DXPivotGridFieldValue uIItem04012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem04012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem25012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem25012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem25012016PivotGridFieldValue1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem25012016PivotGridFieldValue1;
            DXPivotGridFieldValue uIItem17012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem17012016PivotGridFieldValue;
            DXPivotGridFieldValue uISum31012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UISum31012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem31012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem31012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem31012016PivotGridFieldValue2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem31012016PivotGridFieldValue2;
            DXPivotGridFieldValue uISum31012016PivotGridFieldValue2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UISum31012016PivotGridFieldValue2;
            DXPivotGridFieldValue uIItem01012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem01012016PivotGridFieldValue;
            DXPivotGridCell uIItem2PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell;
            DXPivotGridCell uIItem505PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem505PivotGridCell;
            DXPivotGridCell uIKr10100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr10100PivotGridCell;
            DXPivotGridCell uIKr20200PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr20200PivotGridCell;
            DXPivotGridCell uIKr30300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr30300PivotGridCell;
            DXPivotGridCell uIKr600PivotGridCell2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell2;
            DXPivotGridCell uIKr70000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr70000PivotGridCell;
            DXPivotGridCell uIKr800PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr800PivotGridCell1;
            DXPivotGridCell uIKr71400PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr71400PivotGridCell;
            DXPivotGridCell uIKr190300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr190300PivotGridCell;
            DXPivotGridCell uIItem27186PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem27186PivotGridCell;
            DXPivotGridCell uIItem1505PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1505PivotGridCell;
            DXPivotGridCell uIItem300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem300PivotGridCell;
            DXPivotGridCell uIItem500PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem500PivotGridCell;
            DXPivotGridCell uIItem100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem100PivotGridCell;
            DXPivotGridCell uIItem7575PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem7575PivotGridCell;
            DXPivotGridCell uIItem4PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem4PivotGridCell;
            DXPivotGridCell uIItem1PivotGridCell6 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell6;
            DXPivotGridCell uIItem1PivotGridCell7 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell7;
            DXPivotGridCell uIItem1PivotGridCell8 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell8;
            DXPivotGridCell uIItem3PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem3PivotGridCell;
            DXPivotGridCell uIItem7PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem7PivotGridCell;
            DXPivotGridCell uIKr190000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr190000PivotGridCell;
            DXPivotGridCell uIItem380PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem380PivotGridCell;
            DXPivotGridCell uIItem5PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem5PivotGridCell1;
            DXPivotGridCell uIKr300PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr300PivotGridCell1;
            DXPivotGridCell uIItem15PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem15PivotGridCell;
            DXPivotGridCell uIItem2PivotGridCell4 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell4;
            DXPivotGridCell uIItem2PivotGridCell5 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell5;
            DXPivotGridCell uIItem15PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem15PivotGridCell1;
            DXPivotGridCell uIKr300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr300PivotGridCell;
            DXPivotGridCell uIItem2PivotGridCell2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell2;
            DXPivotGridCell uIItem150PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem150PivotGridCell;
            DXPivotGridCell uIKr30000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr30000PivotGridCell;
            #endregion

            // Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem04012016PivotGridFieldValueText, uIItem04012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '25.01.2016' PivotGridFieldValue equals '22.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem25012016PivotGridFieldValueText, uIItem25012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '25.01.2016' PivotGridFieldValue equals '29.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem25012016PivotGridFieldValue1Text, uIItem25012016PivotGridFieldValue1.Text);

            // Verify that the 'Text' property of '17.01.2016' PivotGridFieldValue equals '21.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem17012016PivotGridFieldValueText, uIItem17012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 21.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UISum31012016PivotGridFieldValueText, uISum31012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals '28.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem31012016PivotGridFieldValueText, uIItem31012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals '04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem31012016PivotGridFieldValue2Text, uIItem31012016PivotGridFieldValue2.Text);

            // Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UISum31012016PivotGridFieldValue2Text, uISum31012016PivotGridFieldValue2.Text);

            // Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem01012016PivotGridFieldValueText, uIItem01012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem2PivotGridCellText, uIItem2PivotGridCell.Text);

            // Verify that the 'Text' property of '50,5' PivotGridCell equals '50,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem505PivotGridCellText, uIItem505PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 101,00' PivotGridCell equals 'kr 101,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr10100PivotGridCellText, uIKr10100PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 202,00' PivotGridCell equals 'kr 202,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr20200PivotGridCellText, uIKr20200PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 303,00' PivotGridCell equals 'kr 303,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr30300PivotGridCellText, uIKr30300PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 1 000,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr600PivotGridCell2Text, uIKr600PivotGridCell2.Text);

            // Verify that the 'Text' property of 'kr 700,00' PivotGridCell equals 'kr 100,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr70000PivotGridCellText, uIKr70000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 500,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr800PivotGridCell1Text, uIKr800PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 714,00' PivotGridCell equals 'kr 600,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr71400PivotGridCellText, uIKr71400PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 1 903,00' PivotGridCell equals 'kr 1 903,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr190300PivotGridCellText, uIKr190300PivotGridCell.Text);

            // Verify that the 'Text' property of '271,86' PivotGridCell equals '271,86'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem27186PivotGridCellText, uIItem27186PivotGridCell.Text);

            // Verify that the 'Text' property of '150,5' PivotGridCell equals '300'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem1505PivotGridCellText, uIItem1505PivotGridCell.Text);

            // Verify that the 'Text' property of '300' PivotGridCell equals '500'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem300PivotGridCellText, uIItem300PivotGridCell.Text);

            // Verify that the 'Text' property of '500' PivotGridCell equals '100'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem500PivotGridCellText, uIItem500PivotGridCell.Text);

            // Verify that the 'Text' property of '100' PivotGridCell equals '1000'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem100PivotGridCellText, uIItem100PivotGridCell.Text);

            // Verify that the 'Text' property of '75,75' PivotGridCell equals '75,75'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem7575PivotGridCellText, uIItem7575PivotGridCell.Text);

            // Verify that the 'Text' property of '4' PivotGridCell equals '4'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem4PivotGridCellText, uIItem4PivotGridCell.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem1PivotGridCell6Text, uIItem1PivotGridCell6.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem1PivotGridCell7Text, uIItem1PivotGridCell7.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem1PivotGridCell8Text, uIItem1PivotGridCell8.Text);

            // Verify that the 'Text' property of '3' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem3PivotGridCellText, uIItem3PivotGridCell.Text);

            // Verify that the 'Text' property of '7' PivotGridCell equals '7'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem7PivotGridCellText, uIItem7PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 1 900,00' PivotGridCell equals 'kr 1 900,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr190000PivotGridCellText, uIKr190000PivotGridCell.Text);

            // Verify that the 'Text' property of '380' PivotGridCell equals '380'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem380PivotGridCellText, uIItem380PivotGridCell.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem5PivotGridCell1Text, uIItem5PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 3,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr300PivotGridCell1Text, uIKr300PivotGridCell1.Text);

            // Verify that the 'Text' property of '1,5' PivotGridCell equals '1,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem15PivotGridCellText, uIItem15PivotGridCell.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem2PivotGridCell4Text, uIItem2PivotGridCell4.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem2PivotGridCell5Text, uIItem2PivotGridCell5.Text);

            // Verify that the 'Text' property of '1,5' PivotGridCell equals '1,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem15PivotGridCell1Text, uIItem15PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 3,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr300PivotGridCellText, uIKr300PivotGridCell.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem2PivotGridCell2Text, uIItem2PivotGridCell2.Text);

            // Verify that the 'Text' property of '150' PivotGridCell equals '150'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIItem150PivotGridCellText, uIItem150PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 300,00' PivotGridCell equals 'kr 300,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S22ExpectedValues.UIKr30000PivotGridCellText, uIKr30000PivotGridCell.Text);
        }
        
        /// <summary>
        /// CheckShiftClassesData_C6_S27 - Use 'CheckShiftClassesData_C6_S27ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftClassesData_C6_S27()
        {
            #region Variable Declarations
            DXPivotGridFieldValue uIItem04012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem04012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem17012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem17012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem04012016PivotGridFieldValue2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem04012016PivotGridFieldValue2;
            DXPivotGridFieldValue uISum31012016PivotGridFieldValue1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UISum31012016PivotGridFieldValue1;
            DXPivotGridFieldValue uIItem31012016PivotGridFieldValue2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem31012016PivotGridFieldValue2;
            DXPivotGridFieldValue uIItem01012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem01012016PivotGridFieldValue;
            DXPivotGridCell uIKr100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr100PivotGridCell;
            DXPivotGridCell uIKr600PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell;
            DXPivotGridCell uIKr300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr300PivotGridCell;
            DXPivotGridCell uIKr500PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr500PivotGridCell;
            DXPivotGridCell uIKr600PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell1;
            DXPivotGridCell uIKr800PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr800PivotGridCell;
            DXPivotGridCell uIItem1PivotGridCell4 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell4;
            DXPivotGridCell uIItem6PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem6PivotGridCell1;
            DXPivotGridCell uIKr10000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr10000PivotGridCell;
            DXPivotGridCell uIKr20000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr20000PivotGridCell;
            DXPivotGridCell uIKr30000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr30000PivotGridCell;
            DXPivotGridCell uIKr10000PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr10000PivotGridCell1;
            DXPivotGridCell uIKr50000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr50000PivotGridCell;
            DXPivotGridCell uIKr60000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr60000PivotGridCell;
            DXPivotGridCell uIItem1PivotGridCell12 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell12;
            DXPivotGridCell uIItem13125PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem13125PivotGridCell;
            DXPivotGridCell uIItem505PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem505PivotGridCell;
            DXPivotGridCell uIItem101PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem101PivotGridCell;
            DXPivotGridCell uIItem7575PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem7575PivotGridCell;
            DXPivotGridCell uIItem100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem100PivotGridCell;
            DXPivotGridCell uIItem500PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem500PivotGridCell;
            DXPivotGridCell uIItem300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem300PivotGridCell;
            DXPivotGridCell uIKr10100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr10100PivotGridCell;
            DXPivotGridCell uIKr20200PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr20200PivotGridCell;
            DXPivotGridCell uIKr30300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr30300PivotGridCell;
            DXPivotGridCell uIKr600PivotGridCell2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell2;
            DXPivotGridCell uIKr70000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr70000PivotGridCell;
            DXPivotGridCell uIKr800PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr800PivotGridCell1;
            #endregion

            // Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem04012016PivotGridFieldValueText, uIItem04012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '17.01.2016' PivotGridFieldValue equals '04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem17012016PivotGridFieldValueText, uIItem17012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem04012016PivotGridFieldValue2Text, uIItem04012016PivotGridFieldValue2.Text);

            // Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals '04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UISum31012016PivotGridFieldValue1Text, uISum31012016PivotGridFieldValue1.Text);

            // Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem31012016PivotGridFieldValue2Text, uIItem31012016PivotGridFieldValue2.Text);

            // Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem01012016PivotGridFieldValueText, uIItem01012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of 'kr 1,00' PivotGridCell equals 'kr 6,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr100PivotGridCellText, uIKr100PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 15,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr600PivotGridCellText, uIKr600PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 7,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr300PivotGridCellText, uIKr300PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 5,00' PivotGridCell equals 'kr 8,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr500PivotGridCellText, uIKr500PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 36,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr600PivotGridCell1Text, uIKr600PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 60,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr800PivotGridCellText, uIKr800PivotGridCell.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '11'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem1PivotGridCell4Text, uIItem1PivotGridCell4.Text);

            // Verify that the 'Text' property of '6' PivotGridCell equals '3,27'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem6PivotGridCell1Text, uIItem6PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 100,00' PivotGridCell equals 'kr 600,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr10000PivotGridCellText, uIKr10000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 200,00' PivotGridCell equals 'kr 1 500,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr20000PivotGridCellText, uIKr20000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 300,00' PivotGridCell equals 'kr 700,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr30000PivotGridCellText, uIKr30000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 100,00' PivotGridCell equals 'kr 800,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr10000PivotGridCell1Text, uIKr10000PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 500,00' PivotGridCell equals 'kr 3 600,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr50000PivotGridCellText, uIKr50000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 600,00' PivotGridCell equals 'kr 6 000,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr60000PivotGridCellText, uIKr60000PivotGridCell.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '11'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem1PivotGridCell12Text, uIItem1PivotGridCell12.Text);

            // Verify that the 'Text' property of '13125' PivotGridCell equals '327,27'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem13125PivotGridCellText, uIItem13125PivotGridCell.Text);

            // Verify that the 'Text' property of '50,5' PivotGridCell equals '50,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem505PivotGridCellText, uIItem505PivotGridCell.Text);

            // Verify that the 'Text' property of '101' PivotGridCell equals '252,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem101PivotGridCellText, uIItem101PivotGridCell.Text);

            // Verify that the 'Text' property of '75,75' PivotGridCell equals '353,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem7575PivotGridCellText, uIItem7575PivotGridCell.Text);

            // Verify that the 'Text' property of '100' PivotGridCell equals '404'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem100PivotGridCellText, uIItem100PivotGridCell.Text);

            // Verify that the 'Text' property of '500' PivotGridCell equals '165,27'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem500PivotGridCellText, uIItem500PivotGridCell.Text);

            // Verify that the 'Text' property of '300' PivotGridCell equals '151,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIItem300PivotGridCellText, uIItem300PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 101,00' PivotGridCell equals 'kr 606,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr10100PivotGridCellText, uIKr10100PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 202,00' PivotGridCell equals 'kr 1 515,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr20200PivotGridCellText, uIKr20200PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 303,00' PivotGridCell equals 'kr 707,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr30300PivotGridCellText, uIKr30300PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 808,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr600PivotGridCell2Text, uIKr600PivotGridCell2.Text);

            // Verify that the 'Text' property of 'kr 700,00' PivotGridCell equals 'kr 3 636,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr70000PivotGridCellText, uIKr70000PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 6 060,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S27ExpectedValues.UIKr800PivotGridCell1Text, uIKr800PivotGridCell1.Text);
        }
        
        /// <summary>
        /// CheckShiftClassesData_C6_S29 - Use 'CheckShiftClassesData_C6_S29ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftClassesData_C6_S29()
        {
            #region Variable Declarations
            DXPivotGridFieldValue uIItem04012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem04012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem17012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem17012016PivotGridFieldValue;
            DXPivotGridFieldValue uIItem31012016PivotGridFieldValue2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem31012016PivotGridFieldValue2;
            DXPivotGridFieldValue uIItem04012016PivotGridFieldValue2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem04012016PivotGridFieldValue2;
            DXPivotGridFieldValue uISum31012016PivotGridFieldValue1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UISum31012016PivotGridFieldValue1;
            DXPivotGridFieldValue uIItem01012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem01012016PivotGridFieldValue;
            DXPivotGridCell uIItem1PivotGridCell4 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell4;
            DXPivotGridCell uIItem6PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem6PivotGridCell1;
            DXPivotGridCell uIKr600PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell1;
            DXPivotGridCell uIItem1PivotGridCell9 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell9;
            DXPivotGridCell uIItem1PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell;
            DXPivotGridCell uIItem1PivotGridCell12 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell12;
            DXPivotGridCell uIItem13125PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem13125PivotGridCell;
            DXPivotGridCell uIKr50000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr50000PivotGridCell;
            DXPivotGridCell uIItem2PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell;
            DXPivotGridCell uIItem1PivotGridCell7 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell7;
            DXPivotGridCell uIItem500PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem500PivotGridCell;
            DXPivotGridCell uIKr70000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr70000PivotGridCell;
            DXPivotGridCell uIItem505PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem505PivotGridCell;
            DXPivotGridCell uIItem101PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem101PivotGridCell;
            DXPivotGridCell uIItem7575PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem7575PivotGridCell;
            DXPivotGridCell uIItem100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem100PivotGridCell;
            DXPivotGridCell uIItem300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem300PivotGridCell;
            DXPivotGridCell uIItem2PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem2PivotGridCell1;
            DXPivotGridCell uIItem4PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem4PivotGridCell;
            DXPivotGridCell uIItem1PivotGridCell6 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell6;
            DXPivotGridCell uIItem1PivotGridCell8 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell8;
            DXPivotGridCell uIKr10100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr10100PivotGridCell;
            DXPivotGridCell uIKr20200PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr20200PivotGridCell;
            DXPivotGridCell uIKr30300PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr30300PivotGridCell;
            DXPivotGridCell uIKr600PivotGridCell2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell2;
            DXPivotGridCell uIKr800PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr800PivotGridCell1;
            #endregion

            // Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem04012016PivotGridFieldValueText, uIItem04012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '17.01.2016' PivotGridFieldValue equals '28.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem17012016PivotGridFieldValueText, uIItem17012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals 'Sum 28.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem31012016PivotGridFieldValue2Text, uIItem31012016PivotGridFieldValue2.Text);

            // Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem04012016PivotGridFieldValue2Text, uIItem04012016PivotGridFieldValue2.Text);

            // Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals '04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UISum31012016PivotGridFieldValue1Text, uISum31012016PivotGridFieldValue1.Text);

            // Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem01012016PivotGridFieldValueText, uIItem01012016PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '8'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem1PivotGridCell4Text, uIItem1PivotGridCell4.Text);

            // Verify that the 'Text' property of '6' PivotGridCell equals '4,13'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem6PivotGridCell1Text, uIItem6PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 33,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIKr600PivotGridCell1Text, uIKr600PivotGridCell1.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '3'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem1PivotGridCell9Text, uIItem1PivotGridCell9.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '3'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem1PivotGridCellText, uIItem1PivotGridCell.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '8'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem1PivotGridCell12Text, uIItem1PivotGridCell12.Text);

            // Verify that the 'Text' property of '13125' PivotGridCell equals '412,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem13125PivotGridCellText, uIItem13125PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 500,00' PivotGridCell equals 'kr 3 300,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIKr50000PivotGridCellText, uIKr50000PivotGridCell.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '6'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem2PivotGridCellText, uIItem2PivotGridCell.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '16'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem1PivotGridCell7Text, uIItem1PivotGridCell7.Text);

            // Verify that the 'Text' property of '500' PivotGridCell equals '208,31'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem500PivotGridCellText, uIItem500PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 700,00' PivotGridCell equals 'kr 3 333,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIKr70000PivotGridCellText, uIKr70000PivotGridCell.Text);

            // Verify that the 'Text' property of '50,5' PivotGridCell equals '50,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem505PivotGridCellText, uIItem505PivotGridCell.Text);

            // Verify that the 'Text' property of '101' PivotGridCell equals '252,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem101PivotGridCellText, uIItem101PivotGridCell.Text);

            // Verify that the 'Text' property of '75,75' PivotGridCell equals '353,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem7575PivotGridCellText, uIItem7575PivotGridCell.Text);

            // Verify that the 'Text' property of '100' PivotGridCell equals '404'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem100PivotGridCellText, uIItem100PivotGridCell.Text);

            // Verify that the 'Text' property of '300' PivotGridCell equals '151,5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem300PivotGridCellText, uIItem300PivotGridCell.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '6'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem2PivotGridCell1Text, uIItem2PivotGridCell1.Text);

            // Verify that the 'Text' property of '4' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem4PivotGridCellText, uIItem4PivotGridCell.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem1PivotGridCell6Text, uIItem1PivotGridCell6.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '40'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIItem1PivotGridCell8Text, uIItem1PivotGridCell8.Text);

            // Verify that the 'Text' property of 'kr 101,00' PivotGridCell equals 'kr 303,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIKr10100PivotGridCellText, uIKr10100PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 202,00' PivotGridCell equals 'kr 1 515,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIKr20200PivotGridCellText, uIKr20200PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 303,00' PivotGridCell equals 'kr 707,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIKr30300PivotGridCellText, uIKr30300PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 808,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIKr600PivotGridCell2Text, uIKr600PivotGridCell2.Text);

            // Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 6 060,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S29ExpectedValues.UIKr800PivotGridCell1Text, uIKr800PivotGridCell1.Text);
        }
        
        /// <summary>
        /// CheckShiftClassesData_C6_S34 - Use 'CheckShiftClassesData_C6_S34ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftClassesData_C6_S34()
        {
            #region Variable Declarations
            DXPivotGridFieldValue uIItem08012024PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIItem08012024PivotGridFieldValue;
            DXPivotGridFieldValue uIItem28012024PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIItem28012024PivotGridFieldValue;
            DXPivotGridFieldValue uISum28012024PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UISum28012024PivotGridFieldValue;
            DXPivotGridFieldValue uIItem29012024PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIItem29012024PivotGridFieldValue;
            DXPivotGridFieldValue uIItem25022024PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIItem25022024PivotGridFieldValue;
            DXPivotGridFieldValue uINyqvistMikaelPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UINyqvistMikaelPivotGridFieldValue;
            DXPivotGridFieldValue uIKulleNilsPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIKulleNilsPivotGridFieldValue;
            DXPivotGridCell uIKr10500000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIKr10500000PivotGridCell;
            DXPivotGridCell uIKr24000000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIKr24000000PivotGridCell;
            DXPivotGridFieldValue uIItem15012024PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIItem15012024PivotGridFieldValue;
            DXPivotGridCell uIKr330000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIKr330000PivotGridCell;
            DXPivotGridCell uIKr600000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIKr600000PivotGridCell;
            DXPivotGridCell uIKr10830000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIKr10830000PivotGridCell;
            DXPivotGridCell uIKr24600000PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid1.UIKr24600000PivotGridCell;
            #endregion

            // Verify that the 'Text' property of '08.01.2024' PivotGridFieldValue equals '08.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIItem08012024PivotGridFieldValueText, uIItem08012024PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '28.01.2024' PivotGridFieldValue equals '28.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIItem28012024PivotGridFieldValueText, uIItem28012024PivotGridFieldValue.Text);

            // Verify that the 'ClassName' property of 'Sum 28.01.2024' PivotGridFieldValue equals 'PivotGridFieldValue'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UISum28012024PivotGridFieldValueClassName, uISum28012024PivotGridFieldValue.ClassName);

            // Verify that the 'Text' property of '29.01.2024' PivotGridFieldValue equals '29.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIItem29012024PivotGridFieldValueText, uIItem29012024PivotGridFieldValue.Text);

            // Verify that the 'Text' property of '25.02.2024' PivotGridFieldValue equals '25.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIItem25022024PivotGridFieldValueText, uIItem25022024PivotGridFieldValue.Text);

            // Verify that the 'ValueAsString' property of 'Nyqvist, Mikael' PivotGridFieldValue equals 'Nyqvist, Mikael'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UINyqvistMikaelPivotGridFieldValueValueAsString, uINyqvistMikaelPivotGridFieldValue.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Kulle, Nils' PivotGridFieldValue equals 'Kulle, Nils'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIKulleNilsPivotGridFieldValueValueAsString, uIKulleNilsPivotGridFieldValue.ValueAsString);

            // Verify that the 'ValueAsString' property of 'kr 105 000,00' PivotGridCell equals '105000'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIKr10500000PivotGridCellValueAsString, uIKr10500000PivotGridCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'kr 240 000,00' PivotGridCell equals '240000'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIKr24000000PivotGridCellValueAsString, uIKr24000000PivotGridCell.ValueAsString);

            // Verify that the 'Text' property of '15.01.2024' PivotGridFieldValue equals '15.01.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIItem15012024PivotGridFieldValueText, uIItem15012024PivotGridFieldValue.Text);

            // Verify that the 'ValueAsString' property of 'kr 3 300,00' PivotGridCell equals '3300'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIKr330000PivotGridCellValueAsString, uIKr330000PivotGridCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'kr 6 000,00' PivotGridCell equals '6000'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIKr600000PivotGridCellValueAsString, uIKr600000PivotGridCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'kr 108 300,00' PivotGridCell equals '108300'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIKr10830000PivotGridCellValueAsString, uIKr10830000PivotGridCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'kr 246 000,00' PivotGridCell equals '246000'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S34ExpectedValues.UIKr24600000PivotGridCellValueAsString, uIKr24600000PivotGridCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckShiftClassesData_C6_S6 - Use 'CheckShiftClassesData_C6_S6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftClassesData_C6_S6()
        {
            #region Variable Declarations
            DXPivotGridFieldValue uIOscarssonPerPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIOscarssonPerPivotGridFieldValue;
            DXPivotGridFieldValue uIAPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIAPivotGridFieldValue;
            DXPivotGridCell uIItem1PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell;
            DXPivotGridCell uIItem1PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell1;
            DXPivotGridCell uIKr100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr100PivotGridCell;
            DXPivotGridFieldValue uIVollterSvenPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIVollterSvenPivotGridFieldValue;
            DXPivotGridFieldValue uIFPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIFPivotGridFieldValue;
            DXPivotGridCell uIItem1PivotGridCell2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell2;
            DXPivotGridCell uIItem6PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem6PivotGridCell;
            DXPivotGridCell uIKr600PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell;
            DXPivotGridFieldValue uIItem01012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem01012016PivotGridFieldValue;
            #endregion

            // Verify that the 'ValueAsString' property of 'Oscarsson, Per' PivotGridFieldValue equals 'Oscarsson, Per'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIOscarssonPerPivotGridFieldValueValueAsString, uIOscarssonPerPivotGridFieldValue.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A' PivotGridFieldValue equals 'A'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIAPivotGridFieldValueValueAsString, uIAPivotGridFieldValue.ValueAsString);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIItem1PivotGridCellText, uIItem1PivotGridCell.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIItem1PivotGridCell1Text, uIItem1PivotGridCell1.Text);

            // Verify that the 'ValueAsString' property of 'kr 1,00' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIKr100PivotGridCellValueAsString, uIKr100PivotGridCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Vollter, Sven' PivotGridFieldValue equals 'Vollter, Sven'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIVollterSvenPivotGridFieldValueValueAsString, uIVollterSvenPivotGridFieldValue.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F' PivotGridFieldValue equals 'F'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIFPivotGridFieldValueValueAsString, uIFPivotGridFieldValue.ValueAsString);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIItem1PivotGridCell2Text, uIItem1PivotGridCell2.Text);

            // Verify that the 'Text' property of '6' PivotGridCell equals '6'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIItem6PivotGridCellText, uIItem6PivotGridCell.Text);

            // Verify that the 'ValueAsString' property of 'kr 6,00' PivotGridCell equals '6'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIKr600PivotGridCellValueAsString, uIKr600PivotGridCell.ValueAsString);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 6,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIKr600PivotGridCellText, uIKr600PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 1,00' PivotGridCell equals 'kr 1,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIKr100PivotGridCellText, uIKr100PivotGridCell.Text);

            // Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S6ExpectedValues.UIItem01012016PivotGridFieldValueText, uIItem01012016PivotGridFieldValue.Text);
        }
        
        /// <summary>
        /// CheckShiftClassesData_C6_S8 - Use 'CheckShiftClassesData_C6_S8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftClassesData_C6_S8()
        {
            #region Variable Declarations
            DXPivotGridFieldValue uIAPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIAPivotGridFieldValue;
            DXPivotGridCell uIItem1PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell;
            DXPivotGridCell uIItem1PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell1;
            DXPivotGridCell uIKr100PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr100PivotGridCell;
            DXPivotGridFieldValue uIFPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIFPivotGridFieldValue;
            DXPivotGridCell uIItem1PivotGridCell2 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell2;
            DXPivotGridCell uIItem6PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem6PivotGridCell;
            DXPivotGridCell uIKr600PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell;
            DXPivotGridFieldValue uISum31012016PivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UISum31012016PivotGridFieldValue;
            DXPivotGridFieldValue uIEPivotGridFieldValue = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIEPivotGridFieldValue;
            DXPivotGridCell uIItem1PivotGridCell3 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell3;
            DXPivotGridCell uIItem5PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem5PivotGridCell;
            DXPivotGridCell uIKr500PivotGridCell = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr500PivotGridCell;
            DXPivotGridFieldValue uIFPivotGridFieldValue1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIFPivotGridFieldValue1;
            DXPivotGridCell uIItem1PivotGridCell4 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem1PivotGridCell4;
            DXPivotGridCell uIItem6PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIItem6PivotGridCell1;
            DXPivotGridCell uIKr600PivotGridCell1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UIKr600PivotGridCell1;
            DXPivotGridFieldValue uISum31012016PivotGridFieldValue1 = this.UIShiftClassCalculatioWindow.UIPgcResultsPivotGrid.UISum31012016PivotGridFieldValue1;
            #endregion

            // Verify that the 'ValueAsString' property of 'A' PivotGridFieldValue equals 'A'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIAPivotGridFieldValueValueAsString, uIAPivotGridFieldValue.ValueAsString);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIItem1PivotGridCellText, uIItem1PivotGridCell.Text);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIItem1PivotGridCell1Text, uIItem1PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 1,00' PivotGridCell equals 'kr 1,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIKr100PivotGridCellText, uIKr100PivotGridCell.Text);

            // Verify that the 'ValueAsString' property of 'F' PivotGridFieldValue equals 'B'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIFPivotGridFieldValueValueAsString, uIFPivotGridFieldValue.ValueAsString);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIItem1PivotGridCell2Text, uIItem1PivotGridCell2.Text);

            // Verify that the 'Text' property of '6' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIItem6PivotGridCellText, uIItem6PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 2,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIKr600PivotGridCellText, uIKr600PivotGridCell.Text);

            // Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UISum31012016PivotGridFieldValueText, uISum31012016PivotGridFieldValue.Text);

            // Verify that the 'ValueAsString' property of 'E' PivotGridFieldValue equals 'E'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIEPivotGridFieldValueValueAsString, uIEPivotGridFieldValue.ValueAsString);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIItem1PivotGridCell3Text, uIItem1PivotGridCell3.Text);

            // Verify that the 'Text' property of '5' PivotGridCell equals '5'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIItem5PivotGridCellText, uIItem5PivotGridCell.Text);

            // Verify that the 'Text' property of 'kr 5,00' PivotGridCell equals 'kr 5,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIKr500PivotGridCellText, uIKr500PivotGridCell.Text);

            // Verify that the 'ValueAsString' property of 'F' PivotGridFieldValue equals 'F'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIFPivotGridFieldValue1ValueAsString, uIFPivotGridFieldValue1.ValueAsString);

            // Verify that the 'Text' property of '1' PivotGridCell equals '1'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIItem1PivotGridCell4Text, uIItem1PivotGridCell4.Text);

            // Verify that the 'Text' property of '6' PivotGridCell equals '6'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIItem6PivotGridCell1Text, uIItem6PivotGridCell1.Text);

            // Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 6,00'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UIKr600PivotGridCell1Text, uIKr600PivotGridCell1.Text);

            // Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
            Assert.AreEqual(this.CheckShiftClassesData_C6_S8ExpectedValues.UISum31012016PivotGridFieldValue1Text, uISum31012016PivotGridFieldValue1.Text);
        }
        
        /// <summary>
        /// CheckStellanCalculations_C2_S10 - Use 'CheckStellanCalculations_C2_S10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckStellanCalculations_C2_S10()
        {
            UIMapVS2017.CheckStellanCalculations_C2_S10();
        }
        
        /// <summary>
        /// CheckStellanCalculations_C2_S11 - Use 'CheckStellanCalculations_C2_S11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckStellanCalculations_C2_S11()
        {
            UIMapVS2017.CheckStellanCalculations_C2_S11();
        }
        
        /// <summary>
        /// CheckStellanCalculations_C2_S9 - Use 'CheckStellanCalculations_C2_S9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckStellanCalculations_C2_S9()
        {
            UIMapVS2017.CheckStellanCalculations_C2_S9();
        }
        
        /// <summary>
        /// CheckStellanEdwallIsExported_C2_S16 - Use 'CheckStellanEdwallIsExported_C2_S16ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckStellanEdwallIsExported_C2_S16()
        {
            #region Variable Declarations
            DXCell uIIkkevalgtCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIIkkevalgtCell;
            DXCell uIAdamsMaudCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIAdamsMaudCell;
            DXCell uIIkkevalgtCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIIkkevalgtCell1;
            DXCell uIBergmanIngridCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell1;
            #endregion

            // Verify that the 'ValueAsString' property of 'Ikke valgt' cell equals 'False'
            Assert.AreEqual(this.CheckStellanEdwallIsExported_C2_S16ExpectedValues.UIIkkevalgtCellValueAsString, uIIkkevalgtCell.ValueAsString);

            // Verify that the 'ErrorText' property of 'Adams, Maud' cell equals 'Tidligere eksportert'
            Assert.AreEqual(this.CheckStellanEdwallIsExported_C2_S16ExpectedValues.UIAdamsMaudCellErrorText, uIAdamsMaudCell.ErrorText);

            // Verify that the 'ValueAsString' property of 'Ikke valgt' cell equals 'False'
            Assert.AreEqual(this.CheckStellanEdwallIsExported_C2_S16ExpectedValues.UIIkkevalgtCell1ValueAsString, uIIkkevalgtCell1.ValueAsString);

            // Verify that the 'ErrorText' property of 'Bergman, Ingrid' cell equals 'Tidligere eksportert'
            Assert.AreEqual(this.CheckStellanEdwallIsExported_C2_S16ExpectedValues.UIBergmanIngridCell1ErrorText, uIBergmanIngridCell1.ErrorText);

            // Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Skarsgård, Stellan'
            Assert.AreEqual(this.CheckStellanEdwallIsExported_C2_S16ExpectedValues.UIAdamsMaudCellValueAsString, uIAdamsMaudCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Edwall, Allan'
            Assert.AreEqual(this.CheckStellanEdwallIsExported_C2_S16ExpectedValues.UIBergmanIngridCell1ValueAsString, uIBergmanIngridCell1.ValueAsString);
        }
        
        /// <summary>
        /// CheckStormareCalculations_C2_S14 - Use 'CheckStormareCalculations_C2_S14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckStormareCalculations_C2_S14()
        {
            UIMapVS2017.CheckStormareCalculations_C2_S14();
        }
        
        /// <summary>
        /// CheckStormareCalculations_C2_S23 - Use 'CheckStormareCalculations_C2_S23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckStormareCalculations_C2_S23()
        {
           UIMapVS2017.CheckStormareCalculations_C2_S23();
        }
        
        /// <summary>
        /// CheckStormareHasTwoPreviousTransferes_C2_S26 - Use 'CheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckStormareHasTwoPreviousTransferes_C2_S26()
        {
            #region Variable Declarations
            DXCell uIItem4162Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem4162Cell;
            DXCell uIItem4162Cell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem4162Cell1;
            DXCell uIItem1115Cell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem1115Cell1;
            DXCell uIItem223Cell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem223Cell1;
            #endregion

            // Verify that the 'Text' property of '41,62' cell equals '0'
            Assert.AreEqual(this.CheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues.UIItem4162CellText, uIItem4162Cell.Text);

            // Verify that the 'Text' property of '41,62' cell equals '0'
            Assert.AreEqual(this.CheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues.UIItem4162Cell1Text, uIItem4162Cell1.Text);

            // Verify that the 'Text' property of '11,15' cell equals '11,15'
            Assert.AreEqual(this.CheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues.UIItem1115Cell1Text, uIItem1115Cell1.Text);

            // Verify that the 'Text' property of '22,3' cell equals '22,3'
            Assert.AreEqual(this.CheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues.UIItem223Cell1Text, uIItem223Cell1.Text);
        }

        public List<string> CheckStormareNoCalculations_C2_S21()
        {
            var errorList = new List<string>();
            var pivot = UIMapVS2017.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid;

            try
            {
                UIMapVS2017.CheckStormareNoCalculations_C2_S21();
            }
            catch (Exception e)
            {
                errorList.Add("Chapter_2 step_21: " + e.Message);
            }

            var rows = pivot.RowCount;

            if (rows != 3)
                errorList.Add("Chapter_2 step_21: Unexpected rows");

            if (errorList.Count == 0)
                TestContext.WriteLine("Chapter_2 step_21: OK");

            return errorList;
        }

        /// <summary>
        /// CheckTransAndStopIsDisabled_C1_S11 - Use 'CheckTransAndStopIsDisabled_C1_S11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransAndStopIsDisabled_C1_S11()
        {
            #region Variable Declarations
            DXButton uIOverførButton = this.UIArbeidsplanKopiavFTTWindow1.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpFixedPaymentClient.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIOverførButton;
            DXButton uIStoppButton = this.UIArbeidsplanKopiavFTTWindow1.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpFixedPaymentClient.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIStoppButton;
            #endregion

            // Verify that the 'Enabled' property of 'Overfør...' button equals 'False'
            Assert.AreEqual(this.CheckTransAndStopIsDisabled_C1_S11ExpectedValues.UIOverførButtonEnabled, uIOverførButton.Enabled);

            // Verify that the 'Enabled' property of 'Stopp...' button equals 'False'
            Assert.AreEqual(this.CheckTransAndStopIsDisabled_C1_S11ExpectedValues.UIStoppButtonEnabled, uIStoppButton.Enabled);
        }
        
        /// <summary>
        /// CheckTransferedFTTValues - Use 'CheckTransferedFTTValuesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferedFTTValues()
        {
            #region Variable Declarations
            DXCell uIItem4162Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem4162Cell;
            DXCell uIItem510Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem510Cell1;
            DXCell uIItem2676Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem2676Cell;
            DXCell uIItem400Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem400Cell;
            DXCell uISkarsgårdStellanCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UISkarsgårdStellanCell;
            DXCell uIItem297Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem297Cell1;
            DXCell uIItem400Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem400Cell1;
            DXCell uIItem892Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem892Cell;
            DXCell uIItem601Cell2 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem601Cell2;
            DXCell uIVollterSvenCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIVollterSvenCell;
            DXCell uIItem892Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem892Cell1;
            DXCell uIItem3568Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem3568Cell1;
            DXCell uIEklandBrittCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIEklandBrittCell;
            #endregion

            // Verify that the 'Text' property of '41,62' cell equals '38,65'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIItem4162CellText, uIItem4162Cell.Text);

            // Verify that the 'Text' property of '510' cell equals '410'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIItem510Cell1Text, uIItem510Cell1.Text);

            // Verify that the 'Text' property of '26,76' cell equals '26,76'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIItem2676CellText, uIItem2676Cell.Text);

            // Verify that the 'Text' property of '400' cell equals '400'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIItem400CellText, uIItem400Cell.Text);

            // Verify that the 'Text' property of 'Skarsgård, Stellan' cell equals 'Adams, Maud'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UISkarsgårdStellanCellText, uISkarsgårdStellanCell.Text);

            // Verify that the 'Text' property of '2,97' cell equals '2,97'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIItem297Cell1Text, uIItem297Cell1.Text);

            // Verify that the 'Text' property of '400' cell equals '400'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIItem400Cell1Text, uIItem400Cell1.Text);

            // Verify that the 'Text' property of '8,92' cell equals '11,89'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIItem892CellText, uIItem892Cell.Text);

            // Verify that the 'Text' property of '601' cell equals '410'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIItem601Cell2Text, uIItem601Cell2.Text);

            // Verify that the 'Text' property of 'Vollter, Sven' cell equals 'Ekland, Britt'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIVollterSvenCellText, uIVollterSvenCell.Text);

            // Verify that the 'Text' property of '8,92' cell equals '8,92'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIItem892Cell1Text, uIItem892Cell1.Text);

            // Verify that the 'Text' property of '35,68' cell equals '35,68'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIItem3568Cell1Text, uIItem3568Cell1.Text);

            // Verify that the 'Text' property of 'Ekland, Britt' cell equals 'Ekland, Britt'
            Assert.AreEqual(this.CheckTransferedFTTValuesExpectedValues.UIEklandBrittCellText, uIEklandBrittCell.Text);
        }
        
        /// <summary>
        /// CheckTransferedFTTValues_C1_S26 - Use 'CheckTransferedFTTValues_C1_S26ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferedFTTValues_C1_S26()
        {
            #region Variable Declarations
            DXCell uIItem4162Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem4162Cell;
            DXCell uIItem510Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem510Cell1;
            DXCell uIItem04012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem04012016Cell;
            DXCell uIItem14022016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem14022016Cell;
            DXCell uIEndreLenaCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIEndreLenaCell;
            DXCell uIItem5150Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem5150Cell;
            DXCell uIItem1115Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem1115Cell;
            DXCell uIItem510Cell2 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem510Cell2;
            DXCell uIItem21012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem21012016Cell;
            DXCell uIItem10012016Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem10012016Cell1;
            DXCell uIStormarePeterCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIStormarePeterCell;
            DXCell uIItem5150Cell2 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem5150Cell2;
            #endregion

            // Verify that the 'Text' property of '41,62' cell equals '8,66'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIItem4162CellText, uIItem4162Cell.Text);

            // Verify that the 'Text' property of '510' cell equals '510'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIItem510Cell1Text, uIItem510Cell1.Text);

            // Verify that the 'ValueAsString' property of '04.01.2016' cell equals '2024-08-05'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIItem04012016CellValueAsString, uIItem04012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '14.02.2016' cell equals '2024-09-15'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIItem14022016CellValueAsString, uIItem14022016Cell.ValueAsString);

            // Verify that the 'Text' property of 'Endre, Lena' cell equals 'Endre, Lena'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIEndreLenaCellText, uIEndreLenaCell.Text);

            // Verify that the 'Text' property of '5150' cell equals '5150'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIItem5150CellText, uIItem5150Cell.Text);

            // Verify that the 'Text' property of '11,15' cell equals '21,12'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIItem1115CellText, uIItem1115Cell.Text);

            // Verify that the 'Text' property of '510' cell equals '510'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIItem510Cell2Text, uIItem510Cell2.Text);

            // Verify that the 'ValueAsString' property of '21.01.2016' cell equals '2024-08-05'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIItem21012016CellValueAsString, uIItem21012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '10.01.2016' cell equals '2024-08-12'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIItem10012016Cell1ValueAsString, uIItem10012016Cell1.ValueAsString);

            // Verify that the 'Text' property of 'Stormare, Peter' cell equals 'Garbo, Greta'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIStormarePeterCellText, uIStormarePeterCell.Text);

            // Verify that the 'Text' property of '5150' cell equals '5150'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S26ExpectedValues.UIItem5150Cell2Text, uIItem5150Cell2.Text);
        }
        
        /// <summary>
        /// CheckTransferedFTTValues_C1_S6 - Use 'CheckTransferedFTTValues_C1_S6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferedFTTValues_C1_S6()
        {
            #region Variable Declarations
            DXCell uIItem4162Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem4162Cell;
            DXCell uIItem510Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem510Cell1;
            DXCell uIEndreLenaCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIEndreLenaCell;
            DXCell uIItem2676Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem2676Cell;
            DXCell uIItem400Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem400Cell;
            DXCell uIItem14032016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem14032016Cell;
            DXCell uIItem03042016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem03042016Cell;
            DXCell uIItem5150Cell3 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem5150Cell3;
            DXCell uIItem1115Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem1115Cell;
            DXCell uIItem2600Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem2600Cell;
            DXCell uIItem25012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem25012016Cell;
            DXCell uIItem31012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem31012016Cell;
            DXCell uIOscarssonPerCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIOscarssonPerCell;
            DXCell uIItem866Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem866Cell1;
            DXCell uIItem601Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem601Cell1;
            DXCell uIItem18012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem18012016Cell;
            DXCell uIItem17012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem17012016Cell;
            DXCell uIJähkelLennartCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIJähkelLennartCell;
            #endregion

            // Verify that the 'Text' property of '41,62' cell equals '22,3'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem4162CellText, uIItem4162Cell.Text);

            // Verify that the 'Text' property of '510' cell equals '410'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem510Cell1Text, uIItem510Cell1.Text);

            // Verify that the 'Text' property of 'Endre, Lena' cell equals 'Skarsgård, Stellan'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIEndreLenaCellText, uIEndreLenaCell.Text);

            // Verify that the 'Text' property of '26,76' cell equals '11,15'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem2676CellText, uIItem2676Cell.Text);

            // Verify that the 'Text' property of '400' cell equals '400'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem400CellText, uIItem400Cell.Text);

            // Verify that the 'ValueAsString' property of '14.03.2016' cell equals '2024-01-08'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem14032016CellValueAsString, uIItem14032016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '03.04.2016' cell equals '2024-02-04'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem03042016CellValueAsString, uIItem03042016Cell.ValueAsString);

            // Verify that the 'Text' property of '5150' cell equals '5150'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem5150Cell3Text, uIItem5150Cell3.Text);

            // Verify that the 'Text' property of '11,15' cell equals '22,3'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem1115CellText, uIItem1115Cell.Text);

            // Verify that the 'Text' property of '2600' cell equals '11,15'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem2600CellText, uIItem2600Cell.Text);

            // Verify that the 'ValueAsString' property of '25.01.2016' cell equals '2024-01-08'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem25012016CellValueAsString, uIItem25012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '31.01.2016' cell equals '2024-02-04'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem31012016CellValueAsString, uIItem31012016Cell.ValueAsString);

            // Verify that the 'Text' property of 'Oscarsson, Per' cell equals 'Stormare, Peter'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIOscarssonPerCellText, uIOscarssonPerCell.Text);

            // Verify that the 'Text' property of '8,66' cell equals '3,62'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem866Cell1Text, uIItem866Cell1.Text);

            // Verify that the 'Text' property of '601' cell equals '410'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem601Cell1Text, uIItem601Cell1.Text);

            // Verify that the 'ValueAsString' property of '18.01.2016' cell equals '2024-01-08'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem18012016CellValueAsString, uIItem18012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '17.01.2016' cell equals '2024-02-04'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIItem17012016CellValueAsString, uIItem17012016Cell.ValueAsString);

            // Verify that the 'Text' property of 'Jähkel, Lennart' cell equals 'Edwall, Allan'
            Assert.AreEqual(this.CheckTransferedFTTValues_C1_S6ExpectedValues.UIJähkelLennartCellText, uIJähkelLennartCell.Text);
        }
        
        /// <summary>
        /// CheckTransferedFTTValues_C3_S21 - Use 'CheckTransferedFTTValues_C3_S21ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferedFTTValues_C3_S21()
        {
            #region Variable Declarations
            DXCell uIItem4162Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem4162Cell;
            DXCell uIItem510Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem510Cell1;
            DXCell uIItem04012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem04012016Cell;
            DXCell uIItem14022016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem14022016Cell;
            DXCell uIEndreLenaCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIEndreLenaCell;
            DXCell uIItem2676Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem2676Cell;
            DXCell uIItem400Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem400Cell;
            #endregion

            // Verify that the 'ValueAsString' property of '41,62' cell equals '38.65'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S21ExpectedValues.UIItem4162CellValueAsString, uIItem4162Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '510' cell equals '410'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S21ExpectedValues.UIItem510Cell1ValueAsString, uIItem510Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of '04.01.2016' cell equals '2024-03-18'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S21ExpectedValues.UIItem04012016CellValueAsString, uIItem04012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '14.02.2016' cell equals '2024-04-07'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S21ExpectedValues.UIItem14022016CellValueAsString, uIItem14022016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Endre, Lena' cell equals 'Von Sudow, Max'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S21ExpectedValues.UIEndreLenaCellValueAsString, uIEndreLenaCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '26,76' cell equals '14.86'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S21ExpectedValues.UIItem2676CellValueAsString, uIItem2676Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '400' cell equals '400'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S21ExpectedValues.UIItem400CellValueAsString, uIItem400Cell.ValueAsString);
        }
        
        /// <summary>
        /// CheckTransferedFTTValues_C3_S6 - Use 'CheckTransferedFTTValues_C3_S6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferedFTTValues_C3_S6()
        {
            #region Variable Declarations
            DXCell uIItem4162Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem4162Cell;
            DXCell uIItem2676Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem2676Cell;
            DXCell uIKveldNattilleggCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIKveldNattilleggCell;
            DXCell uILørSøndagstilleggCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UILørSøndagstilleggCell;
            DXCell uIItem14032016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem14032016Cell;
            DXCell uIItem03042016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem03042016Cell;
            DXCell uISkarsgårdStellanCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UISkarsgårdStellanCell;
            #endregion

            // Verify that the 'ValueAsString' property of '41,62' cell equals '62.44'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S6ExpectedValues.UIItem4162CellValueAsString, uIItem4162Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '26,76' cell equals '11.89'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S6ExpectedValues.UIItem2676CellValueAsString, uIItem2676Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Kveld/Nattillegg' cell equals 'Kveld/Nattillegg'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S6ExpectedValues.UIKveldNattilleggCellValueAsString, uIKveldNattilleggCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Lør./Søndagstillegg' cell equals 'Lør./Søndagstillegg'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S6ExpectedValues.UILørSøndagstilleggCellValueAsString, uILørSøndagstilleggCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '14.03.2016' cell equals '2024-03-18'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S6ExpectedValues.UIItem14032016CellValueAsString, uIItem14032016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '03.04.2016' cell equals '2024-04-07'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S6ExpectedValues.UIItem03042016CellValueAsString, uIItem03042016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Skarsgård, Stellan' cell equals 'Von Sudow, Max'
            Assert.AreEqual(this.CheckTransferedFTTValues_C3_S6ExpectedValues.UISkarsgårdStellanCellValueAsString, uISkarsgårdStellanCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckTransferedFTTValues_C5_S7 - Use 'CheckTransferedFTTValues_C5_S7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferedFTTValues_C5_S7()
        {
            #region Variable Declarations
            DXCell uIItem4162Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem4162Cell;
            DXCell uIItem14022016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem14022016Cell;
            DXCell uIEndreLenaCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIEndreLenaCell;
            DXCell uIItem1115Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem1115Cell;
            DXCell uIItem21012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem21012016Cell;
            DXCell uIStormarePeterCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIStormarePeterCell;
            DXCell uIItem866Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem866Cell1;
            DXCell uIItem17012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem17012016Cell;
            DXCell uIJähkelLennartCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIJähkelLennartCell;
            #endregion

            // Verify that the 'Text' property of '41,62' cell equals '20,9'
            Assert.AreEqual(this.CheckTransferedFTTValues_C5_S7ExpectedValues.UIItem4162CellText, uIItem4162Cell.Text);

            // Verify that the 'ValueAsString' property of '14.02.2016' cell equals '2024-01-17'
            Assert.AreEqual(this.CheckTransferedFTTValues_C5_S7ExpectedValues.UIItem14022016CellValueAsString, uIItem14022016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Endre, Lena' cell equals 'Lassgård, Rolf'
            Assert.AreEqual(this.CheckTransferedFTTValues_C5_S7ExpectedValues.UIEndreLenaCellValueAsString, uIEndreLenaCell.ValueAsString);

            // Verify that the 'Text' property of '11,15' cell equals '8,66'
            Assert.AreEqual(this.CheckTransferedFTTValues_C5_S7ExpectedValues.UIItem1115CellText, uIItem1115Cell.Text);

            // Verify that the 'ValueAsString' property of '21.01.2016' cell equals '2024-01-18'
            Assert.AreEqual(this.CheckTransferedFTTValues_C5_S7ExpectedValues.UIItem21012016CellValueAsString, uIItem21012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Stormare, Peter' cell equals 'Lassgård, Rolf'
            Assert.AreEqual(this.CheckTransferedFTTValues_C5_S7ExpectedValues.UIStormarePeterCellValueAsString, uIStormarePeterCell.ValueAsString);

            // Verify that the 'Text' property of '8,66' cell equals '8,66'
            Assert.AreEqual(this.CheckTransferedFTTValues_C5_S7ExpectedValues.UIItem866Cell1Text, uIItem866Cell1.Text);

            // Verify that the 'ValueAsString' property of '17.01.2016' cell equals '2024-01-14'
            Assert.AreEqual(this.CheckTransferedFTTValues_C5_S7ExpectedValues.UIItem17012016CellValueAsString, uIItem17012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Jähkel, Lennart' cell equals 'Jähkel, Lennart'
            Assert.AreEqual(this.CheckTransferedFTTValues_C5_S7ExpectedValues.UIJähkelLennartCellValueAsString, uIJähkelLennartCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckTransferedFTTValues_C6_S24 - Use 'CheckTransferedFTTValues_C6_S24ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferedFTTValues_C6_S24()
        {
            #region Variable Declarations
            DXCell uIItem2676Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem2676Cell;
            DXCell uIItem400Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem400Cell;
            DXCell uISkarsgårdStellanCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UISkarsgårdStellanCell;
            DXCell uIItem2600Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem2600Cell;
            DXCell uIItem601Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem601Cell;
            DXCell uIOscarssonPerCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIOscarssonPerCell;
            DXCell uIItem1Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem1Cell;
            DXCell uIItem1Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem1Cell1;
            DXCell uIItem866Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem866Cell1;
            DXCell uIItem601Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem601Cell1;
            DXCell uIJähkelLennartCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIJähkelLennartCell;
            DXCell uIItem2Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem2Cell;
            DXCell uIItem18012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem18012016Cell;
            DXCell uIItem17012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem17012016Cell;
            DXCell uIItem25012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem25012016Cell;
            DXCell uIItem31012016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem31012016Cell;
            DXCell uIItem14032016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem14032016Cell;
            DXCell uIItem03042016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem03042016Cell;
            DXCell uIItem892Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem892Cell;
            DXCell uIVollterSvenCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIVollterSvenCell;
            DXCell uIItem601Cell2 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem601Cell2;
            #endregion

            // Verify that the 'Text' property of '26,76' cell equals '656,5'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem2676CellText, uIItem2676Cell.Text);

            // Verify that the 'ValueAsString' property of '400' cell equals '601'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem400CellValueAsString, uIItem400Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Skarsgård, Stellan' cell equals 'Oscarsson, Per'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UISkarsgårdStellanCellValueAsString, uISkarsgårdStellanCell.ValueAsString);

            // Verify that the 'Text' property of '2600' cell equals '2600'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem2600CellText, uIItem2600Cell.Text);

            // Verify that the 'ValueAsString' property of '601' cell equals '601'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem601CellValueAsString, uIItem601Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Oscarsson, Per' cell equals 'Oscarsson, Per'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIOscarssonPerCellValueAsString, uIOscarssonPerCell.ValueAsString);

            // Verify that the 'Text' property of '1' cell equals '1'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem1CellText, uIItem1Cell.Text);

            // Verify that the 'Text' property of '1' cell equals '1'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem1Cell1Text, uIItem1Cell1.Text);

            // Verify that the 'Text' property of '8,66' cell equals '4333,33'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem866Cell1Text, uIItem866Cell1.Text);

            // Verify that the 'ValueAsString' property of '601' cell equals '601'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem601Cell1ValueAsString, uIItem601Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Jähkel, Lennart' cell equals 'Oscarsson, Per'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIJähkelLennartCellValueAsString, uIJähkelLennartCell.ValueAsString);

            // Verify that the 'Text' property of '2' cell equals '2'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem2CellText, uIItem2Cell.Text);

            // Verify that the 'ValueAsString' property of '18.01.2016' cell equals '2024-01-22'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem18012016CellValueAsString, uIItem18012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '17.01.2016' cell equals '2024-01-28'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem17012016CellValueAsString, uIItem17012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '25.01.2016' cell equals '2024-01-29'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem25012016CellValueAsString, uIItem25012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '31.01.2016' cell equals '2024-02-04'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem31012016CellValueAsString, uIItem31012016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '14.03.2016' cell equals '2024-01-08'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem14032016CellValueAsString, uIItem14032016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '03.04.2016' cell equals '2024-01-21'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem03042016CellValueAsString, uIItem03042016Cell.ValueAsString);

            // Verify that the 'Text' property of '8,92' cell equals '1531,83'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem892CellText, uIItem892Cell.Text);

            // Verify that the 'ValueAsString' property of 'Vollter, Sven' cell equals 'Vollter, Sven'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIVollterSvenCellValueAsString, uIVollterSvenCell.ValueAsString);

            // Verify that the 'Text' property of '601' cell equals '601'
            Assert.AreEqual(this.CheckTransferedFTTValues_C6_S24ExpectedValues.UIItem601Cell2Text, uIItem601Cell2.Text);
        }
        
        /// <summary>
        /// CheckTransferedFTTValuesStellanCurrent_C2_S12 - Use 'CheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferedFTTValuesStellanCurrent_C2_S12()
        {
            #region Variable Declarations
            DXCell uIItem410KveldNattilleCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem410KveldNattilleCell;
            DXCell uIItem223Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem223Cell;
            DXCell uIItem400LørSøndagstilCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem400LørSøndagstilCell;
            DXCell uIItem1115Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem1115Cell;
            #endregion

            // Verify that the 'Text' property of '410 - Kveld/Nattillegg' cell equals '400 - Lør./Søndagstillegg'
            Assert.AreEqual(this.CheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues.UIItem410KveldNattilleCellText, uIItem410KveldNattilleCell.Text);

            // Verify that the 'Text' property of '22,3' cell equals '14,87'
            Assert.AreEqual(this.CheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues.UIItem223CellText, uIItem223Cell.Text);

            // Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '410 - Kveld/Nattillegg'
            Assert.AreEqual(this.CheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues.UIItem400LørSøndagstilCellText, uIItem400LørSøndagstilCell.Text);

            // Verify that the 'Text' property of '11,15' cell equals '11,89'
            Assert.AreEqual(this.CheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues.UIItem1115CellText, uIItem1115Cell.Text);
        }
        
        /// <summary>
        /// CheckTransferedFTTValuesStellanPrevious_C2_S12 - Use 'CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferedFTTValuesStellanPrevious_C2_S12()
        {
            #region Variable Declarations
            DXCell uIItem400LørSøndagstilCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem400LørSøndagstilCell1;
            DXCell uIItem4162Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem4162Cell;
            DXCell uIItem410KveldNattilleCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem410KveldNattilleCell1;
            DXCell uIItem4162Cell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem4162Cell1;
            DXTextEdit uIRow4ColumncolFrom1Edit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow4ColumncolFrom1Edit;
            DXTextEdit uIRow4ColumncolTo1Edit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow4ColumncolTo1Edit;
            #endregion

            // Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
            Assert.AreEqual(this.CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues.UIItem400LørSøndagstilCell1Text, uIItem400LørSøndagstilCell1.Text);

            // Verify that the 'Text' property of '41,62' cell equals '11,15'
            Assert.AreEqual(this.CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues.UIItem4162CellText, uIItem4162Cell.Text);

            // Verify that the 'Text' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
            Assert.AreEqual(this.CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues.UIItem410KveldNattilleCell1Text, uIItem410KveldNattilleCell1.Text);

            // Verify that the 'Text' property of '41,62' cell equals '22,3'
            Assert.AreEqual(this.CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues.UIItem4162Cell1Text, uIItem4162Cell1.Text);

            // Verify that the 'Text' property of '[Row]4[Column]colFrom1' text box equals '08.01.2024'
            Assert.AreEqual(this.CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues.UIRow4ColumncolFrom1EditText, uIRow4ColumncolFrom1Edit.Text);

            // Verify that the 'Text' property of '[Row]4[Column]colTo1' text box equals '04.02.2024'
            Assert.AreEqual(this.CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues.UIRow4ColumncolTo1EditText, uIRow4ColumncolTo1Edit.Text);
        }
        
        /// <summary>
        /// CheckTransferedFTTValuesStormare_C2_S15 - Use 'CheckTransferedFTTValuesStormare_C2_S15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferedFTTValuesStormare_C2_S15()
        {
            #region Variable Declarations
            DXTextEdit uIRow0ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow0ColumncolToEdit;
            DXCell uIItem223Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem223Cell;
            DXCell uIItem410KveldNattilleCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem410KveldNattilleCell;
            #endregion

            // Verify that the 'ValueAsString' property of '[Row]0[Column]colTo' text box equals '22.01.2024'
            Assert.AreEqual(this.CheckTransferedFTTValuesStormare_C2_S15ExpectedValues.UIRow0ColumncolToEditValueAsString, uIRow0ColumncolToEdit.ValueAsString);

            // Verify that the 'Text' property of '22,3' cell equals '41,63'
            Assert.AreEqual(this.CheckTransferedFTTValuesStormare_C2_S15ExpectedValues.UIItem223CellText, uIItem223Cell.Text);

            // Verify that the 'ValueAsString' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
            Assert.AreEqual(this.CheckTransferedFTTValuesStormare_C2_S15ExpectedValues.UIItem410KveldNattilleCellValueAsString, uIItem410KveldNattilleCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckTransferedFTTValuesStormare_C2_S17 - Use 'CheckTransferedFTTValuesStormare_C2_S17ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferedFTTValuesStormare_C2_S17()
        {
            #region Variable Declarations
            DXCell uIItem4162Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem4162Cell;
            DXCell uIItem510Cell1 = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem510Cell1;
            DXCell uIItem14022016Cell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIItem14022016Cell;
            DXCell uIEndreLenaCell = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UI_GridTable.UIEndreLenaCell;
            #endregion

            // Verify that the 'ValueAsString' property of '41,62' cell equals '41.62'
            Assert.AreEqual(this.CheckTransferedFTTValuesStormare_C2_S17ExpectedValues.UIItem4162CellValueAsString, uIItem4162Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '510' cell equals '410'
            Assert.AreEqual(this.CheckTransferedFTTValuesStormare_C2_S17ExpectedValues.UIItem510Cell1ValueAsString, uIItem510Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of '14.02.2016' cell equals '2024-01-22'
            Assert.AreEqual(this.CheckTransferedFTTValuesStormare_C2_S17ExpectedValues.UIItem14022016CellValueAsString, uIItem14022016Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Endre, Lena' cell equals 'Stormare, Peter'
            Assert.AreEqual(this.CheckTransferedFTTValuesStormare_C2_S17ExpectedValues.UIEndreLenaCellValueAsString, uIEndreLenaCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckTransferePeriod - Use 'CheckTransferePeriodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferePeriod()
        {
            #region Variable Declarations
            DXTextEdit uIRow0ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow0ColumncolFromEdit;
            DXTextEdit uIRow0ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow0ColumncolToEdit;
            DXTextEdit uIRow1ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow1ColumncolFromEdit;
            DXTextEdit uIRow1ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow1ColumncolToEdit;
            DXTextEdit uIRow2ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow2ColumncolFromEdit;
            DXTextEdit uIRow2ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow2ColumncolToEdit;
            DXTextEdit uIRow3ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow3ColumncolFromEdit;
            DXTextEdit uIRow3ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow3ColumncolToEdit;
            DXTextEdit uIRow4ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow4ColumncolFromEdit;
            DXTextEdit uIRow4ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow4ColumncolToEdit;
            #endregion

            // Verify that the 'ValueAsString' property of '[Row]0[Column]colFrom' text box equals '05.08.2024'
            Assert.AreEqual(this.CheckTransferePeriodExpectedValues.UIRow0ColumncolFromEditValueAsString, uIRow0ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]0[Column]colTo' text box equals '25.08.2024'
            Assert.AreEqual(this.CheckTransferePeriodExpectedValues.UIRow0ColumncolToEditValueAsString, uIRow0ColumncolToEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]1[Column]colFrom' text box equals '05.08.2024'
            Assert.AreEqual(this.CheckTransferePeriodExpectedValues.UIRow1ColumncolFromEditValueAsString, uIRow1ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]1[Column]colTo' text box equals '25.08.2024'
            Assert.AreEqual(this.CheckTransferePeriodExpectedValues.UIRow1ColumncolToEditValueAsString, uIRow1ColumncolToEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]2[Column]colFrom' text box equals '05.08.2024'
            Assert.AreEqual(this.CheckTransferePeriodExpectedValues.UIRow2ColumncolFromEditValueAsString, uIRow2ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]2[Column]colTo' text box equals '25.08.2024'
            Assert.AreEqual(this.CheckTransferePeriodExpectedValues.UIRow2ColumncolToEditValueAsString, uIRow2ColumncolToEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]3[Column]colFrom' text box equals '05.08.2024'
            Assert.AreEqual(this.CheckTransferePeriodExpectedValues.UIRow3ColumncolFromEditValueAsString, uIRow3ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]3[Column]colTo' text box equals '25.08.2024'
            Assert.AreEqual(this.CheckTransferePeriodExpectedValues.UIRow3ColumncolToEditValueAsString, uIRow3ColumncolToEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]4[Column]colFrom' text box equals '19.08.2024'
            Assert.AreEqual(this.CheckTransferePeriodExpectedValues.UIRow4ColumncolFromEditValueAsString, uIRow4ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]4[Column]colTo' text box equals '25.08.2024'
            Assert.AreEqual(this.CheckTransferePeriodExpectedValues.UIRow4ColumncolToEditValueAsString, uIRow4ColumncolToEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckTransferFTTButtonDisabled - Use 'CheckTransferFTTButtonDisabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferFTTButtonDisabled()
        {
            UIMapVS2017.CheckTransferFTTButtonDisabled();
        }
        
        /// <summary>
        /// CheckTransferFTTButtonEnabled - Use 'CheckTransferFTTButtonEnabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferFTTButtonEnabled()
        {
            UIMapVS2017.CheckTransferFTTButtonEnabled();
        }
        
        /// <summary>
        /// CheckTransferPeriod_C1_S20 - Use 'CheckTransferPeriod_C1_S20ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferPeriod_C1_S20()
        {
            #region Variable Declarations
            DXTextEdit uIRow2ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow2ColumncolFromEdit;
            DXTextEdit uIRow2ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow2ColumncolToEdit;
            DXTextEdit uIRow3ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow3ColumncolFromEdit;
            DXTextEdit uIRow3ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow3ColumncolToEdit;
            #endregion

            // Verify that the 'ValueAsString' property of '[Row]2[Column]colFrom' text box equals '05.08.2024'
            Assert.AreEqual(this.CheckTransferPeriod_C1_S20ExpectedValues.UIRow2ColumncolFromEditValueAsString, uIRow2ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]2[Column]colTo' text box equals '15.09.2024'
            Assert.AreEqual(this.CheckTransferPeriod_C1_S20ExpectedValues.UIRow2ColumncolToEditValueAsString, uIRow2ColumncolToEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]3[Column]colFrom' text box equals '19.08.2024'
            Assert.AreEqual(this.CheckTransferPeriod_C1_S20ExpectedValues.UIRow3ColumncolFromEditValueAsString, uIRow3ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]3[Column]colTo' text box equals '15.09.2024'
            Assert.AreEqual(this.CheckTransferPeriod_C1_S20ExpectedValues.UIRow3ColumncolToEditValueAsString, uIRow3ColumncolToEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckTransferPeriodAndEmployees_C2_S4 - Use 'CheckTransferPeriodAndEmployees_C2_S4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferPeriodAndEmployees_C2_S4()
        {
            #region Variable Declarations
            DXTextEdit uIDeExportFromEdit = this.UIOverførtilleggWindow.UIDeExportFromEdit;
            DXCell uIAdamsMaudCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIAdamsMaudCell;
            DXCell uIBergmanIngridCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell;
            DXCell uIBergmanIngridCell1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell1;
            #endregion

            // Verify that the 'ValueAsString' property of 'deExportFrom' text box equals '2024-08-01'
            Assert.AreEqual(this.CheckTransferPeriodAndEmployees_C2_S4ExpectedValues.UIDeExportFromEditValueAsString, uIDeExportFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Skarsgård, Stellan'
            Assert.AreEqual(this.CheckTransferPeriodAndEmployees_C2_S4ExpectedValues.UIAdamsMaudCellValueAsString, uIAdamsMaudCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Stormare, Peter'
            Assert.AreEqual(this.CheckTransferPeriodAndEmployees_C2_S4ExpectedValues.UIBergmanIngridCellValueAsString, uIBergmanIngridCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Edwall, Allan'
            Assert.AreEqual(this.CheckTransferPeriodAndEmployees_C2_S4ExpectedValues.UIBergmanIngridCell1ValueAsString, uIBergmanIngridCell1.ValueAsString);
        }
        
        /// <summary>
        /// CheckTransferUTAandPeriod_C1_S25 - Use 'CheckTransferUTAandPeriod_C1_S25ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTransferUTAandPeriod_C1_S25()
        {
            #region Variable Declarations
            DXTextEdit uIRow0ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow0ColumncolFromEdit;
            DXTextEdit uIRow0ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow0ColumncolToEdit;
            DXTextEdit uIRow0ColumncolHoursEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow0ColumncolHoursEdit;
            DXTextEdit uIRow1ColumncolFromEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow1ColumncolFromEdit;
            DXTextEdit uIRow1ColumncolToEdit = this.UIOverførtilleggWindow.UIGcExportsTable.UIRow1ColumncolToEdit;
            DXCell uIItem867Cell = this.UIOverførtilleggWindow.UIGcExportsTable.UIItem867Cell;
            DXCell uIBergmanIngridCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIBergmanIngridCell;
            DXCell uIAdamsMaudCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIAdamsMaudCell;
            #endregion

            // Verify that the 'ValueAsString' property of '[Row]0[Column]colFrom' text box equals '05.08.2024'
            Assert.AreEqual(this.CheckTransferUTAandPeriod_C1_S25ExpectedValues.UIRow0ColumncolFromEditValueAsString, uIRow0ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]0[Column]colTo' text box equals '15.09.2024'
            Assert.AreEqual(this.CheckTransferUTAandPeriod_C1_S25ExpectedValues.UIRow0ColumncolToEditValueAsString, uIRow0ColumncolToEdit.ValueAsString);

            // Verify that the 'Text' property of '[Row]0[Column]colHours' text box equals '8,67'
            Assert.AreEqual(this.CheckTransferUTAandPeriod_C1_S25ExpectedValues.UIRow0ColumncolHoursEditText, uIRow0ColumncolHoursEdit.Text);

            // Verify that the 'ValueAsString' property of '[Row]1[Column]colFrom' text box equals '05.08.2024'
            Assert.AreEqual(this.CheckTransferUTAandPeriod_C1_S25ExpectedValues.UIRow1ColumncolFromEditValueAsString, uIRow1ColumncolFromEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of '[Row]1[Column]colTo' text box equals '12.08.2024'
            Assert.AreEqual(this.CheckTransferUTAandPeriod_C1_S25ExpectedValues.UIRow1ColumncolToEditValueAsString, uIRow1ColumncolToEdit.ValueAsString);

            // Verify that the 'Text' property of '8,67' cell equals '21,13'
            Assert.AreEqual(this.CheckTransferUTAandPeriod_C1_S25ExpectedValues.UIItem867CellText, uIItem867Cell.Text);

            // Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Garbo, Greta'
            Assert.AreEqual(this.CheckTransferUTAandPeriod_C1_S25ExpectedValues.UIBergmanIngridCellValueAsString, uIBergmanIngridCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Endre, Lena'
            Assert.AreEqual(this.CheckTransferUTAandPeriod_C1_S25ExpectedValues.UIAdamsMaudCellValueAsString, uIAdamsMaudCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckUTACalculationEndre_Garbo_C1_S23 - Use 'CheckUTACalculationEndre_Garbo_C1_S23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckUTACalculationEndre_Garbo_C1_S23()
        {
            UIMapVS2017.CheckUTACalculationEndre_Garbo_C1_S23();
        }
        
        /// <summary>
        /// CheckUTACalculationGarbo_C1_S24 - Use 'CheckUTACalculationGarbo_C1_S24ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckUTACalculationGarbo_C1_S24()
        {
            UIMapVS2017.CheckUTACalculationGarbo_C1_S24();
        }
        
        /// <summary>
        /// CheckUTCalculationEndre_Garbo_C1_S24 - Use 'CheckUTCalculationEndre_Garbo_C1_S24ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckUTCalculationEndre_Garbo_C1_S24()
        {
            UIMapVS2017.CheckUTCalculationEndre_Garbo_C1_S24();
        }
        
        /// <summary>
        /// ClickButtonShiftClasses
        /// </summary>
        public void ClickButtonShiftClasses()
        {
            UIMapVS2017.ClickButtonShiftClasses();
        }
        
        /// <summary>
        /// ClickCancelExportLogDialog
        /// </summary>
        public void ClickCancelExportLogDialog()
        {
            #region Variable Declarations
            DXButton uIAvbrytButton = this.UIOverførtilleggWindow.UIAvbrytButton;
            #endregion

            // Click '&Avbryt' button
            Mouse.Click(uIAvbrytButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickCellToCreateEqualizeShiftWeek1Garbo
        /// </summary>
        public void ClickCellToCreateEqualizeShiftWeek1Garbo()
        {
            #region Variable Declarations
            DXCell uIItemCell31 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell31;
            #endregion

            // Right-Click cell
            Mouse.Click(uIItemCell31, MouseButtons.Right, ModifierKeys.None, new Point(8, 10));
        }
        
        /// <summary>
        /// ClickCloseExportDetailsWindow
        /// </summary>
        public void ClickCloseExportDetailsWindow()
        {
            #region Variable Declarations
            DXButton uIGSSimpleButtonButton = this.UIEttersystemeksportdeWindow.UIGsPanelControl1Client.UIGSSimpleButtonButton;
            #endregion

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }

        /// <summary>
        /// ClickCloseExportLogWindow
        /// </summary>
        public void ClickCloseExportLogWindow()
        {
            UICommon.UIMapVS2017.ClickCloseExportLogWindow();
        }
        
        /// <summary>
        /// ClickEditRosterplanFromHomeTab
        /// </summary>
        public void ClickEditRosterplanFromHomeTab()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIRedigerRibbonBaseButtonItem = this.UIArbeidsplanKopiavFTTWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpEditRibbonPageGroup.UIRedigerRibbonBaseButtonItem;
            #endregion

            // Click 'Rediger' RibbonBaseButtonItem
            Mouse.Click(uIRedigerRibbonBaseButtonItem, new Point(28, 29));
        }
        
        /// <summary>
        /// ClickEditRosterplanFromPlanTab
        /// </summary>
        public void ClickEditRosterplanFromPlanTab()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIRedigerRibbonBaseButtonItem = this.UIArbeidsplanKopiavFTTWindow.UIRcMenuRibbon.UIRpPlanRibbonPage.UIRibbonPageGroup9RibbonPageGroup.UIRedigerRibbonBaseButtonItem;
            #endregion

            // Click 'Rediger' RibbonBaseButtonItem
            Mouse.Click(uIRedigerRibbonBaseButtonItem, new Point(26, 30));
        }
        
        /// <summary>
        /// ClickOkEditFromHometab
        /// </summary>
        public void ClickOkEditFromHometab()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIBtnOkRibbonBaseButtonItem = this.UIArbeidsplanKopiavFTTWindow1.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpEditRibbonPageGroup.UIBtnOkRibbonBaseButtonItem;
            #endregion

            // Click 'btnOk' RibbonBaseButtonItem
            Mouse.Click(uIBtnOkRibbonBaseButtonItem, new Point(27, 14));
        }
        
        /// <summary>
        /// ClickOkEditFromPlantab
        /// </summary>
        public void ClickOkEditFromPlantab()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIBtnOkRibbonBaseButtonItem = this.UIArbeidsplanKopiavFTTWindow1.UIRcMenuRibbon.UIRpPlanRibbonPage.UIRibbonPageGroup9RibbonPageGroup.UIBtnOkRibbonBaseButtonItem;
            #endregion

            // Click 'btnOk' RibbonBaseButtonItem
            Mouse.Click(uIBtnOkRibbonBaseButtonItem, new Point(26, 10));
        }
        
        /// <summary>
        /// ClickOkInNewShiftClassRateWindow
        /// </summary>
        public void ClickOkInNewShiftClassRateWindow()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UINyevaktklassesatserWindow.UIOKButton;
            #endregion

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickProcessingLink
        /// </summary>
        public void ClickProcessingLink()
        {
            #region Variable Declarations
            DXTestControl uIGSLabelControlLabel = this.UIExportloggWindow.UIGsLayoutControl1Custom.UI_LayoutGroup_RootLayoutGroup.UI_TabControl_ExportTrTabbedGroup.UI_LayoutTab_MessageBaLayoutGroup.UI_LayoutItem_DetailsLayoutControlItem.UIGsPanelControl3Client.UIGsPanelControl7Client.UI_ScrollControlScrollableControl.UIInternalGroupUiItemClient.UIGSLabelControlLabel;
            #endregion

            // Click 'GSLabelControl' label
            Mouse.Click(uIGSLabelControlLabel, new Point(38, 5));
        }
        
        /// <summary>
        /// ClickStopFFTButton
        /// </summary>
        public void ClickStopFFTButton()
        {
            #region Variable Declarations
            DXButton uIStoppButton = this.UIArbeidsplanFTTKalendWindow2.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpFixedPaymentClient.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIStoppButton;
            #endregion

            // Click 'Stopp...' button
            Mouse.Click(uIStoppButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickTransfereFFTDialogButton
        /// </summary>
        public void ClickTransfereFFTDialogButton()
        {
            #region Variable Declarations
            DXButton uIOverførButton = this.UIOverførtilleggWindow.UIOverførButton;
            #endregion

            // Click '&Overfør' button
            Mouse.Click(uIOverførButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickTransfereFFTTabButton
        /// </summary>
        public void ClickTransfereFFTTabButton()
        {
            UICommon.UIMapVS2017.ClickTransfereFTTButton();
        }
        
        /// <summary>
        /// CloseCurrentRosterplanFromHomeTab
        /// </summary>
        public void CloseCurrentRosterplanFromHomeTab()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIBtnCloseRibbonBaseButtonItem = this.UIArbeidsplanKopiavFTTWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpCloseRibbonPageGroup.UIBtnCloseRibbonBaseButtonItem;
            #endregion

            // Click 'btnClose' RibbonBaseButtonItem
            Mouse.Click(uIBtnCloseRibbonBaseButtonItem, new Point(30, 30));
        }
        
        /// <summary>
        /// CloseCurrentRosterplanFromPlanTab
        /// </summary>
        public void CloseCurrentRosterplanFromPlanTab()
        {
            UICommon.CloseRosterplanFromPlanTab();
        }
        
        /// <summary>
        /// ConnectWhishplanEaster2016ToCopyOfFFTBaseplan - Use 'ConnectWhishplanEaster2016ToCopyOfFFTBaseplanParams' to pass parameters into this method.
        /// </summary>
        public void ConnectWhishplanEaster2016ToCopyOfFFTBaseplan()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIKobletilbaseplanRibbonBaseButtonItem = this.UIGatver66041952ASCLAvWindow.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIKobletilbaseplanRibbonBaseButtonItem;
            DXLookUpEdit uIDrdBasePlanLookUpEdit = this.UIKobleønskeplanperiodWindow.UIPnlMainClient.UIGsLayoutControlMainCustom.UILayoutControlGroupNaLayoutGroup.UILayoutControlGroupNeLayoutGroup.UILcMainInfoLayoutControlItem.UIPnlMainInfoClient.UIDrdBasePlanLookUpEdit;
            DXWindow uIPopupLookUpEditFormWindow = this.UIKobleønskeplanperiodWindow.UIPnlMainClient.UIGsLayoutControlMainCustom.UILayoutControlGroupNaLayoutGroup.UILayoutControlGroupNeLayoutGroup.UILcMainInfoLayoutControlItem.UIPnlMainInfoClient.UIDrdBasePlanLookUpEdit.UIPopupLookUpEditFormWindow;
            DXButton uIGSSimpleButtonButton = this.UIKobleønskeplanperiodWindow.UIGSPanelControlClient.UIGSSimpleButtonButton;
            #endregion

            // Click 'Koble til baseplan' RibbonBaseButtonItem
            Mouse.Click(uIKobletilbaseplanRibbonBaseButtonItem, new Point(23, 26));

            // Type '' in 'drdBasePlan' LookUpEdit
            //ValueAsString
            uIDrdBasePlanLookUpEdit.ValueAsString = this.ConnectWhishplanEaster2016ToCopyOfFFTBaseplanParams.UIDrdBasePlanLookUpEditValueAsString;

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow, new Point(86, 31));

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }

        public void CreateAbsence(string absCode)
        {
            UICommon.SelectAbsenceCode(absCode, "12");
        }
        
        /// <summary>
        /// DeleteA1shiftTueWeek2Line2Stormare - Use 'DeleteA1shiftTueWeek2Line2StormareParams' to pass parameters into this method.
        /// </summary>
        public void DeleteA1shiftTueWeek2Line2Stormare()
        {
            #region Variable Declarations
            DXCell uIItemCell1 = this.UIArbeidsplanFTTKalendWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanFTTKalendWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell1, new Point(20, 11));

            // Type '{Delete}{Tab}' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.DeleteA1shiftTueWeek2Line2StormareParams.UIGcRosterPlanTableSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// DeleteAbsenceStellanTuesday
        /// </summary>
        public void DeleteAbsenceStellanTuesday()
        {
            #region Variable Declarations
            DXCell uIACell = this.UIArbeidsplanFTTJanuarWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell;
            DXMenuBaseButtonItem uIBarButtonItemLink0MenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIBarButtonItemLink0MenuBaseButtonItem;
            DXButton uIJAButton = this.UIGT4001InformasjonWindow.UIJAButton;
            #endregion

            // Right-Click 'A' cell
            Mouse.Click(uIACell, MouseButtons.Right, ModifierKeys.None, new Point(8, 9));

            // Click 'BarButtonItemLink[0]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink0MenuBaseButtonItem, new Point(54, 9));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DeleteAbsenceWeek1Gustavsson
        /// </summary>
        public void DeleteAbsenceWeek1Gustavsson()
        {
            #region Variable Declarations
            DXCell uIItemCell8 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            DXMenuBaseButtonItem uIBarButtonItemLink0MenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIBarButtonItemLink0MenuBaseButtonItem;
            DXButton uIJAButton = this.UIGT4001InformasjonWindow.UIJAButton;
            #endregion

            // Right-Click cell
            Mouse.Click(uIItemCell8, MouseButtons.Right, ModifierKeys.None, new Point(11, 10));

            // Click 'BarButtonItemLink[0]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink0MenuBaseButtonItem, new Point(74, 14));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// EditF3PlanSettings - Use 'EditF3PlanSettingsParams' to pass parameters into this method.
        /// </summary>
        public void EditF3PlanSettings()
        {
            #region Variable Declarations
            DXRibbonPage uIRpPlanRibbonPage = this.UIArbeidsplanKopiavFTTWindow11.UIRcMenuRibbon.UIRpPlanRibbonPage;
            DXRibbonButtonItem uIOppsettRibbonBaseButtonItem = this.UIArbeidsplanKopiavFTTWindow11.UIRcMenuRibbon.UIRpPlanRibbonPage.UIRpgPlanRibbonPageGroup.UIOppsettRibbonBaseButtonItem;
            DXNavBarGroup uIF3LengdeVaktfragrunnNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIF3LengdeVaktfragrunnNavBarGroup;
            DXComboBox uICmbChoicesComboBox = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UINavBarGroupControlCoScrollableControl.UIPnlEditClient.UICmbChoicesComboBox;
            DXListBox uIComboBoxPopupListBoxList = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UINavBarGroupControlCoScrollableControl.UIPnlEditClient.UICmbChoicesComboBox.UIComboBoxPopupListBoxWindow.UIComboBoxPopupListBoxList;
            DXTextEdit uIENumberEdit = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UINavBarGroupControlCoScrollableControl.UIPnlEditClient.UIENumberEdit;
            DXButton uILagreLukkButton = this.UIArbeidsplanoppsettWindow.UIPnlButtonsClient.UILagreLukkButton;
            #endregion

            // Click 'rpPlan' RibbonPage
            Mouse.Click(uIRpPlanRibbonPage, new Point(21, 12));

            // Click 'Oppsett' RibbonBaseButtonItem
            Mouse.Click(uIOppsettRibbonBaseButtonItem, new Point(25, 20));

            // Double-Click 'F3 Lengde - Vakt fra grunnplan' NavBarGroup
            Mouse.DoubleClick(uIF3LengdeVaktfragrunnNavBarGroup, new Point(80, 11));

            // Select 'Gatsoft.Localization.TranslatedString' in 'cmbChoices' combo box
            //ValueTypeName
            uICmbChoicesComboBox.ValueTypeName = this.EditF3PlanSettingsParams.UICmbChoicesComboBoxValueTypeName;

            // Select 'Fast verdi [SelectionStart]0' in 'cmbChoices' combo box
            //ValueAsString
            uICmbChoicesComboBox.ValueAsString = this.EditF3PlanSettingsParams.UICmbChoicesComboBoxValueAsString;

            // Type '{Tab}' in 'ComboBoxPopupListBox' list box
            Keyboard.SendKeys(uIComboBoxPopupListBoxList, this.EditF3PlanSettingsParams.UIComboBoxPopupListBoxListSendKeys, ModifierKeys.None);

            // Type '8,00 [SelectionStart]0[SelectionLength]4' in 'eNumber' text box
            //ValueAsString
            uIENumberEdit.ValueAsString = this.EditF3PlanSettingsParams.UIENumberEditValueAsString;

            // Click '&Lagre Lukk' button
            Mouse.Click(uILagreLukkButton, new Point(1, 1));
        }
        
        /// <summary>
        /// EditLineSettingsRheborg - Use 'EditLineSettingsRheborgParams' to pass parameters into this method.
        /// </summary>
        public void EditLineSettingsRheborg()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIBarButtonItemLink1MenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIBarButtonItemLink1MenuBaseButtonItem;
            DXTextEdit uIENumber2Edit = this.UILinjeinnstillingerRhWindow.UIGsPanelControl3Client.UIENumber2Edit;
            DXButton uIOKButton = this.UILinjeinnstillingerRhWindow.UIGsPanelControl2Client.UIOKButton;
            #endregion

            UIMapVS2017.RightClickRheborgCell();

            // Click 'BarButtonItemLink[1]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink1MenuBaseButtonItem, new Point(127, 10));

            // Type '5,00 [SelectionStart]0[SelectionLength]4' in 'eNumber[2]' text box
            //ValueAsString
            uIENumber2Edit.ValueAsString = this.EditLineSettingsRheborgParams.UIENumber2EditValueAsString;

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// EditOscarssonLine_C6_11 - Use 'EditOscarssonLine_C6_11Params' to pass parameters into this method.
        /// </summary>
        public void EditOscarssonLine_C6_11()
        {
            #region Variable Declarations
            DXTextEdit uIRow0ColumnRosterCellEdit1 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit1;
            DXCell uIItemCell11 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell11;
            DXTextEdit uIRow0ColumnRosterCellEdit11 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit11;
            #endregion
            
            // Type '{Tab}' in '[Row]0[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit1, "D2" + this.EditOscarssonLine_C6_11Params.UIRow0ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell11, new Point(20, 5));

            // Type '{Tab}' in '[Row]0[Column]RosterCell_12' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit11, "D2" + this.EditOscarssonLine_C6_11Params.UIRow0ColumnRosterCellEdit11SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// EditOscarssonLine_C6_15 - Use 'EditOscarssonLine_C6_15Params' to pass parameters into this method.
        /// </summary>
        public void EditOscarssonLine_C6_15()
        {
            #region Variable Declarations
            DXTextEdit uIRow0ColumnRosterCellEdit2 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit2;
            DXCell uIItemCell12 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell12;
            DXTextEdit uIRow0ColumnRosterCellEdit12 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit12;
            DXCell uIItemCell22 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell22;
            DXTextEdit uIRow0ColumnRosterCellEdit21 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit21;
            #endregion

            // Type '{Tab}' in '[Row]0[Column]RosterCell_15' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit2, "bv2" + this.EditOscarssonLine_C6_15Params.UIRow0ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell12, new Point(16, 8));

            // Type '{Tab}' in '[Row]0[Column]RosterCell_16' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit12, "bv2" + this.EditOscarssonLine_C6_15Params.UIRow0ColumnRosterCellEdit12SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell22, new Point(10, 7));
            // Type '{Tab}' in '[Row]0[Column]RosterCell_23' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit21, "kk2" + this.EditOscarssonLine_C6_15Params.UIRow0ColumnRosterCellEdit21SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// EditOscarssonLine2_C6_20 - Use 'EditOscarssonLine2_C6_20Params' to pass parameters into this method.
        /// </summary>
        public void EditOscarssonLine2_C6_20()
        {
            #region Variable Declarations
            DXTextEdit uIRow1ColumnRosterCellEdit = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit;
            DXCell uIItemCell13 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell13;
            DXTextEdit uIRow1ColumnRosterCellEdit11 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit11;
            DXCell uIItemCell23 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell23;
            DXTextEdit uIRow1ColumnRosterCellEdit21 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit21;
            DXCell uIItemCell3 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXTextEdit uIRow1ColumnRosterCellEdit3 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit3;
            #endregion

            // Type '{Tab}' in '[Row]1[Column]RosterCell_3' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit, "kk4" + this.EditOscarssonLine2_C6_20Params.UIRow1ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell13, new Point(15, 7));
            // Type '{Tab}' in '[Row]1[Column]RosterCell_10' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit11, "kk4" + this.EditOscarssonLine2_C6_20Params.UIRow1ColumnRosterCellEdit11SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell23, new Point(21, 6));

            // Type '{Tab}' in '[Row]1[Column]RosterCell_17' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit21, "kk4" + this.EditOscarssonLine2_C6_20Params.UIRow1ColumnRosterCellEdit21SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell3, new Point(14, 6));

            // Type '{Tab}' in '[Row]1[Column]RosterCell_24' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit3, "kk4" + this.EditOscarssonLine2_C6_20Params.UIRow1ColumnRosterCellEdit3SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// EditVollterLine_C6_9 - Use 'EditVollterLine_C6_9Params' to pass parameters into this method.
        /// </summary>
        public void EditVollterLine_C6_9()
        {
            #region Variable Declarations
            DXTextEdit uIRow1ColumnRosterCellEdit = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit;
            DXCell uIItemCell2 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            DXTextEdit uIRow1ColumnRosterCellEdit1 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit1;
            DXCell uIItemCell4 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXTextEdit uIRow1ColumnRosterCellEdit22 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit22;
            #endregion

            // Type '{Tab}' in '[Row]1[Column]RosterCell_3' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit, this.EditVollterLine_C6_9Params.UIRow1ColumnRosterCellEditValueAsString + this.EditVollterLine_C6_9Params.UIRow1ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell2, new Point(15, 9));

            // Type '{Tab}' in '[Row]1[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit1, this.EditVollterLine_C6_9Params.UIRow1ColumnRosterCellEdit1ValueAsString+this.EditVollterLine_C6_9Params.UIRow1ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell4, new Point(19, 12));

            // Type '{Tab}' in '[Row]1[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit22, this.EditVollterLine_C6_9Params.UIRow1ColumnRosterCellEdit22ValueAsString+this.EditVollterLine_C6_9Params.UIRow1ColumnRosterCellEdit22SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ExpandMasterDetailsForAllEmployees - Use 'ExpandMasterDetailsForAllEmployeesParams' to pass parameters into this method.
        /// </summary>
        public void ExpandMasterDetailsForAllEmployees()
        {
            #region Variable Declarations
            DXButton uIValgtButton2 = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton2;
            DXButton uIValgtButton11 = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton11;
            DXButton uIValgtButton1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton1;
            DXButton uIValgtButton = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton;
            DXButton uIMaximizeButton = this.UIOverførtilleggWindow.UIMaximizeButton;
            DXGrid uIGcExportsTable = this.UIOverførtilleggWindow.UIGcExportsTable;
            #endregion

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton2, new Point(6, 5));

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton11, new Point(5, 3));

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton1, new Point(1, 1));

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton, new Point(4, 1));

            // Click 'Maximize' button
            Mouse.Click(uIMaximizeButton, new Point(8, 12));

            // Type 'Control + i' in 'gcExports' table
            Keyboard.SendKeys(uIGcExportsTable, this.ExpandMasterDetailsForAllEmployeesParams.UIGcExportsTableSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// ExpandMasterDetailsForAllEmployees_C5_S7
        /// </summary>
        public void ExpandMasterDetailsForAllEmployees_C5_S7()
        {
            #region Variable Declarations
            DXButton uIValgtButton11 = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton11;
            DXButton uIValgtButton1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton1;
            DXButton uIValgtButton = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton;
            #endregion

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton11, new Point(1, 5));

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton1, new Point(4, 2));

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton, new Point(5, 6));
        }
        
        /// <summary>
        /// InsertA1shiftSatWeek4Line2Stormare - Use 'InsertA1shiftSatWeek4Line2StormareParams' to pass parameters into this method.
        /// </summary>
        public void InsertA1shiftSatWeek4Line2Stormare()
        {
            #region Variable Declarations
            DXTextEdit uIRow2ColumnRosterCellEdit11 = this.UIArbeidsplanFTTKalendWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit11;
            #endregion

            // Type '{Tab}' in '[Row]2[Column]RosterCell_26' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit11, "a" + this.InsertA1shiftSatWeek4Line2StormareParams.UIRow2ColumnRosterCellEdit11SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertA1shiftTueWeek2Line2Stormare - Use 'InsertA1shiftTueWeek2Line2StormareParams' to pass parameters into this method.
        /// </summary>
        public void InsertA1shiftTueWeek2Line2Stormare()
        {
            #region Variable Declarations
            DXTextEdit uIRow2ColumnRosterCellEdit = this.UIArbeidsplanFTTKalendWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit;
            #endregion
            
            // Type '{Tab}' in '[Row]2[Column]RosterCell_8' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit, "a" + this.InsertA1shiftTueWeek2Line2StormareParams.UIRow2ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertA1shiftWedWeek3Line2Stormare - Use 'InsertA1shiftWedWeek3Line2StormareParams' to pass parameters into this method.
        /// </summary>
        public void InsertA1shiftWedWeek3Line2Stormare()
        {
            #region Variable Declarations
            DXTextEdit uIRow2ColumnRosterCellEdit1 = this.UIArbeidsplanFTTKalendWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit1;
            #endregion

            // Type 'a{Tab}' in '[Row]2[Column]RosterCell_16' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit1, this.InsertA1shiftWedWeek3Line2StormareParams.UIRow2ColumnRosterCellEdit1SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertAandDshiftsWeek4Line2Persbrandt - Use 'InsertAandDshiftsWeek4Line2PersbrandtParams' to pass parameters into this method.
        /// </summary>
        public void InsertAandDshiftsWeek4Line2Persbrandt()
        {
            #region Variable Declarations
            DXTextEdit uIRow1ColumnRosterCellEdit = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit;
            DXCell uIItemCell11 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell11;
            DXTextEdit uIRow1ColumnRosterCellEdit1 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit1;
            DXCell uIItemCell21 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell21;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXTextEdit uIRow1ColumnRosterCellEdit2 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit2;
            DXCell uIItemCell31 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell31;
            DXTextEdit uIRow1ColumnRosterCellEdit3 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit3;
            #endregion

            // Type '{Tab}' in '[Row]1[Column]RosterCell_21' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit, "a" + this.InsertAandDshiftsWeek4Line2PersbrandtParams.UIRow1ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell11, new Point(17, 7));

            // Type '{Tab}' in '[Row]1[Column]RosterCell_22' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit1, "a" + this.InsertAandDshiftsWeek4Line2PersbrandtParams.UIRow1ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell21, new Point(15, 6));

            // Type '{Tab}' in '[Row]1[Column]RosterCell_26' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit2, "D1" + this.InsertAandDshiftsWeek4Line2PersbrandtParams.UIRow1ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell31, new Point(24, 8));
            // Type '{Tab}' in '[Row]1[Column]RosterCell_27' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit3, "D1" + this.InsertAandDshiftsWeek4Line2PersbrandtParams.UIRow1ColumnRosterCellEdit3SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertAshiftMonday - Use 'InsertAshiftMondayParams' to pass parameters into this method.
        /// </summary>
        public void InsertAshiftMonday()
        {
            #region Variable Declarations
            DXCell uIF3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell;
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            DXCell uIF3Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell1;
            DXTextEdit uIRow1ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit;
            DXCell uIF3Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell2;
            DXTextEdit uIRow2ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit;
            DXCell uIF3Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell3;
            DXTextEdit uIRow3ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit;
            #endregion

            // Click 'F3' cell
            Mouse.Click(uIF3Cell, new Point(14, 9));

            // Type 'a{Tab}' in '[Row]0[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, this.InsertAshiftMondayParams.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click 'F3' cell
            Mouse.Click(uIF3Cell1, new Point(12, 8));

            // Type 'a{Tab}' in '[Row]1[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit, this.InsertAshiftMondayParams.UIRow1ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click 'F3' cell
            Mouse.Click(uIF3Cell2, new Point(10, 10));

            // Type '{DELETE}{Tab}' in '[Row]2[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit, this.InsertAshiftMondayParams.UIRow2ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click 'F3' cell
            Mouse.Click(uIF3Cell3, new Point(8, 9));

            // Type '{DELETE}{Tab}' in '[Row]3[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit, this.InsertAshiftMondayParams.UIRow3ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertD1shiftsLine1And2Haber - Use 'InsertD1shiftsLine1And2HaberParams' to pass parameters into this method.
        /// </summary>
        public void InsertD1shiftsLine1And2Haber()
        {
            #region Variable Declarations
            DXCell uIItemCell4 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIItemCell5 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXTextEdit uIRow7ColumnRosterCellEdit = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow7ColumnRosterCellEdit;
            DXButton uIGSSimpleButtonButton = this.UIItemWindow2.UIGSSimpleButtonButton;
            DXCell uIItemCell22 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell22;
            DXCell uIItemCell32 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell32;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXTextEdit uIRow7ColumnRosterCellEdit11 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow7ColumnRosterCellEdit11;
            DXCell uIItemCell41 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell41;
            DXCell uIItemCell51 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell51;
            DXTextEdit uIRow8ColumnRosterCellEdit = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow8ColumnRosterCellEdit;
            DXCell uIItemCell6 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXCell uIItemCell7 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell7;
            DXTextEdit uIRow8ColumnRosterCellEdit1 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow8ColumnRosterCellEdit1;
            #endregion

            // Move cell to cell
            uIItemCell5.EnsureClickable(new Point(13, 9));
            Mouse.StartDragging(uIItemCell4, new Point(88, 9));
            Mouse.StopDragging(uIItemCell5, new Point(13, 9));

            // Type 'd1{Tab}' in '[Row]7[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow7ColumnRosterCellEdit, this.InsertD1shiftsLine1And2HaberParams.UIRow7ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell32.EnsureClickable(new Point(19, 7));
            Mouse.StartDragging(uIItemCell22, new Point(164, 7));
            Mouse.StopDragging(uIItemCell32, new Point(19, 7));

            // Type '{Tab}' in '[Row]7[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow7ColumnRosterCellEdit11, this.InsertD1shiftsLine1And2HaberParams.UIRow7ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell51.EnsureClickable(new Point(20, 7));
            Mouse.StartDragging(uIItemCell41, new Point(159, 13));
            Mouse.StopDragging(uIItemCell51, new Point(20, 7));

            // Type '{Tab}' in '[Row]8[Column]RosterCell_14' text box
            Keyboard.SendKeys(uIRow8ColumnRosterCellEdit, this.InsertD1shiftsLine1And2HaberParams.UIRow7ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell7.EnsureClickable(new Point(14, 7));
            Mouse.StartDragging(uIItemCell6, new Point(106, 7));
            Mouse.StopDragging(uIItemCell7, new Point(14, 7));

            // Type '{Tab}' in '[Row]8[Column]RosterCell_21' text box
            Keyboard.SendKeys(uIRow8ColumnRosterCellEdit1, this.InsertD1shiftsLine1And2HaberParams.UIRow7ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }
        
        /// <summary>
        /// InsertD1shiftsLine2Rheborg - Use 'InsertD1shiftsLine2RheborgParams' to pass parameters into this method.
        /// </summary>
        public void InsertD4shiftsLine2Rheborg()
        {
            #region Variable Declarations
            var planTable = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXCell startCell = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell stopCell = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell12;
            DXTextEdit startCellEdit = planTable.UIRow7ColumnRosterCellEdit;
            DXButton uIJAButton = UIItemWindow2.UIGSSimpleButtonButton;
            #endregion

            stopCell.EnsureClickable(new Point(20, 25));
            Mouse.StartDragging(startCell, new Point(20, 25));
            Mouse.StopDragging(stopCell, new Point(20, 25));

            // Type 'D4' in 'gcRosterPlan' table
            Keyboard.SendKeys(startCellEdit, "D4" + this.InsertD1shiftsLine2RheborgParams.UIRow7ColumnRosterCellEditSendKeys);

            // Click '&Ja' button
            Mouse.Click(uIJAButton);
        }

        /// <summary>
        /// InsertD2SunOscarsson - Use 'InsertD2SunOscarssonParams' to pass parameters into this method.
        /// </summary>
        public void InsertD2SunOscarsson()
        {
            #region Variable Declarations
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            #endregion

            // Type '{Tab}' in '[Row]0[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, "D2" + this.InsertD2SunOscarssonParams.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertDHshiftWeek3Line3Gustavsson - Use 'InsertDHshiftWeek3Line3GustavssonParams' to pass parameters into this method.
        /// </summary>
        public void InsertDHshiftWeek3Line3Gustavsson()
        {
            #region Variable Declarations
            DXTextEdit uIRow3ColumnRosterCellEdit = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit;
            #endregion

            // Type '{Tab}' in '[Row]3[Column]RosterCell_19' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit, "DH" + this.InsertDHshiftWeek3Line3GustavssonParams.UIRow3ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertDshift3WeeksEndreGarbo - Use 'InsertDshift3WeeksEndreGarboParams' to pass parameters into this method.
        /// </summary>
        public void InsertDshift3WeeksEndreGarbo()
        {
            #region Variable Declarations
            DXCell uIItemCell3 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIItemCell12 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell12;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXTextEdit uIRow5ColumnRosterCellEdit = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow5ColumnRosterCellEdit;
            DXButton uIGSSimpleButtonButton = this.UIItemWindow2.UIGSSimpleButtonButton;
            DXCell uIItemCell21 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell21;
            DXCell uIItemCell31 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell31;
            DXTextEdit uIRow6ColumnRosterCellEdit = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow6ColumnRosterCellEdit;
            DXCell uIItemCell4 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIItemCell5 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXTextEdit uIRow5ColumnRosterCellEdit1 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow5ColumnRosterCellEdit1;
            DXCell uIItemCell6 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXCell uIItemCell7 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell7;
            DXTextEdit uIRow6ColumnRosterCellEdit1 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow6ColumnRosterCellEdit1;
            DXCell uIItemCell8 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            DXCell uIItemCell9 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell9;
            DXTextEdit uIRow5ColumnRosterCellEdit2 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow5ColumnRosterCellEdit2;
            DXCell uIItemCell10 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell10;
            DXCell uIItemCell111 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell111;
            DXTextEdit uIRow6ColumnRosterCellEdit2 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow6ColumnRosterCellEdit2;
            #endregion

            // Move cell to cell
            uIItemCell12.EnsureClickable(new Point(19, 12));
            Mouse.StartDragging(uIItemCell3, new Point(141, 12));
            Mouse.StopDragging(uIItemCell12, new Point(19, 12));

            // Wait for 1 seconds for user delay between actions; Type 'd' in 'gcRosterPlan' table
            Playback.Wait(500);
            Keyboard.SendKeys(uIGcRosterPlanTable, this.InsertDshift3WeeksEndreGarboParams.UIGcRosterPlanTableSendKeys, ModifierKeys.None);

            // Wait for 1 seconds for user delay between actions; Type '{Tab}' in '[Row]5[Column]RosterCell_0' text box
            Playback.Wait(500);
            Keyboard.SendKeys(uIRow5ColumnRosterCellEdit, this.InsertDshift3WeeksEndreGarboParams.UIRow5ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell31.EnsureClickable(new Point(18, 10));
            Mouse.StartDragging(uIItemCell21, new Point(143, 10));
            Mouse.StopDragging(uIItemCell31, new Point(18, 10));

            // Type 'd' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.InsertDshift3WeeksEndreGarboParams.UIGcRosterPlanTableSendKeys1, ModifierKeys.None);

            // Type '{Tab}' in '[Row]6[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow6ColumnRosterCellEdit, this.InsertDshift3WeeksEndreGarboParams.UIRow6ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell5.EnsureClickable(new Point(19, 10));
            Mouse.StartDragging(uIItemCell4, new Point(182, 16));
            Mouse.StopDragging(uIItemCell5, new Point(19, 10));

            // Type 'd' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.InsertDshift3WeeksEndreGarboParams.UIGcRosterPlanTableSendKeys2, ModifierKeys.None);

            // Type '{Tab}' in '[Row]5[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow5ColumnRosterCellEdit1, this.InsertDshift3WeeksEndreGarboParams.UIRow5ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell7.EnsureClickable(new Point(22, 9));
            Mouse.StartDragging(uIItemCell6, new Point(17, 6));
            Mouse.StopDragging(uIItemCell7, new Point(22, 9));

            // Type 'd' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.InsertDshift3WeeksEndreGarboParams.UIGcRosterPlanTableSendKeys3, ModifierKeys.None);

            // Type '{Tab}' in '[Row]6[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow6ColumnRosterCellEdit1, this.InsertDshift3WeeksEndreGarboParams.UIRow6ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell9.EnsureClickable(new Point(17, 11));
            Mouse.StartDragging(uIItemCell8, new Point(146, 12));
            Mouse.StopDragging(uIItemCell9, new Point(17, 11));

            // Type 'd' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.InsertDshift3WeeksEndreGarboParams.UIGcRosterPlanTableSendKeys4, ModifierKeys.None);

            // Type '{Tab}' in '[Row]5[Column]RosterCell_14' text box
            Keyboard.SendKeys(uIRow5ColumnRosterCellEdit2, this.InsertDshift3WeeksEndreGarboParams.UIRow5ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell111.EnsureClickable(new Point(18, 12));
            Mouse.StartDragging(uIItemCell10, new Point(166, 5));
            Mouse.StopDragging(uIItemCell111, new Point(18, 12));

            // Type 'd' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.InsertDshift3WeeksEndreGarboParams.UIGcRosterPlanTableSendKeys5, ModifierKeys.None);

            // Type '{Tab}' in '[Row]6[Column]RosterCell_14' text box
            Keyboard.SendKeys(uIRow6ColumnRosterCellEdit2, this.InsertDshift3WeeksEndreGarboParams.UIRow6ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }
        
        /// <summary>
        /// InsertDshiftMonEkland - Use 'InsertDshiftMonEklandParams' to pass parameters into this method.
        /// </summary>
        public void InsertDshiftMonEkland()
        {
            #region Variable Declarations
            DXTextEdit uIRow3ColumnRosterCellEdit = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit;
            #endregion
            // Type '{Tab}' in '[Row]3[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit, "D" + this.InsertDshiftMonEklandParams.UIRow3ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertDshiftWeek1And2Gustavsson - Use 'InsertDshiftWeek1And2GustavssonParams' to pass parameters into this method.
        /// </summary>
        public void InsertDshiftWeek1And2Gustavsson()
        {
            #region Variable Declarations
            DXTextEdit uIRow2ColumnRosterCellEdit = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit;
            DXCell uIItemCell1 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXTextEdit uIRow2ColumnRosterCellEdit1 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit1;
            #endregion

            
            // Type '{Tab}' in '[Row]2[Column]RosterCell_3' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit, "D1" + this.InsertDshiftWeek1And2GustavssonParams.UIRow2ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell1, new Point(24, 10));

            // Type '{Tab}' in '[Row]2[Column]RosterCell_11' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit1, "D1" + this.InsertDshiftWeek1And2GustavssonParams.UIRow2ColumnRosterCellEdit1SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertDshiftWeek1Line4Gustavsson - Use 'InsertDshiftWeek1Line4GustavssonParams' to pass parameters into this method.
        /// </summary>
        public void InsertDshiftWeek1Line4Gustavsson()
        {
            #region Variable Declarations
            DXTextEdit uIRow4ColumnRosterCellEdit = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit;
            #endregion

            // Type '{Tab}' in '[Row]4[Column]RosterCell_4' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit, "D1" + this.InsertDshiftWeek1Line4GustavssonParams.UIRow4ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertF3shiftLine2Rheborg - Use 'InsertF3shiftLine2RheborgParams' to pass parameters into this method.
        /// </summary>
        public void InsertF3shiftLine2Rheborg()
        {
            #region Variable Declarations
            DXTextEdit uIRow7ColumnRosterCellEdit4 = this.UIArbeidsplanKopiavFTTWindow12.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow7ColumnRosterCellEdit4;
            #endregion

            // Type '{Tab}' in '[Row]7[Column]RosterCell_4' text box
            Keyboard.SendKeys(uIRow7ColumnRosterCellEdit4, "F3" + this.InsertF3shiftLine2RheborgParams.UIRow7ColumnRosterCellEdit4SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertHJ2ThuVollter - Use 'InsertHJ2ThuVollterParams' to pass parameters into this method.
        /// </summary>
        public void InsertHJ2ThuVollter()
        {
            #region Variable Declarations
            DXCell uIItemCell1 = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXTextEdit uIRow1ColumnRosterCellEdit = this.UIArbeidsplanVaktklassWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell1, new Point(12, 6));

            // Type '{Tab}' in '[Row]1[Column]RosterCell_3' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit, "hj2" + this.InsertHJ2ThuVollterParams.UIRow1ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertNshiftMonEkland - Use 'InsertNshiftMonEklandParams' to pass parameters into this method.
        /// </summary>
        public void InsertNshiftMonEkland()
        {
            #region Variable Declarations
            DXTextEdit uIRow4ColumnRosterCellEdit = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit;
            #endregion

            // Type '{Tab}' in '[Row]4[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit, "N" + this.InsertNshiftMonEklandParams.UIRow4ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertNshiftMonWeek2Ekland - Use 'InsertNshiftMonWeek2EklandParams' to pass parameters into this method.
        /// </summary>
        public void InsertNshiftMonWeek2Ekland()
        {
            #region Variable Declarations
            DXTextEdit uIRow4ColumnRosterCellEdit1 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit1;
            #endregion

            // Type '{Tab}' in '[Row]4[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit1, "n" + this.InsertNshiftMonWeek2EklandParams.UIRow4ColumnRosterCellEdit1SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertNshiftMonWeek3Ekland - Use 'InsertNshiftMonWeek3EklandParams' to pass parameters into this method.
        /// </summary>
        public void InsertNshiftMonWeek3Ekland()
        {
            #region Variable Declarations
            DXTextEdit uIRow4ColumnRosterCellEdit11 = this.UIArbeidsplanKopiavFTTWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit11;
            #endregion

            // Type '{Tab}' in '[Row]4[Column]RosterCell_14' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit11, "n" + this.InsertNshiftMonWeek3EklandParams.UIRow4ColumnRosterCellEdit11SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertNshiftMonWeek3Stormare - Use 'InsertNshiftMonWeek3StormareParams' to pass parameters into this method.
        /// </summary>
        public void InsertNshiftMonWeek3Stormare()
        {
            #region Variable Declarations
            DXTextEdit uIRow1ColumnRosterCellEdit = this.UIArbeidsplanFTTKalendWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit;
            #endregion

            // Type '{Tab}' in '[Row]1[Column]RosterCell_14' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit, "n" + this.InsertNshiftMonWeek3StormareParams.UIRow1ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertShiftsWeek2AndshiftWeek3_C3_S19 - Use 'InsertShiftsWeek2AndshiftWeek3_C3_S19Params' to pass parameters into this method.
        /// </summary>
        public void InsertShiftsWeek2AndshiftWeek3_C3_S19()
        {
            #region Variable Declarations
            DXTextEdit uIRow1ColumnRosterCellEdit = this.UIArbeidsplanØnskeplanWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit;
            DXCell uIItemCell1 = this.UIArbeidsplanØnskeplanWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXTextEdit uIRow1ColumnRosterCellEdit1 = this.UIArbeidsplanØnskeplanWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit1;
            DXCell uIItemCell2 = this.UIArbeidsplanØnskeplanWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            DXTextEdit uIRow1ColumnRosterCellEdit2 = this.UIArbeidsplanØnskeplanWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit2;
            #endregion
            // Type '{Tab}' in '[Row]1[Column]RosterCell_10' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit, "f3" + this.InsertShiftsWeek2AndshiftWeek3_C3_S19Params.UIRow1ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell1, new Point(14, 12));

            // Type '{Tab}' in '[Row]1[Column]RosterCell_11' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit1, "f3" + this.InsertShiftsWeek2AndshiftWeek3_C3_S19Params.UIRow1ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell2, new Point(17, 9));

            // Type '{Tab}' in '[Row]1[Column]RosterCell_20' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit2, "f3" + this.InsertShiftsWeek2AndshiftWeek3_C3_S19Params.UIRow1ColumnRosterCellEdit2SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// OpenAdamsMasterDetailsPreviousTransfers
        /// </summary>
        public void OpenAdamsMasterDetailsPreviousTransfers()
        {
            #region Variable Declarations
            DXButton uIValgtButton = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton;
            DXTestControl uITidligereoverføringeTabPage = this.UIOverførtilleggWindow.UIGcExportsTable.UITidligereoverføringeTabPage;
            #endregion

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton, new Point(3, 4));

            // Click 'Tidligere overføringer' tab
            Mouse.Click(uITidligereoverføringeTabPage, new Point(61, 8));
        }
        
        /// <summary>
        /// OpenMaxMasterDetails
        /// </summary>
        public void OpenMaxMasterDetails()
        {
            #region Variable Declarations
            DXButton uIValgtButton = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton;
            #endregion

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton, new Point(4, 5));
        }
        
        /// <summary>
        /// OpenStormareMasterDetailsPreviousTransfers
        /// </summary>
        public void OpenStormareMasterDetailsPreviousTransfers()
        {
            #region Variable Declarations
            DXButton uIValgtButton11 = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton11;
            DXTestControl uITidligereoverføringeTabPage = this.UIOverførtilleggWindow.UIGcExportsTable.UITidligereoverføringeTabPage;
            #endregion

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton11, new Point(3, 4));

            // Click 'Tidligere overføringer' tab
            Mouse.Click(uITidligereoverføringeTabPage, new Point(53, 9));
        }
        
        /// <summary>
        /// RightClickRolfLine1
        /// </summary>
        public void RightClickRolfLine1()
        {
            UIMapVS2017.RightClickRolfLine1();
        }
        
        /// <summary>
        /// RightClickRolfLine2
        /// </summary>
        public void RightClickRolfLine2()
        {
            UIMapVS2017.RightClickRolfLine2();
        }
        
        /// <summary>
        /// SelectFTTTab
        /// </summary>
        public void SelectFTTTab()
        {
            UICommon.UIMapVS2017.SelectRosterplanSubTab(CommonUIFunctions.UIMapVS2017Classes.UIMapVS2017.RosterplanTabs.Fastetillegg);
        }
        
        /// <summary>
        /// SelectMainAdminTabPOuser
        /// </summary>
        public void SelectMainAdminTabPOuser()
        {
            #region Variable Declarations
            WinClient uIGatver66041952POAvd5Client = this.UIGatver66041952POAvd5Window2.UIItemWindow.UIGatver66041952POAvd5Client;
            #endregion

            // Click 'Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tille...' client
            Mouse.Click(uIGatver66041952POAvd5Client, new Point(510, 15));
        }
        
        /// <summary>
        /// SelectMainDepTabPOuser
        /// </summary>
        public void SelectMainDepTabPOuser()
        {
            #region Variable Declarations
            WinClient uIGatver66041952POAvd5Client = this.UIGatver66041952POAvd5Window1.UIItemWindow.UIGatver66041952POAvd5Client;
            #endregion

            // Click 'Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tille...' client
            Mouse.Click(uIGatver66041952POAvd5Client, new Point(220, 15));
        }
        
        /// <summary>
        /// SelectMainEmpTabPOuser
        /// </summary>
        public void SelectMainEmpTabPOuser()
        {
            #region Variable Declarations
            WinClient uIGatver66041952POAvd5Client = this.UIGatver66041952POAvd5Window.UIItemWindow.UIGatver66041952POAvd5Client;
            #endregion

            // Click 'Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tille...' client
            Mouse.Click(uIGatver66041952POAvd5Client, new Point(161, 15));
        }
        
        /// <summary>
        /// SelectMainRosterplanTabPOuser
        /// </summary>
        public void SelectMainRosterplanTabPOuser()
        {
            #region Variable Declarations
            WinClient uIGatver66041952POAvd5Client = this.UIGatver66041952POAvd5Window.UIItemWindow.UIGatver66041952POAvd5Client;
            #endregion

            // Click 'Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tille...' client
            Mouse.Click(uIGatver66041952POAvd5Client, new Point(98, 14));
        }
        
        /// <summary>
        /// SelectMainShiftbookTabPOuser
        /// </summary>
        public void SelectMainShiftbookTabPOuser()
        {
            #region Variable Declarations
            WinClient uIGatver66041952POAvd5Client = this.UIGatver66041952POAvd5Window.UIItemWindow.UIGatver66041952POAvd5Client;
            #endregion

            // Click 'Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tille...' client
            Mouse.Click(uIGatver66041952POAvd5Client, new Point(27, 12));
        }
        
        /// <summary>
        /// SelectShiftCodeD2
        /// </summary>
        public void SelectShiftCodeD2()
        {
            #region Variable Declarations
            DXCell uID2Cell = this.UIGatver66041952POAvd5Window3.UIGcShiftcodesTable.UID2Cell;
            DXButton uIEndrevaktkodeButton = this.UIGatver66041952POAvd5Window3.UIPaToolbarClient.UIEndrevaktkodeButton;
            DXTestControl uIXtraTabControlHeaderTabPage = this.UIEndrevaktkodeD2Window.UIPcContentClient.UIPaNormalShiftcodePanClient.UITcExtraTabsTabList.UIXtraTabControlHeaderTabPage;
            #endregion

            // Click 'D2' cell
            Mouse.Click(uID2Cell, new Point(27, 7));

            // Click 'Endre vaktkode' button
            Mouse.Click(uIEndrevaktkodeButton, new Point(1, 1));

            // Click 'XtraTabControlHeader' tab
            Mouse.Click(uIXtraTabControlHeaderTabPage, new Point(36, 8));
        }
        
        /// <summary>
        /// SelectShowAllEmpsInExportFTTWindow - Use 'SelectShowAllEmpsInExportFTTWindowParams' to pass parameters into this method.
        /// </summary>
        public void SelectShowAllEmpsInExportFTTWindow()
        {
            #region Variable Declarations
            DXComboBox uICbeFilterComboBox = this.UIOverførtilleggWindow.UICbeFilterComboBox;
            #endregion

            // Select 'Gatsoft.Gat.RosterPlan.FixedPayment.UI.ViewModels.NoFilter' in 'cbeFilter' combo box
            //ValueTypeName
            uICbeFilterComboBox.ValueTypeName = this.SelectShowAllEmpsInExportFTTWindowParams.UICbeFilterComboBoxValueTypeName;

            // Select 'Alle ansatte med tillegg [SelectionStart]0' in 'cbeFilter' combo box
            //ValueAsString
            uICbeFilterComboBox.ValueAsString = this.SelectShowAllEmpsInExportFTTWindowParams.UICbeFilterComboBoxValueAsString;
        }
        
        /// <summary>
        /// SelectSubTabRosterplans
        /// </summary>
        public void SelectSubTabRosterplans()
        {
            #region Variable Declarations
            DXTestControl uIXtraTabControlHeaderTabPage = this.UIGatver66041952ASCLAvWindow1.UIPcMainPanelClient.UITcPanListsTabList.UIXtraTabControlHeaderTabPage;
            #endregion

            // Click 'XtraTabControlHeader' tab
            Mouse.Click(uIXtraTabControlHeaderTabPage, new Point(34, 10));
        }
        
        /// <summary>
        /// SelectSubTabShiftCodes
        /// </summary>
        public void SelectSubTabShiftCodes()
        {
            #region Variable Declarations
            WinClient uIAvdelingClient = this.UIGatver66041952POAvd5Window3.UIItemWindow.UIAvdelingClient;
            #endregion

            // Click 'Avdeling' client
            Mouse.Click(uIAvdelingClient, new Point(222, 873));
        }
        
        /// <summary>
        /// SelectWeek1Gustavsson
        /// </summary>
        public void SelectWeek1Gustavsson()
        {
            #region Variable Declarations
            DXCell uIKK1Cell1 = this.UIArbeidsplanKopiavFTTWindow11.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK1Cell1;
            DXCell uIKKHCell = this.UIArbeidsplanKopiavFTTWindow11.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKKHCell;
            #endregion

            // Move 'KK1' cell to 'KKH' cell
            uIKKHCell.EnsureClickable(new Point(18, 7));
            Mouse.StartDragging(uIKK1Cell1, new Point(14, 9));
            Mouse.StopDragging(uIKKHCell, new Point(18, 7));

            // Right-Click 'KKH' cell
            Mouse.Click(uIKKHCell, MouseButtons.Right, ModifierKeys.None, new Point(18, 7));
        }
        
        /// <summary>
        /// SelectWeek1Stellan
        /// </summary>
        public void SelectWeek1Stellan()
        {
            #region Variable Declarations
            DXCell uIACell1 = this.UIArbeidsplanFTTJanuarWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell1;
            DXCell uIF1Cell = this.UIArbeidsplanFTTJanuarWindow1.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell;
            #endregion

            // Move 'A' cell to 'F1' cell
            uIF1Cell.EnsureClickable(new Point(20, 8));
            Mouse.StartDragging(uIACell1, new Point(71, 11));
            Mouse.StopDragging(uIF1Cell, new Point(20, 8));

            // Right-Click 'F1' cell
            Mouse.Click(uIF1Cell, MouseButtons.Right, ModifierKeys.None, new Point(20, 8));
        }
        
        /// <summary>
        /// SetBergman25PersentLineInactive
        /// </summary>
        public void SetBergman25PersentLineInactive()
        {
            #region Variable Declarations
            DXCell uIACell = this.UIArbeidsplanKopiavFTTWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIACell;
            DXMenuBaseButtonItem uIBarButtonItemLink8MenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIBarButtonItemLink8MenuBaseButtonItem;
            #endregion

            // Right-Click 'A' cell
            Mouse.Click(uIACell, MouseButtons.Right, ModifierKeys.None, new Point(23, 10));

            // Click 'BarButtonItemLink[8]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink8MenuBaseButtonItem, new Point(62, 11));
        }
        
        /// <summary>
        /// SetLine2RheborgInactive
        /// </summary>
        public void SetLine2RheborgInactive()
        {
            UIMapVS2017.SetLine2RheborgInactive();
        }
        
        /// <summary>
        /// SetWhishplanEaster2016ToPhase1
        /// </summary>
        public void SetWhishplanEaster2016ToPhase1()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIEndretilfase1RibbonBaseButtonItem = this.UIGatver66041952ASCLAvWindow.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIEndretilfase1RibbonBaseButtonItem;
            #endregion

            // Click 'Endre til fase 1' RibbonBaseButtonItem
            Mouse.Click(uIEndretilfase1RibbonBaseButtonItem, new Point(36, 8));
            UICommon.UIMapVS2017.ClickYesInChangeWishplanPhaseConfirmationWindow();
        }
        
        /// <summary>
        /// SetWhishplanEaster2016ToPhase2
        /// </summary>
        public void SetWhishplanEaster2016ToPhase2()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIEndretilfase2RibbonBaseButtonItem = this.UIGatver66041952ASCLAvWindow1.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIEndretilfase2RibbonBaseButtonItem;
            #endregion

            // Click 'Endre til fase 2' RibbonBaseButtonItem
            Mouse.Click(uIEndretilfase2RibbonBaseButtonItem, new Point(36, 10));
            UICommon.UIMapVS2017.ClickYesInChangeWishplanPhaseConfirmationWindow();
        }
        
        /// <summary>
        /// SetWhishplanEaster2016ToPhase3
        /// </summary>
        public void SetWhishplanEaster2016ToPhase3()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIEndretilfase3RibbonBaseButtonItem = this.UIGatver66041952ASCLAvWindow1.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIEndretilfase3RibbonBaseButtonItem;
            #endregion

            // Click 'Endre til fase 3' RibbonBaseButtonItem
            Mouse.Click(uIEndretilfase3RibbonBaseButtonItem, new Point(35, 9));
            UICommon.UIMapVS2017.ClickYesInChangeWishplanPhaseConfirmationWindow();
        }
        
        /// <summary>
        /// ShowFTTAsAveragePrMnd - Use 'ShowFTTAsAveragePrMndParams' to pass parameters into this method.
        /// </summary>
        public void ShowFTTAsAveragePrMnd()
        {
            UIMapVS2017.ShowFTTAsAveragePrMndCalendarPlan();
        }
        
        /// <summary>
        /// ShowFTTAsTotalCalendarPlan - Use 'ShowFTTAsTotalCalendarPlanParams' to pass parameters into this method.
        /// </summary>
        public void ShowFTTAsTotalCalendarPlan()
        {
            UIMapVS2017.ShowFTTAsTotalCalendarPlan();
        }
        
        /// <summary>
        /// ShowMasterDetailsEndre_Garbo
        /// </summary>
        public void ShowMasterDetailsEndre_Garbo()
        {
            #region Variable Declarations
            DXButton uIValgtButton = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton;
            DXButton uIValgtButton1 = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton1;
            #endregion

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton, new Point(4, 4));

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton1, new Point(2, 3));
        }
        
        /// <summary>
        /// ShowMasterDetailsNyquist
        /// </summary>
        public void ShowMasterDetailsNyquist()
        {
            #region Variable Declarations
            DXButton uIValgtButton = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton;
            #endregion

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton, new Point(3, 5));
        }
        
        /// <summary>
        /// ShowMasterDetailsStellan
        /// </summary>
        public void ShowMasterDetailsStellan()
        {
            #region Variable Declarations
            DXButton uIValgtButton = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton;
            #endregion

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton, new Point(3, 5));
        }
        
        /// <summary>
        /// ShowMasterDetailsStormare
        /// </summary>
        public void ShowMasterDetailsStormare()
        {
            #region Variable Declarations
            DXButton uIValgtButton = this.UIOverførtilleggWindow.UIGcExportsTable.UIValgtButton;
            #endregion

            // Click 'Valgt' button
            Mouse.Click(uIValgtButton, new Point(4, 3));
        }
        
        /// <summary>
        /// ShowStellanPreviousTransfers
        /// </summary>
        public void ShowStellanPreviousTransfers()
        {
            #region Variable Declarations
            DXTestControl uITidligereoverføringeTabPage = this.UIOverførtilleggWindow.UIGcExportsTable.UITidligereoverføringeTabPage;
            #endregion

            // Click 'Tidligere overføringer' tab
            Mouse.Click(uITidligereoverføringeTabPage, new Point(57, 7));
        }
        
        /// <summary>
        /// UncheckStormareErrorLine
        /// </summary>
        public void UncheckStormareErrorLine()
        {
            #region Variable Declarations
            DXCell uIIkkevalgtCell2 = this.UIOverførtilleggWindow.UIGcExportsTable.UIIkkevalgtCell2;
            #endregion

            // Click 'Ikke valgt' cell
            Mouse.Click(uIIkkevalgtCell2, new Point(44, 8));
        }
        
        /// <summary>
        /// UnlockAndEditShiftOnLineMax
        /// </summary>
        public void UnlockAndEditShiftOnLineMax()
        {
            UIMapVS2017.UnlockAndEditShiftOnLineMax();
        }
        
        #region Properties
        public virtual AddPeterHaberParams AddPeterHaberParams
        {
            get
            {
                if ((this.mAddPeterHaberParams == null))
                {
                    this.mAddPeterHaberParams = new AddPeterHaberParams();
                }
                return this.mAddPeterHaberParams;
            }
        }
        
        public virtual ChangeDshiftMonEklandToNParams ChangeDshiftMonEklandToNParams
        {
            get
            {
                if ((this.mChangeDshiftMonEklandToNParams == null))
                {
                    this.mChangeDshiftMonEklandToNParams = new ChangeDshiftMonEklandToNParams();
                }
                return this.mChangeDshiftMonEklandToNParams;
            }
        }
        
        public virtual CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues
        {
            get
            {
                if ((this.mCheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues == null))
                {
                    this.mCheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues = new CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues();
                }
                return this.mCheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues;
            }
        }
        
        public virtual CheckButtonEnabled_C3_S3ExpectedValues CheckButtonEnabled_C3_S3ExpectedValues
        {
            get
            {
                if ((this.mCheckButtonEnabled_C3_S3ExpectedValues == null))
                {
                    this.mCheckButtonEnabled_C3_S3ExpectedValues = new CheckButtonEnabled_C3_S3ExpectedValues();
                }
                return this.mCheckButtonEnabled_C3_S3ExpectedValues;
            }
        }
        
        public virtual CheckCalculationEkland_C1_S8ExpectedValues CheckCalculationEkland_C1_S8ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculationEkland_C1_S8ExpectedValues == null))
                {
                    this.mCheckCalculationEkland_C1_S8ExpectedValues = new CheckCalculationEkland_C1_S8ExpectedValues();
                }
                return this.mCheckCalculationEkland_C1_S8ExpectedValues;
            }
        }
        
        public virtual CheckCalculationEkland_C1_S9ExpectedValues CheckCalculationEkland_C1_S9ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculationEkland_C1_S9ExpectedValues == null))
                {
                    this.mCheckCalculationEkland_C1_S9ExpectedValues = new CheckCalculationEkland_C1_S9ExpectedValues();
                }
                return this.mCheckCalculationEkland_C1_S9ExpectedValues;
            }
        }
        
        public virtual CheckCalculationEklandTwoLines_C1_S12ExpectedValues CheckCalculationEklandTwoLines_C1_S12ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculationEklandTwoLines_C1_S12ExpectedValues == null))
                {
                    this.mCheckCalculationEklandTwoLines_C1_S12ExpectedValues = new CheckCalculationEklandTwoLines_C1_S12ExpectedValues();
                }
                return this.mCheckCalculationEklandTwoLines_C1_S12ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C1_S19ExpectedValues CheckCalculations_C1_S19ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C1_S19ExpectedValues == null))
                {
                    this.mCheckCalculations_C1_S19ExpectedValues = new CheckCalculations_C1_S19ExpectedValues();
                }
                return this.mCheckCalculations_C1_S19ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C2_S2ExpectedValues CheckCalculations_C2_S2ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C2_S2ExpectedValues == null))
                {
                    this.mCheckCalculations_C2_S2ExpectedValues = new CheckCalculations_C2_S2ExpectedValues();
                }
                return this.mCheckCalculations_C2_S2ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C2_S3ExpectedValues CheckCalculations_C2_S3ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C2_S3ExpectedValues == null))
                {
                    this.mCheckCalculations_C2_S3ExpectedValues = new CheckCalculations_C2_S3ExpectedValues();
                }
                return this.mCheckCalculations_C2_S3ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C2_S5ExpectedValues CheckCalculations_C2_S5ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C2_S5ExpectedValues == null))
                {
                    this.mCheckCalculations_C2_S5ExpectedValues = new CheckCalculations_C2_S5ExpectedValues();
                }
                return this.mCheckCalculations_C2_S5ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C3_S11ExpectedValues CheckCalculations_C3_S11ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C3_S11ExpectedValues == null))
                {
                    this.mCheckCalculations_C3_S11ExpectedValues = new CheckCalculations_C3_S11ExpectedValues();
                }
                return this.mCheckCalculations_C3_S11ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C3_S15ExpectedValues CheckCalculations_C3_S15ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C3_S15ExpectedValues == null))
                {
                    this.mCheckCalculations_C3_S15ExpectedValues = new CheckCalculations_C3_S15ExpectedValues();
                }
                return this.mCheckCalculations_C3_S15ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C3_S16ExpectedValues CheckCalculations_C3_S16ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C3_S16ExpectedValues == null))
                {
                    this.mCheckCalculations_C3_S16ExpectedValues = new CheckCalculations_C3_S16ExpectedValues();
                }
                return this.mCheckCalculations_C3_S16ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C3_S3ExpectedValues CheckCalculations_C3_S3ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C3_S3ExpectedValues == null))
                {
                    this.mCheckCalculations_C3_S3ExpectedValues = new CheckCalculations_C3_S3ExpectedValues();
                }
                return this.mCheckCalculations_C3_S3ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S10ExpectedValues CheckCalculations_C4_S10ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S10ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S10ExpectedValues = new CheckCalculations_C4_S10ExpectedValues();
                }
                return this.mCheckCalculations_C4_S10ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S13ExpectedValues CheckCalculations_C4_S13ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S13ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S13ExpectedValues = new CheckCalculations_C4_S13ExpectedValues();
                }
                return this.mCheckCalculations_C4_S13ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S15ExpectedValues CheckCalculations_C4_S15ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S15ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S15ExpectedValues = new CheckCalculations_C4_S15ExpectedValues();
                }
                return this.mCheckCalculations_C4_S15ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S19ExpectedValues CheckCalculations_C4_S19ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S19ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S19ExpectedValues = new CheckCalculations_C4_S19ExpectedValues();
                }
                return this.mCheckCalculations_C4_S19ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S20ExpectedValues CheckCalculations_C4_S20ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S20ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S20ExpectedValues = new CheckCalculations_C4_S20ExpectedValues();
                }
                return this.mCheckCalculations_C4_S20ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S21ExpectedValues CheckCalculations_C4_S21ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S21ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S21ExpectedValues = new CheckCalculations_C4_S21ExpectedValues();
                }
                return this.mCheckCalculations_C4_S21ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S25ExpectedValues CheckCalculations_C4_S25ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S25ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S25ExpectedValues = new CheckCalculations_C4_S25ExpectedValues();
                }
                return this.mCheckCalculations_C4_S25ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S28ExpectedValues CheckCalculations_C4_S28ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S28ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S28ExpectedValues = new CheckCalculations_C4_S28ExpectedValues();
                }
                return this.mCheckCalculations_C4_S28ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S29ExpectedValues CheckCalculations_C4_S29ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S29ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S29ExpectedValues = new CheckCalculations_C4_S29ExpectedValues();
                }
                return this.mCheckCalculations_C4_S29ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S3ExpectedValues CheckCalculations_C4_S3ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S3ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S3ExpectedValues = new CheckCalculations_C4_S3ExpectedValues();
                }
                return this.mCheckCalculations_C4_S3ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S30ExpectedValues CheckCalculations_C4_S30ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S30ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S30ExpectedValues = new CheckCalculations_C4_S30ExpectedValues();
                }
                return this.mCheckCalculations_C4_S30ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C4_S5ExpectedValues CheckCalculations_C4_S5ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C4_S5ExpectedValues == null))
                {
                    this.mCheckCalculations_C4_S5ExpectedValues = new CheckCalculations_C4_S5ExpectedValues();
                }
                return this.mCheckCalculations_C4_S5ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C5_S2ExpectedValues CheckCalculations_C5_S2ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C5_S2ExpectedValues == null))
                {
                    this.mCheckCalculations_C5_S2ExpectedValues = new CheckCalculations_C5_S2ExpectedValues();
                }
                return this.mCheckCalculations_C5_S2ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C5_S4ExpectedValues CheckCalculations_C5_S4ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C5_S4ExpectedValues == null))
                {
                    this.mCheckCalculations_C5_S4ExpectedValues = new CheckCalculations_C5_S4ExpectedValues();
                }
                return this.mCheckCalculations_C5_S4ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C5_S5ExpectedValues CheckCalculations_C5_S5ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C5_S5ExpectedValues == null))
                {
                    this.mCheckCalculations_C5_S5ExpectedValues = new CheckCalculations_C5_S5ExpectedValues();
                }
                return this.mCheckCalculations_C5_S5ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C5_S6ExpectedValues CheckCalculations_C5_S6ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C5_S6ExpectedValues == null))
                {
                    this.mCheckCalculations_C5_S6ExpectedValues = new CheckCalculations_C5_S6ExpectedValues();
                }
                return this.mCheckCalculations_C5_S6ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C6_S13ExpectedValues CheckCalculations_C6_S13ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C6_S13ExpectedValues == null))
                {
                    this.mCheckCalculations_C6_S13ExpectedValues = new CheckCalculations_C6_S13ExpectedValues();
                }
                return this.mCheckCalculations_C6_S13ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C6_S17ExpectedValues CheckCalculations_C6_S17ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C6_S17ExpectedValues == null))
                {
                    this.mCheckCalculations_C6_S17ExpectedValues = new CheckCalculations_C6_S17ExpectedValues();
                }
                return this.mCheckCalculations_C6_S17ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C6_S21ExpectedValues CheckCalculations_C6_S21ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C6_S21ExpectedValues == null))
                {
                    this.mCheckCalculations_C6_S21ExpectedValues = new CheckCalculations_C6_S21ExpectedValues();
                }
                return this.mCheckCalculations_C6_S21ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C6_S26ExpectedValues CheckCalculations_C6_S26ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C6_S26ExpectedValues == null))
                {
                    this.mCheckCalculations_C6_S26ExpectedValues = new CheckCalculations_C6_S26ExpectedValues();
                }
                return this.mCheckCalculations_C6_S26ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C6_S30ExpectedValues CheckCalculations_C6_S30ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C6_S30ExpectedValues == null))
                {
                    this.mCheckCalculations_C6_S30ExpectedValues = new CheckCalculations_C6_S30ExpectedValues();
                }
                return this.mCheckCalculations_C6_S30ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C6_S33ExpectedValues CheckCalculations_C6_S33ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C6_S33ExpectedValues == null))
                {
                    this.mCheckCalculations_C6_S33ExpectedValues = new CheckCalculations_C6_S33ExpectedValues();
                }
                return this.mCheckCalculations_C6_S33ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C6_S5ExpectedValues CheckCalculations_C6_S5ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C6_S5ExpectedValues == null))
                {
                    this.mCheckCalculations_C6_S5ExpectedValues = new CheckCalculations_C6_S5ExpectedValues();
                }
                return this.mCheckCalculations_C6_S5ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C6_S7ExpectedValues CheckCalculations_C6_S7ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C6_S7ExpectedValues == null))
                {
                    this.mCheckCalculations_C6_S7ExpectedValues = new CheckCalculations_C6_S7ExpectedValues();
                }
                return this.mCheckCalculations_C6_S7ExpectedValues;
            }
        }
        
        public virtual CheckCalculations_C6_S9ExpectedValues CheckCalculations_C6_S9ExpectedValues
        {
            get
            {
                if ((this.mCheckCalculations_C6_S9ExpectedValues == null))
                {
                    this.mCheckCalculations_C6_S9ExpectedValues = new CheckCalculations_C6_S9ExpectedValues();
                }
                return this.mCheckCalculations_C6_S9ExpectedValues;
            }
        }
        
        public virtual CheckCalulateFTTButtonDisabledExpectedValues CheckCalulateFTTButtonDisabledExpectedValues
        {
            get
            {
                if ((this.mCheckCalulateFTTButtonDisabledExpectedValues == null))
                {
                    this.mCheckCalulateFTTButtonDisabledExpectedValues = new CheckCalulateFTTButtonDisabledExpectedValues();
                }
                return this.mCheckCalulateFTTButtonDisabledExpectedValues;
            }
        }
        
        public virtual CheckEditShiftClassesDisabled_C6_S2ExpectedValues CheckEditShiftClassesDisabled_C6_S2ExpectedValues
        {
            get
            {
                if ((this.mCheckEditShiftClassesDisabled_C6_S2ExpectedValues == null))
                {
                    this.mCheckEditShiftClassesDisabled_C6_S2ExpectedValues = new CheckEditShiftClassesDisabled_C6_S2ExpectedValues();
                }
                return this.mCheckEditShiftClassesDisabled_C6_S2ExpectedValues;
            }
        }
        
        public virtual CheckFTT1IsReadyInExportLogExpectedValues CheckFTT1IsReadyInExportLogExpectedValues
        {
            get
            {
                if ((this.mCheckFTT1IsReadyInExportLogExpectedValues == null))
                {
                    this.mCheckFTT1IsReadyInExportLogExpectedValues = new CheckFTT1IsReadyInExportLogExpectedValues();
                }
                return this.mCheckFTT1IsReadyInExportLogExpectedValues;
            }
        }
        
        public virtual CheckFTTcode400_C1_S5ExpectedValues CheckFTTcode400_C1_S5ExpectedValues
        {
            get
            {
                if ((this.mCheckFTTcode400_C1_S5ExpectedValues == null))
                {
                    this.mCheckFTTcode400_C1_S5ExpectedValues = new CheckFTTcode400_C1_S5ExpectedValues();
                }
                return this.mCheckFTTcode400_C1_S5ExpectedValues;
            }
        }
        
        public virtual CheckFTTcode410_C1_S5ExpectedValues CheckFTTcode410_C1_S5ExpectedValues
        {
            get
            {
                if ((this.mCheckFTTcode410_C1_S5ExpectedValues == null))
                {
                    this.mCheckFTTcode410_C1_S5ExpectedValues = new CheckFTTcode410_C1_S5ExpectedValues();
                }
                return this.mCheckFTTcode410_C1_S5ExpectedValues;
            }
        }
        
        public virtual CheckFTTEmployeesToTransfereExpectedValues CheckFTTEmployeesToTransfereExpectedValues
        {
            get
            {
                if ((this.mCheckFTTEmployeesToTransfereExpectedValues == null))
                {
                    this.mCheckFTTEmployeesToTransfereExpectedValues = new CheckFTTEmployeesToTransfereExpectedValues();
                }
                return this.mCheckFTTEmployeesToTransfereExpectedValues;
            }
        }
        
        public virtual CheckFTTEmployeesToTransfere_C2_S24ExpectedValues CheckFTTEmployeesToTransfere_C2_S24ExpectedValues
        {
            get
            {
                if ((this.mCheckFTTEmployeesToTransfere_C2_S24ExpectedValues == null))
                {
                    this.mCheckFTTEmployeesToTransfere_C2_S24ExpectedValues = new CheckFTTEmployeesToTransfere_C2_S24ExpectedValues();
                }
                return this.mCheckFTTEmployeesToTransfere_C2_S24ExpectedValues;
            }
        }
        
        public virtual CheckFTTEmployeesToTransfere_C6_S23ExpectedValues CheckFTTEmployeesToTransfere_C6_S23ExpectedValues
        {
            get
            {
                if ((this.mCheckFTTEmployeesToTransfere_C6_S23ExpectedValues == null))
                {
                    this.mCheckFTTEmployeesToTransfere_C6_S23ExpectedValues = new CheckFTTEmployeesToTransfere_C6_S23ExpectedValues();
                }
                return this.mCheckFTTEmployeesToTransfere_C6_S23ExpectedValues;
            }
        }
        
        public virtual CheckFTTEmployeesToTransfere_C6_S35ExpectedValues CheckFTTEmployeesToTransfere_C6_S35ExpectedValues
        {
            get
            {
                if ((this.mCheckFTTEmployeesToTransfere_C6_S35ExpectedValues == null))
                {
                    this.mCheckFTTEmployeesToTransfere_C6_S35ExpectedValues = new CheckFTTEmployeesToTransfere_C6_S35ExpectedValues();
                }
                return this.mCheckFTTEmployeesToTransfere_C6_S35ExpectedValues;
            }
        }
        
        public virtual CheckFTTEmployeesToTransfereValuesExpectedValues CheckFTTEmployeesToTransfereValuesExpectedValues
        {
            get
            {
                if ((this.mCheckFTTEmployeesToTransfereValuesExpectedValues == null))
                {
                    this.mCheckFTTEmployeesToTransfereValuesExpectedValues = new CheckFTTEmployeesToTransfereValuesExpectedValues();
                }
                return this.mCheckFTTEmployeesToTransfereValuesExpectedValues;
            }
        }
        
        public virtual CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues
        {
            get
            {
                if ((this.mCheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues == null))
                {
                    this.mCheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues = new CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues();
                }
                return this.mCheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues;
            }
        }
        
        public virtual CheckFTThasEmptyListExpectedValues CheckFTThasEmptyListExpectedValues
        {
            get
            {
                if ((this.mCheckFTThasEmptyListExpectedValues == null))
                {
                    this.mCheckFTThasEmptyListExpectedValues = new CheckFTThasEmptyListExpectedValues();
                }
                return this.mCheckFTThasEmptyListExpectedValues;
            }
        }
        
        public virtual CheckFTTPeriod_C1_S5ExpectedValues CheckFTTPeriod_C1_S5ExpectedValues
        {
            get
            {
                if ((this.mCheckFTTPeriod_C1_S5ExpectedValues == null))
                {
                    this.mCheckFTTPeriod_C1_S5ExpectedValues = new CheckFTTPeriod_C1_S5ExpectedValues();
                }
                return this.mCheckFTTPeriod_C1_S5ExpectedValues;
            }
        }
        
        public virtual CheckFTTransfereButtonIsDisabledExpectedValues CheckFTTransfereButtonIsDisabledExpectedValues
        {
            get
            {
                if ((this.mCheckFTTransfereButtonIsDisabledExpectedValues == null))
                {
                    this.mCheckFTTransfereButtonIsDisabledExpectedValues = new CheckFTTransfereButtonIsDisabledExpectedValues();
                }
                return this.mCheckFTTransfereButtonIsDisabledExpectedValues;
            }
        }
        
        public virtual CheckFTTransfereButtonIsEnabledExpectedValues CheckFTTransfereButtonIsEnabledExpectedValues
        {
            get
            {
                if ((this.mCheckFTTransfereButtonIsEnabledExpectedValues == null))
                {
                    this.mCheckFTTransfereButtonIsEnabledExpectedValues = new CheckFTTransfereButtonIsEnabledExpectedValues();
                }
                return this.mCheckFTTransfereButtonIsEnabledExpectedValues;
            }
        }
        
        public virtual CheckFTTransfereStormareHasOneLineExpectedValues CheckFTTransfereStormareHasOneLineExpectedValues
        {
            get
            {
                if ((this.mCheckFTTransfereStormareHasOneLineExpectedValues == null))
                {
                    this.mCheckFTTransfereStormareHasOneLineExpectedValues = new CheckFTTransfereStormareHasOneLineExpectedValues();
                }
                return this.mCheckFTTransfereStormareHasOneLineExpectedValues;
            }
        }
        
        public virtual CheckMaxMasterDetails_C3_S5ExpectedValues CheckMaxMasterDetails_C3_S5ExpectedValues
        {
            get
            {
                if ((this.mCheckMaxMasterDetails_C3_S5ExpectedValues == null))
                {
                    this.mCheckMaxMasterDetails_C3_S5ExpectedValues = new CheckMaxMasterDetails_C3_S5ExpectedValues();
                }
                return this.mCheckMaxMasterDetails_C3_S5ExpectedValues;
            }
        }
        
        public virtual CheckNoCalculationEkland_C1_S7ExpectedValues CheckNoCalculationEkland_C1_S7ExpectedValues
        {
            get
            {
                if ((this.mCheckNoCalculationEkland_C1_S7ExpectedValues == null))
                {
                    this.mCheckNoCalculationEkland_C1_S7ExpectedValues = new CheckNoCalculationEkland_C1_S7ExpectedValues();
                }
                return this.mCheckNoCalculationEkland_C1_S7ExpectedValues;
            }
        }
        
        public virtual CheckShiftClassesData_C6_S10ExpectedValues CheckShiftClassesData_C6_S10ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftClassesData_C6_S10ExpectedValues == null))
                {
                    this.mCheckShiftClassesData_C6_S10ExpectedValues = new CheckShiftClassesData_C6_S10ExpectedValues();
                }
                return this.mCheckShiftClassesData_C6_S10ExpectedValues;
            }
        }
        
        public virtual CheckShiftClassesData_C6_S14ExpectedValues CheckShiftClassesData_C6_S14ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftClassesData_C6_S14ExpectedValues == null))
                {
                    this.mCheckShiftClassesData_C6_S14ExpectedValues = new CheckShiftClassesData_C6_S14ExpectedValues();
                }
                return this.mCheckShiftClassesData_C6_S14ExpectedValues;
            }
        }
        
        public virtual CheckShiftClassesData_C6_S18ExpectedValues CheckShiftClassesData_C6_S18ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftClassesData_C6_S18ExpectedValues == null))
                {
                    this.mCheckShiftClassesData_C6_S18ExpectedValues = new CheckShiftClassesData_C6_S18ExpectedValues();
                }
                return this.mCheckShiftClassesData_C6_S18ExpectedValues;
            }
        }
        
        public virtual CheckShiftClassesData_C6_S22ExpectedValues CheckShiftClassesData_C6_S22ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftClassesData_C6_S22ExpectedValues == null))
                {
                    this.mCheckShiftClassesData_C6_S22ExpectedValues = new CheckShiftClassesData_C6_S22ExpectedValues();
                }
                return this.mCheckShiftClassesData_C6_S22ExpectedValues;
            }
        }
        
        public virtual CheckShiftClassesData_C6_S27ExpectedValues CheckShiftClassesData_C6_S27ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftClassesData_C6_S27ExpectedValues == null))
                {
                    this.mCheckShiftClassesData_C6_S27ExpectedValues = new CheckShiftClassesData_C6_S27ExpectedValues();
                }
                return this.mCheckShiftClassesData_C6_S27ExpectedValues;
            }
        }
        
        public virtual CheckShiftClassesData_C6_S29ExpectedValues CheckShiftClassesData_C6_S29ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftClassesData_C6_S29ExpectedValues == null))
                {
                    this.mCheckShiftClassesData_C6_S29ExpectedValues = new CheckShiftClassesData_C6_S29ExpectedValues();
                }
                return this.mCheckShiftClassesData_C6_S29ExpectedValues;
            }
        }
        
        public virtual CheckShiftClassesData_C6_S34ExpectedValues CheckShiftClassesData_C6_S34ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftClassesData_C6_S34ExpectedValues == null))
                {
                    this.mCheckShiftClassesData_C6_S34ExpectedValues = new CheckShiftClassesData_C6_S34ExpectedValues();
                }
                return this.mCheckShiftClassesData_C6_S34ExpectedValues;
            }
        }
        
        public virtual CheckShiftClassesData_C6_S6ExpectedValues CheckShiftClassesData_C6_S6ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftClassesData_C6_S6ExpectedValues == null))
                {
                    this.mCheckShiftClassesData_C6_S6ExpectedValues = new CheckShiftClassesData_C6_S6ExpectedValues();
                }
                return this.mCheckShiftClassesData_C6_S6ExpectedValues;
            }
        }
        
        public virtual CheckShiftClassesData_C6_S8ExpectedValues CheckShiftClassesData_C6_S8ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftClassesData_C6_S8ExpectedValues == null))
                {
                    this.mCheckShiftClassesData_C6_S8ExpectedValues = new CheckShiftClassesData_C6_S8ExpectedValues();
                }
                return this.mCheckShiftClassesData_C6_S8ExpectedValues;
            }
        }
        
        public virtual CheckStellanCalculations_C2_S10ExpectedValues CheckStellanCalculations_C2_S10ExpectedValues
        {
            get
            {
                if ((this.mCheckStellanCalculations_C2_S10ExpectedValues == null))
                {
                    this.mCheckStellanCalculations_C2_S10ExpectedValues = new CheckStellanCalculations_C2_S10ExpectedValues();
                }
                return this.mCheckStellanCalculations_C2_S10ExpectedValues;
            }
        }
        
        public virtual CheckStellanCalculations_C2_S11ExpectedValues CheckStellanCalculations_C2_S11ExpectedValues
        {
            get
            {
                if ((this.mCheckStellanCalculations_C2_S11ExpectedValues == null))
                {
                    this.mCheckStellanCalculations_C2_S11ExpectedValues = new CheckStellanCalculations_C2_S11ExpectedValues();
                }
                return this.mCheckStellanCalculations_C2_S11ExpectedValues;
            }
        }
        
        public virtual CheckStellanCalculations_C2_S9ExpectedValues CheckStellanCalculations_C2_S9ExpectedValues
        {
            get
            {
                if ((this.mCheckStellanCalculations_C2_S9ExpectedValues == null))
                {
                    this.mCheckStellanCalculations_C2_S9ExpectedValues = new CheckStellanCalculations_C2_S9ExpectedValues();
                }
                return this.mCheckStellanCalculations_C2_S9ExpectedValues;
            }
        }
        
        public virtual CheckStellanEdwallIsExported_C2_S16ExpectedValues CheckStellanEdwallIsExported_C2_S16ExpectedValues
        {
            get
            {
                if ((this.mCheckStellanEdwallIsExported_C2_S16ExpectedValues == null))
                {
                    this.mCheckStellanEdwallIsExported_C2_S16ExpectedValues = new CheckStellanEdwallIsExported_C2_S16ExpectedValues();
                }
                return this.mCheckStellanEdwallIsExported_C2_S16ExpectedValues;
            }
        }
        
        public virtual CheckStormareCalculations_C2_S14ExpectedValues CheckStormareCalculations_C2_S14ExpectedValues
        {
            get
            {
                if ((this.mCheckStormareCalculations_C2_S14ExpectedValues == null))
                {
                    this.mCheckStormareCalculations_C2_S14ExpectedValues = new CheckStormareCalculations_C2_S14ExpectedValues();
                }
                return this.mCheckStormareCalculations_C2_S14ExpectedValues;
            }
        }
        
        public virtual CheckStormareCalculations_C2_S23ExpectedValues CheckStormareCalculations_C2_S23ExpectedValues
        {
            get
            {
                if ((this.mCheckStormareCalculations_C2_S23ExpectedValues == null))
                {
                    this.mCheckStormareCalculations_C2_S23ExpectedValues = new CheckStormareCalculations_C2_S23ExpectedValues();
                }
                return this.mCheckStormareCalculations_C2_S23ExpectedValues;
            }
        }
        
        public virtual CheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues CheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues
        {
            get
            {
                if ((this.mCheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues == null))
                {
                    this.mCheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues = new CheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues();
                }
                return this.mCheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues;
            }
        }
        
        public virtual CheckStormareNoCalculations_C2_S21ExpectedValues CheckStormareNoCalculations_C2_S21ExpectedValues
        {
            get
            {
                if ((this.mCheckStormareNoCalculations_C2_S21ExpectedValues == null))
                {
                    this.mCheckStormareNoCalculations_C2_S21ExpectedValues = new CheckStormareNoCalculations_C2_S21ExpectedValues();
                }
                return this.mCheckStormareNoCalculations_C2_S21ExpectedValues;
            }
        }
        
        public virtual CheckTransAndStopIsDisabled_C1_S11ExpectedValues CheckTransAndStopIsDisabled_C1_S11ExpectedValues
        {
            get
            {
                if ((this.mCheckTransAndStopIsDisabled_C1_S11ExpectedValues == null))
                {
                    this.mCheckTransAndStopIsDisabled_C1_S11ExpectedValues = new CheckTransAndStopIsDisabled_C1_S11ExpectedValues();
                }
                return this.mCheckTransAndStopIsDisabled_C1_S11ExpectedValues;
            }
        }
        
        public virtual CheckTransferedFTTValuesExpectedValues CheckTransferedFTTValuesExpectedValues
        {
            get
            {
                if ((this.mCheckTransferedFTTValuesExpectedValues == null))
                {
                    this.mCheckTransferedFTTValuesExpectedValues = new CheckTransferedFTTValuesExpectedValues();
                }
                return this.mCheckTransferedFTTValuesExpectedValues;
            }
        }
        
        public virtual CheckTransferedFTTValues_C1_S26ExpectedValues CheckTransferedFTTValues_C1_S26ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferedFTTValues_C1_S26ExpectedValues == null))
                {
                    this.mCheckTransferedFTTValues_C1_S26ExpectedValues = new CheckTransferedFTTValues_C1_S26ExpectedValues();
                }
                return this.mCheckTransferedFTTValues_C1_S26ExpectedValues;
            }
        }
        
        public virtual CheckTransferedFTTValues_C1_S6ExpectedValues CheckTransferedFTTValues_C1_S6ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferedFTTValues_C1_S6ExpectedValues == null))
                {
                    this.mCheckTransferedFTTValues_C1_S6ExpectedValues = new CheckTransferedFTTValues_C1_S6ExpectedValues();
                }
                return this.mCheckTransferedFTTValues_C1_S6ExpectedValues;
            }
        }
        
        public virtual CheckTransferedFTTValues_C3_S21ExpectedValues CheckTransferedFTTValues_C3_S21ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferedFTTValues_C3_S21ExpectedValues == null))
                {
                    this.mCheckTransferedFTTValues_C3_S21ExpectedValues = new CheckTransferedFTTValues_C3_S21ExpectedValues();
                }
                return this.mCheckTransferedFTTValues_C3_S21ExpectedValues;
            }
        }
        
        public virtual CheckTransferedFTTValues_C3_S6ExpectedValues CheckTransferedFTTValues_C3_S6ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferedFTTValues_C3_S6ExpectedValues == null))
                {
                    this.mCheckTransferedFTTValues_C3_S6ExpectedValues = new CheckTransferedFTTValues_C3_S6ExpectedValues();
                }
                return this.mCheckTransferedFTTValues_C3_S6ExpectedValues;
            }
        }
        
        public virtual CheckTransferedFTTValues_C5_S7ExpectedValues CheckTransferedFTTValues_C5_S7ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferedFTTValues_C5_S7ExpectedValues == null))
                {
                    this.mCheckTransferedFTTValues_C5_S7ExpectedValues = new CheckTransferedFTTValues_C5_S7ExpectedValues();
                }
                return this.mCheckTransferedFTTValues_C5_S7ExpectedValues;
            }
        }
        
        public virtual CheckTransferedFTTValues_C6_S24ExpectedValues CheckTransferedFTTValues_C6_S24ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferedFTTValues_C6_S24ExpectedValues == null))
                {
                    this.mCheckTransferedFTTValues_C6_S24ExpectedValues = new CheckTransferedFTTValues_C6_S24ExpectedValues();
                }
                return this.mCheckTransferedFTTValues_C6_S24ExpectedValues;
            }
        }
        
        public virtual CheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues CheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues == null))
                {
                    this.mCheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues = new CheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues();
                }
                return this.mCheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues;
            }
        }
        
        public virtual CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues == null))
                {
                    this.mCheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues = new CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues();
                }
                return this.mCheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues;
            }
        }
        
        public virtual CheckTransferedFTTValuesStormare_C2_S15ExpectedValues CheckTransferedFTTValuesStormare_C2_S15ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferedFTTValuesStormare_C2_S15ExpectedValues == null))
                {
                    this.mCheckTransferedFTTValuesStormare_C2_S15ExpectedValues = new CheckTransferedFTTValuesStormare_C2_S15ExpectedValues();
                }
                return this.mCheckTransferedFTTValuesStormare_C2_S15ExpectedValues;
            }
        }
        
        public virtual CheckTransferedFTTValuesStormare_C2_S17ExpectedValues CheckTransferedFTTValuesStormare_C2_S17ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferedFTTValuesStormare_C2_S17ExpectedValues == null))
                {
                    this.mCheckTransferedFTTValuesStormare_C2_S17ExpectedValues = new CheckTransferedFTTValuesStormare_C2_S17ExpectedValues();
                }
                return this.mCheckTransferedFTTValuesStormare_C2_S17ExpectedValues;
            }
        }
        
        public virtual CheckTransferePeriodExpectedValues CheckTransferePeriodExpectedValues
        {
            get
            {
                if ((this.mCheckTransferePeriodExpectedValues == null))
                {
                    this.mCheckTransferePeriodExpectedValues = new CheckTransferePeriodExpectedValues();
                }
                return this.mCheckTransferePeriodExpectedValues;
            }
        }
        
        public virtual CheckTransferFTTButtonDisabledExpectedValues CheckTransferFTTButtonDisabledExpectedValues
        {
            get
            {
                if ((this.mCheckTransferFTTButtonDisabledExpectedValues == null))
                {
                    this.mCheckTransferFTTButtonDisabledExpectedValues = new CheckTransferFTTButtonDisabledExpectedValues();
                }
                return this.mCheckTransferFTTButtonDisabledExpectedValues;
            }
        }
        
        public virtual CheckTransferFTTButtonEnabledExpectedValues CheckTransferFTTButtonEnabledExpectedValues
        {
            get
            {
                if ((this.mCheckTransferFTTButtonEnabledExpectedValues == null))
                {
                    this.mCheckTransferFTTButtonEnabledExpectedValues = new CheckTransferFTTButtonEnabledExpectedValues();
                }
                return this.mCheckTransferFTTButtonEnabledExpectedValues;
            }
        }
        
        public virtual CheckTransferPeriod_C1_S20ExpectedValues CheckTransferPeriod_C1_S20ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferPeriod_C1_S20ExpectedValues == null))
                {
                    this.mCheckTransferPeriod_C1_S20ExpectedValues = new CheckTransferPeriod_C1_S20ExpectedValues();
                }
                return this.mCheckTransferPeriod_C1_S20ExpectedValues;
            }
        }
        
        public virtual CheckTransferPeriodAndEmployees_C2_S4ExpectedValues CheckTransferPeriodAndEmployees_C2_S4ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferPeriodAndEmployees_C2_S4ExpectedValues == null))
                {
                    this.mCheckTransferPeriodAndEmployees_C2_S4ExpectedValues = new CheckTransferPeriodAndEmployees_C2_S4ExpectedValues();
                }
                return this.mCheckTransferPeriodAndEmployees_C2_S4ExpectedValues;
            }
        }
        
        public virtual CheckTransferUTAandPeriod_C1_S25ExpectedValues CheckTransferUTAandPeriod_C1_S25ExpectedValues
        {
            get
            {
                if ((this.mCheckTransferUTAandPeriod_C1_S25ExpectedValues == null))
                {
                    this.mCheckTransferUTAandPeriod_C1_S25ExpectedValues = new CheckTransferUTAandPeriod_C1_S25ExpectedValues();
                }
                return this.mCheckTransferUTAandPeriod_C1_S25ExpectedValues;
            }
        }
        
        public virtual CheckUTACalculationEndre_Garbo_C1_S23ExpectedValues CheckUTACalculationEndre_Garbo_C1_S23ExpectedValues
        {
            get
            {
                if ((this.mCheckUTACalculationEndre_Garbo_C1_S23ExpectedValues == null))
                {
                    this.mCheckUTACalculationEndre_Garbo_C1_S23ExpectedValues = new CheckUTACalculationEndre_Garbo_C1_S23ExpectedValues();
                }
                return this.mCheckUTACalculationEndre_Garbo_C1_S23ExpectedValues;
            }
        }
        
        public virtual CheckUTACalculationGarbo_C1_S24ExpectedValues CheckUTACalculationGarbo_C1_S24ExpectedValues
        {
            get
            {
                if ((this.mCheckUTACalculationGarbo_C1_S24ExpectedValues == null))
                {
                    this.mCheckUTACalculationGarbo_C1_S24ExpectedValues = new CheckUTACalculationGarbo_C1_S24ExpectedValues();
                }
                return this.mCheckUTACalculationGarbo_C1_S24ExpectedValues;
            }
        }
        
        public virtual CheckUTCalculationEndre_Garbo_C1_S24ExpectedValues CheckUTCalculationEndre_Garbo_C1_S24ExpectedValues
        {
            get
            {
                if ((this.mCheckUTCalculationEndre_Garbo_C1_S24ExpectedValues == null))
                {
                    this.mCheckUTCalculationEndre_Garbo_C1_S24ExpectedValues = new CheckUTCalculationEndre_Garbo_C1_S24ExpectedValues();
                }
                return this.mCheckUTCalculationEndre_Garbo_C1_S24ExpectedValues;
            }
        }
        
        public virtual ConnectWhishplanEaster2016ToCopyOfFFTBaseplanParams ConnectWhishplanEaster2016ToCopyOfFFTBaseplanParams
        {
            get
            {
                if ((this.mConnectWhishplanEaster2016ToCopyOfFFTBaseplanParams == null))
                {
                    this.mConnectWhishplanEaster2016ToCopyOfFFTBaseplanParams = new ConnectWhishplanEaster2016ToCopyOfFFTBaseplanParams();
                }
                return this.mConnectWhishplanEaster2016ToCopyOfFFTBaseplanParams;
            }
        }
        
        public virtual CreateAbsenceWithCode45_1Params CreateAbsenceWithCode45_1Params
        {
            get
            {
                if ((this.mCreateAbsenceWithCode45_1Params == null))
                {
                    this.mCreateAbsenceWithCode45_1Params = new CreateAbsenceWithCode45_1Params();
                }
                return this.mCreateAbsenceWithCode45_1Params;
            }
        }
        
        public virtual CreateAbsenceWithCode45_2Params CreateAbsenceWithCode45_2Params
        {
            get
            {
                if ((this.mCreateAbsenceWithCode45_2Params == null))
                {
                    this.mCreateAbsenceWithCode45_2Params = new CreateAbsenceWithCode45_2Params();
                }
                return this.mCreateAbsenceWithCode45_2Params;
            }
        }
        
        public virtual DeleteA1shiftTueWeek2Line2StormareParams DeleteA1shiftTueWeek2Line2StormareParams
        {
            get
            {
                if ((this.mDeleteA1shiftTueWeek2Line2StormareParams == null))
                {
                    this.mDeleteA1shiftTueWeek2Line2StormareParams = new DeleteA1shiftTueWeek2Line2StormareParams();
                }
                return this.mDeleteA1shiftTueWeek2Line2StormareParams;
            }
        }
        
        public virtual EditF3PlanSettingsParams EditF3PlanSettingsParams
        {
            get
            {
                if ((this.mEditF3PlanSettingsParams == null))
                {
                    this.mEditF3PlanSettingsParams = new EditF3PlanSettingsParams();
                }
                return this.mEditF3PlanSettingsParams;
            }
        }
        
        public virtual EditLineSettingsRheborgParams EditLineSettingsRheborgParams
        {
            get
            {
                if ((this.mEditLineSettingsRheborgParams == null))
                {
                    this.mEditLineSettingsRheborgParams = new EditLineSettingsRheborgParams();
                }
                return this.mEditLineSettingsRheborgParams;
            }
        }
        
        public virtual EditOscarssonLine_C6_11Params EditOscarssonLine_C6_11Params
        {
            get
            {
                if ((this.mEditOscarssonLine_C6_11Params == null))
                {
                    this.mEditOscarssonLine_C6_11Params = new EditOscarssonLine_C6_11Params();
                }
                return this.mEditOscarssonLine_C6_11Params;
            }
        }
        
        public virtual EditOscarssonLine_C6_15Params EditOscarssonLine_C6_15Params
        {
            get
            {
                if ((this.mEditOscarssonLine_C6_15Params == null))
                {
                    this.mEditOscarssonLine_C6_15Params = new EditOscarssonLine_C6_15Params();
                }
                return this.mEditOscarssonLine_C6_15Params;
            }
        }
        
        public virtual EditOscarssonLine2_C6_20Params EditOscarssonLine2_C6_20Params
        {
            get
            {
                if ((this.mEditOscarssonLine2_C6_20Params == null))
                {
                    this.mEditOscarssonLine2_C6_20Params = new EditOscarssonLine2_C6_20Params();
                }
                return this.mEditOscarssonLine2_C6_20Params;
            }
        }
        
        public virtual EditVollterLine_C6_9Params EditVollterLine_C6_9Params
        {
            get
            {
                if ((this.mEditVollterLine_C6_9Params == null))
                {
                    this.mEditVollterLine_C6_9Params = new EditVollterLine_C6_9Params();
                }
                return this.mEditVollterLine_C6_9Params;
            }
        }
        
        public virtual ExpandMasterDetailsForAllEmployeesParams ExpandMasterDetailsForAllEmployeesParams
        {
            get
            {
                if ((this.mExpandMasterDetailsForAllEmployeesParams == null))
                {
                    this.mExpandMasterDetailsForAllEmployeesParams = new ExpandMasterDetailsForAllEmployeesParams();
                }
                return this.mExpandMasterDetailsForAllEmployeesParams;
            }
        }
        
        public virtual InsertA1shiftSatWeek4Line2StormareParams InsertA1shiftSatWeek4Line2StormareParams
        {
            get
            {
                if ((this.mInsertA1shiftSatWeek4Line2StormareParams == null))
                {
                    this.mInsertA1shiftSatWeek4Line2StormareParams = new InsertA1shiftSatWeek4Line2StormareParams();
                }
                return this.mInsertA1shiftSatWeek4Line2StormareParams;
            }
        }
        
        public virtual InsertA1shiftTueWeek2Line2StormareParams InsertA1shiftTueWeek2Line2StormareParams
        {
            get
            {
                if ((this.mInsertA1shiftTueWeek2Line2StormareParams == null))
                {
                    this.mInsertA1shiftTueWeek2Line2StormareParams = new InsertA1shiftTueWeek2Line2StormareParams();
                }
                return this.mInsertA1shiftTueWeek2Line2StormareParams;
            }
        }
        
        public virtual InsertA1shiftWedWeek3Line2StormareParams InsertA1shiftWedWeek3Line2StormareParams
        {
            get
            {
                if ((this.mInsertA1shiftWedWeek3Line2StormareParams == null))
                {
                    this.mInsertA1shiftWedWeek3Line2StormareParams = new InsertA1shiftWedWeek3Line2StormareParams();
                }
                return this.mInsertA1shiftWedWeek3Line2StormareParams;
            }
        }
        
        public virtual InsertAandDshiftsWeek4Line2PersbrandtParams InsertAandDshiftsWeek4Line2PersbrandtParams
        {
            get
            {
                if ((this.mInsertAandDshiftsWeek4Line2PersbrandtParams == null))
                {
                    this.mInsertAandDshiftsWeek4Line2PersbrandtParams = new InsertAandDshiftsWeek4Line2PersbrandtParams();
                }
                return this.mInsertAandDshiftsWeek4Line2PersbrandtParams;
            }
        }
        
        public virtual InsertAshiftMondayParams InsertAshiftMondayParams
        {
            get
            {
                if ((this.mInsertAshiftMondayParams == null))
                {
                    this.mInsertAshiftMondayParams = new InsertAshiftMondayParams();
                }
                return this.mInsertAshiftMondayParams;
            }
        }
        
        public virtual InsertD1shiftsLine1And2HaberParams InsertD1shiftsLine1And2HaberParams
        {
            get
            {
                if ((this.mInsertD1shiftsLine1And2HaberParams == null))
                {
                    this.mInsertD1shiftsLine1And2HaberParams = new InsertD1shiftsLine1And2HaberParams();
                }
                return this.mInsertD1shiftsLine1And2HaberParams;
            }
        }
        
        public virtual InsertD1shiftsLine2RheborgParams InsertD1shiftsLine2RheborgParams
        {
            get
            {
                if ((this.mInsertD1shiftsLine2RheborgParams == null))
                {
                    this.mInsertD1shiftsLine2RheborgParams = new InsertD1shiftsLine2RheborgParams();
                }
                return this.mInsertD1shiftsLine2RheborgParams;
            }
        }
        
        public virtual InsertD2SunOscarssonParams InsertD2SunOscarssonParams
        {
            get
            {
                if ((this.mInsertD2SunOscarssonParams == null))
                {
                    this.mInsertD2SunOscarssonParams = new InsertD2SunOscarssonParams();
                }
                return this.mInsertD2SunOscarssonParams;
            }
        }
        
        public virtual InsertDHshiftWeek3Line3GustavssonParams InsertDHshiftWeek3Line3GustavssonParams
        {
            get
            {
                if ((this.mInsertDHshiftWeek3Line3GustavssonParams == null))
                {
                    this.mInsertDHshiftWeek3Line3GustavssonParams = new InsertDHshiftWeek3Line3GustavssonParams();
                }
                return this.mInsertDHshiftWeek3Line3GustavssonParams;
            }
        }
        
        public virtual InsertDshift3WeeksEndreGarboParams InsertDshift3WeeksEndreGarboParams
        {
            get
            {
                if ((this.mInsertDshift3WeeksEndreGarboParams == null))
                {
                    this.mInsertDshift3WeeksEndreGarboParams = new InsertDshift3WeeksEndreGarboParams();
                }
                return this.mInsertDshift3WeeksEndreGarboParams;
            }
        }
        
        public virtual InsertDshiftMonEklandParams InsertDshiftMonEklandParams
        {
            get
            {
                if ((this.mInsertDshiftMonEklandParams == null))
                {
                    this.mInsertDshiftMonEklandParams = new InsertDshiftMonEklandParams();
                }
                return this.mInsertDshiftMonEklandParams;
            }
        }
        
        public virtual InsertDshiftWeek1And2GustavssonParams InsertDshiftWeek1And2GustavssonParams
        {
            get
            {
                if ((this.mInsertDshiftWeek1And2GustavssonParams == null))
                {
                    this.mInsertDshiftWeek1And2GustavssonParams = new InsertDshiftWeek1And2GustavssonParams();
                }
                return this.mInsertDshiftWeek1And2GustavssonParams;
            }
        }
        
        public virtual InsertDshiftWeek1Line4GustavssonParams InsertDshiftWeek1Line4GustavssonParams
        {
            get
            {
                if ((this.mInsertDshiftWeek1Line4GustavssonParams == null))
                {
                    this.mInsertDshiftWeek1Line4GustavssonParams = new InsertDshiftWeek1Line4GustavssonParams();
                }
                return this.mInsertDshiftWeek1Line4GustavssonParams;
            }
        }
        
        public virtual InsertF3shiftLine2RheborgParams InsertF3shiftLine2RheborgParams
        {
            get
            {
                if ((this.mInsertF3shiftLine2RheborgParams == null))
                {
                    this.mInsertF3shiftLine2RheborgParams = new InsertF3shiftLine2RheborgParams();
                }
                return this.mInsertF3shiftLine2RheborgParams;
            }
        }
        
        public virtual InsertHJ2ThuVollterParams InsertHJ2ThuVollterParams
        {
            get
            {
                if ((this.mInsertHJ2ThuVollterParams == null))
                {
                    this.mInsertHJ2ThuVollterParams = new InsertHJ2ThuVollterParams();
                }
                return this.mInsertHJ2ThuVollterParams;
            }
        }
        
        public virtual InsertNshiftMonEklandParams InsertNshiftMonEklandParams
        {
            get
            {
                if ((this.mInsertNshiftMonEklandParams == null))
                {
                    this.mInsertNshiftMonEklandParams = new InsertNshiftMonEklandParams();
                }
                return this.mInsertNshiftMonEklandParams;
            }
        }
        
        public virtual InsertNshiftMonWeek2EklandParams InsertNshiftMonWeek2EklandParams
        {
            get
            {
                if ((this.mInsertNshiftMonWeek2EklandParams == null))
                {
                    this.mInsertNshiftMonWeek2EklandParams = new InsertNshiftMonWeek2EklandParams();
                }
                return this.mInsertNshiftMonWeek2EklandParams;
            }
        }
        
        public virtual InsertNshiftMonWeek3EklandParams InsertNshiftMonWeek3EklandParams
        {
            get
            {
                if ((this.mInsertNshiftMonWeek3EklandParams == null))
                {
                    this.mInsertNshiftMonWeek3EklandParams = new InsertNshiftMonWeek3EklandParams();
                }
                return this.mInsertNshiftMonWeek3EklandParams;
            }
        }
        
        public virtual InsertNshiftMonWeek3StormareParams InsertNshiftMonWeek3StormareParams
        {
            get
            {
                if ((this.mInsertNshiftMonWeek3StormareParams == null))
                {
                    this.mInsertNshiftMonWeek3StormareParams = new InsertNshiftMonWeek3StormareParams();
                }
                return this.mInsertNshiftMonWeek3StormareParams;
            }
        }
        
        public virtual InsertShiftsWeek2AndshiftWeek3_C3_S19Params InsertShiftsWeek2AndshiftWeek3_C3_S19Params
        {
            get
            {
                if ((this.mInsertShiftsWeek2AndshiftWeek3_C3_S19Params == null))
                {
                    this.mInsertShiftsWeek2AndshiftWeek3_C3_S19Params = new InsertShiftsWeek2AndshiftWeek3_C3_S19Params();
                }
                return this.mInsertShiftsWeek2AndshiftWeek3_C3_S19Params;
            }
        }
        
        public virtual SelectShowAllEmpsInExportFTTWindowParams SelectShowAllEmpsInExportFTTWindowParams
        {
            get
            {
                if ((this.mSelectShowAllEmpsInExportFTTWindowParams == null))
                {
                    this.mSelectShowAllEmpsInExportFTTWindowParams = new SelectShowAllEmpsInExportFTTWindowParams();
                }
                return this.mSelectShowAllEmpsInExportFTTWindowParams;
            }
        }
        
        public virtual ShowFTTAsAveragePrMndParams ShowFTTAsAveragePrMndParams
        {
            get
            {
                if ((this.mShowFTTAsAveragePrMndParams == null))
                {
                    this.mShowFTTAsAveragePrMndParams = new ShowFTTAsAveragePrMndParams();
                }
                return this.mShowFTTAsAveragePrMndParams;
            }
        }
        
        public virtual ShowFTTAsAveragePrMndCalendarPlanParams ShowFTTAsAveragePrMndCalendarPlanParams
        {
            get
            {
                if ((this.mShowFTTAsAveragePrMndCalendarPlanParams == null))
                {
                    this.mShowFTTAsAveragePrMndCalendarPlanParams = new ShowFTTAsAveragePrMndCalendarPlanParams();
                }
                return this.mShowFTTAsAveragePrMndCalendarPlanParams;
            }
        }
        
        public virtual ShowFTTAsTotalCalendarPlanParams ShowFTTAsTotalCalendarPlanParams
        {
            get
            {
                if ((this.mShowFTTAsTotalCalendarPlanParams == null))
                {
                    this.mShowFTTAsTotalCalendarPlanParams = new ShowFTTAsTotalCalendarPlanParams();
                }
                return this.mShowFTTAsTotalCalendarPlanParams;
            }
        }
        
        public UIArbeidsplanFTTArbeidWindow UIArbeidsplanFTTArbeidWindow
        {
            get
            {
                if ((this.mUIArbeidsplanFTTArbeidWindow == null))
                {
                    this.mUIArbeidsplanFTTArbeidWindow = new UIArbeidsplanFTTArbeidWindow();
                }
                return this.mUIArbeidsplanFTTArbeidWindow;
            }
        }
        
        public UINyarbeidsplanWindow UINyarbeidsplanWindow
        {
            get
            {
                if ((this.mUINyarbeidsplanWindow == null))
                {
                    this.mUINyarbeidsplanWindow = new UINyarbeidsplanWindow();
                }
                return this.mUINyarbeidsplanWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow UIArbeidsplanKopiavFTTWindow
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow = new UIArbeidsplanKopiavFTTWindow();
                }
                return this.mUIArbeidsplanKopiavFTTWindow;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow1 UIArbeidsplanKopiavFTTWindow1
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow1 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow1 = new UIArbeidsplanKopiavFTTWindow1();
                }
                return this.mUIArbeidsplanKopiavFTTWindow1;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UILinjeinnstillingerEkWindow UILinjeinnstillingerEkWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerEkWindow == null))
                {
                    this.mUILinjeinnstillingerEkWindow = new UILinjeinnstillingerEkWindow();
                }
                return this.mUILinjeinnstillingerEkWindow;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow2 UIArbeidsplanKopiavFTTWindow2
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow2 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow2 = new UIArbeidsplanKopiavFTTWindow2();
                }
                return this.mUIArbeidsplanKopiavFTTWindow2;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow3 UIArbeidsplanKopiavFTTWindow3
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow3 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow3 = new UIArbeidsplanKopiavFTTWindow3();
                }
                return this.mUIArbeidsplanKopiavFTTWindow3;
            }
        }
        
        public UIOverførtilleggWindow UIOverførtilleggWindow
        {
            get
            {
                if ((this.mUIOverførtilleggWindow == null))
                {
                    this.mUIOverførtilleggWindow = new UIOverførtilleggWindow();
                }
                return this.mUIOverførtilleggWindow;
            }
        }
        
        public UIExportloggWindow UIExportloggWindow
        {
            get
            {
                if ((this.mUIExportloggWindow == null))
                {
                    this.mUIExportloggWindow = new UIExportloggWindow();
                }
                return this.mUIExportloggWindow;
            }
        }
        
        public UIEttersystemeksportdeWindow UIEttersystemeksportdeWindow
        {
            get
            {
                if ((this.mUIEttersystemeksportdeWindow == null))
                {
                    this.mUIEttersystemeksportdeWindow = new UIEttersystemeksportdeWindow();
                }
                return this.mUIEttersystemeksportdeWindow;
            }
        }
        
        public UIArbeidsplanInnstilliWindow UIArbeidsplanInnstilliWindow
        {
            get
            {
                if ((this.mUIArbeidsplanInnstilliWindow == null))
                {
                    this.mUIArbeidsplanInnstilliWindow = new UIArbeidsplanInnstilliWindow();
                }
                return this.mUIArbeidsplanInnstilliWindow;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow4 UIArbeidsplanKopiavFTTWindow4
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow4 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow4 = new UIArbeidsplanKopiavFTTWindow4();
                }
                return this.mUIArbeidsplanKopiavFTTWindow4;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow5 UIArbeidsplanKopiavFTTWindow5
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow5 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow5 = new UIArbeidsplanKopiavFTTWindow5();
                }
                return this.mUIArbeidsplanKopiavFTTWindow5;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow6 UIArbeidsplanKopiavFTTWindow6
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow6 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow6 = new UIArbeidsplanKopiavFTTWindow6();
                }
                return this.mUIArbeidsplanKopiavFTTWindow6;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow7 UIArbeidsplanKopiavFTTWindow7
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow7 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow7 = new UIArbeidsplanKopiavFTTWindow7();
                }
                return this.mUIArbeidsplanKopiavFTTWindow7;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2();
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow8 UIArbeidsplanKopiavFTTWindow8
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow8 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow8 = new UIArbeidsplanKopiavFTTWindow8();
                }
                return this.mUIArbeidsplanKopiavFTTWindow8;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow9 UIArbeidsplanKopiavFTTWindow9
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow9 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow9 = new UIArbeidsplanKopiavFTTWindow9();
                }
                return this.mUIArbeidsplanKopiavFTTWindow9;
            }
        }
        
        public UILinjeinnstillingerGaWindow UILinjeinnstillingerGaWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerGaWindow == null))
                {
                    this.mUILinjeinnstillingerGaWindow = new UILinjeinnstillingerGaWindow();
                }
                return this.mUILinjeinnstillingerGaWindow;
            }
        }
        
        public UIArbeidsplanFTTKalendWindow UIArbeidsplanFTTKalendWindow
        {
            get
            {
                if ((this.mUIArbeidsplanFTTKalendWindow == null))
                {
                    this.mUIArbeidsplanFTTKalendWindow = new UIArbeidsplanFTTKalendWindow();
                }
                return this.mUIArbeidsplanFTTKalendWindow;
            }
        }
        
        public UINykalenderplanWindow UINykalenderplanWindow
        {
            get
            {
                if ((this.mUINykalenderplanWindow == null))
                {
                    this.mUINykalenderplanWindow = new UINykalenderplanWindow();
                }
                return this.mUINykalenderplanWindow;
            }
        }
        
        public UIArbeidsplanFTTJanuarWindow UIArbeidsplanFTTJanuarWindow
        {
            get
            {
                if ((this.mUIArbeidsplanFTTJanuarWindow == null))
                {
                    this.mUIArbeidsplanFTTJanuarWindow = new UIArbeidsplanFTTJanuarWindow();
                }
                return this.mUIArbeidsplanFTTJanuarWindow;
            }
        }
        
        public UIArbeidsplanFTTJanuarWindow1 UIArbeidsplanFTTJanuarWindow1
        {
            get
            {
                if ((this.mUIArbeidsplanFTTJanuarWindow1 == null))
                {
                    this.mUIArbeidsplanFTTJanuarWindow1 = new UIArbeidsplanFTTJanuarWindow1();
                }
                return this.mUIArbeidsplanFTTJanuarWindow1;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3();
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIFraværiarbeidsplanWindow UIFraværiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIFraværiarbeidsplanWindow == null))
                {
                    this.mUIFraværiarbeidsplanWindow = new UIFraværiarbeidsplanWindow();
                }
                return this.mUIFraværiarbeidsplanWindow;
            }
        }
        
        public UIGT4001InformasjonWindow UIGT4001InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4001InformasjonWindow == null))
                {
                    this.mUIGT4001InformasjonWindow = new UIGT4001InformasjonWindow();
                }
                return this.mUIGT4001InformasjonWindow;
            }
        }
        
        public UIArbeidsplanFTTKalendWindow1 UIArbeidsplanFTTKalendWindow1
        {
            get
            {
                if ((this.mUIArbeidsplanFTTKalendWindow1 == null))
                {
                    this.mUIArbeidsplanFTTKalendWindow1 = new UIArbeidsplanFTTKalendWindow1();
                }
                return this.mUIArbeidsplanFTTKalendWindow1;
            }
        }
        
        public UILinjeinnstillingerStWindow UILinjeinnstillingerStWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerStWindow == null))
                {
                    this.mUILinjeinnstillingerStWindow = new UILinjeinnstillingerStWindow();
                }
                return this.mUILinjeinnstillingerStWindow;
            }
        }
        
        public UIGyldighetsperiodeWindow UIGyldighetsperiodeWindow
        {
            get
            {
                if ((this.mUIGyldighetsperiodeWindow == null))
                {
                    this.mUIGyldighetsperiodeWindow = new UIGyldighetsperiodeWindow();
                }
                return this.mUIGyldighetsperiodeWindow;
            }
        }
        
        public UIArbeidsplanFTTKalendWindow2 UIArbeidsplanFTTKalendWindow2
        {
            get
            {
                if ((this.mUIArbeidsplanFTTKalendWindow2 == null))
                {
                    this.mUIArbeidsplanFTTKalendWindow2 = new UIArbeidsplanFTTKalendWindow2();
                }
                return this.mUIArbeidsplanFTTKalendWindow2;
            }
        }
        
        public UIStopptilleggWindow UIStopptilleggWindow
        {
            get
            {
                if ((this.mUIStopptilleggWindow == null))
                {
                    this.mUIStopptilleggWindow = new UIStopptilleggWindow();
                }
                return this.mUIStopptilleggWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4();
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIArbeidsplanFTTJanuarWindow2 UIArbeidsplanFTTJanuarWindow2
        {
            get
            {
                if ((this.mUIArbeidsplanFTTJanuarWindow2 == null))
                {
                    this.mUIArbeidsplanFTTJanuarWindow2 = new UIArbeidsplanFTTJanuarWindow2();
                }
                return this.mUIArbeidsplanFTTJanuarWindow2;
            }
        }
        
        public UIArbeidsplanFFTBaseplWindow UIArbeidsplanFFTBaseplWindow
        {
            get
            {
                if ((this.mUIArbeidsplanFFTBaseplWindow == null))
                {
                    this.mUIArbeidsplanFFTBaseplWindow = new UIArbeidsplanFFTBaseplWindow();
                }
                return this.mUIArbeidsplanFFTBaseplWindow;
            }
        }
        
        public UINybaseplanWindow UINybaseplanWindow
        {
            get
            {
                if ((this.mUINybaseplanWindow == null))
                {
                    this.mUINybaseplanWindow = new UINybaseplanWindow();
                }
                return this.mUINybaseplanWindow;
            }
        }
        
        public UIArbeidsplanKopiavFFTWindow UIArbeidsplanKopiavFFTWindow
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFFTWindow == null))
                {
                    this.mUIArbeidsplanKopiavFFTWindow = new UIArbeidsplanKopiavFFTWindow();
                }
                return this.mUIArbeidsplanKopiavFFTWindow;
            }
        }
        
        public UIGatver66041952ASCLAvWindow UIGatver66041952ASCLAvWindow
        {
            get
            {
                if ((this.mUIGatver66041952ASCLAvWindow == null))
                {
                    this.mUIGatver66041952ASCLAvWindow = new UIGatver66041952ASCLAvWindow();
                }
                return this.mUIGatver66041952ASCLAvWindow;
            }
        }
        
        public UIØnskeplanperiodeWindow UIØnskeplanperiodeWindow
        {
            get
            {
                if ((this.mUIØnskeplanperiodeWindow == null))
                {
                    this.mUIØnskeplanperiodeWindow = new UIØnskeplanperiodeWindow();
                }
                return this.mUIØnskeplanperiodeWindow;
            }
        }
        
        public UIKobleønskeplanperiodWindow UIKobleønskeplanperiodWindow
        {
            get
            {
                if ((this.mUIKobleønskeplanperiodWindow == null))
                {
                    this.mUIKobleønskeplanperiodWindow = new UIKobleønskeplanperiodWindow();
                }
                return this.mUIKobleønskeplanperiodWindow;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow10 UIArbeidsplanKopiavFTTWindow10
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow10 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow10 = new UIArbeidsplanKopiavFTTWindow10();
                }
                return this.mUIArbeidsplanKopiavFTTWindow10;
            }
        }
        
        public UIArbeidsplanØnskeplanWindow UIArbeidsplanØnskeplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanØnskeplanWindow == null))
                {
                    this.mUIArbeidsplanØnskeplanWindow = new UIArbeidsplanØnskeplanWindow();
                }
                return this.mUIArbeidsplanØnskeplanWindow;
            }
        }
        
        public UIGatver66041952ASCLAvWindow1 UIGatver66041952ASCLAvWindow1
        {
            get
            {
                if ((this.mUIGatver66041952ASCLAvWindow1 == null))
                {
                    this.mUIGatver66041952ASCLAvWindow1 = new UIGatver66041952ASCLAvWindow1();
                }
                return this.mUIGatver66041952ASCLAvWindow1;
            }
        }
        
        public UIArbeidsplanØnskeplanWindow1 UIArbeidsplanØnskeplanWindow1
        {
            get
            {
                if ((this.mUIArbeidsplanØnskeplanWindow1 == null))
                {
                    this.mUIArbeidsplanØnskeplanWindow1 = new UIArbeidsplanØnskeplanWindow1();
                }
                return this.mUIArbeidsplanØnskeplanWindow1;
            }
        }
        
        public UIArbeidsplanFTTUkeregWindow UIArbeidsplanFTTUkeregWindow
        {
            get
            {
                if ((this.mUIArbeidsplanFTTUkeregWindow == null))
                {
                    this.mUIArbeidsplanFTTUkeregWindow = new UIArbeidsplanFTTUkeregWindow();
                }
                return this.mUIArbeidsplanFTTUkeregWindow;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow11 UIArbeidsplanKopiavFTTWindow11
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow11 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow11 = new UIArbeidsplanKopiavFTTWindow11();
                }
                return this.mUIArbeidsplanKopiavFTTWindow11;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5();
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow12 UIArbeidsplanKopiavFTTWindow12
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow12 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow12 = new UIArbeidsplanKopiavFTTWindow12();
                }
                return this.mUIArbeidsplanKopiavFTTWindow12;
            }
        }
        
        public UIItemWindow11 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow11();
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow7 UIItemWindow7
        {
            get
            {
                if ((this.mUIItemWindow7 == null))
                {
                    this.mUIItemWindow7 = new UIItemWindow7();
                }
                return this.mUIItemWindow7;
            }
        }
        
        public UIItemWindow12 UIItemWindow12
        {
            get
            {
                if ((this.mUIItemWindow12 == null))
                {
                    this.mUIItemWindow12 = new UIItemWindow12();
                }
                return this.mUIItemWindow12;
            }
        }
        
        public UIItemWindow6 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow6();
                }
                return this.mUIItemWindow6;
            }
        }
        
        public UIItemWindow8 UIItemWindow8
        {
            get
            {
                if ((this.mUIItemWindow8 == null))
                {
                    this.mUIItemWindow8 = new UIItemWindow8();
                }
                return this.mUIItemWindow8;
            }
        }
        
        public UILinjeinnstillingerPeWindow UILinjeinnstillingerPeWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerPeWindow == null))
                {
                    this.mUILinjeinnstillingerPeWindow = new UILinjeinnstillingerPeWindow();
                }
                return this.mUILinjeinnstillingerPeWindow;
            }
        }
        
        public UILinjeinnstillingerRhWindow UILinjeinnstillingerRhWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerRhWindow == null))
                {
                    this.mUILinjeinnstillingerRhWindow = new UILinjeinnstillingerRhWindow();
                }
                return this.mUILinjeinnstillingerRhWindow;
            }
        }
        
        public UIItemWindow9 UIItemWindow9
        {
            get
            {
                if ((this.mUIItemWindow9 == null))
                {
                    this.mUIItemWindow9 = new UIItemWindow9();
                }
                return this.mUIItemWindow9;
            }
        }
        
        public UIArbeidsplanoppsettWindow UIArbeidsplanoppsettWindow
        {
            get
            {
                if ((this.mUIArbeidsplanoppsettWindow == null))
                {
                    this.mUIArbeidsplanoppsettWindow = new UIArbeidsplanoppsettWindow();
                }
                return this.mUIArbeidsplanoppsettWindow;
            }
        }
        
        public UIAnsatteiarbeidsplanWindow UIAnsatteiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIAnsatteiarbeidsplanWindow == null))
                {
                    this.mUIAnsatteiarbeidsplanWindow = new UIAnsatteiarbeidsplanWindow();
                }
                return this.mUIAnsatteiarbeidsplanWindow;
            }
        }
        
        public UILeggtilansatteWindow UILeggtilansatteWindow
        {
            get
            {
                if ((this.mUILeggtilansatteWindow == null))
                {
                    this.mUILeggtilansatteWindow = new UILeggtilansatteWindow();
                }
                return this.mUILeggtilansatteWindow;
            }
        }
        
        public UIArbeidsplanKopiavFTTWindow13 UIArbeidsplanKopiavFTTWindow13
        {
            get
            {
                if ((this.mUIArbeidsplanKopiavFTTWindow13 == null))
                {
                    this.mUIArbeidsplanKopiavFTTWindow13 = new UIArbeidsplanKopiavFTTWindow13();
                }
                return this.mUIArbeidsplanKopiavFTTWindow13;
            }
        }
        
        public UILinjeinnstillingerJäWindow UILinjeinnstillingerJäWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerJäWindow == null))
                {
                    this.mUILinjeinnstillingerJäWindow = new UILinjeinnstillingerJäWindow();
                }
                return this.mUILinjeinnstillingerJäWindow;
            }
        }
        
        public UIGatver66041952POAvd5Window UIGatver66041952POAvd5Window
        {
            get
            {
                if ((this.mUIGatver66041952POAvd5Window == null))
                {
                    this.mUIGatver66041952POAvd5Window = new UIGatver66041952POAvd5Window();
                }
                return this.mUIGatver66041952POAvd5Window;
            }
        }
        
        public UIGatver66041952POAvd5Window1 UIGatver66041952POAvd5Window1
        {
            get
            {
                if ((this.mUIGatver66041952POAvd5Window1 == null))
                {
                    this.mUIGatver66041952POAvd5Window1 = new UIGatver66041952POAvd5Window1();
                }
                return this.mUIGatver66041952POAvd5Window1;
            }
        }
        
        public UIGatver66041952POAvd5Window2 UIGatver66041952POAvd5Window2
        {
            get
            {
                if ((this.mUIGatver66041952POAvd5Window2 == null))
                {
                    this.mUIGatver66041952POAvd5Window2 = new UIGatver66041952POAvd5Window2();
                }
                return this.mUIGatver66041952POAvd5Window2;
            }
        }
        
        public UIGatver66041952POAvd5Window3 UIGatver66041952POAvd5Window3
        {
            get
            {
                if ((this.mUIGatver66041952POAvd5Window3 == null))
                {
                    this.mUIGatver66041952POAvd5Window3 = new UIGatver66041952POAvd5Window3();
                }
                return this.mUIGatver66041952POAvd5Window3;
            }
        }
        
        public UIEndrevaktkodeD2Window UIEndrevaktkodeD2Window
        {
            get
            {
                if ((this.mUIEndrevaktkodeD2Window == null))
                {
                    this.mUIEndrevaktkodeD2Window = new UIEndrevaktkodeD2Window();
                }
                return this.mUIEndrevaktkodeD2Window;
            }
        }
        
        public UIArbeidsplanVaktklassWindow UIArbeidsplanVaktklassWindow
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow == null))
                {
                    this.mUIArbeidsplanVaktklassWindow = new UIArbeidsplanVaktklassWindow();
                }
                return this.mUIArbeidsplanVaktklassWindow;
            }
        }
        
        public UIShiftClassCalculatioWindow UIShiftClassCalculatioWindow
        {
            get
            {
                if ((this.mUIShiftClassCalculatioWindow == null))
                {
                    this.mUIShiftClassCalculatioWindow = new UIShiftClassCalculatioWindow();
                }
                return this.mUIShiftClassCalculatioWindow;
            }
        }
        
        public UIArbeidsplanVaktklassWindow1 UIArbeidsplanVaktklassWindow1
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow1 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow1 = new UIArbeidsplanVaktklassWindow1();
                }
                return this.mUIArbeidsplanVaktklassWindow1;
            }
        }
        
        public UIArbeidsplanVaktklassWindow2 UIArbeidsplanVaktklassWindow2
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow2 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow2 = new UIArbeidsplanVaktklassWindow2();
                }
                return this.mUIArbeidsplanVaktklassWindow2;
            }
        }
        
        public UIVaktklassesatserWindow UIVaktklassesatserWindow
        {
            get
            {
                if ((this.mUIVaktklassesatserWindow == null))
                {
                    this.mUIVaktklassesatserWindow = new UIVaktklassesatserWindow();
                }
                return this.mUIVaktklassesatserWindow;
            }
        }
        
        public UINyevaktklassesatserWindow UINyevaktklassesatserWindow
        {
            get
            {
                if ((this.mUINyevaktklassesatserWindow == null))
                {
                    this.mUINyevaktklassesatserWindow = new UINyevaktklassesatserWindow();
                }
                return this.mUINyevaktklassesatserWindow;
            }
        }
        
        public UIArbeidsplanVaktklassWindow3 UIArbeidsplanVaktklassWindow3
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow3 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow3 = new UIArbeidsplanVaktklassWindow3();
                }
                return this.mUIArbeidsplanVaktklassWindow3;
            }
        }
        
        public UILinjeinnstillingerOsWindow UILinjeinnstillingerOsWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerOsWindow == null))
                {
                    this.mUILinjeinnstillingerOsWindow = new UILinjeinnstillingerOsWindow();
                }
                return this.mUILinjeinnstillingerOsWindow;
            }
        }
        
        public UIArbeidsplanVaktklassWindow4 UIArbeidsplanVaktklassWindow4
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow4 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow4 = new UIArbeidsplanVaktklassWindow4();
                }
                return this.mUIArbeidsplanVaktklassWindow4;
            }
        }
        
        public UIArbeidsplanVaktklassWindow5 UIArbeidsplanVaktklassWindow5
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow5 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow5 = new UIArbeidsplanVaktklassWindow5();
                }
                return this.mUIArbeidsplanVaktklassWindow5;
            }
        }
        
        public UIArbeidsplanVaktklassWindow6 UIArbeidsplanVaktklassWindow6
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow6 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow6 = new UIArbeidsplanVaktklassWindow6();
                }
                return this.mUIArbeidsplanVaktklassWindow6;
            }
        }
        
        public UIArbeidsplanVaktklassWindow7 UIArbeidsplanVaktklassWindow7
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow7 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow7 = new UIArbeidsplanVaktklassWindow7();
                }
                return this.mUIArbeidsplanVaktklassWindow7;
            }
        }
        
        public UIArbeidsplanVaktklassWindow8 UIArbeidsplanVaktklassWindow8
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow8 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow8 = new UIArbeidsplanVaktklassWindow8();
                }
                return this.mUIArbeidsplanVaktklassWindow8;
            }
        }
        
        public UIItemWindow101 UIItemWindow10
        {
            get
            {
                if ((this.mUIItemWindow10 == null))
                {
                    this.mUIItemWindow10 = new UIItemWindow101();
                }
                return this.mUIItemWindow10;
            }
        }
        
        public UIArbeidsplanVaktklassWindow9 UIArbeidsplanVaktklassWindow9
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow9 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow9 = new UIArbeidsplanVaktklassWindow9();
                }
                return this.mUIArbeidsplanVaktklassWindow9;
            }
        }
        
        public UIArbeidsplanVaktklassWindow10 UIArbeidsplanVaktklassWindow10
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow10 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow10 = new UIArbeidsplanVaktklassWindow10();
                }
                return this.mUIArbeidsplanVaktklassWindow10;
            }
        }
        
        public UIArbeidsplanVaktklassWindow11 UIArbeidsplanVaktklassWindow11
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow11 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow11 = new UIArbeidsplanVaktklassWindow11();
                }
                return this.mUIArbeidsplanVaktklassWindow11;
            }
        }
        
        public UIArbeidsplanVaktklassWindow12 UIArbeidsplanVaktklassWindow12
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow12 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow12 = new UIArbeidsplanVaktklassWindow12();
                }
                return this.mUIArbeidsplanVaktklassWindow12;
            }
        }
        
        public UIArbeidsplanVaktklassWindow13 UIArbeidsplanVaktklassWindow13
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow13 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow13 = new UIArbeidsplanVaktklassWindow13();
                }
                return this.mUIArbeidsplanVaktklassWindow13;
            }
        }
        
        public UILinjeinnstillingerNyWindow UILinjeinnstillingerNyWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerNyWindow == null))
                {
                    this.mUILinjeinnstillingerNyWindow = new UILinjeinnstillingerNyWindow();
                }
                return this.mUILinjeinnstillingerNyWindow;
            }
        }
        
        public UIArbeidsplanVaktklassWindow14 UIArbeidsplanVaktklassWindow14
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow14 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow14 = new UIArbeidsplanVaktklassWindow14();
                }
                return this.mUIArbeidsplanVaktklassWindow14;
            }
        }
        
        public UILinjeinnstillingerKuWindow UILinjeinnstillingerKuWindow
        {
            get
            {
                if ((this.mUILinjeinnstillingerKuWindow == null))
                {
                    this.mUILinjeinnstillingerKuWindow = new UILinjeinnstillingerKuWindow();
                }
                return this.mUILinjeinnstillingerKuWindow;
            }
        }
        
        public UIArbeidsplanVaktklassWindow15 UIArbeidsplanVaktklassWindow15
        {
            get
            {
                if ((this.mUIArbeidsplanVaktklassWindow15 == null))
                {
                    this.mUIArbeidsplanVaktklassWindow15 = new UIArbeidsplanVaktklassWindow15();
                }
                return this.mUIArbeidsplanVaktklassWindow15;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddPeterHaberParams mAddPeterHaberParams;
        
        private ChangeDshiftMonEklandToNParams mChangeDshiftMonEklandToNParams;
        
        private CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues mCheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues;
        
        private CheckButtonEnabled_C3_S3ExpectedValues mCheckButtonEnabled_C3_S3ExpectedValues;
        
        private CheckCalculationEkland_C1_S8ExpectedValues mCheckCalculationEkland_C1_S8ExpectedValues;
        
        private CheckCalculationEkland_C1_S9ExpectedValues mCheckCalculationEkland_C1_S9ExpectedValues;
        
        private CheckCalculationEklandTwoLines_C1_S12ExpectedValues mCheckCalculationEklandTwoLines_C1_S12ExpectedValues;
        
        private CheckCalculations_C1_S19ExpectedValues mCheckCalculations_C1_S19ExpectedValues;
        
        private CheckCalculations_C2_S2ExpectedValues mCheckCalculations_C2_S2ExpectedValues;
        
        private CheckCalculations_C2_S3ExpectedValues mCheckCalculations_C2_S3ExpectedValues;
        
        private CheckCalculations_C2_S5ExpectedValues mCheckCalculations_C2_S5ExpectedValues;
        
        private CheckCalculations_C3_S11ExpectedValues mCheckCalculations_C3_S11ExpectedValues;
        
        private CheckCalculations_C3_S15ExpectedValues mCheckCalculations_C3_S15ExpectedValues;
        
        private CheckCalculations_C3_S16ExpectedValues mCheckCalculations_C3_S16ExpectedValues;
        
        private CheckCalculations_C3_S3ExpectedValues mCheckCalculations_C3_S3ExpectedValues;
        
        private CheckCalculations_C4_S10ExpectedValues mCheckCalculations_C4_S10ExpectedValues;
        
        private CheckCalculations_C4_S13ExpectedValues mCheckCalculations_C4_S13ExpectedValues;
        
        private CheckCalculations_C4_S15ExpectedValues mCheckCalculations_C4_S15ExpectedValues;
        
        private CheckCalculations_C4_S19ExpectedValues mCheckCalculations_C4_S19ExpectedValues;
        
        private CheckCalculations_C4_S20ExpectedValues mCheckCalculations_C4_S20ExpectedValues;
        
        private CheckCalculations_C4_S21ExpectedValues mCheckCalculations_C4_S21ExpectedValues;
        
        private CheckCalculations_C4_S25ExpectedValues mCheckCalculations_C4_S25ExpectedValues;
        
        private CheckCalculations_C4_S28ExpectedValues mCheckCalculations_C4_S28ExpectedValues;
        
        private CheckCalculations_C4_S29ExpectedValues mCheckCalculations_C4_S29ExpectedValues;
        
        private CheckCalculations_C4_S3ExpectedValues mCheckCalculations_C4_S3ExpectedValues;
        
        private CheckCalculations_C4_S30ExpectedValues mCheckCalculations_C4_S30ExpectedValues;
        
        private CheckCalculations_C4_S5ExpectedValues mCheckCalculations_C4_S5ExpectedValues;
        
        private CheckCalculations_C5_S2ExpectedValues mCheckCalculations_C5_S2ExpectedValues;
        
        private CheckCalculations_C5_S4ExpectedValues mCheckCalculations_C5_S4ExpectedValues;
        
        private CheckCalculations_C5_S5ExpectedValues mCheckCalculations_C5_S5ExpectedValues;
        
        private CheckCalculations_C5_S6ExpectedValues mCheckCalculations_C5_S6ExpectedValues;
        
        private CheckCalculations_C6_S13ExpectedValues mCheckCalculations_C6_S13ExpectedValues;
        
        private CheckCalculations_C6_S17ExpectedValues mCheckCalculations_C6_S17ExpectedValues;
        
        private CheckCalculations_C6_S21ExpectedValues mCheckCalculations_C6_S21ExpectedValues;
        
        private CheckCalculations_C6_S26ExpectedValues mCheckCalculations_C6_S26ExpectedValues;
        
        private CheckCalculations_C6_S30ExpectedValues mCheckCalculations_C6_S30ExpectedValues;
        
        private CheckCalculations_C6_S33ExpectedValues mCheckCalculations_C6_S33ExpectedValues;
        
        private CheckCalculations_C6_S5ExpectedValues mCheckCalculations_C6_S5ExpectedValues;
        
        private CheckCalculations_C6_S7ExpectedValues mCheckCalculations_C6_S7ExpectedValues;
        
        private CheckCalculations_C6_S9ExpectedValues mCheckCalculations_C6_S9ExpectedValues;
        
        private CheckCalulateFTTButtonDisabledExpectedValues mCheckCalulateFTTButtonDisabledExpectedValues;
        
        private CheckEditShiftClassesDisabled_C6_S2ExpectedValues mCheckEditShiftClassesDisabled_C6_S2ExpectedValues;
        
        private CheckFTT1IsReadyInExportLogExpectedValues mCheckFTT1IsReadyInExportLogExpectedValues;
        
        private CheckFTTcode400_C1_S5ExpectedValues mCheckFTTcode400_C1_S5ExpectedValues;
        
        private CheckFTTcode410_C1_S5ExpectedValues mCheckFTTcode410_C1_S5ExpectedValues;
        
        private CheckFTTEmployeesToTransfereExpectedValues mCheckFTTEmployeesToTransfereExpectedValues;
        
        private CheckFTTEmployeesToTransfere_C2_S24ExpectedValues mCheckFTTEmployeesToTransfere_C2_S24ExpectedValues;
        
        private CheckFTTEmployeesToTransfere_C6_S23ExpectedValues mCheckFTTEmployeesToTransfere_C6_S23ExpectedValues;
        
        private CheckFTTEmployeesToTransfere_C6_S35ExpectedValues mCheckFTTEmployeesToTransfere_C6_S35ExpectedValues;
        
        private CheckFTTEmployeesToTransfereValuesExpectedValues mCheckFTTEmployeesToTransfereValuesExpectedValues;
        
        private CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues mCheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues;
        
        private CheckFTThasEmptyListExpectedValues mCheckFTThasEmptyListExpectedValues;
        
        private CheckFTTPeriod_C1_S5ExpectedValues mCheckFTTPeriod_C1_S5ExpectedValues;
        
        private CheckFTTransfereButtonIsDisabledExpectedValues mCheckFTTransfereButtonIsDisabledExpectedValues;
        
        private CheckFTTransfereButtonIsEnabledExpectedValues mCheckFTTransfereButtonIsEnabledExpectedValues;
        
        private CheckFTTransfereStormareHasOneLineExpectedValues mCheckFTTransfereStormareHasOneLineExpectedValues;
        
        private CheckMaxMasterDetails_C3_S5ExpectedValues mCheckMaxMasterDetails_C3_S5ExpectedValues;
        
        private CheckNoCalculationEkland_C1_S7ExpectedValues mCheckNoCalculationEkland_C1_S7ExpectedValues;
        
        private CheckShiftClassesData_C6_S10ExpectedValues mCheckShiftClassesData_C6_S10ExpectedValues;
        
        private CheckShiftClassesData_C6_S14ExpectedValues mCheckShiftClassesData_C6_S14ExpectedValues;
        
        private CheckShiftClassesData_C6_S18ExpectedValues mCheckShiftClassesData_C6_S18ExpectedValues;
        
        private CheckShiftClassesData_C6_S22ExpectedValues mCheckShiftClassesData_C6_S22ExpectedValues;
        
        private CheckShiftClassesData_C6_S27ExpectedValues mCheckShiftClassesData_C6_S27ExpectedValues;
        
        private CheckShiftClassesData_C6_S29ExpectedValues mCheckShiftClassesData_C6_S29ExpectedValues;
        
        private CheckShiftClassesData_C6_S34ExpectedValues mCheckShiftClassesData_C6_S34ExpectedValues;
        
        private CheckShiftClassesData_C6_S6ExpectedValues mCheckShiftClassesData_C6_S6ExpectedValues;
        
        private CheckShiftClassesData_C6_S8ExpectedValues mCheckShiftClassesData_C6_S8ExpectedValues;
        
        private CheckStellanCalculations_C2_S10ExpectedValues mCheckStellanCalculations_C2_S10ExpectedValues;
        
        private CheckStellanCalculations_C2_S11ExpectedValues mCheckStellanCalculations_C2_S11ExpectedValues;
        
        private CheckStellanCalculations_C2_S9ExpectedValues mCheckStellanCalculations_C2_S9ExpectedValues;
        
        private CheckStellanEdwallIsExported_C2_S16ExpectedValues mCheckStellanEdwallIsExported_C2_S16ExpectedValues;
        
        private CheckStormareCalculations_C2_S14ExpectedValues mCheckStormareCalculations_C2_S14ExpectedValues;
        
        private CheckStormareCalculations_C2_S23ExpectedValues mCheckStormareCalculations_C2_S23ExpectedValues;
        
        private CheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues mCheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues;
        
        private CheckStormareNoCalculations_C2_S21ExpectedValues mCheckStormareNoCalculations_C2_S21ExpectedValues;
        
        private CheckTransAndStopIsDisabled_C1_S11ExpectedValues mCheckTransAndStopIsDisabled_C1_S11ExpectedValues;
        
        private CheckTransferedFTTValuesExpectedValues mCheckTransferedFTTValuesExpectedValues;
        
        private CheckTransferedFTTValues_C1_S26ExpectedValues mCheckTransferedFTTValues_C1_S26ExpectedValues;
        
        private CheckTransferedFTTValues_C1_S6ExpectedValues mCheckTransferedFTTValues_C1_S6ExpectedValues;
        
        private CheckTransferedFTTValues_C3_S21ExpectedValues mCheckTransferedFTTValues_C3_S21ExpectedValues;
        
        private CheckTransferedFTTValues_C3_S6ExpectedValues mCheckTransferedFTTValues_C3_S6ExpectedValues;
        
        private CheckTransferedFTTValues_C5_S7ExpectedValues mCheckTransferedFTTValues_C5_S7ExpectedValues;
        
        private CheckTransferedFTTValues_C6_S24ExpectedValues mCheckTransferedFTTValues_C6_S24ExpectedValues;
        
        private CheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues mCheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues;
        
        private CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues mCheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues;
        
        private CheckTransferedFTTValuesStormare_C2_S15ExpectedValues mCheckTransferedFTTValuesStormare_C2_S15ExpectedValues;
        
        private CheckTransferedFTTValuesStormare_C2_S17ExpectedValues mCheckTransferedFTTValuesStormare_C2_S17ExpectedValues;
        
        private CheckTransferePeriodExpectedValues mCheckTransferePeriodExpectedValues;
        
        private CheckTransferFTTButtonDisabledExpectedValues mCheckTransferFTTButtonDisabledExpectedValues;
        
        private CheckTransferFTTButtonEnabledExpectedValues mCheckTransferFTTButtonEnabledExpectedValues;
        
        private CheckTransferPeriod_C1_S20ExpectedValues mCheckTransferPeriod_C1_S20ExpectedValues;
        
        private CheckTransferPeriodAndEmployees_C2_S4ExpectedValues mCheckTransferPeriodAndEmployees_C2_S4ExpectedValues;
        
        private CheckTransferUTAandPeriod_C1_S25ExpectedValues mCheckTransferUTAandPeriod_C1_S25ExpectedValues;
        
        private CheckUTACalculationEndre_Garbo_C1_S23ExpectedValues mCheckUTACalculationEndre_Garbo_C1_S23ExpectedValues;
        
        private CheckUTACalculationGarbo_C1_S24ExpectedValues mCheckUTACalculationGarbo_C1_S24ExpectedValues;
        
        private CheckUTCalculationEndre_Garbo_C1_S24ExpectedValues mCheckUTCalculationEndre_Garbo_C1_S24ExpectedValues;
        
        private ConnectWhishplanEaster2016ToCopyOfFFTBaseplanParams mConnectWhishplanEaster2016ToCopyOfFFTBaseplanParams;
        
        private CreateAbsenceWithCode45_1Params mCreateAbsenceWithCode45_1Params;
        
        private CreateAbsenceWithCode45_2Params mCreateAbsenceWithCode45_2Params;
        
        private DeleteA1shiftTueWeek2Line2StormareParams mDeleteA1shiftTueWeek2Line2StormareParams;
        
        private EditF3PlanSettingsParams mEditF3PlanSettingsParams;
        
        private EditLineSettingsRheborgParams mEditLineSettingsRheborgParams;
        
        private EditOscarssonLine_C6_11Params mEditOscarssonLine_C6_11Params;
        
        private EditOscarssonLine_C6_15Params mEditOscarssonLine_C6_15Params;
        
        private EditOscarssonLine2_C6_20Params mEditOscarssonLine2_C6_20Params;
        
        private EditVollterLine_C6_9Params mEditVollterLine_C6_9Params;
        
        private ExpandMasterDetailsForAllEmployeesParams mExpandMasterDetailsForAllEmployeesParams;
        
        private InsertA1shiftSatWeek4Line2StormareParams mInsertA1shiftSatWeek4Line2StormareParams;
        
        private InsertA1shiftTueWeek2Line2StormareParams mInsertA1shiftTueWeek2Line2StormareParams;
        
        private InsertA1shiftWedWeek3Line2StormareParams mInsertA1shiftWedWeek3Line2StormareParams;
        
        private InsertAandDshiftsWeek4Line2PersbrandtParams mInsertAandDshiftsWeek4Line2PersbrandtParams;
        
        private InsertAshiftMondayParams mInsertAshiftMondayParams;
        
        private InsertD1shiftsLine1And2HaberParams mInsertD1shiftsLine1And2HaberParams;
        
        private InsertD1shiftsLine2RheborgParams mInsertD1shiftsLine2RheborgParams;
        
        private InsertD2SunOscarssonParams mInsertD2SunOscarssonParams;
        
        private InsertDHshiftWeek3Line3GustavssonParams mInsertDHshiftWeek3Line3GustavssonParams;
        
        private InsertDshift3WeeksEndreGarboParams mInsertDshift3WeeksEndreGarboParams;
        
        private InsertDshiftMonEklandParams mInsertDshiftMonEklandParams;
        
        private InsertDshiftWeek1And2GustavssonParams mInsertDshiftWeek1And2GustavssonParams;
        
        private InsertDshiftWeek1Line4GustavssonParams mInsertDshiftWeek1Line4GustavssonParams;
        
        private InsertF3shiftLine2RheborgParams mInsertF3shiftLine2RheborgParams;
        
        private InsertHJ2ThuVollterParams mInsertHJ2ThuVollterParams;
        
        private InsertNshiftMonEklandParams mInsertNshiftMonEklandParams;
        
        private InsertNshiftMonWeek2EklandParams mInsertNshiftMonWeek2EklandParams;
        
        private InsertNshiftMonWeek3EklandParams mInsertNshiftMonWeek3EklandParams;
        
        private InsertNshiftMonWeek3StormareParams mInsertNshiftMonWeek3StormareParams;
        
        private InsertShiftsWeek2AndshiftWeek3_C3_S19Params mInsertShiftsWeek2AndshiftWeek3_C3_S19Params;
        
        private SelectShowAllEmpsInExportFTTWindowParams mSelectShowAllEmpsInExportFTTWindowParams;
        
        private ShowFTTAsAveragePrMndParams mShowFTTAsAveragePrMndParams;
        
        private ShowFTTAsAveragePrMndCalendarPlanParams mShowFTTAsAveragePrMndCalendarPlanParams;
        
        private ShowFTTAsTotalCalendarPlanParams mShowFTTAsTotalCalendarPlanParams;
        
        private UIArbeidsplanFTTArbeidWindow mUIArbeidsplanFTTArbeidWindow;
        
        private UINyarbeidsplanWindow mUINyarbeidsplanWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIArbeidsplanKopiavFTTWindow mUIArbeidsplanKopiavFTTWindow;
        
        private UIArbeidsplanKopiavFTTWindow1 mUIArbeidsplanKopiavFTTWindow1;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UILinjeinnstillingerEkWindow mUILinjeinnstillingerEkWindow;
        
        private UIArbeidsplanKopiavFTTWindow2 mUIArbeidsplanKopiavFTTWindow2;
        
        private UIArbeidsplanKopiavFTTWindow3 mUIArbeidsplanKopiavFTTWindow3;
        
        private UIOverførtilleggWindow mUIOverførtilleggWindow;
        
        private UIExportloggWindow mUIExportloggWindow;
        
        private UIEttersystemeksportdeWindow mUIEttersystemeksportdeWindow;
        
        private UIArbeidsplanInnstilliWindow mUIArbeidsplanInnstilliWindow;
        
        private UIArbeidsplanKopiavFTTWindow4 mUIArbeidsplanKopiavFTTWindow4;
        
        private UIArbeidsplanKopiavFTTWindow5 mUIArbeidsplanKopiavFTTWindow5;
        
        private UIArbeidsplanKopiavFTTWindow6 mUIArbeidsplanKopiavFTTWindow6;
        
        private UIArbeidsplanKopiavFTTWindow7 mUIArbeidsplanKopiavFTTWindow7;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIArbeidsplanKopiavFTTWindow8 mUIArbeidsplanKopiavFTTWindow8;
        
        private UIArbeidsplanKopiavFTTWindow9 mUIArbeidsplanKopiavFTTWindow9;
        
        private UILinjeinnstillingerGaWindow mUILinjeinnstillingerGaWindow;
        
        private UIArbeidsplanFTTKalendWindow mUIArbeidsplanFTTKalendWindow;
        
        private UINykalenderplanWindow mUINykalenderplanWindow;
        
        private UIArbeidsplanFTTJanuarWindow mUIArbeidsplanFTTJanuarWindow;
        
        private UIArbeidsplanFTTJanuarWindow1 mUIArbeidsplanFTTJanuarWindow1;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIFraværiarbeidsplanWindow mUIFraværiarbeidsplanWindow;
        
        private UIGT4001InformasjonWindow mUIGT4001InformasjonWindow;
        
        private UIArbeidsplanFTTKalendWindow1 mUIArbeidsplanFTTKalendWindow1;
        
        private UILinjeinnstillingerStWindow mUILinjeinnstillingerStWindow;
        
        private UIGyldighetsperiodeWindow mUIGyldighetsperiodeWindow;
        
        private UIArbeidsplanFTTKalendWindow2 mUIArbeidsplanFTTKalendWindow2;
        
        private UIStopptilleggWindow mUIStopptilleggWindow;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIArbeidsplanFTTJanuarWindow2 mUIArbeidsplanFTTJanuarWindow2;
        
        private UIArbeidsplanFFTBaseplWindow mUIArbeidsplanFFTBaseplWindow;
        
        private UINybaseplanWindow mUINybaseplanWindow;
        
        private UIArbeidsplanKopiavFFTWindow mUIArbeidsplanKopiavFFTWindow;
        
        private UIGatver66041952ASCLAvWindow mUIGatver66041952ASCLAvWindow;
        
        private UIØnskeplanperiodeWindow mUIØnskeplanperiodeWindow;
        
        private UIKobleønskeplanperiodWindow mUIKobleønskeplanperiodWindow;
        
        private UIArbeidsplanKopiavFTTWindow10 mUIArbeidsplanKopiavFTTWindow10;
        
        private UIArbeidsplanØnskeplanWindow mUIArbeidsplanØnskeplanWindow;
        
        private UIGatver66041952ASCLAvWindow1 mUIGatver66041952ASCLAvWindow1;
        
        private UIArbeidsplanØnskeplanWindow1 mUIArbeidsplanØnskeplanWindow1;
        
        private UIArbeidsplanFTTUkeregWindow mUIArbeidsplanFTTUkeregWindow;
        
        private UIArbeidsplanKopiavFTTWindow11 mUIArbeidsplanKopiavFTTWindow11;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIArbeidsplanKopiavFTTWindow12 mUIArbeidsplanKopiavFTTWindow12;
        
        private UIItemWindow11 mUIItemWindow11;
        
        private UIItemWindow7 mUIItemWindow7;
        
        private UIItemWindow12 mUIItemWindow12;
        
        private UIItemWindow6 mUIItemWindow6;
        
        private UIItemWindow8 mUIItemWindow8;
        
        private UILinjeinnstillingerPeWindow mUILinjeinnstillingerPeWindow;
        
        private UILinjeinnstillingerRhWindow mUILinjeinnstillingerRhWindow;
        
        private UIItemWindow9 mUIItemWindow9;
        
        private UIArbeidsplanoppsettWindow mUIArbeidsplanoppsettWindow;
        
        private UIAnsatteiarbeidsplanWindow mUIAnsatteiarbeidsplanWindow;
        
        private UILeggtilansatteWindow mUILeggtilansatteWindow;
        
        private UIArbeidsplanKopiavFTTWindow13 mUIArbeidsplanKopiavFTTWindow13;
        
        private UILinjeinnstillingerJäWindow mUILinjeinnstillingerJäWindow;
        
        private UIGatver66041952POAvd5Window mUIGatver66041952POAvd5Window;
        
        private UIGatver66041952POAvd5Window1 mUIGatver66041952POAvd5Window1;
        
        private UIGatver66041952POAvd5Window2 mUIGatver66041952POAvd5Window2;
        
        private UIGatver66041952POAvd5Window3 mUIGatver66041952POAvd5Window3;
        
        private UIEndrevaktkodeD2Window mUIEndrevaktkodeD2Window;
        
        private UIArbeidsplanVaktklassWindow mUIArbeidsplanVaktklassWindow;
        
        private UIShiftClassCalculatioWindow mUIShiftClassCalculatioWindow;
        
        private UIArbeidsplanVaktklassWindow1 mUIArbeidsplanVaktklassWindow1;
        
        private UIArbeidsplanVaktklassWindow2 mUIArbeidsplanVaktklassWindow2;
        
        private UIVaktklassesatserWindow mUIVaktklassesatserWindow;
        
        private UINyevaktklassesatserWindow mUINyevaktklassesatserWindow;
        
        private UIArbeidsplanVaktklassWindow3 mUIArbeidsplanVaktklassWindow3;
        
        private UILinjeinnstillingerOsWindow mUILinjeinnstillingerOsWindow;
        
        private UIArbeidsplanVaktklassWindow4 mUIArbeidsplanVaktklassWindow4;
        
        private UIArbeidsplanVaktklassWindow5 mUIArbeidsplanVaktklassWindow5;
        
        private UIArbeidsplanVaktklassWindow6 mUIArbeidsplanVaktklassWindow6;
        
        private UIArbeidsplanVaktklassWindow7 mUIArbeidsplanVaktklassWindow7;
        
        private UIArbeidsplanVaktklassWindow8 mUIArbeidsplanVaktklassWindow8;
        
        private UIItemWindow101 mUIItemWindow10;
        
        private UIArbeidsplanVaktklassWindow9 mUIArbeidsplanVaktklassWindow9;
        
        private UIArbeidsplanVaktklassWindow10 mUIArbeidsplanVaktklassWindow10;
        
        private UIArbeidsplanVaktklassWindow11 mUIArbeidsplanVaktklassWindow11;
        
        private UIArbeidsplanVaktklassWindow12 mUIArbeidsplanVaktklassWindow12;
        
        private UIArbeidsplanVaktklassWindow13 mUIArbeidsplanVaktklassWindow13;
        
        private UILinjeinnstillingerNyWindow mUILinjeinnstillingerNyWindow;
        
        private UIArbeidsplanVaktklassWindow14 mUIArbeidsplanVaktklassWindow14;
        
        private UILinjeinnstillingerKuWindow mUILinjeinnstillingerKuWindow;
        
        private UIArbeidsplanVaktklassWindow15 mUIArbeidsplanVaktklassWindow15;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddPeterHaber'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddPeterHaberParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'ceDoIncludeExistingEmployees' check box
        /// </summary>
        public bool UICeDoIncludeExistingECheckBoxChecked = true;
        
        /// <summary>
        /// Type 'True' in 'Node12' TreeListNode
        /// </summary>
        public bool UINode12TreeListNodeChecked = true;
        
        /// <summary>
        /// Type 'False' in 'Node13' TreeListNode
        /// </summary>
        public bool UINode13TreeListNodeChecked = false;
        
        /// <summary>
        /// Type 'System.Double' in 'ePositionPercent' text box
        /// </summary>
        public string UIEPositionPercentEditValueTypeName = "System.Double";
        
        /// <summary>
        /// Type '50' in 'ePositionPercent' text box
        /// </summary>
        public string UIEPositionPercentEditValueAsString = "50";
        
        /// <summary>
        /// Type '{Tab}' in 'ePositionPercent' text box
        /// </summary>
        public string UIEPositionPercentEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeDshiftMonEklandToN'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ChangeDshiftMonEklandToNParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'n' in '[Row]3[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEditValueAsString = "n";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]3[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAdamsMasterDetailsPreviousTransfers_C1_S21'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckAdamsMasterDetailsPreviousTransfers_C1_S21ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
        /// </summary>
        public string UIItem400LørSøndagstilCell1Text = "400 - Lør./Søndagstillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '41,62' cell equals '26,76'
        /// </summary>
        public string UIItem4162CellText = "26,76";
        
        /// <summary>
        /// Verify that the 'Text' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
        /// </summary>
        public string UIItem410KveldNattilleCell1Text = "410 - Kveld/Nattillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '41,62' cell equals '38,65'
        /// </summary>
        public string UIItem4162Cell1Text = "38,65";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]4[Column]colFrom1' text box equals '05.08.2024'
        /// </summary>
        public string UIRow4ColumncolFrom1EditValueAsString = "05.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]4[Column]colTo1' text box equals '25.08.2024'
        /// </summary>
        public string UIRow4ColumncolTo1EditValueAsString = "25.08.2024";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckButtonEnabled_C3_S3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckButtonEnabled_C3_S3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Kalkuler' button equals 'True'
        /// </summary>
        public bool UIKalkulerButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Overfør...' button equals 'False'
        /// </summary>
        public bool UIOverførButtonEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Stopp...' button equals 'False'
        /// </summary>
        public bool UIStoppButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculationEkland_C1_S8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculationEkland_C1_S8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ekland, Britt' PivotGridFieldValue equals 'Ekland, Britt'
        /// </summary>
        public string UIEklandBrittPivotGridFieldValueValueAsString = "Ekland, Britt";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCellValueAsString = "2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8' PivotGridCell equals '8'
        /// </summary>
        public string UIItem8PivotGridCellValueAsString = "8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculationEkland_C1_S9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculationEkland_C1_S9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2' PivotGridCell equals '6'
        /// </summary>
        public string UIItem2PivotGridCellValueAsString = "6";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8' PivotGridCell equals '24'
        /// </summary>
        public string UIItem8PivotGridCellValueAsString = "24";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculationEklandTwoLines_C1_S12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculationEklandTwoLines_C1_S12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCellValueAsString = "2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8' PivotGridCell equals '8'
        /// </summary>
        public string UIItem8PivotGridCellValueAsString = "8";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '18' PivotGridCell equals '2'
        /// </summary>
        public string UIItem18PivotGridCell1ValueAsString = "2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28' PivotGridCell equals '8'
        /// </summary>
        public string UIItem28PivotGridCell2ValueAsString = "8";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ekland, Britt' PivotGridFieldValue equals 'Ekland, Britt'
        /// </summary>
        public string UIEklandBrittPivotGridFieldValueValueAsString = "Ekland, Britt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C1_S19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C1_S19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '0' PivotGridCell equals '18'
        /// </summary>
        public string UIItem0PivotGridCellValueAsString = "18";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28' PivotGridCell equals '26'
        /// </summary>
        public string UIItem28PivotGridCellValueAsString = "26";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8' PivotGridCell equals '8'
        /// </summary>
        public string UIItem8PivotGridCellValueAsString = "8";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '17,25' PivotGridCell equals '16.25'
        /// </summary>
        public string UIItem1725PivotGridCellValueAsString = "16.25";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8' PivotGridCell equals '2'
        /// </summary>
        public string UIItem8PivotGridCell1ValueAsString = "2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '14' PivotGridCell equals '8'
        /// </summary>
        public string UIItem14PivotGridCellValueAsString = "8";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6' PivotGridCell equals '6'
        /// </summary>
        public string UIItem6PivotGridCellValueAsString = "6";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '24' PivotGridCell equals '24'
        /// </summary>
        public string UIItem24PivotGridCellValueAsString = "24";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '18' PivotGridCell equals '18'
        /// </summary>
        public string UIItem18PivotGridCell1ValueAsString = "18";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28' PivotGridCell equals '26'
        /// </summary>
        public string UIItem28PivotGridCell2ValueAsString = "26";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '18' PivotGridCell equals '18'
        /// </summary>
        public string UIItem18PivotGridCellValueAsString = "18";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28' PivotGridCell equals '26'
        /// </summary>
        public string UIItem28PivotGridCellValueAsString1 = "26";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C2_S2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C2_S2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Skarsgård, Stellan' PivotGridFieldValue equals 'Skarsgård, Stellan'
        /// </summary>
        public string UISkarsgårdStellanPivotGridFieldValueValueAsString = "Skarsgård, Stellan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '10' PivotGridCell equals '10'
        /// </summary>
        public string UIItem10PivotGridCellValueAsString = "10";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '20' PivotGridCell equals '20'
        /// </summary>
        public string UIItem20PivotGridCellValueAsString = "20";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Stormare, Peter' PivotGridFieldValue equals 'Stormare, Peter'
        /// </summary>
        public string UIStormarePeterPivotGridFieldValueValueAsString = "Stormare, Peter";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '10' PivotGridCell equals '10'
        /// </summary>
        public string UIItem10PivotGridCell1ValueAsString = "10";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '20' PivotGridCell equals '20'
        /// </summary>
        public string UIItem20PivotGridCell1ValueAsString = "20";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Edwall, Allan' PivotGridFieldValue equals 'Edwall, Allan'
        /// </summary>
        public string UIEdwallAllanPivotGridFieldValueValueAsString = "Edwall, Allan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3,25' PivotGridCell equals '3.25'
        /// </summary>
        public string UIItem325PivotGridCellValueAsString = "3.25";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'VAKANT4' PivotGridFieldValue equals 'VAKANT4'
        /// </summary>
        public string UIVAKANT4PivotGridFieldValueValueAsString = "VAKANT4";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3,25' PivotGridCell equals '3.25'
        /// </summary>
        public string UIItem325PivotGridCell1ValueAsString = "3.25";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C2_S3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C2_S3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Skarsgård, Stellan' PivotGridFieldValue equals 'Skarsgård, Stellan'
        /// </summary>
        public string UISkarsgårdStellanPivotGridFieldValueValueAsString = "Skarsgård, Stellan";
        
        /// <summary>
        /// Verify that the 'Text' property of '10' PivotGridCell equals '11,15'
        /// </summary>
        public string UIItem10PivotGridCellText = "11,15";
        
        /// <summary>
        /// Verify that the 'Text' property of '20' PivotGridCell equals '22,3'
        /// </summary>
        public string UIItem20PivotGridCellText = "22,3";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Stormare, Peter' PivotGridFieldValue equals 'Stormare, Peter'
        /// </summary>
        public string UIStormarePeterPivotGridFieldValueValueAsString = "Stormare, Peter";
        
        /// <summary>
        /// Verify that the 'Text' property of '10' PivotGridCell equals '11,15'
        /// </summary>
        public string UIItem10PivotGridCell1Text = "11,15";
        
        /// <summary>
        /// Verify that the 'Text' property of '20' PivotGridCell equals '22,3'
        /// </summary>
        public string UIItem20PivotGridCell1Text = "22,3";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,25' PivotGridCell equals '3,62'
        /// </summary>
        public string UIItem325PivotGridCellText = "3,62";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'VAKANT4' PivotGridFieldValue equals 'VAKANT4'
        /// </summary>
        public string UIVAKANT4PivotGridFieldValueValueAsString = "VAKANT4";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,25' PivotGridCell equals '3,62'
        /// </summary>
        public string UIItem325PivotGridCell1Text = "3,62";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C2_S5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C2_S5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
        /// </summary>
        public string UIItem410KveldNattilleCellValueAsString = "410 - Kveld/Nattillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '22,3' cell equals '22,3'
        /// </summary>
        public string UIItem223CellText = "22,3";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
        /// </summary>
        public string UIItem400LørSøndagstilCellValueAsString = "400 - Lør./Søndagstillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '11,15' cell equals '11,15'
        /// </summary>
        public string UIItem1115CellText = "11,15";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C3_S11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C3_S11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8' PivotGridCell equals '8'
        /// </summary>
        public string UIItem8PivotGridCellValueAsString = "8";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '42' PivotGridCell equals '42'
        /// </summary>
        public string UIItem42PivotGridCellValueAsString = "42";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '20' PivotGridCell equals '20'
        /// </summary>
        public string UIItem20PivotGridCellValueAsString = "20";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C3_S15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C3_S15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8' PivotGridCell equals '36'
        /// </summary>
        public string UIItem8PivotGridCellValueAsString = "36";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '42' PivotGridCell equals '20'
        /// </summary>
        public string UIItem42PivotGridCellValueAsString = "20";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C3_S16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C3_S16ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8' PivotGridCell equals '10'
        /// </summary>
        public string UIItem8PivotGridCellValueAsString = "10";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '42' PivotGridCell equals '26'
        /// </summary>
        public string UIItem42PivotGridCellValueAsString = "34";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '20' PivotGridCell equals '16'
        /// </summary>
        public string UIItem20PivotGridCellValueAsString = "16";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C3_S3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C3_S3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '11,89' PivotGridCell equals '11,89'
        /// </summary>
        public string UIItem1189PivotGridCellText = "11,89";
        
        /// <summary>
        /// Verify that the 'Text' property of '62,44' PivotGridCell equals '62,44'
        /// </summary>
        public string UIItem6244PivotGridCellText = "62,44";
        
        /// <summary>
        /// Verify that the 'Text' property of '29,73' PivotGridCell equals '29,73'
        /// </summary>
        public string UIItem2973PivotGridCellText = "29,73";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Gustavsson, Robert' PivotGridFieldValue equals 'Gustavsson, Robert'
        /// </summary>
        public string UIGustavssonRobertPivotGridFieldValueValueAsString = "Gustavsson, Robert";
        
        /// <summary>
        /// Verify that the 'Text' property of '15,53' PivotGridCell equals '23,53'
        /// </summary>
        public string UIItem1553PivotGridCellText = "23,53";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '23,25' PivotGridCell equals '31.25'
        /// </summary>
        public string UIItem2325PivotGridCellValueAsString = "31.25";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '15,53' PivotGridCell equals '31,53'
        /// </summary>
        public string UIItem1553PivotGridCellText = "31,53";
        
        /// <summary>
        /// Verify that the 'Text' property of '23,25' PivotGridCell equals '31,25'
        /// </summary>
        public string UIItem2325PivotGridCellText = "31,25";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Persbrandt, Mikael' PivotGridFieldValue equals 'Gustavsson, Robert'
        /// </summary>
        public string UIPersbrandtMikaelPivotGridFieldValueValueAsString = "Gustavsson, Robert";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Gustavsson, Robert' PivotGridFieldValue equals 'Rheborg, Johan'
        /// </summary>
        public string UIGustavssonRobertPivotGridFieldValueValueAsString = "Rheborg, Johan";
        
        /// <summary>
        /// Verify that the 'Text' property of '8' PivotGridCell equals '31,53'
        /// </summary>
        public string UIItem8PivotGridCellText = "31,53";
        
        /// <summary>
        /// Verify that the 'Text' property of '31,25' PivotGridCell equals '31,25'
        /// </summary>
        public string UIItem3125PivotGridCellText = "31,25";
        
        /// <summary>
        /// Verify that the 'Text' property of '15,53' PivotGridCell equals '0,02'
        /// </summary>
        public string UIItem1553PivotGridCellText = "0,02";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Persbrandt, Mikael' PivotGridFieldValue equals 'Persbrandt, Mikael'
        /// </summary>
        public string UIPersbrandtMikaelPivotGridFieldValueValueAsString = "Persbrandt, Mikael";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6' PivotGridCell equals '6'
        /// </summary>
        public string UIItem6PivotGridCellValueAsString = "6";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '15,53' PivotGridCell equals '16'
        /// </summary>
        public string UIItem1553PivotGridCellValueAsString = "16";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '23,25' PivotGridCell equals '12'
        /// </summary>
        public string UIItem2325PivotGridCellValueAsString = "12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S20ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Rheborg, Johan' PivotGridFieldValue equals 'Rheborg, Johan'
        /// </summary>
        public string UIRheborgJohanPivotGridFieldValue1ValueAsString = "Rheborg, Johan";
        
        /// <summary>
        /// Verify that the 'Text' property of '20,02' PivotGridCell equals '20,02'
        /// </summary>
        public string UIItem2002PivotGridCellText = "20,02";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S21'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S21ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '20,02' PivotGridCell equals '13,02'
        /// </summary>
        public string UIItem2002PivotGridCellText = "13,02";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S25'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S25ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Rheborg, Johan' PivotGridFieldValue equals 'Rheborg, Johan'
        /// </summary>
        public string UIRheborgJohanPivotGridFieldValue1ValueAsString = "Rheborg, Johan";
        
        /// <summary>
        /// Verify that the 'Text' property of '20,02' PivotGridCell equals '13,02'
        /// </summary>
        public string UIItem2002PivotGridCellText = "13,02";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCellText = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of '31,53' PivotGridCell equals '31,53'
        /// </summary>
        public string UIItem3153PivotGridCellText = "31,53";
        
        /// <summary>
        /// Verify that the 'Text' property of '31,25' PivotGridCell equals '31,25'
        /// </summary>
        public string UIItem3125PivotGridCell1Text = "31,25";
        
        /// <summary>
        /// Verify that the 'Text' property of '15,53' PivotGridCell equals '16'
        /// </summary>
        public string UIItem1553PivotGridCellText = "16";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '23,25' PivotGridCell equals '12'
        /// </summary>
        public string UIItem2325PivotGridCellValueAsString = "12";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals '6'
        /// </summary>
        public string UIItem6PivotGridCellText = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S28'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S28ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Haber, Peter' PivotGridFieldValue equals 'Haber, Peter'
        /// </summary>
        public string UIHaberPeterPivotGridFieldValueText = "Haber, Peter";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '8'
        /// </summary>
        public string UIItem2PivotGridCellText = "8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S29ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Rheborg, Johan' PivotGridFieldValue equals 'Gustavsson, Robert'
        /// </summary>
        public string UIRheborgJohanPivotGridFieldValueValueAsString = "Gustavsson, Robert";
        
        /// <summary>
        /// Verify that the 'Text' property of '31,53' PivotGridCell equals '31,53'
        /// </summary>
        public string UIItem3153PivotGridCellText = "31,53";
        
        /// <summary>
        /// Verify that the 'Text' property of '31,25' PivotGridCell equals '31,25'
        /// </summary>
        public string UIItem3125PivotGridCell1Text = "31,25";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Persbrandt, Mikael' PivotGridFieldValue equals 'Persbrandt, Mikael'
        /// </summary>
        public string UIPersbrandtMikaelPivotGridFieldValueValueAsString = "Persbrandt, Mikael";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8' PivotGridCell equals '8'
        /// </summary>
        public string UIItem8PivotGridCellValueAsString = "8";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Rheborg, Johan' PivotGridFieldValue equals 'Rheborg, Johan'
        /// </summary>
        public string UIRheborgJohanPivotGridFieldValueValueAsString = "Rheborg, Johan";
        
        /// <summary>
        /// Verify that the 'Text' property of '0,02' PivotGridCell equals '0,02'
        /// </summary>
        public string UIItem002PivotGridCellText = "0,02";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Gustavsson, Robert' PivotGridFieldValue equals 'Gustavsson, Robert'
        /// </summary>
        public string UIGustavssonRobertPivotGridFieldValueValueAsString = "Gustavsson, Robert";
        
        /// <summary>
        /// Verify that the 'Text' property of '23,25' PivotGridCell equals '23,25'
        /// </summary>
        public string UIItem2325PivotGridCellText = "23,25";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S30'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S30ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Rheborg, Johan' PivotGridFieldValue equals 'Gustavsson, Robert'
        /// </summary>
        public string UIRheborgJohanPivotGridFieldValueValueAsString = "Gustavsson, Robert";
        
        /// <summary>
        /// Verify that the 'Text' property of '31,53' PivotGridCell equals '14,02'
        /// </summary>
        public string UIItem3153PivotGridCellText = "14,02";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '31,25' PivotGridCell equals '8'
        /// </summary>
        public string UIItem3125PivotGridCell1ValueAsString = "8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C4_S5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C4_S5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Gustavsson, Robert' PivotGridFieldValue equals 'Gustavsson, Robert'
        /// </summary>
        public string UIGustavssonRobertPivotGridFieldValueValueAsString = "Gustavsson, Robert";
        
        /// <summary>
        /// Verify that the 'Text' property of '15,53' PivotGridCell equals '15,53'
        /// </summary>
        public string UIItem1553PivotGridCellText = "15,53";
        
        /// <summary>
        /// Verify that the 'Text' property of '8' PivotGridCell equals '8'
        /// </summary>
        public string UIItem8PivotGridCellText = "8";
        
        /// <summary>
        /// Verify that the 'Text' property of '0,02' PivotGridCell equals '0,02'
        /// </summary>
        public string UIItem002PivotGridCellText = "0,02";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '23,25' PivotGridCell equals '23.25'
        /// </summary>
        public string UIItem2325PivotGridCellValueAsString = "23.25";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C5_S2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C5_S2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Jähkel, Lennart' PivotGridFieldValue equals 'Jähkel, Lennart'
        /// </summary>
        public string UIJähkelLennartPivotGridFieldValueValueAsString = "Jähkel, Lennart";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6' PivotGridCell equals '6'
        /// </summary>
        public string UIItem6PivotGridCellValueAsString = "6";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '126' PivotGridCell equals '126'
        /// </summary>
        public string UIItem126PivotGridCellValueAsString = "126";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C5_S4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C5_S4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Jähkel, Lennart' PivotGridFieldValue equals 'Jähkel, Lennart'
        /// </summary>
        public string UIJähkelLennartPivotGridFieldValueValueAsString = "Jähkel, Lennart";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals '4'
        /// </summary>
        public string UIItem6PivotGridCellText = "4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C5_S5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C5_S5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Lassgård, Rolf' PivotGridFieldValue equals 'Lassgård, Rolf'
        /// </summary>
        public string UILassgårdRolfPivotGridFieldValueValueAsString = "Lassgård, Rolf";
        
        /// <summary>
        /// Verify that the 'Text' property of '126' PivotGridCell equals '115,71'
        /// </summary>
        public string UIItem126PivotGridCellText = "115,71";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals '6'
        /// </summary>
        public string UIItem6PivotGridCell1Text = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C5_S6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C5_S6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Lassgård, Rolf' PivotGridFieldValue equals 'Lassgård, Rolf'
        /// </summary>
        public string UILassgårdRolfPivotGridFieldValueValueAsString = "Lassgård, Rolf";
        
        /// <summary>
        /// Verify that the 'Text' property of '126' PivotGridCell equals '11,71'
        /// </summary>
        public string UIItem126PivotGridCellText = "11,71";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals '6'
        /// </summary>
        public string UIItem6PivotGridCell1Text = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C6_S13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C6_S13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '303'
        /// </summary>
        public string UIItem1PivotGridCellText = "303";
        
        /// <summary>
        /// Verify that the 'Text' property of '28' PivotGridCell equals '1414'
        /// </summary>
        public string UIItem28PivotGridCellText = "1414";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C6_S17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C6_S17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
        /// </summary>
        public string UIItem04012016PivotGridFieldValueText = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '17.01.2016' PivotGridFieldValue equals '21.01.2024'
        /// </summary>
        public string UIItem17012016PivotGridFieldValueText = "21.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '303' PivotGridCell equals '303'
        /// </summary>
        public string UIItem303PivotGridCellText = "303";
        
        /// <summary>
        /// Verify that the 'Text' property of '25.01.2016' PivotGridFieldValue equals '29.01.2024'
        /// </summary>
        public string UIItem25012016PivotGridFieldValueText = "29.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals '04.02.2024'
        /// </summary>
        public string UIItem31012016PivotGridFieldValueText = "04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '28' PivotGridCell equals '600'
        /// </summary>
        public string UIItem28PivotGridCellText = "600";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C6_S21'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C6_S21ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '18.01.2016' PivotGridFieldValue equals '22.01.2024'
        /// </summary>
        public string UIItem18012016PivotGridFieldValueText = "22.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '24.01.2016' PivotGridFieldValue equals '28.01.2024'
        /// </summary>
        public string UIItem24012016PivotGridFieldValueText = "28.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '1000' PivotGridCell equals '1000'
        /// </summary>
        public string UIItem1000PivotGridCellText = "1000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C6_S26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C6_S26ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Nyqvist, Mikael' PivotGridFieldValue equals 'Nyqvist, Mikael'
        /// </summary>
        public string UINyqvistMikaelPivotGridFieldValueValueAsString = "Nyqvist, Mikael";
        
        /// <summary>
        /// Verify that the 'Text' property of '36' PivotGridCell equals '36'
        /// </summary>
        public string UIItem3600PivotGridCellText = "36";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Kulle, Nils' PivotGridFieldValue equals 'Kulle, Nils'
        /// </summary>
        public string UIKulleNilsPivotGridFieldValueValueAsString = "Kulle, Nils";
        
        /// <summary>
        /// Verify that the 'Text' property of '60' PivotGridCell equals '60'
        /// </summary>
        public string UIItem6000PivotGridCellText = "60";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C6_S30'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C6_S30ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Kulle, Nils' PivotGridFieldValue equals 'Kulle, Nils'
        /// </summary>
        public string UIKulleNilsPivotGridFieldValueValueAsString = "Kulle, Nils";
        
        /// <summary>
        /// Verify that the 'Text' property of '22.02.2016' PivotGridFieldValue equals '29.01.2024'
        /// </summary>
        public string UIItem22022016PivotGridFieldValueText = "29.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '20.03.2016' PivotGridFieldValue equals '25.02.2024'
        /// </summary>
        public string UIItem20032016PivotGridFieldValueText = "25.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '60' PivotGridCell equals '60'
        /// </summary>
        public string UIItem60PivotGridCellText = "60";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C6_S33'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C6_S33ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Nyqvist, Mikael' PivotGridFieldValue equals 'Nyqvist, Mikael'
        /// </summary>
        public string UINyqvistMikaelPivotGridFieldValueValueAsString = "Nyqvist, Mikael";
        
        /// <summary>
        /// Verify that the 'Text' property of '105000' PivotGridCell equals '105000'
        /// </summary>
        public string UIItem105000PivotGridCellText = "105000";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Kulle, Nils' PivotGridFieldValue equals 'Kulle, Nils'
        /// </summary>
        public string UIKulleNilsPivotGridFieldValueValueAsString = "Kulle, Nils";
        
        /// <summary>
        /// Verify that the 'Text' property of '240000' PivotGridCell equals '240000'
        /// </summary>
        public string UIItem240000PivotGridCellText = "240000";
        
        /// <summary>
        /// Verify that the 'Text' property of '01.02.2016' PivotGridFieldValue equals '08.01.2024'
        /// </summary>
        public string UIItem01022016PivotGridFieldValueText = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '21.02.2016' PivotGridFieldValue equals '28.01.2024'
        /// </summary>
        public string UIItem21022016PivotGridFieldValueText = "28.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '22.02.2016' PivotGridFieldValue equals '29.01.2024'
        /// </summary>
        public string UIItem22022016PivotGridFieldValueText = "29.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '20.03.2016' PivotGridFieldValue equals '25.02.2024'
        /// </summary>
        public string UIItem20032016PivotGridFieldValueText = "25.02.2024";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C6_S5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C6_S5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Oscarsson, Per' PivotGridFieldValue equals 'Oscarsson, Per'
        /// </summary>
        public string UIOscarssonPerPivotGridFieldValueValueAsString = "Oscarsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCellText = "1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Vollter, Sven' PivotGridFieldValue equals 'Vollter, Sven'
        /// </summary>
        public string UIVollterSvenPivotGridFieldValueValueAsString = "Vollter, Sven";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,75' PivotGridCell equals '3,75'
        /// </summary>
        public string UIItem375PivotGridCellText = "3,75";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6' PivotGridCell equals '6'
        /// </summary>
        public string UIItem6PivotGridCellValueAsString = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C6_S7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C6_S7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '3'
        /// </summary>
        public string UIItem1PivotGridCellText = "3";
        
        /// <summary>
        /// Verify that the 'Text' property of '11' PivotGridCell equals '11'
        /// </summary>
        public string UIItem11PivotGridCellText = "11";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalculations_C6_S9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalculations_C6_S9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '28' PivotGridCell equals '28'
        /// </summary>
        public string UIItem28PivotGridCellText = "28";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCalulateFTTButtonDisabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCalulateFTTButtonDisabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Kalkuler' button equals 'False'
        /// </summary>
        public bool UIKalkulerButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEditShiftClassesDisabled_C6_S2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckEditShiftClassesDisabled_C6_S2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'slue_Shiftclass_Monday' LookUpEdit equals 'True'
        /// </summary>
        public bool UISlue_Shiftclass_MondLookUpEditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'slue_Shiftclass_Tuesday' LookUpEdit equals 'True'
        /// </summary>
        public bool UISlue_Shiftclass_TuesLookUpEditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'slue_Shiftclass_Wednesday' LookUpEdit equals 'True'
        /// </summary>
        public bool UISlue_Shiftclass_WednLookUpEditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'slue_Shiftclass_Thursday' LookUpEdit equals 'True'
        /// </summary>
        public bool UISlue_Shiftclass_ThurLookUpEditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'slue_Shiftclass_Friday' LookUpEdit equals 'True'
        /// </summary>
        public bool UISlue_Shiftclass_FridLookUpEditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'slue_Shiftclass_Saturday' LookUpEdit equals 'True'
        /// </summary>
        public bool UISlue_Shiftclass_SatuLookUpEditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'slue_Shiftclass_Sunday' LookUpEdit equals 'True'
        /// </summary>
        public bool UISlue_Shiftclass_SundLookUpEditReadOnly = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTT1IsReadyInExportLog'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTT1IsReadyInExportLogExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '04.01.2016' cell equals '2024-08-05'
        /// </summary>
        public string UIItem04012016CellValueAsString = "2024-08-05";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '24.01.2016' cell equals '2024-08-25'
        /// </summary>
        public string UIItem24012016CellValueAsString = "2024-08-25";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5150' cell equals '5150'
        /// </summary>
        public string UIItem5150CellValueAsString = "5150";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Klar til overføring' cell equals 'Klar til overføring'
        /// </summary>
        public string UIKlartiloverføringCellValueAsString = "Klar til overføring";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTcode400_C1_S5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTcode400_C1_S5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '0' PivotGridCell equals '18'
        /// </summary>
        public string UIItem0PivotGridCellValueAsString = "18";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8' PivotGridCell equals '8'
        /// </summary>
        public string UIItem8PivotGridCellValueAsString = "8";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8' PivotGridCell equals '8'
        /// </summary>
        public string UIItem8PivotGridCell1ValueAsString = "8";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '18' PivotGridCell equals '18'
        /// </summary>
        public string UIItem18PivotGridCellValueAsString = "18";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '18' PivotGridCell equals '18'
        /// </summary>
        public string UIItem18PivotGridCell1ValueAsString = "18";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTcode410_C1_S5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTcode410_C1_S5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28' PivotGridCell equals '26'
        /// </summary>
        public string UIItem28PivotGridCellValueAsString = "26";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '17,25' PivotGridCell equals '16.25'
        /// </summary>
        public string UIItem1725PivotGridCellValueAsString = "16.25";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '14' PivotGridCell equals '13'
        /// </summary>
        public string UIItem14PivotGridCellValueAsString = "13";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28' PivotGridCell equals '26'
        /// </summary>
        public string UIItem28PivotGridCell1ValueAsString = "26";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28' PivotGridCell equals '26'
        /// </summary>
        public string UIItem28PivotGridCell2ValueAsString = "26";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTEmployeesToTransfere'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTEmployeesToTransfereExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'deExportFrom' text box equals '2024-05-08'
        /// </summary>
        public string UIDeExportFromEditValueAsString = "2024-05-08";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Adams, Maud'
        /// </summary>
        public string UIAdamsMaudCellValueAsString = "Adams, Maud";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Bergman, Ingrid'
        /// </summary>
        public string UIBergmanIngridCellValueAsString = "Bergman, Ingrid";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Bergman, Ingrid'
        /// </summary>
        public string UIBergmanIngridCell1ValueAsString = "Bergman, Ingrid";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ekland, Britt' cell equals 'Ekland, Britt'
        /// </summary>
        public string UIEklandBrittCellValueAsString = "Ekland, Britt";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ekland, Britt' cell equals 'Ekland, Britt'
        /// </summary>
        public string UIEklandBrittCell1ValueAsString = "Ekland, Britt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTEmployeesToTransfere_C2_S24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTEmployeesToTransfere_C2_S24ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Adams, Maud' cell equals 'Skarsgård, Stellan'
        /// </summary>
        public string UIAdamsMaudCellText = "Skarsgård, Stellan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Bergman, Ingrid' cell equals 'Stormare, Peter'
        /// </summary>
        public string UIBergmanIngridCellText = "Stormare, Peter";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Bergman, Ingrid' cell equals 'Stormare, Peter'
        /// </summary>
        public string UIBergmanIngridCell1Text = "Stormare, Peter";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ekland, Britt' cell equals 'Edwall, Allan'
        /// </summary>
        public string UIEklandBrittCellText = "Edwall, Allan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTEmployeesToTransfere_C6_S23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTEmployeesToTransfere_C6_S23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Oscarsson, Per'
        /// </summary>
        public string UIAdamsMaudCellValueAsString = "Oscarsson, Per";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1' cell equals '1'
        /// </summary>
        public string UIItem1CellValueAsString = "1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]0[Column]colFrom' text box equals '08.01.2024'
        /// </summary>
        public string UIRow0ColumncolFromEditValueAsString = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]0[Column]colTo' text box equals '21.01.2024'
        /// </summary>
        public string UIRow0ColumncolToEditValueAsString = "21.01.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Oscarsson, Per'
        /// </summary>
        public string UIBergmanIngridCellValueAsString = "Oscarsson, Per";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1' cell equals '1'
        /// </summary>
        public string UIItem1Cell1ValueAsString = "1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]1[Column]colFrom' text box equals '29.01.2024'
        /// </summary>
        public string UIRow1ColumncolFromEditValueAsString = "29.01.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]1[Column]colTo' text box equals '04.02.2024'
        /// </summary>
        public string UIRow1ColumncolToEditValueAsString = "04.02.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Oscarsson, Per'
        /// </summary>
        public string UIBergmanIngridCell1ValueAsString = "Oscarsson, Per";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2' cell equals '2'
        /// </summary>
        public string UIItem2CellValueAsString = "2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]2[Column]colFrom' text box equals '22.01.2024'
        /// </summary>
        public string UIRow2ColumncolFromEditValueAsString = "22.01.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]2[Column]colTo' text box equals '28.01.2024'
        /// </summary>
        public string UIRow2ColumncolToEditValueAsString = "28.01.2024";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTEmployeesToTransfere_C6_S35'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTEmployeesToTransfere_C6_S35ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Nyqvist, Mikael'
        /// </summary>
        public string UIAdamsMaudCellValueAsString = "Nyqvist, Mikael";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]0[Column]colFrom' text box equals '08.01.2024'
        /// </summary>
        public string UIRow0ColumncolFromEditValueAsString = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]0[Column]colTo' text box equals '28.01.2024'
        /// </summary>
        public string UIRow0ColumncolToEditValueAsString = "28.01.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '400 - Lør./Søndagstillegg' cell equals '601 - VK Ordinær sats'
        /// </summary>
        public string UIItem400LørSøndagstilCellValueAsString = "601 - VK Ordinær sats";
        
        /// <summary>
        /// Verify that the 'Text' property of '11,15' cell equals '151666,67'
        /// </summary>
        public string UIItem1115CellText = "151666,67";
        
        /// <summary>
        /// Verify that the 'Text' property of '22,3' cell equals '30,58'
        /// </summary>
        public string UIItem223CellText = "30,58";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTEmployeesToTransfereValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTEmployeesToTransfereValuesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Persbrandt, Mikael'
        /// </summary>
        public string UIAdamsMaudCellValueAsString = "Persbrandt, Mikael";
        
        /// <summary>
        /// Verify that the 'Text' property of '53,52' cell equals '53,52'
        /// </summary>
        public string UIItem5352CellText = "53,52";
        
        /// <summary>
        /// Verify that the 'Text' property of '71,36' cell equals '71,36'
        /// </summary>
        public string UIItem7136CellText = "71,36";
        
        /// <summary>
        /// Verify that the 'Text' property of '0' cell equals '0'
        /// </summary>
        public string UIItem0CellText = "0";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]1[Column]colEmployee' text box equals 'Persbrandt, Mikael'
        /// </summary>
        public string UIRow1ColumncolEmployeEditValueAsString = "Persbrandt, Mikael";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,67' cell equals '8,67'
        /// </summary>
        public string UIItem867Cell1Text = "8,67";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Gustavsson, Robert'
        /// </summary>
        public string UIBergmanIngridCell1ValueAsString = "Gustavsson, Robert";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,67' cell equals '11,56'
        /// </summary>
        public string UIItem867CellText = "11,56";
        
        /// <summary>
        /// Verify that the 'Text' property of '20,25' cell equals '20,25'
        /// </summary>
        public string UIItem2025CellText = "20,25";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ekland, Britt' cell equals 'Rheborg, Johan'
        /// </summary>
        public string UIEklandBrittCellValueAsString = "Rheborg, Johan";
        
        /// <summary>
        /// Verify that the 'Text' property of '22,3' cell equals '18,8'
        /// </summary>
        public string UIItem223CellText = "18,8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTEmployeesToTransfereValues_C5_S7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTEmployeesToTransfereValues_C5_S7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Jähkel, Lennart'
        /// </summary>
        public string UIAdamsMaudCellValueAsString = "Jähkel, Lennart";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,67' cell equals '8,67'
        /// </summary>
        public string UIItem867Cell1Text = "8,67";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Lassgård, Rolf'
        /// </summary>
        public string UIBergmanIngridCellValueAsString = "Lassgård, Rolf";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,67' cell equals '20,9'
        /// </summary>
        public string UIItem867CellText = "20,9";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Lassgård, Rolf'
        /// </summary>
        public string UIBergmanIngridCell1ValueAsString = "Lassgård, Rolf";
        
        /// <summary>
        /// Verify that the 'Text' property of '22,3' cell equals '8,67'
        /// </summary>
        public string UIItem223CellText = "8,67";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTThasEmptyList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTThasEmptyListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '0' PivotGridCell equals '0'
        /// </summary>
        public string UIItem0PivotGridCellValueAsString = "";
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Kalkuler' button equals 'True'
        /// </summary>
        public bool UIKalkulerButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Overfør...' button equals 'False'
        /// </summary>
        public bool UIOverførButtonEnabled = false;
        
        /// <summary>
        /// Verify that the 'ClassName' property of 'Stopp...' button equals 'SimpleButton'
        /// </summary>
        public string UIStoppButtonClassName = "SimpleButton";
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Stopp...' button equals 'False'
        /// </summary>
        public bool UIStoppButtonEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Vis eksportlogg...' button equals 'True'
        /// </summary>
        public bool UIViseksportloggButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTPeriod_C1_S5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTPeriod_C1_S5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '05.08.2024'
        /// </summary>
        public string UIItem04012016PivotGridFieldValueText = "05.08.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '24.01.2016' PivotGridFieldValue equals '25.08.2024'
        /// </summary>
        public string UIItem24012016PivotGridFieldValueText = "25.08.2024";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTransfereButtonIsDisabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTransfereButtonIsDisabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of '&Overfør' button equals 'False'
        /// </summary>
        public bool UIOverførButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTransfereButtonIsEnabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTransfereButtonIsEnabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of '&Overfør' button equals 'True'
        /// </summary>
        public bool UIOverførButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFTTransfereStormareHasOneLine'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFTTransfereStormareHasOneLineExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ErrorText' property of '[Row]1[Column]colTo' text box equals 'Valgt linje slutter før eksport start.'
        /// </summary>
        public string UIRow1ColumncolToEditErrorText = "Valgt linje slutter før eksport start.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckMaxMasterDetails_C3_S5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckMaxMasterDetails_C3_S5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
        /// </summary>
        public string UIItem410KveldNattilleCellValueAsString = "410 - Kveld/Nattillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '22,3' cell equals '62,44'
        /// </summary>
        public string UIItem223CellText = "62,44";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
        /// </summary>
        public string UIItem400LørSøndagstilCellValueAsString = "400 - Lør./Søndagstillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '11,15' cell equals '11,89'
        /// </summary>
        public string UIItem1115CellText = "11,89";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckNoCalculationEkland_C1_S7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckNoCalculationEkland_C1_S7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '7' PivotGridFieldValue equals '7'
        /// </summary>
        public string UIItem7PivotGridFieldValueValueAsString = "7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftClassesData_C6_S10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckShiftClassesData_C6_S10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Oscarsson, Per' PivotGridFieldValue equals 'Oscarsson, Per'
        /// </summary>
        public string UIOscarssonPerPivotGridFieldValueText = "Oscarsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCell5Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '1,5' PivotGridCell equals '1,5'
        /// </summary>
        public string UIItem15PivotGridCell1Text = "1,5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 3,00'
        /// </summary>
        public string UIKr300PivotGridCellText = "kr 3,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Vollter, Sven' PivotGridFieldValue equals 'Vollter, Sven'
        /// </summary>
        public string UIVollterSvenPivotGridFieldValue1Text = "Vollter, Sven";
        
        /// <summary>
        /// Verify that the 'Text' property of 'E' PivotGridFieldValue equals 'F'
        /// </summary>
        public string UIEPivotGridFieldValueText = "F";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell3Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '6'
        /// </summary>
        public string UIItem5PivotGridCellText = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 5,00' PivotGridCell equals 'kr 6,00'
        /// </summary>
        public string UIKr500PivotGridCellText = "kr 6,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F' PivotGridFieldValue equals 'G'
        /// </summary>
        public string UIFPivotGridFieldValue1Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '2'
        /// </summary>
        public string UIItem1PivotGridCell4Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals '7'
        /// </summary>
        public string UIItem6PivotGridCell1Text = "7";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 14,00'
        /// </summary>
        public string UIKr600PivotGridCell1Text = "kr 14,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'H' PivotGridFieldValue equals 'H'
        /// </summary>
        public string UIHPivotGridFieldValueText = "H";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell5Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '8' PivotGridCell equals '8'
        /// </summary>
        public string UIItem8PivotGridCellText = "8";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 8,00'
        /// </summary>
        public string UIKr800PivotGridCellText = "kr 8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '4' PivotGridCell equals '4'
        /// </summary>
        public string UIItem4PivotGridCell2Text = "4";
        
        /// <summary>
        /// Verify that the 'Text' property of '7' PivotGridCell equals '7'
        /// </summary>
        public string UIItem7PivotGridCell1Text = "7";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 21,00' PivotGridCell equals 'kr 28,00'
        /// </summary>
        public string UIKr2100PivotGridCellText = "kr 28,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
        /// </summary>
        public string UIItem01012016PivotGridFieldValueText = "01.01.2016";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftClassesData_C6_S14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckShiftClassesData_C6_S14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
        /// </summary>
        public string UIItem01012016PivotGridFieldValueText = "01.01.2016";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell1Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals '2'
        /// </summary>
        public string UIItem6PivotGridCellText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '1,5' PivotGridCell equals '1,5'
        /// </summary>
        public string UIItem15PivotGridCell1Text = "1,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '6'
        /// </summary>
        public string UIItem5PivotGridCellText = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals ''
        /// </summary>
        public string UIItem6PivotGridCell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of '8' PivotGridCell equals '8'
        /// </summary>
        public string UIItem8PivotGridCellText = "8";
        
        /// <summary>
        /// Verify that the 'Text' property of '7' PivotGridCell equals '7'
        /// </summary>
        public string UIItem7PivotGridCell1Text = "7";
        
        /// <summary>
        /// Verify that the 'Text' property of '4' PivotGridCell equals '2'
        /// </summary>
        public string UIItem4PivotGridCell2Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCell5Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 1,00' PivotGridCell equals 'kr 1,00'
        /// </summary>
        public string UIKr100PivotGridCellText = "kr 1,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 2,00'
        /// </summary>
        public string UIKr600PivotGridCellText = "kr 2,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 3,00'
        /// </summary>
        public string UIKr300PivotGridCellText = "kr 3,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 5,00' PivotGridCell equals 'kr 6,00'
        /// </summary>
        public string UIKr500PivotGridCellText = "kr 6,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 8,00'
        /// </summary>
        public string UIKr800PivotGridCellText = "kr 8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 21,00' PivotGridCell equals 'kr 14,00'
        /// </summary>
        public string UIKr2100PivotGridCellText = "kr 14,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
        /// </summary>
        public string UISum31012016PivotGridFieldValueText = "Sum 04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '11.01.2016' PivotGridFieldValue equals '15.01.2024'
        /// </summary>
        public string UIItem11012016PivotGridFieldValueText = "15.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
        /// </summary>
        public string UISum31012016PivotGridFieldValue2Text = "Sum 04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '100' PivotGridCell equals '100'
        /// </summary>
        public string UIItem100PivotGridCell1Text = "100";
        
        /// <summary>
        /// Verify that the 'Text' property of '200' PivotGridCell equals '200'
        /// </summary>
        public string UIItem200PivotGridCellText = "200";
        
        /// <summary>
        /// Verify that the 'Text' property of '150' PivotGridCell equals '150'
        /// </summary>
        public string UIItem150PivotGridCellText = "150";
        
        /// <summary>
        /// Verify that the 'Text' property of '13125' PivotGridCell equals '700'
        /// </summary>
        public string UIItem13125PivotGridCellText = "700";
        
        /// <summary>
        /// Verify that the 'Text' property of '700' PivotGridCell equals '700'
        /// </summary>
        public string UIItem700PivotGridCellText = "700";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 100,00' PivotGridCell equals 'kr 100,00'
        /// </summary>
        public string UIKr10000PivotGridCellText = "kr 100,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 200,00' PivotGridCell equals 'kr 200,00'
        /// </summary>
        public string UIKr20000PivotGridCellText = "kr 200,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 300,00' PivotGridCell equals 'kr 300,00'
        /// </summary>
        public string UIKr30000PivotGridCellText = "kr 300,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 500,00' PivotGridCell equals 'kr 1 400,00'
        /// </summary>
        public string UIKr50000PivotGridCellText = "kr 1 400,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 900,00' PivotGridCell equals 'kr 1 400,00'
        /// </summary>
        public string UIKr90000PivotGridCellText = "kr 1 400,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 101,00' PivotGridCell equals 'kr 101,00'
        /// </summary>
        public string UIKr10100PivotGridCellText = "kr 101,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 202,00' PivotGridCell equals 'kr 202,00'
        /// </summary>
        public string UIKr20200PivotGridCellText = "kr 202,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 303,00' PivotGridCell equals 'kr 303,00'
        /// </summary>
        public string UIKr30300PivotGridCellText = "kr 303,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 6,00'
        /// </summary>
        public string UIKr600PivotGridCell2Text = "kr 6,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 700,00' PivotGridCell equals 'kr 1 400,00'
        /// </summary>
        public string UIKr70000PivotGridCellText = "kr 1 400,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 8,00'
        /// </summary>
        public string UIKr800PivotGridCell1Text = "kr 8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 714,00' PivotGridCell equals 'kr 1 414,00'
        /// </summary>
        public string UIKr71400PivotGridCellText = "kr 1 414,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftClassesData_C6_S18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckShiftClassesData_C6_S18ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
        /// </summary>
        public string UIItem04012016PivotGridFieldValueText = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '25.01.2016' PivotGridFieldValue equals '29.01.2024'
        /// </summary>
        public string UIItem25012016PivotGridFieldValueText = "29.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
        /// </summary>
        public string UIItem04012016PivotGridFieldValue1Text = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '17.01.2016' PivotGridFieldValue equals '21.01.2024'
        /// </summary>
        public string UIItem17012016PivotGridFieldValueText = "21.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals '04.02.2024'
        /// </summary>
        public string UIItem31012016PivotGridFieldValueText = "04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals '04.02.2024'
        /// </summary>
        public string UIItem31012016PivotGridFieldValue1Text = "04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 21.01.2024'
        /// </summary>
        public string UISum31012016PivotGridFieldValueText = "Sum 21.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
        /// </summary>
        public string UISum31012016PivotGridFieldValue3Text = "Sum 04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 1,00' PivotGridCell equals 'kr 1,00'
        /// </summary>
        public string UIKr100PivotGridCellText = "kr 1,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 2,00'
        /// </summary>
        public string UIKr600PivotGridCellText = "kr 2,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 3,00'
        /// </summary>
        public string UIKr300PivotGridCellText = "kr 3,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 21,00' PivotGridCell equals 'kr 3,00'
        /// </summary>
        public string UIKr2100PivotGridCellText = "kr 3,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell9Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell10Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCell2Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell11Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell12Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCell3Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '4' PivotGridCell equals '4'
        /// </summary>
        public string UIItem4PivotGridCell1Text = "4";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 100,00' PivotGridCell equals 'kr 100,00'
        /// </summary>
        public string UIKr10000PivotGridCellText = "kr 100,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 200,00' PivotGridCell equals 'kr 200,00'
        /// </summary>
        public string UIKr20000PivotGridCellText = "kr 200,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 300,00' PivotGridCell equals 'kr 300,00'
        /// </summary>
        public string UIKr30000PivotGridCellText = "kr 300,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 100,00' PivotGridCell equals 'kr 100,00'
        /// </summary>
        public string UIKr10000PivotGridCell1Text = "kr 100,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 500,00' PivotGridCell equals 'kr 500,00'
        /// </summary>
        public string UIKr50000PivotGridCellText = "kr 500,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 600,00' PivotGridCell equals 'kr 600,00'
        /// </summary>
        public string UIKr60000PivotGridCellText = "kr 600,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 900,00' PivotGridCell equals 'kr 900,00'
        /// </summary>
        public string UIKr90000PivotGridCellText = "kr 900,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCellText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCell1Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '4' PivotGridCell equals '4'
        /// </summary>
        public string UIItem4PivotGridCellText = "4";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell6Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell7Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '2'
        /// </summary>
        public string UIItem1PivotGridCell8Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '3' PivotGridCell equals '6'
        /// </summary>
        public string UIItem3PivotGridCellText = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of '50,5' PivotGridCell equals '50,5'
        /// </summary>
        public string UIItem505PivotGridCellText = "50,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '101' PivotGridCell equals '101'
        /// </summary>
        public string UIItem101PivotGridCellText = "101";
        
        /// <summary>
        /// Verify that the 'Text' property of '75,75' PivotGridCell equals '75,75'
        /// </summary>
        public string UIItem7575PivotGridCellText = "75,75";
        
        /// <summary>
        /// Verify that the 'Text' property of '100' PivotGridCell equals '100'
        /// </summary>
        public string UIItem100PivotGridCellText = "100";
        
        /// <summary>
        /// Verify that the 'Text' property of '500' PivotGridCell equals '500'
        /// </summary>
        public string UIItem500PivotGridCellText = "500";
        
        /// <summary>
        /// Verify that the 'Text' property of '300' PivotGridCell equals '300'
        /// </summary>
        public string UIItem300PivotGridCellText = "300";
        
        /// <summary>
        /// Verify that the 'Text' property of '150,5' PivotGridCell equals '150,5'
        /// </summary>
        public string UIItem1505PivotGridCellText = "150,5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 101,00' PivotGridCell equals 'kr 101,00'
        /// </summary>
        public string UIKr10100PivotGridCellText = "kr 101,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 202,00' PivotGridCell equals 'kr 202,00'
        /// </summary>
        public string UIKr20200PivotGridCellText = "kr 202,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 303,00' PivotGridCell equals 'kr 303,00'
        /// </summary>
        public string UIKr30300PivotGridCellText = "kr 303,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 100,00'
        /// </summary>
        public string UIKr600PivotGridCell2Text = "kr 100,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 700,00' PivotGridCell equals 'kr 500,00'
        /// </summary>
        public string UIKr70000PivotGridCellText = "kr 500,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 600,00'
        /// </summary>
        public string UIKr800PivotGridCell1Text = "kr 600,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 714,00' PivotGridCell equals 'kr 903,00'
        /// </summary>
        public string UIKr71400PivotGridCellText = "kr 903,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftClassesData_C6_S22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckShiftClassesData_C6_S22ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
        /// </summary>
        public string UIItem04012016PivotGridFieldValueText = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '25.01.2016' PivotGridFieldValue equals '22.01.2024'
        /// </summary>
        public string UIItem25012016PivotGridFieldValueText = "22.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '25.01.2016' PivotGridFieldValue equals '29.01.2024'
        /// </summary>
        public string UIItem25012016PivotGridFieldValue1Text = "29.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '17.01.2016' PivotGridFieldValue equals '21.01.2024'
        /// </summary>
        public string UIItem17012016PivotGridFieldValueText = "21.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 21.01.2024'
        /// </summary>
        public string UISum31012016PivotGridFieldValueText = "Sum 21.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals '28.01.2024'
        /// </summary>
        public string UIItem31012016PivotGridFieldValueText = "28.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals '04.02.2024'
        /// </summary>
        public string UIItem31012016PivotGridFieldValue2Text = "04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
        /// </summary>
        public string UISum31012016PivotGridFieldValue2Text = "Sum 04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
        /// </summary>
        public string UIItem01012016PivotGridFieldValueText = "01.01.2016";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCellText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '50,5' PivotGridCell equals '50,5'
        /// </summary>
        public string UIItem505PivotGridCellText = "50,5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 101,00' PivotGridCell equals 'kr 101,00'
        /// </summary>
        public string UIKr10100PivotGridCellText = "kr 101,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 202,00' PivotGridCell equals 'kr 202,00'
        /// </summary>
        public string UIKr20200PivotGridCellText = "kr 202,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 303,00' PivotGridCell equals 'kr 303,00'
        /// </summary>
        public string UIKr30300PivotGridCellText = "kr 303,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 1 000,00'
        /// </summary>
        public string UIKr600PivotGridCell2Text = "kr 1 000,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 700,00' PivotGridCell equals 'kr 100,00'
        /// </summary>
        public string UIKr70000PivotGridCellText = "kr 100,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 500,00'
        /// </summary>
        public string UIKr800PivotGridCell1Text = "kr 500,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 714,00' PivotGridCell equals 'kr 600,00'
        /// </summary>
        public string UIKr71400PivotGridCellText = "kr 600,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 1 903,00' PivotGridCell equals 'kr 1 903,00'
        /// </summary>
        public string UIKr190300PivotGridCellText = "kr 1 903,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '271,86' PivotGridCell equals '271,86'
        /// </summary>
        public string UIItem27186PivotGridCellText = "271,86";
        
        /// <summary>
        /// Verify that the 'Text' property of '150,5' PivotGridCell equals '300'
        /// </summary>
        public string UIItem1505PivotGridCellText = "300";
        
        /// <summary>
        /// Verify that the 'Text' property of '300' PivotGridCell equals '500'
        /// </summary>
        public string UIItem300PivotGridCellText = "500";
        
        /// <summary>
        /// Verify that the 'Text' property of '500' PivotGridCell equals '100'
        /// </summary>
        public string UIItem500PivotGridCellText = "100";
        
        /// <summary>
        /// Verify that the 'Text' property of '100' PivotGridCell equals '1000'
        /// </summary>
        public string UIItem100PivotGridCellText = "1000";
        
        /// <summary>
        /// Verify that the 'Text' property of '75,75' PivotGridCell equals '75,75'
        /// </summary>
        public string UIItem7575PivotGridCellText = "75,75";
        
        /// <summary>
        /// Verify that the 'Text' property of '4' PivotGridCell equals '4'
        /// </summary>
        public string UIItem4PivotGridCellText = "4";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell6Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell7Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell8Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '3' PivotGridCell equals '2'
        /// </summary>
        public string UIItem3PivotGridCellText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '7' PivotGridCell equals '7'
        /// </summary>
        public string UIItem7PivotGridCellText = "7";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 1 900,00' PivotGridCell equals 'kr 1 900,00'
        /// </summary>
        public string UIKr190000PivotGridCellText = "kr 1 900,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '380' PivotGridCell equals '380'
        /// </summary>
        public string UIItem380PivotGridCellText = "380";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '5'
        /// </summary>
        public string UIItem5PivotGridCell1Text = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 3,00'
        /// </summary>
        public string UIKr300PivotGridCell1Text = "kr 3,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '1,5' PivotGridCell equals '1,5'
        /// </summary>
        public string UIItem15PivotGridCellText = "1,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCell4Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCell5Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '1,5' PivotGridCell equals '1,5'
        /// </summary>
        public string UIItem15PivotGridCell1Text = "1,5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 3,00'
        /// </summary>
        public string UIKr300PivotGridCellText = "kr 3,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCell2Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '150' PivotGridCell equals '150'
        /// </summary>
        public string UIItem150PivotGridCellText = "150";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 300,00' PivotGridCell equals 'kr 300,00'
        /// </summary>
        public string UIKr30000PivotGridCellText = "kr 300,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftClassesData_C6_S27'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckShiftClassesData_C6_S27ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
        /// </summary>
        public string UIItem04012016PivotGridFieldValueText = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '17.01.2016' PivotGridFieldValue equals '04.02.2024'
        /// </summary>
        public string UIItem17012016PivotGridFieldValueText = "04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
        /// </summary>
        public string UIItem04012016PivotGridFieldValue2Text = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals '04.02.2024'
        /// </summary>
        public string UISum31012016PivotGridFieldValue1Text = "04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
        /// </summary>
        public string UIItem31012016PivotGridFieldValue2Text = "Sum 04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
        /// </summary>
        public string UIItem01012016PivotGridFieldValueText = "01.01.2016";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 1,00' PivotGridCell equals 'kr 6,00'
        /// </summary>
        public string UIKr100PivotGridCellText = "kr 6,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 15,00'
        /// </summary>
        public string UIKr600PivotGridCellText = "kr 15,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 3,00' PivotGridCell equals 'kr 7,00'
        /// </summary>
        public string UIKr300PivotGridCellText = "kr 7,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 5,00' PivotGridCell equals 'kr 8,00'
        /// </summary>
        public string UIKr500PivotGridCellText = "kr 8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 36,00'
        /// </summary>
        public string UIKr600PivotGridCell1Text = "kr 36,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 60,00'
        /// </summary>
        public string UIKr800PivotGridCellText = "kr 60,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '11'
        /// </summary>
        public string UIItem1PivotGridCell4Text = "11";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals '3,27'
        /// </summary>
        public string UIItem6PivotGridCell1Text = "3,27";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 100,00' PivotGridCell equals 'kr 600,00'
        /// </summary>
        public string UIKr10000PivotGridCellText = "kr 600,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 200,00' PivotGridCell equals 'kr 1 500,00'
        /// </summary>
        public string UIKr20000PivotGridCellText = "kr 1 500,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 300,00' PivotGridCell equals 'kr 700,00'
        /// </summary>
        public string UIKr30000PivotGridCellText = "kr 700,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 100,00' PivotGridCell equals 'kr 800,00'
        /// </summary>
        public string UIKr10000PivotGridCell1Text = "kr 800,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 500,00' PivotGridCell equals 'kr 3 600,00'
        /// </summary>
        public string UIKr50000PivotGridCellText = "kr 3 600,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 600,00' PivotGridCell equals 'kr 6 000,00'
        /// </summary>
        public string UIKr60000PivotGridCellText = "kr 6 000,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '11'
        /// </summary>
        public string UIItem1PivotGridCell12Text = "11";
        
        /// <summary>
        /// Verify that the 'Text' property of '13125' PivotGridCell equals '327,27'
        /// </summary>
        public string UIItem13125PivotGridCellText = "327,27";
        
        /// <summary>
        /// Verify that the 'Text' property of '50,5' PivotGridCell equals '50,5'
        /// </summary>
        public string UIItem505PivotGridCellText = "50,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '101' PivotGridCell equals '252,5'
        /// </summary>
        public string UIItem101PivotGridCellText = "252,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '75,75' PivotGridCell equals '353,5'
        /// </summary>
        public string UIItem7575PivotGridCellText = "353,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '100' PivotGridCell equals '404'
        /// </summary>
        public string UIItem100PivotGridCellText = "404";
        
        /// <summary>
        /// Verify that the 'Text' property of '500' PivotGridCell equals '165,27'
        /// </summary>
        public string UIItem500PivotGridCellText = "165,27";
        
        /// <summary>
        /// Verify that the 'Text' property of '300' PivotGridCell equals '151,5'
        /// </summary>
        public string UIItem300PivotGridCellText = "151,5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 101,00' PivotGridCell equals 'kr 606,00'
        /// </summary>
        public string UIKr10100PivotGridCellText = "kr 606,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 202,00' PivotGridCell equals 'kr 1 515,00'
        /// </summary>
        public string UIKr20200PivotGridCellText = "kr 1 515,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 303,00' PivotGridCell equals 'kr 707,00'
        /// </summary>
        public string UIKr30300PivotGridCellText = "kr 707,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 808,00'
        /// </summary>
        public string UIKr600PivotGridCell2Text = "kr 808,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 700,00' PivotGridCell equals 'kr 3 636,00'
        /// </summary>
        public string UIKr70000PivotGridCellText = "kr 3 636,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 6 060,00'
        /// </summary>
        public string UIKr800PivotGridCell1Text = "kr 6 060,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftClassesData_C6_S29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckShiftClassesData_C6_S29ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
        /// </summary>
        public string UIItem04012016PivotGridFieldValueText = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '17.01.2016' PivotGridFieldValue equals '28.01.2024'
        /// </summary>
        public string UIItem17012016PivotGridFieldValueText = "28.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '31.01.2016' PivotGridFieldValue equals 'Sum 28.01.2024'
        /// </summary>
        public string UIItem31012016PivotGridFieldValue2Text = "Sum 28.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '04.01.2016' PivotGridFieldValue equals '08.01.2024'
        /// </summary>
        public string UIItem04012016PivotGridFieldValue2Text = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals '04.02.2024'
        /// </summary>
        public string UISum31012016PivotGridFieldValue1Text = "04.02.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
        /// </summary>
        public string UIItem01012016PivotGridFieldValueText = "01.01.2016";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '8'
        /// </summary>
        public string UIItem1PivotGridCell4Text = "8";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals '4,13'
        /// </summary>
        public string UIItem6PivotGridCell1Text = "4,13";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 33,00'
        /// </summary>
        public string UIKr600PivotGridCell1Text = "kr 33,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '3'
        /// </summary>
        public string UIItem1PivotGridCell9Text = "3";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '3'
        /// </summary>
        public string UIItem1PivotGridCellText = "3";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '8'
        /// </summary>
        public string UIItem1PivotGridCell12Text = "8";
        
        /// <summary>
        /// Verify that the 'Text' property of '13125' PivotGridCell equals '412,5'
        /// </summary>
        public string UIItem13125PivotGridCellText = "412,5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 500,00' PivotGridCell equals 'kr 3 300,00'
        /// </summary>
        public string UIKr50000PivotGridCellText = "kr 3 300,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '6'
        /// </summary>
        public string UIItem2PivotGridCellText = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '16'
        /// </summary>
        public string UIItem1PivotGridCell7Text = "16";
        
        /// <summary>
        /// Verify that the 'Text' property of '500' PivotGridCell equals '208,31'
        /// </summary>
        public string UIItem500PivotGridCellText = "208,31";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 700,00' PivotGridCell equals 'kr 3 333,00'
        /// </summary>
        public string UIKr70000PivotGridCellText = "kr 3 333,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '50,5' PivotGridCell equals '50,5'
        /// </summary>
        public string UIItem505PivotGridCellText = "50,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '101' PivotGridCell equals '252,5'
        /// </summary>
        public string UIItem101PivotGridCellText = "252,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '75,75' PivotGridCell equals '353,5'
        /// </summary>
        public string UIItem7575PivotGridCellText = "353,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '100' PivotGridCell equals '404'
        /// </summary>
        public string UIItem100PivotGridCellText = "404";
        
        /// <summary>
        /// Verify that the 'Text' property of '300' PivotGridCell equals '151,5'
        /// </summary>
        public string UIItem300PivotGridCellText = "151,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '6'
        /// </summary>
        public string UIItem2PivotGridCell1Text = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of '4' PivotGridCell equals '2'
        /// </summary>
        public string UIItem4PivotGridCellText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '2'
        /// </summary>
        public string UIItem1PivotGridCell6Text = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '40'
        /// </summary>
        public string UIItem1PivotGridCell8Text = "40";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 101,00' PivotGridCell equals 'kr 303,00'
        /// </summary>
        public string UIKr10100PivotGridCellText = "kr 303,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 202,00' PivotGridCell equals 'kr 1 515,00'
        /// </summary>
        public string UIKr20200PivotGridCellText = "kr 1 515,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 303,00' PivotGridCell equals 'kr 707,00'
        /// </summary>
        public string UIKr30300PivotGridCellText = "kr 707,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 808,00'
        /// </summary>
        public string UIKr600PivotGridCell2Text = "kr 808,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 8,00' PivotGridCell equals 'kr 6 060,00'
        /// </summary>
        public string UIKr800PivotGridCell1Text = "kr 6 060,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftClassesData_C6_S34'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckShiftClassesData_C6_S34ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '08.01.2024' PivotGridFieldValue equals '08.01.2024'
        /// </summary>
        public string UIItem08012024PivotGridFieldValueText = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '28.01.2024' PivotGridFieldValue equals '28.01.2024'
        /// </summary>
        public string UIItem28012024PivotGridFieldValueText = "28.01.2024";
        
        /// <summary>
        /// Verify that the 'ClassName' property of 'Sum 28.01.2024' PivotGridFieldValue equals 'PivotGridFieldValue'
        /// </summary>
        public string UISum28012024PivotGridFieldValueClassName = "PivotGridFieldValue";
        
        /// <summary>
        /// Verify that the 'Text' property of '29.01.2024' PivotGridFieldValue equals '29.01.2024'
        /// </summary>
        public string UIItem29012024PivotGridFieldValueText = "29.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '25.02.2024' PivotGridFieldValue equals '25.02.2024'
        /// </summary>
        public string UIItem25022024PivotGridFieldValueText = "25.02.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Nyqvist, Mikael' PivotGridFieldValue equals 'Nyqvist, Mikael'
        /// </summary>
        public string UINyqvistMikaelPivotGridFieldValueValueAsString = "Nyqvist, Mikael";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Kulle, Nils' PivotGridFieldValue equals 'Kulle, Nils'
        /// </summary>
        public string UIKulleNilsPivotGridFieldValueValueAsString = "Kulle, Nils";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'kr 105 000,00' PivotGridCell equals '105000'
        /// </summary>
        public string UIKr10500000PivotGridCellValueAsString = "105000";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'kr 240 000,00' PivotGridCell equals '240000'
        /// </summary>
        public string UIKr24000000PivotGridCellValueAsString = "240000";
        
        /// <summary>
        /// Verify that the 'Text' property of '15.01.2024' PivotGridFieldValue equals '15.01.2024'
        /// </summary>
        public string UIItem15012024PivotGridFieldValueText = "15.01.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'kr 3 300,00' PivotGridCell equals '3300'
        /// </summary>
        public string UIKr330000PivotGridCellValueAsString = "3300";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'kr 6 000,00' PivotGridCell equals '6000'
        /// </summary>
        public string UIKr600000PivotGridCellValueAsString = "6000";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'kr 108 300,00' PivotGridCell equals '108300'
        /// </summary>
        public string UIKr10830000PivotGridCellValueAsString = "108300";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'kr 246 000,00' PivotGridCell equals '246000'
        /// </summary>
        public string UIKr24600000PivotGridCellValueAsString = "246000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftClassesData_C6_S6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckShiftClassesData_C6_S6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Oscarsson, Per' PivotGridFieldValue equals 'Oscarsson, Per'
        /// </summary>
        public string UIOscarssonPerPivotGridFieldValueValueAsString = "Oscarsson, Per";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A' PivotGridFieldValue equals 'A'
        /// </summary>
        public string UIAPivotGridFieldValueValueAsString = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCellText = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell1Text = "1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'kr 1,00' PivotGridCell equals '1'
        /// </summary>
        public string UIKr100PivotGridCellValueAsString = "1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Vollter, Sven' PivotGridFieldValue equals 'Vollter, Sven'
        /// </summary>
        public string UIVollterSvenPivotGridFieldValueValueAsString = "Vollter, Sven";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F' PivotGridFieldValue equals 'F'
        /// </summary>
        public string UIFPivotGridFieldValueValueAsString = "F";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell2Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals '6'
        /// </summary>
        public string UIItem6PivotGridCellText = "6";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'kr 6,00' PivotGridCell equals '6'
        /// </summary>
        public string UIKr600PivotGridCellValueAsString = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 6,00'
        /// </summary>
        public string UIKr600PivotGridCellText = "kr 6,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 1,00' PivotGridCell equals 'kr 1,00'
        /// </summary>
        public string UIKr100PivotGridCellText = "kr 1,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '01.01.2016' PivotGridFieldValue equals '01.01.2016'
        /// </summary>
        public string UIItem01012016PivotGridFieldValueText = "01.01.2016";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftClassesData_C6_S8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckShiftClassesData_C6_S8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A' PivotGridFieldValue equals 'A'
        /// </summary>
        public string UIAPivotGridFieldValueValueAsString = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCellText = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell1Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 1,00' PivotGridCell equals 'kr 1,00'
        /// </summary>
        public string UIKr100PivotGridCellText = "kr 1,00";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F' PivotGridFieldValue equals 'B'
        /// </summary>
        public string UIFPivotGridFieldValueValueAsString = "B";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell2Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals '2'
        /// </summary>
        public string UIItem6PivotGridCellText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 2,00'
        /// </summary>
        public string UIKr600PivotGridCellText = "kr 2,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
        /// </summary>
        public string UISum31012016PivotGridFieldValueText = "Sum 04.02.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'E' PivotGridFieldValue equals 'E'
        /// </summary>
        public string UIEPivotGridFieldValueValueAsString = "E";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell3Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' PivotGridCell equals '5'
        /// </summary>
        public string UIItem5PivotGridCellText = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 5,00' PivotGridCell equals 'kr 5,00'
        /// </summary>
        public string UIKr500PivotGridCellText = "kr 5,00";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F' PivotGridFieldValue equals 'F'
        /// </summary>
        public string UIFPivotGridFieldValue1ValueAsString = "F";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' PivotGridCell equals '1'
        /// </summary>
        public string UIItem1PivotGridCell4Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' PivotGridCell equals '6'
        /// </summary>
        public string UIItem6PivotGridCell1Text = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of 'kr 6,00' PivotGridCell equals 'kr 6,00'
        /// </summary>
        public string UIKr600PivotGridCell1Text = "kr 6,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Sum 31.01.2016' PivotGridFieldValue equals 'Sum 04.02.2024'
        /// </summary>
        public string UISum31012016PivotGridFieldValue1Text = "Sum 04.02.2024";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckStellanCalculations_C2_S10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckStellanCalculations_C2_S10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Skarsgård, Stellan' PivotGridFieldValue equals 'Skarsgård, Stellan'
        /// </summary>
        public string UISkarsgårdStellanPivotGridFieldValueValueAsString = "Skarsgård, Stellan";
        
        /// <summary>
        /// Verify that the 'Text' property of '10' PivotGridCell equals '11,56'
        /// </summary>
        public string UIItem10PivotGridCellText = "11,56";
        
        /// <summary>
        /// Verify that the 'Text' property of '20' PivotGridCell equals '16,19'
        /// </summary>
        public string UIItem20PivotGridCellText = "16,19";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckStellanCalculations_C2_S11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckStellanCalculations_C2_S11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Skarsgård, Stellan' PivotGridFieldValue equals 'Skarsgård, Stellan'
        /// </summary>
        public string UISkarsgårdStellanPivotGridFieldValueValueAsString = "Skarsgård, Stellan";
        
        /// <summary>
        /// Verify that the 'Text' property of '11,15' PivotGridCell equals '14,87'
        /// </summary>
        public string UIItem1115PivotGridCellText = "14,87";
        
        /// <summary>
        /// Verify that the 'Text' property of '22,3' PivotGridCell equals '11,89'
        /// </summary>
        public string UIItem223PivotGridCellText = "11,89";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckStellanCalculations_C2_S9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckStellanCalculations_C2_S9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '10' PivotGridCell equals '10'
        /// </summary>
        public string UIItem10PivotGridCellValueAsString = "10";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '20' PivotGridCell equals '14'
        /// </summary>
        public string UIItem20PivotGridCellValueAsString = "14";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Skarsgård, Stellan' PivotGridFieldValue equals 'Skarsgård, Stellan'
        /// </summary>
        public string UISkarsgårdStellanPivotGridFieldValueValueAsString = "Skarsgård, Stellan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckStellanEdwallIsExported_C2_S16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckStellanEdwallIsExported_C2_S16ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ikke valgt' cell equals 'False'
        /// </summary>
        public string UIIkkevalgtCellValueAsString = "False";
        
        /// <summary>
        /// Verify that the 'ErrorText' property of 'Adams, Maud' cell equals 'Tidligere eksportert'
        /// </summary>
        public string UIAdamsMaudCellErrorText = "Tidligere eksportert";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ikke valgt' cell equals 'False'
        /// </summary>
        public string UIIkkevalgtCell1ValueAsString = "False";
        
        /// <summary>
        /// Verify that the 'ErrorText' property of 'Bergman, Ingrid' cell equals 'Tidligere eksportert'
        /// </summary>
        public string UIBergmanIngridCell1ErrorText = "Tidligere eksportert";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Skarsgård, Stellan'
        /// </summary>
        public string UIAdamsMaudCellValueAsString = "Skarsgård, Stellan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Edwall, Allan'
        /// </summary>
        public string UIBergmanIngridCell1ValueAsString = "Edwall, Allan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckStormareCalculations_C2_S14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckStormareCalculations_C2_S14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Stormare, Peter' PivotGridFieldValue equals 'Stormare, Peter'
        /// </summary>
        public string UIStormarePeterPivotGridFieldValueValueAsString = "Stormare, Peter";
        
        /// <summary>
        /// Verify that the 'Text' property of '41,63' PivotGridCell equals '41,63'
        /// </summary>
        public string UIItem4163PivotGridCellText = "41,63";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckStormareCalculations_C2_S23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckStormareCalculations_C2_S23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '10' PivotGridCell equals '8'
        /// </summary>
        public string UIItem10PivotGridCell1Text = "8";
        
        /// <summary>
        /// Verify that the 'Text' property of '20' PivotGridCell equals '12'
        /// </summary>
        public string UIItem4163PivotGridCellText = "12";
        
        /// <summary>
        /// Verify that the 'Text' property of '25,00 %' PivotGridFieldValue equals '25,00 %'
        /// </summary>
        public string UIItem2500PivotGridFieldValueText = "25,00 %";
        
        /// <summary>
        /// Verify that the 'Text' property of '20' PivotGridCell equals '20'
        /// </summary>
        public string UIItem20PivotGridCellText = "20";
        
        /// <summary>
        /// Verify that the 'Text' property of '75,00 %' PivotGridFieldValue equals '75,00 %'
        /// </summary>
        public string UIItem7500PivotGridFieldValueText = "75,00 %";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Stormare, Peter' PivotGridFieldValue equals 'Stormare, Peter'
        /// </summary>
        public string UIStormarePeterPivotGridFieldValueText = "Stormare, Peter";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckStormareHasTwoPreviousTransferes_C2_S26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckStormareHasTwoPreviousTransferes_C2_S26ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '41,62' cell equals '0'
        /// </summary>
        public string UIItem4162CellText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of '41,62' cell equals '0'
        /// </summary>
        public string UIItem4162Cell1Text = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of '11,15' cell equals '11,15'
        /// </summary>
        public string UIItem1115Cell1Text = "11,15";
        
        /// <summary>
        /// Verify that the 'Text' property of '22,3' cell equals '22,3'
        /// </summary>
        public string UIItem223Cell1Text = "22,3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckStormareNoCalculations_C2_S21'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckStormareNoCalculations_C2_S21ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'VAKANT4' PivotGridFieldValue equals 'VAKANT4'
        /// </summary>
        public string UIVAKANT4PivotGridFieldValueValueAsString = "VAKANT4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransAndStopIsDisabled_C1_S11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransAndStopIsDisabled_C1_S11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Overfør...' button equals 'False'
        /// </summary>
        public bool UIOverførButtonEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Stopp...' button equals 'False'
        /// </summary>
        public bool UIStoppButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferedFTTValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferedFTTValuesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '41,62' cell equals '38,65'
        /// </summary>
        public string UIItem4162CellText = "38,65";
        
        /// <summary>
        /// Verify that the 'Text' property of '510' cell equals '410'
        /// </summary>
        public string UIItem510Cell1Text = "410";
        
        /// <summary>
        /// Verify that the 'Text' property of '26,76' cell equals '26,76'
        /// </summary>
        public string UIItem2676CellText = "26,76";
        
        /// <summary>
        /// Verify that the 'Text' property of '400' cell equals '400'
        /// </summary>
        public string UIItem400CellText = "400";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Skarsgård, Stellan' cell equals 'Adams, Maud'
        /// </summary>
        public string UISkarsgårdStellanCellText = "Adams, Maud";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,97' cell equals '2,97'
        /// </summary>
        public string UIItem297Cell1Text = "2,97";
        
        /// <summary>
        /// Verify that the 'Text' property of '400' cell equals '400'
        /// </summary>
        public string UIItem400Cell1Text = "400";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,92' cell equals '11,89'
        /// </summary>
        public string UIItem892CellText = "11,89";
        
        /// <summary>
        /// Verify that the 'Text' property of '601' cell equals '410'
        /// </summary>
        public string UIItem601Cell2Text = "410";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Vollter, Sven' cell equals 'Ekland, Britt'
        /// </summary>
        public string UIVollterSvenCellText = "Ekland, Britt";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,92' cell equals '8,92'
        /// </summary>
        public string UIItem892Cell1Text = "8,92";
        
        /// <summary>
        /// Verify that the 'Text' property of '35,68' cell equals '35,68'
        /// </summary>
        public string UIItem3568Cell1Text = "35,68";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ekland, Britt' cell equals 'Ekland, Britt'
        /// </summary>
        public string UIEklandBrittCellText = "Ekland, Britt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferedFTTValues_C1_S26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferedFTTValues_C1_S26ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '41,62' cell equals '8,66'
        /// </summary>
        public string UIItem4162CellText = "8,67";
        
        /// <summary>
        /// Verify that the 'Text' property of '510' cell equals '510'
        /// </summary>
        public string UIItem510Cell1Text = "510";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '04.01.2016' cell equals '2024-08-05'
        /// </summary>
        public string UIItem04012016CellValueAsString = "2024-08-05";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '14.02.2016' cell equals '2024-09-15'
        /// </summary>
        public string UIItem14022016CellValueAsString = "2024-09-15";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Endre, Lena' cell equals 'Endre, Lena'
        /// </summary>
        public string UIEndreLenaCellText = "Endre, Lena";
        
        /// <summary>
        /// Verify that the 'Text' property of '5150' cell equals '5150'
        /// </summary>
        public string UIItem5150CellText = "5150";
        
        /// <summary>
        /// Verify that the 'Text' property of '11,15' cell equals '21,12'
        /// </summary>
        public string UIItem1115CellText = "21,13";
        
        /// <summary>
        /// Verify that the 'Text' property of '510' cell equals '510'
        /// </summary>
        public string UIItem510Cell2Text = "510";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '21.01.2016' cell equals '2024-08-05'
        /// </summary>
        public string UIItem21012016CellValueAsString = "2024-08-05";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '10.01.2016' cell equals '2024-08-12'
        /// </summary>
        public string UIItem10012016Cell1ValueAsString = "2024-08-12";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Stormare, Peter' cell equals 'Garbo, Greta'
        /// </summary>
        public string UIStormarePeterCellText = "Garbo, Greta";
        
        /// <summary>
        /// Verify that the 'Text' property of '5150' cell equals '5150'
        /// </summary>
        public string UIItem5150Cell2Text = "5150";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferedFTTValues_C1_S6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferedFTTValues_C1_S6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '41,62' cell equals '22,3'
        /// </summary>
        public string UIItem4162CellText = "22,3";
        
        /// <summary>
        /// Verify that the 'Text' property of '510' cell equals '410'
        /// </summary>
        public string UIItem510Cell1Text = "410";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Endre, Lena' cell equals 'Skarsgård, Stellan'
        /// </summary>
        public string UIEndreLenaCellText = "Skarsgård, Stellan";
        
        /// <summary>
        /// Verify that the 'Text' property of '26,76' cell equals '11,15'
        /// </summary>
        public string UIItem2676CellText = "11,15";
        
        /// <summary>
        /// Verify that the 'Text' property of '400' cell equals '400'
        /// </summary>
        public string UIItem400CellText = "400";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '14.03.2016' cell equals '2024-01-08'
        /// </summary>
        public string UIItem14032016CellValueAsString = "2024-01-08";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '03.04.2016' cell equals '2024-02-04'
        /// </summary>
        public string UIItem03042016CellValueAsString = "2024-02-04";
        
        /// <summary>
        /// Verify that the 'Text' property of '5150' cell equals '5150'
        /// </summary>
        public string UIItem5150Cell3Text = "5150";
        
        /// <summary>
        /// Verify that the 'Text' property of '11,15' cell equals '22,3'
        /// </summary>
        public string UIItem1115CellText = "22,3";
        
        /// <summary>
        /// Verify that the 'Text' property of '2600' cell equals '11,15'
        /// </summary>
        public string UIItem2600CellText = "11,15";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '25.01.2016' cell equals '2024-01-08'
        /// </summary>
        public string UIItem25012016CellValueAsString = "2024-01-08";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '31.01.2016' cell equals '2024-02-04'
        /// </summary>
        public string UIItem31012016CellValueAsString = "2024-02-04";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Oscarsson, Per' cell equals 'Stormare, Peter'
        /// </summary>
        public string UIOscarssonPerCellText = "Stormare, Peter";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,66' cell equals '3,62'
        /// </summary>
        public string UIItem866Cell1Text = "3,62";
        
        /// <summary>
        /// Verify that the 'Text' property of '601' cell equals '410'
        /// </summary>
        public string UIItem601Cell1Text = "410";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '18.01.2016' cell equals '2024-01-08'
        /// </summary>
        public string UIItem18012016CellValueAsString = "2024-01-08";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '17.01.2016' cell equals '2024-02-04'
        /// </summary>
        public string UIItem17012016CellValueAsString = "2024-02-04";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Jähkel, Lennart' cell equals 'Edwall, Allan'
        /// </summary>
        public string UIJähkelLennartCellText = "Edwall, Allan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferedFTTValues_C3_S21'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferedFTTValues_C3_S21ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '41,62' cell equals '38.65'
        /// </summary>
        public string UIItem4162CellValueAsString = "38.65";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '510' cell equals '410'
        /// </summary>
        public string UIItem510Cell1ValueAsString = "410";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '04.01.2016' cell equals '2024-03-18'
        /// </summary>
        public string UIItem04012016CellValueAsString = "2024-03-18";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '14.02.2016' cell equals '2024-04-07'
        /// </summary>
        public string UIItem14022016CellValueAsString = "2024-04-07";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Endre, Lena' cell equals 'Von Sudow, Max'
        /// </summary>
        public string UIEndreLenaCellValueAsString = "Von Sudow, Max";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '26,76' cell equals '14.86'
        /// </summary>
        public string UIItem2676CellValueAsString = "14.87";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '400' cell equals '400'
        /// </summary>
        public string UIItem400CellValueAsString = "400";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferedFTTValues_C3_S6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferedFTTValues_C3_S6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '41,62' cell equals '62.44'
        /// </summary>
        public string UIItem4162CellValueAsString = "62.44";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '26,76' cell equals '11.89'
        /// </summary>
        public string UIItem2676CellValueAsString = "11.89";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Kveld/Nattillegg' cell equals 'Kveld/Nattillegg'
        /// </summary>
        public string UIKveldNattilleggCellValueAsString = "Kveld/Nattillegg";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Lør./Søndagstillegg' cell equals 'Lør./Søndagstillegg'
        /// </summary>
        public string UILørSøndagstilleggCellValueAsString = "Lør./Søndagstillegg";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '14.03.2016' cell equals '2024-03-18'
        /// </summary>
        public string UIItem14032016CellValueAsString = "2024-03-18";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '03.04.2016' cell equals '2024-04-07'
        /// </summary>
        public string UIItem03042016CellValueAsString = "2024-04-07";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Skarsgård, Stellan' cell equals 'Von Sudow, Max'
        /// </summary>
        public string UISkarsgårdStellanCellValueAsString = "Von Sudow, Max";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferedFTTValues_C5_S7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferedFTTValues_C5_S7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '41,62' cell equals '20,9'
        /// </summary>
        public string UIItem4162CellText = "20,9";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '14.02.2016' cell equals '2024-01-17'
        /// </summary>
        public string UIItem14022016CellValueAsString = "2024-01-17";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Endre, Lena' cell equals 'Lassgård, Rolf'
        /// </summary>
        public string UIEndreLenaCellValueAsString = "Lassgård, Rolf";
        
        /// <summary>
        /// Verify that the 'Text' property of '11,15' cell equals '8,66'
        /// </summary>
        public string UIItem1115CellText = "8,67";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '21.01.2016' cell equals '2024-01-18'
        /// </summary>
        public string UIItem21012016CellValueAsString = "2024-01-18";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Stormare, Peter' cell equals 'Lassgård, Rolf'
        /// </summary>
        public string UIStormarePeterCellValueAsString = "Lassgård, Rolf";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,66' cell equals '8,66'
        /// </summary>
        public string UIItem866Cell1Text = "8,67";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '17.01.2016' cell equals '2024-01-14'
        /// </summary>
        public string UIItem17012016CellValueAsString = "2024-01-14";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Jähkel, Lennart' cell equals 'Jähkel, Lennart'
        /// </summary>
        public string UIJähkelLennartCellValueAsString = "Jähkel, Lennart";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferedFTTValues_C6_S24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferedFTTValues_C6_S24ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '26,76' cell equals '656,5'
        /// </summary>
        public string UIItem2676CellText = "656,5";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '400' cell equals '601'
        /// </summary>
        public string UIItem400CellValueAsString = "601";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Skarsgård, Stellan' cell equals 'Oscarsson, Per'
        /// </summary>
        public string UISkarsgårdStellanCellValueAsString = "Oscarsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of '2600' cell equals '2600'
        /// </summary>
        public string UIItem2600CellText = "2600";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '601' cell equals '601'
        /// </summary>
        public string UIItem601CellValueAsString = "601";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Oscarsson, Per' cell equals 'Oscarsson, Per'
        /// </summary>
        public string UIOscarssonPerCellValueAsString = "Oscarsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' cell equals '1'
        /// </summary>
        public string UIItem1CellText = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' cell equals '1'
        /// </summary>
        public string UIItem1Cell1Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,66' cell equals '4333,33'
        /// </summary>
        public string UIItem866Cell1Text = "4333,33";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '601' cell equals '601'
        /// </summary>
        public string UIItem601Cell1ValueAsString = "601";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Jähkel, Lennart' cell equals 'Oscarsson, Per'
        /// </summary>
        public string UIJähkelLennartCellValueAsString = "Oscarsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' cell equals '2'
        /// </summary>
        public string UIItem2CellText = "2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '18.01.2016' cell equals '2024-01-22'
        /// </summary>
        public string UIItem18012016CellValueAsString = "2024-01-22";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '17.01.2016' cell equals '2024-01-28'
        /// </summary>
        public string UIItem17012016CellValueAsString = "2024-01-28";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '25.01.2016' cell equals '2024-01-29'
        /// </summary>
        public string UIItem25012016CellValueAsString = "2024-01-29";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '31.01.2016' cell equals '2024-02-04'
        /// </summary>
        public string UIItem31012016CellValueAsString = "2024-02-04";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '14.03.2016' cell equals '2024-01-08'
        /// </summary>
        public string UIItem14032016CellValueAsString = "2024-01-08";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '03.04.2016' cell equals '2024-01-21'
        /// </summary>
        public string UIItem03042016CellValueAsString = "2024-01-21";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,92' cell equals '1531,83'
        /// </summary>
        public string UIItem892CellText = "1531,83";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Vollter, Sven' cell equals 'Vollter, Sven'
        /// </summary>
        public string UIVollterSvenCellValueAsString = "Vollter, Sven";
        
        /// <summary>
        /// Verify that the 'Text' property of '601' cell equals '601'
        /// </summary>
        public string UIItem601Cell2Text = "601";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferedFTTValuesStellanCurrent_C2_S12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferedFTTValuesStellanCurrent_C2_S12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '410 - Kveld/Nattillegg' cell equals '400 - Lør./Søndagstillegg'
        /// </summary>
        public string UIItem410KveldNattilleCellText = "400 - Lør./Søndagstillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '22,3' cell equals '14,87'
        /// </summary>
        public string UIItem223CellText = "14,87";
        
        /// <summary>
        /// Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '410 - Kveld/Nattillegg'
        /// </summary>
        public string UIItem400LørSøndagstilCellText = "410 - Kveld/Nattillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '11,15' cell equals '11,89'
        /// </summary>
        public string UIItem1115CellText = "11,89";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferedFTTValuesStellanPrevious_C2_S12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferedFTTValuesStellanPrevious_C2_S12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
        /// </summary>
        public string UIItem400LørSøndagstilCell1Text = "400 - Lør./Søndagstillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '41,62' cell equals '11,15'
        /// </summary>
        public string UIItem4162CellText = "11,15";
        
        /// <summary>
        /// Verify that the 'Text' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
        /// </summary>
        public string UIItem410KveldNattilleCell1Text = "410 - Kveld/Nattillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '41,62' cell equals '22,3'
        /// </summary>
        public string UIItem4162Cell1Text = "22,3";
        
        /// <summary>
        /// Verify that the 'Text' property of '[Row]4[Column]colFrom1' text box equals '08.01.2024'
        /// </summary>
        public string UIRow4ColumncolFrom1EditText = "08.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '[Row]4[Column]colTo1' text box equals '04.02.2024'
        /// </summary>
        public string UIRow4ColumncolTo1EditText = "04.02.2024";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferedFTTValuesStormare_C2_S15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferedFTTValuesStormare_C2_S15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]0[Column]colTo' text box equals '22.01.2024'
        /// </summary>
        public string UIRow0ColumncolToEditValueAsString = "22.01.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '22,3' cell equals '41,63'
        /// </summary>
        public string UIItem223CellText = "41,63";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
        /// </summary>
        public string UIItem410KveldNattilleCellValueAsString = "410 - Kveld/Nattillegg";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferedFTTValuesStormare_C2_S17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferedFTTValuesStormare_C2_S17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '41,62' cell equals '41.62'
        /// </summary>
        public string UIItem4162CellValueAsString = "41.63";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '510' cell equals '410'
        /// </summary>
        public string UIItem510Cell1ValueAsString = "410";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '14.02.2016' cell equals '2024-01-22'
        /// </summary>
        public string UIItem14022016CellValueAsString = "2024-01-22";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Endre, Lena' cell equals 'Stormare, Peter'
        /// </summary>
        public string UIEndreLenaCellValueAsString = "Stormare, Peter";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferePeriod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferePeriodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]0[Column]colFrom' text box equals '05.08.2024'
        /// </summary>
        public string UIRow0ColumncolFromEditValueAsString = "05.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]0[Column]colTo' text box equals '25.08.2024'
        /// </summary>
        public string UIRow0ColumncolToEditValueAsString = "25.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]1[Column]colFrom' text box equals '05.08.2024'
        /// </summary>
        public string UIRow1ColumncolFromEditValueAsString = "05.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]1[Column]colTo' text box equals '25.08.2024'
        /// </summary>
        public string UIRow1ColumncolToEditValueAsString = "25.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]2[Column]colFrom' text box equals '05.08.2024'
        /// </summary>
        public string UIRow2ColumncolFromEditValueAsString = "05.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]2[Column]colTo' text box equals '25.08.2024'
        /// </summary>
        public string UIRow2ColumncolToEditValueAsString = "25.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]3[Column]colFrom' text box equals '05.08.2024'
        /// </summary>
        public string UIRow3ColumncolFromEditValueAsString = "05.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]3[Column]colTo' text box equals '25.08.2024'
        /// </summary>
        public string UIRow3ColumncolToEditValueAsString = "25.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]4[Column]colFrom' text box equals '19.08.2024'
        /// </summary>
        public string UIRow4ColumncolFromEditValueAsString = "19.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]4[Column]colTo' text box equals '25.08.2024'
        /// </summary>
        public string UIRow4ColumncolToEditValueAsString = "25.08.2024";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferFTTButtonDisabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferFTTButtonDisabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Overfør...' button equals 'False'
        /// </summary>
        public bool UIOverførButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferFTTButtonEnabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferFTTButtonEnabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Overfør...' button equals 'True'
        /// </summary>
        public bool UIOverførButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferPeriod_C1_S20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferPeriod_C1_S20ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]2[Column]colFrom' text box equals '05.08.2024'
        /// </summary>
        public string UIRow2ColumncolFromEditValueAsString = "05.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]2[Column]colTo' text box equals '15.09.2024'
        /// </summary>
        public string UIRow2ColumncolToEditValueAsString = "15.09.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]3[Column]colFrom' text box equals '19.08.2024'
        /// </summary>
        public string UIRow3ColumncolFromEditValueAsString = "19.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]3[Column]colTo' text box equals '15.09.2024'
        /// </summary>
        public string UIRow3ColumncolToEditValueAsString = "15.09.2024";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferPeriodAndEmployees_C2_S4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferPeriodAndEmployees_C2_S4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'deExportFrom' text box equals '2024-08-01'
        /// </summary>
        public string UIDeExportFromEditValueAsString = "2024-08-01";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Skarsgård, Stellan'
        /// </summary>
        public string UIAdamsMaudCellValueAsString = "Skarsgård, Stellan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Stormare, Peter'
        /// </summary>
        public string UIBergmanIngridCellValueAsString = "Stormare, Peter";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Edwall, Allan'
        /// </summary>
        public string UIBergmanIngridCell1ValueAsString = "Edwall, Allan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTransferUTAandPeriod_C1_S25'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckTransferUTAandPeriod_C1_S25ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]0[Column]colFrom' text box equals '05.08.2024'
        /// </summary>
        public string UIRow0ColumncolFromEditValueAsString = "05.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]0[Column]colTo' text box equals '15.09.2024'
        /// </summary>
        public string UIRow0ColumncolToEditValueAsString = "15.09.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '[Row]0[Column]colHours' text box equals '8,67'
        /// </summary>
        public string UIRow0ColumncolHoursEditText = "8,67";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]1[Column]colFrom' text box equals '05.08.2024'
        /// </summary>
        public string UIRow1ColumncolFromEditValueAsString = "05.08.2024";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '[Row]1[Column]colTo' text box equals '12.08.2024'
        /// </summary>
        public string UIRow1ColumncolToEditValueAsString = "12.08.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,67' cell equals '21,13'
        /// </summary>
        public string UIItem867CellText = "21,13";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Bergman, Ingrid' cell equals 'Garbo, Greta'
        /// </summary>
        public string UIBergmanIngridCellValueAsString = "Garbo, Greta";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Adams, Maud' cell equals 'Endre, Lena'
        /// </summary>
        public string UIAdamsMaudCellValueAsString = "Endre, Lena";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckUTACalculationEndre_Garbo_C1_S23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckUTACalculationEndre_Garbo_C1_S23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6' PivotGridCell equals '6'
        /// </summary>
        public string UIItem6PivotGridCellValueAsString = "6";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6' PivotGridCell equals '6'
        /// </summary>
        public string UIItem6PivotGridCellValueAsString1 = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckUTACalculationGarbo_C1_S24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckUTACalculationGarbo_C1_S24ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Garbo, Greta' PivotGridFieldValue equals 'Garbo, Greta'
        /// </summary>
        public string UIGarboGretaPivotGridFieldValueValueAsString = "Garbo, Greta";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2' PivotGridCell equals '5.57142857142858'
        /// </summary>
        public string UIItem2PivotGridCell1ValueAsString = "5.57142857142858";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckUTCalculationEndre_Garbo_C1_S24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckUTCalculationEndre_Garbo_C1_S24ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Endre, Lena' PivotGridFieldValue equals 'Endre, Lena'
        /// </summary>
        public string UIEndreLenaPivotGridFieldValueValueAsString = "Endre, Lena";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,67' PivotGridCell equals '8,67'
        /// </summary>
        public string UIItem867PivotGridCellText = "8,67";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Garbo, Greta' PivotGridFieldValue equals 'Garbo, Greta'
        /// </summary>
        public string UIGarboGretaPivotGridFieldValueValueAsString = "Garbo, Greta";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '21,13'
        /// </summary>
        public string UIItem2PivotGridCell1Text = "21,13";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConnectWhishplanEaster2016ToCopyOfFFTBaseplan'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConnectWhishplanEaster2016ToCopyOfFFTBaseplanParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'drdBasePlan' LookUpEdit
        /// </summary>
        public string UIDrdBasePlanLookUpEditValueAsString = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateAbsenceWithCode45_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateAbsenceWithCode45_1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'ddlAbsCode' LookUpEdit
        /// </summary>
        public string UIDdlAbsCodeLookUpEditValueAsString = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateAbsenceWithCode45_2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateAbsenceWithCode45_2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'ddlAbsCode' LookUpEdit
        /// </summary>
        public string UIDdlAbsCodeLookUpEditValueAsString = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeleteA1shiftTueWeek2Line2Stormare'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteA1shiftTueWeek2Line2StormareParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Delete}{Tab}' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "{Delete}{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditF3PlanSettings'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EditF3PlanSettingsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Gatsoft.Localization.TranslatedString' in 'cmbChoices' combo box
        /// </summary>
        public string UICmbChoicesComboBoxValueTypeName = "Gatsoft.Localization.TranslatedString";
        
        /// <summary>
        /// Select 'Fast verdi [SelectionStart]0' in 'cmbChoices' combo box
        /// </summary>
        public string UICmbChoicesComboBoxValueAsString = "Fast verdi [SelectionStart]0";
        
        /// <summary>
        /// Type '{Tab}' in 'ComboBoxPopupListBox' list box
        /// </summary>
        public string UIComboBoxPopupListBoxListSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '8,00 [SelectionStart]0[SelectionLength]4' in 'eNumber' text box
        /// </summary>
        public string UIENumberEditValueAsString = "8,00 [SelectionStart]0[SelectionLength]4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditLineSettingsRheborg'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EditLineSettingsRheborgParams
    {
        
        #region Fields
        /// <summary>
        /// Type '5,00 [SelectionStart]0[SelectionLength]4' in 'eNumber[2]' text box
        /// </summary>
        public string UIENumber2EditValueAsString = "5,00 [SelectionStart]0[SelectionLength]4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditOscarssonLine_C6_11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EditOscarssonLine_C6_11Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'd2' in '[Row]0[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit1ValueAsString = "d2";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]0[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd2' in '[Row]0[Column]RosterCell_12' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit11ValueAsString = "d2";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]0[Column]RosterCell_12' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit11SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditOscarssonLine_C6_15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EditOscarssonLine_C6_15Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'bv2' in '[Row]0[Column]RosterCell_15' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit2ValueAsString = "bv2";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]0[Column]RosterCell_15' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit2SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'bv2' in '[Row]0[Column]RosterCell_16' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit12ValueAsString = "bv2";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]0[Column]RosterCell_16' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit12SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'kk2' in '[Row]0[Column]RosterCell_23' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit21ValueAsString = "kk2";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]0[Column]RosterCell_23' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit21SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditOscarssonLine2_C6_20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EditOscarssonLine2_C6_20Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'kk4' in '[Row]1[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditValueAsString = "kk4";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'kk4' in '[Row]1[Column]RosterCell_10' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit11ValueAsString = "kk4";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_10' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit11SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'kk4' in '[Row]1[Column]RosterCell_17' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit21ValueAsString = "kk4";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_17' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit21SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'kk4' in '[Row]1[Column]RosterCell_24' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit3ValueAsString = "kk4";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_24' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit3SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditVollterLine_C6_9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EditVollterLine_C6_9Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'bv2' in '[Row]1[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditValueAsString = "bv2";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'bv2' in '[Row]1[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit1ValueAsString = "bv2";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'bv2' in '[Row]1[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit22ValueAsString = "bv2";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit22SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExpandMasterDetailsForAllEmployees'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExpandMasterDetailsForAllEmployeesParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + i' in 'gcExports' table
        /// </summary>
        public string UIGcExportsTableSendKeys = "i";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertA1shiftSatWeek4Line2Stormare'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertA1shiftSatWeek4Line2StormareParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'a' in '[Row]2[Column]RosterCell_26' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit11ValueAsString = "a";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]2[Column]RosterCell_26' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit11SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertA1shiftTueWeek2Line2Stormare'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertA1shiftTueWeek2Line2StormareParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'a' in '[Row]2[Column]RosterCell_8' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEditValueAsString = "a";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]2[Column]RosterCell_8' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertA1shiftWedWeek3Line2Stormare'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertA1shiftWedWeek3Line2StormareParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'a{Tab}' in '[Row]2[Column]RosterCell_16' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit1SendKeys = "a{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertAandDshiftsWeek4Line2Persbrandt'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertAandDshiftsWeek4Line2PersbrandtParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'a' in '[Row]1[Column]RosterCell_21' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditValueAsString = "a";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_21' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'a' in '[Row]1[Column]RosterCell_22' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit1ValueAsString = "a";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_22' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd1' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "d1";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_26' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit2SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd1' in '[Row]1[Column]RosterCell_27' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit3ValueAsString = "d1";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_27' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit3SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertAshiftMonday'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertAshiftMondayParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'a{Tab}' in '[Row]0[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "a{Tab}";
        
        /// <summary>
        /// Type 'a{Tab}' in '[Row]1[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditSendKeys = "a{Tab}";
        
        /// <summary>
        /// Type '{DELETE}{Tab}' in '[Row]2[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEditSendKeys = "{DELETE}{Tab}";
        
        /// <summary>
        /// Type '{DELETE}{Tab}' in '[Row]3[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEditSendKeys = "{DELETE}{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertD1shiftsLine1And2Haber'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertD1shiftsLine1And2HaberParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'd1{Tab}' in '[Row]7[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow7ColumnRosterCellEditSendKeys = "d1{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertD1shiftsLine2Rheborg'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertD1shiftsLine2RheborgParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'd1' in '[Row]7[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow7ColumnRosterCellEditValueAsString = "d1";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]7[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow7ColumnRosterCellEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd1' in '[Row]7[Column]RosterCell_1' text box
        /// </summary>
        public string UIRow7ColumnRosterCellEdit1ValueAsString = "d1";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]7[Column]RosterCell_1' text box
        /// </summary>
        public string UIRow7ColumnRosterCellEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd1' in '[Row]7[Column]RosterCell_2' text box
        /// </summary>
        public string UIRow7ColumnRosterCellEdit2ValueAsString = "d1";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]7[Column]RosterCell_2' text box
        /// </summary>
        public string UIRow7ColumnRosterCellEdit2SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd1' in '[Row]7[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow7ColumnRosterCellEdit3ValueAsString = "d1";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]7[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow7ColumnRosterCellEdit3SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertD2SunOscarsson'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertD2SunOscarssonParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'd2' in '[Row]0[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditValueAsString = "d2";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]0[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertDHshiftWeek3Line3Gustavsson'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertDHshiftWeek3Line3GustavssonParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'dh' in '[Row]3[Column]RosterCell_19' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEditValueAsString = "dh";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]3[Column]RosterCell_19' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertDshift3WeeksEndreGarbo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertDshift3WeeksEndreGarboParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Type 'd' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "d";
        
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Type '{Tab}' in '[Row]5[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow5ColumnRosterCellEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys1 = "d";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]6[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow6ColumnRosterCellEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys2 = "d";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]5[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow5ColumnRosterCellEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys3 = "d";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]6[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow6ColumnRosterCellEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys4 = "d";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]5[Column]RosterCell_14' text box
        /// </summary>
        public string UIRow5ColumnRosterCellEdit2SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys5 = "d";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]6[Column]RosterCell_14' text box
        /// </summary>
        public string UIRow6ColumnRosterCellEdit2SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertDshiftMonEkland'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertDshiftMonEklandParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'd' in '[Row]3[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEditValueAsString = "d";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]3[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertDshiftWeek1And2Gustavsson'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertDshiftWeek1And2GustavssonParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'd' in '[Row]2[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEditValueAsString = "d";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]2[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "d";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]2[Column]RosterCell_11' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit1SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertDshiftWeek1Line4Gustavsson'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertDshiftWeek1Line4GustavssonParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'd' in '[Row]4[Column]RosterCell_4' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEditValueAsString = "d";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]4[Column]RosterCell_4' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertF3shiftLine2Rheborg'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertF3shiftLine2RheborgParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'f3' in '[Row]7[Column]RosterCell_4' text box
        /// </summary>
        public string UIRow7ColumnRosterCellEdit4ValueAsString = "f3";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]7[Column]RosterCell_4' text box
        /// </summary>
        public string UIRow7ColumnRosterCellEdit4SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertHJ2ThuVollter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertHJ2ThuVollterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'hj2' in '[Row]1[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditValueAsString = "hj2";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertNshiftMonEkland'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertNshiftMonEklandParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'n' in '[Row]4[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEditValueAsString = "n";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]4[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertNshiftMonWeek2Ekland'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertNshiftMonWeek2EklandParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'n' in '[Row]4[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit1ValueAsString = "n";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]4[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit1SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertNshiftMonWeek3Ekland'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertNshiftMonWeek3EklandParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'n' in '[Row]4[Column]RosterCell_14' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit11ValueAsString = "n";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]4[Column]RosterCell_14' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit11SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertNshiftMonWeek3Stormare'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertNshiftMonWeek3StormareParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'n' in '[Row]1[Column]RosterCell_14' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditValueAsString = "n";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_14' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertShiftsWeek2AndshiftWeek3_C3_S19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertShiftsWeek2AndshiftWeek3_C3_S19Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'f3' in '[Row]1[Column]RosterCell_10' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditValueAsString = "f3";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_10' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'f3' in '[Row]1[Column]RosterCell_11' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit1ValueAsString = "f3";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_11' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'f3' in '[Row]1[Column]RosterCell_20' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit2ValueAsString = "f3";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_20' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit2SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectShowAllEmpsInExportFTTWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectShowAllEmpsInExportFTTWindowParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Gatsoft.Gat.RosterPlan.FixedPayment.UI.ViewModels.NoFilter' in 'cbeFilter' combo box
        /// </summary>
        public string UICbeFilterComboBoxValueTypeName = "Gatsoft.Gat.RosterPlan.FixedPayment.UI.ViewModels.NoFilter";
        
        /// <summary>
        /// Select 'Alle ansatte med tillegg [SelectionStart]0' in 'cbeFilter' combo box
        /// </summary>
        public string UICbeFilterComboBoxValueAsString = "Alle ansatte med tillegg [SelectionStart]0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ShowFTTAsAveragePrMnd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ShowFTTAsAveragePrMndParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Gatsoft.Gat.RosterPlan.FixedPayment.Logic.Models.CalculationTypes.AveragePerMonthCalculationTypeModel' in 'cbeCalculationType' combo box
        /// </summary>
        public string UICbeCalculationTypeComboBoxValueTypeName = "Gatsoft.Gat.RosterPlan.FixedPayment.Logic.Models.CalculationTypes.AveragePerMonth" +
            "CalculationTypeModel";
        
        /// <summary>
        /// Select 'Gjennomsnitt per. Mnd. [SelectionStart]0' in 'cbeCalculationType' combo box
        /// </summary>
        public string UICbeCalculationTypeComboBoxValueAsString = "Gjennomsnitt per. Mnd. [SelectionStart]0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ShowFTTAsAveragePrMndCalendarPlan'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ShowFTTAsAveragePrMndCalendarPlanParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Gatsoft.Gat.RosterPlan.FixedPayment.Logic.Models.CalculationTypes.AveragePerMonthCalculationTypeModel' in 'cbeCalculationType' combo box
        /// </summary>
        public string UICbeCalculationTypeComboBoxValueTypeName = "Gatsoft.Gat.RosterPlan.FixedPayment.Logic.Models.CalculationTypes.AveragePerMonth" +
            "CalculationTypeModel";
        
        /// <summary>
        /// Select 'Gjennomsnitt per. Mnd. [SelectionStart]0' in 'cbeCalculationType' combo box
        /// </summary>
        public string UICbeCalculationTypeComboBoxValueAsString = "Gjennomsnitt per. Mnd. [SelectionStart]0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ShowFTTAsTotalCalendarPlan'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ShowFTTAsTotalCalendarPlanParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Gatsoft.Gat.RosterPlan.FixedPayment.Logic.Models.CalculationTypes.TotalCalculationTypeModel' in 'cbeCalculationType' combo box
        /// </summary>
        public string UICbeCalculationTypeComboBoxValueTypeName = "Gatsoft.Gat.RosterPlan.FixedPayment.Logic.Models.CalculationTypes.TotalCalculatio" +
            "nTypeModel";
        
        /// <summary>
        /// Select 'Totalt for hele arbeidsplan [SelectionStart]0' in 'cbeCalculationType' combo box
        /// </summary>
        public string UICbeCalculationTypeComboBoxValueAsString = "Totalt for hele arbeidsplan [SelectionStart]0";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanFTTArbeidWindow : DXWindow
    {
        
        public UIArbeidsplanFTTArbeidWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRcMenuRibbon UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        #endregion
        
        #region Fields
        private UIRcMenuRibbon mUIRcMenuRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRcMenuRibbon : DXRibbon
    {
        
        public UIRcMenuRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: FTT Arbeidsplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpPlanRibbonPage UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpPlanRibbonPage mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpPlanRibbonPage : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: FTT Arbeidsplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpgPlanCopyRosterRibbonPageGroup UIRpgPlanCopyRosterRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPlanCopyRosterRibbonPageGroup == null))
                {
                    this.mUIRpgPlanCopyRosterRibbonPageGroup = new UIRpgPlanCopyRosterRibbonPageGroup(this);
                }
                return this.mUIRpgPlanCopyRosterRibbonPageGroup;
            }
        }
        
        public UIRibbonPageGroup17RibbonPageGroup UIRibbonPageGroup17RibbonPageGroup
        {
            get
            {
                if ((this.mUIRibbonPageGroup17RibbonPageGroup == null))
                {
                    this.mUIRibbonPageGroup17RibbonPageGroup = new UIRibbonPageGroup17RibbonPageGroup(this);
                }
                return this.mUIRibbonPageGroup17RibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPlanCopyRosterRibbonPageGroup mUIRpgPlanCopyRosterRibbonPageGroup;
        
        private UIRibbonPageGroup17RibbonPageGroup mUIRibbonPageGroup17RibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPlanCopyRosterRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgPlanCopyRosterRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPlanCopyRoster";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: FTT Arbeidsplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UINyarbeidsplanRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUINyarbeidsplanRibbonBaseButtonItem == null))
                {
                    this.mUINyarbeidsplanRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUINyarbeidsplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCopyRosterPlan";
                    this.mUINyarbeidsplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUINyarbeidsplanRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: FTT Arbeidsplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUINyarbeidsplanRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUINyarbeidsplanRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonPageGroup17RibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRibbonPageGroup17RibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonPageGroup17";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: FTT Arbeidsplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIBtnCloseRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIBtnCloseRibbonBaseButtonItem == null))
                {
                    this.mUIBtnCloseRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIBtnCloseRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnClose";
                    this.mUIBtnCloseRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIBtnCloseRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: FTT Arbeidsplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIBtnCloseRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIBtnCloseRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINyarbeidsplanWindow : DXWindow
    {
        
        public UINyarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ny arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainClient UIPnlMainClient
        {
            get
            {
                if ((this.mUIPnlMainClient == null))
                {
                    this.mUIPnlMainClient = new UIPnlMainClient(this);
                }
                return this.mUIPnlMainClient;
            }
        }
        
        public UIPnlButtonsClient UIPnlButtonsClient
        {
            get
            {
                if ((this.mUIPnlButtonsClient == null))
                {
                    this.mUIPnlButtonsClient = new UIPnlButtonsClient(this);
                }
                return this.mUIPnlButtonsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainClient mUIPnlMainClient;
        
        private UIPnlButtonsClient mUIPnlButtonsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainClient : DXTestControl
    {
        
        public UIPnlMainClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGsLayoutControlMainCustom UIGsLayoutControlMainCustom
        {
            get
            {
                if ((this.mUIGsLayoutControlMainCustom == null))
                {
                    this.mUIGsLayoutControlMainCustom = new UIGsLayoutControlMainCustom(this);
                }
                return this.mUIGsLayoutControlMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGsLayoutControlMainCustom mUIGsLayoutControlMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsLayoutControlMainCustom : DXTestControl
    {
        
        public UIGsLayoutControlMainCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsLayoutControlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNaLayoutGroup UILayoutControlGroupNaLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNaLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNaLayoutGroup = new UILayoutControlGroupNaLayoutGroup(this);
                }
                return this.mUILayoutControlGroupNaLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNaLayoutGroup mUILayoutControlGroupNaLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNaLayoutGroup : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNaLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupName";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNeLayoutGroup UILayoutControlGroupNeLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNeLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNeLayoutGroup = new UILayoutControlGroupNeLayoutGroup(this);
                }
                return this.mUILayoutControlGroupNeLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNeLayoutGroup mUILayoutControlGroupNeLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNeLayoutGroup : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNeLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupNewValues";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcMainInfoLayoutControlItem UILcMainInfoLayoutControlItem
        {
            get
            {
                if ((this.mUILcMainInfoLayoutControlItem == null))
                {
                    this.mUILcMainInfoLayoutControlItem = new UILcMainInfoLayoutControlItem(this);
                }
                return this.mUILcMainInfoLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainInfoLayoutControlItem mUILcMainInfoLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILcMainInfoLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILcMainInfoLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainInfoClient UIPnlMainInfoClient
        {
            get
            {
                if ((this.mUIPnlMainInfoClient == null))
                {
                    this.mUIPnlMainInfoClient = new UIPnlMainInfoClient(this);
                }
                return this.mUIPnlMainInfoClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainInfoClient mUIPnlMainInfoClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainInfoClient : DXTestControl
    {
        
        public UIPnlMainInfoClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UIPceDate1PopupEdit
        {
            get
            {
                if ((this.mUIPceDate1PopupEdit == null))
                {
                    this.mUIPceDate1PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[1]";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate1PopupEdit.WindowTitles.Add("Ny arbeidsplan");
                    #endregion
                }
                return this.mUIPceDate1PopupEdit;
            }
        }
        
        public DXCheckBox UIChkKladdCheckBox
        {
            get
            {
                if ((this.mUIChkKladdCheckBox == null))
                {
                    this.mUIChkKladdCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkKladdCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkKladd";
                    this.mUIChkKladdCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkKladdCheckBox.WindowTitles.Add("Ny arbeidsplan");
                    #endregion
                }
                return this.mUIChkKladdCheckBox;
            }
        }
        
        public DXTextEdit UITxtNameEdit
        {
            get
            {
                if ((this.mUITxtNameEdit == null))
                {
                    this.mUITxtNameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUITxtNameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "txtName";
                    this.mUITxtNameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUITxtNameEdit.WindowTitles.Add("Ny arbeidsplan");
                    #endregion
                }
                return this.mUITxtNameEdit;
            }
        }
        
        public UIDeStartDateCustom UIDeStartDateCustom
        {
            get
            {
                if ((this.mUIDeStartDateCustom == null))
                {
                    this.mUIDeStartDateCustom = new UIDeStartDateCustom(this);
                }
                return this.mUIDeStartDateCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUIPceDate1PopupEdit;
        
        private DXCheckBox mUIChkKladdCheckBox;
        
        private DXTextEdit mUITxtNameEdit;
        
        private UIDeStartDateCustom mUIDeStartDateCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDeStartDateCustom : DXTestControl
    {
        
        public UIDeStartDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "deStartDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Ny arbeidsplan");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlButtonsClient : DXTestControl
    {
        
        public UIPnlButtonsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Ny arbeidsplan");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : DXWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-3999 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-3999 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btOK";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("GT-3999 - Informasjon");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        
        public UIRcMenuRibbon1 UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon1(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel mUIDpnlVisualizationDockPanel;
        
        private UIRcMenuRibbon1 mUIRcMenuRibbon;
        
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList : DXTestControl
    {
        
        public UITcVisualizationTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
           
        public UITpFixedPaymentClient UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        
        private UITpFixedPaymentClient mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient : DXTestControl
    {
        
        public UITpFixedPaymentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom : DXTestControl
    {
        
        public UIFixedPaymentControlCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom : DXTestControl
    {
        
        public UIViewHost1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom1 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom1(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom1 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom1 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        
        public DXButton UIKalkulerButton
        {
            get
            {
                if ((this.mUIKalkulerButton == null))
                {
                    this.mUIKalkulerButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIKalkulerButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCalculate";
                    this.mUIKalkulerButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIKalkulerButton.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIKalkulerButton;
            }
        }
        
        public DXButton UIOverførButton
        {
            get
            {
                if ((this.mUIOverførButton == null))
                {
                    this.mUIOverførButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnExport";
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIOverførButton.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIOverførButton;
            }
        }
        
        public DXButton UIStoppButton
        {
            get
            {
                if ((this.mUIStoppButton == null))
                {
                    this.mUIStoppButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnStop";
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIStoppButton.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIStoppButton;
            }
        }
        
        public DXButton UIViseksportloggButton
        {
            get
            {
                if ((this.mUIViseksportloggButton == null))
                {
                    this.mUIViseksportloggButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIViseksportloggButton.SearchProperties[DXTestControl.PropertyNames.Name] = "ddbExportLogs";
                    this.mUIViseksportloggButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
                    this.mUIViseksportloggButton.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIViseksportloggButton;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid mUIPgcCalculationResultPivotGrid;
        
        private DXButton mUIKalkulerButton;
        
        private DXButton mUIOverførButton;
        
        private DXButton mUIStoppButton;
        
        private DXButton mUIViseksportloggButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem0PivotGridCell
        {
            get
            {
                if ((this.mUIItem0PivotGridCell == null))
                {
                    this.mUIItem0PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem0PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]0";
                    this.mUIItem0PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem0PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem0PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem8PivotGridCell
        {
            get
            {
                if ((this.mUIItem8PivotGridCell == null))
                {
                    this.mUIItem8PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]1";
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem8PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem8PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem8PivotGridCell1
        {
            get
            {
                if ((this.mUIItem8PivotGridCell1 == null))
                {
                    this.mUIItem8PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem8PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]2";
                    this.mUIItem8PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem8PivotGridCell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem8PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem18PivotGridCell
        {
            get
            {
                if ((this.mUIItem18PivotGridCell == null))
                {
                    this.mUIItem18PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem18PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]3";
                    this.mUIItem18PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem18PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem18PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem18PivotGridCell1
        {
            get
            {
                if ((this.mUIItem18PivotGridCell1 == null))
                {
                    this.mUIItem18PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem18PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]4";
                    this.mUIItem18PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem18PivotGridCell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem18PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem28PivotGridCell
        {
            get
            {
                if ((this.mUIItem28PivotGridCell == null))
                {
                    this.mUIItem28PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem28PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem28PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem28PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem28PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem1725PivotGridCell
        {
            get
            {
                if ((this.mUIItem1725PivotGridCell == null))
                {
                    this.mUIItem1725PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1725PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem1725PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem1725PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem1725PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem14PivotGridCell
        {
            get
            {
                if ((this.mUIItem14PivotGridCell == null))
                {
                    this.mUIItem14PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem14PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]2";
                    this.mUIItem14PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem14PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem14PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem28PivotGridCell1
        {
            get
            {
                if ((this.mUIItem28PivotGridCell1 == null))
                {
                    this.mUIItem28PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem28PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]3";
                    this.mUIItem28PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem28PivotGridCell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem28PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem28PivotGridCell2
        {
            get
            {
                if ((this.mUIItem28PivotGridCell2 == null))
                {
                    this.mUIItem28PivotGridCell2 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem28PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]4";
                    this.mUIItem28PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem28PivotGridCell2.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem28PivotGridCell2;
            }
        }
        
        public DXPivotGridFieldValue UIItem04012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem04012016PivotGridFieldValue == null))
                {
                    this.mUIItem04012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem04012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]0";
                    this.mUIItem04012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem04012016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem04012016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem24012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem24012016PivotGridFieldValue == null))
                {
                    this.mUIItem24012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem24012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]0";
                    this.mUIItem24012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem24012016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem24012016PivotGridFieldValue;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem0PivotGridCell;
        
        private DXPivotGridCell mUIItem8PivotGridCell;
        
        private DXPivotGridCell mUIItem8PivotGridCell1;
        
        private DXPivotGridCell mUIItem18PivotGridCell;
        
        private DXPivotGridCell mUIItem18PivotGridCell1;
        
        private DXPivotGridCell mUIItem28PivotGridCell;
        
        private DXPivotGridCell mUIItem1725PivotGridCell;
        
        private DXPivotGridCell mUIItem14PivotGridCell;
        
        private DXPivotGridCell mUIItem28PivotGridCell1;
        
        private DXPivotGridCell mUIItem28PivotGridCell2;
        
        private DXPivotGridFieldValue mUIItem04012016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem24012016PivotGridFieldValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRcMenuRibbon1 : DXRibbon
    {
        
        public UIRcMenuRibbon1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpRosterPlanRibbonPage UIRpRosterPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpRosterPlanRibbonPage == null))
                {
                    this.mUIRpRosterPlanRibbonPage = new UIRpRosterPlanRibbonPage(this);
                }
                return this.mUIRpRosterPlanRibbonPage;
            }
        }
        
        public UIRpPlanRibbonPage1 UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage1(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpRosterPlanRibbonPage mUIRpRosterPlanRibbonPage;
        
        private UIRpPlanRibbonPage1 mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpRosterPlanRibbonPage : DXRibbonPage
    {
        
        public UIRpRosterPlanRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIGrpEditRibbonPageGroup UIGrpEditRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpEditRibbonPageGroup == null))
                {
                    this.mUIGrpEditRibbonPageGroup = new UIGrpEditRibbonPageGroup(this);
                }
                return this.mUIGrpEditRibbonPageGroup;
            }
        }
        
        public UIGrpCloseRibbonPageGroup UIGrpCloseRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpCloseRibbonPageGroup == null))
                {
                    this.mUIGrpCloseRibbonPageGroup = new UIGrpCloseRibbonPageGroup(this);
                }
                return this.mUIGrpCloseRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpEditRibbonPageGroup mUIGrpEditRibbonPageGroup;
        
        private UIGrpCloseRibbonPageGroup mUIGrpCloseRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpEditRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpEditRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIRedigerRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIRedigerRibbonBaseButtonItem == null))
                {
                    this.mUIRedigerRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIRedigerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditMode";
                    this.mUIRedigerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIRedigerRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIRedigerRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIRedigerRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpCloseRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpCloseRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpClose";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIBtnCloseRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIBtnCloseRibbonBaseButtonItem == null))
                {
                    this.mUIBtnCloseRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIBtnCloseRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnClose";
                    this.mUIBtnCloseRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIBtnCloseRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIBtnCloseRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIBtnCloseRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpPlanRibbonPage1 : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpgPlanRibbonPageGroup UIRpgPlanRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPlanRibbonPageGroup == null))
                {
                    this.mUIRpgPlanRibbonPageGroup = new UIRpgPlanRibbonPageGroup(this);
                }
                return this.mUIRpgPlanRibbonPageGroup;
            }
        }
        
        public UIRibbonPageGroup9RibbonPageGroup UIRibbonPageGroup9RibbonPageGroup
        {
            get
            {
                if ((this.mUIRibbonPageGroup9RibbonPageGroup == null))
                {
                    this.mUIRibbonPageGroup9RibbonPageGroup = new UIRibbonPageGroup9RibbonPageGroup(this);
                }
                return this.mUIRibbonPageGroup9RibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPlanRibbonPageGroup mUIRpgPlanRibbonPageGroup;
        
        private UIRibbonPageGroup9RibbonPageGroup mUIRibbonPageGroup9RibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPlanRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgPlanRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIInnstillingerRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIInnstillingerRibbonBaseButtonItem == null))
                {
                    this.mUIInnstillingerRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIInnstillingerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSettings";
                    this.mUIInnstillingerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIInnstillingerRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIInnstillingerRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIInnstillingerRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonPageGroup9RibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRibbonPageGroup9RibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonPageGroup9";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIRedigerRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIRedigerRibbonBaseButtonItem == null))
                {
                    this.mUIRedigerRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIRedigerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditMode";
                    this.mUIRedigerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIRedigerRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIRedigerRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIRedigerRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_1";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        
        public DXCell UIDCell
        {
            get
            {
                if ((this.mUIDCell == null))
                {
                    this.mUIDCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_0";
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIDCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXCell mUIACell;
        
        private DXCell mUIDCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow1 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient1 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient1(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIDpnlVisualizationDockPanel1 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel1(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        
        public UIRcMenuRibbon2 UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon2(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient1 mUIPnlRosterPlanClient;
        
        private UIDpnlVisualizationDockPanel1 mUIDpnlVisualizationDockPanel;
        
        private UIRcMenuRibbon2 mUIRcMenuRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient1 : DXTestControl
    {
        
        public UIPnlRosterPlanClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable1 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable1(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable1 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable1 : DXGrid
    {
        
        public UIGcRosterPlanTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit == null))
                {
                    this.mUIRow3ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_0";
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_0";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit == null))
                {
                    this.mUIRow4ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_0";
                    this.mUIRow4ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_7";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_7";
                    this.mUIRow4ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_14";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit11
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit11 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit11 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_14";
                    this.mUIRow4ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit11.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit11;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_0";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_4";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXTextEdit UIRow5ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow5ColumnRosterCellEdit == null))
                {
                    this.mUIRow5ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow5ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]5[Column]RosterCell_0";
                    this.mUIRow5ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow5ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow5ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell21
        {
            get
            {
                if ((this.mUIItemCell21 == null))
                {
                    this.mUIItemCell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_0";
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell21.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell21;
            }
        }
        
        public DXCell UIItemCell31
        {
            get
            {
                if ((this.mUIItemCell31 == null))
                {
                    this.mUIItemCell31 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_4";
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell31.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell31;
            }
        }
        
        public DXTextEdit UIRow6ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow6ColumnRosterCellEdit == null))
                {
                    this.mUIRow6ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow6ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]6[Column]RosterCell_0";
                    this.mUIRow6ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow6ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow6ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_7";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_11";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXTextEdit UIRow5ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow5ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow5ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow5ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]5[Column]RosterCell_7";
                    this.mUIRow5ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow5ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow5ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_7";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_11";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXTextEdit UIRow6ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow6ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow6ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow6ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]6[Column]RosterCell_7";
                    this.mUIRow6ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow6ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow6ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_14";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_18";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXTextEdit UIRow5ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow5ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow5ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow5ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]5[Column]RosterCell_14";
                    this.mUIRow5ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow5ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow5ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell10
        {
            get
            {
                if ((this.mUIItemCell10 == null))
                {
                    this.mUIItemCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_14";
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell10.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell10;
            }
        }
        
        public DXCell UIItemCell111
        {
            get
            {
                if ((this.mUIItemCell111 == null))
                {
                    this.mUIItemCell111 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell111.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_18";
                    this.mUIItemCell111.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell111.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell111;
            }
        }
        
        public DXTextEdit UIRow6ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow6ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow6ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow6ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]6[Column]RosterCell_14";
                    this.mUIRow6ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow6ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow6ColumnRosterCellEdit2;
            }
        }
        
        public DXTextEdit UIRow6ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow6ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow6ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow6ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]6[Column]RosterCell_4";
                    this.mUIRow6ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow6ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow6ColumnRosterCellEdit3;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit;
        
        private DXCell mUIItemCell1;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit;
        
        private DXCell mUIItemCell2;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell11;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit11;
        
        private DXCell mUIItemCell3;
        
        private DXCell mUIItemCell12;
        
        private DXTextEdit mUIRow5ColumnRosterCellEdit;
        
        private DXCell mUIItemCell21;
        
        private DXCell mUIItemCell31;
        
        private DXTextEdit mUIRow6ColumnRosterCellEdit;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell5;
        
        private DXTextEdit mUIRow5ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell7;
        
        private DXTextEdit mUIRow6ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell8;
        
        private DXCell mUIItemCell9;
        
        private DXTextEdit mUIRow5ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell10;
        
        private DXCell mUIItemCell111;
        
        private DXTextEdit mUIRow6ColumnRosterCellEdit2;
        
        private DXTextEdit mUIRow6ColumnRosterCellEdit3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel1 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom1 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom1(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom1 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom1 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList1 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList1(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList1 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList1 : DXTestControl
    {
        
        public UITcVisualizationTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient1 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient1(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient1 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient1 : DXTestControl
    {
        
        public UITpFixedPaymentClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom2 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom2(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom2 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom2 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom1 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom1(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom1 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom1 : DXTestControl
    {
        
        public UIViewHost1Custom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient1 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient1(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient1 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient1 : DXTestControl
    {
        
        public UIPcViewClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom3 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom3(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom3 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom3 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid1 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid1(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        
        public DXButton UIOverførButton
        {
            get
            {
                if ((this.mUIOverførButton == null))
                {
                    this.mUIOverførButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnExport";
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIOverførButton.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIOverførButton;
            }
        }
        
        public DXButton UIStoppButton
        {
            get
            {
                if ((this.mUIStoppButton == null))
                {
                    this.mUIStoppButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnStop";
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIStoppButton.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIStoppButton;
            }
        }
        
        public DXComboBox UICbeCalculationTypeComboBox
        {
            get
            {
                if ((this.mUICbeCalculationTypeComboBox == null))
                {
                    this.mUICbeCalculationTypeComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUICbeCalculationTypeComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "cbeCalculationType";
                    this.mUICbeCalculationTypeComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxEdit";
                    #endregion
                }
                return this.mUICbeCalculationTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid1 mUIPgcCalculationResultPivotGrid;
        
        private DXButton mUIOverførButton;
        
        private DXButton mUIStoppButton;
        
        private DXComboBox mUICbeCalculationTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid1 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIItem7PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem7PivotGridFieldValue == null))
                {
                    this.mUIItem7PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem7PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]LineId[LastLevelIndex]4";
                    this.mUIItem7PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem7PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItem7PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIEklandBrittPivotGridFieldValue
        {
            get
            {
                if ((this.mUIEklandBrittPivotGridFieldValue == null))
                {
                    this.mUIEklandBrittPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIEklandBrittPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]3";
                    this.mUIEklandBrittPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIEklandBrittPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIEklandBrittPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem2PivotGridCell
        {
            get
            {
                if ((this.mUIItem2PivotGridCell == null))
                {
                    this.mUIItem2PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]3";
                    this.mUIItem2PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem2PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItem2PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem8PivotGridCell
        {
            get
            {
                if ((this.mUIItem8PivotGridCell == null))
                {
                    this.mUIItem8PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]3";
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem8PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItem8PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIGarboGretaPivotGridFieldValue
        {
            get
            {
                if ((this.mUIGarboGretaPivotGridFieldValue == null))
                {
                    this.mUIGarboGretaPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIGarboGretaPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]6";
                    this.mUIGarboGretaPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIGarboGretaPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIGarboGretaPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem2PivotGridCell1
        {
            get
            {
                if ((this.mUIItem2PivotGridCell1 == null))
                {
                    this.mUIItem2PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]6";
                    this.mUIItem2PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem2PivotGridCell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItem2PivotGridCell1;
            }
        }
        
        public DXPivotGridFieldValue UIEndreLenaPivotGridFieldValue
        {
            get
            {
                if ((this.mUIEndreLenaPivotGridFieldValue == null))
                {
                    this.mUIEndreLenaPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIEndreLenaPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]5";
                    this.mUIEndreLenaPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIEndreLenaPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIEndreLenaPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem867PivotGridCell
        {
            get
            {
                if ((this.mUIItem867PivotGridCell == null))
                {
                    this.mUIItem867PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem867PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]5";
                    this.mUIItem867PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem867PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItem867PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIItem7PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIEklandBrittPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem2PivotGridCell;
        
        private DXPivotGridCell mUIItem8PivotGridCell;
        
        private DXPivotGridFieldValue mUIGarboGretaPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem2PivotGridCell1;
        
        private DXPivotGridFieldValue mUIEndreLenaPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem867PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRcMenuRibbon2 : DXRibbon
    {
        
        public UIRcMenuRibbon2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIRpRosterPlanRibbonPage1 UIRpRosterPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpRosterPlanRibbonPage == null))
                {
                    this.mUIRpRosterPlanRibbonPage = new UIRpRosterPlanRibbonPage1(this);
                }
                return this.mUIRpRosterPlanRibbonPage;
            }
        }
        
        public UIRpPlanRibbonPage2 UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage2(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpRosterPlanRibbonPage1 mUIRpRosterPlanRibbonPage;
        
        private UIRpPlanRibbonPage2 mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpRosterPlanRibbonPage1 : DXRibbonPage
    {
        
        public UIRpRosterPlanRibbonPage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIGrpEditRibbonPageGroup1 UIGrpEditRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpEditRibbonPageGroup == null))
                {
                    this.mUIGrpEditRibbonPageGroup = new UIGrpEditRibbonPageGroup1(this);
                }
                return this.mUIGrpEditRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpEditRibbonPageGroup1 mUIGrpEditRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpEditRibbonPageGroup1 : DXRibbonPageGroup
    {
        
        public UIGrpEditRibbonPageGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIBtnOkRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIBtnOkRibbonBaseButtonItem == null))
                {
                    this.mUIBtnOkRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIBtnOkRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIBtnOkRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIBtnOkRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIBtnOkRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIBtnOkRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpPlanRibbonPage2 : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIRibbonPageGroup9RibbonPageGroup1 UIRibbonPageGroup9RibbonPageGroup
        {
            get
            {
                if ((this.mUIRibbonPageGroup9RibbonPageGroup == null))
                {
                    this.mUIRibbonPageGroup9RibbonPageGroup = new UIRibbonPageGroup9RibbonPageGroup1(this);
                }
                return this.mUIRibbonPageGroup9RibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonPageGroup9RibbonPageGroup1 mUIRibbonPageGroup9RibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonPageGroup9RibbonPageGroup1 : DXRibbonPageGroup
    {
        
        public UIRibbonPageGroup9RibbonPageGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonPageGroup9";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIBtnOkRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIBtnOkRibbonBaseButtonItem == null))
                {
                    this.mUIBtnOkRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIBtnOkRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIBtnOkRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIBtnOkRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIBtnOkRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIBtnOkRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink1MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink1MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink1MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink1MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIBarButtonItemLink8MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink8MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink8MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink8MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[8]";
                    this.mUIBarButtonItemLink8MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink8MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIBarButtonItemLink0MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink0MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink0MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink0MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIBarButtonItemLink0MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink0MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIBarButtonItemLink5MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink5MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink5MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink5MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[6]";
                    this.mUIBarButtonItemLink5MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink5MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink1MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIBarButtonItemLink8MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIBarButtonItemLink0MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIBarButtonItemLink5MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILinjeinnstillingerEkWindow : DXWindow
    {
        
        public UILinjeinnstillingerEkWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Linjeinnstillinger", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Ekland, Britt]");
            this.WindowTitles.Add("Linjeinnstillinger");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        
        public UIGSPanelControlClient UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client mUIGsPanelControl3Client;
        
        private UIGSPanelControlClient mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl3Client : DXTestControl
    {
        
        public UIGsPanelControl3Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Ekland, Britt]");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UIPceDate0PopupEdit
        {
            get
            {
                if ((this.mUIPceDate0PopupEdit == null))
                {
                    this.mUIPceDate0PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[0]";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate0PopupEdit.WindowTitles.Add("Linjeinnstillinger - [Ekland, Britt]");
                    #endregion
                }
                return this.mUIPceDate0PopupEdit;
            }
        }
        
        public UIERevolveFromCustom UIERevolveFromCustom
        {
            get
            {
                if ((this.mUIERevolveFromCustom == null))
                {
                    this.mUIERevolveFromCustom = new UIERevolveFromCustom(this);
                }
                return this.mUIERevolveFromCustom;
            }
        }
        
        public UIERevolveToCustom UIERevolveToCustom
        {
            get
            {
                if ((this.mUIERevolveToCustom == null))
                {
                    this.mUIERevolveToCustom = new UIERevolveToCustom(this);
                }
                return this.mUIERevolveToCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUIPceDate0PopupEdit;
        
        private UIERevolveFromCustom mUIERevolveFromCustom;
        
        private UIERevolveToCustom mUIERevolveToCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIERevolveFromCustom : DXTestControl
    {
        
        public UIERevolveFromCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eRevolveFrom";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Linjeinnstillinger - [Ekland, Britt]");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Linjeinnstillinger - [Ekland, Britt]");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIERevolveToCustom : DXTestControl
    {
        
        public UIERevolveToCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eRevolveTo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Linjeinnstillinger - [Ekland, Britt]");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Linjeinnstillinger - [Ekland, Britt]");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient : DXTestControl
    {
        
        public UIGSPanelControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Ekland, Britt]");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Linjeinnstillinger - [Ekland, Britt]");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow2 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow2()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel2 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel2(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel2 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel2 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom2 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom2(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom2 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom2 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList2 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList2(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList2 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList2 : DXTestControl
    {
        
        public UITcVisualizationTabList2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient2 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient2(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient2 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient2 : DXTestControl
    {
        
        public UITpFixedPaymentClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom4 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom4(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom4 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom4 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom2 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom2(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom2 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom2 : DXTestControl
    {
        
        public UIViewHost1Custom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient2 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient2(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient2 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient2 : DXTestControl
    {
        
        public UIPcViewClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom5 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom5(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom5 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom5 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid2 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid2(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid2 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid2 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem2PivotGridCell
        {
            get
            {
                if ((this.mUIItem2PivotGridCell == null))
                {
                    this.mUIItem2PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]3";
                    this.mUIItem2PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem2PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem2PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem2PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow3 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow3()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel3 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel3(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel3 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel3 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom3 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom3(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom3 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom3 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList3 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList3(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList3 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList3 : DXTestControl
    {
        
        public UITcVisualizationTabList3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient3 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient3(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient3 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient3 : DXTestControl
    {
        
        public UITpFixedPaymentClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom6 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom6(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom6 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom6 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom3 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom3(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom3 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom3 : DXTestControl
    {
        
        public UIViewHost1Custom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient3 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient3(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient3 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient3 : DXTestControl
    {
        
        public UIPcViewClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom7 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom7(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom7 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom7 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid3 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid3(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid3 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid3 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem8PivotGridCell
        {
            get
            {
                if ((this.mUIItem8PivotGridCell == null))
                {
                    this.mUIItem8PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]3";
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem8PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem8PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem8PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOverførtilleggWindow : DXWindow
    {
        
        public UIOverførtilleggWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Overfør tillegg";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Overfør tillegg");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIDeExportFromEdit
        {
            get
            {
                if ((this.mUIDeExportFromEdit == null))
                {
                    this.mUIDeExportFromEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIDeExportFromEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "deExportFrom";
                    this.mUIDeExportFromEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIDeExportFromEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIDeExportFromEdit;
            }
        }
        
        public UIGcExportsTable UIGcExportsTable
        {
            get
            {
                if ((this.mUIGcExportsTable == null))
                {
                    this.mUIGcExportsTable = new UIGcExportsTable(this);
                }
                return this.mUIGcExportsTable;
            }
        }
        
        public DXButton UIOverførButton
        {
            get
            {
                if ((this.mUIOverførButton == null))
                {
                    this.mUIOverførButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnExport";
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIOverførButton.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIOverførButton;
            }
        }
        
        public DXButton UIAvbrytButton
        {
            get
            {
                if ((this.mUIAvbrytButton == null))
                {
                    this.mUIAvbrytButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCancel";
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIAvbrytButton.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIAvbrytButton;
            }
        }
        
        public DXComboBox UICbeFilterComboBox
        {
            get
            {
                if ((this.mUICbeFilterComboBox == null))
                {
                    this.mUICbeFilterComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUICbeFilterComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "cbeFilter";
                    this.mUICbeFilterComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxEdit";
                    #endregion
                }
                return this.mUICbeFilterComboBox;
            }
        }
        
        public DXButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Maximize";
                    this.mUIMaximizeButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WindowTitleButton";
                    this.mUIMaximizeButton.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIDeExportFromEdit;
        
        private UIGcExportsTable mUIGcExportsTable;
        
        private DXButton mUIOverførButton;
        
        private DXButton mUIAvbrytButton;
        
        private DXComboBox mUICbeFilterComboBox;
        
        private DXButton mUIMaximizeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcExportsTable : DXGrid
    {
        
        public UIGcExportsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExports";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Overfør tillegg");
            #endregion
        }
        
        #region Properties
        public DXCell UIAdamsMaudCell
        {
            get
            {
                if ((this.mUIAdamsMaudCell == null))
                {
                    this.mUIAdamsMaudCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAdamsMaudCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]0[Column]colEmployee";
                    this.mUIAdamsMaudCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAdamsMaudCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIAdamsMaudCell;
            }
        }
        
        public DXCell UIBergmanIngridCell
        {
            get
            {
                if ((this.mUIBergmanIngridCell == null))
                {
                    this.mUIBergmanIngridCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBergmanIngridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]1[Column]colEmployee";
                    this.mUIBergmanIngridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBergmanIngridCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIBergmanIngridCell;
            }
        }
        
        public DXCell UIBergmanIngridCell1
        {
            get
            {
                if ((this.mUIBergmanIngridCell1 == null))
                {
                    this.mUIBergmanIngridCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBergmanIngridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]2[Column]colEmployee";
                    this.mUIBergmanIngridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBergmanIngridCell1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIBergmanIngridCell1;
            }
        }
        
        public DXCell UIEklandBrittCell
        {
            get
            {
                if ((this.mUIEklandBrittCell == null))
                {
                    this.mUIEklandBrittCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIEklandBrittCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]3[Column]colEmployee";
                    this.mUIEklandBrittCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIEklandBrittCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIEklandBrittCell;
            }
        }
        
        public DXCell UIEklandBrittCell1
        {
            get
            {
                if ((this.mUIEklandBrittCell1 == null))
                {
                    this.mUIEklandBrittCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIEklandBrittCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]4[Column]colEmployee";
                    this.mUIEklandBrittCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIEklandBrittCell1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIEklandBrittCell1;
            }
        }
        
        public DXCell UIGcExportsGridControlCell
        {
            get
            {
                if ((this.mUIGcExportsGridControlCell == null))
                {
                    this.mUIGcExportsGridControlCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGcExportsGridControlCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]0[Column]colFrom";
                    this.mUIGcExportsGridControlCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGcExportsGridControlCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIGcExportsGridControlCell;
            }
        }
        
        public DXCell UIGcExportsGridControlCell1
        {
            get
            {
                if ((this.mUIGcExportsGridControlCell1 == null))
                {
                    this.mUIGcExportsGridControlCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGcExportsGridControlCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]0[Column]colTo";
                    this.mUIGcExportsGridControlCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGcExportsGridControlCell1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIGcExportsGridControlCell1;
            }
        }
        
        public DXTextEdit UIRow0ColumncolFromEdit
        {
            get
            {
                if ((this.mUIRow0ColumncolFromEdit == null))
                {
                    this.mUIRow0ColumncolFromEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumncolFromEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvExports[Row]0[Column]colFrom";
                    this.mUIRow0ColumncolFromEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumncolFromEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow0ColumncolFromEdit;
            }
        }
        
        public DXTextEdit UIRow0ColumncolToEdit
        {
            get
            {
                if ((this.mUIRow0ColumncolToEdit == null))
                {
                    this.mUIRow0ColumncolToEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumncolToEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvExports[Row]0[Column]colTo";
                    this.mUIRow0ColumncolToEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumncolToEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow0ColumncolToEdit;
            }
        }
        
        public DXTextEdit UIRow1ColumncolFromEdit
        {
            get
            {
                if ((this.mUIRow1ColumncolFromEdit == null))
                {
                    this.mUIRow1ColumncolFromEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumncolFromEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvExports[Row]1[Column]colFrom";
                    this.mUIRow1ColumncolFromEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumncolFromEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow1ColumncolFromEdit;
            }
        }
        
        public DXTextEdit UIRow1ColumncolToEdit
        {
            get
            {
                if ((this.mUIRow1ColumncolToEdit == null))
                {
                    this.mUIRow1ColumncolToEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumncolToEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvExports[Row]1[Column]colTo";
                    this.mUIRow1ColumncolToEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumncolToEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow1ColumncolToEdit;
            }
        }
        
        public DXTextEdit UIRow2ColumncolFromEdit
        {
            get
            {
                if ((this.mUIRow2ColumncolFromEdit == null))
                {
                    this.mUIRow2ColumncolFromEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumncolFromEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvExports[Row]2[Column]colFrom";
                    this.mUIRow2ColumncolFromEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumncolFromEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow2ColumncolFromEdit;
            }
        }
        
        public DXTextEdit UIRow2ColumncolToEdit
        {
            get
            {
                if ((this.mUIRow2ColumncolToEdit == null))
                {
                    this.mUIRow2ColumncolToEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumncolToEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvExports[Row]2[Column]colTo";
                    this.mUIRow2ColumncolToEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumncolToEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow2ColumncolToEdit;
            }
        }
        
        public DXTextEdit UIRow3ColumncolFromEdit
        {
            get
            {
                if ((this.mUIRow3ColumncolFromEdit == null))
                {
                    this.mUIRow3ColumncolFromEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumncolFromEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvExports[Row]3[Column]colFrom";
                    this.mUIRow3ColumncolFromEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumncolFromEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow3ColumncolFromEdit;
            }
        }
        
        public DXTextEdit UIRow3ColumncolToEdit
        {
            get
            {
                if ((this.mUIRow3ColumncolToEdit == null))
                {
                    this.mUIRow3ColumncolToEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumncolToEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvExports[Row]3[Column]colTo";
                    this.mUIRow3ColumncolToEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumncolToEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow3ColumncolToEdit;
            }
        }
        
        public DXTextEdit UIRow4ColumncolFromEdit
        {
            get
            {
                if ((this.mUIRow4ColumncolFromEdit == null))
                {
                    this.mUIRow4ColumncolFromEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumncolFromEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvExports[Row]4[Column]colFrom";
                    this.mUIRow4ColumncolFromEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumncolFromEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow4ColumncolFromEdit;
            }
        }
        
        public DXTextEdit UIRow4ColumncolToEdit
        {
            get
            {
                if ((this.mUIRow4ColumncolToEdit == null))
                {
                    this.mUIRow4ColumncolToEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumncolToEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvExports[Row]4[Column]colTo";
                    this.mUIRow4ColumncolToEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumncolToEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow4ColumncolToEdit;
            }
        }
        
        public DXButton UIValgtButton
        {
            get
            {
                if ((this.mUIValgtButton == null))
                {
                    this.mUIValgtButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIValgtButton.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCellButton[View]gvExports[Row]0[Column]DX$CheckboxSelectorCol" +
                        "umn";
                    this.mUIValgtButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCellButton";
                    this.mUIValgtButton.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIValgtButton;
            }
        }
        
        public DXTestControl UITidligereoverføringeTabPage
        {
            get
            {
                if ((this.mUITidligereoverføringeTabPage == null))
                {
                    this.mUITidligereoverføringeTabPage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUITidligereoverføringeTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlMasterTabPageHeader[View]gvCurrentExportResults[Index]1";
                    this.mUITidligereoverføringeTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlMasterTabPageHeader";
                    this.mUITidligereoverføringeTabPage.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUITidligereoverføringeTabPage;
            }
        }
        
        public DXCell UIItem2676Cell
        {
            get
            {
                if ((this.mUIItem2676Cell == null))
                {
                    this.mUIItem2676Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2676Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvPreviousExportResults[Row]2[Column]colHours1";
                    this.mUIItem2676Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2676Cell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem2676Cell;
            }
        }
        
        public DXCell UIItem4162Cell
        {
            get
            {
                if ((this.mUIItem4162Cell == null))
                {
                    this.mUIItem4162Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4162Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvPreviousExportResults[Row]3[Column]colHours1";
                    this.mUIItem4162Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4162Cell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem4162Cell;
            }
        }
        
        public DXTextEdit UIRow2ColumncolFrom1Edit
        {
            get
            {
                if ((this.mUIRow2ColumncolFrom1Edit == null))
                {
                    this.mUIRow2ColumncolFrom1Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumncolFrom1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvPreviousExportResults[Row]2[Column]colFrom1";
                    this.mUIRow2ColumncolFrom1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumncolFrom1Edit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow2ColumncolFrom1Edit;
            }
        }
        
        public DXTextEdit UIRow3ColumncolTo1Edit
        {
            get
            {
                if ((this.mUIRow3ColumncolTo1Edit == null))
                {
                    this.mUIRow3ColumncolTo1Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumncolTo1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvPreviousExportResults[Row]3[Column]colTo1";
                    this.mUIRow3ColumncolTo1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumncolTo1Edit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow3ColumncolTo1Edit;
            }
        }
        
        public DXButton UIValgtButton1
        {
            get
            {
                if ((this.mUIValgtButton1 == null))
                {
                    this.mUIValgtButton1 = new DXButton(this);
                    #region Search Criteria
                    this.mUIValgtButton1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCellButton[View]gvExports[Row]1[Column]DX$CheckboxSelectorCol" +
                        "umn";
                    this.mUIValgtButton1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCellButton";
                    this.mUIValgtButton1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIValgtButton1;
            }
        }
        
        public DXTextEdit UIRow0ColumncolHoursEdit
        {
            get
            {
                if ((this.mUIRow0ColumncolHoursEdit == null))
                {
                    this.mUIRow0ColumncolHoursEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumncolHoursEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvCurrentExportResults[Row]0[Column]colHours";
                    this.mUIRow0ColumncolHoursEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumncolHoursEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow0ColumncolHoursEdit;
            }
        }
        
        public DXCell UIItem867Cell
        {
            get
            {
                if ((this.mUIItem867Cell == null))
                {
                    this.mUIItem867Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem867Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvCurrentExportResults-2[Row]0[Column]colHours";
                    this.mUIItem867Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem867Cell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem867Cell;
            }
        }
        
        public DXCell UIItem410KveldNattilleCell
        {
            get
            {
                if ((this.mUIItem410KveldNattilleCell == null))
                {
                    this.mUIItem410KveldNattilleCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem410KveldNattilleCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvCurrentExportResults[Row]0[Column]colCostType";
                    this.mUIItem410KveldNattilleCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem410KveldNattilleCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem410KveldNattilleCell;
            }
        }
        
        public DXCell UIItem223Cell
        {
            get
            {
                if ((this.mUIItem223Cell == null))
                {
                    this.mUIItem223Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem223Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvCurrentExportResults[Row]0[Column]colHours";
                    this.mUIItem223Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem223Cell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem223Cell;
            }
        }
        
        public DXCell UIItem400LørSøndagstilCell
        {
            get
            {
                if ((this.mUIItem400LørSøndagstilCell == null))
                {
                    this.mUIItem400LørSøndagstilCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem400LørSøndagstilCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvCurrentExportResults[Row]1[Column]colCostType";
                    this.mUIItem400LørSøndagstilCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem400LørSøndagstilCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem400LørSøndagstilCell;
            }
        }
        
        public DXCell UIItem1115Cell
        {
            get
            {
                if ((this.mUIItem1115Cell == null))
                {
                    this.mUIItem1115Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1115Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvCurrentExportResults[Row]1[Column]colHours";
                    this.mUIItem1115Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1115Cell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem1115Cell;
            }
        }
        
        public DXCell UIIkkevalgtCell
        {
            get
            {
                if ((this.mUIIkkevalgtCell == null))
                {
                    this.mUIIkkevalgtCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIIkkevalgtCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]0[Column]DX$CheckboxSelectorColumn";
                    this.mUIIkkevalgtCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIkkevalgtCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIIkkevalgtCell;
            }
        }
        
        public DXCell UIIkkevalgtCell1
        {
            get
            {
                if ((this.mUIIkkevalgtCell1 == null))
                {
                    this.mUIIkkevalgtCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIIkkevalgtCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]2[Column]DX$CheckboxSelectorColumn";
                    this.mUIIkkevalgtCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIkkevalgtCell1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIIkkevalgtCell1;
            }
        }
        
        public DXGroupRow UIGridControlGroupRowGroupRow
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow == null))
                {
                    this.mUIGridControlGroupRowGroupRow = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlGroupRow[View]gvPreviousExportResults[Row]-1[Column]colTimeSt" +
                        "amp";
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow;
            }
        }
        
        public DXGroupRow UIGridControlGroupRowGroupRow1
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow1 == null))
                {
                    this.mUIGridControlGroupRowGroupRow1 = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlGroupRow[View]gvPreviousExportResults[Row]-2[Column]colTimeSt" +
                        "amp";
                    this.mUIGridControlGroupRowGroupRow1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow1;
            }
        }
        
        public DXGroupRow UIGridControlGroupRowGroupRow2
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow2 == null))
                {
                    this.mUIGridControlGroupRowGroupRow2 = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlGroupRow[View]gvPreviousExportResults[Row]-3[Column]colTimeSt" +
                        "amp";
                    this.mUIGridControlGroupRowGroupRow2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow2.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow2;
            }
        }
        
        public DXButton UIValgtButton2
        {
            get
            {
                if ((this.mUIValgtButton2 == null))
                {
                    this.mUIValgtButton2 = new DXButton(this);
                    #region Search Criteria
                    this.mUIValgtButton2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCellButton[View]gvExports[Row]3[Column]DX$CheckboxSelectorCol" +
                        "umn";
                    this.mUIValgtButton2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCellButton";
                    this.mUIValgtButton2.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIValgtButton2;
            }
        }
        
        public DXButton UIValgtButton11
        {
            get
            {
                if ((this.mUIValgtButton11 == null))
                {
                    this.mUIValgtButton11 = new DXButton(this);
                    #region Search Criteria
                    this.mUIValgtButton11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCellButton[View]gvExports[Row]2[Column]DX$CheckboxSelectorCol" +
                        "umn";
                    this.mUIValgtButton11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCellButton";
                    this.mUIValgtButton11.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIValgtButton11;
            }
        }
        
        public DXCell UIItem5352Cell
        {
            get
            {
                if ((this.mUIItem5352Cell == null))
                {
                    this.mUIItem5352Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5352Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvCurrentExportResults-4[Row]0[Column]colHours";
                    this.mUIItem5352Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5352Cell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem5352Cell;
            }
        }
        
        public DXCell UIItem7136Cell
        {
            get
            {
                if ((this.mUIItem7136Cell == null))
                {
                    this.mUIItem7136Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem7136Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvCurrentExportResults-4[Row]1[Column]colHours";
                    this.mUIItem7136Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem7136Cell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem7136Cell;
            }
        }
        
        public DXCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvCurrentExportResults-4[Row]2[Column]colHours";
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0Cell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public DXTextEdit UIRow1ColumncolEmployeEdit
        {
            get
            {
                if ((this.mUIRow1ColumncolEmployeEdit == null))
                {
                    this.mUIRow1ColumncolEmployeEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumncolEmployeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvExports[Row]1[Column]colEmployee";
                    this.mUIRow1ColumncolEmployeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumncolEmployeEdit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow1ColumncolEmployeEdit;
            }
        }
        
        public DXCell UIItem867Cell1
        {
            get
            {
                if ((this.mUIItem867Cell1 == null))
                {
                    this.mUIItem867Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem867Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvCurrentExportResults-3[Row]0[Column]colHours";
                    this.mUIItem867Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem867Cell1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem867Cell1;
            }
        }
        
        public DXCell UIItem2025Cell
        {
            get
            {
                if ((this.mUIItem2025Cell == null))
                {
                    this.mUIItem2025Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2025Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvCurrentExportResults-2[Row]1[Column]colHours";
                    this.mUIItem2025Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2025Cell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem2025Cell;
            }
        }
        
        public DXCell UIItem1Cell
        {
            get
            {
                if ((this.mUIItem1Cell == null))
                {
                    this.mUIItem1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]0[Column]colInternalPositionNumber";
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem1Cell;
            }
        }
        
        public DXCell UIItem1Cell1
        {
            get
            {
                if ((this.mUIItem1Cell1 == null))
                {
                    this.mUIItem1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]1[Column]colInternalPositionNumber";
                    this.mUIItem1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem1Cell1;
            }
        }
        
        public DXCell UIItem2Cell
        {
            get
            {
                if ((this.mUIItem2Cell == null))
                {
                    this.mUIItem2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]2[Column]colInternalPositionNumber";
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem2Cell;
            }
        }
        
        public DXCell UIItem400LørSøndagstilCell1
        {
            get
            {
                if ((this.mUIItem400LørSøndagstilCell1 == null))
                {
                    this.mUIItem400LørSøndagstilCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem400LørSøndagstilCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvPreviousExportResults[Row]3[Column]colCostType1";
                    this.mUIItem400LørSøndagstilCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem400LørSøndagstilCell1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem400LørSøndagstilCell1;
            }
        }
        
        public DXCell UIItem410KveldNattilleCell1
        {
            get
            {
                if ((this.mUIItem410KveldNattilleCell1 == null))
                {
                    this.mUIItem410KveldNattilleCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem410KveldNattilleCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvPreviousExportResults[Row]4[Column]colCostType1";
                    this.mUIItem410KveldNattilleCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem410KveldNattilleCell1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem410KveldNattilleCell1;
            }
        }
        
        public DXCell UIItem4162Cell1
        {
            get
            {
                if ((this.mUIItem4162Cell1 == null))
                {
                    this.mUIItem4162Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4162Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvPreviousExportResults[Row]4[Column]colHours1";
                    this.mUIItem4162Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4162Cell1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem4162Cell1;
            }
        }
        
        public DXTextEdit UIRow4ColumncolFrom1Edit
        {
            get
            {
                if ((this.mUIRow4ColumncolFrom1Edit == null))
                {
                    this.mUIRow4ColumncolFrom1Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumncolFrom1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvPreviousExportResults[Row]4[Column]colFrom1";
                    this.mUIRow4ColumncolFrom1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumncolFrom1Edit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow4ColumncolFrom1Edit;
            }
        }
        
        public DXTextEdit UIRow4ColumncolTo1Edit
        {
            get
            {
                if ((this.mUIRow4ColumncolTo1Edit == null))
                {
                    this.mUIRow4ColumncolTo1Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumncolTo1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsTextEdit[View]gvPreviousExportResults[Row]4[Column]colTo1";
                    this.mUIRow4ColumncolTo1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumncolTo1Edit.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRow4ColumncolTo1Edit;
            }
        }
        
        public DXCell UIIkkevalgtCell2
        {
            get
            {
                if ((this.mUIIkkevalgtCell2 == null))
                {
                    this.mUIIkkevalgtCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIIkkevalgtCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]1[Column]DX$CheckboxSelectorColumn";
                    this.mUIIkkevalgtCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIkkevalgtCell2.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIIkkevalgtCell2;
            }
        }
        
        public DXCell UIItem1115Cell1
        {
            get
            {
                if ((this.mUIItem1115Cell1 == null))
                {
                    this.mUIItem1115Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1115Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvPreviousExportResults[Row]8[Column]colHours1";
                    this.mUIItem1115Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1115Cell1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem1115Cell1;
            }
        }
        
        public DXCell UIItem223Cell1
        {
            get
            {
                if ((this.mUIItem223Cell1 == null))
                {
                    this.mUIItem223Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem223Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvPreviousExportResults[Row]9[Column]colHours1";
                    this.mUIItem223Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem223Cell1.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIItem223Cell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAdamsMaudCell;
        
        private DXCell mUIBergmanIngridCell;
        
        private DXCell mUIBergmanIngridCell1;
        
        private DXCell mUIEklandBrittCell;
        
        private DXCell mUIEklandBrittCell1;
        
        private DXCell mUIGcExportsGridControlCell;
        
        private DXCell mUIGcExportsGridControlCell1;
        
        private DXTextEdit mUIRow0ColumncolFromEdit;
        
        private DXTextEdit mUIRow0ColumncolToEdit;
        
        private DXTextEdit mUIRow1ColumncolFromEdit;
        
        private DXTextEdit mUIRow1ColumncolToEdit;
        
        private DXTextEdit mUIRow2ColumncolFromEdit;
        
        private DXTextEdit mUIRow2ColumncolToEdit;
        
        private DXTextEdit mUIRow3ColumncolFromEdit;
        
        private DXTextEdit mUIRow3ColumncolToEdit;
        
        private DXTextEdit mUIRow4ColumncolFromEdit;
        
        private DXTextEdit mUIRow4ColumncolToEdit;
        
        private DXButton mUIValgtButton;
        
        private DXTestControl mUITidligereoverføringeTabPage;
        
        private DXCell mUIItem2676Cell;
        
        private DXCell mUIItem4162Cell;
        
        private DXTextEdit mUIRow2ColumncolFrom1Edit;
        
        private DXTextEdit mUIRow3ColumncolTo1Edit;
        
        private DXButton mUIValgtButton1;
        
        private DXTextEdit mUIRow0ColumncolHoursEdit;
        
        private DXCell mUIItem867Cell;
        
        private DXCell mUIItem410KveldNattilleCell;
        
        private DXCell mUIItem223Cell;
        
        private DXCell mUIItem400LørSøndagstilCell;
        
        private DXCell mUIItem1115Cell;
        
        private DXCell mUIIkkevalgtCell;
        
        private DXCell mUIIkkevalgtCell1;
        
        private DXGroupRow mUIGridControlGroupRowGroupRow;
        
        private DXGroupRow mUIGridControlGroupRowGroupRow1;
        
        private DXGroupRow mUIGridControlGroupRowGroupRow2;
        
        private DXButton mUIValgtButton2;
        
        private DXButton mUIValgtButton11;
        
        private DXCell mUIItem5352Cell;
        
        private DXCell mUIItem7136Cell;
        
        private DXCell mUIItem0Cell;
        
        private DXTextEdit mUIRow1ColumncolEmployeEdit;
        
        private DXCell mUIItem867Cell1;
        
        private DXCell mUIItem2025Cell;
        
        private DXCell mUIItem1Cell;
        
        private DXCell mUIItem1Cell1;
        
        private DXCell mUIItem2Cell;
        
        private DXCell mUIItem400LørSøndagstilCell1;
        
        private DXCell mUIItem410KveldNattilleCell1;
        
        private DXCell mUIItem4162Cell1;
        
        private DXTextEdit mUIRow4ColumncolFrom1Edit;
        
        private DXTextEdit mUIRow4ColumncolTo1Edit;
        
        private DXCell mUIIkkevalgtCell2;
        
        private DXCell mUIItem1115Cell1;
        
        private DXCell mUIItem223Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIExportloggWindow : DXWindow
    {
        
        public UIExportloggWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Exportlogg";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UIGsLayoutControl1Custom UIGsLayoutControl1Custom
        {
            get
            {
                if ((this.mUIGsLayoutControl1Custom == null))
                {
                    this.mUIGsLayoutControl1Custom = new UIGsLayoutControl1Custom(this);
                }
                return this.mUIGsLayoutControl1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIGsLayoutControl1Custom mUIGsLayoutControl1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsLayoutControl1Custom : DXTestControl
    {
        
        public UIGsLayoutControl1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsLayoutControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UI_LayoutGroup_RootLayoutGroup UI_LayoutGroup_RootLayoutGroup
        {
            get
            {
                if ((this.mUI_LayoutGroup_RootLayoutGroup == null))
                {
                    this.mUI_LayoutGroup_RootLayoutGroup = new UI_LayoutGroup_RootLayoutGroup(this);
                }
                return this.mUI_LayoutGroup_RootLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UI_LayoutGroup_RootLayoutGroup mUI_LayoutGroup_RootLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI_LayoutGroup_RootLayoutGroup : DXBaseLayoutItem
    {
        
        public UI_LayoutGroup_RootLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_LayoutGroup_Root";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UI_LayoutItem_JobsLayoutControlItem UI_LayoutItem_JobsLayoutControlItem
        {
            get
            {
                if ((this.mUI_LayoutItem_JobsLayoutControlItem == null))
                {
                    this.mUI_LayoutItem_JobsLayoutControlItem = new UI_LayoutItem_JobsLayoutControlItem(this);
                }
                return this.mUI_LayoutItem_JobsLayoutControlItem;
            }
        }
        
        public UI_TabControl_ExportTrTabbedGroup UI_TabControl_ExportTrTabbedGroup
        {
            get
            {
                if ((this.mUI_TabControl_ExportTrTabbedGroup == null))
                {
                    this.mUI_TabControl_ExportTrTabbedGroup = new UI_TabControl_ExportTrTabbedGroup(this);
                }
                return this.mUI_TabControl_ExportTrTabbedGroup;
            }
        }
        
        public UILayoutControlItem2LayoutControlItem UILayoutControlItem2LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem2LayoutControlItem == null))
                {
                    this.mUILayoutControlItem2LayoutControlItem = new UILayoutControlItem2LayoutControlItem(this);
                }
                return this.mUILayoutControlItem2LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UI_LayoutItem_JobsLayoutControlItem mUI_LayoutItem_JobsLayoutControlItem;
        
        private UI_TabControl_ExportTrTabbedGroup mUI_TabControl_ExportTrTabbedGroup;
        
        private UILayoutControlItem2LayoutControlItem mUILayoutControlItem2LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI_LayoutItem_JobsLayoutControlItem : DXBaseLayoutItem
    {
        
        public UI_LayoutItem_JobsLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_LayoutItem_Jobs";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl1Client UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl1Client mUIGsPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl1Client : DXTestControl
    {
        
        public UIGsPanelControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UI_JobsGridTable UI_JobsGridTable
        {
            get
            {
                if ((this.mUI_JobsGridTable == null))
                {
                    this.mUI_JobsGridTable = new UI_JobsGridTable(this);
                }
                return this.mUI_JobsGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UI_JobsGridTable mUI_JobsGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI_JobsGridTable : DXGrid
    {
        
        public UI_JobsGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_JobsGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem04012016Cell
        {
            get
            {
                if ((this.mUIItem04012016Cell == null))
                {
                    this.mUIItem04012016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem04012016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_JobsGridGridControlCell[View]_JobsGridView[Row]0[Column]_Col_PeriodFrom";
                    this.mUIItem04012016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem04012016Cell.WindowTitles.Add("Exportlogg");
                    #endregion
                }
                return this.mUIItem04012016Cell;
            }
        }
        
        public DXCell UIItem24012016Cell
        {
            get
            {
                if ((this.mUIItem24012016Cell == null))
                {
                    this.mUIItem24012016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem24012016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_JobsGridGridControlCell[View]_JobsGridView[Row]0[Column]_Col_PeriodTo";
                    this.mUIItem24012016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem24012016Cell.WindowTitles.Add("Exportlogg");
                    #endregion
                }
                return this.mUIItem24012016Cell;
            }
        }
        
        public DXCell UIItem5150Cell
        {
            get
            {
                if ((this.mUIItem5150Cell == null))
                {
                    this.mUIItem5150Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5150Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_JobsGridGridControlCell[View]_JobsGridView[Row]0[Column]_Col_Departments";
                    this.mUIItem5150Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5150Cell.WindowTitles.Add("Exportlogg");
                    #endregion
                }
                return this.mUIItem5150Cell;
            }
        }
        
        public DXCell UIKlartiloverføringCell
        {
            get
            {
                if ((this.mUIKlartiloverføringCell == null))
                {
                    this.mUIKlartiloverføringCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKlartiloverføringCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_JobsGridGridControlCell[View]_JobsGridView[Row]0[Column]_Col_TransferStatus";
                    this.mUIKlartiloverføringCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKlartiloverføringCell.WindowTitles.Add("Exportlogg");
                    #endregion
                }
                return this.mUIKlartiloverføringCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem04012016Cell;
        
        private DXCell mUIItem24012016Cell;
        
        private DXCell mUIItem5150Cell;
        
        private DXCell mUIKlartiloverføringCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI_TabControl_ExportTrTabbedGroup : DXBaseLayoutItem
    {
        
        public UI_TabControl_ExportTrTabbedGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_TabControl_ExportTransferType";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabbedGroup";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UI_LayoutTab_MessageBaLayoutGroup UI_LayoutTab_MessageBaLayoutGroup
        {
            get
            {
                if ((this.mUI_LayoutTab_MessageBaLayoutGroup == null))
                {
                    this.mUI_LayoutTab_MessageBaLayoutGroup = new UI_LayoutTab_MessageBaLayoutGroup(this);
                }
                return this.mUI_LayoutTab_MessageBaLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UI_LayoutTab_MessageBaLayoutGroup mUI_LayoutTab_MessageBaLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI_LayoutTab_MessageBaLayoutGroup : DXBaseLayoutItem
    {
        
        public UI_LayoutTab_MessageBaLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_LayoutTab_MessageBased";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UI_LayoutItem_DetailsLayoutControlItem UI_LayoutItem_DetailsLayoutControlItem
        {
            get
            {
                if ((this.mUI_LayoutItem_DetailsLayoutControlItem == null))
                {
                    this.mUI_LayoutItem_DetailsLayoutControlItem = new UI_LayoutItem_DetailsLayoutControlItem(this);
                }
                return this.mUI_LayoutItem_DetailsLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UI_LayoutItem_DetailsLayoutControlItem mUI_LayoutItem_DetailsLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI_LayoutItem_DetailsLayoutControlItem : DXBaseLayoutItem
    {
        
        public UI_LayoutItem_DetailsLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_LayoutItem_Details";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client1 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client1(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client1 mUIGsPanelControl3Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl3Client1 : DXTestControl
    {
        
        public UIGsPanelControl3Client1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl7Client UIGsPanelControl7Client
        {
            get
            {
                if ((this.mUIGsPanelControl7Client == null))
                {
                    this.mUIGsPanelControl7Client = new UIGsPanelControl7Client(this);
                }
                return this.mUIGsPanelControl7Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl7Client mUIGsPanelControl7Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl7Client : DXTestControl
    {
        
        public UIGsPanelControl7Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl7";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UI_ScrollControlScrollableControl UI_ScrollControlScrollableControl
        {
            get
            {
                if ((this.mUI_ScrollControlScrollableControl == null))
                {
                    this.mUI_ScrollControlScrollableControl = new UI_ScrollControlScrollableControl(this);
                }
                return this.mUI_ScrollControlScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UI_ScrollControlScrollableControl mUI_ScrollControlScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI_ScrollControlScrollableControl : DXScrollableControl
    {
        
        public UI_ScrollControlScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_ScrollControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSScrollableControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UIInternalGroupUiItemClient UIInternalGroupUiItemClient
        {
            get
            {
                if ((this.mUIInternalGroupUiItemClient == null))
                {
                    this.mUIInternalGroupUiItemClient = new UIInternalGroupUiItemClient(this);
                }
                return this.mUIInternalGroupUiItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIInternalGroupUiItemClient mUIInternalGroupUiItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIInternalGroupUiItemClient : DXTestControl
    {
        
        public UIInternalGroupUiItemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_ScrollControlInternalGroupUiItem[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "InternalGroupUiItem";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public DXTestControl UIGSLabelControlLabel
        {
            get
            {
                if ((this.mUIGSLabelControlLabel == null))
                {
                    this.mUIGSLabelControlLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIGSLabelControlLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "_ScrollControlInternalGroupUiItem[1]GSLabelControl[0]";
                    this.mUIGSLabelControlLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLabelControl";
                    this.mUIGSLabelControlLabel.WindowTitles.Add("Exportlogg");
                    #endregion
                }
                return this.mUIGSLabelControlLabel;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIGSLabelControlLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlItem2LayoutControlItem : DXBaseLayoutItem
    {
        
        public UILayoutControlItem2LayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public UIGSPanelControlClient1 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient1(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGSPanelControlClient1 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient1 : DXTestControl
    {
        
        public UIGSPanelControlClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Exportlogg");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "_CloseButton";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Exportlogg");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEttersystemeksportdeWindow : DXWindow
    {
        
        public UIEttersystemeksportdeWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ettersystem - eksportdetaljer";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ettersystem - eksportdetaljer");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl1Client1 UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client1(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl1Client1 mUIGsPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl1Client1 : DXTestControl
    {
        
        public UIGsPanelControl1Client1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ettersystem - eksportdetaljer");
            #endregion
        }
        
        #region Properties
        public UI_GridTable UI_GridTable
        {
            get
            {
                if ((this.mUI_GridTable == null))
                {
                    this.mUI_GridTable = new UI_GridTable(this);
                }
                return this.mUI_GridTable;
            }
        }
        
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "_CloseButton";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private UI_GridTable mUI_GridTable;
        
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI_GridTable : DXGrid
    {
        
        public UI_GridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_Grid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Ettersystem - eksportdetaljer");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem2676Cell
        {
            get
            {
                if ((this.mUIItem2676Cell == null))
                {
                    this.mUIItem2676Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2676Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]1[Column]_Col_Amount";
                    this.mUIItem2676Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2676Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem2676Cell;
            }
        }
        
        public DXCell UIItem4162Cell
        {
            get
            {
                if ((this.mUIItem4162Cell == null))
                {
                    this.mUIItem4162Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4162Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]0[Column]_Col_Amount";
                    this.mUIItem4162Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4162Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem4162Cell;
            }
        }
        
        public DXCell UIItem297Cell
        {
            get
            {
                if ((this.mUIItem297Cell == null))
                {
                    this.mUIItem297Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem297Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]12[Column]_Col_Amount";
                    this.mUIItem297Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem297Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem297Cell;
            }
        }
        
        public DXCell UIItem1189Cell
        {
            get
            {
                if ((this.mUIItem1189Cell == null))
                {
                    this.mUIItem1189Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1189Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]13[Column]_Col_Amount";
                    this.mUIItem1189Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1189Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem1189Cell;
            }
        }
        
        public DXCell UIItem892Cell
        {
            get
            {
                if ((this.mUIItem892Cell == null))
                {
                    this.mUIItem892Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem892Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]16[Column]_Col_Amount";
                    this.mUIItem892Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem892Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem892Cell;
            }
        }
        
        public DXCell UIItem3568Cell
        {
            get
            {
                if ((this.mUIItem3568Cell == null))
                {
                    this.mUIItem3568Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3568Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]17[Column]_Col_Amount";
                    this.mUIItem3568Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3568Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem3568Cell;
            }
        }
        
        public DXCell UIItem04012016Cell
        {
            get
            {
                if ((this.mUIItem04012016Cell == null))
                {
                    this.mUIItem04012016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem04012016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]0[Column]_Col_FromDate";
                    this.mUIItem04012016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem04012016Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem04012016Cell;
            }
        }
        
        public DXCell UIItem14022016Cell
        {
            get
            {
                if ((this.mUIItem14022016Cell == null))
                {
                    this.mUIItem14022016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14022016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]0[Column]_Col_ToDate";
                    this.mUIItem14022016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14022016Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem14022016Cell;
            }
        }
        
        public DXCell UIEndreLenaCell
        {
            get
            {
                if ((this.mUIEndreLenaCell == null))
                {
                    this.mUIEndreLenaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIEndreLenaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]0[Column]_Col_EmployeeName";
                    this.mUIEndreLenaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIEndreLenaCell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIEndreLenaCell;
            }
        }
        
        public DXCell UIItem5150Cell
        {
            get
            {
                if ((this.mUIItem5150Cell == null))
                {
                    this.mUIItem5150Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5150Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]0[Column]_Col_DepartmentCode";
                    this.mUIItem5150Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5150Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem5150Cell;
            }
        }
        
        public DXCell UIItem866Cell
        {
            get
            {
                if ((this.mUIItem866Cell == null))
                {
                    this.mUIItem866Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem866Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]4[Column]_Col_Amount";
                    this.mUIItem866Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem866Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem866Cell;
            }
        }
        
        public DXCell UIItem510Cell
        {
            get
            {
                if ((this.mUIItem510Cell == null))
                {
                    this.mUIItem510Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem510Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]4[Column]_Col_MainCode";
                    this.mUIItem510Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem510Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem510Cell;
            }
        }
        
        public DXCell UIItem510Cell1
        {
            get
            {
                if ((this.mUIItem510Cell1 == null))
                {
                    this.mUIItem510Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem510Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]0[Column]_Col_MainCode";
                    this.mUIItem510Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem510Cell1.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem510Cell1;
            }
        }
        
        public DXCell UIItem04012016Cell1
        {
            get
            {
                if ((this.mUIItem04012016Cell1 == null))
                {
                    this.mUIItem04012016Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem04012016Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]4[Column]_Col_FromDate";
                    this.mUIItem04012016Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem04012016Cell1.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem04012016Cell1;
            }
        }
        
        public DXCell UIItem10012016Cell
        {
            get
            {
                if ((this.mUIItem10012016Cell == null))
                {
                    this.mUIItem10012016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem10012016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]4[Column]_Col_ToDate";
                    this.mUIItem10012016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem10012016Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem10012016Cell;
            }
        }
        
        public DXCell UIGarboGretaCell
        {
            get
            {
                if ((this.mUIGarboGretaCell == null))
                {
                    this.mUIGarboGretaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGarboGretaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]4[Column]_Col_EmployeeName";
                    this.mUIGarboGretaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGarboGretaCell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIGarboGretaCell;
            }
        }
        
        public DXCell UIItem5150Cell1
        {
            get
            {
                if ((this.mUIItem5150Cell1 == null))
                {
                    this.mUIItem5150Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5150Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]4[Column]_Col_DepartmentCode";
                    this.mUIItem5150Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5150Cell1.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem5150Cell1;
            }
        }
        
        public DXCell UIItem1115Cell
        {
            get
            {
                if ((this.mUIItem1115Cell == null))
                {
                    this.mUIItem1115Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1115Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]5[Column]_Col_Amount";
                    this.mUIItem1115Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1115Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem1115Cell;
            }
        }
        
        public DXCell UIItem362Cell
        {
            get
            {
                if ((this.mUIItem362Cell == null))
                {
                    this.mUIItem362Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem362Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]8[Column]_Col_Amount";
                    this.mUIItem362Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem362Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem362Cell;
            }
        }
        
        public DXCell UISkarsgårdStellanCell
        {
            get
            {
                if ((this.mUISkarsgårdStellanCell == null))
                {
                    this.mUISkarsgårdStellanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISkarsgårdStellanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]1[Column]_Col_EmployeeName";
                    this.mUISkarsgårdStellanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISkarsgårdStellanCell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUISkarsgårdStellanCell;
            }
        }
        
        public DXCell UIStormarePeterCell
        {
            get
            {
                if ((this.mUIStormarePeterCell == null))
                {
                    this.mUIStormarePeterCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIStormarePeterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]5[Column]_Col_EmployeeName";
                    this.mUIStormarePeterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIStormarePeterCell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIStormarePeterCell;
            }
        }
        
        public DXCell UIEdwallAllanCell
        {
            get
            {
                if ((this.mUIEdwallAllanCell == null))
                {
                    this.mUIEdwallAllanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIEdwallAllanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]8[Column]_Col_EmployeeName";
                    this.mUIEdwallAllanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIEdwallAllanCell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIEdwallAllanCell;
            }
        }
        
        public DXCell UIKveldNattilleggCell
        {
            get
            {
                if ((this.mUIKveldNattilleggCell == null))
                {
                    this.mUIKveldNattilleggCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKveldNattilleggCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]0[Column]_Col_Description";
                    this.mUIKveldNattilleggCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKveldNattilleggCell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIKveldNattilleggCell;
            }
        }
        
        public DXCell UILørSøndagstilleggCell
        {
            get
            {
                if ((this.mUILørSøndagstilleggCell == null))
                {
                    this.mUILørSøndagstilleggCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILørSøndagstilleggCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]1[Column]_Col_Description";
                    this.mUILørSøndagstilleggCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILørSøndagstilleggCell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUILørSøndagstilleggCell;
            }
        }
        
        public DXCell UIItem14032016Cell
        {
            get
            {
                if ((this.mUIItem14032016Cell == null))
                {
                    this.mUIItem14032016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14032016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]1[Column]_Col_FromDate";
                    this.mUIItem14032016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14032016Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem14032016Cell;
            }
        }
        
        public DXCell UIItem03042016Cell
        {
            get
            {
                if ((this.mUIItem03042016Cell == null))
                {
                    this.mUIItem03042016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem03042016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]1[Column]_Col_ToDate";
                    this.mUIItem03042016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem03042016Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem03042016Cell;
            }
        }
        
        public DXCell UIItem400Cell
        {
            get
            {
                if ((this.mUIItem400Cell == null))
                {
                    this.mUIItem400Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem400Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]1[Column]_Col_MainCode";
                    this.mUIItem400Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem400Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem400Cell;
            }
        }
        
        public DXCell UIItem21012016Cell
        {
            get
            {
                if ((this.mUIItem21012016Cell == null))
                {
                    this.mUIItem21012016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem21012016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]5[Column]_Col_FromDate";
                    this.mUIItem21012016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem21012016Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem21012016Cell;
            }
        }
        
        public DXCell UIItem866Cell1
        {
            get
            {
                if ((this.mUIItem866Cell1 == null))
                {
                    this.mUIItem866Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem866Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]10[Column]_Col_Amount";
                    this.mUIItem866Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem866Cell1.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem866Cell1;
            }
        }
        
        public DXCell UIItem17012016Cell
        {
            get
            {
                if ((this.mUIItem17012016Cell == null))
                {
                    this.mUIItem17012016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem17012016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]10[Column]_Col_ToDate";
                    this.mUIItem17012016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem17012016Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem17012016Cell;
            }
        }
        
        public DXCell UIJähkelLennartCell
        {
            get
            {
                if ((this.mUIJähkelLennartCell == null))
                {
                    this.mUIJähkelLennartCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIJähkelLennartCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]10[Column]_Col_EmployeeName";
                    this.mUIJähkelLennartCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIJähkelLennartCell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIJähkelLennartCell;
            }
        }
        
        public DXCell UIItem2600Cell
        {
            get
            {
                if ((this.mUIItem2600Cell == null))
                {
                    this.mUIItem2600Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2600Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]6[Column]_Col_Amount";
                    this.mUIItem2600Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2600Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem2600Cell;
            }
        }
        
        public DXCell UIItem601Cell
        {
            get
            {
                if ((this.mUIItem601Cell == null))
                {
                    this.mUIItem601Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem601Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]6[Column]_Col_MainCode";
                    this.mUIItem601Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem601Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem601Cell;
            }
        }
        
        public DXCell UIOscarssonPerCell
        {
            get
            {
                if ((this.mUIOscarssonPerCell == null))
                {
                    this.mUIOscarssonPerCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOscarssonPerCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]6[Column]_Col_EmployeeName";
                    this.mUIOscarssonPerCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOscarssonPerCell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIOscarssonPerCell;
            }
        }
        
        public DXCell UIItem1Cell
        {
            get
            {
                if ((this.mUIItem1Cell == null))
                {
                    this.mUIItem1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]6[Column]_Col_InternalPositionNumber";
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem1Cell;
            }
        }
        
        public DXCell UIItem1Cell1
        {
            get
            {
                if ((this.mUIItem1Cell1 == null))
                {
                    this.mUIItem1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]1[Column]_Col_InternalPositionNumber";
                    this.mUIItem1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell1.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem1Cell1;
            }
        }
        
        public DXCell UIItem601Cell1
        {
            get
            {
                if ((this.mUIItem601Cell1 == null))
                {
                    this.mUIItem601Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem601Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]10[Column]_Col_MainCode";
                    this.mUIItem601Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem601Cell1.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem601Cell1;
            }
        }
        
        public DXCell UIItem2Cell
        {
            get
            {
                if ((this.mUIItem2Cell == null))
                {
                    this.mUIItem2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]10[Column]_Col_InternalPositionNumber";
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem2Cell;
            }
        }
        
        public DXCell UIItem18012016Cell
        {
            get
            {
                if ((this.mUIItem18012016Cell == null))
                {
                    this.mUIItem18012016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem18012016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]10[Column]_Col_FromDate";
                    this.mUIItem18012016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem18012016Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem18012016Cell;
            }
        }
        
        public DXCell UIItem25012016Cell
        {
            get
            {
                if ((this.mUIItem25012016Cell == null))
                {
                    this.mUIItem25012016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem25012016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]6[Column]_Col_FromDate";
                    this.mUIItem25012016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem25012016Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem25012016Cell;
            }
        }
        
        public DXCell UIItem31012016Cell
        {
            get
            {
                if ((this.mUIItem31012016Cell == null))
                {
                    this.mUIItem31012016Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem31012016Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]6[Column]_Col_ToDate";
                    this.mUIItem31012016Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem31012016Cell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem31012016Cell;
            }
        }
        
        public DXCell UIVollterSvenCell
        {
            get
            {
                if ((this.mUIVollterSvenCell == null))
                {
                    this.mUIVollterSvenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVollterSvenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]16[Column]_Col_EmployeeName";
                    this.mUIVollterSvenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVollterSvenCell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIVollterSvenCell;
            }
        }
        
        public DXCell UIItem601Cell2
        {
            get
            {
                if ((this.mUIItem601Cell2 == null))
                {
                    this.mUIItem601Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem601Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]16[Column]_Col_MainCode";
                    this.mUIItem601Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem601Cell2.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem601Cell2;
            }
        }
        
        public DXCell UIItem297Cell1
        {
            get
            {
                if ((this.mUIItem297Cell1 == null))
                {
                    this.mUIItem297Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem297Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]15[Column]_Col_Amount";
                    this.mUIItem297Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem297Cell1.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem297Cell1;
            }
        }
        
        public DXCell UIItem400Cell1
        {
            get
            {
                if ((this.mUIItem400Cell1 == null))
                {
                    this.mUIItem400Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem400Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]15[Column]_Col_MainCode";
                    this.mUIItem400Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem400Cell1.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem400Cell1;
            }
        }
        
        public DXCell UIItem892Cell1
        {
            get
            {
                if ((this.mUIItem892Cell1 == null))
                {
                    this.mUIItem892Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem892Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]20[Column]_Col_Amount";
                    this.mUIItem892Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem892Cell1.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem892Cell1;
            }
        }
        
        public DXCell UIItem3568Cell1
        {
            get
            {
                if ((this.mUIItem3568Cell1 == null))
                {
                    this.mUIItem3568Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3568Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]21[Column]_Col_Amount";
                    this.mUIItem3568Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3568Cell1.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem3568Cell1;
            }
        }
        
        public DXCell UIEklandBrittCell
        {
            get
            {
                if ((this.mUIEklandBrittCell == null))
                {
                    this.mUIEklandBrittCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIEklandBrittCell.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]20[Column]_Col_EmployeeName";
                    this.mUIEklandBrittCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIEklandBrittCell.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIEklandBrittCell;
            }
        }
        
        public DXCell UIItem510Cell2
        {
            get
            {
                if ((this.mUIItem510Cell2 == null))
                {
                    this.mUIItem510Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem510Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]5[Column]_Col_MainCode";
                    this.mUIItem510Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem510Cell2.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem510Cell2;
            }
        }
        
        public DXCell UIItem10012016Cell1
        {
            get
            {
                if ((this.mUIItem10012016Cell1 == null))
                {
                    this.mUIItem10012016Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem10012016Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]5[Column]_Col_ToDate";
                    this.mUIItem10012016Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem10012016Cell1.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem10012016Cell1;
            }
        }
        
        public DXCell UIItem5150Cell2
        {
            get
            {
                if ((this.mUIItem5150Cell2 == null))
                {
                    this.mUIItem5150Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5150Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]5[Column]_Col_DepartmentCode";
                    this.mUIItem5150Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5150Cell2.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem5150Cell2;
            }
        }
        
        public DXCell UIItem5150Cell3
        {
            get
            {
                if ((this.mUIItem5150Cell3 == null))
                {
                    this.mUIItem5150Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5150Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "_GridGridControlCell[View]_GridView[Row]1[Column]_Col_DepartmentCode";
                    this.mUIItem5150Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5150Cell3.WindowTitles.Add("Ettersystem - eksportdetaljer");
                    #endregion
                }
                return this.mUIItem5150Cell3;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem2676Cell;
        
        private DXCell mUIItem4162Cell;
        
        private DXCell mUIItem297Cell;
        
        private DXCell mUIItem1189Cell;
        
        private DXCell mUIItem892Cell;
        
        private DXCell mUIItem3568Cell;
        
        private DXCell mUIItem04012016Cell;
        
        private DXCell mUIItem14022016Cell;
        
        private DXCell mUIEndreLenaCell;
        
        private DXCell mUIItem5150Cell;
        
        private DXCell mUIItem866Cell;
        
        private DXCell mUIItem510Cell;
        
        private DXCell mUIItem510Cell1;
        
        private DXCell mUIItem04012016Cell1;
        
        private DXCell mUIItem10012016Cell;
        
        private DXCell mUIGarboGretaCell;
        
        private DXCell mUIItem5150Cell1;
        
        private DXCell mUIItem1115Cell;
        
        private DXCell mUIItem362Cell;
        
        private DXCell mUISkarsgårdStellanCell;
        
        private DXCell mUIStormarePeterCell;
        
        private DXCell mUIEdwallAllanCell;
        
        private DXCell mUIKveldNattilleggCell;
        
        private DXCell mUILørSøndagstilleggCell;
        
        private DXCell mUIItem14032016Cell;
        
        private DXCell mUIItem03042016Cell;
        
        private DXCell mUIItem400Cell;
        
        private DXCell mUIItem21012016Cell;
        
        private DXCell mUIItem866Cell1;
        
        private DXCell mUIItem17012016Cell;
        
        private DXCell mUIJähkelLennartCell;
        
        private DXCell mUIItem2600Cell;
        
        private DXCell mUIItem601Cell;
        
        private DXCell mUIOscarssonPerCell;
        
        private DXCell mUIItem1Cell;
        
        private DXCell mUIItem1Cell1;
        
        private DXCell mUIItem601Cell1;
        
        private DXCell mUIItem2Cell;
        
        private DXCell mUIItem18012016Cell;
        
        private DXCell mUIItem25012016Cell;
        
        private DXCell mUIItem31012016Cell;
        
        private DXCell mUIVollterSvenCell;
        
        private DXCell mUIItem601Cell2;
        
        private DXCell mUIItem297Cell1;
        
        private DXCell mUIItem400Cell1;
        
        private DXCell mUIItem892Cell1;
        
        private DXCell mUIItem3568Cell1;
        
        private DXCell mUIEklandBrittCell;
        
        private DXCell mUIItem510Cell2;
        
        private DXCell mUIItem10012016Cell1;
        
        private DXCell mUIItem5150Cell2;
        
        private DXCell mUIItem5150Cell3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanInnstilliWindow : DXWindow
    {
        
        public UIArbeidsplanInnstilliWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan - Innstillinger";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public UITcDataTabList UITcDataTabList
        {
            get
            {
                if ((this.mUITcDataTabList == null))
                {
                    this.mUITcDataTabList = new UITcDataTabList(this);
                }
                return this.mUITcDataTabList;
            }
        }
        
        public UIGSPanelControlClient2 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient2(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UITcDataTabList mUITcDataTabList;
        
        private UIGSPanelControlClient2 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcDataTabList : DXTestControl
    {
        
        public UITcDataTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcData";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public UITpConfigurationClient UITpConfigurationClient
        {
            get
            {
                if ((this.mUITpConfigurationClient == null))
                {
                    this.mUITpConfigurationClient = new UITpConfigurationClient(this);
                }
                return this.mUITpConfigurationClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpConfigurationClient mUITpConfigurationClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpConfigurationClient : DXTestControl
    {
        
        public UITpConfigurationClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpConfiguration";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public UIPaCenterClient UIPaCenterClient
        {
            get
            {
                if ((this.mUIPaCenterClient == null))
                {
                    this.mUIPaCenterClient = new UIPaCenterClient(this);
                }
                return this.mUIPaCenterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaCenterClient mUIPaCenterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaCenterClient : DXTestControl
    {
        
        public UIPaCenterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paCenter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UIPceDate0PopupEdit
        {
            get
            {
                if ((this.mUIPceDate0PopupEdit == null))
                {
                    this.mUIPceDate0PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[0]";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate0PopupEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIPceDate0PopupEdit;
            }
        }
        
        public UIEValidToDateCustom UIEValidToDateCustom
        {
            get
            {
                if ((this.mUIEValidToDateCustom == null))
                {
                    this.mUIEValidToDateCustom = new UIEValidToDateCustom(this);
                }
                return this.mUIEValidToDateCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUIPceDate0PopupEdit;
        
        private UIEValidToDateCustom mUIEValidToDateCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEValidToDateCustom : DXTestControl
    {
        
        public UIEValidToDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eValidToDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient2 : DXTestControl
    {
        
        public UIGSPanelControlClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paBottom";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow4 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow4()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel4 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel4(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel4 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel4 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom4 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom4(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom4 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom4 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList4 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList4(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList4 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList4 : DXTestControl
    {
        
        public UITcVisualizationTabList4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient4 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient4(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient4 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient4 : DXTestControl
    {
        
        public UITpFixedPaymentClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom8 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom8(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom8 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom8 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom4 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom4(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom4 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom4 : DXTestControl
    {
        
        public UIViewHost1Custom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient4 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient4(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient4 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient4 : DXTestControl
    {
        
        public UIPcViewClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom9 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom9(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom9 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom9 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid4 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid4(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid4 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid4 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem6PivotGridCell
        {
            get
            {
                if ((this.mUIItem6PivotGridCell == null))
                {
                    this.mUIItem6PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]3";
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem6PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem6PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem6PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow5 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow5()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel5 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel5(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel5 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel5 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom5 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom5(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom5 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom5 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList5 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList5(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList5 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList5 : DXTestControl
    {
        
        public UITcVisualizationTabList5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient5 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient5(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient5 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient5 : DXTestControl
    {
        
        public UITpFixedPaymentClient5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom10 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom10(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom10 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom10 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom5 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom5(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom5 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom5 : DXTestControl
    {
        
        public UIViewHost1Custom5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient5 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient5(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient5 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient5 : DXTestControl
    {
        
        public UIPcViewClient5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom11 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom11(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom11 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom11 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid5 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid5(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid5 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid5 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem24PivotGridCell
        {
            get
            {
                if ((this.mUIItem24PivotGridCell == null))
                {
                    this.mUIItem24PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem24PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]3";
                    this.mUIItem24PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem24PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem24PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem24PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow6 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow6()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel6 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel6(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel6 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel6 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom6 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom6(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom6 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom6 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList6 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList6(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList6 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList6 : DXTestControl
    {
        
        public UITcVisualizationTabList6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient6 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient6(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient6 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient6 : DXTestControl
    {
        
        public UITpFixedPaymentClient6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom12 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom12(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom12 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom12 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom6 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom6(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom6 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom6 : DXTestControl
    {
        
        public UIViewHost1Custom6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient6 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient6(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient6 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient6 : DXTestControl
    {
        
        public UIPcViewClient6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom13 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom13(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom13 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom13 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid6 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid6(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid6 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid6 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem18PivotGridCell
        {
            get
            {
                if ((this.mUIItem18PivotGridCell == null))
                {
                    this.mUIItem18PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem18PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]5";
                    this.mUIItem18PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem18PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem18PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem18PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow7 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow7()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel7 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel7(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel7 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel7 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom7 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom7(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom7 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom7 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList7 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList7(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList7 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList7 : DXTestControl
    {
        
        public UITcVisualizationTabList7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient7 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient7(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient7 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient7 : DXTestControl
    {
        
        public UITpFixedPaymentClient7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom14 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom14(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom14 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom14 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom7 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom7(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom7 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom7 : DXTestControl
    {
        
        public UIViewHost1Custom7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient7 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient7(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient7 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient7 : DXTestControl
    {
        
        public UIPcViewClient7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom15 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom15(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom15 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom15 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid7 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid7(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid7 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid7 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem28PivotGridCell
        {
            get
            {
                if ((this.mUIItem28PivotGridCell == null))
                {
                    this.mUIItem28PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem28PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]5";
                    this.mUIItem28PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem28PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem28PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem28PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : DXWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4003 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4003 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("GT-4003 - Informasjon");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow8 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow8()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel8 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel8(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel8 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel8 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom8 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom8(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom8 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom8 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList8 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList8(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList8 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList8 : DXTestControl
    {
        
        public UITcVisualizationTabList8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient8 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient8(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient8 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient8 : DXTestControl
    {
        
        public UITpFixedPaymentClient8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom16 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom16(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom16 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom16 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom8 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom8(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom8 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom8 : DXTestControl
    {
        
        public UIViewHost1Custom8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient8 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient8(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient8 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient8 : DXTestControl
    {
        
        public UIPcViewClient8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom17 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom17(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom17 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom17 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid8 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid8(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid8 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid8 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem6PivotGridCell
        {
            get
            {
                if ((this.mUIItem6PivotGridCell == null))
                {
                    this.mUIItem6PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]5";
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem6PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem6PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem6PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow9 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow9()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel9 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel9(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel9 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel9 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom9 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom9(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom9 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom9 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList9 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList9(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList9 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList9 : DXTestControl
    {
        
        public UITcVisualizationTabList9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient9 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient9(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient9 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient9 : DXTestControl
    {
        
        public UITpFixedPaymentClient9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom18 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom18(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom18 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom18 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom9 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom9(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom9 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom9 : DXTestControl
    {
        
        public UIViewHost1Custom9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient9 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient9(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient9 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient9 : DXTestControl
    {
        
        public UIPcViewClient9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom19 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom19(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom19 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom19 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid9 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid9(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid9 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid9 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem6PivotGridCell
        {
            get
            {
                if ((this.mUIItem6PivotGridCell == null))
                {
                    this.mUIItem6PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]6";
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem6PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem6PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem6PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILinjeinnstillingerGaWindow : DXWindow
    {
        
        public UILinjeinnstillingerGaWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Linjeinnstillinger - [Garbo, Greta]";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Garbo, Greta]");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client2 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client2(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        
        public UIGSPanelControlClient3 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient3(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client2 mUIGsPanelControl3Client;
        
        private UIGSPanelControlClient3 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl3Client2 : DXTestControl
    {
        
        public UIGsPanelControl3Client2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Garbo, Greta]");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UIPceDate1PopupEdit
        {
            get
            {
                if ((this.mUIPceDate1PopupEdit == null))
                {
                    this.mUIPceDate1PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[1]";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate1PopupEdit.WindowTitles.Add("Linjeinnstillinger - [Garbo, Greta]");
                    #endregion
                }
                return this.mUIPceDate1PopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUIPceDate1PopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient3 : DXTestControl
    {
        
        public UIGSPanelControlClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Garbo, Greta]");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Linjeinnstillinger - [Garbo, Greta]");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanFTTKalendWindow : DXWindow
    {
        
        public UIArbeidsplanFTTKalendWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRcMenuRibbon3 UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon3(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        
        public UIPnlRosterPlanClient2 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient2(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIRcMenuRibbon3 mUIRcMenuRibbon;
        
        private UIPnlRosterPlanClient2 mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRcMenuRibbon3 : DXRibbon
    {
        
        public UIRcMenuRibbon3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpPlanRibbonPage3 UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage3(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpPlanRibbonPage3 mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpPlanRibbonPage3 : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpgPlanCopyRosterRibbonPageGroup1 UIRpgPlanCopyRosterRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPlanCopyRosterRibbonPageGroup == null))
                {
                    this.mUIRpgPlanCopyRosterRibbonPageGroup = new UIRpgPlanCopyRosterRibbonPageGroup1(this);
                }
                return this.mUIRpgPlanCopyRosterRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPlanCopyRosterRibbonPageGroup1 mUIRpgPlanCopyRosterRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPlanCopyRosterRibbonPageGroup1 : DXRibbonPageGroup
    {
        
        public UIRpgPlanCopyRosterRibbonPageGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPlanCopyRoster";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UINykalenderplanRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUINykalenderplanRibbonBaseButtonItem == null))
                {
                    this.mUINykalenderplanRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUINykalenderplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCopyRosterPlan";
                    this.mUINykalenderplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUINykalenderplanRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
                    #endregion
                }
                return this.mUINykalenderplanRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUINykalenderplanRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient2 : DXTestControl
    {
        
        public UIPnlRosterPlanClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable2 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable2(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable2 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable2 : DXGrid
    {
        
        public UIGcRosterPlanTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIACell;
        
        private DXCell mUIItemCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINykalenderplanWindow : DXWindow
    {
        
        public UINykalenderplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ny kalenderplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ny kalenderplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainClient1 UIPnlMainClient
        {
            get
            {
                if ((this.mUIPnlMainClient == null))
                {
                    this.mUIPnlMainClient = new UIPnlMainClient1(this);
                }
                return this.mUIPnlMainClient;
            }
        }
        
        public UIGSPanelControlClient4 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient4(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainClient1 mUIPnlMainClient;
        
        private UIGSPanelControlClient4 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainClient1 : DXTestControl
    {
        
        public UIPnlMainClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny kalenderplan");
            #endregion
        }
        
        #region Properties
        public UIGsLayoutControlMainCustom1 UIGsLayoutControlMainCustom
        {
            get
            {
                if ((this.mUIGsLayoutControlMainCustom == null))
                {
                    this.mUIGsLayoutControlMainCustom = new UIGsLayoutControlMainCustom1(this);
                }
                return this.mUIGsLayoutControlMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGsLayoutControlMainCustom1 mUIGsLayoutControlMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsLayoutControlMainCustom1 : DXTestControl
    {
        
        public UIGsLayoutControlMainCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsLayoutControlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Ny kalenderplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNaLayoutGroup1 UILayoutControlGroupNaLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNaLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNaLayoutGroup = new UILayoutControlGroupNaLayoutGroup1(this);
                }
                return this.mUILayoutControlGroupNaLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNaLayoutGroup1 mUILayoutControlGroupNaLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNaLayoutGroup1 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNaLayoutGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupName";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Ny kalenderplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNeLayoutGroup1 UILayoutControlGroupNeLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNeLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNeLayoutGroup = new UILayoutControlGroupNeLayoutGroup1(this);
                }
                return this.mUILayoutControlGroupNeLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNeLayoutGroup1 mUILayoutControlGroupNeLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNeLayoutGroup1 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNeLayoutGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupNewValues";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Ny kalenderplan");
            #endregion
        }
        
        #region Properties
        public UILcMainInfoLayoutControlItem1 UILcMainInfoLayoutControlItem
        {
            get
            {
                if ((this.mUILcMainInfoLayoutControlItem == null))
                {
                    this.mUILcMainInfoLayoutControlItem = new UILcMainInfoLayoutControlItem1(this);
                }
                return this.mUILcMainInfoLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainInfoLayoutControlItem1 mUILcMainInfoLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILcMainInfoLayoutControlItem1 : DXBaseLayoutItem
    {
        
        public UILcMainInfoLayoutControlItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Ny kalenderplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainInfoClient1 UIPnlMainInfoClient
        {
            get
            {
                if ((this.mUIPnlMainInfoClient == null))
                {
                    this.mUIPnlMainInfoClient = new UIPnlMainInfoClient1(this);
                }
                return this.mUIPnlMainInfoClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainInfoClient1 mUIPnlMainInfoClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainInfoClient1 : DXTestControl
    {
        
        public UIPnlMainInfoClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny kalenderplan");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UITxtNameEdit
        {
            get
            {
                if ((this.mUITxtNameEdit == null))
                {
                    this.mUITxtNameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUITxtNameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "txtName";
                    this.mUITxtNameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUITxtNameEdit.WindowTitles.Add("Ny kalenderplan");
                    #endregion
                }
                return this.mUITxtNameEdit;
            }
        }
        
        public DXPopupEdit UIPceDate1PopupEdit
        {
            get
            {
                if ((this.mUIPceDate1PopupEdit == null))
                {
                    this.mUIPceDate1PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[1]";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate1PopupEdit.WindowTitles.Add("Ny kalenderplan");
                    #endregion
                }
                return this.mUIPceDate1PopupEdit;
            }
        }
        
        public UIDeStartDateCustom1 UIDeStartDateCustom
        {
            get
            {
                if ((this.mUIDeStartDateCustom == null))
                {
                    this.mUIDeStartDateCustom = new UIDeStartDateCustom1(this);
                }
                return this.mUIDeStartDateCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUITxtNameEdit;
        
        private DXPopupEdit mUIPceDate1PopupEdit;
        
        private UIDeStartDateCustom1 mUIDeStartDateCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDeStartDateCustom1 : DXTestControl
    {
        
        public UIDeStartDateCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "deStartDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Ny kalenderplan");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Ny kalenderplan");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient4 : DXTestControl
    {
        
        public UIGSPanelControlClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny kalenderplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Ny kalenderplan");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanFTTJanuarWindow : DXWindow
    {
        
        public UIArbeidsplanFTTJanuarWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel10 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel10(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        
        public UIPnlRosterPlanClient3 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient3(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel10 mUIDpnlVisualizationDockPanel;
        
        private UIPnlRosterPlanClient3 mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel10 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom10 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom10(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom10 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom10 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList10 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList10(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList10 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList10 : DXTestControl
    {
        
        public UITcVisualizationTabList10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient10 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient10(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient10 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient10 : DXTestControl
    {
        
        public UITpFixedPaymentClient10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom20 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom20(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom20 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom20 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom10 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom10(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom10 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom10 : DXTestControl
    {
        
        public UIViewHost1Custom10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient10 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient10(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient10 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient10 : DXTestControl
    {
        
        public UIPcViewClient10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom21 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom21(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom21 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom21 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid10 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid10(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        
        public DXComboBox UICbeCalculationTypeComboBox
        {
            get
            {
                if ((this.mUICbeCalculationTypeComboBox == null))
                {
                    this.mUICbeCalculationTypeComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUICbeCalculationTypeComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "cbeCalculationType";
                    this.mUICbeCalculationTypeComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxEdit";
                    this.mUICbeCalculationTypeComboBox.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUICbeCalculationTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid10 mUIPgcCalculationResultPivotGrid;
        
        private DXComboBox mUICbeCalculationTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid10 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UISkarsgårdStellanPivotGridFieldValue
        {
            get
            {
                if ((this.mUISkarsgårdStellanPivotGridFieldValue == null))
                {
                    this.mUISkarsgårdStellanPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUISkarsgårdStellanPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]0";
                    this.mUISkarsgårdStellanPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUISkarsgårdStellanPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUISkarsgårdStellanPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem10PivotGridCell
        {
            get
            {
                if ((this.mUIItem10PivotGridCell == null))
                {
                    this.mUIItem10PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem10PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]0";
                    this.mUIItem10PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem10PivotGridCell.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem10PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem20PivotGridCell
        {
            get
            {
                if ((this.mUIItem20PivotGridCell == null))
                {
                    this.mUIItem20PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem20PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem20PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem20PivotGridCell.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem20PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIStormarePeterPivotGridFieldValue
        {
            get
            {
                if ((this.mUIStormarePeterPivotGridFieldValue == null))
                {
                    this.mUIStormarePeterPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIStormarePeterPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]1";
                    this.mUIStormarePeterPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIStormarePeterPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIStormarePeterPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem10PivotGridCell1
        {
            get
            {
                if ((this.mUIItem10PivotGridCell1 == null))
                {
                    this.mUIItem10PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem10PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]1";
                    this.mUIItem10PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem10PivotGridCell1.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem10PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem20PivotGridCell1
        {
            get
            {
                if ((this.mUIItem20PivotGridCell1 == null))
                {
                    this.mUIItem20PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem20PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem20PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem20PivotGridCell1.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem20PivotGridCell1;
            }
        }
        
        public DXPivotGridFieldValue UIEdwallAllanPivotGridFieldValue
        {
            get
            {
                if ((this.mUIEdwallAllanPivotGridFieldValue == null))
                {
                    this.mUIEdwallAllanPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIEdwallAllanPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]2";
                    this.mUIEdwallAllanPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIEdwallAllanPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIEdwallAllanPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem325PivotGridCell
        {
            get
            {
                if ((this.mUIItem325PivotGridCell == null))
                {
                    this.mUIItem325PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem325PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]2";
                    this.mUIItem325PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem325PivotGridCell.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem325PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIVAKANT4PivotGridFieldValue
        {
            get
            {
                if ((this.mUIVAKANT4PivotGridFieldValue == null))
                {
                    this.mUIVAKANT4PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIVAKANT4PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]3";
                    this.mUIVAKANT4PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIVAKANT4PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIVAKANT4PivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem325PivotGridCell1
        {
            get
            {
                if ((this.mUIItem325PivotGridCell1 == null))
                {
                    this.mUIItem325PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem325PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]3";
                    this.mUIItem325PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem325PivotGridCell1.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem325PivotGridCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUISkarsgårdStellanPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem10PivotGridCell;
        
        private DXPivotGridCell mUIItem20PivotGridCell;
        
        private DXPivotGridFieldValue mUIStormarePeterPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem10PivotGridCell1;
        
        private DXPivotGridCell mUIItem20PivotGridCell1;
        
        private DXPivotGridFieldValue mUIEdwallAllanPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem325PivotGridCell;
        
        private DXPivotGridFieldValue mUIVAKANT4PivotGridFieldValue;
        
        private DXPivotGridCell mUIItem325PivotGridCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient3 : DXTestControl
    {
        
        public UIPnlRosterPlanClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable3 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable3(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable3 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable3 : DXGrid
    {
        
        public UIGcRosterPlanTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIACell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanFTTJanuarWindow1 : DXWindow
    {
        
        public UIArbeidsplanFTTJanuarWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient4 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient4(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIDpnlVisualizationDockPanel11 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel11(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient4 mUIPnlRosterPlanClient;
        
        private UIDpnlVisualizationDockPanel11 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient4 : DXTestControl
    {
        
        public UIPnlRosterPlanClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable4 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable4(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable4 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable4 : DXGrid
    {
        
        public UIGcRosterPlanTable4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_1";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        
        public DXCell UIACell1
        {
            get
            {
                if ((this.mUIACell1 == null))
                {
                    this.mUIACell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell1.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIACell1;
            }
        }
        
        public DXCell UIF1Cell
        {
            get
            {
                if ((this.mUIF1Cell == null))
                {
                    this.mUIF1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIF1Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIACell;
        
        private DXCell mUIACell1;
        
        private DXCell mUIF1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel11 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom11 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom11(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom11 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom11 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList11 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList11(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList11 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList11 : DXTestControl
    {
        
        public UITcVisualizationTabList11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient11 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient11(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient11 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient11 : DXTestControl
    {
        
        public UITpFixedPaymentClient11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom22 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom22(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom22 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom22 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom11 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom11(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom11 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom11 : DXTestControl
    {
        
        public UIViewHost1Custom11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient11 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient11(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient11 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient11 : DXTestControl
    {
        
        public UIPcViewClient11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom23 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom23(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom23 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom23 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public DXComboBox UICbeCalculationTypeComboBox
        {
            get
            {
                if ((this.mUICbeCalculationTypeComboBox == null))
                {
                    this.mUICbeCalculationTypeComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUICbeCalculationTypeComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "cbeCalculationType";
                    this.mUICbeCalculationTypeComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxEdit";
                    this.mUICbeCalculationTypeComboBox.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUICbeCalculationTypeComboBox;
            }
        }
        
        public UIPgcCalculationResultPivotGrid11 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid11(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private DXComboBox mUICbeCalculationTypeComboBox;
        
        private UIPgcCalculationResultPivotGrid11 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid11 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UISkarsgårdStellanPivotGridFieldValue
        {
            get
            {
                if ((this.mUISkarsgårdStellanPivotGridFieldValue == null))
                {
                    this.mUISkarsgårdStellanPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUISkarsgårdStellanPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]0";
                    this.mUISkarsgårdStellanPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUISkarsgårdStellanPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUISkarsgårdStellanPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem1115PivotGridCell
        {
            get
            {
                if ((this.mUIItem1115PivotGridCell == null))
                {
                    this.mUIItem1115PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1115PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]0";
                    this.mUIItem1115PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem1115PivotGridCell.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItem1115PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem223PivotGridCell
        {
            get
            {
                if ((this.mUIItem223PivotGridCell == null))
                {
                    this.mUIItem223PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem223PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem223PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem223PivotGridCell.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItem223PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUISkarsgårdStellanPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem1115PivotGridCell;
        
        private DXPivotGridCell mUIItem223PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu1 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu1(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu1 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu1 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public UIBarSubItemLink11MenuItem UIBarSubItemLink11MenuItem
        {
            get
            {
                if ((this.mUIBarSubItemLink11MenuItem == null))
                {
                    this.mUIBarSubItemLink11MenuItem = new UIBarSubItemLink11MenuItem(this);
                }
                return this.mUIBarSubItemLink11MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBarSubItemLink11MenuItem mUIBarSubItemLink11MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBarSubItemLink11MenuItem : DXMenuItem
    {
        
        public UIBarSubItemLink11MenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[11]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink1MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink1MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink1MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink1MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink1MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFraværiarbeidsplanWindow : DXWindow
    {
        
        public UIFraværiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Fravær i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Fravær i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINbcAbsenceNavBar UINbcAbsenceNavBar
        {
            get
            {
                if ((this.mUINbcAbsenceNavBar == null))
                {
                    this.mUINbcAbsenceNavBar = new UINbcAbsenceNavBar(this);
                }
                return this.mUINbcAbsenceNavBar;
            }
        }
        
        public UIGSPanelControlClient5 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient5(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UINbcAbsenceNavBar mUINbcAbsenceNavBar;
        
        private UIGSPanelControlClient5 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbcAbsenceNavBar : DXNavBar
    {
        
        public UINbcAbsenceNavBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcAbsence";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Fravær i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINavBarGroupControlCoScrollableControl UINavBarGroupControlCoScrollableControl
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl = new UINavBarGroupControlCoScrollableControl(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UINavBarGroupControlCoScrollableControl mUINavBarGroupControlCoScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINavBarGroupControlCoScrollableControl : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "navBarGroupControlContainer2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Fravær i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDdlAbsCodeLookUpEdit UIDdlAbsCodeLookUpEdit
        {
            get
            {
                if ((this.mUIDdlAbsCodeLookUpEdit == null))
                {
                    this.mUIDdlAbsCodeLookUpEdit = new UIDdlAbsCodeLookUpEdit(this);
                }
                return this.mUIDdlAbsCodeLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIDdlAbsCodeLookUpEdit mUIDdlAbsCodeLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDdlAbsCodeLookUpEdit : DXLookUpEdit
    {
        
        public UIDdlAbsCodeLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlAbsCode";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Fravær i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlAbsCodePopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Fravær i arbeidsplan");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient5 : DXTestControl
    {
        
        public UIGSPanelControlClient5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Fravær i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSave";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Fravær i arbeidsplan");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGT4001InformasjonWindow : DXWindow
    {
        
        public UIGT4001InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4001 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4001 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4001 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanFTTKalendWindow1 : DXWindow
    {
        
        public UIArbeidsplanFTTKalendWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient5 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient5(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient5 mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient5 : DXTestControl
    {
        
        public UIPnlRosterPlanClient5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable5 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable5(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable5 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable5 : DXGrid
    {
        
        public UIGcRosterPlanTable5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_14";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit == null))
                {
                    this.mUIRow1ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_14";
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_8";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit == null))
                {
                    this.mUIRow2ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_8";
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_16";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_16";
                    this.mUIRow2ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_26";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit11
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit11 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit11 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_26";
                    this.mUIRow2ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit11.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit11;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit;
        
        private DXCell mUIItemCell1;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit;
        
        private DXCell mUIItemCell2;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell11;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILinjeinnstillingerStWindow : DXWindow
    {
        
        public UILinjeinnstillingerStWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Linjeinnstillinger", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
            this.WindowTitles.Add("Linjeinnstillinger");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client3 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client3(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        
        public UIGSPanelControlClient6 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient6(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client3 mUIGsPanelControl3Client;
        
        private UIGSPanelControlClient6 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl3Client3 : DXTestControl
    {
        
        public UIGsPanelControl3Client3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
            #endregion
        }
        
        #region Properties
        public UIGcAvailabilityPeriodClient UIGcAvailabilityPeriodClient
        {
            get
            {
                if ((this.mUIGcAvailabilityPeriodClient == null))
                {
                    this.mUIGcAvailabilityPeriodClient = new UIGcAvailabilityPeriodClient(this);
                }
                return this.mUIGcAvailabilityPeriodClient;
            }
        }
        
        public UILeAvailablePositionCLookUpEdit UILeAvailablePositionCLookUpEdit
        {
            get
            {
                if ((this.mUILeAvailablePositionCLookUpEdit == null))
                {
                    this.mUILeAvailablePositionCLookUpEdit = new UILeAvailablePositionCLookUpEdit(this);
                }
                return this.mUILeAvailablePositionCLookUpEdit;
            }
        }
        
        public DXTextEdit UIENumber3Edit
        {
            get
            {
                if ((this.mUIENumber3Edit == null))
                {
                    this.mUIENumber3Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber3Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[3]";
                    this.mUIENumber3Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber3Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber3Edit.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
                    #endregion
                }
                return this.mUIENumber3Edit;
            }
        }
        
        public DXTextEdit UIEInternalPositionNumEdit
        {
            get
            {
                if ((this.mUIEInternalPositionNumEdit == null))
                {
                    this.mUIEInternalPositionNumEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIEInternalPositionNumEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eInternalPositionNumber";
                    this.mUIEInternalPositionNumEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIEInternalPositionNumEdit.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
                    #endregion
                }
                return this.mUIEInternalPositionNumEdit;
            }
        }
        
        public UILeAvailableRulesetsLookUpEdit UILeAvailableRulesetsLookUpEdit
        {
            get
            {
                if ((this.mUILeAvailableRulesetsLookUpEdit == null))
                {
                    this.mUILeAvailableRulesetsLookUpEdit = new UILeAvailableRulesetsLookUpEdit(this);
                }
                return this.mUILeAvailableRulesetsLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAvailabilityPeriodClient mUIGcAvailabilityPeriodClient;
        
        private UILeAvailablePositionCLookUpEdit mUILeAvailablePositionCLookUpEdit;
        
        private DXTextEdit mUIENumber3Edit;
        
        private DXTextEdit mUIEInternalPositionNumEdit;
        
        private UILeAvailableRulesetsLookUpEdit mUILeAvailableRulesetsLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcAvailabilityPeriodClient : DXTestControl
    {
        
        public UIGcAvailabilityPeriodClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAvailabilityPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
            #endregion
        }
        
        #region Properties
        public DXButton UIEndreButton
        {
            get
            {
                if ((this.mUIEndreButton == null))
                {
                    this.mUIEndreButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIEndreButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditAvPeriod";
                    this.mUIEndreButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIEndreButton.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
                    #endregion
                }
                return this.mUIEndreButton;
            }
        }
        
        public DXCheckBox UIChkAvailabilityPerioCheckBox
        {
            get
            {
                if ((this.mUIChkAvailabilityPerioCheckBox == null))
                {
                    this.mUIChkAvailabilityPerioCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkAvailabilityPerioCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkAvailabilityPeriodsDefined";
                    this.mUIChkAvailabilityPerioCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkAvailabilityPerioCheckBox.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
                    #endregion
                }
                return this.mUIChkAvailabilityPerioCheckBox;
            }
        }
        
        public DXButton UINYButton
        {
            get
            {
                if ((this.mUINYButton == null))
                {
                    this.mUINYButton = new DXButton(this);
                    #region Search Criteria
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnNewAvPeriod";
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUINYButton.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
                    #endregion
                }
                return this.mUINYButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIEndreButton;
        
        private DXCheckBox mUIChkAvailabilityPerioCheckBox;
        
        private DXButton mUINYButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeAvailablePositionCLookUpEdit : DXLookUpEdit
    {
        
        public UILeAvailablePositionCLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "leAvailablePositionCategories";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "leAvailablePositionCategoriesPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeAvailableRulesetsLookUpEdit : DXLookUpEdit
    {
        
        public UILeAvailableRulesetsLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "leAvailableRulesets";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "leAvailableRulesetsPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient6 : DXTestControl
    {
        
        public UIGSPanelControlClient6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Linjeinnstillinger - [Stormare, Peter]");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGyldighetsperiodeWindow : DXWindow
    {
        
        public UIGyldighetsperiodeWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Gyldighetsperiode";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gyldighetsperiode");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        
        public UIGSDialogFooterBarCustom UIGSDialogFooterBarCustom
        {
            get
            {
                if ((this.mUIGSDialogFooterBarCustom == null))
                {
                    this.mUIGSDialogFooterBarCustom = new UIGSDialogFooterBarCustom(this);
                }
                return this.mUIGSDialogFooterBarCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        
        private UIGSDialogFooterBarCustom mUIGSDialogFooterBarCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Gyldighetsperiode");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UIPceDate0PopupEdit
        {
            get
            {
                if ((this.mUIPceDate0PopupEdit == null))
                {
                    this.mUIPceDate0PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[0]";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate0PopupEdit.WindowTitles.Add("Gyldighetsperiode");
                    #endregion
                }
                return this.mUIPceDate0PopupEdit;
            }
        }
        
        public DXPopupEdit UIPceDate1PopupEdit
        {
            get
            {
                if ((this.mUIPceDate1PopupEdit == null))
                {
                    this.mUIPceDate1PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[1]";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate1PopupEdit.WindowTitles.Add("Gyldighetsperiode");
                    #endregion
                }
                return this.mUIPceDate1PopupEdit;
            }
        }
        
        public UISdeFromDateCustom UISdeFromDateCustom
        {
            get
            {
                if ((this.mUISdeFromDateCustom == null))
                {
                    this.mUISdeFromDateCustom = new UISdeFromDateCustom(this);
                }
                return this.mUISdeFromDateCustom;
            }
        }
        
        public UISdeToDateCustom UISdeToDateCustom
        {
            get
            {
                if ((this.mUISdeToDateCustom == null))
                {
                    this.mUISdeToDateCustom = new UISdeToDateCustom(this);
                }
                return this.mUISdeToDateCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUIPceDate0PopupEdit;
        
        private DXPopupEdit mUIPceDate1PopupEdit;
        
        private UISdeFromDateCustom mUISdeFromDateCustom;
        
        private UISdeToDateCustom mUISdeToDateCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISdeFromDateCustom : DXTestControl
    {
        
        public UISdeFromDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "sdeFromDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Gyldighetsperiode");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Gyldighetsperiode");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISdeToDateCustom : DXTestControl
    {
        
        public UISdeToDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "sdeToDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Gyldighetsperiode");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Gyldighetsperiode");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSDialogFooterBarCustom : DXTestControl
    {
        
        public UIGSDialogFooterBarCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dbFooter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSDialogFooterBar";
            this.WindowTitles.Add("Gyldighetsperiode");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Gyldighetsperiode");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanFTTKalendWindow2 : DXWindow
    {
        
        public UIArbeidsplanFTTKalendWindow2()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel12 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel12(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel12 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel12 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom12 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom12(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom12 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom12 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList12 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList12(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList12 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList12 : DXTestControl
    {
        
        public UITcVisualizationTabList12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient12 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient12(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient12 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient12 : DXTestControl
    {
        
        public UITpFixedPaymentClient12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom24 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom24(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom24 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom24 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom12 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom12(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom12 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom12 : DXTestControl
    {
        
        public UIViewHost1Custom12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient12 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient12(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient12 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient12 : DXTestControl
    {
        
        public UIPcViewClient12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom25 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom25(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom25 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom25 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid12 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid12(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        
        public DXButton UIStoppButton
        {
            get
            {
                if ((this.mUIStoppButton == null))
                {
                    this.mUIStoppButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnStop";
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIStoppButton.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIStoppButton;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid12 mUIPgcCalculationResultPivotGrid;
        
        private DXButton mUIStoppButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid12 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIStormarePeterPivotGridFieldValue
        {
            get
            {
                if ((this.mUIStormarePeterPivotGridFieldValue == null))
                {
                    this.mUIStormarePeterPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIStormarePeterPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]1";
                    this.mUIStormarePeterPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIStormarePeterPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIStormarePeterPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem4163PivotGridCell
        {
            get
            {
                if ((this.mUIItem4163PivotGridCell == null))
                {
                    this.mUIItem4163PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem4163PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem4163PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem4163PivotGridCell.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem4163PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIVAKANT4PivotGridFieldValue
        {
            get
            {
                if ((this.mUIVAKANT4PivotGridFieldValue == null))
                {
                    this.mUIVAKANT4PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIVAKANT4PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]2";
                    this.mUIVAKANT4PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIVAKANT4PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: FTT Kalenderplan  (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIVAKANT4PivotGridFieldValue;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIStormarePeterPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem4163PivotGridCell;
        
        private DXPivotGridFieldValue mUIVAKANT4PivotGridFieldValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStopptilleggWindow : DXWindow
    {
        
        public UIStopptilleggWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Stopp tillegg";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Stopp tillegg");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIDeDateEdit
        {
            get
            {
                if ((this.mUIDeDateEdit == null))
                {
                    this.mUIDeDateEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIDeDateEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "deDate";
                    this.mUIDeDateEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIDeDateEdit.WindowTitles.Add("Stopp tillegg");
                    #endregion
                }
                return this.mUIDeDateEdit;
            }
        }
        
        public UIGcEmploymentsTable UIGcEmploymentsTable
        {
            get
            {
                if ((this.mUIGcEmploymentsTable == null))
                {
                    this.mUIGcEmploymentsTable = new UIGcEmploymentsTable(this);
                }
                return this.mUIGcEmploymentsTable;
            }
        }
        
        public DXButton UIStoppButton
        {
            get
            {
                if ((this.mUIStoppButton == null))
                {
                    this.mUIStoppButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnStop";
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIStoppButton.WindowTitles.Add("Stopp tillegg");
                    #endregion
                }
                return this.mUIStoppButton;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIDeDateEdit;
        
        private UIGcEmploymentsTable mUIGcEmploymentsTable;
        
        private DXButton mUIStoppButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcEmploymentsTable : DXGrid
    {
        
        public UIGcEmploymentsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployments";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Stopp tillegg");
            #endregion
        }
        
        #region Properties
        public DXColumnHeader UIDXCheckboxSelectorCoColumnHeader
        {
            get
            {
                if ((this.mUIDXCheckboxSelectorCoColumnHeader == null))
                {
                    this.mUIDXCheckboxSelectorCoColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIDXCheckboxSelectorCoColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmploymentsGridControlColumnHeader[View]gvEmployments[Column]DX$CheckboxSelecto" +
                        "rColumn";
                    this.mUIDXCheckboxSelectorCoColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIDXCheckboxSelectorCoColumnHeader.WindowTitles.Add("Stopp tillegg");
                    #endregion
                }
                return this.mUIDXCheckboxSelectorCoColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private DXColumnHeader mUIDXCheckboxSelectorCoColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu2 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu2(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu2 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu2 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public UILeggtilblanklinjefraMenuItem UILeggtilblanklinjefraMenuItem
        {
            get
            {
                if ((this.mUILeggtilblanklinjefraMenuItem == null))
                {
                    this.mUILeggtilblanklinjefraMenuItem = new UILeggtilblanklinjefraMenuItem(this);
                }
                return this.mUILeggtilblanklinjefraMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UILeggtilblanklinjefraMenuItem mUILeggtilblanklinjefraMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeggtilblanklinjefraMenuItem : DXMenuItem
    {
        
        public UILeggtilblanklinjefraMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink0MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink0MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink0MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink0MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIBarButtonItemLink0MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink0MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink0MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanFTTJanuarWindow2 : DXWindow
    {
        
        public UIArbeidsplanFTTJanuarWindow2()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel13 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel13(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel13 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel13 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom13 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom13(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom13 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom13 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList13 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList13(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList13 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList13 : DXTestControl
    {
        
        public UITcVisualizationTabList13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient13 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient13(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient13 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient13 : DXTestControl
    {
        
        public UITpFixedPaymentClient13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom26 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom26(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom26 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom26 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom13 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom13(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom13 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom13 : DXTestControl
    {
        
        public UIViewHost1Custom13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient13 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient13(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient13 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient13 : DXTestControl
    {
        
        public UIPcViewClient13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom27 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom27(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom27 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom27 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid13 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid13(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid13 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid13 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem4163PivotGridCell
        {
            get
            {
                if ((this.mUIItem4163PivotGridCell == null))
                {
                    this.mUIItem4163PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem4163PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem4163PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem4163PivotGridCell.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem4163PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIItem2500PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem2500PivotGridFieldValue == null))
                {
                    this.mUIItem2500PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem2500PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]PositionPercent[LastLevelIndex]1";
                    this.mUIItem2500PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem2500PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem2500PivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem20PivotGridCell
        {
            get
            {
                if ((this.mUIItem20PivotGridCell == null))
                {
                    this.mUIItem20PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem20PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]2";
                    this.mUIItem20PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem20PivotGridCell.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem20PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIItem7500PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem7500PivotGridFieldValue == null))
                {
                    this.mUIItem7500PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem7500PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]PositionPercent[LastLevelIndex]2";
                    this.mUIItem7500PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem7500PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem7500PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIStormarePeterPivotGridFieldValue
        {
            get
            {
                if ((this.mUIStormarePeterPivotGridFieldValue == null))
                {
                    this.mUIStormarePeterPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIStormarePeterPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]1";
                    this.mUIStormarePeterPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIStormarePeterPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: FTT Januar 2016 (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIStormarePeterPivotGridFieldValue;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem4163PivotGridCell;
        
        private DXPivotGridFieldValue mUIItem2500PivotGridFieldValue;
        
        private DXPivotGridCell mUIItem20PivotGridCell;
        
        private DXPivotGridFieldValue mUIItem7500PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIStormarePeterPivotGridFieldValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanFFTBaseplWindow : DXWindow
    {
        
        public UIArbeidsplanFFTBaseplWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRcMenuRibbon4 UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon4(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        #endregion
        
        #region Fields
        private UIRcMenuRibbon4 mUIRcMenuRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRcMenuRibbon4 : DXRibbon
    {
        
        public UIRcMenuRibbon4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpPlanRibbonPage4 UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage4(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpPlanRibbonPage4 mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpPlanRibbonPage4 : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpgPlanCopyRosterRibbonPageGroup2 UIRpgPlanCopyRosterRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPlanCopyRosterRibbonPageGroup == null))
                {
                    this.mUIRpgPlanCopyRosterRibbonPageGroup = new UIRpgPlanCopyRosterRibbonPageGroup2(this);
                }
                return this.mUIRpgPlanCopyRosterRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPlanCopyRosterRibbonPageGroup2 mUIRpgPlanCopyRosterRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPlanCopyRosterRibbonPageGroup2 : DXRibbonPageGroup
    {
        
        public UIRpgPlanCopyRosterRibbonPageGroup2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPlanCopyRoster";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UINybaseplanRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUINybaseplanRibbonBaseButtonItem == null))
                {
                    this.mUINybaseplanRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUINybaseplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCopyBase";
                    this.mUINybaseplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUINybaseplanRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: FFT Baseplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUINybaseplanRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUINybaseplanRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINybaseplanWindow : DXWindow
    {
        
        public UINybaseplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ny baseplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ny baseplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainClient2 UIPnlMainClient
        {
            get
            {
                if ((this.mUIPnlMainClient == null))
                {
                    this.mUIPnlMainClient = new UIPnlMainClient2(this);
                }
                return this.mUIPnlMainClient;
            }
        }
        
        public UIGSPanelControlClient7 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient7(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainClient2 mUIPnlMainClient;
        
        private UIGSPanelControlClient7 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainClient2 : DXTestControl
    {
        
        public UIPnlMainClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny baseplan");
            #endregion
        }
        
        #region Properties
        public UIGsLayoutControlMainCustom2 UIGsLayoutControlMainCustom
        {
            get
            {
                if ((this.mUIGsLayoutControlMainCustom == null))
                {
                    this.mUIGsLayoutControlMainCustom = new UIGsLayoutControlMainCustom2(this);
                }
                return this.mUIGsLayoutControlMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGsLayoutControlMainCustom2 mUIGsLayoutControlMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsLayoutControlMainCustom2 : DXTestControl
    {
        
        public UIGsLayoutControlMainCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsLayoutControlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Ny baseplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNaLayoutGroup2 UILayoutControlGroupNaLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNaLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNaLayoutGroup = new UILayoutControlGroupNaLayoutGroup2(this);
                }
                return this.mUILayoutControlGroupNaLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNaLayoutGroup2 mUILayoutControlGroupNaLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNaLayoutGroup2 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNaLayoutGroup2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupName";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Ny baseplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNeLayoutGroup2 UILayoutControlGroupNeLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNeLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNeLayoutGroup = new UILayoutControlGroupNeLayoutGroup2(this);
                }
                return this.mUILayoutControlGroupNeLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNeLayoutGroup2 mUILayoutControlGroupNeLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNeLayoutGroup2 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNeLayoutGroup2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupNewValues";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Ny baseplan");
            #endregion
        }
        
        #region Properties
        public UILcMainInfoLayoutControlItem2 UILcMainInfoLayoutControlItem
        {
            get
            {
                if ((this.mUILcMainInfoLayoutControlItem == null))
                {
                    this.mUILcMainInfoLayoutControlItem = new UILcMainInfoLayoutControlItem2(this);
                }
                return this.mUILcMainInfoLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainInfoLayoutControlItem2 mUILcMainInfoLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILcMainInfoLayoutControlItem2 : DXBaseLayoutItem
    {
        
        public UILcMainInfoLayoutControlItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Ny baseplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainInfoClient2 UIPnlMainInfoClient
        {
            get
            {
                if ((this.mUIPnlMainInfoClient == null))
                {
                    this.mUIPnlMainInfoClient = new UIPnlMainInfoClient2(this);
                }
                return this.mUIPnlMainInfoClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainInfoClient2 mUIPnlMainInfoClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainInfoClient2 : DXTestControl
    {
        
        public UIPnlMainInfoClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny baseplan");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UIPceDate1PopupEdit
        {
            get
            {
                if ((this.mUIPceDate1PopupEdit == null))
                {
                    this.mUIPceDate1PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[1]";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate1PopupEdit.WindowTitles.Add("Ny baseplan");
                    #endregion
                }
                return this.mUIPceDate1PopupEdit;
            }
        }
        
        public DXCheckBox UIChkKladdCheckBox
        {
            get
            {
                if ((this.mUIChkKladdCheckBox == null))
                {
                    this.mUIChkKladdCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkKladdCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkKladd";
                    this.mUIChkKladdCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkKladdCheckBox.WindowTitles.Add("Ny baseplan");
                    #endregion
                }
                return this.mUIChkKladdCheckBox;
            }
        }
        
        public UIDeStartDateCustom2 UIDeStartDateCustom
        {
            get
            {
                if ((this.mUIDeStartDateCustom == null))
                {
                    this.mUIDeStartDateCustom = new UIDeStartDateCustom2(this);
                }
                return this.mUIDeStartDateCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUIPceDate1PopupEdit;
        
        private DXCheckBox mUIChkKladdCheckBox;
        
        private UIDeStartDateCustom2 mUIDeStartDateCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDeStartDateCustom2 : DXTestControl
    {
        
        public UIDeStartDateCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "deStartDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Ny baseplan");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Ny baseplan");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient7 : DXTestControl
    {
        
        public UIGSPanelControlClient7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny baseplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Ny baseplan");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFFTWindow : DXWindow
    {
        
        public UIArbeidsplanKopiavFFTWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel14 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel14(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel14 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel14 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom14 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom14(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom14 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom14 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList14 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList14(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList14 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList14 : DXTestControl
    {
        
        public UITcVisualizationTabList14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient14 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient14(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient14 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient14 : DXTestControl
    {
        
        public UITpFixedPaymentClient14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom28 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom28(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom28 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom28 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom14 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom14(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom14 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom14 : DXTestControl
    {
        
        public UIViewHost1Custom14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient14 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient14(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient14 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient14 : DXTestControl
    {
        
        public UIPcViewClient14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom29 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom29(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom29 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom29 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXButton UIKalkulerButton
        {
            get
            {
                if ((this.mUIKalkulerButton == null))
                {
                    this.mUIKalkulerButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIKalkulerButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCalculate";
                    this.mUIKalkulerButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIKalkulerButton.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIKalkulerButton;
            }
        }
        
        public DXButton UIOverførButton
        {
            get
            {
                if ((this.mUIOverførButton == null))
                {
                    this.mUIOverførButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnExport";
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIOverførButton.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIOverførButton;
            }
        }
        
        public DXButton UIStoppButton
        {
            get
            {
                if ((this.mUIStoppButton == null))
                {
                    this.mUIStoppButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnStop";
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIStoppButton.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIStoppButton;
            }
        }
        
        public UIPgcCalculationResultPivotGrid14 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid14(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIKalkulerButton;
        
        private DXButton mUIOverførButton;
        
        private DXButton mUIStoppButton;
        
        private UIPgcCalculationResultPivotGrid14 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid14 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem1189PivotGridCell
        {
            get
            {
                if ((this.mUIItem1189PivotGridCell == null))
                {
                    this.mUIItem1189PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1189PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]0";
                    this.mUIItem1189PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem1189PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem1189PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem6244PivotGridCell
        {
            get
            {
                if ((this.mUIItem6244PivotGridCell == null))
                {
                    this.mUIItem6244PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem6244PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem6244PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem6244PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem6244PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem2973PivotGridCell
        {
            get
            {
                if ((this.mUIItem2973PivotGridCell == null))
                {
                    this.mUIItem2973PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2973PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]0";
                    this.mUIItem2973PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem2973PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FFT Baseplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem2973PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem1189PivotGridCell;
        
        private DXPivotGridCell mUIItem6244PivotGridCell;
        
        private DXPivotGridCell mUIItem2973PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGatver66041952ASCLAvWindow : WinWindow
    {
        
        public UIGatver66041952ASCLAvWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Gat", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcMainPanelClient UIPcMainPanelClient
        {
            get
            {
                if ((this.mUIPcMainPanelClient == null))
                {
                    this.mUIPcMainPanelClient = new UIPcMainPanelClient(this);
                }
                return this.mUIPcMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcMainPanelClient mUIPcMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcMainPanelClient : DXTestControl
    {
        
        public UIPcMainPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UITcPanListsTabList UITcPanListsTabList
        {
            get
            {
                if ((this.mUITcPanListsTabList == null))
                {
                    this.mUITcPanListsTabList = new UITcPanListsTabList(this);
                }
                return this.mUITcPanListsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcPanListsTabList mUITcPanListsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcPanListsTabList : DXTestControl
    {
        
        public UITcPanListsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcPanLists";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public DXTestControl UIXtraTabControlHeaderTabPage
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage == null))
                {
                    this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "tcPanListsPageHeader1";
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage;
            }
        }
        
        public UITpWishPlanListClient UITpWishPlanListClient
        {
            get
            {
                if ((this.mUITpWishPlanListClient == null))
                {
                    this.mUITpWishPlanListClient = new UITpWishPlanListClient(this);
                }
                return this.mUITpWishPlanListClient;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        
        private UITpWishPlanListClient mUITpWishPlanListClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpWishPlanListClient : DXTestControl
    {
        
        public UITpWishPlanListClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpWishPlanList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UIWishPlanListCustom UIWishPlanListCustom
        {
            get
            {
                if ((this.mUIWishPlanListCustom == null))
                {
                    this.mUIWishPlanListCustom = new UIWishPlanListCustom(this);
                }
                return this.mUIWishPlanListCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWishPlanListCustom mUIWishPlanListCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWishPlanListCustom : DXTestControl
    {
        
        public UIWishPlanListCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "wishPlanList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WishPlanList";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl2Client UIGsPanelControl2Client
        {
            get
            {
                if ((this.mUIGsPanelControl2Client == null))
                {
                    this.mUIGsPanelControl2Client = new UIGsPanelControl2Client(this);
                }
                return this.mUIGsPanelControl2Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl2Client mUIGsPanelControl2Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl2Client : DXTestControl
    {
        
        public UIGsPanelControl2Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UIRibbonControl1Ribbon UIRibbonControl1Ribbon
        {
            get
            {
                if ((this.mUIRibbonControl1Ribbon == null))
                {
                    this.mUIRibbonControl1Ribbon = new UIRibbonControl1Ribbon(this);
                }
                return this.mUIRibbonControl1Ribbon;
            }
        }
        
        public UIGcWishPeriodsTable UIGcWishPeriodsTable
        {
            get
            {
                if ((this.mUIGcWishPeriodsTable == null))
                {
                    this.mUIGcWishPeriodsTable = new UIGcWishPeriodsTable(this);
                }
                return this.mUIGcWishPeriodsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonControl1Ribbon mUIRibbonControl1Ribbon;
        
        private UIGcWishPeriodsTable mUIGcWishPeriodsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonControl1Ribbon : DXRibbon
    {
        
        public UIRibbonControl1Ribbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UIRpHomeRibbonPage UIRpHomeRibbonPage
        {
            get
            {
                if ((this.mUIRpHomeRibbonPage == null))
                {
                    this.mUIRpHomeRibbonPage = new UIRpHomeRibbonPage(this);
                }
                return this.mUIRpHomeRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpHomeRibbonPage mUIRpHomeRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpHomeRibbonPage : DXRibbonPage
    {
        
        public UIRpHomeRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpHome";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UIRpgPeriodRibbonPageGroup UIRpgPeriodRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPeriodRibbonPageGroup == null))
                {
                    this.mUIRpgPeriodRibbonPageGroup = new UIRpgPeriodRibbonPageGroup(this);
                }
                return this.mUIRpgPeriodRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPeriodRibbonPageGroup mUIRpgPeriodRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPeriodRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgPeriodRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPeriod";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UINYRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUINYRibbonBaseButtonItem == null))
                {
                    this.mUINYRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUINYRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiNewPeriod";
                    this.mUINYRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUINYRibbonBaseButtonItem.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
                    #endregion
                }
                return this.mUINYRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIKobletilbaseplanRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIKobletilbaseplanRibbonBaseButtonItem == null))
                {
                    this.mUIKobletilbaseplanRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIKobletilbaseplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiConnectToBasePlan";
                    this.mUIKobletilbaseplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIKobletilbaseplanRibbonBaseButtonItem.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
                    #endregion
                }
                return this.mUIKobletilbaseplanRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIEndretilfase1RibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIEndretilfase1RibbonBaseButtonItem == null))
                {
                    this.mUIEndretilfase1RibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIEndretilfase1RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiChangeToPhase1";
                    this.mUIEndretilfase1RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIEndretilfase1RibbonBaseButtonItem.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
                    #endregion
                }
                return this.mUIEndretilfase1RibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUINYRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIKobletilbaseplanRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIEndretilfase1RibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcWishPeriodsTable : DXGrid
    {
        
        public UIGcWishPeriodsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public DXButton UIPåske2016Button
        {
            get
            {
                if ((this.mUIPåske2016Button == null))
                {
                    this.mUIPåske2016Button = new DXButton(this);
                    #region Search Criteria
                    this.mUIPåske2016Button.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCellButton[View]gvMaster[Row]0[Column]gcolName";
                    this.mUIPåske2016Button.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCellButton";
                    this.mUIPåske2016Button.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
                    #endregion
                }
                return this.mUIPåske2016Button;
            }
        }
        
        public DXCell UIØnskeplanforKopiavFFCell
        {
            get
            {
                if ((this.mUIØnskeplanforKopiavFFCell == null))
                {
                    this.mUIØnskeplanforKopiavFFCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIØnskeplanforKopiavFFCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvDetails[Row]0[Column]gcolPlanName";
                    this.mUIØnskeplanforKopiavFFCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIØnskeplanforKopiavFFCell.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
                    #endregion
                }
                return this.mUIØnskeplanforKopiavFFCell;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIPåske2016Button;
        
        private DXCell mUIØnskeplanforKopiavFFCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIØnskeplanperiodeWindow : DXWindow
    {
        
        public UIØnskeplanperiodeWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ønskeplanperiode";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public UIGrpPeriodClient UIGrpPeriodClient
        {
            get
            {
                if ((this.mUIGrpPeriodClient == null))
                {
                    this.mUIGrpPeriodClient = new UIGrpPeriodClient(this);
                }
                return this.mUIGrpPeriodClient;
            }
        }
        
        public UIGrpPhaseControlClient UIGrpPhaseControlClient
        {
            get
            {
                if ((this.mUIGrpPhaseControlClient == null))
                {
                    this.mUIGrpPhaseControlClient = new UIGrpPhaseControlClient(this);
                }
                return this.mUIGrpPhaseControlClient;
            }
        }
        
        public UIGSPanelControlClient8 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient8(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpPeriodClient mUIGrpPeriodClient;
        
        private UIGrpPhaseControlClient mUIGrpPhaseControlClient;
        
        private UIGSPanelControlClient8 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpPeriodClient : DXTestControl
    {
        
        public UIGrpPeriodClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpPeriod";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UITxtNameEdit
        {
            get
            {
                if ((this.mUITxtNameEdit == null))
                {
                    this.mUITxtNameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUITxtNameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "txtName";
                    this.mUITxtNameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUITxtNameEdit.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUITxtNameEdit;
            }
        }
        
        public DXPopupEdit UIPceDate0PopupEdit
        {
            get
            {
                if ((this.mUIPceDate0PopupEdit == null))
                {
                    this.mUIPceDate0PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[0]";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate0PopupEdit.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIPceDate0PopupEdit;
            }
        }
        
        public DXTextEdit UIENumberEdit
        {
            get
            {
                if ((this.mUIENumberEdit == null))
                {
                    this.mUIENumberEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber";
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumberEdit.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIENumberEdit;
            }
        }
        
        public DXPopupEdit UIPceDate1PopupEdit
        {
            get
            {
                if ((this.mUIPceDate1PopupEdit == null))
                {
                    this.mUIPceDate1PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[1]";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate1PopupEdit.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIPceDate1PopupEdit;
            }
        }
        
        public UIDeFromDateCustom UIDeFromDateCustom
        {
            get
            {
                if ((this.mUIDeFromDateCustom == null))
                {
                    this.mUIDeFromDateCustom = new UIDeFromDateCustom(this);
                }
                return this.mUIDeFromDateCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUITxtNameEdit;
        
        private DXPopupEdit mUIPceDate0PopupEdit;
        
        private DXTextEdit mUIENumberEdit;
        
        private DXPopupEdit mUIPceDate1PopupEdit;
        
        private UIDeFromDateCustom mUIDeFromDateCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDeFromDateCustom : DXTestControl
    {
        
        public UIDeFromDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "deFromDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpPhaseControlClient : DXTestControl
    {
        
        public UIGrpPhaseControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpPhaseControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXRadioGroup UIRgrpPhaseControlRadioGroup
        {
            get
            {
                if ((this.mUIRgrpPhaseControlRadioGroup == null))
                {
                    this.mUIRgrpPhaseControlRadioGroup = new DXRadioGroup(this);
                    #region Search Criteria
                    this.mUIRgrpPhaseControlRadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "rgrpPhaseControl";
                    this.mUIRgrpPhaseControlRadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSRadioGroup";
                    this.mUIRgrpPhaseControlRadioGroup.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIRgrpPhaseControlRadioGroup;
            }
        }
        #endregion
        
        #region Fields
        private DXRadioGroup mUIRgrpPhaseControlRadioGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient8 : DXTestControl
    {
        
        public UIGSPanelControlClient8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIKobleønskeplanperiodWindow : DXWindow
    {
        
        public UIKobleønskeplanperiodWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Koble ønskeplan periode til baseplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainClient3 UIPnlMainClient
        {
            get
            {
                if ((this.mUIPnlMainClient == null))
                {
                    this.mUIPnlMainClient = new UIPnlMainClient3(this);
                }
                return this.mUIPnlMainClient;
            }
        }
        
        public UIGSPanelControlClient9 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient9(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainClient3 mUIPnlMainClient;
        
        private UIGSPanelControlClient9 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainClient3 : DXTestControl
    {
        
        public UIPnlMainClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UIGsLayoutControlMainCustom3 UIGsLayoutControlMainCustom
        {
            get
            {
                if ((this.mUIGsLayoutControlMainCustom == null))
                {
                    this.mUIGsLayoutControlMainCustom = new UIGsLayoutControlMainCustom3(this);
                }
                return this.mUIGsLayoutControlMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGsLayoutControlMainCustom3 mUIGsLayoutControlMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsLayoutControlMainCustom3 : DXTestControl
    {
        
        public UIGsLayoutControlMainCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsLayoutControlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNaLayoutGroup3 UILayoutControlGroupNaLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNaLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNaLayoutGroup = new UILayoutControlGroupNaLayoutGroup3(this);
                }
                return this.mUILayoutControlGroupNaLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNaLayoutGroup3 mUILayoutControlGroupNaLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNaLayoutGroup3 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNaLayoutGroup3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupName";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNeLayoutGroup3 UILayoutControlGroupNeLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNeLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNeLayoutGroup = new UILayoutControlGroupNeLayoutGroup3(this);
                }
                return this.mUILayoutControlGroupNeLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNeLayoutGroup3 mUILayoutControlGroupNeLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNeLayoutGroup3 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNeLayoutGroup3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupNewValues";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UILcMainInfoLayoutControlItem3 UILcMainInfoLayoutControlItem
        {
            get
            {
                if ((this.mUILcMainInfoLayoutControlItem == null))
                {
                    this.mUILcMainInfoLayoutControlItem = new UILcMainInfoLayoutControlItem3(this);
                }
                return this.mUILcMainInfoLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainInfoLayoutControlItem3 mUILcMainInfoLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILcMainInfoLayoutControlItem3 : DXBaseLayoutItem
    {
        
        public UILcMainInfoLayoutControlItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainInfoClient3 UIPnlMainInfoClient
        {
            get
            {
                if ((this.mUIPnlMainInfoClient == null))
                {
                    this.mUIPnlMainInfoClient = new UIPnlMainInfoClient3(this);
                }
                return this.mUIPnlMainInfoClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainInfoClient3 mUIPnlMainInfoClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainInfoClient3 : DXTestControl
    {
        
        public UIPnlMainInfoClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UIDrdBasePlanLookUpEdit UIDrdBasePlanLookUpEdit
        {
            get
            {
                if ((this.mUIDrdBasePlanLookUpEdit == null))
                {
                    this.mUIDrdBasePlanLookUpEdit = new UIDrdBasePlanLookUpEdit(this);
                }
                return this.mUIDrdBasePlanLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIDrdBasePlanLookUpEdit mUIDrdBasePlanLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDrdBasePlanLookUpEdit : DXLookUpEdit
    {
        
        public UIDrdBasePlanLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "drdBasePlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "drdBasePlanPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Koble ønskeplan periode til baseplan");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient9 : DXTestControl
    {
        
        public UIGSPanelControlClient9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Koble ønskeplan periode til baseplan");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow10 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow10()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel15 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel15(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel15 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel15 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom15 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom15(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom15 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom15 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList15 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList15(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList15 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList15 : DXTestControl
    {
        
        public UITcVisualizationTabList15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient15 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient15(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient15 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient15 : DXTestControl
    {
        
        public UITpFixedPaymentClient15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom30 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom30(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom30 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom30 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom15 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom15(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom15 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom15 : DXTestControl
    {
        
        public UIViewHost1Custom15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient15 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient15(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient15 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient15 : DXTestControl
    {
        
        public UIPcViewClient15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom31 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom31(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom31 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom31 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXButton UIHjelpButton
        {
            get
            {
                if ((this.mUIHjelpButton == null))
                {
                    this.mUIHjelpButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIHjelpButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnHelp";
                    this.mUIHjelpButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSHelpButton";
                    this.mUIHjelpButton.WindowTitles.Add("Arbeidsplan: Kopi av FTT Arbeidsplan. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIHjelpButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIHjelpButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanØnskeplanWindow : DXWindow
    {
        
        public UIArbeidsplanØnskeplanWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel16 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel16(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel16 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel16 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom16 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom16(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom16 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom16 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList16 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList16(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList16 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList16 : DXTestControl
    {
        
        public UITcVisualizationTabList16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient16 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient16(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient16 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient16 : DXTestControl
    {
        
        public UITpFixedPaymentClient16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom32 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom32(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom32 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom32 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom16 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom16(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom16 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom16 : DXTestControl
    {
        
        public UIViewHost1Custom16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient16 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient16(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient16 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient16 : DXTestControl
    {
        
        public UIPcViewClient16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom33 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom33(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom33 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom33 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid15 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid15(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        
        public DXButton UIOverførButton
        {
            get
            {
                if ((this.mUIOverførButton == null))
                {
                    this.mUIOverførButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnExport";
                    this.mUIOverførButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIOverførButton.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIOverførButton;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid15 mUIPgcCalculationResultPivotGrid;
        
        private DXButton mUIOverførButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid15 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem8PivotGridCell
        {
            get
            {
                if ((this.mUIItem8PivotGridCell == null))
                {
                    this.mUIItem8PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]0";
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem8PivotGridCell.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem8PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem42PivotGridCell
        {
            get
            {
                if ((this.mUIItem42PivotGridCell == null))
                {
                    this.mUIItem42PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem42PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem42PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem42PivotGridCell.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem42PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem20PivotGridCell
        {
            get
            {
                if ((this.mUIItem20PivotGridCell == null))
                {
                    this.mUIItem20PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem20PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]0";
                    this.mUIItem20PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem20PivotGridCell.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem20PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem8PivotGridCell;
        
        private DXPivotGridCell mUIItem42PivotGridCell;
        
        private DXPivotGridCell mUIItem20PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGatver66041952ASCLAvWindow1 : WinWindow
    {
        
        public UIGatver66041952ASCLAvWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Gat", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcMainPanelClient1 UIPcMainPanelClient
        {
            get
            {
                if ((this.mUIPcMainPanelClient == null))
                {
                    this.mUIPcMainPanelClient = new UIPcMainPanelClient1(this);
                }
                return this.mUIPcMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcMainPanelClient1 mUIPcMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcMainPanelClient1 : DXTestControl
    {
        
        public UIPcMainPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UITcPanListsTabList1 UITcPanListsTabList
        {
            get
            {
                if ((this.mUITcPanListsTabList == null))
                {
                    this.mUITcPanListsTabList = new UITcPanListsTabList1(this);
                }
                return this.mUITcPanListsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcPanListsTabList1 mUITcPanListsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcPanListsTabList1 : DXTestControl
    {
        
        public UITcPanListsTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcPanLists";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UITpWishPlanListClient1 UITpWishPlanListClient
        {
            get
            {
                if ((this.mUITpWishPlanListClient == null))
                {
                    this.mUITpWishPlanListClient = new UITpWishPlanListClient1(this);
                }
                return this.mUITpWishPlanListClient;
            }
        }
        
        public DXTestControl UIXtraTabControlHeaderTabPage
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage == null))
                {
                    this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "tcPanListsPageHeader0";
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UITpWishPlanListClient1 mUITpWishPlanListClient;
        
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpWishPlanListClient1 : DXTestControl
    {
        
        public UITpWishPlanListClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpWishPlanList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UIWishPlanListCustom1 UIWishPlanListCustom
        {
            get
            {
                if ((this.mUIWishPlanListCustom == null))
                {
                    this.mUIWishPlanListCustom = new UIWishPlanListCustom1(this);
                }
                return this.mUIWishPlanListCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWishPlanListCustom1 mUIWishPlanListCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWishPlanListCustom1 : DXTestControl
    {
        
        public UIWishPlanListCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "wishPlanList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WishPlanList";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl2Client1 UIGsPanelControl2Client
        {
            get
            {
                if ((this.mUIGsPanelControl2Client == null))
                {
                    this.mUIGsPanelControl2Client = new UIGsPanelControl2Client1(this);
                }
                return this.mUIGsPanelControl2Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl2Client1 mUIGsPanelControl2Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl2Client1 : DXTestControl
    {
        
        public UIGsPanelControl2Client1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UIRibbonControl1Ribbon1 UIRibbonControl1Ribbon
        {
            get
            {
                if ((this.mUIRibbonControl1Ribbon == null))
                {
                    this.mUIRibbonControl1Ribbon = new UIRibbonControl1Ribbon1(this);
                }
                return this.mUIRibbonControl1Ribbon;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonControl1Ribbon1 mUIRibbonControl1Ribbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonControl1Ribbon1 : DXRibbon
    {
        
        public UIRibbonControl1Ribbon1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UIRpHomeRibbonPage1 UIRpHomeRibbonPage
        {
            get
            {
                if ((this.mUIRpHomeRibbonPage == null))
                {
                    this.mUIRpHomeRibbonPage = new UIRpHomeRibbonPage1(this);
                }
                return this.mUIRpHomeRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpHomeRibbonPage1 mUIRpHomeRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpHomeRibbonPage1 : DXRibbonPage
    {
        
        public UIRpHomeRibbonPage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpHome";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public UIRpgPeriodRibbonPageGroup1 UIRpgPeriodRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPeriodRibbonPageGroup == null))
                {
                    this.mUIRpgPeriodRibbonPageGroup = new UIRpgPeriodRibbonPageGroup1(this);
                }
                return this.mUIRpgPeriodRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPeriodRibbonPageGroup1 mUIRpgPeriodRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPeriodRibbonPageGroup1 : DXRibbonPageGroup
    {
        
        public UIRpgPeriodRibbonPageGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPeriod";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIEndretilfase2RibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIEndretilfase2RibbonBaseButtonItem == null))
                {
                    this.mUIEndretilfase2RibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIEndretilfase2RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiChangeToPhase2";
                    this.mUIEndretilfase2RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIEndretilfase2RibbonBaseButtonItem.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
                    #endregion
                }
                return this.mUIEndretilfase2RibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIEndretilfase3RibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIEndretilfase3RibbonBaseButtonItem == null))
                {
                    this.mUIEndretilfase3RibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIEndretilfase3RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiChangeToPhase3";
                    this.mUIEndretilfase3RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIEndretilfase3RibbonBaseButtonItem.WindowTitles.Add("Gat ver. 6.6.0.41952 - (ASCL - Avd: 5150-Faste tillegg) - Vaktbok");
                    #endregion
                }
                return this.mUIEndretilfase3RibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIEndretilfase2RibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIEndretilfase3RibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanØnskeplanWindow1 : DXWindow
    {
        
        public UIArbeidsplanØnskeplanWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient6 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient6(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient6 mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient6 : DXTestControl
    {
        
        public UIPnlRosterPlanClient6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                    " av deg])");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable6 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable6(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable6 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable6 : DXGrid
    {
        
        public UIGcRosterPlanTable6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                    " av deg])");
            #endregion
        }
        
        #region Properties
        public DXCell UIVonSudowMaxCell
        {
            get
            {
                if ((this.mUIVonSudowMaxCell == null))
                {
                    this.mUIVonSudowMaxCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVonSudowMaxCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_EmployeeName";
                    this.mUIVonSudowMaxCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVonSudowMaxCell.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIVonSudowMaxCell;
            }
        }
        
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_1";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit == null))
                {
                    this.mUIRow0ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_1";
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIDCell
        {
            get
            {
                if ((this.mUIDCell == null))
                {
                    this.mUIDCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_20";
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIDCell;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_20";
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UINCell
        {
            get
            {
                if ((this.mUINCell == null))
                {
                    this.mUINCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_9";
                    this.mUINCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUINCell;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_9";
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UINCell1
        {
            get
            {
                if ((this.mUINCell1 == null))
                {
                    this.mUINCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_10";
                    this.mUINCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell1.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUINCell1;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit11
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit11 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit11 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_10";
                    this.mUIRow0ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit11.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit11;
            }
        }
        
        public DXCell UINCell2
        {
            get
            {
                if ((this.mUINCell2 == null))
                {
                    this.mUINCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_11";
                    this.mUINCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell2.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUINCell2;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit21
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit21 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit21 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_11";
                    this.mUIRow0ColumnRosterCellEdit21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit21.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit21;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_10";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit == null))
                {
                    this.mUIRow1ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_10";
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_11";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_11";
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_20";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_20";
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan: Ønskeplan for Kopi av FFT Baseplan (Redigeringsmodus [Planen er låst" +
                            " av deg])");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIVonSudowMaxCell;
        
        private DXCell mUIACell;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit;
        
        private DXCell mUIDCell;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit1;
        
        private DXCell mUINCell;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit2;
        
        private DXCell mUINCell1;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit11;
        
        private DXCell mUINCell2;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit21;
        
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit;
        
        private DXCell mUIItemCell1;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell2;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanFTTUkeregWindow : DXWindow
    {
        
        public UIArbeidsplanFTTUkeregWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRcMenuRibbon5 UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon5(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        #endregion
        
        #region Fields
        private UIRcMenuRibbon5 mUIRcMenuRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRcMenuRibbon5 : DXRibbon
    {
        
        public UIRcMenuRibbon5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: FTT Ukeregler KP (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpPlanRibbonPage5 UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage5(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpPlanRibbonPage5 mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpPlanRibbonPage5 : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: FTT Ukeregler KP (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpgPlanCopyRosterRibbonPageGroup3 UIRpgPlanCopyRosterRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPlanCopyRosterRibbonPageGroup == null))
                {
                    this.mUIRpgPlanCopyRosterRibbonPageGroup = new UIRpgPlanCopyRosterRibbonPageGroup3(this);
                }
                return this.mUIRpgPlanCopyRosterRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPlanCopyRosterRibbonPageGroup3 mUIRpgPlanCopyRosterRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPlanCopyRosterRibbonPageGroup3 : DXRibbonPageGroup
    {
        
        public UIRpgPlanCopyRosterRibbonPageGroup3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPlanCopyRoster";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: FTT Ukeregler KP (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UINykalenderplanRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUINykalenderplanRibbonBaseButtonItem == null))
                {
                    this.mUINykalenderplanRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUINykalenderplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCopyRosterPlan";
                    this.mUINykalenderplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUINykalenderplanRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: FTT Ukeregler KP (Planen er låst av deg)");
                    #endregion
                }
                return this.mUINykalenderplanRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUINykalenderplanRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow11 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow11()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel17 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel17(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        
        public UIPnlRosterPlanClient7 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient7(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIRcMenuRibbon6 UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon6(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel17 mUIDpnlVisualizationDockPanel;
        
        private UIPnlRosterPlanClient7 mUIPnlRosterPlanClient;
        
        private UIRcMenuRibbon6 mUIRcMenuRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel17 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom17 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom17(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom17 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom17 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList17 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList17(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList17 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList17 : DXTestControl
    {
        
        public UITcVisualizationTabList17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient17 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient17(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient17 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient17 : DXTestControl
    {
        
        public UITpFixedPaymentClient17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom34 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom34(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom34 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom34 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom17 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom17(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom17 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom17 : DXTestControl
    {
        
        public UIViewHost1Custom17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient17 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient17(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient17 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient17 : DXTestControl
    {
        
        public UIPcViewClient17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom35 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom35(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom35 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom35 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid16 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid16(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid16 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid16 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIPersbrandtMikaelPivotGridFieldValue
        {
            get
            {
                if ((this.mUIPersbrandtMikaelPivotGridFieldValue == null))
                {
                    this.mUIPersbrandtMikaelPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIPersbrandtMikaelPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]0";
                    this.mUIPersbrandtMikaelPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIPersbrandtMikaelPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIPersbrandtMikaelPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem8PivotGridCell
        {
            get
            {
                if ((this.mUIItem8PivotGridCell == null))
                {
                    this.mUIItem8PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]0";
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem8PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem8PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIRheborgJohanPivotGridFieldValue
        {
            get
            {
                if ((this.mUIRheborgJohanPivotGridFieldValue == null))
                {
                    this.mUIRheborgJohanPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIRheborgJohanPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]2";
                    this.mUIRheborgJohanPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIRheborgJohanPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIRheborgJohanPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem002PivotGridCell
        {
            get
            {
                if ((this.mUIItem002PivotGridCell == null))
                {
                    this.mUIItem002PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem002PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]2";
                    this.mUIItem002PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem002PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem002PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIGustavssonRobertPivotGridFieldValue
        {
            get
            {
                if ((this.mUIGustavssonRobertPivotGridFieldValue == null))
                {
                    this.mUIGustavssonRobertPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]1";
                    this.mUIGustavssonRobertPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIGustavssonRobertPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIGustavssonRobertPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem2325PivotGridCell
        {
            get
            {
                if ((this.mUIItem2325PivotGridCell == null))
                {
                    this.mUIItem2325PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2325PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem2325PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem2325PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem2325PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem1553PivotGridCell
        {
            get
            {
                if ((this.mUIItem1553PivotGridCell == null))
                {
                    this.mUIItem1553PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1553PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]1";
                    this.mUIItem1553PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem1553PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem1553PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem3125PivotGridCell
        {
            get
            {
                if ((this.mUIItem3125PivotGridCell == null))
                {
                    this.mUIItem3125PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem3125PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem3125PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem3125PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem3125PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem6PivotGridCell
        {
            get
            {
                if ((this.mUIItem6PivotGridCell == null))
                {
                    this.mUIItem6PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]0";
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem6PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem6PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIRheborgJohanPivotGridFieldValue1
        {
            get
            {
                if ((this.mUIRheborgJohanPivotGridFieldValue1 == null))
                {
                    this.mUIRheborgJohanPivotGridFieldValue1 = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIRheborgJohanPivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]3";
                    this.mUIRheborgJohanPivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIRheborgJohanPivotGridFieldValue1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIRheborgJohanPivotGridFieldValue1;
            }
        }
        
        public DXPivotGridCell UIItem2002PivotGridCell
        {
            get
            {
                if ((this.mUIItem2002PivotGridCell == null))
                {
                    this.mUIItem2002PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2002PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]3";
                    this.mUIItem2002PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem2002PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem2002PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem2PivotGridCell
        {
            get
            {
                if ((this.mUIItem2PivotGridCell == null))
                {
                    this.mUIItem2PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]4";
                    this.mUIItem2PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem2PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem2PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem3153PivotGridCell
        {
            get
            {
                if ((this.mUIItem3153PivotGridCell == null))
                {
                    this.mUIItem3153PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem3153PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]2";
                    this.mUIItem3153PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem3153PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem3153PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem3125PivotGridCell1
        {
            get
            {
                if ((this.mUIItem3125PivotGridCell1 == null))
                {
                    this.mUIItem3125PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem3125PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]3[Row]2";
                    this.mUIItem3125PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem3125PivotGridCell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem3125PivotGridCell1;
            }
        }
        
        public DXPivotGridFieldValue UIHaberPeterPivotGridFieldValue
        {
            get
            {
                if ((this.mUIHaberPeterPivotGridFieldValue == null))
                {
                    this.mUIHaberPeterPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIHaberPeterPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]4";
                    this.mUIHaberPeterPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIHaberPeterPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIHaberPeterPivotGridFieldValue;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIPersbrandtMikaelPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem8PivotGridCell;
        
        private DXPivotGridFieldValue mUIRheborgJohanPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem002PivotGridCell;
        
        private DXPivotGridFieldValue mUIGustavssonRobertPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem2325PivotGridCell;
        
        private DXPivotGridCell mUIItem1553PivotGridCell;
        
        private DXPivotGridCell mUIItem3125PivotGridCell;
        
        private DXPivotGridCell mUIItem6PivotGridCell;
        
        private DXPivotGridFieldValue mUIRheborgJohanPivotGridFieldValue1;
        
        private DXPivotGridCell mUIItem2002PivotGridCell;
        
        private DXPivotGridCell mUIItem2PivotGridCell;
        
        private DXPivotGridCell mUIItem3153PivotGridCell;
        
        private DXPivotGridCell mUIItem3125PivotGridCell1;
        
        private DXPivotGridFieldValue mUIHaberPeterPivotGridFieldValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient7 : DXTestControl
    {
        
        public UIPnlRosterPlanClient7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable7 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable7(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable7 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable7 : DXGrid
    {
        
        public UIGcRosterPlanTable7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXCell UIKK1Cell
        {
            get
            {
                if ((this.mUIKK1Cell == null))
                {
                    this.mUIKK1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKK1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIKK1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKK1Cell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIKK1Cell;
            }
        }
        
        public DXCell UIGustavssonRobertCell
        {
            get
            {
                if ((this.mUIGustavssonRobertCell == null))
                {
                    this.mUIGustavssonRobertCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]Col_EmployeeName";
                    this.mUIGustavssonRobertCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGustavssonRobertCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIGustavssonRobertCell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIGustavssonRobertCell1
        {
            get
            {
                if ((this.mUIGustavssonRobertCell1 == null))
                {
                    this.mUIGustavssonRobertCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGustavssonRobertCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]Col_EmployeeName";
                    this.mUIGustavssonRobertCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGustavssonRobertCell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIGustavssonRobertCell1;
            }
        }
        
        public DXCell UIPersbrandtMikaelCell
        {
            get
            {
                if ((this.mUIPersbrandtMikaelCell == null))
                {
                    this.mUIPersbrandtMikaelCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIPersbrandtMikaelCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_EmployeeName";
                    this.mUIPersbrandtMikaelCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIPersbrandtMikaelCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIPersbrandtMikaelCell;
            }
        }
        
        public DXCell UIDCell
        {
            get
            {
                if ((this.mUIDCell == null))
                {
                    this.mUIDCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIDCell;
            }
        }
        
        public DXCell UIDCell1
        {
            get
            {
                if ((this.mUIDCell1 == null))
                {
                    this.mUIDCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_0";
                    this.mUIDCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIDCell1;
            }
        }
        
        public DXCell UIRheborgJohanCell
        {
            get
            {
                if ((this.mUIRheborgJohanCell == null))
                {
                    this.mUIRheborgJohanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRheborgJohanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]Col_EmployeeName";
                    this.mUIRheborgJohanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRheborgJohanCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIRheborgJohanCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_0";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIKK1Cell1
        {
            get
            {
                if ((this.mUIKK1Cell1 == null))
                {
                    this.mUIKK1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKK1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIKK1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKK1Cell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIKK1Cell1;
            }
        }
        
        public DXCell UIKKHCell
        {
            get
            {
                if ((this.mUIKKHCell == null))
                {
                    this.mUIKKHCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKKHCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_6";
                    this.mUIKKHCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKKHCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIKKHCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIKK1Cell;
        
        private DXCell mUIGustavssonRobertCell;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIGustavssonRobertCell1;
        
        private DXCell mUIPersbrandtMikaelCell;
        
        private DXCell mUIDCell;
        
        private DXCell mUIDCell1;
        
        private DXCell mUIRheborgJohanCell;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIKK1Cell1;
        
        private DXCell mUIKKHCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRcMenuRibbon6 : DXRibbon
    {
        
        public UIRcMenuRibbon6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpPlanRibbonPage6 UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage6(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpPlanRibbonPage6 mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpPlanRibbonPage6 : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpgPlanRibbonPageGroup1 UIRpgPlanRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPlanRibbonPageGroup == null))
                {
                    this.mUIRpgPlanRibbonPageGroup = new UIRpgPlanRibbonPageGroup1(this);
                }
                return this.mUIRpgPlanRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPlanRibbonPageGroup1 mUIRpgPlanRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPlanRibbonPageGroup1 : DXRibbonPageGroup
    {
        
        public UIRpgPlanRibbonPageGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIOppsettRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIOppsettRibbonBaseButtonItem == null))
                {
                    this.mUIOppsettRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIOppsettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnRosterSetup";
                    this.mUIOppsettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIOppsettRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIOppsettRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIAnsatteRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIAnsatteRibbonBaseButtonItem == null))
                {
                    this.mUIAnsatteRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIAnsatteRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEmployees";
                    this.mUIAnsatteRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIAnsatteRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIAnsatteRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIOppsettRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIAnsatteRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu3 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu3(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu3 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu3 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public UILeggtillinjefrastillMenuItem UILeggtillinjefrastillMenuItem
        {
            get
            {
                if ((this.mUILeggtillinjefrastillMenuItem == null))
                {
                    this.mUILeggtillinjefrastillMenuItem = new UILeggtillinjefrastillMenuItem(this);
                }
                return this.mUILeggtillinjefrastillMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UILeggtillinjefrastillMenuItem mUILeggtillinjefrastillMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeggtillinjefrastillMenuItem : DXMenuItem
    {
        
        public UILeggtillinjefrastillMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink1MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink1MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink1MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink1MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink1MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow12 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow12()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient8 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient8(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient8 mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient8 : DXTestControl
    {
        
        public UIPnlRosterPlanClient8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                    "");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable8 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable8(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable8 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable8 : DXGrid
    {
        
        public UIGcRosterPlanTable8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                    "");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_3";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit == null))
                {
                    this.mUIRow2ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_3";
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_11";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_11";
                    this.mUIRow2ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit1;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit == null))
                {
                    this.mUIRow3ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_19";
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_4";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit == null))
                {
                    this.mUIRow4ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_4";
                    this.mUIRow4ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_21";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit == null))
                {
                    this.mUIRow1ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_21";
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_22";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_22";
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell21
        {
            get
            {
                if ((this.mUIItemCell21 == null))
                {
                    this.mUIItemCell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_26";
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell21.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell21;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_26";
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell31
        {
            get
            {
                if ((this.mUIItemCell31 == null))
                {
                    this.mUIItemCell31 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_27";
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell31.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell31;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_27";
                    this.mUIRow1ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_0";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_3";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXTextEdit UIRow7ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow7ColumnRosterCellEdit == null))
                {
                    this.mUIRow7ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow7ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]7[Column]RosterCell_0";
                    this.mUIRow7ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow7ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow7ColumnRosterCellEdit;
            }
        }
        
        public DXTextEdit UIRow7ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow7ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow7ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow7ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]7[Column]RosterCell_1";
                    this.mUIRow7ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow7ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow7ColumnRosterCellEdit1;
            }
        }
        
        public DXTextEdit UIRow7ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow7ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow7ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow7ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]7[Column]RosterCell_2";
                    this.mUIRow7ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow7ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow7ColumnRosterCellEdit2;
            }
        }
        
        public DXTextEdit UIRow7ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow7ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow7ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow7ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]7[Column]RosterCell_3";
                    this.mUIRow7ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow7ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow7ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_4";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXTextEdit UIRow7ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow7ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow7ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow7ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]7[Column]RosterCell_4";
                    this.mUIRow7ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow7ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow7ColumnRosterCellEdit4;
            }
        }
        
        public DXCell UIItemCell22
        {
            get
            {
                if ((this.mUIItemCell22 == null))
                {
                    this.mUIItemCell22 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_7";
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell22.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell22;
            }
        }
        
        public DXCell UIItemCell32
        {
            get
            {
                if ((this.mUIItemCell32 == null))
                {
                    this.mUIItemCell32 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell32.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_11";
                    this.mUIItemCell32.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell32.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell32;
            }
        }
        
        public DXTextEdit UIRow7ColumnRosterCellEdit11
        {
            get
            {
                if ((this.mUIRow7ColumnRosterCellEdit11 == null))
                {
                    this.mUIRow7ColumnRosterCellEdit11 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow7ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]7[Column]RosterCell_7";
                    this.mUIRow7ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow7ColumnRosterCellEdit11.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow7ColumnRosterCellEdit11;
            }
        }
        
        public DXCell UIItemCell41
        {
            get
            {
                if ((this.mUIItemCell41 == null))
                {
                    this.mUIItemCell41 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell41.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]RosterCell_14";
                    this.mUIItemCell41.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell41.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell41;
            }
        }
        
        public DXCell UIItemCell51
        {
            get
            {
                if ((this.mUIItemCell51 == null))
                {
                    this.mUIItemCell51 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell51.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]RosterCell_18";
                    this.mUIItemCell51.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell51.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell51;
            }
        }
        
        public DXTextEdit UIRow8ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow8ColumnRosterCellEdit == null))
                {
                    this.mUIRow8ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow8ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]8[Column]RosterCell_14";
                    this.mUIRow8ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow8ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow8ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]RosterCell_21";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]RosterCell_25";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXTextEdit UIRow8ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow8ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow8ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow8ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]8[Column]RosterCell_21";
                    this.mUIRow8ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow8ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIRow8ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_2";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler KP. (Redigeringsmodus [Planen er låst av deg])" +
                            "");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit;
        
        private DXCell mUIItemCell1;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit1;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit;
        
        private DXCell mUIItemCell2;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit;
        
        private DXCell mUIItemCell3;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit;
        
        private DXCell mUIItemCell11;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell21;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell31;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit3;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell12;
        
        private DXTextEdit mUIRow7ColumnRosterCellEdit;
        
        private DXTextEdit mUIRow7ColumnRosterCellEdit1;
        
        private DXTextEdit mUIRow7ColumnRosterCellEdit2;
        
        private DXTextEdit mUIRow7ColumnRosterCellEdit3;
        
        private DXCell mUIItemCell5;
        
        private DXTextEdit mUIRow7ColumnRosterCellEdit4;
        
        private DXCell mUIItemCell22;
        
        private DXCell mUIItemCell32;
        
        private DXTextEdit mUIRow7ColumnRosterCellEdit11;
        
        private DXCell mUIItemCell41;
        
        private DXCell mUIItemCell51;
        
        private DXTextEdit mUIRow8ColumnRosterCellEdit;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell7;
        
        private DXTextEdit mUIRow8ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell8;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : DXWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Linjeinnstillinger - [Gustavsson, Robert]";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
            #endregion
        }
        
        #region Properties
        public UIGSPanelControlClient10 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient10(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        
        public UIGsPanelControl2Client2 UIGsPanelControl2Client
        {
            get
            {
                if ((this.mUIGsPanelControl2Client == null))
                {
                    this.mUIGsPanelControl2Client = new UIGsPanelControl2Client2(this);
                }
                return this.mUIGsPanelControl2Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGSPanelControlClient10 mUIGSPanelControlClient;
        
        private UIGsPanelControl2Client2 mUIGsPanelControl2Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient10 : DXTestControl
    {
        
        public UIGSPanelControlClient10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UIGSLookUpEditLookUpEdit
        {
            get
            {
                if ((this.mUIGSLookUpEditLookUpEdit == null))
                {
                    this.mUIGSLookUpEditLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIGSLookUpEditLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leAvailablePositionCategories";
                    this.mUIGSLookUpEditLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    #endregion
                }
                return this.mUIGSLookUpEditLookUpEdit;
            }
        }
        
        public DXTextEdit UIENumber3Edit
        {
            get
            {
                if ((this.mUIENumber3Edit == null))
                {
                    this.mUIENumber3Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber3Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[3]";
                    this.mUIENumber3Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber3Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber3Edit.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIENumber3Edit;
            }
        }
        
        public DXTextEdit UIEInternalPositionNumEdit
        {
            get
            {
                if ((this.mUIEInternalPositionNumEdit == null))
                {
                    this.mUIEInternalPositionNumEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIEInternalPositionNumEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eInternalPositionNumber";
                    this.mUIEInternalPositionNumEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIEInternalPositionNumEdit.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIEInternalPositionNumEdit;
            }
        }
        
        public UILeAvailableRulesetsLookUpEdit1 UILeAvailableRulesetsLookUpEdit
        {
            get
            {
                if ((this.mUILeAvailableRulesetsLookUpEdit == null))
                {
                    this.mUILeAvailableRulesetsLookUpEdit = new UILeAvailableRulesetsLookUpEdit1(this);
                }
                return this.mUILeAvailableRulesetsLookUpEdit;
            }
        }
        
        public UIGSGroupControlClient UIGSGroupControlClient
        {
            get
            {
                if ((this.mUIGSGroupControlClient == null))
                {
                    this.mUIGSGroupControlClient = new UIGSGroupControlClient(this);
                }
                return this.mUIGSGroupControlClient;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUIGSLookUpEditLookUpEdit;
        
        private DXTextEdit mUIENumber3Edit;
        
        private DXTextEdit mUIEInternalPositionNumEdit;
        
        private UILeAvailableRulesetsLookUpEdit1 mUILeAvailableRulesetsLookUpEdit;
        
        private UIGSGroupControlClient mUIGSGroupControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeAvailableRulesetsLookUpEdit1 : DXLookUpEdit
    {
        
        public UILeAvailableRulesetsLookUpEdit1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "leAvailableRulesets";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "leAvailableRulesetsPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSGroupControlClient : DXTestControl
    {
        
        public UIGSGroupControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcOvertime";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
            #endregion
        }
        
        #region Properties
        public UIGSLookUpEditLookUpEdit UIGSLookUpEditLookUpEdit
        {
            get
            {
                if ((this.mUIGSLookUpEditLookUpEdit == null))
                {
                    this.mUIGSLookUpEditLookUpEdit = new UIGSLookUpEditLookUpEdit(this);
                }
                return this.mUIGSLookUpEditLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIGSLookUpEditLookUpEdit mUIGSLookUpEditLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSLookUpEditLookUpEdit : DXLookUpEdit
    {
        
        public UIGSLookUpEditLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "drdToSporadic";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "drdToSporadicPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl2Client2 : DXTestControl
    {
        
        public UIGsPanelControl2Client2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Linjeinnstillinger - [Gustavsson, Robert]");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu4 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu4(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu4 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu4 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuItem UILeggtilblanklinjefraMenuItem
        {
            get
            {
                if ((this.mUILeggtilblanklinjefraMenuItem == null))
                {
                    this.mUILeggtilblanklinjefraMenuItem = new DXMenuItem(this);
                    #region Search Criteria
                    this.mUILeggtilblanklinjefraMenuItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[1]";
                    this.mUILeggtilblanklinjefraMenuItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
                    #endregion
                }
                return this.mUILeggtilblanklinjefraMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuItem mUILeggtilblanklinjefraMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UILeggtilblanklinjefraMenuItem1 UILeggtilblanklinjefraMenuItem
        {
            get
            {
                if ((this.mUILeggtilblanklinjefraMenuItem == null))
                {
                    this.mUILeggtilblanklinjefraMenuItem = new UILeggtilblanklinjefraMenuItem1(this);
                }
                return this.mUILeggtilblanklinjefraMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UILeggtilblanklinjefraMenuItem1 mUILeggtilblanklinjefraMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeggtilblanklinjefraMenuItem1 : WinMenuItem
    {
        
        public UILeggtilblanklinjefraMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Legg til blank linje fra avdeling";
            #endregion
        }
        
        //#region Properties
        //public WinButton UIItem5150FastetilleggButton
        //{
        //    get
        //    {
        //        if ((this.mUIItem5150FastetilleggButton == null))
        //        {
        //            this.mUIItem5150FastetilleggButton = new WinButton(this);
        //            #region Search Criteria
        //            this.mUIItem5150FastetilleggButton.SearchProperties[WinButton.PropertyNames.Name] = "5150 - Faste tillegg";
        //            this.mUIItem5150FastetilleggButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
        //            #endregion
        //        }
        //        return this.mUIItem5150FastetilleggButton;
        //    }
        //}
        //#endregion
        
        //#region Fields
        //private WinButton mUIItem5150FastetilleggButton;
        //#endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu5 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu5(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu5 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu5 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public UILeggtillinjefrastillMenuItem1 UILeggtillinjefrastillMenuItem
        {
            get
            {
                if ((this.mUILeggtillinjefrastillMenuItem == null))
                {
                    this.mUILeggtillinjefrastillMenuItem = new UILeggtillinjefrastillMenuItem1(this);
                }
                return this.mUILeggtillinjefrastillMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UILeggtillinjefrastillMenuItem1 mUILeggtillinjefrastillMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeggtillinjefrastillMenuItem1 : DXMenuItem
    {
        
        public UILeggtillinjefrastillMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink2MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink2MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink2MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink2MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[2]";
                    this.mUIBarButtonItemLink2MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink2MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink2MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow8 : WinWindow
    {
        
        public UIItemWindow8()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu6 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu6(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu6 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu6 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public UILeggtillinjefrastillMenuItem2 UILeggtillinjefrastillMenuItem
        {
            get
            {
                if ((this.mUILeggtillinjefrastillMenuItem == null))
                {
                    this.mUILeggtillinjefrastillMenuItem = new UILeggtillinjefrastillMenuItem2(this);
                }
                return this.mUILeggtillinjefrastillMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UILeggtillinjefrastillMenuItem2 mUILeggtillinjefrastillMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeggtillinjefrastillMenuItem2 : DXMenuItem
    {
        
        public UILeggtillinjefrastillMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink1MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink1MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink1MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink1MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink1MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILinjeinnstillingerPeWindow : DXWindow
    {
        
        public UILinjeinnstillingerPeWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Linjeinnstillinger", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Persbrandt, Mikael]");
            this.WindowTitles.Add("Linjeinnstillinger");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client4 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client4(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        
        public UIGsPanelControl2Client3 UIGsPanelControl2Client
        {
            get
            {
                if ((this.mUIGsPanelControl2Client == null))
                {
                    this.mUIGsPanelControl2Client = new UIGsPanelControl2Client3(this);
                }
                return this.mUIGsPanelControl2Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client4 mUIGsPanelControl3Client;
        
        private UIGsPanelControl2Client3 mUIGsPanelControl2Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl3Client4 : DXTestControl
    {
        
        public UIGsPanelControl3Client4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Persbrandt, Mikael]");
            #endregion
        }
        
        #region Properties
        public UIGcAvailabilityPeriodClient1 UIGcAvailabilityPeriodClient
        {
            get
            {
                if ((this.mUIGcAvailabilityPeriodClient == null))
                {
                    this.mUIGcAvailabilityPeriodClient = new UIGcAvailabilityPeriodClient1(this);
                }
                return this.mUIGcAvailabilityPeriodClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAvailabilityPeriodClient1 mUIGcAvailabilityPeriodClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcAvailabilityPeriodClient1 : DXTestControl
    {
        
        public UIGcAvailabilityPeriodClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAvailabilityPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Persbrandt, Mikael]");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkAvailabilityPerioCheckBox
        {
            get
            {
                if ((this.mUIChkAvailabilityPerioCheckBox == null))
                {
                    this.mUIChkAvailabilityPerioCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkAvailabilityPerioCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkAvailabilityPeriodsDefined";
                    this.mUIChkAvailabilityPerioCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkAvailabilityPerioCheckBox.WindowTitles.Add("Linjeinnstillinger - [Persbrandt, Mikael]");
                    #endregion
                }
                return this.mUIChkAvailabilityPerioCheckBox;
            }
        }
        
        public DXButton UINYButton
        {
            get
            {
                if ((this.mUINYButton == null))
                {
                    this.mUINYButton = new DXButton(this);
                    #region Search Criteria
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnNewAvPeriod";
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUINYButton.WindowTitles.Add("Linjeinnstillinger - [Persbrandt, Mikael]");
                    #endregion
                }
                return this.mUINYButton;
            }
        }
        
        public DXButton UIEndreButton
        {
            get
            {
                if ((this.mUIEndreButton == null))
                {
                    this.mUIEndreButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIEndreButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditAvPeriod";
                    this.mUIEndreButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIEndreButton.WindowTitles.Add("Linjeinnstillinger - [Persbrandt, Mikael]");
                    #endregion
                }
                return this.mUIEndreButton;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkAvailabilityPerioCheckBox;
        
        private DXButton mUINYButton;
        
        private DXButton mUIEndreButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl2Client3 : DXTestControl
    {
        
        public UIGsPanelControl2Client3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Persbrandt, Mikael]");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Linjeinnstillinger - [Persbrandt, Mikael]");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILinjeinnstillingerRhWindow : DXWindow
    {
        
        public UILinjeinnstillingerRhWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Linjeinnstillinger", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Rheborg, Johan]");
            this.WindowTitles.Add("Linjeinnstillinger");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client5 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client5(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        
        public UIGsPanelControl2Client4 UIGsPanelControl2Client
        {
            get
            {
                if ((this.mUIGsPanelControl2Client == null))
                {
                    this.mUIGsPanelControl2Client = new UIGsPanelControl2Client4(this);
                }
                return this.mUIGsPanelControl2Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client5 mUIGsPanelControl3Client;
        
        private UIGsPanelControl2Client4 mUIGsPanelControl2Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl3Client5 : DXTestControl
    {
        
        public UIGsPanelControl3Client5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Rheborg, Johan]");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIENumber2Edit
        {
            get
            {
                if ((this.mUIENumber2Edit == null))
                {
                    this.mUIENumber2Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber2Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[2]";
                    this.mUIENumber2Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber2Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber2Edit.WindowTitles.Add("Linjeinnstillinger - [Rheborg, Johan]");
                    #endregion
                }
                return this.mUIENumber2Edit;
            }
        }
        
        public UIGcAvailabilityPeriodClient2 UIGcAvailabilityPeriodClient
        {
            get
            {
                if ((this.mUIGcAvailabilityPeriodClient == null))
                {
                    this.mUIGcAvailabilityPeriodClient = new UIGcAvailabilityPeriodClient2(this);
                }
                return this.mUIGcAvailabilityPeriodClient;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIENumber2Edit;
        
        private UIGcAvailabilityPeriodClient2 mUIGcAvailabilityPeriodClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcAvailabilityPeriodClient2 : DXTestControl
    {
        
        public UIGcAvailabilityPeriodClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAvailabilityPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Rheborg, Johan]");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkAvailabilityPerioCheckBox
        {
            get
            {
                if ((this.mUIChkAvailabilityPerioCheckBox == null))
                {
                    this.mUIChkAvailabilityPerioCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkAvailabilityPerioCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkAvailabilityPeriodsDefined";
                    this.mUIChkAvailabilityPerioCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkAvailabilityPerioCheckBox.WindowTitles.Add("Linjeinnstillinger - [Rheborg, Johan]");
                    #endregion
                }
                return this.mUIChkAvailabilityPerioCheckBox;
            }
        }
        
        public DXButton UINYButton
        {
            get
            {
                if ((this.mUINYButton == null))
                {
                    this.mUINYButton = new DXButton(this);
                    #region Search Criteria
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnNewAvPeriod";
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUINYButton.WindowTitles.Add("Linjeinnstillinger - [Rheborg, Johan]");
                    #endregion
                }
                return this.mUINYButton;
            }
        }
        
        public DXButton UIEndreButton
        {
            get
            {
                if ((this.mUIEndreButton == null))
                {
                    this.mUIEndreButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIEndreButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditAvPeriod";
                    this.mUIEndreButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIEndreButton.WindowTitles.Add("Linjeinnstillinger - [Rheborg, Johan]");
                    #endregion
                }
                return this.mUIEndreButton;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkAvailabilityPerioCheckBox;
        
        private DXButton mUINYButton;
        
        private DXButton mUIEndreButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl2Client4 : DXTestControl
    {
        
        public UIGsPanelControl2Client4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Rheborg, Johan]");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Linjeinnstillinger - [Rheborg, Johan]");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow9 : WinWindow
    {
        
        public UIItemWindow9()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu7 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu7(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu7 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu7 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public UILeggtillinjefrastillMenuItem3 UILeggtillinjefrastillMenuItem
        {
            get
            {
                if ((this.mUILeggtillinjefrastillMenuItem == null))
                {
                    this.mUILeggtillinjefrastillMenuItem = new UILeggtillinjefrastillMenuItem3(this);
                }
                return this.mUILeggtillinjefrastillMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UILeggtillinjefrastillMenuItem3 mUILeggtillinjefrastillMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeggtillinjefrastillMenuItem3 : DXMenuItem
    {
        
        public UILeggtillinjefrastillMenuItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink1MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink1MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink1MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink1MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink1MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanoppsettWindow : DXWindow
    {
        
        public UIArbeidsplanoppsettWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplanoppsett";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIGsTabControlTabList UIGsTabControlTabList
        {
            get
            {
                if ((this.mUIGsTabControlTabList == null))
                {
                    this.mUIGsTabControlTabList = new UIGsTabControlTabList(this);
                }
                return this.mUIGsTabControlTabList;
            }
        }
        
        public UIPnlButtonsClient1 UIPnlButtonsClient
        {
            get
            {
                if ((this.mUIPnlButtonsClient == null))
                {
                    this.mUIPnlButtonsClient = new UIPnlButtonsClient1(this);
                }
                return this.mUIPnlButtonsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGsTabControlTabList mUIGsTabControlTabList;
        
        private UIPnlButtonsClient1 mUIPnlButtonsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsTabControlTabList : DXTestControl
    {
        
        public UIGsTabControlTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsTabControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UITabPersonGroupRosterClient UITabPersonGroupRosterClient
        {
            get
            {
                if ((this.mUITabPersonGroupRosterClient == null))
                {
                    this.mUITabPersonGroupRosterClient = new UITabPersonGroupRosterClient(this);
                }
                return this.mUITabPersonGroupRosterClient;
            }
        }
        #endregion
        
        #region Fields
        private UITabPersonGroupRosterClient mUITabPersonGroupRosterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITabPersonGroupRosterClient : DXTestControl
    {
        
        public UITabPersonGroupRosterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabPersonGroupRoster";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UINbcRosterSetupNavBar UINbcRosterSetupNavBar
        {
            get
            {
                if ((this.mUINbcRosterSetupNavBar == null))
                {
                    this.mUINbcRosterSetupNavBar = new UINbcRosterSetupNavBar(this);
                }
                return this.mUINbcRosterSetupNavBar;
            }
        }
        #endregion
        
        #region Fields
        private UINbcRosterSetupNavBar mUINbcRosterSetupNavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbcRosterSetupNavBar : DXNavBar
    {
        
        public UINbcRosterSetupNavBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXNavBarGroup UIF3LengdeTekstherNavBarGroup
        {
            get
            {
                if ((this.mUIF3LengdeTekstherNavBarGroup == null))
                {
                    this.mUIF3LengdeTekstherNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIF3LengdeTekstherNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "F3 Lengde - Tekst her";
                    this.mUIF3LengdeTekstherNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIF3LengdeTekstherNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIF3LengdeTekstherNavBarGroup;
            }
        }
        
        public UINavBarGroupControlCoScrollableControl1 UINavBarGroupControlCoScrollableControl
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl = new UINavBarGroupControlCoScrollableControl1(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl;
            }
        }
        
        public DXNavBarGroup UIF3LengdeVaktfragrunnNavBarGroup
        {
            get
            {
                if ((this.mUIF3LengdeVaktfragrunnNavBarGroup == null))
                {
                    this.mUIF3LengdeVaktfragrunnNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIF3LengdeVaktfragrunnNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "F3 Lengde - Vakt fra grunnplan";
                    this.mUIF3LengdeVaktfragrunnNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIF3LengdeVaktfragrunnNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIF3LengdeVaktfragrunnNavBarGroup;
            }
        }
        #endregion
        
        #region Fields
        private DXNavBarGroup mUIF3LengdeTekstherNavBarGroup;
        
        private UINavBarGroupControlCoScrollableControl1 mUINavBarGroupControlCoScrollableControl;
        
        private DXNavBarGroup mUIF3LengdeVaktfragrunnNavBarGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINavBarGroupControlCoScrollableControl1 : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlEditClient : DXTestControl
    {
        
        public UIPnlEditClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UICmbChoicesComboBox UICmbChoicesComboBox
        {
            get
            {
                if ((this.mUICmbChoicesComboBox == null))
                {
                    this.mUICmbChoicesComboBox = new UICmbChoicesComboBox(this);
                }
                return this.mUICmbChoicesComboBox;
            }
        }
        
        public DXTextEdit UIENumberEdit
        {
            get
            {
                if ((this.mUIENumberEdit == null))
                {
                    this.mUIENumberEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber";
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumberEdit.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIENumberEdit;
            }
        }
        #endregion
        
        #region Fields
        private UICmbChoicesComboBox mUICmbChoicesComboBox;
        
        private DXTextEdit mUIENumberEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICmbChoicesComboBox : DXComboBox
    {
        
        public UICmbChoicesComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "cmbChoices";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIComboBoxPopupListBoxWindow UIComboBoxPopupListBoxWindow
        {
            get
            {
                if ((this.mUIComboBoxPopupListBoxWindow == null))
                {
                    this.mUIComboBoxPopupListBoxWindow = new UIComboBoxPopupListBoxWindow(this);
                }
                return this.mUIComboBoxPopupListBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIComboBoxPopupListBoxWindow mUIComboBoxPopupListBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIComboBoxPopupListBoxWindow : DXWindow
    {
        
        public UIComboBoxPopupListBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "cmbChoicesPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxPopupListBoxForm";
            #endregion
        }
        
        #region Properties
        public DXListBox UIComboBoxPopupListBoxList
        {
            get
            {
                if ((this.mUIComboBoxPopupListBoxList == null))
                {
                    this.mUIComboBoxPopupListBoxList = new DXListBox(this);
                    #region Search Criteria
                    this.mUIComboBoxPopupListBoxList.SearchProperties[DXTestControl.PropertyNames.Name] = "cmbChoicesPopupFormComboBoxPopupListBox[0]";
                    this.mUIComboBoxPopupListBoxList.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxPopupListBox";
                    this.mUIComboBoxPopupListBoxList.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIComboBoxPopupListBoxList;
            }
        }
        #endregion
        
        #region Fields
        private DXListBox mUIComboBoxPopupListBoxList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlButtonsClient1 : DXTestControl
    {
        
        public UIPnlButtonsClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXButton UILagreLukkButton
        {
            get
            {
                if ((this.mUILagreLukkButton == null))
                {
                    this.mUILagreLukkButton = new DXButton(this);
                    #region Search Criteria
                    this.mUILagreLukkButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSaveClose";
                    this.mUILagreLukkButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUILagreLukkButton.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUILagreLukkButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUILagreLukkButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAnsatteiarbeidsplanWindow : DXWindow
    {
        
        public UIAnsatteiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlOuterClient UIPanelControlOuterClient
        {
            get
            {
                if ((this.mUIPanelControlOuterClient == null))
                {
                    this.mUIPanelControlOuterClient = new UIPanelControlOuterClient(this);
                }
                return this.mUIPanelControlOuterClient;
            }
        }
        
        public DXButton UISimpleButtonButton
        {
            get
            {
                if ((this.mUISimpleButtonButton == null))
                {
                    this.mUISimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonOk";
                    this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUISimpleButtonButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUISimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlOuterClient mUIPanelControlOuterClient;
        
        private DXButton mUISimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPanelControlOuterClient : DXTestControl
    {
        
        public UIPanelControlOuterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        
        public UIPanelControlRightClient UIPanelControlRightClient
        {
            get
            {
                if ((this.mUIPanelControlRightClient == null))
                {
                    this.mUIPanelControlRightClient = new UIPanelControlRightClient(this);
                }
                return this.mUIPanelControlRightClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient mUIPanelControlLeftClient;
        
        private UIPanelControlRightClient mUIPanelControlRightClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPanelControlLeftClient : DXTestControl
    {
        
        public UIPanelControlLeftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIAnsatteButton
        {
            get
            {
                if ((this.mUIAnsatteButton == null))
                {
                    this.mUIAnsatteButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAnsatteButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonAdd";
                    this.mUIAnsatteButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
                    this.mUIAnsatteButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIAnsatteButton;
            }
        }
        
        public UITreeListEmployeesTreeList UITreeListEmployeesTreeList
        {
            get
            {
                if ((this.mUITreeListEmployeesTreeList == null))
                {
                    this.mUITreeListEmployeesTreeList = new UITreeListEmployeesTreeList(this);
                }
                return this.mUITreeListEmployeesTreeList;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIAnsatteButton;
        
        private UITreeListEmployeesTreeList mUITreeListEmployeesTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITreeListEmployeesTreeList : DXTreeList
    {
        
        public UITreeListEmployeesTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode3TreeListNode UINode3TreeListNode
        {
            get
            {
                if ((this.mUINode3TreeListNode == null))
                {
                    this.mUINode3TreeListNode = new UINode3TreeListNode(this);
                }
                return this.mUINode3TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode3TreeListNode mUINode3TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode3TreeListNode : DXTreeListNode
    {
        
        public UINode3TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode1TreeListNode UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public UINode0TreeListNode UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode1TreeListNode mUINode1TreeListNode;
        
        private UINode0TreeListNode mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode1TreeListNode : DXTreeListNode
    {
        
        public UINode1TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5140OmregnettidTreeListCell
        {
            get
            {
                if ((this.mUIItem5140OmregnettidTreeListCell == null))
                {
                    this.mUIItem5140OmregnettidTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5140OmregnettidTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentDisplayNameMain";
                    this.mUIItem5140OmregnettidTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem5140OmregnettidTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem5140OmregnettidTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5140OmregnettidTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode0TreeListNode : DXTreeListNode
    {
        
        public UINode0TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5140OmregnettidTreeListCell
        {
            get
            {
                if ((this.mUIItem5140OmregnettidTreeListCell == null))
                {
                    this.mUIItem5140OmregnettidTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5140OmregnettidTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentDisplayNameMain";
                    this.mUIItem5140OmregnettidTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem5140OmregnettidTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem5140OmregnettidTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5140OmregnettidTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPanelControlRightClient : DXTestControl
    {
        
        public UIPanelControlRightClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlRight";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient18 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient18(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient18 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient18 : DXTestControl
    {
        
        public UIPcViewClient18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIEmployeeEditorsViewCustom UIEmployeeEditorsViewCustom
        {
            get
            {
                if ((this.mUIEmployeeEditorsViewCustom == null))
                {
                    this.mUIEmployeeEditorsViewCustom = new UIEmployeeEditorsViewCustom(this);
                }
                return this.mUIEmployeeEditorsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeEditorsViewCustom mUIEmployeeEditorsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEmployeeEditorsViewCustom : DXTestControl
    {
        
        public UIEmployeeEditorsViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeEditorsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeEditorsView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient1 UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient1(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient1 mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcContentClient1 : DXTestControl
    {
        
        public UIPcContentClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIXscContentScrollableControl UIXscContentScrollableControl
        {
            get
            {
                if ((this.mUIXscContentScrollableControl == null))
                {
                    this.mUIXscContentScrollableControl = new UIXscContentScrollableControl(this);
                }
                return this.mUIXscContentScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscContentScrollableControl mUIXscContentScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIXscContentScrollableControl : DXScrollableControl
    {
        
        public UIXscContentScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGroupControlViewHostCustom UIGroupControlViewHostCustom
        {
            get
            {
                if ((this.mUIGroupControlViewHostCustom == null))
                {
                    this.mUIGroupControlViewHostCustom = new UIGroupControlViewHostCustom(this);
                }
                return this.mUIGroupControlViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlViewHostCustom mUIGroupControlViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGroupControlViewHostCustom : DXTestControl
    {
        
        public UIGroupControlViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControlViewHost";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGroupControlClient UIGroupControlClient
        {
            get
            {
                if ((this.mUIGroupControlClient == null))
                {
                    this.mUIGroupControlClient = new UIGroupControlClient(this);
                }
                return this.mUIGroupControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlClient mUIGroupControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGroupControlClient : DXTestControl
    {
        
        public UIGroupControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerLineVCustom UIEmployeeManagerLineVCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerLineVCustom == null))
                {
                    this.mUIEmployeeManagerLineVCustom = new UIEmployeeManagerLineVCustom(this);
                }
                return this.mUIEmployeeManagerLineVCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerLineVCustom mUIEmployeeManagerLineVCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEmployeeManagerLineVCustom : DXTestControl
    {
        
        public UIEmployeeManagerLineVCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerLineView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerLineView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIEPositionPercentEdit
        {
            get
            {
                if ((this.mUIEPositionPercentEdit == null))
                {
                    this.mUIEPositionPercentEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIEPositionPercentEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "ePositionPercent";
                    this.mUIEPositionPercentEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDoubleEdit";
                    this.mUIEPositionPercentEdit.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIEPositionPercentEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIEPositionPercentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeggtilansatteWindow : DXWindow
    {
        
        public UILeggtilansatteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Legg til ansatte";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom1 UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom1(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom1 mUIViewHostCustom;
        
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHostCustom1 : DXTestControl
    {
        
        public UIViewHostCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient19 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient19(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient19 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient19 : DXTestControl
    {
        
        public UIPcViewClient19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UISelectDepartmentEmplCustom UISelectDepartmentEmplCustom
        {
            get
            {
                if ((this.mUISelectDepartmentEmplCustom == null))
                {
                    this.mUISelectDepartmentEmplCustom = new UISelectDepartmentEmplCustom(this);
                }
                return this.mUISelectDepartmentEmplCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISelectDepartmentEmplCustom mUISelectDepartmentEmplCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISelectDepartmentEmplCustom : DXTestControl
    {
        
        public UISelectDepartmentEmplCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SelectDepartmentEmployeesView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SelectDepartmentEmployeesView";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UILeftAutoHideContaineClient UILeftAutoHideContaineClient
        {
            get
            {
                if ((this.mUILeftAutoHideContaineClient == null))
                {
                    this.mUILeftAutoHideContaineClient = new UILeftAutoHideContaineClient(this);
                }
                return this.mUILeftAutoHideContaineClient;
            }
        }
        
        public UIAutoHideControlClient UIAutoHideControlClient
        {
            get
            {
                if ((this.mUIAutoHideControlClient == null))
                {
                    this.mUIAutoHideControlClient = new UIAutoHideControlClient(this);
                }
                return this.mUIAutoHideControlClient;
            }
        }
        
        public UIPcContentContainerClient UIPcContentContainerClient
        {
            get
            {
                if ((this.mUIPcContentContainerClient == null))
                {
                    this.mUIPcContentContainerClient = new UIPcContentContainerClient(this);
                }
                return this.mUIPcContentContainerClient;
            }
        }
        #endregion
        
        #region Fields
        private UILeftAutoHideContaineClient mUILeftAutoHideContaineClient;
        
        private UIAutoHideControlClient mUIAutoHideControlClient;
        
        private UIPcContentContainerClient mUIPcContentContainerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeftAutoHideContaineClient : DXTestControl
    {
        
        public UILeftAutoHideContaineClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "LeftAutoHideContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AutoHideContainer";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXButton UIUtvalgsalternativerButton
        {
            get
            {
                if ((this.mUIUtvalgsalternativerButton == null))
                {
                    this.mUIUtvalgsalternativerButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIUtvalgsalternativerButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Utvalgsalternativer";
                    this.mUIUtvalgsalternativerButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AutoHideContainerButton";
                    this.mUIUtvalgsalternativerButton.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIUtvalgsalternativerButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIUtvalgsalternativerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAutoHideControlClient : DXTestControl
    {
        
        public UIAutoHideControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "LeftAutoHideControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AutoHideControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIDpDepartmentSelectorDockPanel UIDpDepartmentSelectorDockPanel
        {
            get
            {
                if ((this.mUIDpDepartmentSelectorDockPanel == null))
                {
                    this.mUIDpDepartmentSelectorDockPanel = new UIDpDepartmentSelectorDockPanel(this);
                }
                return this.mUIDpDepartmentSelectorDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpDepartmentSelectorDockPanel mUIDpDepartmentSelectorDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpDepartmentSelectorDockPanel : DXDockPanel
    {
        
        public UIDpDepartmentSelectorDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpDepartmentSelector";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIDepartmentSelectorCoCustom UIDepartmentSelectorCoCustom
        {
            get
            {
                if ((this.mUIDepartmentSelectorCoCustom == null))
                {
                    this.mUIDepartmentSelectorCoCustom = new UIDepartmentSelectorCoCustom(this);
                }
                return this.mUIDepartmentSelectorCoCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDepartmentSelectorCoCustom mUIDepartmentSelectorCoCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDepartmentSelectorCoCustom : DXTestControl
    {
        
        public UIDepartmentSelectorCoCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "departmentSelectorContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UITlAccessibleDepartmeTreeList UITlAccessibleDepartmeTreeList
        {
            get
            {
                if ((this.mUITlAccessibleDepartmeTreeList == null))
                {
                    this.mUITlAccessibleDepartmeTreeList = new UITlAccessibleDepartmeTreeList(this);
                }
                return this.mUITlAccessibleDepartmeTreeList;
            }
        }
        
        public DXCheckBox UICeDoIncludeExistingECheckBox
        {
            get
            {
                if ((this.mUICeDoIncludeExistingECheckBox == null))
                {
                    this.mUICeDoIncludeExistingECheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUICeDoIncludeExistingECheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ceDoIncludeExistingEmployees";
                    this.mUICeDoIncludeExistingECheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
                    this.mUICeDoIncludeExistingECheckBox.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUICeDoIncludeExistingECheckBox;
            }
        }
        #endregion
        
        #region Fields
        private UITlAccessibleDepartmeTreeList mUITlAccessibleDepartmeTreeList;
        
        private DXCheckBox mUICeDoIncludeExistingECheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITlAccessibleDepartmeTreeList : DXTreeList
    {
        
        public UITlAccessibleDepartmeTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tlAccessibleDepartments";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode1 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode1(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode1 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode0TreeListNode1 : DXTreeListNode
    {
        
        public UINode0TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UINode8TreeListNode UINode8TreeListNode
        {
            get
            {
                if ((this.mUINode8TreeListNode == null))
                {
                    this.mUINode8TreeListNode = new UINode8TreeListNode(this);
                }
                return this.mUINode8TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode8TreeListNode mUINode8TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode8TreeListNode : DXTreeListNode
    {
        
        public UINode8TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node8";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXTreeListNode UINode12TreeListNode
        {
            get
            {
                if ((this.mUINode12TreeListNode == null))
                {
                    this.mUINode12TreeListNode = new DXTreeListNode(this);
                    #region Search Criteria
                    this.mUINode12TreeListNode.SearchProperties[DXTestControl.PropertyNames.Name] = "Node12";
                    this.mUINode12TreeListNode.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
                    this.mUINode12TreeListNode.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUINode12TreeListNode;
            }
        }
        
        public DXTreeListNode UINode13TreeListNode
        {
            get
            {
                if ((this.mUINode13TreeListNode == null))
                {
                    this.mUINode13TreeListNode = new DXTreeListNode(this);
                    #region Search Criteria
                    this.mUINode13TreeListNode.SearchProperties[DXTestControl.PropertyNames.Name] = "Node13";
                    this.mUINode13TreeListNode.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
                    this.mUINode13TreeListNode.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUINode13TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListNode mUINode12TreeListNode;
        
        private DXTreeListNode mUINode13TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcContentContainerClient : DXTestControl
    {
        
        public UIPcContentContainerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContentContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient2 UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient2(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient2 mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcContentClient2 : DXTestControl
    {
        
        public UIPcContentClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIGcDepartmentEmployeeTable UIGcDepartmentEmployeeTable
        {
            get
            {
                if ((this.mUIGcDepartmentEmployeeTable == null))
                {
                    this.mUIGcDepartmentEmployeeTable = new UIGcDepartmentEmployeeTable(this);
                }
                return this.mUIGcDepartmentEmployeeTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDepartmentEmployeeTable mUIGcDepartmentEmployeeTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcDepartmentEmployeeTable : DXGrid
    {
        
        public UIGcDepartmentEmployeeTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXCell UIHaberPeterCell
        {
            get
            {
                if ((this.mUIHaberPeterCell == null))
                {
                    this.mUIHaberPeterCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHaberPeterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]11[Column]col" +
                        "Employee";
                    this.mUIHaberPeterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHaberPeterCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIHaberPeterCell;
            }
        }
        
        public DXCell UIGcDepartmentEmployeeCell1
        {
            get
            {
                if ((this.mUIGcDepartmentEmployeeCell1 == null))
                {
                    this.mUIGcDepartmentEmployeeCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGcDepartmentEmployeeCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]11[Column]col" +
                        "ToDate";
                    this.mUIGcDepartmentEmployeeCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGcDepartmentEmployeeCell1.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIGcDepartmentEmployeeCell1;
            }
        }
        
        public DXCell UIHaberPeterCell1
        {
            get
            {
                if ((this.mUIHaberPeterCell1 == null))
                {
                    this.mUIHaberPeterCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIHaberPeterCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]6[Column]colE" +
                        "mployee";
                    this.mUIHaberPeterCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHaberPeterCell1.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIHaberPeterCell1;
            }
        }
        
        public DXCell UIHaberPeterCell2
        {
            get
            {
                if ((this.mUIHaberPeterCell2 == null))
                {
                    this.mUIHaberPeterCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIHaberPeterCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]14[Column]col" +
                        "Employee";
                    this.mUIHaberPeterCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHaberPeterCell2.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIHaberPeterCell2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIHaberPeterCell;
        
        private DXCell mUIGcDepartmentEmployeeCell1;
        
        private DXCell mUIHaberPeterCell1;
        
        private DXCell mUIHaberPeterCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanKopiavFTTWindow13 : DXWindow
    {
        
        public UIArbeidsplanKopiavFTTWindow13()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRcMenuRibbon7 UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon7(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        
        public UIDpnlVisualizationDockPanel18 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel18(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        
        public UIPnlRosterPlanClient9 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient9(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIRcMenuRibbon7 mUIRcMenuRibbon;
        
        private UIDpnlVisualizationDockPanel18 mUIDpnlVisualizationDockPanel;
        
        private UIPnlRosterPlanClient9 mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRcMenuRibbon7 : DXRibbon
    {
        
        public UIRcMenuRibbon7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpPlanRibbonPage7 UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage7(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpPlanRibbonPage7 mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpPlanRibbonPage7 : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpgPlanRibbonPageGroup2 UIRpgPlanRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPlanRibbonPageGroup == null))
                {
                    this.mUIRpgPlanRibbonPageGroup = new UIRpgPlanRibbonPageGroup2(this);
                }
                return this.mUIRpgPlanRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPlanRibbonPageGroup2 mUIRpgPlanRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPlanRibbonPageGroup2 : DXRibbonPageGroup
    {
        
        public UIRpgPlanRibbonPageGroup2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIInnstillingerRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIInnstillingerRibbonBaseButtonItem == null))
                {
                    this.mUIInnstillingerRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIInnstillingerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSettings";
                    this.mUIInnstillingerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIInnstillingerRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIInnstillingerRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIInnstillingerRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel18 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom18 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom18(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom18 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom18 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList18 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList18(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList18 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList18 : DXTestControl
    {
        
        public UITcVisualizationTabList18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient18 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient18(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient18 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient18 : DXTestControl
    {
        
        public UITpFixedPaymentClient18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom36 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom36(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom36 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom36 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom18 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom18(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom18 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom18 : DXTestControl
    {
        
        public UIViewHost1Custom18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient20 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient20(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient20 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient20 : DXTestControl
    {
        
        public UIPcViewClient20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom37 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom37(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom37 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom37 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid17 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid17(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid17 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid17 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIJähkelLennartPivotGridFieldValue
        {
            get
            {
                if ((this.mUIJähkelLennartPivotGridFieldValue == null))
                {
                    this.mUIJähkelLennartPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIJähkelLennartPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]0";
                    this.mUIJähkelLennartPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIJähkelLennartPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIJähkelLennartPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem6PivotGridCell
        {
            get
            {
                if ((this.mUIItem6PivotGridCell == null))
                {
                    this.mUIItem6PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]0";
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem6PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem6PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem126PivotGridCell
        {
            get
            {
                if ((this.mUIItem126PivotGridCell == null))
                {
                    this.mUIItem126PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem126PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]1";
                    this.mUIItem126PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem126PivotGridCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem126PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UILassgårdRolfPivotGridFieldValue
        {
            get
            {
                if ((this.mUILassgårdRolfPivotGridFieldValue == null))
                {
                    this.mUILassgårdRolfPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUILassgårdRolfPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]1";
                    this.mUILassgårdRolfPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUILassgårdRolfPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUILassgårdRolfPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem6PivotGridCell1
        {
            get
            {
                if ((this.mUIItem6PivotGridCell1 == null))
                {
                    this.mUIItem6PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem6PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]2";
                    this.mUIItem6PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem6PivotGridCell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem6PivotGridCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIJähkelLennartPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem6PivotGridCell;
        
        private DXPivotGridCell mUIItem126PivotGridCell;
        
        private DXPivotGridFieldValue mUILassgårdRolfPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem6PivotGridCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient9 : DXTestControl
    {
        
        public UIPnlRosterPlanClient9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable9 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable9(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable9 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable9 : DXGrid
    {
        
        public UIGcRosterPlanTable9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXCell UIJähkelLennartCell
        {
            get
            {
                if ((this.mUIJähkelLennartCell == null))
                {
                    this.mUIJähkelLennartCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIJähkelLennartCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_EmployeeName";
                    this.mUIJähkelLennartCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIJähkelLennartCell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIJähkelLennartCell;
            }
        }
        
        public DXCell UID1Cell
        {
            get
            {
                if ((this.mUID1Cell == null))
                {
                    this.mUID1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUID1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUID1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID1Cell.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUID1Cell;
            }
        }
        
        public DXCell UID1Cell1
        {
            get
            {
                if ((this.mUID1Cell1 == null))
                {
                    this.mUID1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUID1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUID1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID1Cell1.WindowTitles.Add("Arbeidsplan: Kopi av FTT Ukeregler AP. (Planen er låst av deg)");
                    #endregion
                }
                return this.mUID1Cell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIJähkelLennartCell;
        
        private DXCell mUID1Cell;
        
        private DXCell mUID1Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILinjeinnstillingerJäWindow : DXWindow
    {
        
        public UILinjeinnstillingerJäWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Linjeinnstillinger", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Jähkel, Lennart]");
            this.WindowTitles.Add("Linjeinnstillinger");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client6 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client6(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        
        public UIGSPanelControlClient11 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient11(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client6 mUIGsPanelControl3Client;
        
        private UIGSPanelControlClient11 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl3Client6 : DXTestControl
    {
        
        public UIGsPanelControl3Client6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Jähkel, Lennart]");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UIPceDate0PopupEdit
        {
            get
            {
                if ((this.mUIPceDate0PopupEdit == null))
                {
                    this.mUIPceDate0PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[0]";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate0PopupEdit.WindowTitles.Add("Linjeinnstillinger - [Jähkel, Lennart]");
                    #endregion
                }
                return this.mUIPceDate0PopupEdit;
            }
        }
        
        public DXPopupEdit UIPceDate1PopupEdit
        {
            get
            {
                if ((this.mUIPceDate1PopupEdit == null))
                {
                    this.mUIPceDate1PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[1]";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate1PopupEdit.WindowTitles.Add("Linjeinnstillinger - [Jähkel, Lennart]");
                    #endregion
                }
                return this.mUIPceDate1PopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUIPceDate0PopupEdit;
        
        private DXPopupEdit mUIPceDate1PopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient11 : DXTestControl
    {
        
        public UIGSPanelControlClient11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Jähkel, Lennart]");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Linjeinnstillinger - [Jähkel, Lennart]");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGatver66041952POAvd5Window : WinWindow
    {
        
        public UIGatver66041952POAvd5Window()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Gat", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIItemWindow10 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow10(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow10 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow10 : WinWindow
    {
        
        public UIItemWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxPageControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Vaktbok");
            #endregion
        }
        
        #region Properties
        public WinClient UIGatver66041952POAvd5Client
        {
            get
            {
                if ((this.mUIGatver66041952POAvd5Client == null))
                {
                    this.mUIGatver66041952POAvd5Client = new WinClient(this);
                    #region Search Criteria
                    this.mUIGatver66041952POAvd5Client.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Vaktbok");
                    #endregion
                }
                return this.mUIGatver66041952POAvd5Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIGatver66041952POAvd5Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGatver66041952POAvd5Window1 : WinWindow
    {
        
        public UIGatver66041952POAvd5Window1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Gat", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIItemWindow13 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow13(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow13 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxPageControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Ansatt: Maud Adams  (Vakt" +
                    "bokdato: 12.12.2016)");
            #endregion
        }
        
        #region Properties
        public WinClient UIGatver66041952POAvd5Client
        {
            get
            {
                if ((this.mUIGatver66041952POAvd5Client == null))
                {
                    this.mUIGatver66041952POAvd5Client = new WinClient(this);
                    #region Search Criteria
                    this.mUIGatver66041952POAvd5Client.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Ansatt: Maud Adams  (Vakt" +
                            "bokdato: 12.12.2016)");
                    #endregion
                }
                return this.mUIGatver66041952POAvd5Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIGatver66041952POAvd5Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGatver66041952POAvd5Window2 : WinWindow
    {
        
        public UIGatver66041952POAvd5Window2()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Gat", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIItemWindow14 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow14(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow14 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow14 : WinWindow
    {
        
        public UIItemWindow14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxPageControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Avdeling: Faste tillegg  " +
                    "(Vaktbokdato: 12.12.2016)");
            #endregion
        }
        
        #region Properties
        public WinClient UIGatver66041952POAvd5Client
        {
            get
            {
                if ((this.mUIGatver66041952POAvd5Client == null))
                {
                    this.mUIGatver66041952POAvd5Client = new WinClient(this);
                    #region Search Criteria
                    this.mUIGatver66041952POAvd5Client.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Avdeling: Faste tillegg  " +
                            "(Vaktbokdato: 12.12.2016)");
                    #endregion
                }
                return this.mUIGatver66041952POAvd5Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIGatver66041952POAvd5Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGatver66041952POAvd5Window3 : WinWindow
    {
        
        public UIGatver66041952POAvd5Window3()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Gat", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIItemWindow15 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow15(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIGcShiftcodesTable UIGcShiftcodesTable
        {
            get
            {
                if ((this.mUIGcShiftcodesTable == null))
                {
                    this.mUIGcShiftcodesTable = new UIGcShiftcodesTable(this);
                }
                return this.mUIGcShiftcodesTable;
            }
        }
        
        public UIPaToolbarClient UIPaToolbarClient
        {
            get
            {
                if ((this.mUIPaToolbarClient == null))
                {
                    this.mUIPaToolbarClient = new UIPaToolbarClient(this);
                }
                return this.mUIPaToolbarClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow15 mUIItemWindow;
        
        private UIGcShiftcodesTable mUIGcShiftcodesTable;
        
        private UIPaToolbarClient mUIPaToolbarClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow15 : WinWindow
    {
        
        public UIItemWindow15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxPageControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Avdeling: Faste tillegg  " +
                    "(Vaktbokdato: 13.12.2016)");
            #endregion
        }
        
        #region Properties
        public WinClient UIAvdelingClient
        {
            get
            {
                if ((this.mUIAvdelingClient == null))
                {
                    this.mUIAvdelingClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAvdelingClient.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Avdeling: Faste tillegg  " +
                            "(Vaktbokdato: 13.12.2016)");
                    #endregion
                }
                return this.mUIAvdelingClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAvdelingClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcShiftcodesTable : DXGrid
    {
        
        public UIGcShiftcodesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftcodes";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Avdeling: Faste tillegg  " +
                    "(Vaktbokdato: 13.12.2016)");
            #endregion
        }
        
        #region Properties
        public DXCell UID2Cell
        {
            get
            {
                if ((this.mUID2Cell == null))
                {
                    this.mUID2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUID2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftcodesGridControlCell[View]gvShiftcodes[Row]5[Column]gcolCode";
                    this.mUID2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID2Cell.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Avdeling: Faste tillegg  " +
                            "(Vaktbokdato: 13.12.2016)");
                    this.mUID2Cell.WindowTitles.Add("Gat ver.");
                    #endregion
                }
                return this.mUID2Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUID2Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaToolbarClient : DXTestControl
    {
        
        public UIPaToolbarClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paToolbar";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Avdeling: Faste tillegg  " +
                    "(Vaktbokdato: 13.12.2016)");
            #endregion
        }
        
        #region Properties
        public DXButton UIEndrevaktkodeButton
        {
            get
            {
                if ((this.mUIEndrevaktkodeButton == null))
                {
                    this.mUIEndrevaktkodeButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIEndrevaktkodeButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditShiftcode";
                    this.mUIEndrevaktkodeButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIEndrevaktkodeButton.WindowTitles.Add("Gat ver. 6.6.0.41952 - (PO - Avd: 5150-Faste tillegg) - Avdeling: Faste tillegg  " +
                            "(Vaktbokdato: 13.12.2016)");
                    #endregion
                }
                return this.mUIEndrevaktkodeButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIEndrevaktkodeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEndrevaktkodeD2Window : DXWindow
    {
        
        public UIEndrevaktkodeD2Window()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Endre vaktkode D2";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Endre vaktkode D2");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient3 UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient3(this);
                }
                return this.mUIPcContentClient;
            }
        }
        
        public UIDbFooterCustom UIDbFooterCustom
        {
            get
            {
                if ((this.mUIDbFooterCustom == null))
                {
                    this.mUIDbFooterCustom = new UIDbFooterCustom(this);
                }
                return this.mUIDbFooterCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient3 mUIPcContentClient;
        
        private UIDbFooterCustom mUIDbFooterCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcContentClient3 : DXTestControl
    {
        
        public UIPcContentClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Endre vaktkode D2");
            #endregion
        }
        
        #region Properties
        public UIPaNormalShiftcodePanClient UIPaNormalShiftcodePanClient
        {
            get
            {
                if ((this.mUIPaNormalShiftcodePanClient == null))
                {
                    this.mUIPaNormalShiftcodePanClient = new UIPaNormalShiftcodePanClient(this);
                }
                return this.mUIPaNormalShiftcodePanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaNormalShiftcodePanClient mUIPaNormalShiftcodePanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaNormalShiftcodePanClient : DXTestControl
    {
        
        public UIPaNormalShiftcodePanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paNormalShiftcodePanels";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Endre vaktkode D2");
            #endregion
        }
        
        #region Properties
        public UITcExtraTabsTabList UITcExtraTabsTabList
        {
            get
            {
                if ((this.mUITcExtraTabsTabList == null))
                {
                    this.mUITcExtraTabsTabList = new UITcExtraTabsTabList(this);
                }
                return this.mUITcExtraTabsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcExtraTabsTabList mUITcExtraTabsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcExtraTabsTabList : DXTestControl
    {
        
        public UITcExtraTabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcExtraTabs";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Endre vaktkode D2");
            #endregion
        }
        
        #region Properties
        public DXTestControl UIXtraTabControlHeaderTabPage
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage == null))
                {
                    this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "tcExtraTabsPageHeader6";
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("Endre vaktkode D2");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage;
            }
        }
        
        public UITpShiftClassClient UITpShiftClassClient
        {
            get
            {
                if ((this.mUITpShiftClassClient == null))
                {
                    this.mUITpShiftClassClient = new UITpShiftClassClient(this);
                }
                return this.mUITpShiftClassClient;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        
        private UITpShiftClassClient mUITpShiftClassClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpShiftClassClient : DXTestControl
    {
        
        public UITpShiftClassClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpShiftClass";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Endre vaktkode D2");
            #endregion
        }
        
        #region Properties
        public UIGcShiftClassForDoctoClient UIGcShiftClassForDoctoClient
        {
            get
            {
                if ((this.mUIGcShiftClassForDoctoClient == null))
                {
                    this.mUIGcShiftClassForDoctoClient = new UIGcShiftClassForDoctoClient(this);
                }
                return this.mUIGcShiftClassForDoctoClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcShiftClassForDoctoClient mUIGcShiftClassForDoctoClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcShiftClassForDoctoClient : DXTestControl
    {
        
        public UIGcShiftClassForDoctoClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassForDoctors";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Endre vaktkode D2");
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UISlue_Shiftclass_MondLookUpEdit
        {
            get
            {
                if ((this.mUISlue_Shiftclass_MondLookUpEdit == null))
                {
                    this.mUISlue_Shiftclass_MondLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUISlue_Shiftclass_MondLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "slue_Shiftclass_Monday";
                    this.mUISlue_Shiftclass_MondLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSearchLookUpEdit";
                    this.mUISlue_Shiftclass_MondLookUpEdit.WindowTitles.Add("Endre vaktkode D2");
                    #endregion
                }
                return this.mUISlue_Shiftclass_MondLookUpEdit;
            }
        }
        
        public DXLookUpEdit UISlue_Shiftclass_TuesLookUpEdit
        {
            get
            {
                if ((this.mUISlue_Shiftclass_TuesLookUpEdit == null))
                {
                    this.mUISlue_Shiftclass_TuesLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUISlue_Shiftclass_TuesLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "slue_Shiftclass_Tuesday";
                    this.mUISlue_Shiftclass_TuesLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSearchLookUpEdit";
                    this.mUISlue_Shiftclass_TuesLookUpEdit.WindowTitles.Add("Endre vaktkode D2");
                    #endregion
                }
                return this.mUISlue_Shiftclass_TuesLookUpEdit;
            }
        }
        
        public DXLookUpEdit UISlue_Shiftclass_WednLookUpEdit
        {
            get
            {
                if ((this.mUISlue_Shiftclass_WednLookUpEdit == null))
                {
                    this.mUISlue_Shiftclass_WednLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUISlue_Shiftclass_WednLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "slue_Shiftclass_Wednesday";
                    this.mUISlue_Shiftclass_WednLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSearchLookUpEdit";
                    this.mUISlue_Shiftclass_WednLookUpEdit.WindowTitles.Add("Endre vaktkode D2");
                    #endregion
                }
                return this.mUISlue_Shiftclass_WednLookUpEdit;
            }
        }
        
        public DXLookUpEdit UISlue_Shiftclass_ThurLookUpEdit
        {
            get
            {
                if ((this.mUISlue_Shiftclass_ThurLookUpEdit == null))
                {
                    this.mUISlue_Shiftclass_ThurLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUISlue_Shiftclass_ThurLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "slue_Shiftclass_Thursday";
                    this.mUISlue_Shiftclass_ThurLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSearchLookUpEdit";
                    this.mUISlue_Shiftclass_ThurLookUpEdit.WindowTitles.Add("Endre vaktkode D2");
                    #endregion
                }
                return this.mUISlue_Shiftclass_ThurLookUpEdit;
            }
        }
        
        public DXLookUpEdit UISlue_Shiftclass_FridLookUpEdit
        {
            get
            {
                if ((this.mUISlue_Shiftclass_FridLookUpEdit == null))
                {
                    this.mUISlue_Shiftclass_FridLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUISlue_Shiftclass_FridLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "slue_Shiftclass_Friday";
                    this.mUISlue_Shiftclass_FridLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSearchLookUpEdit";
                    this.mUISlue_Shiftclass_FridLookUpEdit.WindowTitles.Add("Endre vaktkode D2");
                    #endregion
                }
                return this.mUISlue_Shiftclass_FridLookUpEdit;
            }
        }
        
        public DXLookUpEdit UISlue_Shiftclass_SatuLookUpEdit
        {
            get
            {
                if ((this.mUISlue_Shiftclass_SatuLookUpEdit == null))
                {
                    this.mUISlue_Shiftclass_SatuLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUISlue_Shiftclass_SatuLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "slue_Shiftclass_Saturday";
                    this.mUISlue_Shiftclass_SatuLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSearchLookUpEdit";
                    this.mUISlue_Shiftclass_SatuLookUpEdit.WindowTitles.Add("Endre vaktkode D2");
                    #endregion
                }
                return this.mUISlue_Shiftclass_SatuLookUpEdit;
            }
        }
        
        public DXLookUpEdit UISlue_Shiftclass_SundLookUpEdit
        {
            get
            {
                if ((this.mUISlue_Shiftclass_SundLookUpEdit == null))
                {
                    this.mUISlue_Shiftclass_SundLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUISlue_Shiftclass_SundLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "slue_Shiftclass_Sunday";
                    this.mUISlue_Shiftclass_SundLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSearchLookUpEdit";
                    this.mUISlue_Shiftclass_SundLookUpEdit.WindowTitles.Add("Endre vaktkode D2");
                    #endregion
                }
                return this.mUISlue_Shiftclass_SundLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUISlue_Shiftclass_MondLookUpEdit;
        
        private DXLookUpEdit mUISlue_Shiftclass_TuesLookUpEdit;
        
        private DXLookUpEdit mUISlue_Shiftclass_WednLookUpEdit;
        
        private DXLookUpEdit mUISlue_Shiftclass_ThurLookUpEdit;
        
        private DXLookUpEdit mUISlue_Shiftclass_FridLookUpEdit;
        
        private DXLookUpEdit mUISlue_Shiftclass_SatuLookUpEdit;
        
        private DXLookUpEdit mUISlue_Shiftclass_SundLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDbFooterCustom : DXTestControl
    {
        
        public UIDbFooterCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dbFooter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSDialogFooterBar";
            this.WindowTitles.Add("Endre vaktkode D2");
            #endregion
        }
        
        #region Properties
        public DXButton UIAvbrytButton
        {
            get
            {
                if ((this.mUIAvbrytButton == null))
                {
                    this.mUIAvbrytButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCancel";
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIAvbrytButton.WindowTitles.Add("Endre vaktkode D2");
                    #endregion
                }
                return this.mUIAvbrytButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIAvbrytButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel19 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel19(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel19 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel19 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom19 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom19(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom19 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom19 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList19 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList19(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList19 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList19 : DXTestControl
    {
        
        public UITcVisualizationTabList19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient19 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient19(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient19 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient19 : DXTestControl
    {
        
        public UITpFixedPaymentClient19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom38 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom38(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom38 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom38 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom38(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom19 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom19(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom19 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom19 : DXTestControl
    {
        
        public UIViewHost1Custom19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient21 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient21(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient21 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient21 : DXTestControl
    {
        
        public UIPcViewClient21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom39 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom39(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom39 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom39 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom39(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid18 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid18(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        
        public DXButton UIVaktklasserButton
        {
            get
            {
                if ((this.mUIVaktklasserButton == null))
                {
                    this.mUIVaktklasserButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIVaktklasserButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnShiftClass";
                    this.mUIVaktklasserButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIVaktklasserButton.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIVaktklasserButton;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid18 mUIPgcCalculationResultPivotGrid;
        
        private DXButton mUIVaktklasserButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid18 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIOscarssonPerPivotGridFieldValue
        {
            get
            {
                if ((this.mUIOscarssonPerPivotGridFieldValue == null))
                {
                    this.mUIOscarssonPerPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIOscarssonPerPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]0";
                    this.mUIOscarssonPerPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIOscarssonPerPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIOscarssonPerPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell
        {
            get
            {
                if ((this.mUIItem1PivotGridCell == null))
                {
                    this.mUIItem1PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem1PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem1PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem1PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIVollterSvenPivotGridFieldValue
        {
            get
            {
                if ((this.mUIVollterSvenPivotGridFieldValue == null))
                {
                    this.mUIVollterSvenPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIVollterSvenPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]1";
                    this.mUIVollterSvenPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIVollterSvenPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIVollterSvenPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem375PivotGridCell
        {
            get
            {
                if ((this.mUIItem375PivotGridCell == null))
                {
                    this.mUIItem375PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem375PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]1";
                    this.mUIItem375PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem375PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem375PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem6PivotGridCell
        {
            get
            {
                if ((this.mUIItem6PivotGridCell == null))
                {
                    this.mUIItem6PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem6PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem6PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIOscarssonPerPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem1PivotGridCell;
        
        private DXPivotGridFieldValue mUIVollterSvenPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem375PivotGridCell;
        
        private DXPivotGridCell mUIItem6PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIShiftClassCalculatioWindow : DXWindow
    {
        
        public UIShiftClassCalculatioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPgcResultsPivotGrid UIPgcResultsPivotGrid
        {
            get
            {
                if ((this.mUIPgcResultsPivotGrid == null))
                {
                    this.mUIPgcResultsPivotGrid = new UIPgcResultsPivotGrid(this);
                }
                return this.mUIPgcResultsPivotGrid;
            }
        }
        
        public DXButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new DXButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Close";
                    this.mUICloseButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WindowTitleButton";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public UIPgcResultsPivotGrid1 UIPgcResultsPivotGrid1
        {
            get
            {
                if ((this.mUIPgcResultsPivotGrid1 == null))
                {
                    this.mUIPgcResultsPivotGrid1 = new UIPgcResultsPivotGrid1(this);
                }
                return this.mUIPgcResultsPivotGrid1;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcResultsPivotGrid mUIPgcResultsPivotGrid;
        
        private DXButton mUICloseButton;
        
        private UIPgcResultsPivotGrid1 mUIPgcResultsPivotGrid1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcResultsPivotGrid : DXPivotGrid
    {
        
        public UIPgcResultsPivotGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIOscarssonPerPivotGridFieldValue
        {
            get
            {
                if ((this.mUIOscarssonPerPivotGridFieldValue == null))
                {
                    this.mUIOscarssonPerPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIOscarssonPerPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]0";
                    this.mUIOscarssonPerPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIOscarssonPerPivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIAPivotGridFieldValue
        {
            get
            {
                if ((this.mUIAPivotGridFieldValue == null))
                {
                    this.mUIAPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIAPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]ShiftClass[LastLevelIndex]0";
                    this.mUIAPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIAPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell
        {
            get
            {
                if ((this.mUIItem1PivotGridCell == null))
                {
                    this.mUIItem1PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]0";
                    this.mUIItem1PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell1
        {
            get
            {
                if ((this.mUIItem1PivotGridCell1 == null))
                {
                    this.mUIItem1PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem1PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIKr100PivotGridCell
        {
            get
            {
                if ((this.mUIKr100PivotGridCell == null))
                {
                    this.mUIKr100PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr100PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]0";
                    this.mUIKr100PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr100PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIVollterSvenPivotGridFieldValue
        {
            get
            {
                if ((this.mUIVollterSvenPivotGridFieldValue == null))
                {
                    this.mUIVollterSvenPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIVollterSvenPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]1";
                    this.mUIVollterSvenPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIVollterSvenPivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIFPivotGridFieldValue
        {
            get
            {
                if ((this.mUIFPivotGridFieldValue == null))
                {
                    this.mUIFPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIFPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]ShiftClass[LastLevelIndex]1";
                    this.mUIFPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIFPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell2
        {
            get
            {
                if ((this.mUIItem1PivotGridCell2 == null))
                {
                    this.mUIItem1PivotGridCell2 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]1";
                    this.mUIItem1PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell2;
            }
        }
        
        public DXPivotGridCell UIItem6PivotGridCell
        {
            get
            {
                if ((this.mUIItem6PivotGridCell == null))
                {
                    this.mUIItem6PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem6PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem6PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr600PivotGridCell
        {
            get
            {
                if ((this.mUIKr600PivotGridCell == null))
                {
                    this.mUIKr600PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr600PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]1";
                    this.mUIKr600PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr600PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIItem01012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem01012016PivotGridFieldValue == null))
                {
                    this.mUIItem01012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem01012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]RateDate[LastLevelIndex]0";
                    this.mUIItem01012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem01012016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UISum31012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUISum31012016PivotGridFieldValue == null))
                {
                    this.mUISum31012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUISum31012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]2";
                    this.mUISum31012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUISum31012016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIEPivotGridFieldValue
        {
            get
            {
                if ((this.mUIEPivotGridFieldValue == null))
                {
                    this.mUIEPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIEPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]ShiftClass[LastLevelIndex]3";
                    this.mUIEPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIEPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell3
        {
            get
            {
                if ((this.mUIItem1PivotGridCell3 == null))
                {
                    this.mUIItem1PivotGridCell3 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]3";
                    this.mUIItem1PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell3;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell
        {
            get
            {
                if ((this.mUIItem5PivotGridCell == null))
                {
                    this.mUIItem5PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]3";
                    this.mUIItem5PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem5PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr500PivotGridCell
        {
            get
            {
                if ((this.mUIKr500PivotGridCell == null))
                {
                    this.mUIKr500PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr500PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]3";
                    this.mUIKr500PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr500PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIFPivotGridFieldValue1
        {
            get
            {
                if ((this.mUIFPivotGridFieldValue1 == null))
                {
                    this.mUIFPivotGridFieldValue1 = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIFPivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]ShiftClass[LastLevelIndex]4";
                    this.mUIFPivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIFPivotGridFieldValue1;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell4
        {
            get
            {
                if ((this.mUIItem1PivotGridCell4 == null))
                {
                    this.mUIItem1PivotGridCell4 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]4";
                    this.mUIItem1PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell4;
            }
        }
        
        public DXPivotGridCell UIItem6PivotGridCell1
        {
            get
            {
                if ((this.mUIItem6PivotGridCell1 == null))
                {
                    this.mUIItem6PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem6PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]4";
                    this.mUIItem6PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem6PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIKr600PivotGridCell1
        {
            get
            {
                if ((this.mUIKr600PivotGridCell1 == null))
                {
                    this.mUIKr600PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr600PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]4";
                    this.mUIKr600PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr600PivotGridCell1;
            }
        }
        
        public DXPivotGridFieldValue UISum31012016PivotGridFieldValue1
        {
            get
            {
                if ((this.mUISum31012016PivotGridFieldValue1 == null))
                {
                    this.mUISum31012016PivotGridFieldValue1 = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUISum31012016PivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]5";
                    this.mUISum31012016PivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUISum31012016PivotGridFieldValue1;
            }
        }
        
        public DXPivotGridFieldValue UIHPivotGridFieldValue
        {
            get
            {
                if ((this.mUIHPivotGridFieldValue == null))
                {
                    this.mUIHPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIHPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]ShiftClass[LastLevelIndex]5";
                    this.mUIHPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIHPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell5
        {
            get
            {
                if ((this.mUIItem1PivotGridCell5 == null))
                {
                    this.mUIItem1PivotGridCell5 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]5";
                    this.mUIItem1PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell5;
            }
        }
        
        public DXPivotGridCell UIItem8PivotGridCell
        {
            get
            {
                if ((this.mUIItem8PivotGridCell == null))
                {
                    this.mUIItem8PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]5";
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem8PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr800PivotGridCell
        {
            get
            {
                if ((this.mUIKr800PivotGridCell == null))
                {
                    this.mUIKr800PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr800PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]5";
                    this.mUIKr800PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr800PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr2100PivotGridCell
        {
            get
            {
                if ((this.mUIKr2100PivotGridCell == null))
                {
                    this.mUIKr2100PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr2100PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]6";
                    this.mUIKr2100PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr2100PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIItem11012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem11012016PivotGridFieldValue == null))
                {
                    this.mUIItem11012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem11012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]RateDate[LastLevelIndex]3";
                    this.mUIItem11012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem11012016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UISum31012016PivotGridFieldValue2
        {
            get
            {
                if ((this.mUISum31012016PivotGridFieldValue2 == null))
                {
                    this.mUISum31012016PivotGridFieldValue2 = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUISum31012016PivotGridFieldValue2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]6";
                    this.mUISum31012016PivotGridFieldValue2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUISum31012016PivotGridFieldValue2;
            }
        }
        
        public DXPivotGridCell UIKr10100PivotGridCell
        {
            get
            {
                if ((this.mUIKr10100PivotGridCell == null))
                {
                    this.mUIKr10100PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr10100PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]8[Row]0";
                    this.mUIKr10100PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr10100PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr20200PivotGridCell
        {
            get
            {
                if ((this.mUIKr20200PivotGridCell == null))
                {
                    this.mUIKr20200PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr20200PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]8[Row]1";
                    this.mUIKr20200PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr20200PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr30300PivotGridCell
        {
            get
            {
                if ((this.mUIKr30300PivotGridCell == null))
                {
                    this.mUIKr30300PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr30300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]8[Row]2";
                    this.mUIKr30300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr30300PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr600PivotGridCell2
        {
            get
            {
                if ((this.mUIKr600PivotGridCell2 == null))
                {
                    this.mUIKr600PivotGridCell2 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr600PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]8[Row]3";
                    this.mUIKr600PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr600PivotGridCell2;
            }
        }
        
        public DXPivotGridCell UIKr70000PivotGridCell
        {
            get
            {
                if ((this.mUIKr70000PivotGridCell == null))
                {
                    this.mUIKr70000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr70000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]8[Row]4";
                    this.mUIKr70000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr70000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr800PivotGridCell1
        {
            get
            {
                if ((this.mUIKr800PivotGridCell1 == null))
                {
                    this.mUIKr800PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr800PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]8[Row]5";
                    this.mUIKr800PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr800PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIKr71400PivotGridCell
        {
            get
            {
                if ((this.mUIKr71400PivotGridCell == null))
                {
                    this.mUIKr71400PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr71400PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]8[Row]6";
                    this.mUIKr71400PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr71400PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem2PivotGridCell
        {
            get
            {
                if ((this.mUIItem2PivotGridCell == null))
                {
                    this.mUIItem2PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]6[Row]0";
                    this.mUIItem2PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem2PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem2PivotGridCell1
        {
            get
            {
                if ((this.mUIItem2PivotGridCell1 == null))
                {
                    this.mUIItem2PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]6[Row]1";
                    this.mUIItem2PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem2PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem4PivotGridCell
        {
            get
            {
                if ((this.mUIItem4PivotGridCell == null))
                {
                    this.mUIItem4PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem4PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]6[Row]2";
                    this.mUIItem4PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem4PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell6
        {
            get
            {
                if ((this.mUIItem1PivotGridCell6 == null))
                {
                    this.mUIItem1PivotGridCell6 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]6[Row]3";
                    this.mUIItem1PivotGridCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell6;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell7
        {
            get
            {
                if ((this.mUIItem1PivotGridCell7 == null))
                {
                    this.mUIItem1PivotGridCell7 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]6[Row]4";
                    this.mUIItem1PivotGridCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell7;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell8
        {
            get
            {
                if ((this.mUIItem1PivotGridCell8 == null))
                {
                    this.mUIItem1PivotGridCell8 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]6[Row]5";
                    this.mUIItem1PivotGridCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell8;
            }
        }
        
        public DXPivotGridCell UIItem3PivotGridCell
        {
            get
            {
                if ((this.mUIItem3PivotGridCell == null))
                {
                    this.mUIItem3PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem3PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]6[Row]6";
                    this.mUIItem3PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem3PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIItem04012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem04012016PivotGridFieldValue == null))
                {
                    this.mUIItem04012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem04012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]0";
                    this.mUIItem04012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem04012016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem25012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem25012016PivotGridFieldValue == null))
                {
                    this.mUIItem25012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem25012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]3";
                    this.mUIItem25012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem25012016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem04012016PivotGridFieldValue1
        {
            get
            {
                if ((this.mUIItem04012016PivotGridFieldValue1 == null))
                {
                    this.mUIItem04012016PivotGridFieldValue1 = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem04012016PivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]7";
                    this.mUIItem04012016PivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem04012016PivotGridFieldValue1;
            }
        }
        
        public DXPivotGridFieldValue UIItem17012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem17012016PivotGridFieldValue == null))
                {
                    this.mUIItem17012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem17012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]0";
                    this.mUIItem17012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem17012016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem31012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem31012016PivotGridFieldValue == null))
                {
                    this.mUIItem31012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem31012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]3";
                    this.mUIItem31012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem31012016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem31012016PivotGridFieldValue1
        {
            get
            {
                if ((this.mUIItem31012016PivotGridFieldValue1 == null))
                {
                    this.mUIItem31012016PivotGridFieldValue1 = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem31012016PivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]7";
                    this.mUIItem31012016PivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem31012016PivotGridFieldValue1;
            }
        }
        
        public DXPivotGridFieldValue UISum31012016PivotGridFieldValue3
        {
            get
            {
                if ((this.mUISum31012016PivotGridFieldValue3 == null))
                {
                    this.mUISum31012016PivotGridFieldValue3 = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUISum31012016PivotGridFieldValue3.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]10";
                    this.mUISum31012016PivotGridFieldValue3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUISum31012016PivotGridFieldValue3;
            }
        }
        
        public DXPivotGridCell UIKr300PivotGridCell
        {
            get
            {
                if ((this.mUIKr300PivotGridCell == null))
                {
                    this.mUIKr300PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]2";
                    this.mUIKr300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr300PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell9
        {
            get
            {
                if ((this.mUIItem1PivotGridCell9 == null))
                {
                    this.mUIItem1PivotGridCell9 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]3[Row]0";
                    this.mUIItem1PivotGridCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell9;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell10
        {
            get
            {
                if ((this.mUIItem1PivotGridCell10 == null))
                {
                    this.mUIItem1PivotGridCell10 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]3[Row]1";
                    this.mUIItem1PivotGridCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell10;
            }
        }
        
        public DXPivotGridCell UIItem2PivotGridCell2
        {
            get
            {
                if ((this.mUIItem2PivotGridCell2 == null))
                {
                    this.mUIItem2PivotGridCell2 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]3[Row]2";
                    this.mUIItem2PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem2PivotGridCell2;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell11
        {
            get
            {
                if ((this.mUIItem1PivotGridCell11 == null))
                {
                    this.mUIItem1PivotGridCell11 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]3[Row]3";
                    this.mUIItem1PivotGridCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell11;
            }
        }
        
        public DXPivotGridCell UIItem1PivotGridCell12
        {
            get
            {
                if ((this.mUIItem1PivotGridCell12 == null))
                {
                    this.mUIItem1PivotGridCell12 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1PivotGridCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]3[Row]4";
                    this.mUIItem1PivotGridCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1PivotGridCell12;
            }
        }
        
        public DXPivotGridCell UIItem2PivotGridCell3
        {
            get
            {
                if ((this.mUIItem2PivotGridCell3 == null))
                {
                    this.mUIItem2PivotGridCell3 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]3[Row]5";
                    this.mUIItem2PivotGridCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem2PivotGridCell3;
            }
        }
        
        public DXPivotGridCell UIItem4PivotGridCell1
        {
            get
            {
                if ((this.mUIItem4PivotGridCell1 == null))
                {
                    this.mUIItem4PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem4PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]3[Row]6";
                    this.mUIItem4PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem4PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIKr10000PivotGridCell
        {
            get
            {
                if ((this.mUIKr10000PivotGridCell == null))
                {
                    this.mUIKr10000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr10000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]5[Row]0";
                    this.mUIKr10000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr10000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr20000PivotGridCell
        {
            get
            {
                if ((this.mUIKr20000PivotGridCell == null))
                {
                    this.mUIKr20000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr20000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]5[Row]1";
                    this.mUIKr20000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr20000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr30000PivotGridCell
        {
            get
            {
                if ((this.mUIKr30000PivotGridCell == null))
                {
                    this.mUIKr30000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr30000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]5[Row]2";
                    this.mUIKr30000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr30000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr10000PivotGridCell1
        {
            get
            {
                if ((this.mUIKr10000PivotGridCell1 == null))
                {
                    this.mUIKr10000PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr10000PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]5[Row]3";
                    this.mUIKr10000PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr10000PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIKr50000PivotGridCell
        {
            get
            {
                if ((this.mUIKr50000PivotGridCell == null))
                {
                    this.mUIKr50000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr50000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]5[Row]4";
                    this.mUIKr50000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr50000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr60000PivotGridCell
        {
            get
            {
                if ((this.mUIKr60000PivotGridCell == null))
                {
                    this.mUIKr60000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr60000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]5[Row]5";
                    this.mUIKr60000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr60000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr90000PivotGridCell
        {
            get
            {
                if ((this.mUIKr90000PivotGridCell == null))
                {
                    this.mUIKr90000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr90000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]5[Row]6";
                    this.mUIKr90000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr90000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem505PivotGridCell
        {
            get
            {
                if ((this.mUIItem505PivotGridCell == null))
                {
                    this.mUIItem505PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem505PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]7[Row]0";
                    this.mUIItem505PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem505PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem101PivotGridCell
        {
            get
            {
                if ((this.mUIItem101PivotGridCell == null))
                {
                    this.mUIItem101PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem101PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]7[Row]1";
                    this.mUIItem101PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem101PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem7575PivotGridCell
        {
            get
            {
                if ((this.mUIItem7575PivotGridCell == null))
                {
                    this.mUIItem7575PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem7575PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]7[Row]2";
                    this.mUIItem7575PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem7575PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem100PivotGridCell
        {
            get
            {
                if ((this.mUIItem100PivotGridCell == null))
                {
                    this.mUIItem100PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem100PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]7[Row]3";
                    this.mUIItem100PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem100PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem500PivotGridCell
        {
            get
            {
                if ((this.mUIItem500PivotGridCell == null))
                {
                    this.mUIItem500PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem500PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]7[Row]4";
                    this.mUIItem500PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem500PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem300PivotGridCell
        {
            get
            {
                if ((this.mUIItem300PivotGridCell == null))
                {
                    this.mUIItem300PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]7[Row]5";
                    this.mUIItem300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem300PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem1505PivotGridCell
        {
            get
            {
                if ((this.mUIItem1505PivotGridCell == null))
                {
                    this.mUIItem1505PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1505PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]7[Row]6";
                    this.mUIItem1505PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem1505PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIItem25012016PivotGridFieldValue1
        {
            get
            {
                if ((this.mUIItem25012016PivotGridFieldValue1 == null))
                {
                    this.mUIItem25012016PivotGridFieldValue1 = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem25012016PivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]4";
                    this.mUIItem25012016PivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem25012016PivotGridFieldValue1;
            }
        }
        
        public DXPivotGridFieldValue UIItem31012016PivotGridFieldValue2
        {
            get
            {
                if ((this.mUIItem31012016PivotGridFieldValue2 == null))
                {
                    this.mUIItem31012016PivotGridFieldValue2 = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem31012016PivotGridFieldValue2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]4";
                    this.mUIItem31012016PivotGridFieldValue2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem31012016PivotGridFieldValue2;
            }
        }
        
        public DXPivotGridCell UIKr190300PivotGridCell
        {
            get
            {
                if ((this.mUIKr190300PivotGridCell == null))
                {
                    this.mUIKr190300PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr190300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]8[Row]7";
                    this.mUIKr190300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr190300PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem27186PivotGridCell
        {
            get
            {
                if ((this.mUIItem27186PivotGridCell == null))
                {
                    this.mUIItem27186PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem27186PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]7[Row]7";
                    this.mUIItem27186PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem27186PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem7PivotGridCell
        {
            get
            {
                if ((this.mUIItem7PivotGridCell == null))
                {
                    this.mUIItem7PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem7PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]6[Row]7";
                    this.mUIItem7PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem7PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr190000PivotGridCell
        {
            get
            {
                if ((this.mUIKr190000PivotGridCell == null))
                {
                    this.mUIKr190000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr190000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]5[Row]7";
                    this.mUIKr190000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr190000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem380PivotGridCell
        {
            get
            {
                if ((this.mUIItem380PivotGridCell == null))
                {
                    this.mUIItem380PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem380PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]4[Row]7";
                    this.mUIItem380PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem380PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem5PivotGridCell1
        {
            get
            {
                if ((this.mUIItem5PivotGridCell1 == null))
                {
                    this.mUIItem5PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]3[Row]7";
                    this.mUIItem5PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem5PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIKr300PivotGridCell1
        {
            get
            {
                if ((this.mUIKr300PivotGridCell1 == null))
                {
                    this.mUIKr300PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr300PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]7";
                    this.mUIKr300PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr300PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem15PivotGridCell
        {
            get
            {
                if ((this.mUIItem15PivotGridCell == null))
                {
                    this.mUIItem15PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem15PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]7";
                    this.mUIItem15PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem15PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem2PivotGridCell4
        {
            get
            {
                if ((this.mUIItem2PivotGridCell4 == null))
                {
                    this.mUIItem2PivotGridCell4 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]7";
                    this.mUIItem2PivotGridCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem2PivotGridCell4;
            }
        }
        
        public DXPivotGridCell UIItem2PivotGridCell5
        {
            get
            {
                if ((this.mUIItem2PivotGridCell5 == null))
                {
                    this.mUIItem2PivotGridCell5 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]2";
                    this.mUIItem2PivotGridCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem2PivotGridCell5;
            }
        }
        
        public DXPivotGridCell UIItem15PivotGridCell1
        {
            get
            {
                if ((this.mUIItem15PivotGridCell1 == null))
                {
                    this.mUIItem15PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem15PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]2";
                    this.mUIItem15PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem15PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem150PivotGridCell
        {
            get
            {
                if ((this.mUIItem150PivotGridCell == null))
                {
                    this.mUIItem150PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem150PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]4[Row]2";
                    this.mUIItem150PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem150PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIItem04012016PivotGridFieldValue2
        {
            get
            {
                if ((this.mUIItem04012016PivotGridFieldValue2 == null))
                {
                    this.mUIItem04012016PivotGridFieldValue2 = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem04012016PivotGridFieldValue2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]5";
                    this.mUIItem04012016PivotGridFieldValue2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem04012016PivotGridFieldValue2;
            }
        }
        
        public DXPivotGridFieldValue UIGPivotGridFieldValue
        {
            get
            {
                if ((this.mUIGPivotGridFieldValue == null))
                {
                    this.mUIGPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIGPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]ShiftClass[LastLevelIndex]2";
                    this.mUIGPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIGPivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIKulleNilsPivotGridFieldValue
        {
            get
            {
                if ((this.mUIKulleNilsPivotGridFieldValue == null))
                {
                    this.mUIKulleNilsPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIKulleNilsPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]5";
                    this.mUIKulleNilsPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIKulleNilsPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem13125PivotGridCell
        {
            get
            {
                if ((this.mUIItem13125PivotGridCell == null))
                {
                    this.mUIItem13125PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem13125PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]4[Row]4";
                    this.mUIItem13125PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem13125PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIVollterSvenPivotGridFieldValue1
        {
            get
            {
                if ((this.mUIVollterSvenPivotGridFieldValue1 == null))
                {
                    this.mUIVollterSvenPivotGridFieldValue1 = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIVollterSvenPivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]3";
                    this.mUIVollterSvenPivotGridFieldValue1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIVollterSvenPivotGridFieldValue1;
            }
        }
        
        public DXPivotGridCell UIItem4PivotGridCell2
        {
            get
            {
                if ((this.mUIItem4PivotGridCell2 == null))
                {
                    this.mUIItem4PivotGridCell2 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem4PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]6";
                    this.mUIItem4PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem4PivotGridCell2;
            }
        }
        
        public DXPivotGridCell UIItem7PivotGridCell1
        {
            get
            {
                if ((this.mUIItem7PivotGridCell1 == null))
                {
                    this.mUIItem7PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem7PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]6";
                    this.mUIItem7PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem7PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem100PivotGridCell1
        {
            get
            {
                if ((this.mUIItem100PivotGridCell1 == null))
                {
                    this.mUIItem100PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem100PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]4[Row]0";
                    this.mUIItem100PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem100PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem200PivotGridCell
        {
            get
            {
                if ((this.mUIItem200PivotGridCell == null))
                {
                    this.mUIItem200PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem200PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]4[Row]1";
                    this.mUIItem200PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem200PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem700PivotGridCell
        {
            get
            {
                if ((this.mUIItem700PivotGridCell == null))
                {
                    this.mUIItem700PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem700PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]4[Row]6";
                    this.mUIItem700PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem700PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIItem18012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem18012016PivotGridFieldValue == null))
                {
                    this.mUIItem18012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem18012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]RateDate[LastLevelIndex]6";
                    this.mUIItem18012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem18012016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem9PivotGridCell
        {
            get
            {
                if ((this.mUIItem9PivotGridCell == null))
                {
                    this.mUIItem9PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem9PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]9[Row]0";
                    this.mUIItem9PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem9PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem9PivotGridCell1
        {
            get
            {
                if ((this.mUIItem9PivotGridCell1 == null))
                {
                    this.mUIItem9PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem9PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]9[Row]1";
                    this.mUIItem9PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem9PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem3PivotGridCell1
        {
            get
            {
                if ((this.mUIItem3PivotGridCell1 == null))
                {
                    this.mUIItem3PivotGridCell1 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem3PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]9[Row]2";
                    this.mUIItem3PivotGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem3PivotGridCell1;
            }
        }
        
        public DXPivotGridCell UIItem3PivotGridCell2
        {
            get
            {
                if ((this.mUIItem3PivotGridCell2 == null))
                {
                    this.mUIItem3PivotGridCell2 = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem3PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]9[Row]3";
                    this.mUIItem3PivotGridCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem3PivotGridCell2;
            }
        }
        
        public DXPivotGridCell UIItem24PivotGridCell
        {
            get
            {
                if ((this.mUIItem24PivotGridCell == null))
                {
                    this.mUIItem24PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem24PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]9[Row]4";
                    this.mUIItem24PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem24PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem60PivotGridCell
        {
            get
            {
                if ((this.mUIItem60PivotGridCell == null))
                {
                    this.mUIItem60PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem60PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]9[Row]5";
                    this.mUIItem60PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem60PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem3367PivotGridCell
        {
            get
            {
                if ((this.mUIItem3367PivotGridCell == null))
                {
                    this.mUIItem3367PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem3367PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]10[Row]0";
                    this.mUIItem3367PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem3367PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem4835PivotGridCell
        {
            get
            {
                if ((this.mUIItem4835PivotGridCell == null))
                {
                    this.mUIItem4835PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem4835PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]10[Row]1";
                    this.mUIItem4835PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem4835PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem5569PivotGridCell
        {
            get
            {
                if ((this.mUIItem5569PivotGridCell == null))
                {
                    this.mUIItem5569PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5569PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]10[Row]2";
                    this.mUIItem5569PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem5569PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem5936PivotGridCell
        {
            get
            {
                if ((this.mUIItem5936PivotGridCell == null))
                {
                    this.mUIItem5936PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem5936PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]10[Row]3";
                    this.mUIItem5936PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem5936PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem451388PivotGridCell
        {
            get
            {
                if ((this.mUIItem451388PivotGridCell == null))
                {
                    this.mUIItem451388PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem451388PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]10[Row]4";
                    this.mUIItem451388PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem451388PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem4101PivotGridCell
        {
            get
            {
                if ((this.mUIItem4101PivotGridCell == null))
                {
                    this.mUIItem4101PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem4101PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]10[Row]5";
                    this.mUIItem4101PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIItem4101PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr3030300PivotGridCell
        {
            get
            {
                if ((this.mUIKr3030300PivotGridCell == null))
                {
                    this.mUIKr3030300PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr3030300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]11[Row]0";
                    this.mUIKr3030300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr3030300PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr4351500PivotGridCell
        {
            get
            {
                if ((this.mUIKr4351500PivotGridCell == null))
                {
                    this.mUIKr4351500PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr4351500PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]11[Row]1";
                    this.mUIKr4351500PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr4351500PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr1670700PivotGridCell
        {
            get
            {
                if ((this.mUIKr1670700PivotGridCell == null))
                {
                    this.mUIKr1670700PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr1670700PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]11[Row]2";
                    this.mUIKr1670700PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr1670700PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr1780800PivotGridCell
        {
            get
            {
                if ((this.mUIKr1780800PivotGridCell == null))
                {
                    this.mUIKr1780800PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr1780800PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]11[Row]3";
                    this.mUIKr1780800PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr1780800PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr10833300PivotGridCell
        {
            get
            {
                if ((this.mUIKr10833300PivotGridCell == null))
                {
                    this.mUIKr10833300PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr10833300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]11[Row]4";
                    this.mUIKr10833300PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr10833300PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr24606000PivotGridCell
        {
            get
            {
                if ((this.mUIKr24606000PivotGridCell == null))
                {
                    this.mUIKr24606000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr24606000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]11[Row]5";
                    this.mUIKr24606000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr24606000PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIOscarssonPerPivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIAPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem1PivotGridCell;
        
        private DXPivotGridCell mUIItem1PivotGridCell1;
        
        private DXPivotGridCell mUIKr100PivotGridCell;
        
        private DXPivotGridFieldValue mUIVollterSvenPivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIFPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem1PivotGridCell2;
        
        private DXPivotGridCell mUIItem6PivotGridCell;
        
        private DXPivotGridCell mUIKr600PivotGridCell;
        
        private DXPivotGridFieldValue mUIItem01012016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUISum31012016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIEPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem1PivotGridCell3;
        
        private DXPivotGridCell mUIItem5PivotGridCell;
        
        private DXPivotGridCell mUIKr500PivotGridCell;
        
        private DXPivotGridFieldValue mUIFPivotGridFieldValue1;
        
        private DXPivotGridCell mUIItem1PivotGridCell4;
        
        private DXPivotGridCell mUIItem6PivotGridCell1;
        
        private DXPivotGridCell mUIKr600PivotGridCell1;
        
        private DXPivotGridFieldValue mUISum31012016PivotGridFieldValue1;
        
        private DXPivotGridFieldValue mUIHPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem1PivotGridCell5;
        
        private DXPivotGridCell mUIItem8PivotGridCell;
        
        private DXPivotGridCell mUIKr800PivotGridCell;
        
        private DXPivotGridCell mUIKr2100PivotGridCell;
        
        private DXPivotGridFieldValue mUIItem11012016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUISum31012016PivotGridFieldValue2;
        
        private DXPivotGridCell mUIKr10100PivotGridCell;
        
        private DXPivotGridCell mUIKr20200PivotGridCell;
        
        private DXPivotGridCell mUIKr30300PivotGridCell;
        
        private DXPivotGridCell mUIKr600PivotGridCell2;
        
        private DXPivotGridCell mUIKr70000PivotGridCell;
        
        private DXPivotGridCell mUIKr800PivotGridCell1;
        
        private DXPivotGridCell mUIKr71400PivotGridCell;
        
        private DXPivotGridCell mUIItem2PivotGridCell;
        
        private DXPivotGridCell mUIItem2PivotGridCell1;
        
        private DXPivotGridCell mUIItem4PivotGridCell;
        
        private DXPivotGridCell mUIItem1PivotGridCell6;
        
        private DXPivotGridCell mUIItem1PivotGridCell7;
        
        private DXPivotGridCell mUIItem1PivotGridCell8;
        
        private DXPivotGridCell mUIItem3PivotGridCell;
        
        private DXPivotGridFieldValue mUIItem04012016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem25012016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem04012016PivotGridFieldValue1;
        
        private DXPivotGridFieldValue mUIItem17012016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem31012016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem31012016PivotGridFieldValue1;
        
        private DXPivotGridFieldValue mUISum31012016PivotGridFieldValue3;
        
        private DXPivotGridCell mUIKr300PivotGridCell;
        
        private DXPivotGridCell mUIItem1PivotGridCell9;
        
        private DXPivotGridCell mUIItem1PivotGridCell10;
        
        private DXPivotGridCell mUIItem2PivotGridCell2;
        
        private DXPivotGridCell mUIItem1PivotGridCell11;
        
        private DXPivotGridCell mUIItem1PivotGridCell12;
        
        private DXPivotGridCell mUIItem2PivotGridCell3;
        
        private DXPivotGridCell mUIItem4PivotGridCell1;
        
        private DXPivotGridCell mUIKr10000PivotGridCell;
        
        private DXPivotGridCell mUIKr20000PivotGridCell;
        
        private DXPivotGridCell mUIKr30000PivotGridCell;
        
        private DXPivotGridCell mUIKr10000PivotGridCell1;
        
        private DXPivotGridCell mUIKr50000PivotGridCell;
        
        private DXPivotGridCell mUIKr60000PivotGridCell;
        
        private DXPivotGridCell mUIKr90000PivotGridCell;
        
        private DXPivotGridCell mUIItem505PivotGridCell;
        
        private DXPivotGridCell mUIItem101PivotGridCell;
        
        private DXPivotGridCell mUIItem7575PivotGridCell;
        
        private DXPivotGridCell mUIItem100PivotGridCell;
        
        private DXPivotGridCell mUIItem500PivotGridCell;
        
        private DXPivotGridCell mUIItem300PivotGridCell;
        
        private DXPivotGridCell mUIItem1505PivotGridCell;
        
        private DXPivotGridFieldValue mUIItem25012016PivotGridFieldValue1;
        
        private DXPivotGridFieldValue mUIItem31012016PivotGridFieldValue2;
        
        private DXPivotGridCell mUIKr190300PivotGridCell;
        
        private DXPivotGridCell mUIItem27186PivotGridCell;
        
        private DXPivotGridCell mUIItem7PivotGridCell;
        
        private DXPivotGridCell mUIKr190000PivotGridCell;
        
        private DXPivotGridCell mUIItem380PivotGridCell;
        
        private DXPivotGridCell mUIItem5PivotGridCell1;
        
        private DXPivotGridCell mUIKr300PivotGridCell1;
        
        private DXPivotGridCell mUIItem15PivotGridCell;
        
        private DXPivotGridCell mUIItem2PivotGridCell4;
        
        private DXPivotGridCell mUIItem2PivotGridCell5;
        
        private DXPivotGridCell mUIItem15PivotGridCell1;
        
        private DXPivotGridCell mUIItem150PivotGridCell;
        
        private DXPivotGridFieldValue mUIItem04012016PivotGridFieldValue2;
        
        private DXPivotGridFieldValue mUIGPivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIKulleNilsPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem13125PivotGridCell;
        
        private DXPivotGridFieldValue mUIVollterSvenPivotGridFieldValue1;
        
        private DXPivotGridCell mUIItem4PivotGridCell2;
        
        private DXPivotGridCell mUIItem7PivotGridCell1;
        
        private DXPivotGridCell mUIItem100PivotGridCell1;
        
        private DXPivotGridCell mUIItem200PivotGridCell;
        
        private DXPivotGridCell mUIItem700PivotGridCell;
        
        private DXPivotGridFieldValue mUIItem18012016PivotGridFieldValue;
        
        private DXPivotGridCell mUIItem9PivotGridCell;
        
        private DXPivotGridCell mUIItem9PivotGridCell1;
        
        private DXPivotGridCell mUIItem3PivotGridCell1;
        
        private DXPivotGridCell mUIItem3PivotGridCell2;
        
        private DXPivotGridCell mUIItem24PivotGridCell;
        
        private DXPivotGridCell mUIItem60PivotGridCell;
        
        private DXPivotGridCell mUIItem3367PivotGridCell;
        
        private DXPivotGridCell mUIItem4835PivotGridCell;
        
        private DXPivotGridCell mUIItem5569PivotGridCell;
        
        private DXPivotGridCell mUIItem5936PivotGridCell;
        
        private DXPivotGridCell mUIItem451388PivotGridCell;
        
        private DXPivotGridCell mUIItem4101PivotGridCell;
        
        private DXPivotGridCell mUIKr3030300PivotGridCell;
        
        private DXPivotGridCell mUIKr4351500PivotGridCell;
        
        private DXPivotGridCell mUIKr1670700PivotGridCell;
        
        private DXPivotGridCell mUIKr1780800PivotGridCell;
        
        private DXPivotGridCell mUIKr10833300PivotGridCell;
        
        private DXPivotGridCell mUIKr24606000PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcResultsPivotGrid1 : DXPivotGrid
    {
        
        public UIPgcResultsPivotGrid1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIItem08012024PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem08012024PivotGridFieldValue == null))
                {
                    this.mUIItem08012024PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem08012024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]0";
                    this.mUIItem08012024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem08012024PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem28012024PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem28012024PivotGridFieldValue == null))
                {
                    this.mUIItem28012024PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem28012024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]0";
                    this.mUIItem28012024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem28012024PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UISum28012024PivotGridFieldValue
        {
            get
            {
                if ((this.mUISum28012024PivotGridFieldValue == null))
                {
                    this.mUISum28012024PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUISum28012024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]4";
                    this.mUISum28012024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUISum28012024PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem29012024PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem29012024PivotGridFieldValue == null))
                {
                    this.mUIItem29012024PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem29012024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]5";
                    this.mUIItem29012024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem29012024PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem25022024PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem25022024PivotGridFieldValue == null))
                {
                    this.mUIItem25022024PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem25022024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]5";
                    this.mUIItem25022024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem25022024PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UINyqvistMikaelPivotGridFieldValue
        {
            get
            {
                if ((this.mUINyqvistMikaelPivotGridFieldValue == null))
                {
                    this.mUINyqvistMikaelPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUINyqvistMikaelPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]0";
                    this.mUINyqvistMikaelPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUINyqvistMikaelPivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIKulleNilsPivotGridFieldValue
        {
            get
            {
                if ((this.mUIKulleNilsPivotGridFieldValue == null))
                {
                    this.mUIKulleNilsPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIKulleNilsPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]5";
                    this.mUIKulleNilsPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIKulleNilsPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIKr10500000PivotGridCell
        {
            get
            {
                if ((this.mUIKr10500000PivotGridCell == null))
                {
                    this.mUIKr10500000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr10500000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]4";
                    this.mUIKr10500000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr10500000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr24000000PivotGridCell
        {
            get
            {
                if ((this.mUIKr24000000PivotGridCell == null))
                {
                    this.mUIKr24000000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr24000000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]5";
                    this.mUIKr24000000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr24000000PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIItem15012024PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem15012024PivotGridFieldValue == null))
                {
                    this.mUIItem15012024PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem15012024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]RateDate[LastLevelIndex]3";
                    this.mUIItem15012024PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    #endregion
                }
                return this.mUIItem15012024PivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIKr330000PivotGridCell
        {
            get
            {
                if ((this.mUIKr330000PivotGridCell == null))
                {
                    this.mUIKr330000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr330000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]5[Row]4";
                    this.mUIKr330000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr330000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr600000PivotGridCell
        {
            get
            {
                if ((this.mUIKr600000PivotGridCell == null))
                {
                    this.mUIKr600000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr600000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]5[Row]5";
                    this.mUIKr600000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr600000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr10830000PivotGridCell
        {
            get
            {
                if ((this.mUIKr10830000PivotGridCell == null))
                {
                    this.mUIKr10830000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr10830000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]8[Row]4";
                    this.mUIKr10830000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr10830000PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIKr24600000PivotGridCell
        {
            get
            {
                if ((this.mUIKr24600000PivotGridCell == null))
                {
                    this.mUIKr24600000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIKr24600000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]8[Row]5";
                    this.mUIKr24600000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    #endregion
                }
                return this.mUIKr24600000PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIItem08012024PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem28012024PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUISum28012024PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem29012024PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem25022024PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUINyqvistMikaelPivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIKulleNilsPivotGridFieldValue;
        
        private DXPivotGridCell mUIKr10500000PivotGridCell;
        
        private DXPivotGridCell mUIKr24000000PivotGridCell;
        
        private DXPivotGridFieldValue mUIItem15012024PivotGridFieldValue;
        
        private DXPivotGridCell mUIKr330000PivotGridCell;
        
        private DXPivotGridCell mUIKr600000PivotGridCell;
        
        private DXPivotGridCell mUIKr10830000PivotGridCell;
        
        private DXPivotGridCell mUIKr24600000PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow1 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient10 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient10(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIDpnlVisualizationDockPanel20 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel20(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient10 mUIPnlRosterPlanClient;
        
        private UIDpnlVisualizationDockPanel20 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient10 : DXTestControl
    {
        
        public UIPnlRosterPlanClient10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable10 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable10(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable10 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable10 : DXGrid
    {
        
        public UIGcRosterPlanTable10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit == null))
                {
                    this.mUIRow0ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_3";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit == null))
                {
                    this.mUIRow1ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_3";
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_6";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_6";
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit1;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_7";
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_12";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit11
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit11 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit11 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_12";
                    this.mUIRow0ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit11.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit11;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_15";
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_16";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit12
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit12 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit12 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_16";
                    this.mUIRow0ColumnRosterCellEdit12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit12.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit12;
            }
        }
        
        public DXCell UIItemCell21
        {
            get
            {
                if ((this.mUIItemCell21 == null))
                {
                    this.mUIItemCell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_23";
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell21.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell21;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_23";
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell22
        {
            get
            {
                if ((this.mUIItemCell22 == null))
                {
                    this.mUIItemCell22 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_23";
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell22.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell22;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit21
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit21 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit21 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_23";
                    this.mUIRow0ColumnRosterCellEdit21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit21.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit21;
            }
        }
        
        public DXCell UIItemCell13
        {
            get
            {
                if ((this.mUIItemCell13 == null))
                {
                    this.mUIItemCell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_10";
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell13.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell13;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit11
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit11 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit11 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_10";
                    this.mUIRow1ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit11.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit11;
            }
        }
        
        public DXCell UIItemCell23
        {
            get
            {
                if ((this.mUIItemCell23 == null))
                {
                    this.mUIItemCell23 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell23.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_17";
                    this.mUIItemCell23.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell23.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell23;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit21
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit21 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit21 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_17";
                    this.mUIRow1ColumnRosterCellEdit21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit21.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit21;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_24";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_24";
                    this.mUIRow1ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit22
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit22 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit22 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit22.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIRow1ColumnRosterCellEdit22.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit22.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Redigeringsmodus [Planen er låst av deg])");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit22;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit;
        
        private DXCell mUIItemCell1;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit;
        
        private DXCell mUIItemCell2;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit1;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell11;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit11;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell12;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit12;
        
        private DXCell mUIItemCell21;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell22;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit21;
        
        private DXCell mUIItemCell13;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit11;
        
        private DXCell mUIItemCell23;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit21;
        
        private DXCell mUIItemCell3;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit3;
        
        private DXCell mUIItemCell4;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit22;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel20 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom20 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom20(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom20 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom20 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList20 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList20(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList20 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList20 : DXTestControl
    {
        
        public UITcVisualizationTabList20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient20 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient20(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient20 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient20 : DXTestControl
    {
        
        public UITpFixedPaymentClient20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom40 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom40(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom40 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom40 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom40(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom20 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom20(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom20 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom20 : DXTestControl
    {
        
        public UIViewHost1Custom20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient22 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient22(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient22 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient22 : DXTestControl
    {
        
        public UIPcViewClient22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom41 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom41(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom41 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom41 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid19 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid19(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid19 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid19 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem11PivotGridCell
        {
            get
            {
                if ((this.mUIItem11PivotGridCell == null))
                {
                    this.mUIItem11PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem11PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem11PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem11PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem11PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem11PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow2 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow2()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel21 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel21(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel21 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel21 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom21 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom21(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom21 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom21 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList21 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList21(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList21 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList21 : DXTestControl
    {
        
        public UITcVisualizationTabList21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient21 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient21(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient21 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient21 : DXTestControl
    {
        
        public UITpFixedPaymentClient21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom42 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom42(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom42 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom42 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom42(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom21 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom21(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom21 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom21 : DXTestControl
    {
        
        public UIViewHost1Custom21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient23 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient23(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient23 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient23 : DXTestControl
    {
        
        public UIPcViewClient23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom43 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom43(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom43 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom43 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom43(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid20 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid20(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid20 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid20 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem28PivotGridCell
        {
            get
            {
                if ((this.mUIItem28PivotGridCell == null))
                {
                    this.mUIItem28PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem28PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem28PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem28PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem28PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem28PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIVaktklassesatserWindow : DXWindow
    {
        
        public UIVaktklassesatserWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Vaktklassesatser";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Vaktklassesatser");
            #endregion
        }
        
        #region Properties
        public DXButton UINYButton
        {
            get
            {
                if ((this.mUINYButton == null))
                {
                    this.mUINYButton = new DXButton(this);
                    #region Search Criteria
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnNew";
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUINYButton.WindowTitles.Add("Vaktklassesatser");
                    #endregion
                }
                return this.mUINYButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUINYButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINyevaktklassesatserWindow : DXWindow
    {
        
        public UINyevaktklassesatserWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Nye vaktklassesatser";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Nye vaktklassesatser");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIDeEffectiveFromEdit
        {
            get
            {
                if ((this.mUIDeEffectiveFromEdit == null))
                {
                    this.mUIDeEffectiveFromEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIDeEffectiveFromEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "deEffectiveFrom";
                    this.mUIDeEffectiveFromEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIDeEffectiveFromEdit.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIDeEffectiveFromEdit;
            }
        }
        
        public UIGcShiftClassRatesTable UIGcShiftClassRatesTable
        {
            get
            {
                if ((this.mUIGcShiftClassRatesTable == null))
                {
                    this.mUIGcShiftClassRatesTable = new UIGcShiftClassRatesTable(this);
                }
                return this.mUIGcShiftClassRatesTable;
            }
        }
        
        public DXButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new DXButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnClose";
                    this.mUICloseButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUICloseButton.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIDeEffectiveFromEdit;
        
        private UIGcShiftClassRatesTable mUIGcShiftClassRatesTable;
        
        private DXButton mUICloseButton;
        
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcShiftClassRatesTable : DXGrid
    {
        
        public UIGcShiftClassRatesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRates";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Nye vaktklassesatser");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem100Cell
        {
            get
            {
                if ((this.mUIItem100Cell == null))
                {
                    this.mUIItem100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesGridControlCell[View]gvShiftClassRates[Row]0[Column]colAmount";
                    this.mUIItem100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem100Cell.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIItem100Cell;
            }
        }
        
        public DXTextEdit UIRow0ColumncolAmountEdit
        {
            get
            {
                if ((this.mUIRow0ColumncolAmountEdit == null))
                {
                    this.mUIRow0ColumncolAmountEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesTextEdit[View]gvShiftClassRates[Row]0[Column]colAmount";
                    this.mUIRow0ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumncolAmountEdit.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIRow0ColumncolAmountEdit;
            }
        }
        
        public DXCell UIItem200Cell
        {
            get
            {
                if ((this.mUIItem200Cell == null))
                {
                    this.mUIItem200Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesGridControlCell[View]gvShiftClassRates[Row]1[Column]colAmount";
                    this.mUIItem200Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200Cell.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIItem200Cell;
            }
        }
        
        public DXTextEdit UIRow1ColumncolAmountEdit
        {
            get
            {
                if ((this.mUIRow1ColumncolAmountEdit == null))
                {
                    this.mUIRow1ColumncolAmountEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesTextEdit[View]gvShiftClassRates[Row]1[Column]colAmount";
                    this.mUIRow1ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumncolAmountEdit.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIRow1ColumncolAmountEdit;
            }
        }
        
        public DXCell UIItem300Cell
        {
            get
            {
                if ((this.mUIItem300Cell == null))
                {
                    this.mUIItem300Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem300Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesGridControlCell[View]gvShiftClassRates[Row]2[Column]colAmount";
                    this.mUIItem300Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem300Cell.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIItem300Cell;
            }
        }
        
        public DXTextEdit UIRow2ColumncolAmountEdit
        {
            get
            {
                if ((this.mUIRow2ColumncolAmountEdit == null))
                {
                    this.mUIRow2ColumncolAmountEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesTextEdit[View]gvShiftClassRates[Row]2[Column]colAmount";
                    this.mUIRow2ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumncolAmountEdit.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIRow2ColumncolAmountEdit;
            }
        }
        
        public DXCell UIItem400Cell
        {
            get
            {
                if ((this.mUIItem400Cell == null))
                {
                    this.mUIItem400Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem400Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesGridControlCell[View]gvShiftClassRates[Row]3[Column]colAmount";
                    this.mUIItem400Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem400Cell.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIItem400Cell;
            }
        }
        
        public DXTextEdit UIRow3ColumncolAmountEdit
        {
            get
            {
                if ((this.mUIRow3ColumncolAmountEdit == null))
                {
                    this.mUIRow3ColumncolAmountEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesTextEdit[View]gvShiftClassRates[Row]3[Column]colAmount";
                    this.mUIRow3ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumncolAmountEdit.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIRow3ColumncolAmountEdit;
            }
        }
        
        public DXCell UIItem500Cell
        {
            get
            {
                if ((this.mUIItem500Cell == null))
                {
                    this.mUIItem500Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem500Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesGridControlCell[View]gvShiftClassRates[Row]4[Column]colAmount";
                    this.mUIItem500Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem500Cell.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIItem500Cell;
            }
        }
        
        public DXTextEdit UIRow4ColumncolAmountEdit
        {
            get
            {
                if ((this.mUIRow4ColumncolAmountEdit == null))
                {
                    this.mUIRow4ColumncolAmountEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesTextEdit[View]gvShiftClassRates[Row]4[Column]colAmount";
                    this.mUIRow4ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumncolAmountEdit.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIRow4ColumncolAmountEdit;
            }
        }
        
        public DXCell UIItem600Cell
        {
            get
            {
                if ((this.mUIItem600Cell == null))
                {
                    this.mUIItem600Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem600Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesGridControlCell[View]gvShiftClassRates[Row]5[Column]colAmount";
                    this.mUIItem600Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem600Cell.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIItem600Cell;
            }
        }
        
        public DXTextEdit UIRow5ColumncolAmountEdit
        {
            get
            {
                if ((this.mUIRow5ColumncolAmountEdit == null))
                {
                    this.mUIRow5ColumncolAmountEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow5ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesTextEdit[View]gvShiftClassRates[Row]5[Column]colAmount";
                    this.mUIRow5ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow5ColumncolAmountEdit.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIRow5ColumncolAmountEdit;
            }
        }
        
        public DXCell UIItem700Cell
        {
            get
            {
                if ((this.mUIItem700Cell == null))
                {
                    this.mUIItem700Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem700Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesGridControlCell[View]gvShiftClassRates[Row]6[Column]colAmount";
                    this.mUIItem700Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem700Cell.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIItem700Cell;
            }
        }
        
        public DXTextEdit UIRow6ColumncolAmountEdit
        {
            get
            {
                if ((this.mUIRow6ColumncolAmountEdit == null))
                {
                    this.mUIRow6ColumncolAmountEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow6ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesTextEdit[View]gvShiftClassRates[Row]6[Column]colAmount";
                    this.mUIRow6ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow6ColumncolAmountEdit.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIRow6ColumncolAmountEdit;
            }
        }
        
        public DXCell UIItem800Cell
        {
            get
            {
                if ((this.mUIItem800Cell == null))
                {
                    this.mUIItem800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesGridControlCell[View]gvShiftClassRates[Row]7[Column]colAmount";
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIItem800Cell;
            }
        }
        
        public DXTextEdit UIRow7ColumncolAmountEdit
        {
            get
            {
                if ((this.mUIRow7ColumncolAmountEdit == null))
                {
                    this.mUIRow7ColumncolAmountEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow7ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesTextEdit[View]gvShiftClassRates[Row]7[Column]colAmount";
                    this.mUIRow7ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow7ColumncolAmountEdit.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIRow7ColumncolAmountEdit;
            }
        }
        
        public DXCell UIItem900Cell
        {
            get
            {
                if ((this.mUIItem900Cell == null))
                {
                    this.mUIItem900Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem900Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesGridControlCell[View]gvShiftClassRates[Row]8[Column]colAmount";
                    this.mUIItem900Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem900Cell.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIItem900Cell;
            }
        }
        
        public DXTextEdit UIRow8ColumncolAmountEdit
        {
            get
            {
                if ((this.mUIRow8ColumncolAmountEdit == null))
                {
                    this.mUIRow8ColumncolAmountEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow8ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesTextEdit[View]gvShiftClassRates[Row]8[Column]colAmount";
                    this.mUIRow8ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow8ColumncolAmountEdit.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIRow8ColumncolAmountEdit;
            }
        }
        
        public DXCell UIItem1000Cell
        {
            get
            {
                if ((this.mUIItem1000Cell == null))
                {
                    this.mUIItem1000Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1000Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesGridControlCell[View]gvShiftClassRates[Row]9[Column]colAmount";
                    this.mUIItem1000Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1000Cell.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIItem1000Cell;
            }
        }
        
        public DXTextEdit UIRow9ColumncolAmountEdit
        {
            get
            {
                if ((this.mUIRow9ColumncolAmountEdit == null))
                {
                    this.mUIRow9ColumncolAmountEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow9ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftClassRatesTextEdit[View]gvShiftClassRates[Row]9[Column]colAmount";
                    this.mUIRow9ColumncolAmountEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow9ColumncolAmountEdit.WindowTitles.Add("Nye vaktklassesatser");
                    #endregion
                }
                return this.mUIRow9ColumncolAmountEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem100Cell;
        
        private DXTextEdit mUIRow0ColumncolAmountEdit;
        
        private DXCell mUIItem200Cell;
        
        private DXTextEdit mUIRow1ColumncolAmountEdit;
        
        private DXCell mUIItem300Cell;
        
        private DXTextEdit mUIRow2ColumncolAmountEdit;
        
        private DXCell mUIItem400Cell;
        
        private DXTextEdit mUIRow3ColumncolAmountEdit;
        
        private DXCell mUIItem500Cell;
        
        private DXTextEdit mUIRow4ColumncolAmountEdit;
        
        private DXCell mUIItem600Cell;
        
        private DXTextEdit mUIRow5ColumncolAmountEdit;
        
        private DXCell mUIItem700Cell;
        
        private DXTextEdit mUIRow6ColumncolAmountEdit;
        
        private DXCell mUIItem800Cell;
        
        private DXTextEdit mUIRow7ColumncolAmountEdit;
        
        private DXCell mUIItem900Cell;
        
        private DXTextEdit mUIRow8ColumncolAmountEdit;
        
        private DXCell mUIItem1000Cell;
        
        private DXTextEdit mUIRow9ColumncolAmountEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow3 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow3()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient11 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient11(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient11 mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient11 : DXTestControl
    {
        
        public UIPnlRosterPlanClient11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable11 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable11(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable11 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable11 : DXGrid
    {
        
        public UIGcRosterPlanTable11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXCell UIOscarssonPerCell
        {
            get
            {
                if ((this.mUIOscarssonPerCell == null))
                {
                    this.mUIOscarssonPerCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOscarssonPerCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_EmployeeName";
                    this.mUIOscarssonPerCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOscarssonPerCell.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIOscarssonPerCell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIOscarssonPerCell;
        
        private DXCell mUIItemCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILinjeinnstillingerOsWindow : DXWindow
    {
        
        public UILinjeinnstillingerOsWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Linjeinnstillinger", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Oscarsson, Per]");
            this.WindowTitles.Add("Linjeinnstillinger");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client7 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client7(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        
        public UIGsPanelControl2Client5 UIGsPanelControl2Client
        {
            get
            {
                if ((this.mUIGsPanelControl2Client == null))
                {
                    this.mUIGsPanelControl2Client = new UIGsPanelControl2Client5(this);
                }
                return this.mUIGsPanelControl2Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client7 mUIGsPanelControl3Client;
        
        private UIGsPanelControl2Client5 mUIGsPanelControl2Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl3Client7 : DXTestControl
    {
        
        public UIGsPanelControl3Client7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Oscarsson, Per]");
            #endregion
        }
        
        #region Properties
        public UIGcAvailabilityPeriodClient3 UIGcAvailabilityPeriodClient
        {
            get
            {
                if ((this.mUIGcAvailabilityPeriodClient == null))
                {
                    this.mUIGcAvailabilityPeriodClient = new UIGcAvailabilityPeriodClient3(this);
                }
                return this.mUIGcAvailabilityPeriodClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAvailabilityPeriodClient3 mUIGcAvailabilityPeriodClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcAvailabilityPeriodClient3 : DXTestControl
    {
        
        public UIGcAvailabilityPeriodClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAvailabilityPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Oscarsson, Per]");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkAvailabilityPerioCheckBox
        {
            get
            {
                if ((this.mUIChkAvailabilityPerioCheckBox == null))
                {
                    this.mUIChkAvailabilityPerioCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkAvailabilityPerioCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkAvailabilityPeriodsDefined";
                    this.mUIChkAvailabilityPerioCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkAvailabilityPerioCheckBox.WindowTitles.Add("Linjeinnstillinger - [Oscarsson, Per]");
                    #endregion
                }
                return this.mUIChkAvailabilityPerioCheckBox;
            }
        }
        
        public DXButton UINYButton
        {
            get
            {
                if ((this.mUINYButton == null))
                {
                    this.mUINYButton = new DXButton(this);
                    #region Search Criteria
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnNewAvPeriod";
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUINYButton.WindowTitles.Add("Linjeinnstillinger - [Oscarsson, Per]");
                    #endregion
                }
                return this.mUINYButton;
            }
        }
        
        public DXButton UIEndreButton
        {
            get
            {
                if ((this.mUIEndreButton == null))
                {
                    this.mUIEndreButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIEndreButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditAvPeriod";
                    this.mUIEndreButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIEndreButton.WindowTitles.Add("Linjeinnstillinger - [Oscarsson, Per]");
                    #endregion
                }
                return this.mUIEndreButton;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkAvailabilityPerioCheckBox;
        
        private DXButton mUINYButton;
        
        private DXButton mUIEndreButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl2Client5 : DXTestControl
    {
        
        public UIGsPanelControl2Client5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Oscarsson, Per]");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Linjeinnstillinger - [Oscarsson, Per]");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow4 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow4()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel22 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel22(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel22 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel22 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom22 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom22(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom22 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom22 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList22 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList22(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList22 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList22 : DXTestControl
    {
        
        public UITcVisualizationTabList22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient22 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient22(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient22 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient22 : DXTestControl
    {
        
        public UITpFixedPaymentClient22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom44 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom44(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom44 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom44 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom44(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom22 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom22(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom22 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom22 : DXTestControl
    {
        
        public UIViewHost1Custom22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient24 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient24(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient24 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient24 : DXTestControl
    {
        
        public UIPcViewClient24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom45 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom45(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom45 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom45 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom45(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid21 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid21(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid21 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid21 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIItem04012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem04012016PivotGridFieldValue == null))
                {
                    this.mUIItem04012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem04012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]0";
                    this.mUIItem04012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem04012016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem04012016PivotGridFieldValue;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIItem04012016PivotGridFieldValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow5 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow5()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel23 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel23(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel23 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel23 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom23 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom23(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom23 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom23 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList23 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList23(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList23 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList23 : DXTestControl
    {
        
        public UITcVisualizationTabList23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient23 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient23(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient23 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient23 : DXTestControl
    {
        
        public UITpFixedPaymentClient23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom46 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom46(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom46 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom46 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom46(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom23 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom23(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom23 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom23 : DXTestControl
    {
        
        public UIViewHost1Custom23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient25 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient25(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient25 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient25 : DXTestControl
    {
        
        public UIPcViewClient25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom47 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom47(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom47 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom47 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom47(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid22 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid22(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid22 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid22 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIItem17012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem17012016PivotGridFieldValue == null))
                {
                    this.mUIItem17012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem17012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]0";
                    this.mUIItem17012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem17012016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem17012016PivotGridFieldValue;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIItem17012016PivotGridFieldValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow6 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow6()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel24 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel24(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel24 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel24 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom24 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom24(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom24 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom24 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList24 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList24(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList24 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList24 : DXTestControl
    {
        
        public UITcVisualizationTabList24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient24 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient24(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient24 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient24 : DXTestControl
    {
        
        public UITpFixedPaymentClient24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom48 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom48(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom48 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom48 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom48(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom24 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom24(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom24 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom24 : DXTestControl
    {
        
        public UIViewHost1Custom24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient26 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient26(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient26 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient26 : DXTestControl
    {
        
        public UIPcViewClient26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom49 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom49(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom49 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom49 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom49(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid23 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid23(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid23 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid23 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem303PivotGridCell
        {
            get
            {
                if ((this.mUIItem303PivotGridCell == null))
                {
                    this.mUIItem303PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem303PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem303PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem303PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem303PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem303PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow7 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow7()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel25 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel25(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel25 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel25 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom25 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom25(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom25 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom25 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList25 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList25(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList25 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList25 : DXTestControl
    {
        
        public UITcVisualizationTabList25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient25 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient25(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient25 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient25 : DXTestControl
    {
        
        public UITpFixedPaymentClient25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom50 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom50(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom50 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom50 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom50(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom25 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom25(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom25 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom25 : DXTestControl
    {
        
        public UIViewHost1Custom25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient27 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient27(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient27 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient27 : DXTestControl
    {
        
        public UIPcViewClient27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom51 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom51(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom51 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom51 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom51(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid24 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid24(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid24 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid24 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIItem25012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem25012016PivotGridFieldValue == null))
                {
                    this.mUIItem25012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem25012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]1";
                    this.mUIItem25012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem25012016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem25012016PivotGridFieldValue;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIItem25012016PivotGridFieldValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow8 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow8()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel26 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel26(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel26 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel26 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom26 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom26(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom26 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom26 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList26 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList26(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList26 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList26 : DXTestControl
    {
        
        public UITcVisualizationTabList26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient26 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient26(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient26 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient26 : DXTestControl
    {
        
        public UITpFixedPaymentClient26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom52 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom52(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom52 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom52 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom52(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom26 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom26(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom26 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom26 : DXTestControl
    {
        
        public UIViewHost1Custom26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient28 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient28(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient28 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient28 : DXTestControl
    {
        
        public UIPcViewClient28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom53 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom53(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom53 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom53 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom53(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid25 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid25(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid25 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid25 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIItem31012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem31012016PivotGridFieldValue == null))
                {
                    this.mUIItem31012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem31012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]1";
                    this.mUIItem31012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem31012016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem31012016PivotGridFieldValue;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIItem31012016PivotGridFieldValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow101 : WinWindow
    {
        
        public UIItemWindow101()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu8 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu8(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu8 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu8 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public UILeggtillinjefrastillMenuItem4 UILeggtillinjefrastillMenuItem
        {
            get
            {
                if ((this.mUILeggtillinjefrastillMenuItem == null))
                {
                    this.mUILeggtillinjefrastillMenuItem = new UILeggtillinjefrastillMenuItem4(this);
                }
                return this.mUILeggtillinjefrastillMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UILeggtillinjefrastillMenuItem4 mUILeggtillinjefrastillMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeggtillinjefrastillMenuItem4 : DXMenuItem
    {
        
        public UILeggtillinjefrastillMenuItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink1MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink1MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink1MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink1MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink1MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow9 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow9()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel27 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel27(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel27 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel27 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom27 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom27(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom27 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom27 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList27 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList27(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList27 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList27 : DXTestControl
    {
        
        public UITcVisualizationTabList27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient27 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient27(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient27 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient27 : DXTestControl
    {
        
        public UITpFixedPaymentClient27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom54 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom54(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom54 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom54 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom54(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom27 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom27(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom27 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom27 : DXTestControl
    {
        
        public UIViewHost1Custom27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient29 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient29(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient29 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient29 : DXTestControl
    {
        
        public UIPcViewClient29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom55 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom55(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom55 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom55 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom55(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid26 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid26(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid26 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid26 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIItem18012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem18012016PivotGridFieldValue == null))
                {
                    this.mUIItem18012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem18012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]2";
                    this.mUIItem18012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem18012016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem18012016PivotGridFieldValue;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIItem18012016PivotGridFieldValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow10 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow10()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel28 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel28(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel28 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel28 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom28 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom28(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom28 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom28 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList28 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList28(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList28 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList28 : DXTestControl
    {
        
        public UITcVisualizationTabList28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient28 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient28(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient28 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient28 : DXTestControl
    {
        
        public UITpFixedPaymentClient28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom56 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom56(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom56 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom56 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom56(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom28 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom28(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom28 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom28 : DXTestControl
    {
        
        public UIViewHost1Custom28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient30 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient30(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient30 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient30 : DXTestControl
    {
        
        public UIPcViewClient30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom57 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom57(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom57 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom57 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom57(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid27 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid27(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid27 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid27 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIItem24012016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem24012016PivotGridFieldValue == null))
                {
                    this.mUIItem24012016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem24012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]2";
                    this.mUIItem24012016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem24012016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem24012016PivotGridFieldValue;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIItem24012016PivotGridFieldValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow11 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow11()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel29 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel29(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel29 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel29 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom29 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom29(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom29 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom29 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList29 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList29(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList29 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList29 : DXTestControl
    {
        
        public UITcVisualizationTabList29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient29 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient29(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient29 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient29 : DXTestControl
    {
        
        public UITpFixedPaymentClient29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom58 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom58(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom58 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom58 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom58(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom29 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom29(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom29 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom29 : DXTestControl
    {
        
        public UIViewHost1Custom29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient31 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient31(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient31 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient31 : DXTestControl
    {
        
        public UIPcViewClient31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom59 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom59(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom59 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom59 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom59(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid28 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid28(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid28 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid28 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem1000PivotGridCell
        {
            get
            {
                if ((this.mUIItem1000PivotGridCell == null))
                {
                    this.mUIItem1000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem1000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]2";
                    this.mUIItem1000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem1000PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser KP Kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem1000PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem1000PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow12 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow12()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRcMenuRibbon8 UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon8(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        #endregion
        
        #region Fields
        private UIRcMenuRibbon8 mUIRcMenuRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRcMenuRibbon8 : DXRibbon
    {
        
        public UIRcMenuRibbon8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpPlanRibbonPage8 UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage8(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpPlanRibbonPage8 mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpPlanRibbonPage8 : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIRpgPlanCopyRosterRibbonPageGroup4 UIRpgPlanCopyRosterRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPlanCopyRosterRibbonPageGroup == null))
                {
                    this.mUIRpgPlanCopyRosterRibbonPageGroup = new UIRpgPlanCopyRosterRibbonPageGroup4(this);
                }
                return this.mUIRpgPlanCopyRosterRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPlanCopyRosterRibbonPageGroup4 mUIRpgPlanCopyRosterRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPlanCopyRosterRibbonPageGroup4 : DXRibbonPageGroup
    {
        
        public UIRpgPlanCopyRosterRibbonPageGroup4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPlanCopyRoster";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UINyarbeidsplanRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUINyarbeidsplanRibbonBaseButtonItem == null))
                {
                    this.mUINyarbeidsplanRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUINyarbeidsplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCopyRosterPlan";
                    this.mUINyarbeidsplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUINyarbeidsplanRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: Vaktklasser AP (Planen er låst av deg)");
                    #endregion
                }
                return this.mUINyarbeidsplanRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUINyarbeidsplanRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow13 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow13()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel30 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel30(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        
        public UIPnlRosterPlanClient12 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient12(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel30 mUIDpnlVisualizationDockPanel;
        
        private UIPnlRosterPlanClient12 mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel30 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom30 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom30(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom30 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom30 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList30 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList30(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList30 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList30 : DXTestControl
    {
        
        public UITcVisualizationTabList30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient30 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient30(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient30 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient30 : DXTestControl
    {
        
        public UITpFixedPaymentClient30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom60 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom60(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom60 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom60 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom60(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom30 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom30(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom30 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom30 : DXTestControl
    {
        
        public UIViewHost1Custom30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient32 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient32(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient32 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient32 : DXTestControl
    {
        
        public UIPcViewClient32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom61 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom61(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom61 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom61 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom61(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid29 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid29(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid29 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid29 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UINyqvistMikaelPivotGridFieldValue
        {
            get
            {
                if ((this.mUINyqvistMikaelPivotGridFieldValue == null))
                {
                    this.mUINyqvistMikaelPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUINyqvistMikaelPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]0";
                    this.mUINyqvistMikaelPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUINyqvistMikaelPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUINyqvistMikaelPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem3600PivotGridCell
        {
            get
            {
                if ((this.mUIItem3600PivotGridCell == null))
                {
                    this.mUIItem3600PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem3600PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem3600PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem3600PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem3600PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIKulleNilsPivotGridFieldValue
        {
            get
            {
                if ((this.mUIKulleNilsPivotGridFieldValue == null))
                {
                    this.mUIKulleNilsPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIKulleNilsPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]1";
                    this.mUIKulleNilsPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIKulleNilsPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIKulleNilsPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem6000PivotGridCell
        {
            get
            {
                if ((this.mUIItem6000PivotGridCell == null))
                {
                    this.mUIItem6000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem6000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem6000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem6000PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem6000PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUINyqvistMikaelPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem3600PivotGridCell;
        
        private DXPivotGridFieldValue mUIKulleNilsPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem6000PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient12 : DXTestControl
    {
        
        public UIPnlRosterPlanClient12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable12 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable12(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable12 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable12 : DXGrid
    {
        
        public UIGcRosterPlanTable12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
            #endregion
        }
        
        #region Properties
        public DXCell UINyqvistMikaelCell
        {
            get
            {
                if ((this.mUINyqvistMikaelCell == null))
                {
                    this.mUINyqvistMikaelCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINyqvistMikaelCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_EmployeeName";
                    this.mUINyqvistMikaelCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINyqvistMikaelCell.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUINyqvistMikaelCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUINyqvistMikaelCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILinjeinnstillingerNyWindow : DXWindow
    {
        
        public UILinjeinnstillingerNyWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Linjeinnstillinger", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Nyqvist, Mikael]");
            this.WindowTitles.Add("Linjeinnstillinger");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client8 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client8(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        
        public UIGSPanelControlClient12 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient12(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client8 mUIGsPanelControl3Client;
        
        private UIGSPanelControlClient12 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl3Client8 : DXTestControl
    {
        
        public UIGsPanelControl3Client8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Nyqvist, Mikael]");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UIPceDate1PopupEdit
        {
            get
            {
                if ((this.mUIPceDate1PopupEdit == null))
                {
                    this.mUIPceDate1PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[1]";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate1PopupEdit.WindowTitles.Add("Linjeinnstillinger - [Nyqvist, Mikael]");
                    #endregion
                }
                return this.mUIPceDate1PopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUIPceDate1PopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient12 : DXTestControl
    {
        
        public UIGSPanelControlClient12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Nyqvist, Mikael]");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Linjeinnstillinger - [Nyqvist, Mikael]");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow14 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow14()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRcMenuRibbon9 UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon9(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        
        public UIPnlRosterPlanClient13 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient13(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIDpnlVisualizationDockPanel31 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel31(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIRcMenuRibbon9 mUIRcMenuRibbon;
        
        private UIPnlRosterPlanClient13 mUIPnlRosterPlanClient;
        
        private UIDpnlVisualizationDockPanel31 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRcMenuRibbon9 : DXRibbon
    {
        
        public UIRcMenuRibbon9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public UIRpPlanRibbonPage9 UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage9(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpPlanRibbonPage9 mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpPlanRibbonPage9 : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public UIRpgPlanRibbonPageGroup3 UIRpgPlanRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPlanRibbonPageGroup == null))
                {
                    this.mUIRpgPlanRibbonPageGroup = new UIRpgPlanRibbonPageGroup3(this);
                }
                return this.mUIRpgPlanRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPlanRibbonPageGroup3 mUIRpgPlanRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPlanRibbonPageGroup3 : DXRibbonPageGroup
    {
        
        public UIRpgPlanRibbonPageGroup3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIInnstillingerRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIInnstillingerRibbonBaseButtonItem == null))
                {
                    this.mUIInnstillingerRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIInnstillingerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSettings";
                    this.mUIInnstillingerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIInnstillingerRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
                    #endregion
                }
                return this.mUIInnstillingerRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIInnstillingerRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient13 : DXTestControl
    {
        
        public UIPnlRosterPlanClient13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable13 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable13(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable13 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable13 : DXGrid
    {
        
        public UIGcRosterPlanTable13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public DXCell UIKulleNilsCell
        {
            get
            {
                if ((this.mUIKulleNilsCell == null))
                {
                    this.mUIKulleNilsCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKulleNilsCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]Col_EmployeeName";
                    this.mUIKulleNilsCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKulleNilsCell.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
                    #endregion
                }
                return this.mUIKulleNilsCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIKulleNilsCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel31 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom31 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom31(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom31 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom31 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList31 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList31(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList31 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList31 : DXTestControl
    {
        
        public UITcVisualizationTabList31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient31 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient31(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient31 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient31 : DXTestControl
    {
        
        public UITpFixedPaymentClient31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom62 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom62(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom62 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom62 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom62(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom31 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom31(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom31 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom31 : DXTestControl
    {
        
        public UIViewHost1Custom31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient33 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient33(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient33 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient33 : DXTestControl
    {
        
        public UIPcViewClient33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom63 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom63(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom63 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom63 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom63(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid30 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid30(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid30 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid30 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIKulleNilsPivotGridFieldValue
        {
            get
            {
                if ((this.mUIKulleNilsPivotGridFieldValue == null))
                {
                    this.mUIKulleNilsPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIKulleNilsPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]1";
                    this.mUIKulleNilsPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIKulleNilsPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
                    #endregion
                }
                return this.mUIKulleNilsPivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem22022016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem22022016PivotGridFieldValue == null))
                {
                    this.mUIItem22022016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem22022016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]1";
                    this.mUIItem22022016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem22022016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
                    #endregion
                }
                return this.mUIItem22022016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem20032016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem20032016PivotGridFieldValue == null))
                {
                    this.mUIItem20032016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem20032016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]1";
                    this.mUIItem20032016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem20032016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
                    #endregion
                }
                return this.mUIItem20032016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem60PivotGridCell
        {
            get
            {
                if ((this.mUIItem60PivotGridCell == null))
                {
                    this.mUIItem60PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem60PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem60PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem60PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi ");
                    #endregion
                }
                return this.mUIItem60PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIKulleNilsPivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem22022016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem20032016PivotGridFieldValue;
        
        private DXPivotGridCell mUIItem60PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILinjeinnstillingerKuWindow : DXWindow
    {
        
        public UILinjeinnstillingerKuWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Linjeinnstillinger", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Linjeinnstillinger - [Kulle, Nils]");
            this.WindowTitles.Add("Linjeinnstillinger");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl3Client9 UIGsPanelControl3Client
        {
            get
            {
                if ((this.mUIGsPanelControl3Client == null))
                {
                    this.mUIGsPanelControl3Client = new UIGsPanelControl3Client9(this);
                }
                return this.mUIGsPanelControl3Client;
            }
        }
        
        public UIGSPanelControlClient13 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient13(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl3Client9 mUIGsPanelControl3Client;
        
        private UIGSPanelControlClient13 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl3Client9 : DXTestControl
    {
        
        public UIGsPanelControl3Client9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Kulle, Nils]");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UIPceDate0PopupEdit
        {
            get
            {
                if ((this.mUIPceDate0PopupEdit == null))
                {
                    this.mUIPceDate0PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[0]";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate0PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate0PopupEdit.WindowTitles.Add("Linjeinnstillinger - [Kulle, Nils]");
                    #endregion
                }
                return this.mUIPceDate0PopupEdit;
            }
        }
        
        public DXPopupEdit UIPceDate1PopupEdit
        {
            get
            {
                if ((this.mUIPceDate1PopupEdit == null))
                {
                    this.mUIPceDate1PopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate[1]";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUIPceDate1PopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIPceDate1PopupEdit.WindowTitles.Add("Linjeinnstillinger - [Kulle, Nils]");
                    #endregion
                }
                return this.mUIPceDate1PopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUIPceDate0PopupEdit;
        
        private DXPopupEdit mUIPceDate1PopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient13 : DXTestControl
    {
        
        public UIGSPanelControlClient13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Linjeinnstillinger - [Kulle, Nils]");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Linjeinnstillinger - [Kulle, Nils]");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanVaktklassWindow15 : DXWindow
    {
        
        public UIArbeidsplanVaktklassWindow15()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlVisualizationDockPanel32 UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel32(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlVisualizationDockPanel32 mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel32 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom32 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom32(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom32 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom32 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList32 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList32(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList32 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList32 : DXTestControl
    {
        
        public UITcVisualizationTabList32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpFixedPaymentClient32 UITpFixedPaymentClient
        {
            get
            {
                if ((this.mUITpFixedPaymentClient == null))
                {
                    this.mUITpFixedPaymentClient = new UITpFixedPaymentClient32(this);
                }
                return this.mUITpFixedPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpFixedPaymentClient32 mUITpFixedPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpFixedPaymentClient32 : DXTestControl
    {
        
        public UITpFixedPaymentClient32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpFixedPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom64 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom64(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom64 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom64 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom64(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom32 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom32(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom32 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHost1Custom32 : DXTestControl
    {
        
        public UIViewHost1Custom32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient34 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient34(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient34 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient34 : DXTestControl
    {
        
        public UIPcViewClient34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom65 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom65(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom65 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFixedPaymentControlCustom65 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom65(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid31 UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid31(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid31 mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPgcCalculationResultPivotGrid31 : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            #endregion
        }
        
        #region Properties
        public DXPivotGridCell UIItem105000PivotGridCell
        {
            get
            {
                if ((this.mUIItem105000PivotGridCell == null))
                {
                    this.mUIItem105000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem105000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem105000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem105000PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem105000PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIKulleNilsPivotGridFieldValue
        {
            get
            {
                if ((this.mUIKulleNilsPivotGridFieldValue == null))
                {
                    this.mUIKulleNilsPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIKulleNilsPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]1";
                    this.mUIKulleNilsPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIKulleNilsPivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIKulleNilsPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem240000PivotGridCell
        {
            get
            {
                if ((this.mUIItem240000PivotGridCell == null))
                {
                    this.mUIItem240000PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem240000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]1";
                    this.mUIItem240000PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem240000PivotGridCell.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem240000PivotGridCell;
            }
        }
        
        public DXPivotGridFieldValue UIItem01022016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem01022016PivotGridFieldValue == null))
                {
                    this.mUIItem01022016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem01022016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]0";
                    this.mUIItem01022016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem01022016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem01022016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem21022016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem21022016PivotGridFieldValue == null))
                {
                    this.mUIItem21022016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem21022016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]0";
                    this.mUIItem21022016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem21022016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem21022016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem22022016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem22022016PivotGridFieldValue == null))
                {
                    this.mUIItem22022016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem22022016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Start[LastLevelIndex]1";
                    this.mUIItem22022016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem22022016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem22022016PivotGridFieldValue;
            }
        }
        
        public DXPivotGridFieldValue UIItem20032016PivotGridFieldValue
        {
            get
            {
                if ((this.mUIItem20032016PivotGridFieldValue == null))
                {
                    this.mUIItem20032016PivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIItem20032016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]End[LastLevelIndex]1";
                    this.mUIItem20032016PivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIItem20032016PivotGridFieldValue.WindowTitles.Add("Arbeidsplan: Vaktklasser AP kopi (Planen er låst av deg)");
                    #endregion
                }
                return this.mUIItem20032016PivotGridFieldValue;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridCell mUIItem105000PivotGridCell;
        
        private DXPivotGridFieldValue mUIKulleNilsPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem240000PivotGridCell;
        
        private DXPivotGridFieldValue mUIItem01022016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem21022016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem22022016PivotGridFieldValue;
        
        private DXPivotGridFieldValue mUIItem20032016PivotGridFieldValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient14 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient14(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient14 mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient14 : DXTestControl
    {
        
        public UIPnlRosterPlanClient14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable14 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable14(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable14 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable14 : DXGrid
    {
        
        public UIGcRosterPlanTable14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIF3Cell
        {
            get
            {
                if ((this.mUIF3Cell == null))
                {
                    this.mUIF3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIF3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit == null))
                {
                    this.mUIRow0ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIF3Cell1
        {
            get
            {
                if ((this.mUIF3Cell1 == null))
                {
                    this.mUIF3Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIF3Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell1;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit == null))
                {
                    this.mUIRow1ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIF3Cell2
        {
            get
            {
                if ((this.mUIF3Cell2 == null))
                {
                    this.mUIF3Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIF3Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell2;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit == null))
                {
                    this.mUIRow2ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIF3Cell3
        {
            get
            {
                if ((this.mUIF3Cell3 == null))
                {
                    this.mUIF3Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_0";
                    this.mUIF3Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell3;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit == null))
                {
                    this.mUIRow3ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_0";
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIF3Cell;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit;
        
        private DXCell mUIF3Cell1;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit;
        
        private DXCell mUIF3Cell2;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit;
        
        private DXCell mUIF3Cell3;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit;
        #endregion
    }
}
