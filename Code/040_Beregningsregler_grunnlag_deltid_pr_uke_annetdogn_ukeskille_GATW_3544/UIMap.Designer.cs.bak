// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _040_Beregningsregler_grunnlag_deltid_pr_uke_annetdogn_ukeskille_GATW_3544
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// CheckOvertidCalculationTypeValuesStep1 - Use 'CheckOvertidCalculationTypeValuesStep1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOvertidCalculationTypeValuesStep1()
        {
            #region Variable Declarations
            WinRadioButton uIKalkuleriregistrerinRadioButton = this.UIGlobaltoppsettWindow.UIRekkefølgepåkalkulerClient.UIKalkuleriregistrerinRadioButton;
            #endregion

            // Verify that the 'Selected' property of 'Kalkuler i registreringsrekkefølge.' radio button equals 'True'
            Assert.AreEqual(this.CheckOvertidCalculationTypeValuesStep1ExpectedValues.UIKalkuleriregistrerinRadioButtonSelected, uIKalkuleriregistrerinRadioButton.Selected);
        }
        
        /// <summary>
        /// CheckOvertidCalculationTypeValuesStep14 - Use 'CheckOvertidCalculationTypeValuesStep14Params' to pass parameters into this method.
        /// </summary>
        public void CheckOvertidCalculationTypeValuesStep14()
        {
            #region Variable Declarations
            WinRadioButton uIKalkulerikronologiskRadioButton = this.UIGlobaltoppsettWindow.UIRekkefølgepåkalkulerClient.UIKalkulerikronologiskRadioButton;
            #endregion

            // Select 'Kalkuler i kronologisk rekkefølge.' radio button
            uIKalkulerikronologiskRadioButton.Selected = this.CheckOvertidCalculationTypeValuesStep14Params.UIKalkulerikronologiskRadioButtonSelected;
        }
        
        /// <summary>
        /// CheckRecalcSavoOkStep16_1 - Use 'CheckRecalcSavoOkStep16_1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcSavoOkStep16_1()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIEndrekonteringWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIEndrekonteringWindow.UIItem29102023Window.UIItemEdit;
            #endregion

            // Verify that the 'SelectedItem' property of combo box equals 'Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1'
            Assert.AreEqual(this.CheckRecalcSavoOkStep16_1ExpectedValues.UIItemComboBoxSelectedItem, uIItemComboBox.SelectedItem);

            // Verify that the 'Text' property of text box equals '29.10.2023'
            Assert.AreEqual(this.CheckRecalcSavoOkStep16_1ExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// CheckRecalcSavoOkStep16_2 - Use 'CheckRecalcSavoOkStep16_2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcSavoOkStep16_2()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIEndrekonteringWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIEndrekonteringWindow.UIItem25102023Window.UIItemEdit;
            #endregion

            // Verify that the 'SelectedItem' property of combo box equals 'Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1'
            Assert.AreEqual(this.CheckRecalcSavoOkStep16_2ExpectedValues.UIItemComboBoxSelectedItem, uIItemComboBox.SelectedItem);

            // Verify that the 'Text' property of text box equals '25.10.2023'
            Assert.AreEqual(this.CheckRecalcSavoOkStep16_2ExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// CheckRecalcSavoOkStep16_3 - Use 'CheckRecalcSavoOkStep16_3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcSavoOkStep16_3()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIEndrekonteringWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIEndrekonteringWindow.UIItem23102023Window.UIItemEdit;
            WinWindow uIEEkstravaktWindow = this.UIEndrekonteringWindow.UIItemWindow1.UIEndrekonteringClient.UIEEkstravaktWindow;
            #endregion

            // Verify that the 'SelectedItem' property of combo box equals 'Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1'
            Assert.AreEqual(this.CheckRecalcSavoOkStep16_3ExpectedValues.UIItemComboBoxSelectedItem, uIItemComboBox.SelectedItem);

            // Verify that the 'Text' property of text box equals '23.10.2023'
            Assert.AreEqual(this.CheckRecalcSavoOkStep16_3ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that the 'FriendlyName' property of 'E - Ekstravakt' window equals 'E - Ekstravakt'
            Assert.AreEqual(this.CheckRecalcSavoOkStep16_3ExpectedValues.UIEEkstravaktWindowFriendlyName, uIEEkstravaktWindow.FriendlyName);
        }
        
        /// <summary>
        /// CheckRecalcSavoOkStep16_4 - Use 'CheckRecalcSavoOkStep16_4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcSavoOkStep16_4()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIEndrekonteringWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIEndrekonteringWindow.UIItem22102023Window.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIEndrekonteringWindow.UIEEkstravaktWindow.UIItemEdit;
            #endregion

            // Verify that the 'SelectedItem' property of combo box equals 'Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1'
            Assert.AreEqual(this.CheckRecalcSavoOkStep16_4ExpectedValues.UIItemComboBoxSelectedItem, uIItemComboBox.SelectedItem);

            // Verify that the 'Text' property of text box equals '22.10.2023'
            Assert.AreEqual(this.CheckRecalcSavoOkStep16_4ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that the 'Text' property of text box equals 'E - Ekstravakt'
            Assert.AreEqual(this.CheckRecalcSavoOkStep16_4ExpectedValues.UIItemEditText1, uIItemEdit1.Text);
        }
        
        /// <summary>
        /// CheckRecalcValuesStep10 - Use 'CheckRecalcValuesStep10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep10()
        {
            #region Variable Declarations
            DXCell uIItem22102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem22102023Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem400LørSøndagstilCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem400LørSøndagstilCell;
            DXCell uIItem800Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell1;
            DXCell uIItem23102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem23102023Cell;
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem350Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem350Cell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            #endregion

            // Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem22102023CellText, uIItem22102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem400LørSøndagstilCellText, uIItem400LørSøndagstilCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem800Cell1Text, uIItem800Cell1.Text);

            // Verify that the 'Text' property of '23.10.2023' cell equals '25.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem23102023CellText, uIItem23102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '3,50' cell equals '4,70'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem350CellText, uIItem350Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '4,50' cell equals '3,30'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem450CellText, uIItem450Cell.Text);
        }
        
        /// <summary>
        /// CheckRecalcValuesStep11 - Use 'CheckRecalcValuesStep11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep11()
        {
            #region Variable Declarations
            DXCell uIItem22102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem22102023Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem310Overtid100Cell3 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell3;
            DXCell uIItem450Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell1;
            DXCell uIItem23102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem23102023Cell;
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem350Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem350Cell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            #endregion

            // Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem22102023CellText, uIItem22102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '3,50'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem310Overtid100Cell3Text, uIItem310Overtid100Cell3.Text);

            // Verify that the 'Text' property of '4,50' cell equals '4,50'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem450Cell1Text, uIItem450Cell1.Text);

            // Verify that the 'Text' property of '23.10.2023' cell equals '25.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem23102023CellText, uIItem23102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '3,50' cell equals '5,30'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem350CellText, uIItem350Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '4,50' cell equals '2,70'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem450CellText, uIItem450Cell.Text);
        }
        
        /// <summary>
        /// CheckRecalcValuesStep15 - Use 'CheckRecalcValuesStep15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep15()
        {
            #region Variable Declarations
            DXCell uIItem22102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem22102023Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem23102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem23102023Cell;
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem350Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem350Cell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            DXCell uIItem25102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem25102023Cell;
            DXCell uIItem310Overtid100Cell2 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell2;
            DXCell uIItem200Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200Cell;
            DXCell uIItem200TimelønnCell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell1;
            DXCell uIItem600Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem600Cell;
            DXCell uIItem29102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem29102023Cell;
            DXCell uIItem200TimelønnCell2 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell2;
            DXCell uIItem470Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem470Cell;
            DXCell uIItem310Overtid100Cell4 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell4;
            DXCell uIItem330Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem330Cell;
            #endregion

            // Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem22102023CellText, uIItem22102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem23102023CellText, uIItem23102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '3,50' cell equals '3,50'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem350CellText, uIItem350Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '4,50' cell equals '4,50'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem450CellText, uIItem450Cell.Text);

            // Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem25102023CellText, uIItem25102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem310Overtid100Cell2Text, uIItem310Overtid100Cell2.Text);

            // Verify that the 'Text' property of '2,00' cell equals '2,00'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem200CellText, uIItem200Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '6,00' cell equals '6,00'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem600CellText, uIItem600Cell.Text);

            // Verify that the 'Text' property of '29.10.2023' cell equals '29.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem29102023CellText, uIItem29102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem200TimelønnCell2Text, uIItem200TimelønnCell2.Text);

            // Verify that the 'Text' property of '4,70' cell equals '4,70'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem470CellText, uIItem470Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem310Overtid100Cell4Text, uIItem310Overtid100Cell4.Text);

            // Verify that the 'Text' property of '3,30' cell equals '3,30'
            Assert.AreEqual(this.CheckRecalcValuesStep15ExpectedValues.UIItem330CellText, uIItem330Cell.Text);
        }
        
        /// <summary>
        /// CheckRecalcValuesStep8 - Use 'CheckRecalcValuesStep8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep8()
        {
            #region Variable Declarations
            DXCell uIItem22102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem22102023Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem310Overtid100Cell3 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell3;
            DXCell uIItem450Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell1;
            DXCell uIItem23102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem23102023Cell;
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem350Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem350Cell;
            DXCell uIItem25102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem25102023Cell;
            DXCell uIItem310Overtid100Cell2 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell2;
            DXCell uIItem200Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200Cell;
            DXCell uIItem200TimelønnCell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell1;
            DXCell uIItem600Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem600Cell;
            #endregion

            // Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem22102023CellText, uIItem22102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '3,50'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem310Overtid100Cell3Text, uIItem310Overtid100Cell3.Text);

            // Verify that the 'Text' property of '4,50' cell equals '4,50'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem450Cell1Text, uIItem450Cell1.Text);

            // Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem23102023CellText, uIItem23102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '3,50' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem350CellText, uIItem350Cell.Text);

            // Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem25102023CellText, uIItem25102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem310Overtid100Cell2Text, uIItem310Overtid100Cell2.Text);

            // Verify that the 'Text' property of '2,00' cell equals '5,30'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem200CellText, uIItem200Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '6,00' cell equals '2,70'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem600CellText, uIItem600Cell.Text);
        }
        
        /// <summary>
        /// CheckShiftDatesStep7 - Use 'CheckShiftDatesStep7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftDatesStep7()
        {
            #region Variable Declarations
            DXCell uIItem22102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem22102023Cell;
            DXCell uIItem23102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem23102023Cell;
            DXCell uIItem25102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem25102023Cell;
            #endregion

            // Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
            Assert.AreEqual(this.CheckShiftDatesStep7ExpectedValues.UIItem22102023CellText, uIItem22102023Cell.Text);

            // Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
            Assert.AreEqual(this.CheckShiftDatesStep7ExpectedValues.UIItem23102023CellText, uIItem23102023Cell.Text);

            // Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
            Assert.AreEqual(this.CheckShiftDatesStep7ExpectedValues.UIItem25102023CellText, uIItem25102023Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep2 - Use 'CheckValuesStep2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep2()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem800CellText, uIItem800Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep3 - Use 'CheckValuesStep3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep3()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell1 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell1;
            DXCell uIItem350Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem350Cell;
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '3,50' cell equals '3,50'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem350CellText, uIItem350Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '4,50'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem800CellText, uIItem800Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep4 - Use 'CheckValuesStep4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep4()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            DXCell uIItem310Overtid100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem200Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '6,00'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '2,00' cell equals '2,00'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem200CellText, uIItem200Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep5 - Use 'CheckValuesStep5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep5()
        {
            #region Variable Declarations
            DXCell uIItem310Overtid100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem200Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200Cell;
            #endregion

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '2,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem200CellText, uIItem200Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep6 - Use 'CheckValuesStep6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep6()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            DXCell uIItem310Overtid100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem200Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep6ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '2,70'
            Assert.AreEqual(this.CheckValuesStep6ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep6ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '2,00' cell equals '5,30'
            Assert.AreEqual(this.CheckValuesStep6ExpectedValues.UIItem200CellText, uIItem200Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep7 - Use 'CheckValuesStep7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep7()
        {
            #region Variable Declarations
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem350Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem350Cell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            DXCell uIItem310Overtid100Cell2 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell2;
            DXCell uIItem200Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200Cell;
            DXCell uIItem200TimelønnCell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell1;
            DXCell uIItem600Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem600Cell;
            #endregion

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '3,50' cell equals '3,50'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem350CellText, uIItem350Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '4,50' cell equals '4,50'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem450CellText, uIItem450Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem310Overtid100Cell2Text, uIItem310Overtid100Cell2.Text);

            // Verify that the 'Text' property of '2,00' cell equals '2,00'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem200CellText, uIItem200Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '6,00' cell equals '6,00'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem600CellText, uIItem600Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep9 - Use 'CheckValuesStep9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep9()
        {
            #region Variable Declarations
            DXCell uIItem23102023Cell = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem23102023Cell;
            DXCell uIItem200TimelønnCell = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem200TimelønnCell;
            DXCell uIItem8Cell = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem8Cell;
            #endregion

            // Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
            Assert.AreEqual(this.CheckValuesStep9ExpectedValues.UIItem23102023CellText, uIItem23102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep9ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '-8' cell equals '-8'
            Assert.AreEqual(this.CheckValuesStep9ExpectedValues.UIItem8CellText, uIItem8Cell.Text);
        }
        
        /// <summary>
        /// CloseGlobalSettingsWindow
        /// </summary>
        public void CloseGlobalSettingsWindow()
        {
            #region Variable Declarations
            WinButton uILagreButton = this.UIGlobaltoppsettWindow.UIItemWindow1.UIGlobaltoppsettClient.UILagreButton;
            #endregion

            // Click '&Lagre' button
            Mouse.Click(uILagreButton, new Point(41, 13));
        }
        
        /// <summary>
        /// CreateAbsenceStep9
        /// </summary>
        public void CreateAbsenceStep9()
        {
            #region Variable Declarations
            DXCell uITurnusAnnetDøgnukeskCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UINatttiltirsdag001677DockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusAnnetDøgnukeskCell;
            DXRibbonButtonItem uIFraværRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIFraværRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Annet Døgn/ukeskille' cell to 'Fravær' RibbonBaseButtonItem
            uIFraværRibbonBaseButtonItem.EnsureClickable(new Point(18, 23));
            Mouse.StartDragging(uITurnusAnnetDøgnukeskCell, new Point(4, -18));
            Mouse.StopDragging(uIFraværRibbonBaseButtonItem, new Point(18, 23));
        }
        
        /// <summary>
        /// DeleteAbsenceStep11
        /// </summary>
        public void DeleteAbsenceStep11()
        {
            #region Variable Declarations
            DXCell uITurnusAnnetDøgnukeskCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UIFraværDockPanel.UIControlContainerCustom.UIGcAbsenceColumnTable.UITurnusAnnetDøgnukeskCell;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpMiscRibbonPageGroup.UISlettRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Annet Døgn/ukeskille' cell to 'Slett' RibbonBaseButtonItem
            uISlettRibbonBaseButtonItem.EnsureClickable(new Point(18, 21));
            Mouse.StartDragging(uITurnusAnnetDøgnukeskCell, new Point(79, 5));
            Mouse.StopDragging(uISlettRibbonBaseButtonItem, new Point(18, 21));
        }
        
        /// <summary>
        /// DeleteRemanageShiftStep8
        /// </summary>
        public void DeleteRemanageShiftStep8()
        {
            #region Variable Declarations
            DXCell uITurnusAnnetDøgnukeskCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusAnnetDøgnukeskCell;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpMiscRibbonPageGroup.UISlettRibbonBaseButtonItem;
            DXButton uIOKButton = this.UISlettWindow.UIDbFooterCustom.UIOKButton;
            #endregion

            // Move 'Turnus, Annet Døgn/ukeskille' cell to 'Slett' RibbonBaseButtonItem
            uISlettRibbonBaseButtonItem.EnsureClickable(new Point(19, 23));
            Mouse.StartDragging(uITurnusAnnetDøgnukeskCell, new Point(16, 6));
            Mouse.StopDragging(uISlettRibbonBaseButtonItem, new Point(19, 23));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DragAnnetDoynUkeskilleTurnusToExtraStep2
        /// </summary>
        public void DragAnnetDoynUkeskilleTurnusToExtraStep2()
        {
            #region Variable Declarations
            DXCell uITurnusAnnetDøgnukeskCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UINatttiltirsdag001677DockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusAnnetDøgnukeskCell;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Annet Døgn/ukeskille' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(20, 19));
            Mouse.StartDragging(uITurnusAnnetDøgnukeskCell, new Point(53, 7));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(20, 19));
        }
        
        /// <summary>
        /// DragAnnetDoynUkeskilleTurnusToExtraStep3
        /// </summary>
        public void DragAnnetDoynUkeskilleTurnusToExtraStep3()
        {
            #region Variable Declarations
            DXCell uITurnusAnnetDøgnukeskCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusAnnetDøgnukeskCell;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Annet Døgn/ukeskille' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(18, 19));
            Mouse.StartDragging(uITurnusAnnetDøgnukeskCell, new Point(16, 6));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(18, 19));
        }
        
        /// <summary>
        /// DragAnnetDoynUkeskilleTurnusToExtraStep4
        /// </summary>
        public void DragAnnetDoynUkeskilleTurnusToExtraStep4()
        {
            #region Variable Declarations
            DXCell uITurnusAnnetDøgnukeskCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusAnnetDøgnukeskCell1;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Annet Døgn/ukeskille' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(19, 19));
            Mouse.StartDragging(uITurnusAnnetDøgnukeskCell1, new Point(28, 4));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(19, 19));
        }
        
        /// <summary>
        /// DragAnnetDoynUkeskilleTurnusToExtraStep5
        /// </summary>
        public void DragAnnetDoynUkeskilleTurnusToExtraStep5()
        {
            #region Variable Declarations
            DXCell uITurnusAnnetDøgnukeskCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusAnnetDøgnukeskCell;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Annet Døgn/ukeskille' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(23, 19));
            Mouse.StartDragging(uITurnusAnnetDøgnukeskCell, new Point(-13, 12));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(23, 19));
        }
        
        /// <summary>
        /// DragAnnetDoynUkeskilleTurnusToRemanageStep7
        /// </summary>
        public void DragAnnetDoynUkeskilleTurnusToRemanageStep7()
        {
            #region Variable Declarations
            DXCell uITurnusAnnetDøgnukeskCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusAnnetDøgnukeskCell;
            DXRibbonButtonItem uIForskjøvetvaktRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIForskjøvetvaktRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Annet Døgn/ukeskille' cell to 'Forskjøvet
            //vakt' RibbonBaseButtonItem
            uIForskjøvetvaktRibbonBaseButtonItem.EnsureClickable(new Point(27, 24));
            Mouse.StartDragging(uITurnusAnnetDøgnukeskCell, new Point(66, 5));
            Mouse.StopDragging(uIForskjøvetvaktRibbonBaseButtonItem, new Point(27, 24));
        }
        
        /// <summary>
        /// OpenShift_1
        /// </summary>
        public void OpenShift_1()
        {
            #region Variable Declarations
            WinClient uITimelisteClient = this.UIGatWindow.UIItemWindow1.UITimelisteClient;
            #endregion

            // Double-Click 'Timeliste' client
            Mouse.DoubleClick(uITimelisteClient, new Point(137, 28));
        }
        
        /// <summary>
        /// OpenShift_2
        /// </summary>
        public void OpenShift_2()
        {
            #region Variable Declarations
            WinClient uITimelisteClient = this.UIGatWindow.UIItemWindow1.UITimelisteClient;
            #endregion

            // Double-Click 'Timeliste' client
            Mouse.DoubleClick(uITimelisteClient, new Point(167, 45));
        }
        
        /// <summary>
        /// OpenShift_3
        /// </summary>
        public void OpenShift_3()
        {
            #region Variable Declarations
            WinClient uITimelisteClient = this.UIGatWindow.UIItemWindow1.UITimelisteClient;
            #endregion

            // Double-Click 'Timeliste' client
            Mouse.DoubleClick(uITimelisteClient, new Point(117, 66));
        }
        
        /// <summary>
        /// OpenShift_4
        /// </summary>
        public void OpenShift_4()
        {
            #region Variable Declarations
            WinClient uITimelisteClient = this.UIGatWindow.UIItemWindow1.UITimelisteClient;
            #endregion

            // Double-Click 'Timeliste' client
            Mouse.DoubleClick(uITimelisteClient, new Point(94, 83));
        }
        
        /// <summary>
        /// SelectAnnet
        /// </summary>
        public void SelectAnnet()
        {
            #region Variable Declarations
            WinClient uIAnsatteClient = this.UIGatWindow.UIItemWindow.UIAnsatteClient;
            #endregion

            // Click 'Ansatte' client
            Mouse.Click(uIAnsatteClient, new Point(49, 28));
        }
        
        /// <summary>
        /// SelectOvertidInGlobalSettings - Use 'SelectOvertidInGlobalSettingsParams' to pass parameters into this method.
        /// </summary>
        public void SelectOvertidInGlobalSettings()
        {
            #region Variable Declarations
            WinClient uIGlobaltoppsettClient = this.UIGlobaltoppsettWindow.UIItemWindow.UIGlobaltoppsettClient;
            WinRadioButton uIKalkuleriregistrerinRadioButton = this.UIGlobaltoppsettWindow.UIRekkefølgepåkalkulerClient.UIKalkuleriregistrerinRadioButton;
            #endregion

            // Click 'Globalt oppsett' client
            Mouse.Click(uIGlobaltoppsettClient, new Point(43, 350));

            // Select 'Kalkuler i registreringsrekkefølge.' radio button
            uIKalkuleriregistrerinRadioButton.Selected = this.SelectOvertidInGlobalSettingsParams.UIKalkuleriregistrerinRadioButtonSelected;
        }
        
        /// <summary>
        /// CheckValuesStep4Dfo - Use 'CheckValuesStep4DfoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep4Dfo()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            DXCell uIItem310Overtid100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem200Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep4DfoExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '2,00'
            Assert.AreEqual(this.CheckValuesStep4DfoExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep4DfoExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '2,00' cell equals '6,00'
            Assert.AreEqual(this.CheckValuesStep4DfoExpectedValues.UIItem200CellText, uIItem200Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep5Dfo - Use 'CheckValuesStep5DfoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep5Dfo()
        {
            #region Variable Declarations
            DXCell uIItem310Overtid100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem200Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200Cell;
            #endregion

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep5DfoExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '2,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep5DfoExpectedValues.UIItem200CellText, uIItem200Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep6Dfo - Use 'CheckValuesStep6DfoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep6Dfo()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            DXCell uIItem310Overtid100Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem200Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep6DfoExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '5,30'
            Assert.AreEqual(this.CheckValuesStep6DfoExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep6DfoExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '2,00' cell equals '2,70'
            Assert.AreEqual(this.CheckValuesStep6DfoExpectedValues.UIItem200CellText, uIItem200Cell.Text);
        }
        
        /// <summary>
        /// CheckRecalcValuesStep8Dfo - Use 'CheckRecalcValuesStep8DfoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep8Dfo()
        {
            #region Variable Declarations
            DXCell uIItem22102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem22102023Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem310Overtid100Cell3 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell3;
            DXCell uIItem450Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell1;
            DXCell uIItem23102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem23102023Cell;
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem350Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem350Cell;
            DXCell uIItem25102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem25102023Cell;
            DXCell uIItem310Overtid100Cell2 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell2;
            DXCell uIItem200Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200Cell;
            DXCell uIItem200TimelønnCell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell1;
            DXCell uIItem600Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem600Cell;
            #endregion

            // Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem22102023CellText, uIItem22102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '3,50'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem310Overtid100Cell3Text, uIItem310Overtid100Cell3.Text);

            // Verify that the 'Text' property of '4,50' cell equals '4,50'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem450Cell1Text, uIItem450Cell1.Text);

            // Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem23102023CellText, uIItem23102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '3,50' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem350CellText, uIItem350Cell.Text);

            // Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem25102023CellText, uIItem25102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem310Overtid100Cell2Text, uIItem310Overtid100Cell2.Text);

            // Verify that the 'Text' property of '2,00' cell equals '2,70'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem200CellText, uIItem200Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '6,00' cell equals '5,30'
            Assert.AreEqual(this.CheckRecalcValuesStep8DfoExpectedValues.UIItem600CellText, uIItem600Cell.Text);
        }
        
        /// <summary>
        /// CheckRecalcValuesStep11Dfo - Use 'CheckRecalcValuesStep11DfoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep11Dfo()
        {
            #region Variable Declarations
            DXCell uIItem22102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem22102023Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem310Overtid100Cell3 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell3;
            DXCell uIItem450Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell1;
            DXCell uIItem23102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem23102023Cell;
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem350Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem350Cell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            #endregion

            // Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep11DfoExpectedValues.UIItem22102023CellText, uIItem22102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep11DfoExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '3,50'
            Assert.AreEqual(this.CheckRecalcValuesStep11DfoExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep11DfoExpectedValues.UIItem310Overtid100Cell3Text, uIItem310Overtid100Cell3.Text);

            // Verify that the 'Text' property of '4,50' cell equals '4,50'
            Assert.AreEqual(this.CheckRecalcValuesStep11DfoExpectedValues.UIItem450Cell1Text, uIItem450Cell1.Text);

            // Verify that the 'Text' property of '23.10.2023' cell equals '25.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep11DfoExpectedValues.UIItem23102023CellText, uIItem23102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep11DfoExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '3,50' cell equals '2,70'
            Assert.AreEqual(this.CheckRecalcValuesStep11DfoExpectedValues.UIItem350CellText, uIItem350Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep11DfoExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '4,50' cell equals '5,30'
            Assert.AreEqual(this.CheckRecalcValuesStep11DfoExpectedValues.UIItem450CellText, uIItem450Cell.Text);
        }
        
        /// <summary>
        /// CheckRecalcValuesStep15Dfo - Use 'CheckRecalcValuesStep15DfoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep15Dfo()
        {
            #region Variable Declarations
            DXCell uIItem22102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem22102023Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem23102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem23102023Cell;
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem350Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem350Cell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            DXCell uIItem25102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem25102023Cell;
            DXCell uIItem310Overtid100Cell2 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell2;
            DXCell uIItem200Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200Cell;
            DXCell uIItem200TimelønnCell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell1;
            DXCell uIItem600Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem600Cell;
            DXCell uIItem29102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem29102023Cell;
            DXCell uIItem200TimelønnCell2 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell2;
            DXCell uIItem470Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem470Cell;
            DXCell uIItem310Overtid100Cell4 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell4;
            DXCell uIItem330Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem330Cell;
            #endregion

            // Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem22102023CellText, uIItem22102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem23102023CellText, uIItem23102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '3,50' cell equals '3,50'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem350CellText, uIItem350Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '4,50' cell equals '4,50'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem450CellText, uIItem450Cell.Text);

            // Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem25102023CellText, uIItem25102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem310Overtid100Cell2Text, uIItem310Overtid100Cell2.Text);

            // Verify that the 'Text' property of '2,00' cell equals '6,00'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem200CellText, uIItem200Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '6,00' cell equals '2,00'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem600CellText, uIItem600Cell.Text);

            // Verify that the 'Text' property of '29.10.2023' cell equals '29.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem29102023CellText, uIItem29102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem200TimelønnCell2Text, uIItem200TimelønnCell2.Text);

            // Verify that the 'Text' property of '4,70' cell equals '4,70'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem470CellText, uIItem470Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem310Overtid100Cell4Text, uIItem310Overtid100Cell4.Text);

            // Verify that the 'Text' property of '3,30' cell equals '3,30'
            Assert.AreEqual(this.CheckRecalcValuesStep15DfoExpectedValues.UIItem330CellText, uIItem330Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep7Dfo - Use 'CheckValuesStep7DfoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep7Dfo()
        {
            #region Variable Declarations
            DXCell uIItem22102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem22102023Cell;
            DXCell uIItem310Overtid100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem23102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem23102023Cell;
            DXCell uIItem200TimelønnCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell;
            DXCell uIItem350Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem350Cell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem450Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem450Cell;
            DXCell uIItem25102023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem25102023Cell;
            DXCell uIItem310Overtid100Cell2 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell2;
            DXCell uIItem200Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200Cell;
            DXCell uIItem200TimelønnCell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell1;
            DXCell uIItem600Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem600Cell;
            #endregion

            // Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem22102023CellText, uIItem22102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem23102023CellText, uIItem23102023Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '3,50' cell equals '3,50'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem350CellText, uIItem350Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '4,50' cell equals '4,50'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem450CellText, uIItem450Cell.Text);

            // Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem25102023CellText, uIItem25102023Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem310Overtid100Cell2Text, uIItem310Overtid100Cell2.Text);

            // Verify that the 'Text' property of '2,00' cell equals '6,00'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem200CellText, uIItem200Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '6,00' cell equals '2,00'
            Assert.AreEqual(this.CheckValuesStep7DfoExpectedValues.UIItem600CellText, uIItem600Cell.Text);
        }
        
        #region Properties
        public virtual CheckOvertidCalculationTypeValuesStep1ExpectedValues CheckOvertidCalculationTypeValuesStep1ExpectedValues
        {
            get
            {
                if ((this.mCheckOvertidCalculationTypeValuesStep1ExpectedValues == null))
                {
                    this.mCheckOvertidCalculationTypeValuesStep1ExpectedValues = new CheckOvertidCalculationTypeValuesStep1ExpectedValues();
                }
                return this.mCheckOvertidCalculationTypeValuesStep1ExpectedValues;
            }
        }
        
        public virtual CheckOvertidCalculationTypeValuesStep14Params CheckOvertidCalculationTypeValuesStep14Params
        {
            get
            {
                if ((this.mCheckOvertidCalculationTypeValuesStep14Params == null))
                {
                    this.mCheckOvertidCalculationTypeValuesStep14Params = new CheckOvertidCalculationTypeValuesStep14Params();
                }
                return this.mCheckOvertidCalculationTypeValuesStep14Params;
            }
        }
        
        public virtual CheckRecalcSavoOkStep16_1ExpectedValues CheckRecalcSavoOkStep16_1ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcSavoOkStep16_1ExpectedValues == null))
                {
                    this.mCheckRecalcSavoOkStep16_1ExpectedValues = new CheckRecalcSavoOkStep16_1ExpectedValues();
                }
                return this.mCheckRecalcSavoOkStep16_1ExpectedValues;
            }
        }
        
        public virtual CheckRecalcSavoOkStep16_2ExpectedValues CheckRecalcSavoOkStep16_2ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcSavoOkStep16_2ExpectedValues == null))
                {
                    this.mCheckRecalcSavoOkStep16_2ExpectedValues = new CheckRecalcSavoOkStep16_2ExpectedValues();
                }
                return this.mCheckRecalcSavoOkStep16_2ExpectedValues;
            }
        }
        
        public virtual CheckRecalcSavoOkStep16_3ExpectedValues CheckRecalcSavoOkStep16_3ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcSavoOkStep16_3ExpectedValues == null))
                {
                    this.mCheckRecalcSavoOkStep16_3ExpectedValues = new CheckRecalcSavoOkStep16_3ExpectedValues();
                }
                return this.mCheckRecalcSavoOkStep16_3ExpectedValues;
            }
        }
        
        public virtual CheckRecalcSavoOkStep16_4ExpectedValues CheckRecalcSavoOkStep16_4ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcSavoOkStep16_4ExpectedValues == null))
                {
                    this.mCheckRecalcSavoOkStep16_4ExpectedValues = new CheckRecalcSavoOkStep16_4ExpectedValues();
                }
                return this.mCheckRecalcSavoOkStep16_4ExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep10ExpectedValues CheckRecalcValuesStep10ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep10ExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep10ExpectedValues = new CheckRecalcValuesStep10ExpectedValues();
                }
                return this.mCheckRecalcValuesStep10ExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep11ExpectedValues CheckRecalcValuesStep11ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep11ExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep11ExpectedValues = new CheckRecalcValuesStep11ExpectedValues();
                }
                return this.mCheckRecalcValuesStep11ExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep15ExpectedValues CheckRecalcValuesStep15ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep15ExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep15ExpectedValues = new CheckRecalcValuesStep15ExpectedValues();
                }
                return this.mCheckRecalcValuesStep15ExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep8ExpectedValues CheckRecalcValuesStep8ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep8ExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep8ExpectedValues = new CheckRecalcValuesStep8ExpectedValues();
                }
                return this.mCheckRecalcValuesStep8ExpectedValues;
            }
        }
        
        public virtual CheckShiftDatesStep7ExpectedValues CheckShiftDatesStep7ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftDatesStep7ExpectedValues == null))
                {
                    this.mCheckShiftDatesStep7ExpectedValues = new CheckShiftDatesStep7ExpectedValues();
                }
                return this.mCheckShiftDatesStep7ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep2ExpectedValues CheckValuesStep2ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep2ExpectedValues == null))
                {
                    this.mCheckValuesStep2ExpectedValues = new CheckValuesStep2ExpectedValues();
                }
                return this.mCheckValuesStep2ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep3ExpectedValues CheckValuesStep3ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep3ExpectedValues == null))
                {
                    this.mCheckValuesStep3ExpectedValues = new CheckValuesStep3ExpectedValues();
                }
                return this.mCheckValuesStep3ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep4ExpectedValues CheckValuesStep4ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep4ExpectedValues == null))
                {
                    this.mCheckValuesStep4ExpectedValues = new CheckValuesStep4ExpectedValues();
                }
                return this.mCheckValuesStep4ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep5ExpectedValues CheckValuesStep5ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep5ExpectedValues == null))
                {
                    this.mCheckValuesStep5ExpectedValues = new CheckValuesStep5ExpectedValues();
                }
                return this.mCheckValuesStep5ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep6ExpectedValues CheckValuesStep6ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep6ExpectedValues == null))
                {
                    this.mCheckValuesStep6ExpectedValues = new CheckValuesStep6ExpectedValues();
                }
                return this.mCheckValuesStep6ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep7ExpectedValues CheckValuesStep7ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep7ExpectedValues == null))
                {
                    this.mCheckValuesStep7ExpectedValues = new CheckValuesStep7ExpectedValues();
                }
                return this.mCheckValuesStep7ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep9ExpectedValues CheckValuesStep9ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep9ExpectedValues == null))
                {
                    this.mCheckValuesStep9ExpectedValues = new CheckValuesStep9ExpectedValues();
                }
                return this.mCheckValuesStep9ExpectedValues;
            }
        }
        
        public virtual SelectOvertidInGlobalSettingsParams SelectOvertidInGlobalSettingsParams
        {
            get
            {
                if ((this.mSelectOvertidInGlobalSettingsParams == null))
                {
                    this.mSelectOvertidInGlobalSettingsParams = new SelectOvertidInGlobalSettingsParams();
                }
                return this.mSelectOvertidInGlobalSettingsParams;
            }
        }
        
        public virtual CheckValuesStep4DfoExpectedValues CheckValuesStep4DfoExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep4DfoExpectedValues == null))
                {
                    this.mCheckValuesStep4DfoExpectedValues = new CheckValuesStep4DfoExpectedValues();
                }
                return this.mCheckValuesStep4DfoExpectedValues;
            }
        }
        
        public virtual CheckValuesStep5DfoExpectedValues CheckValuesStep5DfoExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep5DfoExpectedValues == null))
                {
                    this.mCheckValuesStep5DfoExpectedValues = new CheckValuesStep5DfoExpectedValues();
                }
                return this.mCheckValuesStep5DfoExpectedValues;
            }
        }
        
        public virtual CheckValuesStep6DfoExpectedValues CheckValuesStep6DfoExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep6DfoExpectedValues == null))
                {
                    this.mCheckValuesStep6DfoExpectedValues = new CheckValuesStep6DfoExpectedValues();
                }
                return this.mCheckValuesStep6DfoExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep8DfoExpectedValues CheckRecalcValuesStep8DfoExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep8DfoExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep8DfoExpectedValues = new CheckRecalcValuesStep8DfoExpectedValues();
                }
                return this.mCheckRecalcValuesStep8DfoExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep11DfoExpectedValues CheckRecalcValuesStep11DfoExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep11DfoExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep11DfoExpectedValues = new CheckRecalcValuesStep11DfoExpectedValues();
                }
                return this.mCheckRecalcValuesStep11DfoExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep15DfoExpectedValues CheckRecalcValuesStep15DfoExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep15DfoExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep15DfoExpectedValues = new CheckRecalcValuesStep15DfoExpectedValues();
                }
                return this.mCheckRecalcValuesStep15DfoExpectedValues;
            }
        }
        
        public virtual CheckValuesStep7DfoExpectedValues CheckValuesStep7DfoExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep7DfoExpectedValues == null))
                {
                    this.mCheckValuesStep7DfoExpectedValues = new CheckValuesStep7DfoExpectedValues();
                }
                return this.mCheckValuesStep7DfoExpectedValues;
            }
        }
        
        public UIGlobaltoppsettWindow UIGlobaltoppsettWindow
        {
            get
            {
                if ((this.mUIGlobaltoppsettWindow == null))
                {
                    this.mUIGlobaltoppsettWindow = new UIGlobaltoppsettWindow();
                }
                return this.mUIGlobaltoppsettWindow;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        
        public UIMerarbeidovertidWindow UIMerarbeidovertidWindow
        {
            get
            {
                if ((this.mUIMerarbeidovertidWindow == null))
                {
                    this.mUIMerarbeidovertidWindow = new UIMerarbeidovertidWindow();
                }
                return this.mUIMerarbeidovertidWindow;
            }
        }
        
        public UIRekalkuleringWindow UIRekalkuleringWindow
        {
            get
            {
                if ((this.mUIRekalkuleringWindow == null))
                {
                    this.mUIRekalkuleringWindow = new UIRekalkuleringWindow();
                }
                return this.mUIRekalkuleringWindow;
            }
        }
        
        public UISlettWindow UISlettWindow
        {
            get
            {
                if ((this.mUISlettWindow == null))
                {
                    this.mUISlettWindow = new UISlettWindow();
                }
                return this.mUISlettWindow;
            }
        }
        
        public UIFraværsregistreringWindow UIFraværsregistreringWindow
        {
            get
            {
                if ((this.mUIFraværsregistreringWindow == null))
                {
                    this.mUIFraværsregistreringWindow = new UIFraværsregistreringWindow();
                }
                return this.mUIFraværsregistreringWindow;
            }
        }
        
        public UIEndrekonteringWindow UIEndrekonteringWindow
        {
            get
            {
                if ((this.mUIEndrekonteringWindow == null))
                {
                    this.mUIEndrekonteringWindow = new UIEndrekonteringWindow();
                }
                return this.mUIEndrekonteringWindow;
            }
        }
        #endregion
        
        #region Fields
        private CheckOvertidCalculationTypeValuesStep1ExpectedValues mCheckOvertidCalculationTypeValuesStep1ExpectedValues;
        
        private CheckOvertidCalculationTypeValuesStep14Params mCheckOvertidCalculationTypeValuesStep14Params;
        
        private CheckRecalcSavoOkStep16_1ExpectedValues mCheckRecalcSavoOkStep16_1ExpectedValues;
        
        private CheckRecalcSavoOkStep16_2ExpectedValues mCheckRecalcSavoOkStep16_2ExpectedValues;
        
        private CheckRecalcSavoOkStep16_3ExpectedValues mCheckRecalcSavoOkStep16_3ExpectedValues;
        
        private CheckRecalcSavoOkStep16_4ExpectedValues mCheckRecalcSavoOkStep16_4ExpectedValues;
        
        private CheckRecalcValuesStep10ExpectedValues mCheckRecalcValuesStep10ExpectedValues;
        
        private CheckRecalcValuesStep11ExpectedValues mCheckRecalcValuesStep11ExpectedValues;
        
        private CheckRecalcValuesStep15ExpectedValues mCheckRecalcValuesStep15ExpectedValues;
        
        private CheckRecalcValuesStep8ExpectedValues mCheckRecalcValuesStep8ExpectedValues;
        
        private CheckShiftDatesStep7ExpectedValues mCheckShiftDatesStep7ExpectedValues;
        
        private CheckValuesStep2ExpectedValues mCheckValuesStep2ExpectedValues;
        
        private CheckValuesStep3ExpectedValues mCheckValuesStep3ExpectedValues;
        
        private CheckValuesStep4ExpectedValues mCheckValuesStep4ExpectedValues;
        
        private CheckValuesStep5ExpectedValues mCheckValuesStep5ExpectedValues;
        
        private CheckValuesStep6ExpectedValues mCheckValuesStep6ExpectedValues;
        
        private CheckValuesStep7ExpectedValues mCheckValuesStep7ExpectedValues;
        
        private CheckValuesStep9ExpectedValues mCheckValuesStep9ExpectedValues;
        
        private SelectOvertidInGlobalSettingsParams mSelectOvertidInGlobalSettingsParams;
        
        private CheckValuesStep4DfoExpectedValues mCheckValuesStep4DfoExpectedValues;
        
        private CheckValuesStep5DfoExpectedValues mCheckValuesStep5DfoExpectedValues;
        
        private CheckValuesStep6DfoExpectedValues mCheckValuesStep6DfoExpectedValues;
        
        private CheckRecalcValuesStep8DfoExpectedValues mCheckRecalcValuesStep8DfoExpectedValues;
        
        private CheckRecalcValuesStep11DfoExpectedValues mCheckRecalcValuesStep11DfoExpectedValues;
        
        private CheckRecalcValuesStep15DfoExpectedValues mCheckRecalcValuesStep15DfoExpectedValues;
        
        private CheckValuesStep7DfoExpectedValues mCheckValuesStep7DfoExpectedValues;
        
        private UIGlobaltoppsettWindow mUIGlobaltoppsettWindow;
        
        private UIGatWindow mUIGatWindow;
        
        private UIMerarbeidovertidWindow mUIMerarbeidovertidWindow;
        
        private UIRekalkuleringWindow mUIRekalkuleringWindow;
        
        private UISlettWindow mUISlettWindow;
        
        private UIFraværsregistreringWindow mUIFraværsregistreringWindow;
        
        private UIEndrekonteringWindow mUIEndrekonteringWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOvertidCalculationTypeValuesStep1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOvertidCalculationTypeValuesStep1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Selected' property of 'Kalkuler i registreringsrekkefølge.' radio button equals 'True'
        /// </summary>
        public bool UIKalkuleriregistrerinRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOvertidCalculationTypeValuesStep14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOvertidCalculationTypeValuesStep14Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Kalkuler i kronologisk rekkefølge.' radio button
        /// </summary>
        public bool UIKalkulerikronologiskRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcSavoOkStep16_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcSavoOkStep16_1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of combo box equals 'Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1'
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals '29.10.2023'
        /// </summary>
        public string UIItemEditText = "29.10.2023";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcSavoOkStep16_2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcSavoOkStep16_2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of combo box equals 'Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1'
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals '25.10.2023'
        /// </summary>
        public string UIItemEditText = "25.10.2023";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcSavoOkStep16_3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcSavoOkStep16_3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of combo box equals 'Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1'
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals '23.10.2023'
        /// </summary>
        public string UIItemEditText = "23.10.2023";
        
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'E - Ekstravakt' window equals 'E - Ekstravakt'
        /// </summary>
        public string UIEEkstravaktWindowFriendlyName = "E - Ekstravakt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcSavoOkStep16_4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcSavoOkStep16_4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of combo box equals 'Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1'
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Turnus, Annet Døgn/ukeskille - TURNUS - 80% - 1";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals '22.10.2023'
        /// </summary>
        public string UIItemEditText = "22.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'E - Ekstravakt'
        /// </summary>
        public string UIItemEditText1 = "E - Ekstravakt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
        /// </summary>
        public string UIItem22102023CellText = "22.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100CellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
        /// </summary>
        public string UIItem400LørSøndagstilCellText = "400 - Lør./Søndagstillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800Cell1Text = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '23.10.2023' cell equals '25.10.2023'
        /// </summary>
        public string UIItem23102023CellText = "25.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,50' cell equals '4,70'
        /// </summary>
        public string UIItem350CellText = "4,70";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '3,30'
        /// </summary>
        public string UIItem450CellText = "3,30";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
        /// </summary>
        public string UIItem22102023CellText = "22.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100CellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '3,50'
        /// </summary>
        public string UIItem800CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell3Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '4,50'
        /// </summary>
        public string UIItem450Cell1Text = "4,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '23.10.2023' cell equals '25.10.2023'
        /// </summary>
        public string UIItem23102023CellText = "25.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,50' cell equals '5,30'
        /// </summary>
        public string UIItem350CellText = "5,30";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '2,70'
        /// </summary>
        public string UIItem450CellText = "2,70";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
        /// </summary>
        public string UIItem22102023CellText = "22.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100CellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
        /// </summary>
        public string UIItem23102023CellText = "23.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,50' cell equals '3,50'
        /// </summary>
        public string UIItem350CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '4,50'
        /// </summary>
        public string UIItem450CellText = "4,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
        /// </summary>
        public string UIItem25102023CellText = "25.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell2Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '2,00'
        /// </summary>
        public string UIItem200CellText = "2,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '6,00' cell equals '6,00'
        /// </summary>
        public string UIItem600CellText = "6,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '29.10.2023' cell equals '29.10.2023'
        /// </summary>
        public string UIItem29102023CellText = "29.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell2Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,70' cell equals '4,70'
        /// </summary>
        public string UIItem470CellText = "4,70";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell4Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,30' cell equals '3,30'
        /// </summary>
        public string UIItem330CellText = "3,30";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
        /// </summary>
        public string UIItem22102023CellText = "22.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100CellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '3,50'
        /// </summary>
        public string UIItem800CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell3Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '4,50'
        /// </summary>
        public string UIItem450Cell1Text = "4,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
        /// </summary>
        public string UIItem23102023CellText = "23.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,50' cell equals '8,00'
        /// </summary>
        public string UIItem350CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
        /// </summary>
        public string UIItem25102023CellText = "25.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell2Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '5,30'
        /// </summary>
        public string UIItem200CellText = "5,30";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '6,00' cell equals '2,70'
        /// </summary>
        public string UIItem600CellText = "2,70";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftDatesStep7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftDatesStep7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
        /// </summary>
        public string UIItem22102023CellText = "22.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
        /// </summary>
        public string UIItem23102023CellText = "23.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
        /// </summary>
        public string UIItem25102023CellText = "25.10.2023";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,50' cell equals '3,50'
        /// </summary>
        public string UIItem350CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '4,50'
        /// </summary>
        public string UIItem800CellText = "4,50";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '6,00'
        /// </summary>
        public string UIItem800CellText = "6,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '2,00'
        /// </summary>
        public string UIItem200CellText = "2,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100CellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '8,00'
        /// </summary>
        public string UIItem200CellText = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '2,70'
        /// </summary>
        public string UIItem800CellText = "2,70";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '5,30'
        /// </summary>
        public string UIItem200CellText = "5,30";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,50' cell equals '3,50'
        /// </summary>
        public string UIItem350CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '4,50'
        /// </summary>
        public string UIItem450CellText = "4,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell2Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '2,00'
        /// </summary>
        public string UIItem200CellText = "2,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '6,00' cell equals '6,00'
        /// </summary>
        public string UIItem600CellText = "6,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
        /// </summary>
        public string UIItem23102023CellText = "23.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '-8' cell equals '-8'
        /// </summary>
        public string UIItem8CellText = "-8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectOvertidInGlobalSettings'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectOvertidInGlobalSettingsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Kalkuler i registreringsrekkefølge.' radio button
        /// </summary>
        public bool UIKalkuleriregistrerinRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep4Dfo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep4DfoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '2,00'
        /// </summary>
        public string UIItem800CellText = "2,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100CellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '6,00'
        /// </summary>
        public string UIItem200CellText = "6,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep5Dfo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep5DfoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100CellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '8,00'
        /// </summary>
        public string UIItem200CellText = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep6Dfo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep6DfoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '5,30'
        /// </summary>
        public string UIItem800CellText = "5,30";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100CellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '2,70'
        /// </summary>
        public string UIItem200CellText = "2,70";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep8Dfo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep8DfoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
        /// </summary>
        public string UIItem22102023CellText = "22.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100CellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '3,50'
        /// </summary>
        public string UIItem800CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell3Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '4,50'
        /// </summary>
        public string UIItem450Cell1Text = "4,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
        /// </summary>
        public string UIItem23102023CellText = "23.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,50' cell equals '8,00'
        /// </summary>
        public string UIItem350CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
        /// </summary>
        public string UIItem25102023CellText = "25.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100Cell2Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '2,70'
        /// </summary>
        public string UIItem200CellText = "2,70";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '6,00' cell equals '5,30'
        /// </summary>
        public string UIItem600CellText = "5,30";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep11Dfo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep11DfoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
        /// </summary>
        public string UIItem22102023CellText = "22.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100CellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '3,50'
        /// </summary>
        public string UIItem800CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell3Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '4,50'
        /// </summary>
        public string UIItem450Cell1Text = "4,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '23.10.2023' cell equals '25.10.2023'
        /// </summary>
        public string UIItem23102023CellText = "25.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,50' cell equals '2,70'
        /// </summary>
        public string UIItem350CellText = "2,70";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '5,30'
        /// </summary>
        public string UIItem450CellText = "5,30";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep15Dfo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep15DfoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
        /// </summary>
        public string UIItem22102023CellText = "22.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100CellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
        /// </summary>
        public string UIItem23102023CellText = "23.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,50' cell equals '3,50'
        /// </summary>
        public string UIItem350CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '4,50'
        /// </summary>
        public string UIItem450CellText = "4,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
        /// </summary>
        public string UIItem25102023CellText = "25.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100Cell2Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '6,00'
        /// </summary>
        public string UIItem200CellText = "6,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '6,00' cell equals '2,00'
        /// </summary>
        public string UIItem600CellText = "2,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '29.10.2023' cell equals '29.10.2023'
        /// </summary>
        public string UIItem29102023CellText = "29.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell2Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,70' cell equals '4,70'
        /// </summary>
        public string UIItem470CellText = "4,70";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell4Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,30' cell equals '3,30'
        /// </summary>
        public string UIItem330CellText = "3,30";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep7Dfo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep7DfoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '22.10.2023' cell equals '22.10.2023'
        /// </summary>
        public string UIItem22102023CellText = "22.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '23.10.2023' cell equals '23.10.2023'
        /// </summary>
        public string UIItem23102023CellText = "23.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '3,50' cell equals '3,50'
        /// </summary>
        public string UIItem350CellText = "3,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '4,50' cell equals '4,50'
        /// </summary>
        public string UIItem450CellText = "4,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '25.10.2023' cell equals '25.10.2023'
        /// </summary>
        public string UIItem25102023CellText = "25.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100Cell2Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,00' cell equals '6,00'
        /// </summary>
        public string UIItem200CellText = "6,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '6,00' cell equals '2,00'
        /// </summary>
        public string UIItem600CellText = "2,00";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGlobaltoppsettWindow : WinWindow
    {
        
        public UIGlobaltoppsettWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Globalt oppsett";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmSetup";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIRekkefølgepåkalkulerClient UIRekkefølgepåkalkulerClient
        {
            get
            {
                if ((this.mUIRekkefølgepåkalkulerClient == null))
                {
                    this.mUIRekkefølgepåkalkulerClient = new UIRekkefølgepåkalkulerClient(this);
                }
                return this.mUIRekkefølgepåkalkulerClient;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIRekkefølgepåkalkulerClient mUIRekkefølgepåkalkulerClient;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxTreeList";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public WinClient UIGlobaltoppsettClient
        {
            get
            {
                if ((this.mUIGlobaltoppsettClient == null))
                {
                    this.mUIGlobaltoppsettClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIGlobaltoppsettClient.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUIGlobaltoppsettClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIGlobaltoppsettClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRekkefølgepåkalkulerClient : WinClient
    {
        
        public UIRekkefølgepåkalkulerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Rekkefølge på kalkulering av overtid";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIKalkuleriregistrerinRadioButton
        {
            get
            {
                if ((this.mUIKalkuleriregistrerinRadioButton == null))
                {
                    this.mUIKalkuleriregistrerinRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIKalkuleriregistrerinRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Kalkuler i registreringsrekkefølge.";
                    this.mUIKalkuleriregistrerinRadioButton.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUIKalkuleriregistrerinRadioButton;
            }
        }
        
        public WinRadioButton UIKalkulerikronologiskRadioButton
        {
            get
            {
                if ((this.mUIKalkulerikronologiskRadioButton == null))
                {
                    this.mUIKalkulerikronologiskRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIKalkulerikronologiskRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Kalkuler i kronologisk rekkefølge.";
                    this.mUIKalkulerikronologiskRadioButton.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUIKalkulerikronologiskRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIKalkuleriregistrerinRadioButton;
        
        private WinRadioButton mUIKalkulerikronologiskRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public UIGlobaltoppsettClient UIGlobaltoppsettClient
        {
            get
            {
                if ((this.mUIGlobaltoppsettClient == null))
                {
                    this.mUIGlobaltoppsettClient = new UIGlobaltoppsettClient(this);
                }
                return this.mUIGlobaltoppsettClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGlobaltoppsettClient mUIGlobaltoppsettClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGlobaltoppsettClient : WinClient
    {
        
        public UIGlobaltoppsettClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public WinButton UILagreButton
        {
            get
            {
                if ((this.mUILagreButton == null))
                {
                    this.mUILagreButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILagreButton.SearchProperties[WinButton.PropertyNames.Name] = "Lagre";
                    this.mUILagreButton.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUILagreButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILagreButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UICenterPanelDayDockPanel UICenterPanelDayDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayDockPanel == null))
                {
                    this.mUICenterPanelDayDockPanel = new UICenterPanelDayDockPanel(this);
                }
                return this.mUICenterPanelDayDockPanel;
            }
        }
        
        public UIRibbonControlRibbon UIRibbonControlRibbon
        {
            get
            {
                if ((this.mUIRibbonControlRibbon == null))
                {
                    this.mUIRibbonControlRibbon = new UIRibbonControlRibbon(this);
                }
                return this.mUIRibbonControlRibbon;
            }
        }
        
        public UIBottomPanelDockPanel UIBottomPanelDockPanel
        {
            get
            {
                if ((this.mUIBottomPanelDockPanel == null))
                {
                    this.mUIBottomPanelDockPanel = new UIBottomPanelDockPanel(this);
                }
                return this.mUIBottomPanelDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UICenterPanelDayDockPanel mUICenterPanelDayDockPanel;
        
        private UIRibbonControlRibbon mUIRibbonControlRibbon;
        
        private UIBottomPanelDockPanel mUIBottomPanelDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDay";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom : DXTestControl
    {
        
        public UIControlContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UICenterPanelDayWrappeDockPanel UICenterPanelDayWrappeDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayWrappeDockPanel == null))
                {
                    this.mUICenterPanelDayWrappeDockPanel = new UICenterPanelDayWrappeDockPanel(this);
                }
                return this.mUICenterPanelDayWrappeDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UICenterPanelDayWrappeDockPanel mUICenterPanelDayWrappeDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayWrappeDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayWrappeDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayWrapper";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UINatttiltirsdag001677DockPanel UINatttiltirsdag001677DockPanel
        {
            get
            {
                if ((this.mUINatttiltirsdag001677DockPanel == null))
                {
                    this.mUINatttiltirsdag001677DockPanel = new UINatttiltirsdag001677DockPanel(this);
                }
                return this.mUINatttiltirsdag001677DockPanel;
            }
        }
        
        public UIFriVikar00167770770FDockPanel UIFriVikar00167770770FDockPanel
        {
            get
            {
                if ((this.mUIFriVikar00167770770FDockPanel == null))
                {
                    this.mUIFriVikar00167770770FDockPanel = new UIFriVikar00167770770FDockPanel(this);
                }
                return this.mUIFriVikar00167770770FDockPanel;
            }
        }
        
        public UIDag00167770770FalseDockPanel UIDag00167770770FalseDockPanel
        {
            get
            {
                if ((this.mUIDag00167770770FalseDockPanel == null))
                {
                    this.mUIDag00167770770FalseDockPanel = new UIDag00167770770FalseDockPanel(this);
                }
                return this.mUIDag00167770770FalseDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UINatttiltirsdag001677DockPanel mUINatttiltirsdag001677DockPanel;
        
        private UIFriVikar00167770770FDockPanel mUIFriVikar00167770770FDockPanel;
        
        private UIDag00167770770FalseDockPanel mUIDag00167770770FalseDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINatttiltirsdag001677DockPanel : DXDockPanel
    {
        
        public UINatttiltirsdag001677DockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Natt til tirsdag;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom1 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom1(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom1 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom1 : DXTestControl
    {
        
        public UIControlContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Natt til tirsdag;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcDayColumnTable UIGcDayColumnTable
        {
            get
            {
                if ((this.mUIGcDayColumnTable == null))
                {
                    this.mUIGcDayColumnTable = new UIGcDayColumnTable(this);
                }
                return this.mUIGcDayColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDayColumnTable mUIGcDayColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDayColumnTable : DXGrid
    {
        
        public UIGcDayColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusAnnetDøgnukeskCell
        {
            get
            {
                if ((this.mUITurnusAnnetDøgnukeskCell == null))
                {
                    this.mUITurnusAnnetDøgnukeskCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusAnnetDøgnukeskCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]0[Column]colEmployeeName";
                    this.mUITurnusAnnetDøgnukeskCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusAnnetDøgnukeskCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusAnnetDøgnukeskCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusAnnetDøgnukeskCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFriVikar00167770770FDockPanel : DXDockPanel
    {
        
        public UIFriVikar00167770770FDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Fri / Vikar;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom2 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom2(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom2 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom2 : DXTestControl
    {
        
        public UIControlContainerCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Fri / Vikar;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcFreeColumnTable UIGcFreeColumnTable
        {
            get
            {
                if ((this.mUIGcFreeColumnTable == null))
                {
                    this.mUIGcFreeColumnTable = new UIGcFreeColumnTable(this);
                }
                return this.mUIGcFreeColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcFreeColumnTable mUIGcFreeColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcFreeColumnTable : DXGrid
    {
        
        public UIGcFreeColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusAnnetDøgnukeskCell
        {
            get
            {
                if ((this.mUITurnusAnnetDøgnukeskCell == null))
                {
                    this.mUITurnusAnnetDøgnukeskCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusAnnetDøgnukeskCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumnGridControlCell[View]gvFreeColumn[Row]0[Column]colEmployeeName";
                    this.mUITurnusAnnetDøgnukeskCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusAnnetDøgnukeskCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusAnnetDøgnukeskCell;
            }
        }
        
        public DXCell UITurnusAnnetDøgnukeskCell1
        {
            get
            {
                if ((this.mUITurnusAnnetDøgnukeskCell1 == null))
                {
                    this.mUITurnusAnnetDøgnukeskCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusAnnetDøgnukeskCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumnGridControlCell[View]gvFreeColumn[Row]1[Column]colEmployeeName";
                    this.mUITurnusAnnetDøgnukeskCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusAnnetDøgnukeskCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusAnnetDøgnukeskCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusAnnetDøgnukeskCell;
        
        private DXCell mUITurnusAnnetDøgnukeskCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDag00167770770FalseDockPanel : DXDockPanel
    {
        
        public UIDag00167770770FalseDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom3 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom3(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom3 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom3 : DXTestControl
    {
        
        public UIControlContainerCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcDayColumnTable1 UIGcDayColumnTable
        {
            get
            {
                if ((this.mUIGcDayColumnTable == null))
                {
                    this.mUIGcDayColumnTable = new UIGcDayColumnTable1(this);
                }
                return this.mUIGcDayColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDayColumnTable1 mUIGcDayColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDayColumnTable1 : DXGrid
    {
        
        public UIGcDayColumnTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusAnnetDøgnukeskCell
        {
            get
            {
                if ((this.mUITurnusAnnetDøgnukeskCell == null))
                {
                    this.mUITurnusAnnetDøgnukeskCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusAnnetDøgnukeskCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]0[Column]colEmployeeName";
                    this.mUITurnusAnnetDøgnukeskCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusAnnetDøgnukeskCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusAnnetDøgnukeskCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusAnnetDøgnukeskCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonControlRibbon : DXRibbon
    {
        
        public UIRibbonControlRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRpMainMenuRibbonPage UIRpMainMenuRibbonPage
        {
            get
            {
                if ((this.mUIRpMainMenuRibbonPage == null))
                {
                    this.mUIRpMainMenuRibbonPage = new UIRpMainMenuRibbonPage(this);
                }
                return this.mUIRpMainMenuRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpMainMenuRibbonPage mUIRpMainMenuRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpMainMenuRibbonPage : DXRibbonPage
    {
        
        public UIRpMainMenuRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpMainMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGrpDevianceRibbonPageGroup UIGrpDevianceRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpDevianceRibbonPageGroup == null))
                {
                    this.mUIGrpDevianceRibbonPageGroup = new UIGrpDevianceRibbonPageGroup(this);
                }
                return this.mUIGrpDevianceRibbonPageGroup;
            }
        }
        
        public UIGrpMiscRibbonPageGroup UIGrpMiscRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpMiscRibbonPageGroup == null))
                {
                    this.mUIGrpMiscRibbonPageGroup = new UIGrpMiscRibbonPageGroup(this);
                }
                return this.mUIGrpMiscRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpDevianceRibbonPageGroup mUIGrpDevianceRibbonPageGroup;
        
        private UIGrpMiscRibbonPageGroup mUIGrpMiscRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpDevianceRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpDevianceRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpDeviance";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIEkstraRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIEkstraRibbonBaseButtonItem == null))
                {
                    this.mUIEkstraRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIEkstraRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnExtra";
                    this.mUIEkstraRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIEkstraRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIEkstraRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIForskjøvetvaktRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIForskjøvetvaktRibbonBaseButtonItem == null))
                {
                    this.mUIForskjøvetvaktRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIForskjøvetvaktRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnRemanage";
                    this.mUIForskjøvetvaktRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIForskjøvetvaktRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIForskjøvetvaktRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIFraværRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIFraværRibbonBaseButtonItem == null))
                {
                    this.mUIFraværRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIFraværRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnAbsence";
                    this.mUIFraværRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIFraværRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIFraværRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIEkstraRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIForskjøvetvaktRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIFraværRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpMiscRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpMiscRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpMisc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UISlettRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUISlettRibbonBaseButtonItem == null))
                {
                    this.mUISlettRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnDelete";
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUISlettRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISlettRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUISlettRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBottomPanelDockPanel : DXDockPanel
    {
        
        public UIBottomPanelDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BottomPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIFraværDockPanel UIFraværDockPanel
        {
            get
            {
                if ((this.mUIFraværDockPanel == null))
                {
                    this.mUIFraværDockPanel = new UIFraværDockPanel(this);
                }
                return this.mUIFraværDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIFraværDockPanel mUIFraværDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFraværDockPanel : DXDockPanel
    {
        
        public UIFraværDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Fravær";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom4 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom4(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom4 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom4 : DXTestControl
    {
        
        public UIControlContainerCustom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FraværControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcAbsenceColumnTable UIGcAbsenceColumnTable
        {
            get
            {
                if ((this.mUIGcAbsenceColumnTable == null))
                {
                    this.mUIGcAbsenceColumnTable = new UIGcAbsenceColumnTable(this);
                }
                return this.mUIGcAbsenceColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAbsenceColumnTable mUIGcAbsenceColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAbsenceColumnTable : DXGrid
    {
        
        public UIGcAbsenceColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusAnnetDøgnukeskCell
        {
            get
            {
                if ((this.mUITurnusAnnetDøgnukeskCell == null))
                {
                    this.mUITurnusAnnetDøgnukeskCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusAnnetDøgnukeskCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceColumnGridControlCell[View]gvAbsenceColumn[Row]0[Column]gccFullName";
                    this.mUITurnusAnnetDøgnukeskCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusAnnetDøgnukeskCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusAnnetDøgnukeskCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusAnnetDøgnukeskCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinClient UIAnsatteClient
        {
            get
            {
                if ((this.mUIAnsatteClient == null))
                {
                    this.mUIAnsatteClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAnsatteClient.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAnsatteClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAnsatteClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinClient UITimelisteClient
        {
            get
            {
                if ((this.mUITimelisteClient == null))
                {
                    this.mUITimelisteClient = new WinClient(this);
                    #region Search Criteria
                    this.mUITimelisteClient.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITimelisteClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUITimelisteClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMerarbeidovertidWindow : DXWindow
    {
        
        public UIMerarbeidovertidWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Merarbeid / overtid";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UIPanClientClient UIPanClientClient
        {
            get
            {
                if ((this.mUIPanClientClient == null))
                {
                    this.mUIPanClientClient = new UIPanClientClient(this);
                }
                return this.mUIPanClientClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanClientClient mUIPanClientClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanClientClient : DXTestControl
    {
        
        public UIPanClientClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panClient";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITcClientTabList UITcClientTabList
        {
            get
            {
                if ((this.mUITcClientTabList == null))
                {
                    this.mUITcClientTabList = new UITcClientTabList(this);
                }
                return this.mUITcClientTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcClientTabList mUITcClientTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcClientTabList : DXTestControl
    {
        
        public UITcClientTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcClient";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITpMainClient UITpMainClient
        {
            get
            {
                if ((this.mUITpMainClient == null))
                {
                    this.mUITpMainClient = new UITpMainClient(this);
                }
                return this.mUITpMainClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpMainClient mUITpMainClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpMainClient : DXTestControl
    {
        
        public UITpMainClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITcExtraDetailTabList UITcExtraDetailTabList
        {
            get
            {
                if ((this.mUITcExtraDetailTabList == null))
                {
                    this.mUITcExtraDetailTabList = new UITcExtraDetailTabList(this);
                }
                return this.mUITcExtraDetailTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcExtraDetailTabList mUITcExtraDetailTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcExtraDetailTabList : DXTestControl
    {
        
        public UITcExtraDetailTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcExtraDetail";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITpSalaryCalcClient UITpSalaryCalcClient
        {
            get
            {
                if ((this.mUITpSalaryCalcClient == null))
                {
                    this.mUITpSalaryCalcClient = new UITpSalaryCalcClient(this);
                }
                return this.mUITpSalaryCalcClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpSalaryCalcClient mUITpSalaryCalcClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpSalaryCalcClient : DXTestControl
    {
        
        public UITpSalaryCalcClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpSalaryCalc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UIGcAccountingLinesTable UIGcAccountingLinesTable
        {
            get
            {
                if ((this.mUIGcAccountingLinesTable == null))
                {
                    this.mUIGcAccountingLinesTable = new UIGcAccountingLinesTable(this);
                }
                return this.mUIGcAccountingLinesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAccountingLinesTable mUIGcAccountingLinesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAccountingLinesTable : DXGrid
    {
        
        public UIGcAccountingLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem200TimelønnCell
        {
            get
            {
                if ((this.mUIItem200TimelønnCell == null))
                {
                    this.mUIItem200TimelønnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]0[Column]colCostType";
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem200TimelønnCell;
            }
        }
        
        public DXCell UIItem800Cell
        {
            get
            {
                if ((this.mUIItem800Cell == null))
                {
                    this.mUIItem800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]0[Column]colAmount";
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem800Cell;
            }
        }
        
        public DXCell UIItem200TimelønnCell1
        {
            get
            {
                if ((this.mUIItem200TimelønnCell1 == null))
                {
                    this.mUIItem200TimelønnCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]2[Column]colCostType";
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell1.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem200TimelønnCell1;
            }
        }
        
        public DXCell UIItem350Cell
        {
            get
            {
                if ((this.mUIItem350Cell == null))
                {
                    this.mUIItem350Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem350Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]2[Column]colAmount";
                    this.mUIItem350Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem350Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem350Cell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell == null))
                {
                    this.mUIItem310Overtid100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]1[Column]colCostType";
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell;
            }
        }
        
        public DXCell UIItem200Cell
        {
            get
            {
                if ((this.mUIItem200Cell == null))
                {
                    this.mUIItem200Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]1[Column]colAmount";
                    this.mUIItem200Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem200Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem200TimelønnCell;
        
        private DXCell mUIItem800Cell;
        
        private DXCell mUIItem200TimelønnCell1;
        
        private DXCell mUIItem350Cell;
        
        private DXCell mUIItem310Overtid100Cell;
        
        private DXCell mUIItem200Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRekalkuleringWindow : DXWindow
    {
        
        public UIRekalkuleringWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Rekalkulering";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public UIGcRecalculationTable UIGcRecalculationTable
        {
            get
            {
                if ((this.mUIGcRecalculationTable == null))
                {
                    this.mUIGcRecalculationTable = new UIGcRecalculationTable(this);
                }
                return this.mUIGcRecalculationTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRecalculationTable mUIGcRecalculationTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRecalculationTable : DXGrid
    {
        
        public UIGcRecalculationTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculation";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem310Overtid100Cell
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell == null))
                {
                    this.mUIItem310Overtid100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]0[Column]colCostType";
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell;
            }
        }
        
        public DXCell UIItem800Cell
        {
            get
            {
                if ((this.mUIItem800Cell == null))
                {
                    this.mUIItem800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]0[Column]colAmount";
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem800Cell;
            }
        }
        
        public DXCell UIItem200TimelønnCell
        {
            get
            {
                if ((this.mUIItem200TimelønnCell == null))
                {
                    this.mUIItem200TimelønnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-2[Row]0[Column]colCostType";
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem200TimelønnCell;
            }
        }
        
        public DXCell UIItem350Cell
        {
            get
            {
                if ((this.mUIItem350Cell == null))
                {
                    this.mUIItem350Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem350Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-2[Row]0[Column]colAmount";
                    this.mUIItem350Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem350Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem350Cell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell1
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell1 == null))
                {
                    this.mUIItem310Overtid100Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-2[Row]1[Column]colCostType";
                    this.mUIItem310Overtid100Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell1;
            }
        }
        
        public DXCell UIItem450Cell
        {
            get
            {
                if ((this.mUIItem450Cell == null))
                {
                    this.mUIItem450Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem450Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-2[Row]1[Column]colAmount";
                    this.mUIItem450Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem450Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem450Cell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell2
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell2 == null))
                {
                    this.mUIItem310Overtid100Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-3[Row]0[Column]colCostType";
                    this.mUIItem310Overtid100Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell2.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell2;
            }
        }
        
        public DXCell UIItem200Cell
        {
            get
            {
                if ((this.mUIItem200Cell == null))
                {
                    this.mUIItem200Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-3[Row]0[Column]colAmount";
                    this.mUIItem200Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem200Cell;
            }
        }
        
        public DXCell UIItem200TimelønnCell1
        {
            get
            {
                if ((this.mUIItem200TimelønnCell1 == null))
                {
                    this.mUIItem200TimelønnCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-3[Row]1[Column]colCostType";
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem200TimelønnCell1;
            }
        }
        
        public DXCell UIItem600Cell
        {
            get
            {
                if ((this.mUIItem600Cell == null))
                {
                    this.mUIItem600Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem600Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-3[Row]1[Column]colAmount";
                    this.mUIItem600Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem600Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem600Cell;
            }
        }
        
        public DXCell UIItem22102023Cell
        {
            get
            {
                if ((this.mUIItem22102023Cell == null))
                {
                    this.mUIItem22102023Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem22102023Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]0[Column]colShiftDate";
                    this.mUIItem22102023Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem22102023Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem22102023Cell;
            }
        }
        
        public DXCell UIItem23102023Cell
        {
            get
            {
                if ((this.mUIItem23102023Cell == null))
                {
                    this.mUIItem23102023Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem23102023Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]1[Column]colShiftDate";
                    this.mUIItem23102023Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem23102023Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem23102023Cell;
            }
        }
        
        public DXCell UIItem25102023Cell
        {
            get
            {
                if ((this.mUIItem25102023Cell == null))
                {
                    this.mUIItem25102023Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem25102023Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]2[Column]colShiftDate";
                    this.mUIItem25102023Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem25102023Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem25102023Cell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell3
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell3 == null))
                {
                    this.mUIItem310Overtid100Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]2[Column]colCostType";
                    this.mUIItem310Overtid100Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell3.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell3;
            }
        }
        
        public DXCell UIItem450Cell1
        {
            get
            {
                if ((this.mUIItem450Cell1 == null))
                {
                    this.mUIItem450Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem450Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]2[Column]colAmount";
                    this.mUIItem450Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem450Cell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem450Cell1;
            }
        }
        
        public DXCell UIItem400LørSøndagstilCell
        {
            get
            {
                if ((this.mUIItem400LørSøndagstilCell == null))
                {
                    this.mUIItem400LørSøndagstilCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem400LørSøndagstilCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]1[Column]colCostType";
                    this.mUIItem400LørSøndagstilCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem400LørSøndagstilCell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem400LørSøndagstilCell;
            }
        }
        
        public DXCell UIItem800Cell1
        {
            get
            {
                if ((this.mUIItem800Cell1 == null))
                {
                    this.mUIItem800Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]1[Column]colAmount";
                    this.mUIItem800Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem800Cell1;
            }
        }
        
        public DXCell UIItem29102023Cell
        {
            get
            {
                if ((this.mUIItem29102023Cell == null))
                {
                    this.mUIItem29102023Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem29102023Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]3[Column]colShiftDate";
                    this.mUIItem29102023Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem29102023Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem29102023Cell;
            }
        }
        
        public DXCell UIItem200TimelønnCell2
        {
            get
            {
                if ((this.mUIItem200TimelønnCell2 == null))
                {
                    this.mUIItem200TimelønnCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-4[Row]0[Column]colCostType";
                    this.mUIItem200TimelønnCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell2.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem200TimelønnCell2;
            }
        }
        
        public DXCell UIItem470Cell
        {
            get
            {
                if ((this.mUIItem470Cell == null))
                {
                    this.mUIItem470Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem470Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-4[Row]0[Column]colAmount";
                    this.mUIItem470Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem470Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem470Cell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell4
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell4 == null))
                {
                    this.mUIItem310Overtid100Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-4[Row]2[Column]colCostType";
                    this.mUIItem310Overtid100Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell4.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell4;
            }
        }
        
        public DXCell UIItem330Cell
        {
            get
            {
                if ((this.mUIItem330Cell == null))
                {
                    this.mUIItem330Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem330Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-4[Row]2[Column]colAmount";
                    this.mUIItem330Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem330Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem330Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem310Overtid100Cell;
        
        private DXCell mUIItem800Cell;
        
        private DXCell mUIItem200TimelønnCell;
        
        private DXCell mUIItem350Cell;
        
        private DXCell mUIItem310Overtid100Cell1;
        
        private DXCell mUIItem450Cell;
        
        private DXCell mUIItem310Overtid100Cell2;
        
        private DXCell mUIItem200Cell;
        
        private DXCell mUIItem200TimelønnCell1;
        
        private DXCell mUIItem600Cell;
        
        private DXCell mUIItem22102023Cell;
        
        private DXCell mUIItem23102023Cell;
        
        private DXCell mUIItem25102023Cell;
        
        private DXCell mUIItem310Overtid100Cell3;
        
        private DXCell mUIItem450Cell1;
        
        private DXCell mUIItem400LørSøndagstilCell;
        
        private DXCell mUIItem800Cell1;
        
        private DXCell mUIItem29102023Cell;
        
        private DXCell mUIItem200TimelønnCell2;
        
        private DXCell mUIItem470Cell;
        
        private DXCell mUIItem310Overtid100Cell4;
        
        private DXCell mUIItem330Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISlettWindow : DXWindow
    {
        
        public UISlettWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Slett";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Slett");
            #endregion
        }
        
        #region Properties
        public UIDbFooterCustom UIDbFooterCustom
        {
            get
            {
                if ((this.mUIDbFooterCustom == null))
                {
                    this.mUIDbFooterCustom = new UIDbFooterCustom(this);
                }
                return this.mUIDbFooterCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDbFooterCustom mUIDbFooterCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDbFooterCustom : DXTestControl
    {
        
        public UIDbFooterCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dbFooter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSDialogFooterBar";
            this.WindowTitles.Add("Slett");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Slett");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFraværsregistreringWindow : DXWindow
    {
        
        public UIFraværsregistreringWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Fraværsregistrering";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIPnlShiftManagementClient UIPnlShiftManagementClient
        {
            get
            {
                if ((this.mUIPnlShiftManagementClient == null))
                {
                    this.mUIPnlShiftManagementClient = new UIPnlShiftManagementClient(this);
                }
                return this.mUIPnlShiftManagementClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlShiftManagementClient mUIPnlShiftManagementClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlShiftManagementClient : DXTestControl
    {
        
        public UIPnlShiftManagementClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlShiftManagement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UISccShiftManagementSplitContainerControl UISccShiftManagementSplitContainerControl
        {
            get
            {
                if ((this.mUISccShiftManagementSplitContainerControl == null))
                {
                    this.mUISccShiftManagementSplitContainerControl = new UISccShiftManagementSplitContainerControl(this);
                }
                return this.mUISccShiftManagementSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UISccShiftManagementSplitContainerControl mUISccShiftManagementSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISccShiftManagementSplitContainerControl : DXSplitContainerControl
    {
        
        public UISccShiftManagementSplitContainerControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "sccShiftManagement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSplitContainerControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UISplitGroupPanelClient UISplitGroupPanelClient
        {
            get
            {
                if ((this.mUISplitGroupPanelClient == null))
                {
                    this.mUISplitGroupPanelClient = new UISplitGroupPanelClient(this);
                }
                return this.mUISplitGroupPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UISplitGroupPanelClient mUISplitGroupPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISplitGroupPanelClient : DXTestControl
    {
        
        public UISplitGroupPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "sccShiftManagementSplitGroupPanel[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIGrcSalaryClient UIGrcSalaryClient
        {
            get
            {
                if ((this.mUIGrcSalaryClient == null))
                {
                    this.mUIGrcSalaryClient = new UIGrcSalaryClient(this);
                }
                return this.mUIGrcSalaryClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrcSalaryClient mUIGrcSalaryClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrcSalaryClient : DXTestControl
    {
        
        public UIGrcSalaryClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grcSalary";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UITcDeductPaymentTabList UITcDeductPaymentTabList
        {
            get
            {
                if ((this.mUITcDeductPaymentTabList == null))
                {
                    this.mUITcDeductPaymentTabList = new UITcDeductPaymentTabList(this);
                }
                return this.mUITcDeductPaymentTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcDeductPaymentTabList mUITcDeductPaymentTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcDeductPaymentTabList : DXTestControl
    {
        
        public UITcDeductPaymentTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcDeductPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UITabDeductPaymentClient UITabDeductPaymentClient
        {
            get
            {
                if ((this.mUITabDeductPaymentClient == null))
                {
                    this.mUITabDeductPaymentClient = new UITabDeductPaymentClient(this);
                }
                return this.mUITabDeductPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITabDeductPaymentClient mUITabDeductPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabDeductPaymentClient : DXTestControl
    {
        
        public UITabDeductPaymentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabDeductPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIGcPaymentLinesTable UIGcPaymentLinesTable
        {
            get
            {
                if ((this.mUIGcPaymentLinesTable == null))
                {
                    this.mUIGcPaymentLinesTable = new UIGcPaymentLinesTable(this);
                }
                return this.mUIGcPaymentLinesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcPaymentLinesTable mUIGcPaymentLinesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcPaymentLinesTable : DXGrid
    {
        
        public UIGcPaymentLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem23102023Cell
        {
            get
            {
                if ((this.mUIItem23102023Cell == null))
                {
                    this.mUIItem23102023Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem23102023Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]0[Column]gccPlDate";
                    this.mUIItem23102023Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem23102023Cell.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem23102023Cell;
            }
        }
        
        public DXCell UIItem200TimelønnCell
        {
            get
            {
                if ((this.mUIItem200TimelønnCell == null))
                {
                    this.mUIItem200TimelønnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]0[Column]gccPlTT";
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem200TimelønnCell;
            }
        }
        
        public DXCell UIItem8Cell
        {
            get
            {
                if ((this.mUIItem8Cell == null))
                {
                    this.mUIItem8Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem8Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]0[Column]gccPlHours";
                    this.mUIItem8Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem8Cell.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem8Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem23102023Cell;
        
        private DXCell mUIItem200TimelønnCell;
        
        private DXCell mUIItem8Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEndrekonteringWindow : WinWindow
    {
        
        public UIEndrekonteringWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Endre kontering";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmPosting";
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItem29102023Window UIItem29102023Window
        {
            get
            {
                if ((this.mUIItem29102023Window == null))
                {
                    this.mUIItem29102023Window = new UIItem29102023Window(this);
                }
                return this.mUIItem29102023Window;
            }
        }
        
        public UIItem25102023Window UIItem25102023Window
        {
            get
            {
                if ((this.mUIItem25102023Window == null))
                {
                    this.mUIItem25102023Window = new UIItem25102023Window(this);
                }
                return this.mUIItem25102023Window;
            }
        }
        
        public UIItem23102023Window UIItem23102023Window
        {
            get
            {
                if ((this.mUIItem23102023Window == null))
                {
                    this.mUIItem23102023Window = new UIItem23102023Window(this);
                }
                return this.mUIItem23102023Window;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItem22102023Window UIItem22102023Window
        {
            get
            {
                if ((this.mUIItem22102023Window == null))
                {
                    this.mUIItem22102023Window = new UIItem22102023Window(this);
                }
                return this.mUIItem22102023Window;
            }
        }
        
        public UIEEkstravaktWindow UIEEkstravaktWindow
        {
            get
            {
                if ((this.mUIEEkstravaktWindow == null))
                {
                    this.mUIEEkstravaktWindow = new UIEEkstravaktWindow(this);
                }
                return this.mUIEEkstravaktWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UIItem29102023Window mUIItem29102023Window;
        
        private UIItem25102023Window mUIItem25102023Window;
        
        private UIItem23102023Window mUIItem23102023Window;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UIItem22102023Window mUIItem22102023Window;
        
        private UIEEkstravaktWindow mUIEEkstravaktWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TMSComboBox";
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Endre kontering");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem29102023Window : WinWindow
    {
        
        public UIItem29102023Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "29.10.2023";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TicDateEdit";
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Endre kontering");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem25102023Window : WinWindow
    {
        
        public UIItem25102023Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "25.10.2023";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TicDateEdit";
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Endre kontering");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem23102023Window : WinWindow
    {
        
        public UIItem23102023Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "23.10.2023";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TicDateEdit";
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Endre kontering");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public UIEndrekonteringClient UIEndrekonteringClient
        {
            get
            {
                if ((this.mUIEndrekonteringClient == null))
                {
                    this.mUIEndrekonteringClient = new UIEndrekonteringClient(this);
                }
                return this.mUIEndrekonteringClient;
            }
        }
        #endregion
        
        #region Fields
        private UIEndrekonteringClient mUIEndrekonteringClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEndrekonteringClient : WinClient
    {
        
        public UIEndrekonteringClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public WinWindow UIEEkstravaktWindow
        {
            get
            {
                if ((this.mUIEEkstravaktWindow == null))
                {
                    this.mUIEEkstravaktWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIEEkstravaktWindow.SearchProperties[WinWindow.PropertyNames.Name] = "E - Ekstravakt";
                    this.mUIEEkstravaktWindow.SearchProperties[WinWindow.PropertyNames.ClassName] = "TMSEdit";
                    this.mUIEEkstravaktWindow.WindowTitles.Add("Endre kontering");
                    #endregion
                }
                return this.mUIEEkstravaktWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIEEkstravaktWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem22102023Window : WinWindow
    {
        
        public UIItem22102023Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "22.10.2023";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TicDateEdit";
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Endre kontering");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEEkstravaktWindow : WinWindow
    {
        
        public UIEEkstravaktWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "E - Ekstravakt";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TMSEdit";
            this.WindowTitles.Add("Endre kontering");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Endre kontering");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
}
