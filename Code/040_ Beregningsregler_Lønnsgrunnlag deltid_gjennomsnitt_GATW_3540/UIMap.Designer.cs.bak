// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _040__Beregningsregler_Lønnsgrunnlag_deltid_gjennomsnitt_GATW_3540
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// CheckValuesStep1 - Use 'CheckValuesStep1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep1()
        {
            #region Variable Declarations
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            DXCell uIItem800Cell1 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell1;
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            #endregion

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep1ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep1ExpectedValues.UIItem800Cell1Text, uIItem800Cell1.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep1ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep3 - Use 'CheckValuesStep3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep3()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep3ExpectedValues.UIItem800CellText, uIItem800Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep4 - Use 'CheckValuesStep4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep4()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell1 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell1;
            DXCell uIItem700Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem700Cell;
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '7,00' cell equals '2,50'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem700CellText, uIItem700Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '5,50'
            Assert.AreEqual(this.CheckValuesStep4ExpectedValues.UIItem800CellText, uIItem800Cell.Text);
        }
        
        /// <summary>
        /// DragGjennomsnittTurnusToExtraStep1
        /// </summary>
        public void DragGjennomsnittTurnusToExtraStep1()
        {
            #region Variable Declarations
            DXCell uITurnusGjennomsnittCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusGjennomsnittCell;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Gjennomsnitt' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(22, 20));
            Mouse.StartDragging(uITurnusGjennomsnittCell, new Point(23, 5));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(22, 20));
        }
        
        /// <summary>
        /// DragGjennomsnittTurnusToExtraStep2
        /// </summary>
        public void DragGjennomsnittTurnusToExtraStep2()
        {
            #region Variable Declarations
            DXCell uITurnusGjennomsnittCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusGjennomsnittCell;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Gjennomsnitt' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(22, 26));
            Mouse.StartDragging(uITurnusGjennomsnittCell, new Point(-64, 8));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(22, 26));
        }
        
        /// <summary>
        /// DragGjennomsnittTurnusToExtraStep3
        /// </summary>
        public void DragGjennomsnittTurnusToExtraStep3()
        {
            #region Variable Declarations
            DXCell uITurnusGjennomsnittCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusGjennomsnittCell1;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Gjennomsnitt' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(17, 22));
            Mouse.StartDragging(uITurnusGjennomsnittCell1, new Point(-39, -1));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(17, 22));
        }
        
        /// <summary>
        /// DragGjennomsnittTurnusToExtraStep4
        /// </summary>
        public void DragGjennomsnittTurnusToExtraStep4()
        {
            #region Variable Declarations
            DXCell uITurnusGjennomsnittCell2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusGjennomsnittCell2;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Gjennomsnitt' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(23, 18));
            Mouse.StartDragging(uITurnusGjennomsnittCell2, new Point(-16, 9));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(23, 18));
        }
        
        /// <summary>
        /// DragGjennomsnittTurnusToExtraStep5
        /// </summary>
        public void DragGjennomsnittTurnusToExtraStep5()
        {
            #region Variable Declarations
            DXCell uITurnusGjennomsnittCell2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UITurnusGjennomsnittCell2;
            DXRibbonButtonItem uIEkstraRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIEkstraRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Gjennomsnitt' cell to 'Ekstra' RibbonBaseButtonItem
            uIEkstraRibbonBaseButtonItem.EnsureClickable(new Point(17, 17));
            Mouse.StartDragging(uITurnusGjennomsnittCell2, new Point(-43, 6));
            Mouse.StopDragging(uIEkstraRibbonBaseButtonItem, new Point(17, 17));
        }
        
        /// <summary>
        /// CheckValuesStep5 - Use 'CheckValuesStep5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep5()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell2 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell2;
            DXCell uIItem250Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem250Cell;
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            DXCell uIItem400LørSøndagstilCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem400LørSøndagstilCell;
            DXCell uIItem1400Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem1400Cell;
            DXCell uIItem410KveldNattilleCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem410KveldNattilleCell;
            DXCell uIItem250Cell1 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem250Cell1;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem200TimelønnCell2Text, uIItem200TimelønnCell2.Text);

            // Verify that the 'Text' property of '2,50' cell equals '2,50'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem250CellText, uIItem250Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '5,50'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem400LørSøndagstilCellText, uIItem400LørSøndagstilCell.Text);

            // Verify that the 'Text' property of '14,00' cell equals '1,00'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem1400CellText, uIItem1400Cell.Text);

            // Verify that the 'Text' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem410KveldNattilleCellText, uIItem410KveldNattilleCell.Text);

            // Verify that the 'Text' property of '2,50' cell equals '2,50'
            Assert.AreEqual(this.CheckValuesStep5ExpectedValues.UIItem250Cell1Text, uIItem250Cell1.Text);
        }
        
        /// <summary>
        /// CheckRecalcValuesStep5 - Use 'CheckRecalcValuesStep5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep5()
        {
            #region Variable Declarations
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem11112023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem11112023Cell;
            DXCell uIOvertidEkstravaktCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIOvertidEkstravaktCell;
            #endregion

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep5ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep5ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '11.11.2023' cell equals '11.11.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep5ExpectedValues.UIItem11112023CellText, uIItem11112023Cell.Text);

            // Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
            Assert.AreEqual(this.CheckRecalcValuesStep5ExpectedValues.UIOvertidEkstravaktCellText, uIOvertidEkstravaktCell.Text);
        }
        
        /// <summary>
        /// DragGjennomsnittTurnusToRemanageStep7
        /// </summary>
        public void DragGjennomsnittTurnusToRemanageStep7()
        {
            #region Variable Declarations
            DXCell uITurnusGjennomsnittCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIAften00167770770FalsDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusGjennomsnittCell;
            DXRibbonButtonItem uIForskjøvetvaktRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIForskjøvetvaktRibbonBaseButtonItem;
            #endregion

            // Click 'Turnus, Gjennomsnitt' cell
            Mouse.Click(uITurnusGjennomsnittCell, new Point(16, 4));

            // Move 'Turnus, Gjennomsnitt' cell to 'Forskjøvet
            //vakt' RibbonBaseButtonItem
            uIForskjøvetvaktRibbonBaseButtonItem.EnsureClickable(new Point(24, 21));
            Mouse.StartDragging(uITurnusGjennomsnittCell, new Point(40, -5));
            Mouse.StopDragging(uIForskjøvetvaktRibbonBaseButtonItem, new Point(24, 21));
        }
        
        /// <summary>
        /// CheckValuesStep7 - Use 'CheckValuesStep7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep7()
        {
            #region Variable Declarations
            DXCell uIItem310Overtid100Cell = this.UIForskyvningWindow.UIPanClientPanelClient.UIGpcMainClient.UITcClientTabList.UITpMainClient.UIGpcSalaryPanelClient.UIGpcSalaryAndShiftsClient.UIGtcSalaryAndShiftsTabList.UITpSalaryCalcClient.UIGcLinesTable.UIItem310Overtid100Cell;
            DXCell uIItem800Cell = this.UIForskyvningWindow.UIPanClientPanelClient.UIGpcMainClient.UITcClientTabList.UITpMainClient.UIGpcSalaryPanelClient.UIGpcSalaryAndShiftsClient.UIGtcSalaryAndShiftsTabList.UITpSalaryCalcClient.UIGcLinesTable.UIItem800Cell;
            #endregion

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem310Overtid100CellText, uIItem310Overtid100Cell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckValuesStep7ExpectedValues.UIItem800CellText, uIItem800Cell.Text);
        }
        
        /// <summary>
        /// CheckRecalcValuesStep8 - Use 'CheckRecalcValuesStep8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep8()
        {
            #region Variable Declarations
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem11112023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem11112023Cell;
            DXCell uIOvertidEkstravaktCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIOvertidEkstravaktCell;
            #endregion

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '11.11.2023' cell equals '28.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIItem11112023CellText, uIItem11112023Cell.Text);

            // Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
            Assert.AreEqual(this.CheckRecalcValuesStep8ExpectedValues.UIOvertidEkstravaktCellText, uIOvertidEkstravaktCell.Text);
        }
        
        /// <summary>
        /// DeleteRemanageShiftStep9
        /// </summary>
        public void DeleteRemanageShiftStep9()
        {
            #region Variable Declarations
            DXCell uITurnusGjennomsnittCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIAften00167770770FalsDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusGjennomsnittCell1;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpMiscRibbonPageGroup.UISlettRibbonBaseButtonItem;
            DXButton uIOKButton = this.UISlettWindow.UIDbFooterCustom.UIOKButton;
            #endregion

            // Click 'Turnus, Gjennomsnitt' cell
            Mouse.Click(uITurnusGjennomsnittCell1, new Point(37, 5));

            // Move 'Turnus, Gjennomsnitt' cell to 'Slett' RibbonBaseButtonItem
            uISlettRibbonBaseButtonItem.EnsureClickable(new Point(21, 32));
            Mouse.StartDragging(uITurnusGjennomsnittCell1, new Point(109, -3));
            Mouse.StopDragging(uISlettRibbonBaseButtonItem, new Point(21, 32));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// CheckRecalcValuesStep9 - Use 'CheckRecalcValuesStep9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep9()
        {
            #region Variable Declarations
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem310Overtid100Cell2 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell2;
            DXCell uIItem100Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem100Cell;
            #endregion

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep9ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '8,00' cell equals '7,00'
            Assert.AreEqual(this.CheckRecalcValuesStep9ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep9ExpectedValues.UIItem310Overtid100Cell2Text, uIItem310Overtid100Cell2.Text);

            // Verify that the 'Text' property of '1,00' cell equals '1,00'
            Assert.AreEqual(this.CheckRecalcValuesStep9ExpectedValues.UIItem100CellText, uIItem100Cell.Text);
        }
        
        /// <summary>
        /// DragGjennomsnittTurnusToAbsenceStep10
        /// </summary>
        public void DragGjennomsnittTurnusToAbsenceStep10()
        {
            #region Variable Declarations
            DXCell uITurnusGjennomsnittCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusGjennomsnittCell;
            DXRibbonButtonItem uIFraværRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpDevianceRibbonPageGroup.UIFraværRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Gjennomsnitt' cell to 'Fravær' RibbonBaseButtonItem
            uIFraværRibbonBaseButtonItem.EnsureClickable(new Point(20, 23));
            Mouse.StartDragging(uITurnusGjennomsnittCell, new Point(48, 3));
            Mouse.StopDragging(uIFraværRibbonBaseButtonItem, new Point(20, 23));
        }
        
        /// <summary>
        /// CheckValuesStep10 - Use 'CheckValuesStep10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep10()
        {
            #region Variable Declarations
            DXCell uIItem02112023Cell = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem02112023Cell;
            DXCell uIItem8Cell = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem8Cell;
            DXCell uIItem03112023Cell = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem03112023Cell;
            DXCell uIItem8Cell1 = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem8Cell1;
            DXCell uIItem200TimelønnCell = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem200TimelønnCell;
            DXCell uIItem200TimelønnCell1 = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcSalaryClient.UITcDeductPaymentTabList.UITabDeductPaymentClient.UIGcPaymentLinesTable.UIItem200TimelønnCell1;
            #endregion

            // Verify that the 'Text' property of '02.11.2023' cell equals '02.11.2023'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem02112023CellText, uIItem02112023Cell.Text);

            // Verify that the 'Text' property of '-8' cell equals '-8'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem8CellText, uIItem8Cell.Text);

            // Verify that the 'Text' property of '03.11.2023' cell equals '03.11.2023'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem03112023CellText, uIItem03112023Cell.Text);

            // Verify that the 'Text' property of '-8' cell equals '-8'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem8Cell1Text, uIItem8Cell1.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep10ExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);
        }
        
        /// <summary>
        /// CheckRecalcValuesStep10 - Use 'CheckRecalcValuesStep10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep10()
        {
            #region Variable Declarations
            DXCell uIN23000700Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIN23000700Cell;
            DXCell uIItem11112023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem11112023Cell;
            DXCell uIOvertidEkstravaktCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIOvertidEkstravaktCell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uID07001500Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UID07001500Cell;
            DXCell uIItem11112023Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem11112023Cell1;
            DXCell uIOvertidCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIOvertidCell;
            DXCell uIItem200TimelønnCell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell1;
            DXCell uIItem800Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell1;
            #endregion

            // Verify that the 'Text' property of 'N (23:00 - 07:00)' cell equals 'N (23:00 - 07:00)'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIN23000700CellText, uIN23000700Cell.Text);

            // Verify that the 'Text' property of '11.11.2023' cell equals '05.11.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem11112023CellText, uIItem11112023Cell.Text);

            // Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIOvertidEkstravaktCellText, uIOvertidEkstravaktCell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of 'D (07:00 - 15:00)' cell equals 'D (07:00 - 15:00)'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UID07001500CellText, uID07001500Cell.Text);

            // Verify that the 'Text' property of '11.11.2023' cell equals '11.11.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem11112023Cell1Text, uIItem11112023Cell1.Text);

            // Verify that the 'Text' property of 'Overtid' cell equals 'Overtid'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIOvertidCellText, uIOvertidCell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep10ExpectedValues.UIItem800Cell1Text, uIItem800Cell1.Text);
        }
        
        /// <summary>
        /// DeleteAbsenceStep11
        /// </summary>
        public void DeleteAbsenceStep11()
        {
            #region Variable Declarations
            DXCell uITurnusGjennomsnittCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UIFraværDockPanel.UIControlContainerCustom.UIGcAbsenceColumnTable.UITurnusGjennomsnittCell;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpMiscRibbonPageGroup.UISlettRibbonBaseButtonItem;
            #endregion

            // Click 'Turnus, Gjennomsnitt' cell
            Mouse.Click(uITurnusGjennomsnittCell, new Point(67, 9));

            // Move 'Turnus, Gjennomsnitt' cell to 'Slett' RibbonBaseButtonItem
            uISlettRibbonBaseButtonItem.EnsureClickable(new Point(22, 25));
            Mouse.StartDragging(uITurnusGjennomsnittCell, new Point(116, -31));
            Mouse.StopDragging(uISlettRibbonBaseButtonItem, new Point(22, 25));
        }
        
        /// <summary>
        /// CheckRecalcValuesStep11 - Use 'CheckRecalcValuesStep11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep11()
        {
            #region Variable Declarations
            DXCell uIN23000700Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIN23000700Cell;
            DXCell uIItem11112023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem11112023Cell;
            DXCell uIOvertidEkstravaktCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIOvertidEkstravaktCell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uIItem310Overtid100Cell3 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell3;
            DXCell uIItem550Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem550Cell1;
            DXCell uID07001500Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UID07001500Cell;
            DXCell uIItem11112023Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem11112023Cell1;
            DXCell uIOvertidCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIOvertidCell;
            DXCell uIItem200TimelønnCell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell1;
            DXCell uIItem800Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell1;
            #endregion

            // Verify that the 'Text' property of 'N (23:00 - 07:00)' cell equals 'N (23:00 - 07:00)'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIN23000700CellText, uIN23000700Cell.Text);

            // Verify that the 'Text' property of '11.11.2023' cell equals '05.11.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem11112023CellText, uIItem11112023Cell.Text);

            // Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIOvertidEkstravaktCellText, uIOvertidEkstravaktCell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '8,00' cell equals '2,50'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem310Overtid100Cell3Text, uIItem310Overtid100Cell3.Text);

            // Verify that the 'Text' property of '5,50' cell equals '5,50'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem550Cell1Text, uIItem550Cell1.Text);

            // Verify that the 'Text' property of 'D (07:00 - 15:00)' cell equals 'D (07:00 - 15:00)'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UID07001500CellText, uID07001500Cell.Text);

            // Verify that the 'Text' property of '11.11.2023' cell equals '11.11.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem11112023Cell1Text, uIItem11112023Cell1.Text);

            // Verify that the 'Text' property of 'Overtid' cell equals 'Overtid/Ekstravakt'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIOvertidCellText, uIOvertidCell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep11ExpectedValues.UIItem800Cell1Text, uIItem800Cell1.Text);
        }
        
        /// <summary>
        /// SetCalculateRegOvertimeStep13 - Use 'SetCalculateRegOvertimeStep13Params' to pass parameters into this method.
        /// </summary>
        public void SetCalculateRegOvertimeStep13()
        {
            #region Variable Declarations
            WinClient uIGlobaltoppsettClient = this.UIGlobaltoppsettWindow.UIItemWindow.UIGlobaltoppsettClient;
            WinRadioButton uIKalkuleriregistrerinRadioButton = this.UIGlobaltoppsettWindow.UIRekkefølgepåkalkulerClient.UIKalkuleriregistrerinRadioButton;
            WinButton uILagreButton = this.UIGlobaltoppsettWindow.UIItemWindow1.UIGlobaltoppsettClient.UILagreButton;
            #endregion

            // Click 'Globalt oppsett' client
            Mouse.Click(uIGlobaltoppsettClient, new Point(46, 350));

            // Select 'Kalkuler i registreringsrekkefølge.' radio button
            uIKalkuleriregistrerinRadioButton.Selected = this.SetCalculateRegOvertimeStep13Params.UIKalkuleriregistrerinRadioButtonSelected;

            // Click '&Lagre' button
            Mouse.Click(uILagreButton, new Point(41, 13));
        }
        
        /// <summary>
        /// DeleteExtraTueWeek1Step13
        /// </summary>
        public void DeleteExtraTueWeek1Step13()
        {
            #region Variable Declarations
            DXCell uITurnusGjennomsnittCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusGjennomsnittCell1;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpMiscRibbonPageGroup.UISlettRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Gjennomsnitt' cell to 'Slett' RibbonBaseButtonItem
            uISlettRibbonBaseButtonItem.EnsureClickable(new Point(19, 28));
            Mouse.StartDragging(uITurnusGjennomsnittCell1, new Point(30, -2));
            Mouse.StopDragging(uISlettRibbonBaseButtonItem, new Point(19, 28));
        }
        
        /// <summary>
        /// DeleteExtraSatWeek1Step14
        /// </summary>
        public void DeleteExtraSatWeek1Step14()
        {
            #region Variable Declarations
            DXCell uITurnusGjennomsnittCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UITurnusGjennomsnittCell1;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpMiscRibbonPageGroup.UISlettRibbonBaseButtonItem;
            #endregion

            // Move 'Turnus, Gjennomsnitt' cell to 'Slett' RibbonBaseButtonItem
            uISlettRibbonBaseButtonItem.EnsureClickable(new Point(17, 22));
            Mouse.StartDragging(uITurnusGjennomsnittCell1, new Point(77, 5));
            Mouse.StopDragging(uISlettRibbonBaseButtonItem, new Point(17, 22));
        }
        
        /// <summary>
        /// CheckRecalcValuesStep13 - Use 'CheckRecalcValuesStep13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep13()
        {
            #region Variable Declarations
            DXCell uIN23000700Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIN23000700Cell;
            DXCell uIItem11112023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem11112023Cell;
            DXCell uIOvertidEkstravaktCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIOvertidEkstravaktCell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            DXCell uID07001500Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UID07001500Cell;
            DXCell uIItem11112023Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem11112023Cell1;
            DXCell uIOvertidEkstravaktCell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIOvertidEkstravaktCell1;
            DXCell uIItem200TimelønnCell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem200TimelønnCell1;
            DXCell uIItem800Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell1;
            #endregion

            // Verify that the 'Text' property of 'N (23:00 - 07:00)' cell equals 'D (07:00 - 15:00)'
            Assert.AreEqual(this.CheckRecalcValuesStep13ExpectedValues.UIN23000700CellText, uIN23000700Cell.Text);

            // Verify that the 'Text' property of '11.11.2023' cell equals '28.10.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep13ExpectedValues.UIItem11112023CellText, uIItem11112023Cell.Text);

            // Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
            Assert.AreEqual(this.CheckRecalcValuesStep13ExpectedValues.UIOvertidEkstravaktCellText, uIOvertidEkstravaktCell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep13ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep13ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of 'D (07:00 - 15:00)' cell equals 'D (07:00 - 15:00)'
            Assert.AreEqual(this.CheckRecalcValuesStep13ExpectedValues.UID07001500CellText, uID07001500Cell.Text);

            // Verify that the 'Text' property of '11.11.2023' cell equals '11.11.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep13ExpectedValues.UIItem11112023Cell1Text, uIItem11112023Cell1.Text);

            // Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
            Assert.AreEqual(this.CheckRecalcValuesStep13ExpectedValues.UIOvertidEkstravaktCell1Text, uIOvertidEkstravaktCell1.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep13ExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep13ExpectedValues.UIItem800Cell1Text, uIItem800Cell1.Text);
        }
        
        /// <summary>
        /// CheckRecalcValuesStep14 - Use 'CheckRecalcValuesStep14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRecalcValuesStep14()
        {
            #region Variable Declarations
            DXCell uIN23000700Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIN23000700Cell;
            DXCell uIItem11112023Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem11112023Cell;
            DXCell uIOvertidEkstravaktCell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIOvertidEkstravaktCell;
            DXCell uIItem310Overtid100Cell1 = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem310Overtid100Cell1;
            DXCell uIItem800Cell = this.UIRekalkuleringWindow.UIPcContentClient.UIGcRecalculationTable.UIItem800Cell;
            #endregion

            // Verify that the 'Text' property of 'N (23:00 - 07:00)' cell equals 'N (23:00 - 07:00)'
            Assert.AreEqual(this.CheckRecalcValuesStep14ExpectedValues.UIN23000700CellText, uIN23000700Cell.Text);

            // Verify that the 'Text' property of '11.11.2023' cell equals '05.11.2023'
            Assert.AreEqual(this.CheckRecalcValuesStep14ExpectedValues.UIItem11112023CellText, uIItem11112023Cell.Text);

            // Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
            Assert.AreEqual(this.CheckRecalcValuesStep14ExpectedValues.UIOvertidEkstravaktCellText, uIOvertidEkstravaktCell.Text);

            // Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckRecalcValuesStep14ExpectedValues.UIItem310Overtid100Cell1Text, uIItem310Overtid100Cell1.Text);

            // Verify that the 'Text' property of '8,00' cell equals '8,00'
            Assert.AreEqual(this.CheckRecalcValuesStep14ExpectedValues.UIItem800CellText, uIItem800Cell.Text);
        }
        
        /// <summary>
        /// SetCalculateKronOvertimeStep16 - Use 'SetCalculateKronOvertimeStep16Params' to pass parameters into this method.
        /// </summary>
        public void SetCalculateKronOvertimeStep16()
        {
            #region Variable Declarations
            WinClient uIGlobaltoppsettClient = this.UIGlobaltoppsettWindow.UIItemWindow.UIGlobaltoppsettClient;
            WinRadioButton uIKalkulerikronologiskRadioButton = this.UIGlobaltoppsettWindow.UIRekkefølgepåkalkulerClient.UIKalkulerikronologiskRadioButton;
            WinButton uILagreButton = this.UIGlobaltoppsettWindow.UIItemWindow1.UIGlobaltoppsettClient.UILagreButton;
            #endregion

            // Click 'Globalt oppsett' client
            Mouse.Click(uIGlobaltoppsettClient, new Point(40, 349));

            // Select 'Kalkuler i kronologisk rekkefølge.' radio button
            uIKalkulerikronologiskRadioButton.Selected = this.SetCalculateKronOvertimeStep16Params.UIKalkulerikronologiskRadioButtonSelected;

            // Click '&Lagre' button
            Mouse.Click(uILagreButton, new Point(40, 8));
        }
        
        /// <summary>
        /// CheckValuesStep15 - Use 'CheckValuesStep15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep15()
        {
            #region Variable Declarations
            DXCell uIItem400LørSøndagstilCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem400LørSøndagstilCell;
            DXCell uIItem1400Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem1400Cell;
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            #endregion

            // Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep15ExpectedValues.UIItem400LørSøndagstilCellText, uIItem400LørSøndagstilCell.Text);

            // Verify that the 'Text' property of '14,00' cell equals '2,50'
            Assert.AreEqual(this.CheckValuesStep15ExpectedValues.UIItem1400CellText, uIItem1400Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep15ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '5,50'
            Assert.AreEqual(this.CheckValuesStep15ExpectedValues.UIItem800CellText, uIItem800Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep2 - Use 'CheckValuesStep2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep2()
        {
            #region Variable Declarations
            DXCell uIItem200TimelønnCell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell;
            DXCell uIItem800Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem800Cell;
            DXCell uIItem200TimelønnCell1 = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem200TimelønnCell1;
            DXCell uIItem700Cell = this.UIMerarbeidovertidWindow.UIPanClientClient.UITcClientTabList.UITpMainClient.UITcExtraDetailTabList.UITpSalaryCalcClient.UIGcAccountingLinesTable.UIItem700Cell;
            #endregion

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem200TimelønnCellText, uIItem200TimelønnCell.Text);

            // Verify that the 'Text' property of '8,00' cell equals '1,00'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem800CellText, uIItem800Cell.Text);

            // Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem200TimelønnCell1Text, uIItem200TimelønnCell1.Text);

            // Verify that the 'Text' property of '7,00' cell equals '7,00'
            Assert.AreEqual(this.CheckValuesStep2ExpectedValues.UIItem700CellText, uIItem700Cell.Text);
        }
        
        #region Properties
        public virtual CheckValuesStep1ExpectedValues CheckValuesStep1ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep1ExpectedValues == null))
                {
                    this.mCheckValuesStep1ExpectedValues = new CheckValuesStep1ExpectedValues();
                }
                return this.mCheckValuesStep1ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep3ExpectedValues CheckValuesStep3ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep3ExpectedValues == null))
                {
                    this.mCheckValuesStep3ExpectedValues = new CheckValuesStep3ExpectedValues();
                }
                return this.mCheckValuesStep3ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep4ExpectedValues CheckValuesStep4ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep4ExpectedValues == null))
                {
                    this.mCheckValuesStep4ExpectedValues = new CheckValuesStep4ExpectedValues();
                }
                return this.mCheckValuesStep4ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep5ExpectedValues CheckValuesStep5ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep5ExpectedValues == null))
                {
                    this.mCheckValuesStep5ExpectedValues = new CheckValuesStep5ExpectedValues();
                }
                return this.mCheckValuesStep5ExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep5ExpectedValues CheckRecalcValuesStep5ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep5ExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep5ExpectedValues = new CheckRecalcValuesStep5ExpectedValues();
                }
                return this.mCheckRecalcValuesStep5ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep7ExpectedValues CheckValuesStep7ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep7ExpectedValues == null))
                {
                    this.mCheckValuesStep7ExpectedValues = new CheckValuesStep7ExpectedValues();
                }
                return this.mCheckValuesStep7ExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep8ExpectedValues CheckRecalcValuesStep8ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep8ExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep8ExpectedValues = new CheckRecalcValuesStep8ExpectedValues();
                }
                return this.mCheckRecalcValuesStep8ExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep9ExpectedValues CheckRecalcValuesStep9ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep9ExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep9ExpectedValues = new CheckRecalcValuesStep9ExpectedValues();
                }
                return this.mCheckRecalcValuesStep9ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep10ExpectedValues CheckValuesStep10ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep10ExpectedValues == null))
                {
                    this.mCheckValuesStep10ExpectedValues = new CheckValuesStep10ExpectedValues();
                }
                return this.mCheckValuesStep10ExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep10ExpectedValues CheckRecalcValuesStep10ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep10ExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep10ExpectedValues = new CheckRecalcValuesStep10ExpectedValues();
                }
                return this.mCheckRecalcValuesStep10ExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep11ExpectedValues CheckRecalcValuesStep11ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep11ExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep11ExpectedValues = new CheckRecalcValuesStep11ExpectedValues();
                }
                return this.mCheckRecalcValuesStep11ExpectedValues;
            }
        }
        
        public virtual SetCalculateRegOvertimeStep13Params SetCalculateRegOvertimeStep13Params
        {
            get
            {
                if ((this.mSetCalculateRegOvertimeStep13Params == null))
                {
                    this.mSetCalculateRegOvertimeStep13Params = new SetCalculateRegOvertimeStep13Params();
                }
                return this.mSetCalculateRegOvertimeStep13Params;
            }
        }
        
        public virtual CheckRecalcValuesStep13ExpectedValues CheckRecalcValuesStep13ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep13ExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep13ExpectedValues = new CheckRecalcValuesStep13ExpectedValues();
                }
                return this.mCheckRecalcValuesStep13ExpectedValues;
            }
        }
        
        public virtual CheckRecalcValuesStep14ExpectedValues CheckRecalcValuesStep14ExpectedValues
        {
            get
            {
                if ((this.mCheckRecalcValuesStep14ExpectedValues == null))
                {
                    this.mCheckRecalcValuesStep14ExpectedValues = new CheckRecalcValuesStep14ExpectedValues();
                }
                return this.mCheckRecalcValuesStep14ExpectedValues;
            }
        }
        
        public virtual SetCalculateKronOvertimeStep16Params SetCalculateKronOvertimeStep16Params
        {
            get
            {
                if ((this.mSetCalculateKronOvertimeStep16Params == null))
                {
                    this.mSetCalculateKronOvertimeStep16Params = new SetCalculateKronOvertimeStep16Params();
                }
                return this.mSetCalculateKronOvertimeStep16Params;
            }
        }
        
        public virtual CheckValuesStep15ExpectedValues CheckValuesStep15ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep15ExpectedValues == null))
                {
                    this.mCheckValuesStep15ExpectedValues = new CheckValuesStep15ExpectedValues();
                }
                return this.mCheckValuesStep15ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep2ExpectedValues CheckValuesStep2ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep2ExpectedValues == null))
                {
                    this.mCheckValuesStep2ExpectedValues = new CheckValuesStep2ExpectedValues();
                }
                return this.mCheckValuesStep2ExpectedValues;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        
        public UIMerarbeidovertidWindow UIMerarbeidovertidWindow
        {
            get
            {
                if ((this.mUIMerarbeidovertidWindow == null))
                {
                    this.mUIMerarbeidovertidWindow = new UIMerarbeidovertidWindow();
                }
                return this.mUIMerarbeidovertidWindow;
            }
        }
        
        public UIRekalkuleringWindow UIRekalkuleringWindow
        {
            get
            {
                if ((this.mUIRekalkuleringWindow == null))
                {
                    this.mUIRekalkuleringWindow = new UIRekalkuleringWindow();
                }
                return this.mUIRekalkuleringWindow;
            }
        }
        
        public UIForskyvningWindow UIForskyvningWindow
        {
            get
            {
                if ((this.mUIForskyvningWindow == null))
                {
                    this.mUIForskyvningWindow = new UIForskyvningWindow();
                }
                return this.mUIForskyvningWindow;
            }
        }
        
        public UISlettWindow UISlettWindow
        {
            get
            {
                if ((this.mUISlettWindow == null))
                {
                    this.mUISlettWindow = new UISlettWindow();
                }
                return this.mUISlettWindow;
            }
        }
        
        public UIFraværsregistreringWindow UIFraværsregistreringWindow
        {
            get
            {
                if ((this.mUIFraværsregistreringWindow == null))
                {
                    this.mUIFraværsregistreringWindow = new UIFraværsregistreringWindow();
                }
                return this.mUIFraværsregistreringWindow;
            }
        }
        
        public UIGlobaltoppsettWindow UIGlobaltoppsettWindow
        {
            get
            {
                if ((this.mUIGlobaltoppsettWindow == null))
                {
                    this.mUIGlobaltoppsettWindow = new UIGlobaltoppsettWindow();
                }
                return this.mUIGlobaltoppsettWindow;
            }
        }
        #endregion
        
        #region Fields
        private CheckValuesStep1ExpectedValues mCheckValuesStep1ExpectedValues;
        
        private CheckValuesStep3ExpectedValues mCheckValuesStep3ExpectedValues;
        
        private CheckValuesStep4ExpectedValues mCheckValuesStep4ExpectedValues;
        
        private CheckValuesStep5ExpectedValues mCheckValuesStep5ExpectedValues;
        
        private CheckRecalcValuesStep5ExpectedValues mCheckRecalcValuesStep5ExpectedValues;
        
        private CheckValuesStep7ExpectedValues mCheckValuesStep7ExpectedValues;
        
        private CheckRecalcValuesStep8ExpectedValues mCheckRecalcValuesStep8ExpectedValues;
        
        private CheckRecalcValuesStep9ExpectedValues mCheckRecalcValuesStep9ExpectedValues;
        
        private CheckValuesStep10ExpectedValues mCheckValuesStep10ExpectedValues;
        
        private CheckRecalcValuesStep10ExpectedValues mCheckRecalcValuesStep10ExpectedValues;
        
        private CheckRecalcValuesStep11ExpectedValues mCheckRecalcValuesStep11ExpectedValues;
        
        private SetCalculateRegOvertimeStep13Params mSetCalculateRegOvertimeStep13Params;
        
        private CheckRecalcValuesStep13ExpectedValues mCheckRecalcValuesStep13ExpectedValues;
        
        private CheckRecalcValuesStep14ExpectedValues mCheckRecalcValuesStep14ExpectedValues;
        
        private SetCalculateKronOvertimeStep16Params mSetCalculateKronOvertimeStep16Params;
        
        private CheckValuesStep15ExpectedValues mCheckValuesStep15ExpectedValues;
        
        private CheckValuesStep2ExpectedValues mCheckValuesStep2ExpectedValues;
        
        private UIGatWindow mUIGatWindow;
        
        private UIMerarbeidovertidWindow mUIMerarbeidovertidWindow;
        
        private UIRekalkuleringWindow mUIRekalkuleringWindow;
        
        private UIForskyvningWindow mUIForskyvningWindow;
        
        private UISlettWindow mUISlettWindow;
        
        private UIFraværsregistreringWindow mUIFraværsregistreringWindow;
        
        private UIGlobaltoppsettWindow mUIGlobaltoppsettWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800Cell1Text = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,00' cell equals '2,50'
        /// </summary>
        public string UIItem700CellText = "2,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '5,50'
        /// </summary>
        public string UIItem800CellText = "5,50";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell2Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,50' cell equals '2,50'
        /// </summary>
        public string UIItem250CellText = "2,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '5,50'
        /// </summary>
        public string UIItem800CellText = "5,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '400 - Lør./Søndagstillegg'
        /// </summary>
        public string UIItem400LørSøndagstilCellText = "400 - Lør./Søndagstillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '14,00' cell equals '1,00'
        /// </summary>
        public string UIItem1400CellText = "1,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '410 - Kveld/Nattillegg' cell equals '410 - Kveld/Nattillegg'
        /// </summary>
        public string UIItem410KveldNattilleCellText = "410 - Kveld/Nattillegg";
        
        /// <summary>
        /// Verify that the 'Text' property of '2,50' cell equals '2,50'
        /// </summary>
        public string UIItem250Cell1Text = "2,50";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '11.11.2023' cell equals '11.11.2023'
        /// </summary>
        public string UIItem11112023CellText = "11.11.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
        /// </summary>
        public string UIOvertidEkstravaktCellText = "Overtid/Ekstravakt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100CellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '11.11.2023' cell equals '28.10.2023'
        /// </summary>
        public string UIItem11112023CellText = "28.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
        /// </summary>
        public string UIOvertidEkstravaktCellText = "Overtid/Ekstravakt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '7,00'
        /// </summary>
        public string UIItem800CellText = "7,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell2Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '1,00' cell equals '1,00'
        /// </summary>
        public string UIItem100CellText = "1,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '02.11.2023' cell equals '02.11.2023'
        /// </summary>
        public string UIItem02112023CellText = "02.11.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '-8' cell equals '-8'
        /// </summary>
        public string UIItem8CellText = "-8";
        
        /// <summary>
        /// Verify that the 'Text' property of '03.11.2023' cell equals '03.11.2023'
        /// </summary>
        public string UIItem03112023CellText = "03.11.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of '-8' cell equals '-8'
        /// </summary>
        public string UIItem8Cell1Text = "-8";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "200 - Timelønn";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'N (23:00 - 07:00)' cell equals 'N (23:00 - 07:00)'
        /// </summary>
        public string UIN23000700CellText = "N (23:00 - 07:00)";
        
        /// <summary>
        /// Verify that the 'Text' property of '11.11.2023' cell equals '05.11.2023'
        /// </summary>
        public string UIItem11112023CellText = "05.11.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
        /// </summary>
        public string UIOvertidEkstravaktCellText = "Overtid/Ekstravakt";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D (07:00 - 15:00)' cell equals 'D (07:00 - 15:00)'
        /// </summary>
        public string UID07001500CellText = "D (07:00 - 15:00)";
        
        /// <summary>
        /// Verify that the 'Text' property of '11.11.2023' cell equals '11.11.2023'
        /// </summary>
        public string UIItem11112023Cell1Text = "11.11.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid' cell equals 'Overtid'
        /// </summary>
        public string UIOvertidCellText = "Overtid";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800Cell1Text = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'N (23:00 - 07:00)' cell equals 'N (23:00 - 07:00)'
        /// </summary>
        public string UIN23000700CellText = "N (23:00 - 07:00)";
        
        /// <summary>
        /// Verify that the 'Text' property of '11.11.2023' cell equals '05.11.2023'
        /// </summary>
        public string UIItem11112023CellText = "05.11.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
        /// </summary>
        public string UIOvertidEkstravaktCellText = "Overtid/Ekstravakt";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '2,50'
        /// </summary>
        public string UIItem800CellText = "2,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem310Overtid100Cell3Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '5,50' cell equals '5,50'
        /// </summary>
        public string UIItem550Cell1Text = "5,50";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D (07:00 - 15:00)' cell equals 'D (07:00 - 15:00)'
        /// </summary>
        public string UID07001500CellText = "D (07:00 - 15:00)";
        
        /// <summary>
        /// Verify that the 'Text' property of '11.11.2023' cell equals '11.11.2023'
        /// </summary>
        public string UIItem11112023Cell1Text = "11.11.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid' cell equals 'Overtid/Ekstravakt'
        /// </summary>
        public string UIOvertidCellText = "Overtid/Ekstravakt";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800Cell1Text = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetCalculateRegOvertimeStep13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetCalculateRegOvertimeStep13Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Kalkuler i registreringsrekkefølge.' radio button
        /// </summary>
        public bool UIKalkuleriregistrerinRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'N (23:00 - 07:00)' cell equals 'D (07:00 - 15:00)'
        /// </summary>
        public string UIN23000700CellText = "D (07:00 - 15:00)";
        
        /// <summary>
        /// Verify that the 'Text' property of '11.11.2023' cell equals '28.10.2023'
        /// </summary>
        public string UIItem11112023CellText = "28.10.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
        /// </summary>
        public string UIOvertidEkstravaktCellText = "Overtid/Ekstravakt";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D (07:00 - 15:00)' cell equals 'D (07:00 - 15:00)'
        /// </summary>
        public string UID07001500CellText = "D (07:00 - 15:00)";
        
        /// <summary>
        /// Verify that the 'Text' property of '11.11.2023' cell equals '11.11.2023'
        /// </summary>
        public string UIItem11112023Cell1Text = "11.11.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
        /// </summary>
        public string UIOvertidEkstravaktCell1Text = "Overtid/Ekstravakt";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800Cell1Text = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRecalcValuesStep14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRecalcValuesStep14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'N (23:00 - 07:00)' cell equals 'N (23:00 - 07:00)'
        /// </summary>
        public string UIN23000700CellText = "N (23:00 - 07:00)";
        
        /// <summary>
        /// Verify that the 'Text' property of '11.11.2023' cell equals '05.11.2023'
        /// </summary>
        public string UIItem11112023CellText = "05.11.2023";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Overtid/Ekstravakt' cell equals 'Overtid/Ekstravakt'
        /// </summary>
        public string UIOvertidEkstravaktCellText = "Overtid/Ekstravakt";
        
        /// <summary>
        /// Verify that the 'Text' property of '310 - Overtid 100%' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem310Overtid100Cell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '8,00'
        /// </summary>
        public string UIItem800CellText = "8,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetCalculateKronOvertimeStep16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetCalculateKronOvertimeStep16Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Kalkuler i kronologisk rekkefølge.' radio button
        /// </summary>
        public bool UIKalkulerikronologiskRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '400 - Lør./Søndagstillegg' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem400LørSøndagstilCellText = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '14,00' cell equals '2,50'
        /// </summary>
        public string UIItem1400CellText = "2,50";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '5,50'
        /// </summary>
        public string UIItem800CellText = "5,50";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '310 - Overtid 100%'
        /// </summary>
        public string UIItem200TimelønnCellText = "310 - Overtid 100%";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,00' cell equals '1,00'
        /// </summary>
        public string UIItem800CellText = "1,00";
        
        /// <summary>
        /// Verify that the 'Text' property of '200 - Timelønn' cell equals '200 - Timelønn'
        /// </summary>
        public string UIItem200TimelønnCell1Text = "200 - Timelønn";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,00' cell equals '7,00'
        /// </summary>
        public string UIItem700CellText = "7,00";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UICenterPanelDayDockPanel UICenterPanelDayDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayDockPanel == null))
                {
                    this.mUICenterPanelDayDockPanel = new UICenterPanelDayDockPanel(this);
                }
                return this.mUICenterPanelDayDockPanel;
            }
        }
        
        public UIRibbonControlRibbon UIRibbonControlRibbon
        {
            get
            {
                if ((this.mUIRibbonControlRibbon == null))
                {
                    this.mUIRibbonControlRibbon = new UIRibbonControlRibbon(this);
                }
                return this.mUIRibbonControlRibbon;
            }
        }
        
        public UIBottomPanelDockPanel UIBottomPanelDockPanel
        {
            get
            {
                if ((this.mUIBottomPanelDockPanel == null))
                {
                    this.mUIBottomPanelDockPanel = new UIBottomPanelDockPanel(this);
                }
                return this.mUIBottomPanelDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UICenterPanelDayDockPanel mUICenterPanelDayDockPanel;
        
        private UIRibbonControlRibbon mUIRibbonControlRibbon;
        
        private UIBottomPanelDockPanel mUIBottomPanelDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDay";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom : DXTestControl
    {
        
        public UIControlContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UICenterPanelDayWrappeDockPanel UICenterPanelDayWrappeDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayWrappeDockPanel == null))
                {
                    this.mUICenterPanelDayWrappeDockPanel = new UICenterPanelDayWrappeDockPanel(this);
                }
                return this.mUICenterPanelDayWrappeDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UICenterPanelDayWrappeDockPanel mUICenterPanelDayWrappeDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayWrappeDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayWrappeDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayWrapper";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIFriVikar00167770770FDockPanel UIFriVikar00167770770FDockPanel
        {
            get
            {
                if ((this.mUIFriVikar00167770770FDockPanel == null))
                {
                    this.mUIFriVikar00167770770FDockPanel = new UIFriVikar00167770770FDockPanel(this);
                }
                return this.mUIFriVikar00167770770FDockPanel;
            }
        }
        
        public UIAften00167770770FalsDockPanel UIAften00167770770FalsDockPanel
        {
            get
            {
                if ((this.mUIAften00167770770FalsDockPanel == null))
                {
                    this.mUIAften00167770770FalsDockPanel = new UIAften00167770770FalsDockPanel(this);
                }
                return this.mUIAften00167770770FalsDockPanel;
            }
        }
        
        public UIDag00167770770FalseDockPanel UIDag00167770770FalseDockPanel
        {
            get
            {
                if ((this.mUIDag00167770770FalseDockPanel == null))
                {
                    this.mUIDag00167770770FalseDockPanel = new UIDag00167770770FalseDockPanel(this);
                }
                return this.mUIDag00167770770FalseDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIFriVikar00167770770FDockPanel mUIFriVikar00167770770FDockPanel;
        
        private UIAften00167770770FalsDockPanel mUIAften00167770770FalsDockPanel;
        
        private UIDag00167770770FalseDockPanel mUIDag00167770770FalseDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFriVikar00167770770FDockPanel : DXDockPanel
    {
        
        public UIFriVikar00167770770FDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Fri / Vikar;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom1 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom1(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom1 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom1 : DXTestControl
    {
        
        public UIControlContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Fri / Vikar;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcFreeColumnTable UIGcFreeColumnTable
        {
            get
            {
                if ((this.mUIGcFreeColumnTable == null))
                {
                    this.mUIGcFreeColumnTable = new UIGcFreeColumnTable(this);
                }
                return this.mUIGcFreeColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcFreeColumnTable mUIGcFreeColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcFreeColumnTable : DXGrid
    {
        
        public UIGcFreeColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusGjennomsnittCell
        {
            get
            {
                if ((this.mUITurnusGjennomsnittCell == null))
                {
                    this.mUITurnusGjennomsnittCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusGjennomsnittCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumnGridControlCell[View]gvFreeColumn[Row]1[Column]colEmployeeName";
                    this.mUITurnusGjennomsnittCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusGjennomsnittCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusGjennomsnittCell;
            }
        }
        
        public DXCell UITurnusGjennomsnittCell1
        {
            get
            {
                if ((this.mUITurnusGjennomsnittCell1 == null))
                {
                    this.mUITurnusGjennomsnittCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusGjennomsnittCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumnGridControlCell[View]gvFreeColumn[Row]0[Column]colEmployeeName";
                    this.mUITurnusGjennomsnittCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusGjennomsnittCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusGjennomsnittCell1;
            }
        }
        
        public DXCell UITurnusGjennomsnittCell2
        {
            get
            {
                if ((this.mUITurnusGjennomsnittCell2 == null))
                {
                    this.mUITurnusGjennomsnittCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusGjennomsnittCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumnGridControlCell[View]gvFreeColumn[Row]2[Column]colEmployeeName";
                    this.mUITurnusGjennomsnittCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusGjennomsnittCell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusGjennomsnittCell2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusGjennomsnittCell;
        
        private DXCell mUITurnusGjennomsnittCell1;
        
        private DXCell mUITurnusGjennomsnittCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAften00167770770FalsDockPanel : DXDockPanel
    {
        
        public UIAften00167770770FalsDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Aften;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom2 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom2(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom2 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom2 : DXTestControl
    {
        
        public UIControlContainerCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Aften;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcDayColumnTable UIGcDayColumnTable
        {
            get
            {
                if ((this.mUIGcDayColumnTable == null))
                {
                    this.mUIGcDayColumnTable = new UIGcDayColumnTable(this);
                }
                return this.mUIGcDayColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDayColumnTable mUIGcDayColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDayColumnTable : DXGrid
    {
        
        public UIGcDayColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusGjennomsnittCell
        {
            get
            {
                if ((this.mUITurnusGjennomsnittCell == null))
                {
                    this.mUITurnusGjennomsnittCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusGjennomsnittCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]0[Column]colEmployeeName";
                    this.mUITurnusGjennomsnittCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusGjennomsnittCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusGjennomsnittCell;
            }
        }
        
        public DXCell UITurnusGjennomsnittCell1
        {
            get
            {
                if ((this.mUITurnusGjennomsnittCell1 == null))
                {
                    this.mUITurnusGjennomsnittCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusGjennomsnittCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]1[Column]colEmployeeName";
                    this.mUITurnusGjennomsnittCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusGjennomsnittCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusGjennomsnittCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusGjennomsnittCell;
        
        private DXCell mUITurnusGjennomsnittCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDag00167770770FalseDockPanel : DXDockPanel
    {
        
        public UIDag00167770770FalseDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom3 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom3(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom3 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom3 : DXTestControl
    {
        
        public UIControlContainerCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcDayColumnTable1 UIGcDayColumnTable
        {
            get
            {
                if ((this.mUIGcDayColumnTable == null))
                {
                    this.mUIGcDayColumnTable = new UIGcDayColumnTable1(this);
                }
                return this.mUIGcDayColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDayColumnTable1 mUIGcDayColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDayColumnTable1 : DXGrid
    {
        
        public UIGcDayColumnTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusGjennomsnittCell
        {
            get
            {
                if ((this.mUITurnusGjennomsnittCell == null))
                {
                    this.mUITurnusGjennomsnittCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusGjennomsnittCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]1[Column]colEmployeeName";
                    this.mUITurnusGjennomsnittCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusGjennomsnittCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusGjennomsnittCell;
            }
        }
        
        public DXCell UITurnusGjennomsnittCell1
        {
            get
            {
                if ((this.mUITurnusGjennomsnittCell1 == null))
                {
                    this.mUITurnusGjennomsnittCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusGjennomsnittCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]0[Column]colEmployeeName";
                    this.mUITurnusGjennomsnittCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusGjennomsnittCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusGjennomsnittCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusGjennomsnittCell;
        
        private DXCell mUITurnusGjennomsnittCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonControlRibbon : DXRibbon
    {
        
        public UIRibbonControlRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRpMainMenuRibbonPage UIRpMainMenuRibbonPage
        {
            get
            {
                if ((this.mUIRpMainMenuRibbonPage == null))
                {
                    this.mUIRpMainMenuRibbonPage = new UIRpMainMenuRibbonPage(this);
                }
                return this.mUIRpMainMenuRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpMainMenuRibbonPage mUIRpMainMenuRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpMainMenuRibbonPage : DXRibbonPage
    {
        
        public UIRpMainMenuRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpMainMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGrpDevianceRibbonPageGroup UIGrpDevianceRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpDevianceRibbonPageGroup == null))
                {
                    this.mUIGrpDevianceRibbonPageGroup = new UIGrpDevianceRibbonPageGroup(this);
                }
                return this.mUIGrpDevianceRibbonPageGroup;
            }
        }
        
        public UIGrpMiscRibbonPageGroup UIGrpMiscRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpMiscRibbonPageGroup == null))
                {
                    this.mUIGrpMiscRibbonPageGroup = new UIGrpMiscRibbonPageGroup(this);
                }
                return this.mUIGrpMiscRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpDevianceRibbonPageGroup mUIGrpDevianceRibbonPageGroup;
        
        private UIGrpMiscRibbonPageGroup mUIGrpMiscRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpDevianceRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpDevianceRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpDeviance";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIEkstraRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIEkstraRibbonBaseButtonItem == null))
                {
                    this.mUIEkstraRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIEkstraRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnExtra";
                    this.mUIEkstraRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIEkstraRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIEkstraRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIForskjøvetvaktRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIForskjøvetvaktRibbonBaseButtonItem == null))
                {
                    this.mUIForskjøvetvaktRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIForskjøvetvaktRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnRemanage";
                    this.mUIForskjøvetvaktRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIForskjøvetvaktRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIForskjøvetvaktRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIFraværRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIFraværRibbonBaseButtonItem == null))
                {
                    this.mUIFraværRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIFraværRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnAbsence";
                    this.mUIFraværRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIFraværRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIFraværRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIEkstraRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIForskjøvetvaktRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIFraværRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpMiscRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpMiscRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpMisc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UISlettRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUISlettRibbonBaseButtonItem == null))
                {
                    this.mUISlettRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnDelete";
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUISlettRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISlettRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUISlettRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBottomPanelDockPanel : DXDockPanel
    {
        
        public UIBottomPanelDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BottomPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIFraværDockPanel UIFraværDockPanel
        {
            get
            {
                if ((this.mUIFraværDockPanel == null))
                {
                    this.mUIFraværDockPanel = new UIFraværDockPanel(this);
                }
                return this.mUIFraværDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIFraværDockPanel mUIFraværDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFraværDockPanel : DXDockPanel
    {
        
        public UIFraværDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Fravær";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom4 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom4(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom4 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom4 : DXTestControl
    {
        
        public UIControlContainerCustom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FraværControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcAbsenceColumnTable UIGcAbsenceColumnTable
        {
            get
            {
                if ((this.mUIGcAbsenceColumnTable == null))
                {
                    this.mUIGcAbsenceColumnTable = new UIGcAbsenceColumnTable(this);
                }
                return this.mUIGcAbsenceColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAbsenceColumnTable mUIGcAbsenceColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAbsenceColumnTable : DXGrid
    {
        
        public UIGcAbsenceColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UITurnusGjennomsnittCell
        {
            get
            {
                if ((this.mUITurnusGjennomsnittCell == null))
                {
                    this.mUITurnusGjennomsnittCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITurnusGjennomsnittCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceColumnGridControlCell[View]gvAbsenceColumn[Row]0[Column]gccFullName";
                    this.mUITurnusGjennomsnittCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITurnusGjennomsnittCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUITurnusGjennomsnittCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUITurnusGjennomsnittCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMerarbeidovertidWindow : DXWindow
    {
        
        public UIMerarbeidovertidWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Merarbeid / overtid";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UIPanClientClient UIPanClientClient
        {
            get
            {
                if ((this.mUIPanClientClient == null))
                {
                    this.mUIPanClientClient = new UIPanClientClient(this);
                }
                return this.mUIPanClientClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanClientClient mUIPanClientClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanClientClient : DXTestControl
    {
        
        public UIPanClientClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panClient";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITcClientTabList UITcClientTabList
        {
            get
            {
                if ((this.mUITcClientTabList == null))
                {
                    this.mUITcClientTabList = new UITcClientTabList(this);
                }
                return this.mUITcClientTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcClientTabList mUITcClientTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcClientTabList : DXTestControl
    {
        
        public UITcClientTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcClient";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITpMainClient UITpMainClient
        {
            get
            {
                if ((this.mUITpMainClient == null))
                {
                    this.mUITpMainClient = new UITpMainClient(this);
                }
                return this.mUITpMainClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpMainClient mUITpMainClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpMainClient : DXTestControl
    {
        
        public UITpMainClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITcExtraDetailTabList UITcExtraDetailTabList
        {
            get
            {
                if ((this.mUITcExtraDetailTabList == null))
                {
                    this.mUITcExtraDetailTabList = new UITcExtraDetailTabList(this);
                }
                return this.mUITcExtraDetailTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcExtraDetailTabList mUITcExtraDetailTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcExtraDetailTabList : DXTestControl
    {
        
        public UITcExtraDetailTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcExtraDetail";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UITpSalaryCalcClient UITpSalaryCalcClient
        {
            get
            {
                if ((this.mUITpSalaryCalcClient == null))
                {
                    this.mUITpSalaryCalcClient = new UITpSalaryCalcClient(this);
                }
                return this.mUITpSalaryCalcClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpSalaryCalcClient mUITpSalaryCalcClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpSalaryCalcClient : DXTestControl
    {
        
        public UITpSalaryCalcClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpSalaryCalc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public UIGcAccountingLinesTable UIGcAccountingLinesTable
        {
            get
            {
                if ((this.mUIGcAccountingLinesTable == null))
                {
                    this.mUIGcAccountingLinesTable = new UIGcAccountingLinesTable(this);
                }
                return this.mUIGcAccountingLinesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAccountingLinesTable mUIGcAccountingLinesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAccountingLinesTable : DXGrid
    {
        
        public UIGcAccountingLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Merarbeid / overtid");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem800Cell
        {
            get
            {
                if ((this.mUIItem800Cell == null))
                {
                    this.mUIItem800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]0[Column]colAmount";
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem800Cell;
            }
        }
        
        public DXCell UIItem800Cell1
        {
            get
            {
                if ((this.mUIItem800Cell1 == null))
                {
                    this.mUIItem800Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]0[Column]colEFOHours";
                    this.mUIItem800Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell1.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem800Cell1;
            }
        }
        
        public DXCell UIItem200TimelønnCell
        {
            get
            {
                if ((this.mUIItem200TimelønnCell == null))
                {
                    this.mUIItem200TimelønnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]0[Column]colCostType";
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem200TimelønnCell;
            }
        }
        
        public DXCell UIItem200TimelønnCell1
        {
            get
            {
                if ((this.mUIItem200TimelønnCell1 == null))
                {
                    this.mUIItem200TimelønnCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]2[Column]colCostType";
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell1.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem200TimelønnCell1;
            }
        }
        
        public DXCell UIItem700Cell
        {
            get
            {
                if ((this.mUIItem700Cell == null))
                {
                    this.mUIItem700Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem700Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]2[Column]colAmount";
                    this.mUIItem700Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem700Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem700Cell;
            }
        }
        
        public DXCell UIItem400LørSøndagstilCell
        {
            get
            {
                if ((this.mUIItem400LørSøndagstilCell == null))
                {
                    this.mUIItem400LørSøndagstilCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem400LørSøndagstilCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]1[Column]colCostType";
                    this.mUIItem400LørSøndagstilCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem400LørSøndagstilCell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem400LørSøndagstilCell;
            }
        }
        
        public DXCell UIItem1400Cell
        {
            get
            {
                if ((this.mUIItem1400Cell == null))
                {
                    this.mUIItem1400Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1400Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]1[Column]colAmount";
                    this.mUIItem1400Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1400Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem1400Cell;
            }
        }
        
        public DXCell UIItem119Cell
        {
            get
            {
                if ((this.mUIItem119Cell == null))
                {
                    this.mUIItem119Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem119Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]1[Column]colEFOHours";
                    this.mUIItem119Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem119Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem119Cell;
            }
        }
        
        public DXCell UIItem200TimelønnCell2
        {
            get
            {
                if ((this.mUIItem200TimelønnCell2 == null))
                {
                    this.mUIItem200TimelønnCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]4[Column]colCostType";
                    this.mUIItem200TimelønnCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell2.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem200TimelønnCell2;
            }
        }
        
        public DXCell UIItem250Cell
        {
            get
            {
                if ((this.mUIItem250Cell == null))
                {
                    this.mUIItem250Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem250Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]4[Column]colAmount";
                    this.mUIItem250Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem250Cell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem250Cell;
            }
        }
        
        public DXCell UIItem410KveldNattilleCell
        {
            get
            {
                if ((this.mUIItem410KveldNattilleCell == null))
                {
                    this.mUIItem410KveldNattilleCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem410KveldNattilleCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]3[Column]colCostType";
                    this.mUIItem410KveldNattilleCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem410KveldNattilleCell.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem410KveldNattilleCell;
            }
        }
        
        public DXCell UIItem250Cell1
        {
            get
            {
                if ((this.mUIItem250Cell1 == null))
                {
                    this.mUIItem250Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem250Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAccountingLinesGridControlCell[View]gvAccountingLines[Row]3[Column]colAmount";
                    this.mUIItem250Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem250Cell1.WindowTitles.Add("Merarbeid / overtid");
                    #endregion
                }
                return this.mUIItem250Cell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem800Cell;
        
        private DXCell mUIItem800Cell1;
        
        private DXCell mUIItem200TimelønnCell;
        
        private DXCell mUIItem200TimelønnCell1;
        
        private DXCell mUIItem700Cell;
        
        private DXCell mUIItem400LørSøndagstilCell;
        
        private DXCell mUIItem1400Cell;
        
        private DXCell mUIItem119Cell;
        
        private DXCell mUIItem200TimelønnCell2;
        
        private DXCell mUIItem250Cell;
        
        private DXCell mUIItem410KveldNattilleCell;
        
        private DXCell mUIItem250Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRekalkuleringWindow : DXWindow
    {
        
        public UIRekalkuleringWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Rekalkulering";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public UIGcRecalculationTable UIGcRecalculationTable
        {
            get
            {
                if ((this.mUIGcRecalculationTable == null))
                {
                    this.mUIGcRecalculationTable = new UIGcRecalculationTable(this);
                }
                return this.mUIGcRecalculationTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRecalculationTable mUIGcRecalculationTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRecalculationTable : DXGrid
    {
        
        public UIGcRecalculationTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculation";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Rekalkulering");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem200TimelønnCell
        {
            get
            {
                if ((this.mUIItem200TimelønnCell == null))
                {
                    this.mUIItem200TimelønnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvPreviousAccounting[Row]2[Column]colCostType" +
                        "";
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem200TimelønnCell;
            }
        }
        
        public DXCell UIItem250Cell
        {
            get
            {
                if ((this.mUIItem250Cell == null))
                {
                    this.mUIItem250Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem250Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvPreviousAccounting[Row]2[Column]colAmount";
                    this.mUIItem250Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem250Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem250Cell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell == null))
                {
                    this.mUIItem310Overtid100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvPreviousAccounting[Row]1[Column]colCostType" +
                        "";
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell;
            }
        }
        
        public DXCell UIItem550Cell
        {
            get
            {
                if ((this.mUIItem550Cell == null))
                {
                    this.mUIItem550Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem550Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvPreviousAccounting[Row]1[Column]colAmount";
                    this.mUIItem550Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem550Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem550Cell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell1
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell1 == null))
                {
                    this.mUIItem310Overtid100Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]0[Column]colCostType";
                    this.mUIItem310Overtid100Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell1;
            }
        }
        
        public DXCell UIItem800Cell
        {
            get
            {
                if ((this.mUIItem800Cell == null))
                {
                    this.mUIItem800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]0[Column]colAmount";
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem800Cell;
            }
        }
        
        public DXCell UIItem11112023Cell
        {
            get
            {
                if ((this.mUIItem11112023Cell == null))
                {
                    this.mUIItem11112023Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem11112023Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]0[Column]colShiftDate";
                    this.mUIItem11112023Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem11112023Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem11112023Cell;
            }
        }
        
        public DXCell UIOvertidEkstravaktCell
        {
            get
            {
                if ((this.mUIOvertidEkstravaktCell == null))
                {
                    this.mUIOvertidEkstravaktCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOvertidEkstravaktCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]0[Column]colPreviousStatu" +
                        "sDisplayText";
                    this.mUIOvertidEkstravaktCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOvertidEkstravaktCell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIOvertidEkstravaktCell;
            }
        }
        
        public DXCell UIItem310Overtid100Cell2
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell2 == null))
                {
                    this.mUIItem310Overtid100Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]2[Column]colCostType";
                    this.mUIItem310Overtid100Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell2.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell2;
            }
        }
        
        public DXCell UIItem100Cell
        {
            get
            {
                if ((this.mUIItem100Cell == null))
                {
                    this.mUIItem100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]2[Column]colAmount";
                    this.mUIItem100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem100Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem100Cell;
            }
        }
        
        public DXCell UIN23000700Cell
        {
            get
            {
                if ((this.mUIN23000700Cell == null))
                {
                    this.mUIN23000700Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIN23000700Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]0[Column]colShiftDisplayT" +
                        "ext";
                    this.mUIN23000700Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN23000700Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIN23000700Cell;
            }
        }
        
        public DXCell UID07001500Cell
        {
            get
            {
                if ((this.mUID07001500Cell == null))
                {
                    this.mUID07001500Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUID07001500Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]1[Column]colShiftDisplayT" +
                        "ext";
                    this.mUID07001500Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID07001500Cell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUID07001500Cell;
            }
        }
        
        public DXCell UIItem11112023Cell1
        {
            get
            {
                if ((this.mUIItem11112023Cell1 == null))
                {
                    this.mUIItem11112023Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem11112023Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]1[Column]colShiftDate";
                    this.mUIItem11112023Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem11112023Cell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem11112023Cell1;
            }
        }
        
        public DXCell UIOvertidCell
        {
            get
            {
                if ((this.mUIOvertidCell == null))
                {
                    this.mUIOvertidCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOvertidCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]1[Column]colPreviousStatu" +
                        "sDisplayText";
                    this.mUIOvertidCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOvertidCell.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIOvertidCell;
            }
        }
        
        public DXCell UIItem200TimelønnCell1
        {
            get
            {
                if ((this.mUIItem200TimelønnCell1 == null))
                {
                    this.mUIItem200TimelønnCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-2[Row]0[Column]colCostType";
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem200TimelønnCell1;
            }
        }
        
        public DXCell UIItem800Cell1
        {
            get
            {
                if ((this.mUIItem800Cell1 == null))
                {
                    this.mUIItem800Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting-2[Row]0[Column]colAmount";
                    this.mUIItem800Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem800Cell1;
            }
        }
        
        public DXCell UIItem310Overtid100Cell3
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell3 == null))
                {
                    this.mUIItem310Overtid100Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]4[Column]colCostType";
                    this.mUIItem310Overtid100Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell3.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell3;
            }
        }
        
        public DXCell UIItem550Cell1
        {
            get
            {
                if ((this.mUIItem550Cell1 == null))
                {
                    this.mUIItem550Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem550Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvAccounting[Row]4[Column]colAmount";
                    this.mUIItem550Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem550Cell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIItem550Cell1;
            }
        }
        
        public DXCell UIOvertidEkstravaktCell1
        {
            get
            {
                if ((this.mUIOvertidEkstravaktCell1 == null))
                {
                    this.mUIOvertidEkstravaktCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIOvertidEkstravaktCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRecalculationGridControlCell[View]gvRecalculation[Row]1[Column]colNewStatusDisp" +
                        "layText";
                    this.mUIOvertidEkstravaktCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOvertidEkstravaktCell1.WindowTitles.Add("Rekalkulering");
                    #endregion
                }
                return this.mUIOvertidEkstravaktCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem200TimelønnCell;
        
        private DXCell mUIItem250Cell;
        
        private DXCell mUIItem310Overtid100Cell;
        
        private DXCell mUIItem550Cell;
        
        private DXCell mUIItem310Overtid100Cell1;
        
        private DXCell mUIItem800Cell;
        
        private DXCell mUIItem11112023Cell;
        
        private DXCell mUIOvertidEkstravaktCell;
        
        private DXCell mUIItem310Overtid100Cell2;
        
        private DXCell mUIItem100Cell;
        
        private DXCell mUIN23000700Cell;
        
        private DXCell mUID07001500Cell;
        
        private DXCell mUIItem11112023Cell1;
        
        private DXCell mUIOvertidCell;
        
        private DXCell mUIItem200TimelønnCell1;
        
        private DXCell mUIItem800Cell1;
        
        private DXCell mUIItem310Overtid100Cell3;
        
        private DXCell mUIItem550Cell1;
        
        private DXCell mUIOvertidEkstravaktCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIForskyvningWindow : DXWindow
    {
        
        public UIForskyvningWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Forskyvning";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Forskyvning");
            #endregion
        }
        
        #region Properties
        public UIPanClientPanelClient UIPanClientPanelClient
        {
            get
            {
                if ((this.mUIPanClientPanelClient == null))
                {
                    this.mUIPanClientPanelClient = new UIPanClientPanelClient(this);
                }
                return this.mUIPanClientPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanClientPanelClient mUIPanClientPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanClientPanelClient : DXTestControl
    {
        
        public UIPanClientPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panClientPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Forskyvning");
            #endregion
        }
        
        #region Properties
        public UIGpcMainClient UIGpcMainClient
        {
            get
            {
                if ((this.mUIGpcMainClient == null))
                {
                    this.mUIGpcMainClient = new UIGpcMainClient(this);
                }
                return this.mUIGpcMainClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGpcMainClient mUIGpcMainClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGpcMainClient : DXTestControl
    {
        
        public UIGpcMainClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gpcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
            this.WindowTitles.Add("Forskyvning");
            #endregion
        }
        
        #region Properties
        public UITcClientTabList1 UITcClientTabList
        {
            get
            {
                if ((this.mUITcClientTabList == null))
                {
                    this.mUITcClientTabList = new UITcClientTabList1(this);
                }
                return this.mUITcClientTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcClientTabList1 mUITcClientTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcClientTabList1 : DXTestControl
    {
        
        public UITcClientTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcClient";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Forskyvning");
            #endregion
        }
        
        #region Properties
        public UITpMainClient1 UITpMainClient
        {
            get
            {
                if ((this.mUITpMainClient == null))
                {
                    this.mUITpMainClient = new UITpMainClient1(this);
                }
                return this.mUITpMainClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpMainClient1 mUITpMainClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpMainClient1 : DXTestControl
    {
        
        public UITpMainClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Forskyvning");
            #endregion
        }
        
        #region Properties
        public UIGpcSalaryPanelClient UIGpcSalaryPanelClient
        {
            get
            {
                if ((this.mUIGpcSalaryPanelClient == null))
                {
                    this.mUIGpcSalaryPanelClient = new UIGpcSalaryPanelClient(this);
                }
                return this.mUIGpcSalaryPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGpcSalaryPanelClient mUIGpcSalaryPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGpcSalaryPanelClient : DXTestControl
    {
        
        public UIGpcSalaryPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gpcSalaryPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Forskyvning");
            #endregion
        }
        
        #region Properties
        public UIGpcSalaryAndShiftsClient UIGpcSalaryAndShiftsClient
        {
            get
            {
                if ((this.mUIGpcSalaryAndShiftsClient == null))
                {
                    this.mUIGpcSalaryAndShiftsClient = new UIGpcSalaryAndShiftsClient(this);
                }
                return this.mUIGpcSalaryAndShiftsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGpcSalaryAndShiftsClient mUIGpcSalaryAndShiftsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGpcSalaryAndShiftsClient : DXTestControl
    {
        
        public UIGpcSalaryAndShiftsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gpcSalaryAndShifts";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Forskyvning");
            #endregion
        }
        
        #region Properties
        public UIGtcSalaryAndShiftsTabList UIGtcSalaryAndShiftsTabList
        {
            get
            {
                if ((this.mUIGtcSalaryAndShiftsTabList == null))
                {
                    this.mUIGtcSalaryAndShiftsTabList = new UIGtcSalaryAndShiftsTabList(this);
                }
                return this.mUIGtcSalaryAndShiftsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIGtcSalaryAndShiftsTabList mUIGtcSalaryAndShiftsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGtcSalaryAndShiftsTabList : DXTestControl
    {
        
        public UIGtcSalaryAndShiftsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gtcSalaryAndShifts";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Forskyvning");
            #endregion
        }
        
        #region Properties
        public UITpSalaryCalcClient1 UITpSalaryCalcClient
        {
            get
            {
                if ((this.mUITpSalaryCalcClient == null))
                {
                    this.mUITpSalaryCalcClient = new UITpSalaryCalcClient1(this);
                }
                return this.mUITpSalaryCalcClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpSalaryCalcClient1 mUITpSalaryCalcClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpSalaryCalcClient1 : DXTestControl
    {
        
        public UITpSalaryCalcClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpSalaryCalc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Forskyvning");
            #endregion
        }
        
        #region Properties
        public UIGcLinesTable UIGcLinesTable
        {
            get
            {
                if ((this.mUIGcLinesTable == null))
                {
                    this.mUIGcLinesTable = new UIGcLinesTable(this);
                }
                return this.mUIGcLinesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcLinesTable mUIGcLinesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcLinesTable : DXGrid
    {
        
        public UIGcLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Forskyvning");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem310Overtid100Cell
        {
            get
            {
                if ((this.mUIItem310Overtid100Cell == null))
                {
                    this.mUIItem310Overtid100Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcLinesGridControlCell[View]gvLines[Row]0[Column]colCostType";
                    this.mUIItem310Overtid100Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem310Overtid100Cell.WindowTitles.Add("Forskyvning");
                    #endregion
                }
                return this.mUIItem310Overtid100Cell;
            }
        }
        
        public DXCell UIItem800Cell
        {
            get
            {
                if ((this.mUIItem800Cell == null))
                {
                    this.mUIItem800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcLinesGridControlCell[View]gvLines[Row]0[Column]colAmount";
                    this.mUIItem800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem800Cell.WindowTitles.Add("Forskyvning");
                    #endregion
                }
                return this.mUIItem800Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem310Overtid100Cell;
        
        private DXCell mUIItem800Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISlettWindow : DXWindow
    {
        
        public UISlettWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Slett";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Slett");
            #endregion
        }
        
        #region Properties
        public UIDbFooterCustom UIDbFooterCustom
        {
            get
            {
                if ((this.mUIDbFooterCustom == null))
                {
                    this.mUIDbFooterCustom = new UIDbFooterCustom(this);
                }
                return this.mUIDbFooterCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDbFooterCustom mUIDbFooterCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDbFooterCustom : DXTestControl
    {
        
        public UIDbFooterCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dbFooter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSDialogFooterBar";
            this.WindowTitles.Add("Slett");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Slett");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFraværsregistreringWindow : DXWindow
    {
        
        public UIFraværsregistreringWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Fraværsregistrering";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIPnlShiftManagementClient UIPnlShiftManagementClient
        {
            get
            {
                if ((this.mUIPnlShiftManagementClient == null))
                {
                    this.mUIPnlShiftManagementClient = new UIPnlShiftManagementClient(this);
                }
                return this.mUIPnlShiftManagementClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlShiftManagementClient mUIPnlShiftManagementClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlShiftManagementClient : DXTestControl
    {
        
        public UIPnlShiftManagementClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlShiftManagement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UISccShiftManagementSplitContainerControl UISccShiftManagementSplitContainerControl
        {
            get
            {
                if ((this.mUISccShiftManagementSplitContainerControl == null))
                {
                    this.mUISccShiftManagementSplitContainerControl = new UISccShiftManagementSplitContainerControl(this);
                }
                return this.mUISccShiftManagementSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UISccShiftManagementSplitContainerControl mUISccShiftManagementSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISccShiftManagementSplitContainerControl : DXSplitContainerControl
    {
        
        public UISccShiftManagementSplitContainerControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "sccShiftManagement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSplitContainerControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UISplitGroupPanelClient UISplitGroupPanelClient
        {
            get
            {
                if ((this.mUISplitGroupPanelClient == null))
                {
                    this.mUISplitGroupPanelClient = new UISplitGroupPanelClient(this);
                }
                return this.mUISplitGroupPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UISplitGroupPanelClient mUISplitGroupPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISplitGroupPanelClient : DXTestControl
    {
        
        public UISplitGroupPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "sccShiftManagementSplitGroupPanel[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIGrcSalaryClient UIGrcSalaryClient
        {
            get
            {
                if ((this.mUIGrcSalaryClient == null))
                {
                    this.mUIGrcSalaryClient = new UIGrcSalaryClient(this);
                }
                return this.mUIGrcSalaryClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrcSalaryClient mUIGrcSalaryClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrcSalaryClient : DXTestControl
    {
        
        public UIGrcSalaryClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grcSalary";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UITcDeductPaymentTabList UITcDeductPaymentTabList
        {
            get
            {
                if ((this.mUITcDeductPaymentTabList == null))
                {
                    this.mUITcDeductPaymentTabList = new UITcDeductPaymentTabList(this);
                }
                return this.mUITcDeductPaymentTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcDeductPaymentTabList mUITcDeductPaymentTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcDeductPaymentTabList : DXTestControl
    {
        
        public UITcDeductPaymentTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcDeductPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UITabDeductPaymentClient UITabDeductPaymentClient
        {
            get
            {
                if ((this.mUITabDeductPaymentClient == null))
                {
                    this.mUITabDeductPaymentClient = new UITabDeductPaymentClient(this);
                }
                return this.mUITabDeductPaymentClient;
            }
        }
        #endregion
        
        #region Fields
        private UITabDeductPaymentClient mUITabDeductPaymentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabDeductPaymentClient : DXTestControl
    {
        
        public UITabDeductPaymentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabDeductPayment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIGcPaymentLinesTable UIGcPaymentLinesTable
        {
            get
            {
                if ((this.mUIGcPaymentLinesTable == null))
                {
                    this.mUIGcPaymentLinesTable = new UIGcPaymentLinesTable(this);
                }
                return this.mUIGcPaymentLinesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcPaymentLinesTable mUIGcPaymentLinesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcPaymentLinesTable : DXGrid
    {
        
        public UIGcPaymentLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem02112023Cell
        {
            get
            {
                if ((this.mUIItem02112023Cell == null))
                {
                    this.mUIItem02112023Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem02112023Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]0[Column]gccPlDate";
                    this.mUIItem02112023Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem02112023Cell.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem02112023Cell;
            }
        }
        
        public DXCell UIItem8Cell
        {
            get
            {
                if ((this.mUIItem8Cell == null))
                {
                    this.mUIItem8Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem8Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]0[Column]gccPlHours";
                    this.mUIItem8Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem8Cell.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem8Cell;
            }
        }
        
        public DXCell UIItem03112023Cell
        {
            get
            {
                if ((this.mUIItem03112023Cell == null))
                {
                    this.mUIItem03112023Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem03112023Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]1[Column]gccPlDate";
                    this.mUIItem03112023Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem03112023Cell.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem03112023Cell;
            }
        }
        
        public DXCell UIItem8Cell1
        {
            get
            {
                if ((this.mUIItem8Cell1 == null))
                {
                    this.mUIItem8Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem8Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]1[Column]gccPlHours";
                    this.mUIItem8Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem8Cell1.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem8Cell1;
            }
        }
        
        public DXCell UIItem200TimelønnCell
        {
            get
            {
                if ((this.mUIItem200TimelønnCell == null))
                {
                    this.mUIItem200TimelønnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]0[Column]gccPlTT";
                    this.mUIItem200TimelønnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem200TimelønnCell;
            }
        }
        
        public DXCell UIItem200TimelønnCell1
        {
            get
            {
                if ((this.mUIItem200TimelønnCell1 == null))
                {
                    this.mUIItem200TimelønnCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPaymentLinesGridControlCell[View]gvPaymentLines[Row]1[Column]gccPlTT";
                    this.mUIItem200TimelønnCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200TimelønnCell1.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIItem200TimelønnCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem02112023Cell;
        
        private DXCell mUIItem8Cell;
        
        private DXCell mUIItem03112023Cell;
        
        private DXCell mUIItem8Cell1;
        
        private DXCell mUIItem200TimelønnCell;
        
        private DXCell mUIItem200TimelønnCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGlobaltoppsettWindow : WinWindow
    {
        
        public UIGlobaltoppsettWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Globalt oppsett";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmSetup";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIRekkefølgepåkalkulerClient UIRekkefølgepåkalkulerClient
        {
            get
            {
                if ((this.mUIRekkefølgepåkalkulerClient == null))
                {
                    this.mUIRekkefølgepåkalkulerClient = new UIRekkefølgepåkalkulerClient(this);
                }
                return this.mUIRekkefølgepåkalkulerClient;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIRekkefølgepåkalkulerClient mUIRekkefølgepåkalkulerClient;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxTreeList";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public WinClient UIGlobaltoppsettClient
        {
            get
            {
                if ((this.mUIGlobaltoppsettClient == null))
                {
                    this.mUIGlobaltoppsettClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIGlobaltoppsettClient.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUIGlobaltoppsettClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIGlobaltoppsettClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRekkefølgepåkalkulerClient : WinClient
    {
        
        public UIRekkefølgepåkalkulerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Rekkefølge på kalkulering av overtid";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIKalkuleriregistrerinRadioButton
        {
            get
            {
                if ((this.mUIKalkuleriregistrerinRadioButton == null))
                {
                    this.mUIKalkuleriregistrerinRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIKalkuleriregistrerinRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Kalkuler i registreringsrekkefølge.";
                    this.mUIKalkuleriregistrerinRadioButton.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUIKalkuleriregistrerinRadioButton;
            }
        }
        
        public WinRadioButton UIKalkulerikronologiskRadioButton
        {
            get
            {
                if ((this.mUIKalkulerikronologiskRadioButton == null))
                {
                    this.mUIKalkulerikronologiskRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIKalkulerikronologiskRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Kalkuler i kronologisk rekkefølge.";
                    this.mUIKalkulerikronologiskRadioButton.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUIKalkulerikronologiskRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIKalkuleriregistrerinRadioButton;
        
        private WinRadioButton mUIKalkulerikronologiskRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public UIGlobaltoppsettClient UIGlobaltoppsettClient
        {
            get
            {
                if ((this.mUIGlobaltoppsettClient == null))
                {
                    this.mUIGlobaltoppsettClient = new UIGlobaltoppsettClient(this);
                }
                return this.mUIGlobaltoppsettClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGlobaltoppsettClient mUIGlobaltoppsettClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGlobaltoppsettClient : WinClient
    {
        
        public UIGlobaltoppsettClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Globalt oppsett");
            #endregion
        }
        
        #region Properties
        public WinButton UILagreButton
        {
            get
            {
                if ((this.mUILagreButton == null))
                {
                    this.mUILagreButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILagreButton.SearchProperties[WinButton.PropertyNames.Name] = "Lagre";
                    this.mUILagreButton.WindowTitles.Add("Globalt oppsett");
                    #endregion
                }
                return this.mUILagreButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILagreButton;
        #endregion
    }
}
