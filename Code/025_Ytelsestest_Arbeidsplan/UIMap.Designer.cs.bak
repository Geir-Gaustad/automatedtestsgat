// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _025_Ytelsestest_Arbeidsplan
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// ChangeViewdate - Use 'ChangeViewdateParams' to pass parameters into this method.
        /// </summary>
        public void ChangeViewdate()
        {
            #region Variable Declarations
            DXLookUpEdit uIGSLookUpEditLookUpEdit = this.UIItemWindow.UIGSTabControlTabList.UIXtraTabPageClient.UIGSPanelControlClient.UIGSLookUpEditLookUpEdit;
            DXButton uIGSSimpleButtonButton = this.UIItemWindow.UIPaBottomClient.UIGSSimpleButtonButton;
            #endregion

            // Type 'System.DateTime' in 'GSLookUpEdit' LookUpEdit
            //ValueTypeName
            uIGSLookUpEditLookUpEdit.ValueTypeName = this.ChangeViewdateParams.UIGSLookUpEditLookUpEditValueTypeName;

            // Type '2022-06-20' in 'GSLookUpEdit' LookUpEdit
            //ValueAsString
            uIGSLookUpEditLookUpEdit.ValueAsString = this.ChangeViewdateParams.UIGSLookUpEditLookUpEditValueAsString;

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }
        
        /// <summary>
        /// CheckCauseCodeF - Use 'CheckCauseCodeFExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCauseCodeF()
        {
            #region Variable Declarations
            DXTreeListCell uIFFerievikarTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode96TreeListNode.UINode0TreeListNode.UIFFerievikarTreeListCell;
            DXTreeListCell uIFFerievikarTreeListCell1 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode97TreeListNode.UINode0TreeListNode.UIFFerievikarTreeListCell;
            DXTreeListCell uIFFerievikarTreeListCell2 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode98TreeListNode.UINode0TreeListNode.UIFFerievikarTreeListCell;
            DXTreeListCell uIFFerievikarTreeListCell3 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode99TreeListNode.UINode0TreeListNode.UIFFerievikarTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'F - Ferievikar' TreeListCell equals 'F - Ferievikar'
            Assert.AreEqual(this.CheckCauseCodeFExpectedValues.UIFFerievikarTreeListCellValueAsString, uIFFerievikarTreeListCell.ValueAsString, "Feil årsakskode");

            // Verify that the 'ValueAsString' property of 'F - Ferievikar' TreeListCell equals 'F - Ferievikar'
            Assert.AreEqual(this.CheckCauseCodeFExpectedValues.UIFFerievikarTreeListCellValueAsString1, uIFFerievikarTreeListCell1.ValueAsString, "Feil årsakskode");

            // Verify that the 'ValueAsString' property of 'F - Ferievikar' TreeListCell equals 'F - Ferievikar'
            Assert.AreEqual(this.CheckCauseCodeFExpectedValues.UIFFerievikarTreeListCellValueAsString2, uIFFerievikarTreeListCell2.ValueAsString, "Feil årsakskode");

            // Verify that the 'ValueAsString' property of 'F - Ferievikar' TreeListCell equals 'F - Ferievikar'
            Assert.AreEqual(this.CheckCauseCodeFExpectedValues.UIFFerievikarTreeListCellValueAsString3, uIFFerievikarTreeListCell3.ValueAsString, "Feil årsakskode");
        }
        
        /// <summary>
        /// CheckRevolvingPeriod - Use 'CheckRevolvingPeriodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRevolvingPeriod()
        {
            #region Variable Declarations
            DXTreeListCell uIItem27062022TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode95TreeListNode.UINode0TreeListNode.UIItem27062022TreeListCell;
            DXTreeListCell uIItem21082022TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode95TreeListNode.UINode0TreeListNode.UIItem21082022TreeListCell;
            DXTreeListCell uIItem27062022TreeListCell1 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode96TreeListNode.UINode0TreeListNode.UIItem27062022TreeListCell;
            DXTreeListCell uIItem21082022TreeListCell1 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode96TreeListNode.UINode0TreeListNode.UIItem21082022TreeListCell;
            DXTreeListCell uIItem27062022TreeListCell2 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode97TreeListNode.UINode0TreeListNode.UIItem27062022TreeListCell;
            DXTreeListCell uIItem21082022TreeListCell2 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode97TreeListNode.UINode0TreeListNode.UIItem21082022TreeListCell;
            DXTreeListCell uIItem27062022TreeListCell3 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode98TreeListNode.UINode0TreeListNode.UIItem27062022TreeListCell;
            DXTreeListCell uIItem21082022TreeListCell3 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode98TreeListNode.UINode0TreeListNode.UIItem21082022TreeListCell;
            DXTreeListCell uIItem27062022TreeListCell4 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode99TreeListNode.UINode0TreeListNode.UIItem27062022TreeListCell;
            DXTreeListCell uIItem21082022TreeListCell4 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode99TreeListNode.UINode0TreeListNode.UIItem21082022TreeListCell;
            DXTreeListCell uIItem27062022TreeListCell5 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode100TreeListNode.UINode0TreeListNode.UIItem27062022TreeListCell;
            DXTreeListCell uIItem21082022TreeListCell5 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode100TreeListNode.UINode0TreeListNode.UIItem21082022TreeListCell;
            DXTreeListCell uIItem27062022TreeListCell6 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode101TreeListNode.UINode0TreeListNode.UIItem27062022TreeListCell;
            DXTreeListCell uIItem21082022TreeListCell6 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode101TreeListNode.UINode0TreeListNode.UIItem21082022TreeListCell;
            DXTreeListCell uIItem27062022TreeListCell7 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode102TreeListNode.UINode0TreeListNode.UIItem27062022TreeListCell;
            DXTreeListCell uIItem21082022TreeListCell7 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode102TreeListNode.UINode0TreeListNode.UIItem21082022TreeListCell;
            #endregion

            // Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem27062022TreeListCellText, uIItem27062022TreeListCell.Text, "Feil fra dato");

            // Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem21082022TreeListCellText, uIItem21082022TreeListCell.Text, "Feil til dato");

            // Verify that the 'ClassName' property of '27.06.2022' TreeListCell equals 'TreeListCell'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem27062022TreeListCellClassName, uIItem27062022TreeListCell1.ClassName);

            // Verify that the 'ClassName' property of '21.08.2022' TreeListCell equals 'TreeListCell'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem21082022TreeListCellClassName, uIItem21082022TreeListCell1.ClassName);

            // Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem27062022TreeListCellText1, uIItem27062022TreeListCell2.Text);

            // Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem21082022TreeListCellText1, uIItem21082022TreeListCell2.Text);

            // Verify that the 'ClassName' property of '27.06.2022' TreeListCell equals 'TreeListCell'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem27062022TreeListCellClassName1, uIItem27062022TreeListCell3.ClassName);

            // Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem21082022TreeListCellText2, uIItem21082022TreeListCell3.Text);

            // Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem27062022TreeListCellText2, uIItem27062022TreeListCell4.Text);

            // Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem21082022TreeListCellText3, uIItem21082022TreeListCell4.Text);

            // Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem27062022TreeListCellText3, uIItem27062022TreeListCell5.Text);

            // Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem21082022TreeListCellText4, uIItem21082022TreeListCell5.Text);

            // Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem27062022TreeListCellText4, uIItem27062022TreeListCell6.Text);

            // Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem21082022TreeListCellText5, uIItem21082022TreeListCell6.Text);

            // Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem27062022TreeListCellText5, uIItem27062022TreeListCell7.Text);

            // Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
            Assert.AreEqual(this.CheckRevolvingPeriodExpectedValues.UIItem21082022TreeListCellText6, uIItem21082022TreeListCell7.Text);
        }
        
        /// <summary>
        /// InsertCopiedShifts - Use 'InsertCopiedShiftsParams' to pass parameters into this method.
        /// </summary>
        public void InsertCopiedShifts()
        {
            #region Variable Declarations
            DXCell uIItemCell1 = this.UIArbeidsplanYTELSEArbWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanYTELSEArbWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXButton uIOKButton = this.UILiminnWindow.UIOKButton;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell1, new Point(204, 494));

            // Type 'Control + v' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.InsertCopiedShiftsParams.UIGcRosterPlanTableSendKeys, ModifierKeys.Control);

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// Select4EmpsInEmployeeWindow
        /// </summary>
        public void Select4EmpsInEmployeeWindow()
        {
            #region Variable Declarations
            var uIItem10TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode96TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            var uIItem10TreeListCell1 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode97TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            var uIItem10TreeListCell2 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode98TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            var uIItem10TreeListCell3 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode99TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            #endregion
            

            // Click '1. 0%' TreeListCell while pressing Control
            Mouse.DoubleClick(uIItem10TreeListCell);

            // Click '1. 0%' TreeListCell while pressing Control
            Mouse.Click(uIItem10TreeListCell1, ModifierKeys.Control);

            // Click '1. 0%' TreeListCell while pressing Control
            Mouse.Click(uIItem10TreeListCell2, ModifierKeys.Control);

            // Click '1. 0%' TreeListCell while pressing Control
            Mouse.Click(uIItem10TreeListCell3, ModifierKeys.Control);
        }
        
        /// <summary>
        /// Select4RemainingEmpsInEmployeeWindow
        /// </summary>
        public void Select4RemainingEmpsInEmployeeWindow()
        {
            #region Variable Declarations
            DXTreeListCell uIItem1100TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode95TreeListNode.UINode0TreeListNode.UIItem1100TreeListCell;
            DXTreeListCell uIItem1100TreeListCell1 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode100TreeListNode.UINode0TreeListNode.UIItem1100TreeListCell;
            DXTreeListCell uIItem1100TreeListCell2 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode101TreeListNode.UINode0TreeListNode.UIItem1100TreeListCell;
            DXTreeListCell uIItem190TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeesTreeList.UINode102TreeListNode.UINode0TreeListNode.UIItem190TreeListCell;
            #endregion

            // Click '1. 100%' TreeListCell while pressing Control
            Mouse.Click(uIItem1100TreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(116, 8));

            // Click '1. 100%' TreeListCell while pressing Control
            Mouse.Click(uIItem1100TreeListCell1, MouseButtons.Left, ModifierKeys.Control, new Point(106, 9));

            // Click '1. 100%' TreeListCell while pressing Control
            Mouse.Click(uIItem1100TreeListCell2, MouseButtons.Left, ModifierKeys.Control, new Point(112, 7));

            // Click '1. 90%' TreeListCell while pressing Control
            Mouse.Click(uIItem190TreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(106, 12));
        }
        
        /// <summary>
        /// SelectCauseCodeF - Use 'SelectCauseCodeFParams' to pass parameters into this method.
        /// </summary>
        public void SelectCauseCodeF()
        {
            #region Variable Declarations
            DXLookUpEdit uIEOvertimeCodeLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerOvertCustom.UIEOvertimeCodeLookUpEdit;
            #endregion

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel' in 'eOvertimeCode' LookUpEdit
            //ValueTypeName
            uIEOvertimeCodeLookUpEdit.ValueTypeName = this.SelectCauseCodeFParams.UIEOvertimeCodeLookUpEditValueTypeName;

            // Type 'F - Ferievikar' in 'eOvertimeCode' LookUpEdit
            //ValueAsString
            uIEOvertimeCodeLookUpEdit.ValueAsString = this.SelectCauseCodeFParams.UIEOvertimeCodeLookUpEditValueAsString;
        }
        
        #region Properties
        public virtual ChangeViewdateParams ChangeViewdateParams
        {
            get
            {
                if ((this.mChangeViewdateParams == null))
                {
                    this.mChangeViewdateParams = new ChangeViewdateParams();
                }
                return this.mChangeViewdateParams;
            }
        }
        
        public virtual CheckCauseCodeFExpectedValues CheckCauseCodeFExpectedValues
        {
            get
            {
                if ((this.mCheckCauseCodeFExpectedValues == null))
                {
                    this.mCheckCauseCodeFExpectedValues = new CheckCauseCodeFExpectedValues();
                }
                return this.mCheckCauseCodeFExpectedValues;
            }
        }
        
        public virtual CheckRevolvingPeriodExpectedValues CheckRevolvingPeriodExpectedValues
        {
            get
            {
                if ((this.mCheckRevolvingPeriodExpectedValues == null))
                {
                    this.mCheckRevolvingPeriodExpectedValues = new CheckRevolvingPeriodExpectedValues();
                }
                return this.mCheckRevolvingPeriodExpectedValues;
            }
        }
        
        public virtual InsertCopiedShiftsParams InsertCopiedShiftsParams
        {
            get
            {
                if ((this.mInsertCopiedShiftsParams == null))
                {
                    this.mInsertCopiedShiftsParams = new InsertCopiedShiftsParams();
                }
                return this.mInsertCopiedShiftsParams;
            }
        }
        
        public virtual SelectCauseCodeFParams SelectCauseCodeFParams
        {
            get
            {
                if ((this.mSelectCauseCodeFParams == null))
                {
                    this.mSelectCauseCodeFParams = new SelectCauseCodeFParams();
                }
                return this.mSelectCauseCodeFParams;
            }
        }
        
        public UIAnsatteiarbeidsplanWindow UIAnsatteiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIAnsatteiarbeidsplanWindow == null))
                {
                    this.mUIAnsatteiarbeidsplanWindow = new UIAnsatteiarbeidsplanWindow();
                }
                return this.mUIAnsatteiarbeidsplanWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIArbeidsplanYTELSEArbWindow UIArbeidsplanYTELSEArbWindow
        {
            get
            {
                if ((this.mUIArbeidsplanYTELSEArbWindow == null))
                {
                    this.mUIArbeidsplanYTELSEArbWindow = new UIArbeidsplanYTELSEArbWindow();
                }
                return this.mUIArbeidsplanYTELSEArbWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UILiminnWindow UILiminnWindow
        {
            get
            {
                if ((this.mUILiminnWindow == null))
                {
                    this.mUILiminnWindow = new UILiminnWindow();
                }
                return this.mUILiminnWindow;
            }
        }
        
        public UIArbeidsplanYTELSEArbWindow1 UIArbeidsplanYTELSEArbWindow1
        {
            get
            {
                if ((this.mUIArbeidsplanYTELSEArbWindow1 == null))
                {
                    this.mUIArbeidsplanYTELSEArbWindow1 = new UIArbeidsplanYTELSEArbWindow1();
                }
                return this.mUIArbeidsplanYTELSEArbWindow1;
            }
        }
        
        public UIArbeidsplanHjelpeplaWindow UIArbeidsplanHjelpeplaWindow
        {
            get
            {
                if ((this.mUIArbeidsplanHjelpeplaWindow == null))
                {
                    this.mUIArbeidsplanHjelpeplaWindow = new UIArbeidsplanHjelpeplaWindow();
                }
                return this.mUIArbeidsplanHjelpeplaWindow;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        #endregion
        
        #region Fields
        private ChangeViewdateParams mChangeViewdateParams;
        
        private CheckCauseCodeFExpectedValues mCheckCauseCodeFExpectedValues;
        
        private CheckRevolvingPeriodExpectedValues mCheckRevolvingPeriodExpectedValues;
        
        private InsertCopiedShiftsParams mInsertCopiedShiftsParams;
        
        private SelectCauseCodeFParams mSelectCauseCodeFParams;
        
        private UIAnsatteiarbeidsplanWindow mUIAnsatteiarbeidsplanWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIArbeidsplanYTELSEArbWindow mUIArbeidsplanYTELSEArbWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UILiminnWindow mUILiminnWindow;
        
        private UIArbeidsplanYTELSEArbWindow1 mUIArbeidsplanYTELSEArbWindow1;
        
        private UIArbeidsplanHjelpeplaWindow mUIArbeidsplanHjelpeplaWindow;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeViewdate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ChangeViewdateParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'System.DateTime' in 'GSLookUpEdit' LookUpEdit
        /// </summary>
        public string UIGSLookUpEditLookUpEditValueTypeName = "System.DateTime";
        
        /// <summary>
        /// Type '2022-06-20' in 'GSLookUpEdit' LookUpEdit
        /// </summary>
        public string UIGSLookUpEditLookUpEditValueAsString = "2022-06-20";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCauseCodeF'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCauseCodeFExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F - Ferievikar' TreeListCell equals 'F - Ferievikar'
        /// </summary>
        public string UIFFerievikarTreeListCellValueAsString = "F - Ferievikar";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F - Ferievikar' TreeListCell equals 'F - Ferievikar'
        /// </summary>
        public string UIFFerievikarTreeListCellValueAsString1 = "F - Ferievikar";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F - Ferievikar' TreeListCell equals 'F - Ferievikar'
        /// </summary>
        public string UIFFerievikarTreeListCellValueAsString2 = "F - Ferievikar";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F - Ferievikar' TreeListCell equals 'F - Ferievikar'
        /// </summary>
        public string UIFFerievikarTreeListCellValueAsString3 = "F - Ferievikar";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRevolvingPeriod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckRevolvingPeriodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
        /// </summary>
        public string UIItem27062022TreeListCellText = "27.06.2022";
        
        /// <summary>
        /// Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
        /// </summary>
        public string UIItem21082022TreeListCellText = "21.08.2022";
        
        /// <summary>
        /// Verify that the 'ClassName' property of '27.06.2022' TreeListCell equals 'TreeListCell'
        /// </summary>
        public string UIItem27062022TreeListCellClassName = "TreeListCell";
        
        /// <summary>
        /// Verify that the 'ClassName' property of '21.08.2022' TreeListCell equals 'TreeListCell'
        /// </summary>
        public string UIItem21082022TreeListCellClassName = "TreeListCell";
        
        /// <summary>
        /// Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
        /// </summary>
        public string UIItem27062022TreeListCellText1 = "27.06.2022";
        
        /// <summary>
        /// Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
        /// </summary>
        public string UIItem21082022TreeListCellText1 = "21.08.2022";
        
        /// <summary>
        /// Verify that the 'ClassName' property of '27.06.2022' TreeListCell equals 'TreeListCell'
        /// </summary>
        public string UIItem27062022TreeListCellClassName1 = "TreeListCell";
        
        /// <summary>
        /// Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
        /// </summary>
        public string UIItem21082022TreeListCellText2 = "21.08.2022";
        
        /// <summary>
        /// Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
        /// </summary>
        public string UIItem27062022TreeListCellText2 = "27.06.2022";
        
        /// <summary>
        /// Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
        /// </summary>
        public string UIItem21082022TreeListCellText3 = "21.08.2022";
        
        /// <summary>
        /// Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
        /// </summary>
        public string UIItem27062022TreeListCellText3 = "27.06.2022";
        
        /// <summary>
        /// Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
        /// </summary>
        public string UIItem21082022TreeListCellText4 = "21.08.2022";
        
        /// <summary>
        /// Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
        /// </summary>
        public string UIItem27062022TreeListCellText4 = "27.06.2022";
        
        /// <summary>
        /// Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
        /// </summary>
        public string UIItem21082022TreeListCellText5 = "21.08.2022";
        
        /// <summary>
        /// Verify that the 'Text' property of '27.06.2022' TreeListCell equals '27.06.2022'
        /// </summary>
        public string UIItem27062022TreeListCellText5 = "27.06.2022";
        
        /// <summary>
        /// Verify that the 'Text' property of '21.08.2022' TreeListCell equals '21.08.2022'
        /// </summary>
        public string UIItem21082022TreeListCellText6 = "21.08.2022";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertCopiedShifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InsertCopiedShiftsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + v' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "v";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectCauseCodeF'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectCauseCodeFParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel' in 'eOvertimeCode' LookUpEdit
        /// </summary>
        public string UIEOvertimeCodeLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel";
        
        /// <summary>
        /// Type 'F - Ferievikar' in 'eOvertimeCode' LookUpEdit
        /// </summary>
        public string UIEOvertimeCodeLookUpEditValueAsString = "F - Ferievikar";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAnsatteiarbeidsplanWindow : DXWindow
    {
        
        public UIAnsatteiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlOuterClient UIPanelControlOuterClient
        {
            get
            {
                if ((this.mUIPanelControlOuterClient == null))
                {
                    this.mUIPanelControlOuterClient = new UIPanelControlOuterClient(this);
                }
                return this.mUIPanelControlOuterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlOuterClient mUIPanelControlOuterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPanelControlOuterClient : DXTestControl
    {
        
        public UIPanelControlOuterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        
        public UIPanelControlRightClient UIPanelControlRightClient
        {
            get
            {
                if ((this.mUIPanelControlRightClient == null))
                {
                    this.mUIPanelControlRightClient = new UIPanelControlRightClient(this);
                }
                return this.mUIPanelControlRightClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient mUIPanelControlLeftClient;
        
        private UIPanelControlRightClient mUIPanelControlRightClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPanelControlLeftClient : DXTestControl
    {
        
        public UIPanelControlLeftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITreeListEmployeesTreeList UITreeListEmployeesTreeList
        {
            get
            {
                if ((this.mUITreeListEmployeesTreeList == null))
                {
                    this.mUITreeListEmployeesTreeList = new UITreeListEmployeesTreeList(this);
                }
                return this.mUITreeListEmployeesTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListEmployeesTreeList mUITreeListEmployeesTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITreeListEmployeesTreeList : DXTreeList
    {
        
        public UITreeListEmployeesTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode96TreeListNode UINode96TreeListNode
        {
            get
            {
                if ((this.mUINode96TreeListNode == null))
                {
                    this.mUINode96TreeListNode = new UINode96TreeListNode(this);
                }
                return this.mUINode96TreeListNode;
            }
        }
        
        public UINode97TreeListNode UINode97TreeListNode
        {
            get
            {
                if ((this.mUINode97TreeListNode == null))
                {
                    this.mUINode97TreeListNode = new UINode97TreeListNode(this);
                }
                return this.mUINode97TreeListNode;
            }
        }
        
        public UINode98TreeListNode UINode98TreeListNode
        {
            get
            {
                if ((this.mUINode98TreeListNode == null))
                {
                    this.mUINode98TreeListNode = new UINode98TreeListNode(this);
                }
                return this.mUINode98TreeListNode;
            }
        }
        
        public UINode99TreeListNode UINode99TreeListNode
        {
            get
            {
                if ((this.mUINode99TreeListNode == null))
                {
                    this.mUINode99TreeListNode = new UINode99TreeListNode(this);
                }
                return this.mUINode99TreeListNode;
            }
        }
        
        public UINode95TreeListNode UINode95TreeListNode
        {
            get
            {
                if ((this.mUINode95TreeListNode == null))
                {
                    this.mUINode95TreeListNode = new UINode95TreeListNode(this);
                }
                return this.mUINode95TreeListNode;
            }
        }
        
        public UINode100TreeListNode UINode100TreeListNode
        {
            get
            {
                if ((this.mUINode100TreeListNode == null))
                {
                    this.mUINode100TreeListNode = new UINode100TreeListNode(this);
                }
                return this.mUINode100TreeListNode;
            }
        }
        
        public UINode101TreeListNode UINode101TreeListNode
        {
            get
            {
                if ((this.mUINode101TreeListNode == null))
                {
                    this.mUINode101TreeListNode = new UINode101TreeListNode(this);
                }
                return this.mUINode101TreeListNode;
            }
        }
        
        public UINode102TreeListNode UINode102TreeListNode
        {
            get
            {
                if ((this.mUINode102TreeListNode == null))
                {
                    this.mUINode102TreeListNode = new UINode102TreeListNode(this);
                }
                return this.mUINode102TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode96TreeListNode mUINode96TreeListNode;
        
        private UINode97TreeListNode mUINode97TreeListNode;
        
        private UINode98TreeListNode mUINode98TreeListNode;
        
        private UINode99TreeListNode mUINode99TreeListNode;
        
        private UINode95TreeListNode mUINode95TreeListNode;
        
        private UINode100TreeListNode mUINode100TreeListNode;
        
        private UINode101TreeListNode mUINode101TreeListNode;
        
        private UINode102TreeListNode mUINode102TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode96TreeListNode : DXTreeListNode
    {
        
        public UINode96TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node96";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode0TreeListNode : DXTreeListNode
    {
        
        public UINode0TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem10TreeListCell
        {
            get
            {
                if ((this.mUIItem10TreeListCell == null))
                {
                    this.mUIItem10TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10TreeListCell;
            }
        }
        
        public DXTreeListCell UIFFerievikarTreeListCell
        {
            get
            {
                if ((this.mUIFFerievikarTreeListCell == null))
                {
                    this.mUIFFerievikarTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIFFerievikarTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colOvertimeCodeStringMain";
                    this.mUIFFerievikarTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIFFerievikarTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIFFerievikarTreeListCell;
            }
        }
        
        public DXTreeListCell UIItem27062022TreeListCell
        {
            get
            {
                if ((this.mUIItem27062022TreeListCell == null))
                {
                    this.mUIItem27062022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colFromDateMain";
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem27062022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem27062022TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem21082022TreeListCell
        {
            get
            {
                if ((this.mUIItem21082022TreeListCell == null))
                {
                    this.mUIItem21082022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colToDateMain";
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem21082022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem21082022TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem10TreeListCell;
        
        private DXTreeListCell mUIFFerievikarTreeListCell;
        
        private DXTreeListCell mUIItem27062022TreeListCell;
        
        private DXTreeListCell mUIItem21082022TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode97TreeListNode : DXTreeListNode
    {
        
        public UINode97TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node97";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode1 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode1(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode1 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode0TreeListNode1 : DXTreeListNode
    {
        
        public UINode0TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem10TreeListCell
        {
            get
            {
                if ((this.mUIItem10TreeListCell == null))
                {
                    this.mUIItem10TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10TreeListCell;
            }
        }
        
        public DXTreeListCell UIFFerievikarTreeListCell
        {
            get
            {
                if ((this.mUIFFerievikarTreeListCell == null))
                {
                    this.mUIFFerievikarTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIFFerievikarTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colOvertimeCodeStringMain";
                    this.mUIFFerievikarTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIFFerievikarTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIFFerievikarTreeListCell;
            }
        }
        
        public DXTreeListCell UIItem27062022TreeListCell
        {
            get
            {
                if ((this.mUIItem27062022TreeListCell == null))
                {
                    this.mUIItem27062022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colFromDateMain";
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem27062022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem27062022TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem21082022TreeListCell
        {
            get
            {
                if ((this.mUIItem21082022TreeListCell == null))
                {
                    this.mUIItem21082022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colToDateMain";
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem21082022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem21082022TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem10TreeListCell;
        
        private DXTreeListCell mUIFFerievikarTreeListCell;
        
        private DXTreeListCell mUIItem27062022TreeListCell;
        
        private DXTreeListCell mUIItem21082022TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode98TreeListNode : DXTreeListNode
    {
        
        public UINode98TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node98";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode2 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode2(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode2 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode0TreeListNode2 : DXTreeListNode
    {
        
        public UINode0TreeListNode2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem10TreeListCell
        {
            get
            {
                if ((this.mUIItem10TreeListCell == null))
                {
                    this.mUIItem10TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10TreeListCell;
            }
        }
        
        public DXTreeListCell UIFFerievikarTreeListCell
        {
            get
            {
                if ((this.mUIFFerievikarTreeListCell == null))
                {
                    this.mUIFFerievikarTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIFFerievikarTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colOvertimeCodeStringMain";
                    this.mUIFFerievikarTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIFFerievikarTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIFFerievikarTreeListCell;
            }
        }
        
        public DXTreeListCell UIItem27062022TreeListCell
        {
            get
            {
                if ((this.mUIItem27062022TreeListCell == null))
                {
                    this.mUIItem27062022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colFromDateMain";
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem27062022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem27062022TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem21082022TreeListCell
        {
            get
            {
                if ((this.mUIItem21082022TreeListCell == null))
                {
                    this.mUIItem21082022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colToDateMain";
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem21082022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem21082022TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem10TreeListCell;
        
        private DXTreeListCell mUIFFerievikarTreeListCell;
        
        private DXTreeListCell mUIItem27062022TreeListCell;
        
        private DXTreeListCell mUIItem21082022TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode99TreeListNode : DXTreeListNode
    {
        
        public UINode99TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node99";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode3 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode3(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode3 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode0TreeListNode3 : DXTreeListNode
    {
        
        public UINode0TreeListNode3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem10TreeListCell
        {
            get
            {
                if ((this.mUIItem10TreeListCell == null))
                {
                    this.mUIItem10TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10TreeListCell;
            }
        }
        
        public DXTreeListCell UIFFerievikarTreeListCell
        {
            get
            {
                if ((this.mUIFFerievikarTreeListCell == null))
                {
                    this.mUIFFerievikarTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIFFerievikarTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colOvertimeCodeStringMain";
                    this.mUIFFerievikarTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIFFerievikarTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIFFerievikarTreeListCell;
            }
        }
        
        public DXTreeListCell UIItem27062022TreeListCell
        {
            get
            {
                if ((this.mUIItem27062022TreeListCell == null))
                {
                    this.mUIItem27062022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colFromDateMain";
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem27062022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem27062022TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem21082022TreeListCell
        {
            get
            {
                if ((this.mUIItem21082022TreeListCell == null))
                {
                    this.mUIItem21082022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colToDateMain";
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem21082022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem21082022TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem10TreeListCell;
        
        private DXTreeListCell mUIFFerievikarTreeListCell;
        
        private DXTreeListCell mUIItem27062022TreeListCell;
        
        private DXTreeListCell mUIItem21082022TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode95TreeListNode : DXTreeListNode
    {
        
        public UINode95TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node95";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode4 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode4(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode4 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode0TreeListNode4 : DXTreeListNode
    {
        
        public UINode0TreeListNode4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem1100TreeListCell
        {
            get
            {
                if ((this.mUIItem1100TreeListCell == null))
                {
                    this.mUIItem1100TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem1100TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem1100TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem27062022TreeListCell
        {
            get
            {
                if ((this.mUIItem27062022TreeListCell == null))
                {
                    this.mUIItem27062022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colFromDateMain";
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem27062022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem27062022TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem21082022TreeListCell
        {
            get
            {
                if ((this.mUIItem21082022TreeListCell == null))
                {
                    this.mUIItem21082022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colToDateMain";
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem21082022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem21082022TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem1100TreeListCell;
        
        private DXTreeListCell mUIItem27062022TreeListCell;
        
        private DXTreeListCell mUIItem21082022TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode100TreeListNode : DXTreeListNode
    {
        
        public UINode100TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node100";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode5 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode5(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode5 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode0TreeListNode5 : DXTreeListNode
    {
        
        public UINode0TreeListNode5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem1100TreeListCell
        {
            get
            {
                if ((this.mUIItem1100TreeListCell == null))
                {
                    this.mUIItem1100TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem1100TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem1100TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem27062022TreeListCell
        {
            get
            {
                if ((this.mUIItem27062022TreeListCell == null))
                {
                    this.mUIItem27062022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colFromDateMain";
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem27062022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem27062022TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem21082022TreeListCell
        {
            get
            {
                if ((this.mUIItem21082022TreeListCell == null))
                {
                    this.mUIItem21082022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colToDateMain";
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem21082022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem21082022TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem1100TreeListCell;
        
        private DXTreeListCell mUIItem27062022TreeListCell;
        
        private DXTreeListCell mUIItem21082022TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode101TreeListNode : DXTreeListNode
    {
        
        public UINode101TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node101";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode6 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode6(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode6 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode0TreeListNode6 : DXTreeListNode
    {
        
        public UINode0TreeListNode6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem1100TreeListCell
        {
            get
            {
                if ((this.mUIItem1100TreeListCell == null))
                {
                    this.mUIItem1100TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem1100TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem1100TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem27062022TreeListCell
        {
            get
            {
                if ((this.mUIItem27062022TreeListCell == null))
                {
                    this.mUIItem27062022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colFromDateMain";
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem27062022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem27062022TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem21082022TreeListCell
        {
            get
            {
                if ((this.mUIItem21082022TreeListCell == null))
                {
                    this.mUIItem21082022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colToDateMain";
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem21082022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem21082022TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem1100TreeListCell;
        
        private DXTreeListCell mUIItem27062022TreeListCell;
        
        private DXTreeListCell mUIItem21082022TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode102TreeListNode : DXTreeListNode
    {
        
        public UINode102TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node102";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode7 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode7(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode7 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINode0TreeListNode7 : DXTreeListNode
    {
        
        public UINode0TreeListNode7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem190TreeListCell
        {
            get
            {
                if ((this.mUIItem190TreeListCell == null))
                {
                    this.mUIItem190TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem190TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem190TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem190TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem190TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem27062022TreeListCell
        {
            get
            {
                if ((this.mUIItem27062022TreeListCell == null))
                {
                    this.mUIItem27062022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colFromDateMain";
                    this.mUIItem27062022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem27062022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem27062022TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem21082022TreeListCell
        {
            get
            {
                if ((this.mUIItem21082022TreeListCell == null))
                {
                    this.mUIItem21082022TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colToDateMain";
                    this.mUIItem21082022TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem21082022TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem21082022TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem190TreeListCell;
        
        private DXTreeListCell mUIItem27062022TreeListCell;
        
        private DXTreeListCell mUIItem21082022TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPanelControlRightClient : DXTestControl
    {
        
        public UIPanelControlRightClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlRight";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIEmployeeEditorsViewCustom UIEmployeeEditorsViewCustom
        {
            get
            {
                if ((this.mUIEmployeeEditorsViewCustom == null))
                {
                    this.mUIEmployeeEditorsViewCustom = new UIEmployeeEditorsViewCustom(this);
                }
                return this.mUIEmployeeEditorsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeEditorsViewCustom mUIEmployeeEditorsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEmployeeEditorsViewCustom : DXTestControl
    {
        
        public UIEmployeeEditorsViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeEditorsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeEditorsView";
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIXscContentScrollableControl UIXscContentScrollableControl
        {
            get
            {
                if ((this.mUIXscContentScrollableControl == null))
                {
                    this.mUIXscContentScrollableControl = new UIXscContentScrollableControl(this);
                }
                return this.mUIXscContentScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscContentScrollableControl mUIXscContentScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIXscContentScrollableControl : DXScrollableControl
    {
        
        public UIXscContentScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            #endregion
        }
        
        #region Properties
        public UIGroupControlViewHostCustom UIGroupControlViewHostCustom
        {
            get
            {
                if ((this.mUIGroupControlViewHostCustom == null))
                {
                    this.mUIGroupControlViewHostCustom = new UIGroupControlViewHostCustom(this);
                }
                return this.mUIGroupControlViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlViewHostCustom mUIGroupControlViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGroupControlViewHostCustom : DXTestControl
    {
        
        public UIGroupControlViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControlViewHost";
            #endregion
        }
        
        #region Properties
        public UIGroupControlClient UIGroupControlClient
        {
            get
            {
                if ((this.mUIGroupControlClient == null))
                {
                    this.mUIGroupControlClient = new UIGroupControlClient(this);
                }
                return this.mUIGroupControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlClient mUIGroupControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGroupControlClient : DXTestControl
    {
        
        public UIGroupControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerOvertCustom UIEmployeeManagerOvertCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerOvertCustom == null))
                {
                    this.mUIEmployeeManagerOvertCustom = new UIEmployeeManagerOvertCustom(this);
                }
                return this.mUIEmployeeManagerOvertCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerOvertCustom mUIEmployeeManagerOvertCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEmployeeManagerOvertCustom : DXTestControl
    {
        
        public UIEmployeeManagerOvertCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerOvertimeCodeView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerOvertimeCodeView";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UIEOvertimeCodeLookUpEdit
        {
            get
            {
                if ((this.mUIEOvertimeCodeLookUpEdit == null))
                {
                    this.mUIEOvertimeCodeLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIEOvertimeCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eOvertimeCode";
                    this.mUIEOvertimeCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchLookUpEdit";
                    #endregion
                }
                return this.mUIEOvertimeCodeLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUIEOvertimeCodeLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : DXWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan - Innstillinger";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIGSTabControlTabList UIGSTabControlTabList
        {
            get
            {
                if ((this.mUIGSTabControlTabList == null))
                {
                    this.mUIGSTabControlTabList = new UIGSTabControlTabList(this);
                }
                return this.mUIGSTabControlTabList;
            }
        }
        
        public UIPaBottomClient UIPaBottomClient
        {
            get
            {
                if ((this.mUIPaBottomClient == null))
                {
                    this.mUIPaBottomClient = new UIPaBottomClient(this);
                }
                return this.mUIPaBottomClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGSTabControlTabList mUIGSTabControlTabList;
        
        private UIPaBottomClient mUIPaBottomClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSTabControlTabList : DXTestControl
    {
        
        public UIGSTabControlTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcData";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UIXtraTabPageClient UIXtraTabPageClient
        {
            get
            {
                if ((this.mUIXtraTabPageClient == null))
                {
                    this.mUIXtraTabPageClient = new UIXtraTabPageClient(this);
                }
                return this.mUIXtraTabPageClient;
            }
        }
        #endregion
        
        #region Fields
        private UIXtraTabPageClient mUIXtraTabPageClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIXtraTabPageClient : DXTestControl
    {
        
        public UIXtraTabPageClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpConfiguration";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIGSPanelControlClient UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGSPanelControlClient mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient : DXTestControl
    {
        
        public UIGSPanelControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paCenter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UIGSLookUpEditLookUpEdit
        {
            get
            {
                if ((this.mUIGSLookUpEditLookUpEdit == null))
                {
                    this.mUIGSLookUpEditLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIGSLookUpEditLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leDisplayStartDate";
                    this.mUIGSLookUpEditLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    #endregion
                }
                return this.mUIGSLookUpEditLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUIGSLookUpEditLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaBottomClient : DXTestControl
    {
        
        public UIPaBottomClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paBottom";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanYTELSEArbWindow : DXWindow
    {
        
        public UIArbeidsplanYTELSEArbWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIF1Cell
        {
            get
            {
                if ((this.mUIF1Cell == null))
                {
                    this.mUIF1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]97[Column]RosterCell_41";
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]93[Column]RosterCell_4";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]98[Column]RosterCell_0";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIF1Cell;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIKopierMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIKopierMenuBaseButtonItem == null))
                {
                    this.mUIKopierMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIKopierMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[7]";
                    this.mUIKopierMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIKopierMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIBarButtonItemLink10MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink10MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink10MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink10MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[10]";
                    this.mUIBarButtonItemLink10MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink10MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIKopierMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIBarButtonItemLink10MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILiminnWindow : DXWindow
    {
        
        public UILiminnWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Lim inn...";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Lim inn...");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Lim inn...");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanYTELSEArbWindow1 : DXWindow
    {
        
        public UIArbeidsplanYTELSEArbWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient1 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient1(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public DXDockPanel UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new DXDockPanel(this);
                    #region Search Criteria
                    this.mUIDpnlVisualizationDockPanel.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
                    this.mUIDpnlVisualizationDockPanel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
                    this.mUIDpnlVisualizationDockPanel.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient1 mUIPnlRosterPlanClient;
        
        private DXDockPanel mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient1 : DXTestControl
    {
        
        public UIPnlRosterPlanClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable1 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable1(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable1 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable1 : DXGrid
    {
        
        public UIGcRosterPlanTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIDCell
        {
            get
            {
                if ((this.mUIDCell == null))
                {
                    this.mUIDCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]90[Column]RosterCell_0";
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell;
            }
        }
        
        public DXCell UIF1Cell
        {
            get
            {
                if ((this.mUIF1Cell == null))
                {
                    this.mUIF1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]97[Column]RosterCell_41";
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIDCell;
        
        private DXCell mUIF1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanHjelpeplaWindow : DXWindow
    {
        
        public UIArbeidsplanHjelpeplaWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient2 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient2(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient2 mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient2 : DXTestControl
    {
        
        public UIPnlRosterPlanClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable2 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable2(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable2 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable2 : DXGrid
    {
        
        public UIGcRosterPlanTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_27";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient3 UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient3(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient3 mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient3 : DXTestControl
    {
        
        public UIPnlRosterPlanClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable3 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable3(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable3 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable3 : DXGrid
    {
        
        public UIGcRosterPlanTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIRisethVidarCell
        {
            get
            {
                if ((this.mUIRisethVidarCell == null))
                {
                    this.mUIRisethVidarCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRisethVidarCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]105[Column]Col_EmployeeName";
                    this.mUIRisethVidarCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRisethVidarCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRisethVidarCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIRisethVidarCell;
        #endregion
    }
}
