// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _020_Test_Arbeidsplan_Doegnrytmeplan
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v19_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddDescription - Use 'AddDescriptionParams' to pass parameters into this method.
        /// </summary>
        public void AddDescription()
        {
            #region Variable Declarations
            DXTextEdit uIECommentEdit = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIECommentEdit;
            #endregion

            // Type 'Ny plan pga omstrukturering i organisasjonen.' in 'eComment' text box
            //ValueAsString
            uIECommentEdit.ValueAsString = this.AddDescriptionParams.UIECommentEditValueAsString;
        }
        
        /// <summary>
        /// AddFrokostTask - Use 'AddFrokostTaskParams' to pass parameters into this method.
        /// </summary>
        public void AddFrokostTaskRequirements()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell;
            DXCell uIItemCell16 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell16;
            DXGrid uIGcItemsTable = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow0ColumnColumnHandEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumnColumnHandEdit;
            DXCell uIItemCell9 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell9;
            DXTextEdit uIRow0ColumnColumnHandEdit2 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumnColumnHandEdit2;
            DXCell uIItemCell18 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell18;
            DXCell uIItemCell23 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell23;
            DXTextEdit uIRow0ColumnColumnHandEdit3 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumnColumnHandEdit3;
            #endregion

            // Move cell to cell
            uIItemCell16.EnsureClickable(new Point(22, 8));
            Mouse.StartDragging(uIItemCell, new Point(83, 6));
            Mouse.StopDragging(uIItemCell16, new Point(22, 8));

            // Type '{NumPad2}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddFrokostTaskParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow0ColumnColumnHandEdit, this.AddFrokostTaskParams.UIRow0ColumnColumnHandEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell9, new Point(16, 13));

            // Type '{NumPad1}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddFrokostTaskParams.UIGcItemsTableSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in '[Row]0[Column]ColumnHandle25' text box
            Keyboard.SendKeys(uIRow0ColumnColumnHandEdit2, this.AddFrokostTaskParams.UIRow0ColumnColumnHandEdit2SendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell23.EnsureClickable(new Point(16, 8));
            Mouse.StartDragging(uIItemCell18, new Point(17, 13));
            Mouse.StopDragging(uIItemCell23, new Point(16, 8));

            // Type '{NumPad2}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddFrokostTaskParams.UIGcItemsTableSendKeys2, ModifierKeys.None);

            // Type '{Enter}' in '[Row]0[Column]ColumnHandle26' text box
            Keyboard.SendKeys(uIRow0ColumnColumnHandEdit3, this.AddFrokostTaskParams.UIRow0ColumnColumnHandEdit3SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddLunchTask - Use 'AddLunchTaskParams' to pass parameters into this method.
        /// </summary>
        public void AddLunchTaskRequirements()
        {
            #region Variable Declarations
            DXCell uIItemCell8 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell8;
            DXGrid uIGcItemsTable = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow1ColumnColumnHandEdit2 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow1ColumnColumnHandEdit2;
            DXCell uIItemCell17 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell17;
            DXTextEdit uIRow1ColumnColumnHandEdit11 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow1ColumnColumnHandEdit11;
            DXCell uIItemCell21 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell21;
            DXTextEdit uIRow1ColumnColumnHandEdit1 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow1ColumnColumnHandEdit1;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell8, new Point(21, 7));

            // Type '{NumPad1}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddLunchTaskParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]1[Column]ColumnHandle19' text box
            Keyboard.SendKeys(uIRow1ColumnColumnHandEdit2, this.AddLunchTaskParams.UIRow1ColumnColumnHandEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell17, new Point(16, 8));

            // Type '{NumPad1}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddLunchTaskParams.UIGcItemsTableSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in '[Row]1[Column]ColumnHandle21' text box
            Keyboard.SendKeys(uIRow1ColumnColumnHandEdit11, this.AddLunchTaskParams.UIRow1ColumnColumnHandEdit11SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell21, new Point(23, 9));

            // Type '{NumPad1}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddLunchTaskParams.UIGcItemsTableSendKeys2, ModifierKeys.None);

            // Type '{Enter}' in '[Row]1[Column]ColumnHandle23' text box
            Keyboard.SendKeys(uIRow1ColumnColumnHandEdit1, this.AddLunchTaskParams.UIRow1ColumnColumnHandEdit1SendKeys, ModifierKeys.None);
        }
        
        public void EditMed1TaskRequirements()
        {
            #region Variable Declarations
            DXCell uIItemCell2 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell2;
            DXCell uIItemCell11 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell11;
            DXMenuBaseButtonItem uIBarButtonItemLink3MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink3MenuBaseButtonItem;
            DXCell uIItemCell = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell;
            DXTextEdit uIRow2147483647ColumngEdit = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable.UIRow2147483647ColumngEdit;
            DXGrid uIGcRequirementTable = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable;
            DXCell uIItemCell1 = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell1;
            #endregion
            
            // Move cell to cell
            uIItemCell11.EnsureClickable(new Point(12, 7));
            Mouse.StartDragging(uIItemCell2, new Point(22, 11));
            Mouse.StopDragging(uIItemCell11, new Point(12, 7));

            // Right-Click cell
            Mouse.Click(uIItemCell11, MouseButtons.Right, ModifierKeys.None, new Point(12, 7));

            // Click 'BarButtonItemLink[3]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink3MenuBaseButtonItem, new Point(74, 9));

            // Click cell
            Mouse.Click(uIItemCell, new Point(45, 9));

            //UICommon.UIMapVS2017.SetTotalTaskRequirements("2");

            // Type '2' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToTaskParams.UIRow2147483647ColumngEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToTaskParams.UIGcRequirementTableSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell1, new Point(172, 8));

            Keyboard.SendKeys("{DOWN 12}{ENTER}");
        }
        /// <summary>
        /// AddMed1Task - Use 'AddMed1TaskParams' to pass parameters into this method.
        /// </summary>
        public void AddMed1TaskRequirements()
        {
            #region Variable Declarations
            DXCell uIItemCell2 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell2;
            DXCell uIItemCell11 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell11;
            DXGrid uIGcItemsTable = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow1ColumnColumnHandEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow1ColumnColumnHandEdit;
            DXCell uIItemCell21 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell21;
            DXCell uIItemCell3 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell3;
            DXTextEdit uIRow1ColumnColumnHandEdit1 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow1ColumnColumnHandEdit1;
            #endregion
            
            // Move cell to cell
            uIItemCell11.EnsureClickable(new Point(21, 7));
            Mouse.StartDragging(uIItemCell2, new Point(21, 8));
            Mouse.StopDragging(uIItemCell11, new Point(21, 7));

            // Type '2' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddMed1TaskParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]1[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow1ColumnColumnHandEdit, this.AddMed1TaskParams.UIRow1ColumnColumnHandEditSendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell3.EnsureClickable(new Point(10, 6));
            Mouse.StartDragging(uIItemCell21, new Point(17, 11));
            Mouse.StopDragging(uIItemCell3, new Point(10, 6));

            // Type '1' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddMed1TaskParams.UIGcItemsTableSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in '[Row]1[Column]ColumnHandle23' text box
            Keyboard.SendKeys(uIRow1ColumnColumnHandEdit1, this.AddMed1TaskParams.UIRow1ColumnColumnHandEdit1SendKeys, ModifierKeys.None);
        }


        /// <summary>
        /// AddMed2Task - Use 'AddMed2TaskParams' to pass parameters into this method.
        /// </summary>
        public void AddMed2TaskRequirements()
        {
            #region Variable Declarations
            DXCell uIItemCell5 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell5;
            DXCell uIItemCell13 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell13;
            DXGrid uIGcItemsTable = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow3ColumnColumnHandEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow3ColumnColumnHandEdit;
            #endregion
            
            // Move cell to cell
            uIItemCell13.EnsureClickable(new Point(17, 6));
            Mouse.StartDragging(uIItemCell5, new Point(18, 9));
            Mouse.StopDragging(uIItemCell13, new Point(17, 6));

            // Type '1' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddMed2TaskParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]3[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow3ColumnColumnHandEdit, this.AddMed2TaskParams.UIRow3ColumnColumnHandEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddMed3Task - Use 'AddMed3TaskParams' to pass parameters into this method.
        /// </summary>
        public void AddMed3TaskRequirements()
        {
            #region Variable Declarations
            DXCell uIItemCell6 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell6;
            DXCell uIItemCell14 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell14;
            DXGrid uIGcItemsTable = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow4ColumnColumnHandEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow4ColumnColumnHandEdit;
            #endregion

            // Move cell to cell
            uIItemCell14.EnsureClickable(new Point(17, 10));
            Mouse.StartDragging(uIItemCell6, new Point(76, 11));
            Mouse.StopDragging(uIItemCell14, new Point(17, 10));

            // Type '1' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddMed3TaskParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]4[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow4ColumnColumnHandEdit, this.AddMed3TaskParams.UIRow4ColumnColumnHandEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddMiddagTask - Use 'AddMiddagTaskParams' to pass parameters into this method.
        /// </summary>
        public void AddMiddagTaskRequirements()
        {
            #region Variable Declarations
            DXCell uIItemCell4 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell4;
            DXCell uIItem2Cell1 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItem2Cell1;
            DXGrid uIGcItemsTable = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow2ColumnColumnHandEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow2ColumnColumnHandEdit;
            DXCell uIItemCell20 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell20;
            DXTextEdit uIRow2ColumnColumnHandEdit1 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow2ColumnColumnHandEdit1;
            DXCell uIItemCell110 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell110;
            DXCell uIItemCell24 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell24;
            DXTextEdit uIRow2ColumnColumnHandEdit2 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow2ColumnColumnHandEdit2;
            #endregion

            // Move cell to '2' cell
            uIItem2Cell1.EnsureClickable(new Point(11, 5));
            Mouse.StartDragging(uIItemCell4, new Point(22, 7));
            Mouse.StopDragging(uIItem2Cell1, new Point(11, 5));

            // Type '{NumPad3}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddMiddagTaskParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]2[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow2ColumnColumnHandEdit, this.AddMiddagTaskParams.UIRow2ColumnColumnHandEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell20, new Point(15, 9));

            // Type '{NumPad2}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddMiddagTaskParams.UIGcItemsTableSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in '[Row]2[Column]ColumnHandle25' text box
            Keyboard.SendKeys(uIRow2ColumnColumnHandEdit1, this.AddMiddagTaskParams.UIRow2ColumnColumnHandEdit1SendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell24.EnsureClickable(new Point(13, 10));
            Mouse.StartDragging(uIItemCell110, new Point(19, 7));
            Mouse.StopDragging(uIItemCell24, new Point(13, 10));

            // Type '{NumPad3}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddMiddagTaskParams.UIGcItemsTableSendKeys2, ModifierKeys.None);

            // Type '{Enter}' in '[Row]2[Column]ColumnHandle26' text box
            Keyboard.SendKeys(uIRow2ColumnColumnHandEdit2, this.AddMiddagTaskParams.UIRow2ColumnColumnHandEdit2SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddNewLunchTask - Use 'AddNewLunchTaskParams' to pass parameters into this method.
        /// </summary>
        public void AddNewLunchTaskRequirements()
        {
            #region Variable Declarations
            DXCell uIItemCell17 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell17;
            DXCell uIItemCell3 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell3;
            DXGrid uIGcItemsTable = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXCell uIItemCell10 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell10;
            DXCell uIItemCell19 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell19;
            DXTextEdit uIRow1ColumnColumnHandEdit3 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow1ColumnColumnHandEdit3;
            #endregion

            // Move cell to cell
            uIItemCell3.EnsureClickable(new Point(21, 6));
            Mouse.StartDragging(uIItemCell17, new Point(16, 11));
            Mouse.StopDragging(uIItemCell3, new Point(21, 6));

            // Type '{Delete}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddNewLunchTaskParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell19.EnsureClickable(new Point(19, 9));
            Mouse.StartDragging(uIItemCell10, new Point(40, 9));
            Mouse.StopDragging(uIItemCell19, new Point(19, 9));

            // Type '{NumPad2}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddNewLunchTaskParams.UIGcItemsTableSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in '[Row]1[Column]ColumnHandle26' text box
            Keyboard.SendKeys(uIRow1ColumnColumnHandEdit3, this.AddNewLunchTaskParams.UIRow1ColumnColumnHandEdit3SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddRapport3Task - Use 'AddRapport3TaskParams' to pass parameters into this method.
        /// </summary>
        public void AddRapport3TaskRequirements()
        {
            #region Variable Declarations
           DXCell uIItemCell7 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell7;
            DXCell uIItemCell15 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell15;
            DXGrid uIGcItemsTable = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow5ColumnColumnHandEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow5ColumnColumnHandEdit;
            #endregion
            
            // Move cell to cell
            uIItemCell15.EnsureClickable(new Point(16, 5));
            Mouse.StartDragging(uIItemCell7, new Point(32, 8));
            Mouse.StopDragging(uIItemCell15, new Point(16, 5));

            // Type '1' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddRapport3TaskParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]5[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow5ColumnColumnHandEdit, this.AddRapport3TaskParams.UIRow5ColumnColumnHandEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddReport1Task - Use 'AddReport1TaskParams' to pass parameters into this method.
        /// </summary>
        public void AddTaskToDayRythmplanLayer(string task, bool minReq, string row = "0", bool replace = false)
        {
            UICommon.UIMapVS2017.AddTaskToDayRythmplanLayer(row, task, replace);

            if(minReq)
            CheckMinRequirements(row);
        }

        public void CheckMinRequirements(string line, bool check = true)
        {
            DXCheckBox uICheckEditCheckBox = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UICheckEditCheckBox;
            uICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsCheckEdit[View]gvItems[Row]"+ line + "[Column]cInBook";

            uICheckEditCheckBox.Checked = check;
        }

        public void AddRappport1TaskRequirements()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell;
            DXCell uIItemCell1 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell1;
            DXGrid uIGcItemsTable = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow0ColumnColumnHandEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumnColumnHandEdit;
            #endregion

            // Move cell to cell
            uIItemCell1.EnsureClickable(new Point(16, 7));
            Mouse.StartDragging(uIItemCell, new Point(11, 10));
            Mouse.StopDragging(uIItemCell1, new Point(16, 7));

            // Type '1' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddReport1TaskParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow0ColumnColumnHandEdit, this.AddReport1TaskParams.UIRow0ColumnColumnHandEditSendKeys, ModifierKeys.None);
        }

        /// <summary>
        /// AddRequirementsToMiddagTask - Use 'AddRequirementsToMiddagTaskParams' to pass parameters into this method.
        /// </summary>
        public void EditRequirementsToMiddagTask()
        {
            #region Variable Declarations
            DXCell uIItemCell4 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell4;
            DXCell uIItem2Cell1 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItem2Cell1;
            DXMenuBaseButtonItem uIBarButtonItemLink3MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink3MenuBaseButtonItem;
            DXCell uIItemCell = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell;
            DXTextEdit uIRow2147483647ColumngEdit = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIRow2147483647ColumngEdit;
            DXGrid uIGcRequirementTable = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable;
            DXCell uIItemCell1 = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell1;
            DXWindow uIPopupLookUpEditFormWindow = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIRow0ColumngcolCompetLookUpEdit.UIPopupLookUpEditFormWindow;
            DXCell uIItemCell2 = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell2;
            DXWindow uIPopupLookUpEditFormWindow1 = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIRow1ColumngcolGroupLookUpEdit.UIPopupLookUpEditFormWindow;
            DXLookUpEdit uIRow1ColumngcolGroupLookUpEdit = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIRow1ColumngcolGroupLookUpEdit;
            DXCell uIItemCell3 = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell3;
            DXWindow uIPopupLookUpEditFormWindow2 = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIRow2ColumngcolPosCatLookUpEdit.UIPopupLookUpEditFormWindow;
            #endregion

            // Move cell to '2' cell
            uIItem2Cell1.EnsureClickable(new Point(22, 8));
            Mouse.StartDragging(uIItemCell4, new Point(23, 9));
            Mouse.StopDragging(uIItem2Cell1, new Point(22, 8));

            // Right-Click '2' cell
            Mouse.Click(uIItem2Cell1, MouseButtons.Right, ModifierKeys.None, new Point(22, 9));

            // Click 'BarButtonItemLink[3]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink3MenuBaseButtonItem, new Point(73, 9));

            // Click cell
            Mouse.Click(uIItemCell, new Point(41, 11));

            // Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToMiddagTaskParams.UIRow2147483647ColumngEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToMiddagTaskParams.UIGcRequirementTableSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell1, new Point(173, 8));

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow, new Point(103, 178));

            // Click cell
            Mouse.Click(uIItemCell, new Point(45, 8));

            // Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToMiddagTaskParams.UIRow2147483647ColumngEditSendKeys1, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToMiddagTaskParams.UIGcRequirementTableSendKeys1, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell2, new Point(172, 8));

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow1, new Point(152, 40));

            // Type '{Tab}' in '[Row]1[Column]gcolGroup' LookUpEdit
            Keyboard.SendKeys(uIRow1ColumngcolGroupLookUpEdit, this.AddRequirementsToMiddagTaskParams.UIRow1ColumngcolGroupLookUpEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell, new Point(40, 8));

            // Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToMiddagTaskParams.UIRow2147483647ColumngEditSendKeys2, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToMiddagTaskParams.UIGcRequirementTableSendKeys2, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell3, new Point(174, 9));

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow2, new Point(101, 116));

            Keyboard.SendKeys("{DOWN 2}{ENTER}");
        }
                
        /// <summary>
        /// AddRequirementsToVisittTask - Use 'AddRequirementsToVisittTaskParams' to pass parameters into this method.
        /// </summary>
        public void AddRequirementsToVisittTask()
        {
            #region Variable Declarations
            DXCell uIItemCell4 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell4;
            DXCell uIItemCell12 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell12;
            DXMenuBaseButtonItem uIBarButtonItemLink3MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink3MenuBaseButtonItem;
            DXCell uIItemCell = this.UISettekravtilpersonerWindow1.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell;
            DXTextEdit uIRow2147483647ColumngEdit = this.UISettekravtilpersonerWindow1.UIGrpRequirementsClient.UIGcRequirementTable.UIRow2147483647ColumngEdit;
            DXGrid uIGcRequirementTable = this.UISettekravtilpersonerWindow1.UIGrpRequirementsClient.UIGcRequirementTable;
            DXCell uIItemCell1 = this.UISettekravtilpersonerWindow1.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell1;
            #endregion

            // Move cell to cell
            uIItemCell12.EnsureClickable(new Point(13, 7));
            Mouse.StartDragging(uIItemCell4, new Point(27, 7));
            Mouse.StopDragging(uIItemCell12, new Point(13, 7));

            // Right-Click cell
            Mouse.Click(uIItemCell12, MouseButtons.Right, ModifierKeys.None, new Point(13, 7));

            // Click 'BarButtonItemLink[3]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink3MenuBaseButtonItem, new Point(57, 10));

            // Click cell
            Mouse.Click(uIItemCell, new Point(43, 9));         

            // Type '{NumPad2}' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToVisittTaskParams.UIRow2147483647ColumngEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToVisittTaskParams.UIGcRequirementTableSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell1, new Point(176, 9));

            Keyboard.SendKeys("{DOWN 2}{ENTER}");

            UICommon.UIMapVS2017.CheckReserved("0");
        }
        
        /// <summary>
        /// AddStell1Task - Use 'AddStell1TaskParams' to pass parameters into this method.
        /// </summary>
        public void AddStell1TaskRequirements()
        {
            #region Variable Declarations
            DXCell uIItem0730Cell = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItem0730Cell;
            DXTextEdit uIRow0ColumncFromTimeEEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumncFromTimeEEdit;
            DXTextEdit uIRow0ColumncToTimeEdiEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumncToTimeEdiEdit;
            DXCell uIItemCell = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell;
            DXCell uIItemCell16 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell16;
            DXGrid uIGcItemsTable = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow0ColumnColumnHandEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumnColumnHandEdit;
            DXCell uIItemCell22 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell22;
            DXCell uIItemCell1 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell1;
            DXTextEdit uIRow0ColumnColumnHandEdit1 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumnColumnHandEdit1;
            #endregion

            // Click '07.30' cell
            Mouse.Click(uIItem0730Cell, new Point(14, 9));

            // Type '08:00{Tab}' in '[Row]0[Column]cFromTimeEditField' text box
            Keyboard.SendKeys(uIRow0ColumncFromTimeEEdit, this.AddStell1TaskParams.UIRow0ColumncFromTimeEEditSendKeys, ModifierKeys.None);

            // Type '08:30{Tab}' in '[Row]0[Column]cToTimeEditField' text box
            Keyboard.SendKeys(uIRow0ColumncToTimeEdiEdit, this.AddStell1TaskParams.UIRow0ColumncToTimeEdiEditSendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell16.EnsureClickable(new Point(18, 6));
            Mouse.StartDragging(uIItemCell, new Point(22, 12));
            Mouse.StopDragging(uIItemCell16, new Point(18, 6));

            // Type '{NumPad1}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddStell1TaskParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow0ColumnColumnHandEdit, this.AddStell1TaskParams.UIRow0ColumnColumnHandEditSendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell1.EnsureClickable(new Point(12, 7));
            Mouse.StartDragging(uIItemCell22, new Point(20, 8));
            Mouse.StopDragging(uIItemCell1, new Point(12, 7));

            // Type '1' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddStell1TaskParams.UIGcItemsTableSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in '[Row]0[Column]ColumnHandle22' text box
            Keyboard.SendKeys(uIRow0ColumnColumnHandEdit1, this.AddStell1TaskParams.UIRow0ColumnColumnHandEdit1SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddVisittTask - Use 'AddVisittTaskParams' to pass parameters into this method.
        /// </summary>
        public void AddVisittTaskRequirements()
        {
            #region Variable Declarations
           DXCell uIItemCell4 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell4;
            DXCell uIItemCell12 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell12;
            DXGrid uIGcItemsTable = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow2ColumnColumnHandEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow2ColumnColumnHandEdit;
            #endregion

            // Move cell to cell
            uIItemCell12.EnsureClickable(new Point(6, 5));
            Mouse.StartDragging(uIItemCell4, new Point(18, 6));
            Mouse.StopDragging(uIItemCell12, new Point(6, 5));

            // Type '2' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddVisittTaskParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]2[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow2ColumnColumnHandEdit, this.AddVisittTaskParams.UIRow2ColumnColumnHandEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// CheckDayRosterplanNameIsEmpty - Use 'CheckDayRosterplanNameIsEmptyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDayRosterplanNameIsEmpty()
        {
            #region Variable Declarations
            DXTextEdit uIENameEdit = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENameEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'eName' text box equals ''
            Assert.AreEqual(this.CheckDayRosterplanNameIsEmptyExpectedValues.UIENameEditValueAsString, uIENameEdit.ValueAsString, "Navnefeltet er ikke tom");
        }
        
        /// <summary>
        /// CheckDraft - Use 'CheckDraftParams' to pass parameters into this method.
        /// </summary>
        public void CheckDraft()
        {
            #region Variable Declarations
            DXCheckBox uIChkDraftCheckBox = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIChkDraftCheckBox;
            #endregion

            // Select 'chkDraft' check box
            uIChkDraftCheckBox.Checked = this.CheckDraftParams.UIChkDraftCheckBoxChecked;
        }
        
        /// <summary>
        /// CheckForDraft - Use 'CheckForDraftExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckForDraft()
        {
            #region Variable Declarations
            DXCheckBox uIChkDraftCheckBox = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIChkDraftCheckBox;
            #endregion

            // Verify that the 'Checked' property of 'chkDraft' check box equals 'True'
            Assert.AreEqual(this.CheckForDraftExpectedValues.UIChkDraftCheckBoxChecked, uIChkDraftCheckBox.Checked, "Kladd er ikke huket av");
        }
        
        /// <summary>
        /// CheckLayerInfo_step_26 - Use 'CheckLayerInfo_step_26ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLayerInfo_step_26()
        {
            #region Variable Declarations
            DXCell uISykepleierCell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UISykepleierCell;
            DXCell uIItem10012022Cell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIItem10012022Cell;
            DXCell uIItem16012022Cell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIItem16012022Cell;
            DXCell uIRullerertildatoCell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIRullerertildatoCell;
            DXCell uIItem01052022Cell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIItem01052022Cell;
            DXCell uIItilleggCell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIItilleggCell;
            DXCell uISykepleierCell1 = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UISykepleierCell1;
            DXCell uIItem03012022Cell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIItem03012022Cell;
            DXCell uIItem09012022Cell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIItem09012022Cell;
            DXCell uIRullererutplanCell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIRullererutplanCell;
            DXCell uIItemCell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIItemCell;
            DXCell uIItilleggCell1 = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIItilleggCell1;
            #endregion

            // Verify that the 'ValueAsString' property of 'Sykepleier' cell equals 'Hjelpepleier'
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UISykepleierCellValueAsString, uISykepleierCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '10.01.2022' cell equals '2022-01-10'
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UIItem10012022CellValueAsString, uIItem10012022Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '16.01.2022' cell equals '2022-01-16'
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UIItem16012022CellValueAsString, uIItem16012022Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Rullerer til dato' cell equals 'Rullerer til dato'
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UIRullerertildatoCellValueAsString, uIRullerertildatoCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '01.05.2022' cell equals '2022-05-01'
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UIItem01052022CellValueAsString, uIItem01052022Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'I tillegg' cell equals 'I tillegg'
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UIItilleggCellValueAsString, uIItilleggCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Sykepleier' cell equals 'Sykepleier'
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UISykepleierCell1ValueAsString, uISykepleierCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of '03.01.2022' cell equals '2022-01-03'
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UIItem03012022CellValueAsString, uIItem03012022Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '09.01.2022' cell equals '2022-01-09'
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UIItem09012022CellValueAsString, uIItem09012022Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Rullerer ut plan' cell equals 'Rullerer ut plan'
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UIRullererutplanCellValueAsString, uIRullererutplanCell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'I tillegg' cell equals 'I tillegg'
            Assert.AreEqual(this.CheckLayerInfo_step_26ExpectedValues.UIItilleggCell1ValueAsString, uIItilleggCell1.ValueAsString);
        }
        
        /// <summary>
        /// CheckMed1ReqDetails - Use 'CheckMed1ReqDetailsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckMed1ReqDetails()
        {
            #region Variable Declarations
            DXCell uIItem2Cell = this.UISettekravtilpersonerWindow2.UIGrpRequirementsClient.UIGcRequirementTable.UIItem2Cell;
            DXCell uIT1Type1Cell = this.UISettekravtilpersonerWindow2.UIGrpRequirementsClient.UIGcRequirementTable.UIT1Type1Cell;
            #endregion

            // Verify that the 'ValueAsString' property of '2' cell equals '2'
            Assert.AreEqual(this.CheckMed1ReqDetailsExpectedValues.UIItem2CellValueAsString, uIItem2Cell.ValueAsString, "Feil Antall");

            // Verify that the 'Text' property of 'T1 - Type 1' cell equals 'T1 - Type 1'
            Assert.AreEqual(this.CheckMed1ReqDetailsExpectedValues.UIT1Type1CellText, uIT1Type1Cell.Text, "Feil Kompetanse");
        }
        
        /// <summary>
        /// CheckOkButtonDisabled - Use 'CheckOkButtonDisabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOkButtonDisabled()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIDøgnrytmeplanWindow.UIPaBottomPanelClient.UIOKButton;
            #endregion

            // Verify that the 'Enabled' property of 'Ok' button equals 'False'
            Assert.AreEqual(this.CheckOkButtonDisabledExpectedValues.UIOKButtonEnabled, uIOKButton.Enabled, "Okknappen er tilgjengelig");
        }
        
        /// <summary>
        /// CheckRegstatusHasError - Use 'CheckRegstatusHasErrorExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRegstatusHasError()
        {
            #region Variable Declarations
            DXPopupEdit uILnkDetailPopupEdit = this.UIDøgnrytmeplanWindow.UIPaHeaderPanelClient.UILnkDetailPopupEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals '1 stk. meldinger (klikk her for detaljer)'
            Assert.AreEqual(this.CheckRegstatusHasErrorExpectedValues.UILnkDetailPopupEditValueAsString, uILnkDetailPopupEdit.ValueAsString, "Uventet registreringsstatus");
        }
        
        /// <summary>
        /// CheckRythmLayerDays - Use 'CheckRythmLayerDaysExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRythmLayerDays()
        {
            #region Variable Declarations
            DXTextEdit uIENumber1Edit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENumber1Edit;
            #endregion

            // Verify that the 'ValueAsString' property of 'eNumber[1]' text box equals '7'
            Assert.AreEqual(this.CheckRythmLayerDaysExpectedValues.UIENumber1EditValueAsString, uIENumber1Edit.ValueAsString, "Feil antall dager");
        }
        
        /// <summary>
        /// CheckRythmLayerToDate - Use 'CheckRythmLayerToDateExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRythmLayerToDate()
        {
            #region Variable Declarations
            DXDateTimePicker uIPceDateDateTimeEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIDtCalculatedToDateCustom.UIPceDateDateTimeEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2022-09-01'
            Assert.AreEqual(this.CheckRythmLayerToDateExpectedValues.UIPceDateDateTimeEditValueAsString, uIPceDateDateTimeEdit.ValueAsString, "Feil tildato");
        }
        
        /// <summary>
        /// CheckRythmLayerType - Use 'CheckRythmLayerTypeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRythmLayerType()
        {
            #region Variable Declarations
            DXLookUpEdit uIDrdLayerTypeLookUpEdit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIDrdLayerTypeLookUpEdit;
            #endregion

            // Verify that the 'Text' property of 'drdLayerType' LookUpEdit equals 'Lag kommer i tillegg til lag over'
            Assert.AreEqual(this.CheckRythmLayerTypeExpectedValues.UIDrdLayerTypeLookUpEditText, uIDrdLayerTypeLookUpEdit.Text, "Feil type lag");
        }
        
        /// <summary>
        /// CheckStell1TaskDuration - Use 'CheckStell1TaskDurationExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckStell1TaskDuration()
        {
            #region Variable Declarations
            DXCell uIItem30mCell = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItem30mCell;
            #endregion

            // Verify that the 'ValueAsString' property of '30m' cell equals '00:30:00'
            Assert.AreEqual(this.CheckStell1TaskDurationExpectedValues.UIItem30mCellValueAsString, uIItem30mCell.ValueAsString, "Feil varighet");
        }
        
        /// <summary>
        /// CheckSykelpeierLayerPosition - Use 'CheckSykelpeierLayerPositionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSykelpeierLayerPosition()
        {
            #region Variable Declarations
            DXCell uISykepleierCell1 = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UISykepleierCell1;
            #endregion

            // Verify that the 'Name' property of 'Sykepleier' cell equals 'gcPlanGridControlCell[View]gvPlan[Row]1[Column]gcName'
            Assert.AreEqual(this.CheckSykelpeierLayerPositionExpectedValues.UISykepleierCell1Name, uISykepleierCell1.Name);

            // Verify that the 'ValueAsString' property of 'Sykepleier' cell equals 'Sykepleier'
            Assert.AreEqual(this.CheckSykelpeierLayerPositionExpectedValues.UISykepleierCell1ValueAsString, uISykepleierCell1.ValueAsString, "Laget(Sykelpeier) er feil plassert");
        }
        
        /// <summary>
        /// CheckToDateRotate4Times - Use 'CheckToDateRotate4TimesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckToDateRotate4Times()
        {
            #region Variable Declarations
            DXTestControl uILblNrOfDaysCommentLabel = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UILblNrOfDaysCommentLabel;
            #endregion

            // Verify that the 'Text' property of 'lblNrOfDaysComment' label equals 'Til dato: 13.02.2022'
            Assert.AreEqual(this.CheckToDateRotate4TimesExpectedValues.UILblNrOfDaysCommentLabelText, uILblNrOfDaysCommentLabel.Text, "Feil tildato");
        }
        
        /// <summary>
        /// ClearShowSumDetails - Use 'ClearShowSumDetailsParams' to pass parameters into this method.
        /// </summary>
        public void ClearShowSumDetails()
        {
            #region Variable Declarations
            DXCheckBox uIChkShowDetailsCheckBox = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UITpSumClient.UIGsPanelControl1Client.UIPMainPanelClient.UIPTopPanelClient.UIChkShowDetailsCheckBox;
            #endregion

            // Clear 'chkShowDetails' check box
            uIChkShowDetailsCheckBox.Checked = this.ClearShowSumDetailsParams.UIChkShowDetailsCheckBoxChecked;
        }
        
        /// <summary>
        /// ClickCancelRequirements
        /// </summary>
        public void ClickCancelRequirements()
        {
            #region Variable Declarations
            DXButton uIAvbrytButton = this.UISettekravtilpersonerWindow2.UIGsPanelControl1Client.UIAvbrytButton;
            #endregion

            // Click '&Avbryt' button
            Mouse.Click(uIAvbrytButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickEditLayer
        /// </summary>
        public void ClickEditLayer()
        {
            UICommon.UIMapVS2017.ClickEditDayRythmLayer();
        }
        
        /// <summary>
        /// ClickNewLayer
        /// </summary>
        public void ClickNewLayer()
        {
            #region Variable Declarations
            DXButton uINyttlagButton = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaTopPanelClient.UINyttlagButton;
            #endregion

            // Click 'Nytt lag' button
            Mouse.Click(uINyttlagButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickOKAddLayer
        /// </summary>
        public void ClickOKAddLayer()
        {
            UICommon.UIMapVS2017.ClickOKDayRythmplanLayer();
        }
        
        /// <summary>
        /// ClickOKAddRequirementsToTask
        /// </summary>
        public void ClickOKAddRequirementsToTask()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UISettekravtilpersonerWindow.UIGsPanelControl1Client.UIOKButton;
            #endregion

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickOKSaveDayRythplan
        /// </summary>
        public void ClickOKSaveDayRythplan()
        {
            UICommon.UIMapVS2017.ClickOKDayRythmplan();
        }
        
        /// <summary>
        /// DeleteDayRythmplan
        /// </summary>
        public void DeleteDayRythmplan()
        {
            #region Variable Declarations
            DXButton uISlettButton = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UISlettButton;
            DXButton uIGSSimpleButtonButton = this.UIItemWindow1.UIGSSimpleButtonButton;
            #endregion

            // Click '&Slett' button
            Mouse.Click(uISlettButton, new Point(1, 1));

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DeleteDayRythmplanLayer
        /// </summary>
        public void DeleteDayRythmplanLayer()
        {
            #region Variable Declarations
            DXButton uISlettlagButton = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaTopPanelClient.UISlettlagButton;
            DXButton uIGSSimpleButtonButton = this.UIItemWindow1.UIGSSimpleButtonButton;
            #endregion

            // Click 'Slett lag' button
            Mouse.Click(uISlettlagButton, new Point(1, 1));

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DeleteEasterRequirements
        /// </summary>
        public void DeleteEasterRequirements()
        {
            #region Variable Declarations
            DXCell uIItemCell2 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell2;
            DXCell uIItemCell11 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell11;
            DXMenuBaseButtonItem uIBarButtonItemLink4MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink4MenuBaseButtonItem;
            DXCell uIItemCell4 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell4;
            DXCell uIItemCell12 = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell12;
            #endregion

            // Move cell to cell
            uIItemCell11.EnsureClickable(new Point(10, 9));
            Mouse.StartDragging(uIItemCell2, new Point(41, 9));
            Mouse.StopDragging(uIItemCell11, new Point(10, 9));

            // Right-Click cell
            Mouse.Click(uIItemCell11, MouseButtons.Right, ModifierKeys.None, new Point(20, 8));

            // Click 'BarButtonItemLink[4]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink4MenuBaseButtonItem, new Point(97, 9));

            // Move cell to cell
            uIItemCell12.EnsureClickable(new Point(10, 8));
            Mouse.StartDragging(uIItemCell4, new Point(16, 8));
            Mouse.StopDragging(uIItemCell12, new Point(10, 8));

            // Right-Click cell
            Mouse.Click(uIItemCell12, MouseButtons.Right, ModifierKeys.None, new Point(10, 8));

            // Click 'BarButtonItemLink[4]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink4MenuBaseButtonItem, new Point(73, 8));
        }
        
        /// <summary>
        /// DeleteRapport3LayerTask
        /// </summary>
        public void DeleteRapport3LayerTask()
        {
            #region Variable Declarations
            DXCell uIRAPPORT3Cell = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRAPPORT3Cell;
            DXMenuBaseButtonItem uIBarButtonItemLink1MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink1MenuBaseButtonItem;
            #endregion

            // Right-Click 'RAPPORT3' cell
            Mouse.Click(uIRAPPORT3Cell, MouseButtons.Right, ModifierKeys.None, new Point(59, 9));

            // Click 'BarButtonItemLink[1]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink1MenuBaseButtonItem, new Point(55, 10));
        }
        
        /// <summary>
        /// DeleteTasksMed2Med3
        /// </summary>
        public void DeleteTasksMed2Med3()
        {
            #region Variable Declarations
            DXCell uIMED3Cell = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIMED3Cell;
            DXMenuBaseButtonItem uIBarButtonItemLink1MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink1MenuBaseButtonItem;
            DXCell uIMED2Cell = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIMED2Cell;
            #endregion

            // Right-Click 'MED3' cell
            Mouse.Click(uIMED3Cell, MouseButtons.Right, ModifierKeys.None, new Point(54, 10));

            // Click 'BarButtonItemLink[1]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink1MenuBaseButtonItem, new Point(47, 9));

            // Right-Click 'MED2' cell
            Mouse.Click(uIMED2Cell, MouseButtons.Right, ModifierKeys.None, new Point(74, 12));

            // Click 'BarButtonItemLink[1]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink1MenuBaseButtonItem, new Point(64, 15));
        }
        
        /// <summary>
        /// DuplicateDayRythmplan
        /// </summary>
        public void DuplicateDayRythmplan()
        {
            #region Variable Declarations
            DXButton uIDupliserButton = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIDupliserButton;
            #endregion

            // Click '&Dupliser' button
            Mouse.Click(uIDupliserButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DuplicateLayer
        /// </summary>
        public void DuplicateLayer()
        {
            #region Variable Declarations
            DXButton uIDupliserlagButton = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaTopPanelClient.UIDupliserlagButton;
            #endregion

            // Click 'Dupliser lag' button
            Mouse.Click(uIDupliserlagButton, new Point(1, 1));
        }
                
        /// <summary>
        /// MoveSykepleierLayerDown
        /// </summary>
        public void MoveSykepleierLayerDown()
        {
            #region Variable Declarations
            DXCell uISykepleierCell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UISykepleierCell;
            DXButton uIBtnMoveLayerDownButton = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaTopPanelClient.UIBtnMoveLayerDownButton;
            #endregion

            // Click 'Sykepleier' cell
            Mouse.Click(uISykepleierCell, new Point(93, 5));

            // Click 'btnMoveLayerDown' button
            Mouse.Click(uIBtnMoveLayerDownButton, new Point(1, 1));
        }
        
        /// <summary>
        /// OpenExcelFromLayerTask
        /// </summary>
        public void OpenExcelFromLayerTask()
        {
            #region Variable Declarations
            DXColumnHeader uIColumnHandle18ColumnHeader = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIColumnHandle18ColumnHeader;
            DXMenuBaseButtonItem uIBarButtonItemLink5MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink5MenuBaseButtonItem;
            #endregion

            // Right-Click 'ColumnHandle18' column header
            Mouse.Click(uIColumnHandle18ColumnHeader, MouseButtons.Right, ModifierKeys.None, new Point(18, 8));

            // Click 'BarButtonItemLink[5]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink5MenuBaseButtonItem, new Point(75, 11));
        }
        
        /// <summary>
        /// OpenExcelFromSumTab
        /// </summary>
        public void OpenExcelFromSumTab()
        {
            #region Variable Declarations
            DXColumnHeader uIRosterCell_0ColumnHeader = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UITpSumClient.UIGsPanelControl1Client.UIPMainPanelClient.UIGcSumDemandTable.UIRosterCell_0ColumnHeader;
            DXMenuBaseButtonItem uIBarButtonItemLink5MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink5MenuBaseButtonItem;
            #endregion

            // Right-Click 'RosterCell_0' column header
            Mouse.Click(uIRosterCell_0ColumnHeader, MouseButtons.Right, ModifierKeys.None, new Point(16, 8));

            // Click 'BarButtonItemLink[5]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink5MenuBaseButtonItem, new Point(97, 12));
        }
        
        /// <summary>
        /// SelectFirstLayer
        /// </summary>
        public void SelectFirstLayer()
        {
            #region Variable Declarations
            DXCell uISykepleierCell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UISykepleierCell;
            #endregion

            // Click 'Sykepleier' cell
            Mouse.Click(uISykepleierCell, new Point(107, 7));
        }
        
        /// <summary>
        /// SelectLayerTask1
        /// </summary>
        public void SelectLayerTask1()
        {
            #region Variable Declarations
            DXCell uIRAPPORT1Cell = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRAPPORT1Cell;
            #endregion

            // Click 'RAPPORT1' cell
            Mouse.Click(uIRAPPORT1Cell, new Point(127, 7));
        }
        
        /// <summary>
        /// SelectLayerTask2
        /// </summary>
        public void SelectLayerTask2()
        {
            #region Variable Declarations
            DXCell uIMED1Cell = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIMED1Cell;
            #endregion

            // Click 'MED1' cell
            Mouse.Click(uIMED1Cell, new Point(127, 9));
        }
        
        /// <summary>
        /// SelectLayerTask3
        /// </summary>
        public void SelectLayerTask3()
        {
            #region Variable Declarations
            DXCell uIVISITTCell = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIVISITTCell;
            #endregion

            // Click 'VISITT' cell
            Mouse.Click(uIVISITTCell, new Point(128, 9));
        }
        
        /// <summary>
        /// SelectRotate4Times - Use 'SelectRotate4TimesParams' to pass parameters into this method.
        /// </summary>
        public void SelectRotate4Times()
        {
            #region Variable Declarations
            DXRadioGroup uIGsRotationRadioGroup = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIGsRotationRadioGroup;
            DXTextEdit uIENumber0Edit = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENumber0Edit;
            #endregion

            // Type '2' in 'gsRotation' RadioGroup
            //SelectedIndex
            uIGsRotationRadioGroup.SelectedIndex = this.SelectRotate4TimesParams.UIGsRotationRadioGroupSelectedIndex;

            // Type '4 [SelectionStart]0[SelectionLength]1' in 'eNumber[0]' text box
            //ValueAsString
            uIENumber0Edit.ValueAsString = this.SelectRotate4TimesParams.UIENumber0EditValueAsString;
        }
        
        /// <summary>
        /// SelectRotateWholePeriod - Use 'SelectRotateWholePeriodParams' to pass parameters into this method.
        /// </summary>
        public void SelectRotateWholePeriod()
        {
            #region Variable Declarations
            DXRadioGroup uIGsRotationRadioGroup = this.UIDøgnrytmelagWindow.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIGsRotationRadioGroup;
            #endregion

            // Type '3' in 'gsRotation' RadioGroup
            //SelectedIndex
            uIGsRotationRadioGroup.SelectedIndex = this.SelectRotateWholePeriodParams.UIGsRotationRadioGroupSelectedIndex;
        }
        
        /// <summary>
        /// SelectSecondLayer
        /// </summary>
        public void SelectSecondLayer()
        {
            #region Variable Declarations
            DXCell uISykepleierCell1 = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UISykepleierCell1;
            #endregion

            // Click 'Sykepleier' cell
            Mouse.Click(uISykepleierCell1, new Point(83, 10));
        }
        
        /// <summary>
        /// SelectShowSumDetails - Use 'SelectShowSumDetailsParams' to pass parameters into this method.
        /// </summary>
        public void SelectShowSumDetails()
        {
            #region Variable Declarations
            DXCheckBox uIChkShowDetailsCheckBox = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UITpSumClient.UIGsPanelControl1Client.UIPMainPanelClient.UIPTopPanelClient.UIChkShowDetailsCheckBox;
            #endregion

            // Select 'chkShowDetails' check box
            uIChkShowDetailsCheckBox.Checked = this.SelectShowSumDetailsParams.UIChkShowDetailsCheckBoxChecked;
        }
        
        /// <summary>
        /// SelectThirdLayer
        /// </summary>
        public void SelectThirdLayer()
        {
            #region Variable Declarations
            DXCell uIPåske2022Cell = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccLayerScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIPåske2022Cell;
            #endregion

            // Click 'Påske 2022' cell
            Mouse.Click(uIPåske2022Cell, new Point(80, 7));
        }
        
        /// <summary>
        /// UnCheckDraft - Use 'UnCheckDraftParams' to pass parameters into this method.
        /// </summary>
        public void UnCheckDraft()
        {
            #region Variable Declarations
            DXCheckBox uIChkDraftCheckBox = this.UIDøgnrytmeplanWindow.UIPaNavbarPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIChkDraftCheckBox;
            #endregion

            // Clear 'chkDraft' check box
            uIChkDraftCheckBox.Checked = this.UnCheckDraftParams.UIChkDraftCheckBoxChecked;
        }
        
        #region Properties
        public virtual AddDescriptionParams AddDescriptionParams
        {
            get
            {
                if ((this.mAddDescriptionParams == null))
                {
                    this.mAddDescriptionParams = new AddDescriptionParams();
                }
                return this.mAddDescriptionParams;
            }
        }
        
        public virtual AddFrokostTaskParams AddFrokostTaskParams
        {
            get
            {
                if ((this.mAddFrokostTaskParams == null))
                {
                    this.mAddFrokostTaskParams = new AddFrokostTaskParams();
                }
                return this.mAddFrokostTaskParams;
            }
        }
        
        public virtual AddLunchTaskParams AddLunchTaskParams
        {
            get
            {
                if ((this.mAddLunchTaskParams == null))
                {
                    this.mAddLunchTaskParams = new AddLunchTaskParams();
                }
                return this.mAddLunchTaskParams;
            }
        }
        
        public virtual AddMed1TaskParams AddMed1TaskParams
        {
            get
            {
                if ((this.mAddMed1TaskParams == null))
                {
                    this.mAddMed1TaskParams = new AddMed1TaskParams();
                }
                return this.mAddMed1TaskParams;
            }
        }
        
        public virtual AddMed2TaskParams AddMed2TaskParams
        {
            get
            {
                if ((this.mAddMed2TaskParams == null))
                {
                    this.mAddMed2TaskParams = new AddMed2TaskParams();
                }
                return this.mAddMed2TaskParams;
            }
        }
        
        public virtual AddMed3TaskParams AddMed3TaskParams
        {
            get
            {
                if ((this.mAddMed3TaskParams == null))
                {
                    this.mAddMed3TaskParams = new AddMed3TaskParams();
                }
                return this.mAddMed3TaskParams;
            }
        }
        
        public virtual AddMiddagTaskParams AddMiddagTaskParams
        {
            get
            {
                if ((this.mAddMiddagTaskParams == null))
                {
                    this.mAddMiddagTaskParams = new AddMiddagTaskParams();
                }
                return this.mAddMiddagTaskParams;
            }
        }
        
        public virtual AddNewLunchTaskParams AddNewLunchTaskParams
        {
            get
            {
                if ((this.mAddNewLunchTaskParams == null))
                {
                    this.mAddNewLunchTaskParams = new AddNewLunchTaskParams();
                }
                return this.mAddNewLunchTaskParams;
            }
        }
        
        public virtual AddRapport3TaskParams AddRapport3TaskParams
        {
            get
            {
                if ((this.mAddRapport3TaskParams == null))
                {
                    this.mAddRapport3TaskParams = new AddRapport3TaskParams();
                }
                return this.mAddRapport3TaskParams;
            }
        }
        
        public virtual AddReport1TaskParams AddReport1TaskParams
        {
            get
            {
                if ((this.mAddReport1TaskParams == null))
                {
                    this.mAddReport1TaskParams = new AddReport1TaskParams();
                }
                return this.mAddReport1TaskParams;
            }
        }
        
        public virtual AddRequirementsToMiddagTaskParams AddRequirementsToMiddagTaskParams
        {
            get
            {
                if ((this.mAddRequirementsToMiddagTaskParams == null))
                {
                    this.mAddRequirementsToMiddagTaskParams = new AddRequirementsToMiddagTaskParams();
                }
                return this.mAddRequirementsToMiddagTaskParams;
            }
        }
        
        public virtual AddRequirementsToTaskParams AddRequirementsToTaskParams
        {
            get
            {
                if ((this.mAddRequirementsToTaskParams == null))
                {
                    this.mAddRequirementsToTaskParams = new AddRequirementsToTaskParams();
                }
                return this.mAddRequirementsToTaskParams;
            }
        }
        
        public virtual AddRequirementsToVisittTaskParams AddRequirementsToVisittTaskParams
        {
            get
            {
                if ((this.mAddRequirementsToVisittTaskParams == null))
                {
                    this.mAddRequirementsToVisittTaskParams = new AddRequirementsToVisittTaskParams();
                }
                return this.mAddRequirementsToVisittTaskParams;
            }
        }
        
        public virtual AddStell1TaskParams AddStell1TaskParams
        {
            get
            {
                if ((this.mAddStell1TaskParams == null))
                {
                    this.mAddStell1TaskParams = new AddStell1TaskParams();
                }
                return this.mAddStell1TaskParams;
            }
        }
        
        public virtual AddVisittTaskParams AddVisittTaskParams
        {
            get
            {
                if ((this.mAddVisittTaskParams == null))
                {
                    this.mAddVisittTaskParams = new AddVisittTaskParams();
                }
                return this.mAddVisittTaskParams;
            }
        }
        
        public virtual CheckDayRosterplanNameIsEmptyExpectedValues CheckDayRosterplanNameIsEmptyExpectedValues
        {
            get
            {
                if ((this.mCheckDayRosterplanNameIsEmptyExpectedValues == null))
                {
                    this.mCheckDayRosterplanNameIsEmptyExpectedValues = new CheckDayRosterplanNameIsEmptyExpectedValues();
                }
                return this.mCheckDayRosterplanNameIsEmptyExpectedValues;
            }
        }
        
        public virtual CheckDraftParams CheckDraftParams
        {
            get
            {
                if ((this.mCheckDraftParams == null))
                {
                    this.mCheckDraftParams = new CheckDraftParams();
                }
                return this.mCheckDraftParams;
            }
        }
        
        public virtual CheckForDraftExpectedValues CheckForDraftExpectedValues
        {
            get
            {
                if ((this.mCheckForDraftExpectedValues == null))
                {
                    this.mCheckForDraftExpectedValues = new CheckForDraftExpectedValues();
                }
                return this.mCheckForDraftExpectedValues;
            }
        }
        
        public virtual CheckLayerInfo_step_26ExpectedValues CheckLayerInfo_step_26ExpectedValues
        {
            get
            {
                if ((this.mCheckLayerInfo_step_26ExpectedValues == null))
                {
                    this.mCheckLayerInfo_step_26ExpectedValues = new CheckLayerInfo_step_26ExpectedValues();
                }
                return this.mCheckLayerInfo_step_26ExpectedValues;
            }
        }
        
        public virtual CheckMed1ReqDetailsExpectedValues CheckMed1ReqDetailsExpectedValues
        {
            get
            {
                if ((this.mCheckMed1ReqDetailsExpectedValues == null))
                {
                    this.mCheckMed1ReqDetailsExpectedValues = new CheckMed1ReqDetailsExpectedValues();
                }
                return this.mCheckMed1ReqDetailsExpectedValues;
            }
        }
        
        public virtual CheckOkButtonDisabledExpectedValues CheckOkButtonDisabledExpectedValues
        {
            get
            {
                if ((this.mCheckOkButtonDisabledExpectedValues == null))
                {
                    this.mCheckOkButtonDisabledExpectedValues = new CheckOkButtonDisabledExpectedValues();
                }
                return this.mCheckOkButtonDisabledExpectedValues;
            }
        }
        
        public virtual CheckRegstatusHasErrorExpectedValues CheckRegstatusHasErrorExpectedValues
        {
            get
            {
                if ((this.mCheckRegstatusHasErrorExpectedValues == null))
                {
                    this.mCheckRegstatusHasErrorExpectedValues = new CheckRegstatusHasErrorExpectedValues();
                }
                return this.mCheckRegstatusHasErrorExpectedValues;
            }
        }
        
        public virtual CheckRythmLayerDaysExpectedValues CheckRythmLayerDaysExpectedValues
        {
            get
            {
                if ((this.mCheckRythmLayerDaysExpectedValues == null))
                {
                    this.mCheckRythmLayerDaysExpectedValues = new CheckRythmLayerDaysExpectedValues();
                }
                return this.mCheckRythmLayerDaysExpectedValues;
            }
        }
        
        public virtual CheckRythmLayerToDateExpectedValues CheckRythmLayerToDateExpectedValues
        {
            get
            {
                if ((this.mCheckRythmLayerToDateExpectedValues == null))
                {
                    this.mCheckRythmLayerToDateExpectedValues = new CheckRythmLayerToDateExpectedValues();
                }
                return this.mCheckRythmLayerToDateExpectedValues;
            }
        }
        
        public virtual CheckRythmLayerTypeExpectedValues CheckRythmLayerTypeExpectedValues
        {
            get
            {
                if ((this.mCheckRythmLayerTypeExpectedValues == null))
                {
                    this.mCheckRythmLayerTypeExpectedValues = new CheckRythmLayerTypeExpectedValues();
                }
                return this.mCheckRythmLayerTypeExpectedValues;
            }
        }
        
        public virtual CheckStell1TaskDurationExpectedValues CheckStell1TaskDurationExpectedValues
        {
            get
            {
                if ((this.mCheckStell1TaskDurationExpectedValues == null))
                {
                    this.mCheckStell1TaskDurationExpectedValues = new CheckStell1TaskDurationExpectedValues();
                }
                return this.mCheckStell1TaskDurationExpectedValues;
            }
        }
        
        public virtual CheckSykelpeierLayerPositionExpectedValues CheckSykelpeierLayerPositionExpectedValues
        {
            get
            {
                if ((this.mCheckSykelpeierLayerPositionExpectedValues == null))
                {
                    this.mCheckSykelpeierLayerPositionExpectedValues = new CheckSykelpeierLayerPositionExpectedValues();
                }
                return this.mCheckSykelpeierLayerPositionExpectedValues;
            }
        }
        
        public virtual CheckToDateRotate4TimesExpectedValues CheckToDateRotate4TimesExpectedValues
        {
            get
            {
                if ((this.mCheckToDateRotate4TimesExpectedValues == null))
                {
                    this.mCheckToDateRotate4TimesExpectedValues = new CheckToDateRotate4TimesExpectedValues();
                }
                return this.mCheckToDateRotate4TimesExpectedValues;
            }
        }
        
        public virtual ClearShowSumDetailsParams ClearShowSumDetailsParams
        {
            get
            {
                if ((this.mClearShowSumDetailsParams == null))
                {
                    this.mClearShowSumDetailsParams = new ClearShowSumDetailsParams();
                }
                return this.mClearShowSumDetailsParams;
            }
        }
        
        public virtual SelectRotate4TimesParams SelectRotate4TimesParams
        {
            get
            {
                if ((this.mSelectRotate4TimesParams == null))
                {
                    this.mSelectRotate4TimesParams = new SelectRotate4TimesParams();
                }
                return this.mSelectRotate4TimesParams;
            }
        }
        
        public virtual SelectRotateWholePeriodParams SelectRotateWholePeriodParams
        {
            get
            {
                if ((this.mSelectRotateWholePeriodParams == null))
                {
                    this.mSelectRotateWholePeriodParams = new SelectRotateWholePeriodParams();
                }
                return this.mSelectRotateWholePeriodParams;
            }
        }
        
        public virtual SelectShowSumDetailsParams SelectShowSumDetailsParams
        {
            get
            {
                if ((this.mSelectShowSumDetailsParams == null))
                {
                    this.mSelectShowSumDetailsParams = new SelectShowSumDetailsParams();
                }
                return this.mSelectShowSumDetailsParams;
            }
        }
        
        public virtual UnCheckDraftParams UnCheckDraftParams
        {
            get
            {
                if ((this.mUnCheckDraftParams == null))
                {
                    this.mUnCheckDraftParams = new UnCheckDraftParams();
                }
                return this.mUnCheckDraftParams;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        
        public UIDøgnrytmeplanWindow UIDøgnrytmeplanWindow
        {
            get
            {
                if ((this.mUIDøgnrytmeplanWindow == null))
                {
                    this.mUIDøgnrytmeplanWindow = new UIDøgnrytmeplanWindow();
                }
                return this.mUIDøgnrytmeplanWindow;
            }
        }
        
        public UIDøgnrytmelagWindow UIDøgnrytmelagWindow
        {
            get
            {
                if ((this.mUIDøgnrytmelagWindow == null))
                {
                    this.mUIDøgnrytmelagWindow = new UIDøgnrytmelagWindow();
                }
                return this.mUIDøgnrytmelagWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISettekravtilpersonerWindow UISettekravtilpersonerWindow
        {
            get
            {
                if ((this.mUISettekravtilpersonerWindow == null))
                {
                    this.mUISettekravtilpersonerWindow = new UISettekravtilpersonerWindow();
                }
                return this.mUISettekravtilpersonerWindow;
            }
        }
        
        public UISettekravtilpersonerWindow1 UISettekravtilpersonerWindow1
        {
            get
            {
                if ((this.mUISettekravtilpersonerWindow1 == null))
                {
                    this.mUISettekravtilpersonerWindow1 = new UISettekravtilpersonerWindow1();
                }
                return this.mUISettekravtilpersonerWindow1;
            }
        }
        
        public UISettekravtilpersonerWindow2 UISettekravtilpersonerWindow2
        {
            get
            {
                if ((this.mUISettekravtilpersonerWindow2 == null))
                {
                    this.mUISettekravtilpersonerWindow2 = new UISettekravtilpersonerWindow2();
                }
                return this.mUISettekravtilpersonerWindow2;
            }
        }
        
        public UISettekravtilpersonerWindow3 UISettekravtilpersonerWindow3
        {
            get
            {
                if ((this.mUISettekravtilpersonerWindow3 == null))
                {
                    this.mUISettekravtilpersonerWindow3 = new UISettekravtilpersonerWindow3();
                }
                return this.mUISettekravtilpersonerWindow3;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private AddDescriptionParams mAddDescriptionParams;
        
        private AddFrokostTaskParams mAddFrokostTaskParams;
        
        private AddLunchTaskParams mAddLunchTaskParams;
        
        private AddMed1TaskParams mAddMed1TaskParams;
        
        private AddMed2TaskParams mAddMed2TaskParams;
        
        private AddMed3TaskParams mAddMed3TaskParams;
        
        private AddMiddagTaskParams mAddMiddagTaskParams;
        
        private AddNewLunchTaskParams mAddNewLunchTaskParams;
        
        private AddRapport3TaskParams mAddRapport3TaskParams;
        
        private AddReport1TaskParams mAddReport1TaskParams;
        
        private AddRequirementsToMiddagTaskParams mAddRequirementsToMiddagTaskParams;
        
        private AddRequirementsToTaskParams mAddRequirementsToTaskParams;
        
        private AddRequirementsToVisittTaskParams mAddRequirementsToVisittTaskParams;
        
        private AddStell1TaskParams mAddStell1TaskParams;
        
        private AddVisittTaskParams mAddVisittTaskParams;
        
        private CheckDayRosterplanNameIsEmptyExpectedValues mCheckDayRosterplanNameIsEmptyExpectedValues;
        
        private CheckDraftParams mCheckDraftParams;
        
        private CheckForDraftExpectedValues mCheckForDraftExpectedValues;
        
        private CheckLayerInfo_step_26ExpectedValues mCheckLayerInfo_step_26ExpectedValues;
        
        private CheckMed1ReqDetailsExpectedValues mCheckMed1ReqDetailsExpectedValues;
        
        private CheckOkButtonDisabledExpectedValues mCheckOkButtonDisabledExpectedValues;
        
        private CheckRegstatusHasErrorExpectedValues mCheckRegstatusHasErrorExpectedValues;
        
        private CheckRythmLayerDaysExpectedValues mCheckRythmLayerDaysExpectedValues;
        
        private CheckRythmLayerToDateExpectedValues mCheckRythmLayerToDateExpectedValues;
        
        private CheckRythmLayerTypeExpectedValues mCheckRythmLayerTypeExpectedValues;
        
        private CheckStell1TaskDurationExpectedValues mCheckStell1TaskDurationExpectedValues;
        
        private CheckSykelpeierLayerPositionExpectedValues mCheckSykelpeierLayerPositionExpectedValues;
        
        private CheckToDateRotate4TimesExpectedValues mCheckToDateRotate4TimesExpectedValues;
        
        private ClearShowSumDetailsParams mClearShowSumDetailsParams;
        
        private SelectRotate4TimesParams mSelectRotate4TimesParams;
        
        private SelectRotateWholePeriodParams mSelectRotateWholePeriodParams;
        
        private SelectShowSumDetailsParams mSelectShowSumDetailsParams;
        
        private UnCheckDraftParams mUnCheckDraftParams;
        
        private UIGatWindow mUIGatWindow;
        
        private UIDøgnrytmeplanWindow mUIDøgnrytmeplanWindow;
        
        private UIDøgnrytmelagWindow mUIDøgnrytmelagWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UISettekravtilpersonerWindow mUISettekravtilpersonerWindow;
        
        private UISettekravtilpersonerWindow1 mUISettekravtilpersonerWindow1;
        
        private UISettekravtilpersonerWindow2 mUISettekravtilpersonerWindow2;
        
        private UISettekravtilpersonerWindow3 mUISettekravtilpersonerWindow3;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddDescription'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddDescriptionParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Ny plan pga omstrukturering i organisasjonen.' in 'eComment' text box
        /// </summary>
        public string UIECommentEditValueAsString = "Ny plan pga omstrukturering i organisasjonen.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddFrokostTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddFrokostTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad2}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "{NumPad2}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow0ColumnColumnHandEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{NumPad1}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys1 = "{NumPad1}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]0[Column]ColumnHandle25' text box
        /// </summary>
        public string UIRow0ColumnColumnHandEdit2SendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{NumPad2}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys2 = "{NumPad2}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]0[Column]ColumnHandle26' text box
        /// </summary>
        public string UIRow0ColumnColumnHandEdit3SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddLunchTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddLunchTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad1}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "{NumPad1}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]1[Column]ColumnHandle19' text box
        /// </summary>
        public string UIRow1ColumnColumnHandEdit2SendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{NumPad1}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys1 = "{NumPad1}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]1[Column]ColumnHandle21' text box
        /// </summary>
        public string UIRow1ColumnColumnHandEdit11SendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{NumPad1}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys2 = "{NumPad1}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]1[Column]ColumnHandle23' text box
        /// </summary>
        public string UIRow1ColumnColumnHandEdit1SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddMed1Task'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddMed1TaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "2";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]1[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow1ColumnColumnHandEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '1' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys1 = "1";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]1[Column]ColumnHandle23' text box
        /// </summary>
        public string UIRow1ColumnColumnHandEdit1SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddMed2Task'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddMed2TaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "1";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]3[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow3ColumnColumnHandEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddMed3Task'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddMed3TaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "1";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]4[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow4ColumnColumnHandEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddMiddagTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddMiddagTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad3}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "{NumPad3}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]2[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow2ColumnColumnHandEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{NumPad2}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys1 = "{NumPad2}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]2[Column]ColumnHandle25' text box
        /// </summary>
        public string UIRow2ColumnColumnHandEdit1SendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{NumPad3}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys2 = "{NumPad3}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]2[Column]ColumnHandle26' text box
        /// </summary>
        public string UIRow2ColumnColumnHandEdit2SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddNewLunchTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddNewLunchTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Delete}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "{Delete}";
        
        /// <summary>
        /// Type '{NumPad2}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys1 = "{NumPad2}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]1[Column]ColumnHandle26' text box
        /// </summary>
        public string UIRow1ColumnColumnHandEdit3SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRapport3Task'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddRapport3TaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "1";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]5[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow5ColumnColumnHandEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddReport1Task'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddReport1TaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "1";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow0ColumnColumnHandEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRequirementsToMiddagTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddRequirementsToMiddagTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys = "{NumPad1}";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys1 = "{NumPad1}";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]gcolGroup' LookUpEdit
        /// </summary>
        public string UIRow1ColumngcolGroupLookUpEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys2 = "{NumPad1}";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys2 = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRequirementsToTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddRequirementsToTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys = "2";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRequirementsToVisittTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddRequirementsToVisittTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad2}' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys = "{NumPad2}";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddStell1Task'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddStell1TaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '08:00{Tab}' in '[Row]0[Column]cFromTimeEditField' text box
        /// </summary>
        public string UIRow0ColumncFromTimeEEditSendKeys = "08:00{Tab}";
        
        /// <summary>
        /// Type '08:30{Tab}' in '[Row]0[Column]cToTimeEditField' text box
        /// </summary>
        public string UIRow0ColumncToTimeEdiEditSendKeys = "08:30{Tab}";
        
        /// <summary>
        /// Type '{NumPad1}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "{NumPad1}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow0ColumnColumnHandEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '1' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys1 = "1";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]0[Column]ColumnHandle22' text box
        /// </summary>
        public string UIRow0ColumnColumnHandEdit1SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddVisittTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddVisittTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "2";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]2[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow2ColumnColumnHandEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDayRosterplanNameIsEmpty'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckDayRosterplanNameIsEmptyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'eName' text box equals ''
        /// </summary>
        public string UIENameEditValueAsString = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDraft'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckDraftParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'chkDraft' check box
        /// </summary>
        public bool UIChkDraftCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckForDraft'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckForDraftExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDraft' check box equals 'True'
        /// </summary>
        public bool UIChkDraftCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLayerInfo_step_26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckLayerInfo_step_26ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Sykepleier' cell equals 'Hjelpepleier'
        /// </summary>
        public string UISykepleierCellValueAsString = "Hjelpepleier";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '10.01.2022' cell equals '2022-01-10'
        /// </summary>
        public string UIItem10012022CellValueAsString = "2022-01-10";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '16.01.2022' cell equals '2022-01-16'
        /// </summary>
        public string UIItem16012022CellValueAsString = "2022-01-16";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Rullerer til dato' cell equals 'Rullerer til dato'
        /// </summary>
        public string UIRullerertildatoCellValueAsString = "Rullerer til dato";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '01.05.2022' cell equals '2022-05-01'
        /// </summary>
        public string UIItem01052022CellValueAsString = "2022-05-01";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'I tillegg' cell equals 'I tillegg'
        /// </summary>
        public string UIItilleggCellValueAsString = "I tillegg";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Sykepleier' cell equals 'Sykepleier'
        /// </summary>
        public string UISykepleierCell1ValueAsString = "Sykepleier";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '03.01.2022' cell equals '2022-01-03'
        /// </summary>
        public string UIItem03012022CellValueAsString = "2022-01-03";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '09.01.2022' cell equals '2022-01-09'
        /// </summary>
        public string UIItem09012022CellValueAsString = "2022-01-09";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Rullerer ut plan' cell equals 'Rullerer ut plan'
        /// </summary>
        public string UIRullererutplanCellValueAsString = "Rullerer ut plan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCellValueAsString = null;
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'I tillegg' cell equals 'I tillegg'
        /// </summary>
        public string UIItilleggCell1ValueAsString = "I tillegg";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckMed1ReqDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckMed1ReqDetailsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2' cell equals '2'
        /// </summary>
        public string UIItem2CellValueAsString = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1 - Type 1' cell equals 'T1 - Type 1'
        /// </summary>
        public string UIT1Type1CellText = "T1 - Type 1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOkButtonDisabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckOkButtonDisabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Ok' button equals 'False'
        /// </summary>
        public bool UIOKButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRegstatusHasError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckRegstatusHasErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals '1 stk. meldinger (klikk her for detaljer)'
        /// </summary>
        public string UILnkDetailPopupEditValueAsString = "1 stk. meldinger (klikk her for detaljer)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRythmLayerDays'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckRythmLayerDaysExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'eNumber[1]' text box equals '7'
        /// </summary>
        public string UIENumber1EditValueAsString = "7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRythmLayerToDate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckRythmLayerToDateExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'pceDate' DateTimeEdit equals '2022-09-01'
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString = "2022-09-01";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRythmLayerType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckRythmLayerTypeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'drdLayerType' LookUpEdit equals 'Lag kommer i tillegg til lag over'
        /// </summary>
        public string UIDrdLayerTypeLookUpEditText = "Lag kommer i tillegg til lag over";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckStell1TaskDuration'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckStell1TaskDurationExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '30m' cell equals '30m'
        /// </summary>
        public string UIItem30mCellValueAsString = "30m";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSykelpeierLayerPosition'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckSykelpeierLayerPositionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Sykepleier' cell equals 'gcPlanGridControlCell[View]gvPlan[Row]1[Column]gcName'
        /// </summary>
        public string UISykepleierCell1Name = "gcPlanGridControlCell[View]gvPlan[Row]1[Column]gcName";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Sykepleier' cell equals 'Sykepleier'
        /// </summary>
        public string UISykepleierCell1ValueAsString = "Sykepleier";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckToDateRotate4Times'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckToDateRotate4TimesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'lblNrOfDaysComment' label equals 'Til dato: 13.02.2022'
        /// </summary>
        public string UILblNrOfDaysCommentLabelText = "Til dato: 13.02.2022";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClearShowSumDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ClearShowSumDetailsParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'chkShowDetails' check box
        /// </summary>
        public bool UIChkShowDetailsCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectRotate4Times'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectRotate4TimesParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in 'gsRotation' RadioGroup
        /// </summary>
        public int UIGsRotationRadioGroupSelectedIndex = 2;
        
        /// <summary>
        /// Type '4 [SelectionStart]0[SelectionLength]1' in 'eNumber[0]' text box
        /// </summary>
        public string UIENumber0EditValueAsString = "4 [SelectionStart]0[SelectionLength]1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectRotateWholePeriod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectRotateWholePeriodParams
    {
        
        #region Fields
        /// <summary>
        /// Type '3' in 'gsRotation' RadioGroup
        /// </summary>
        public int UIGsRotationRadioGroupSelectedIndex = 3;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectShowSumDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectShowSumDetailsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'chkShowDetails' check box
        /// </summary>
        public bool UIChkShowDetailsCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UnCheckDraft'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnCheckDraftParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'chkDraft' check box
        /// </summary>
        public bool UIChkDraftCheckBoxChecked = false;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxPageControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinClient UIAvdelingClient
        {
            get
            {
                if ((this.mUIAvdelingClient == null))
                {
                    this.mUIAvdelingClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAvdelingClient.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAvdelingClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAvdelingClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXButton UINYButton
        {
            get
            {
                if ((this.mUINYButton == null))
                {
                    this.mUINYButton = new DXButton(this);
                    #region Search Criteria
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.Name] = "bNew";
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
                    this.mUINYButton.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUINYButton;
            }
        }
        
        public DXButton UIDupliserButton
        {
            get
            {
                if ((this.mUIDupliserButton == null))
                {
                    this.mUIDupliserButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIDupliserButton.SearchProperties[DXTestControl.PropertyNames.Name] = "bDuplicate";
                    this.mUIDupliserButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIDupliserButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
                    this.mUIDupliserButton.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIDupliserButton;
            }
        }
        
        public UIGcDayrhythmPlansTable UIGcDayrhythmPlansTable
        {
            get
            {
                if ((this.mUIGcDayrhythmPlansTable == null))
                {
                    this.mUIGcDayrhythmPlansTable = new UIGcDayrhythmPlansTable(this);
                }
                return this.mUIGcDayrhythmPlansTable;
            }
        }
        
        public DXButton UIEndreButton
        {
            get
            {
                if ((this.mUIEndreButton == null))
                {
                    this.mUIEndreButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIEndreButton.SearchProperties[DXTestControl.PropertyNames.Name] = "bEdit";
                    this.mUIEndreButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIEndreButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
                    this.mUIEndreButton.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIEndreButton;
            }
        }
        
        public DXButton UISlettButton
        {
            get
            {
                if ((this.mUISlettButton == null))
                {
                    this.mUISlettButton = new DXButton(this);
                    #region Search Criteria
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.Name] = "bDelete";
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
                    this.mUISlettButton.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISlettButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUINYButton;
        
        private DXButton mUIDupliserButton;
        
        private UIGcDayrhythmPlansTable mUIGcDayrhythmPlansTable;
        
        private DXButton mUIEndreButton;
        
        private DXButton mUISlettButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcDayrhythmPlansTable : DXGrid
    {
        
        public UIGcDayrhythmPlansTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayrhythmPlans";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem2022kopiCell
        {
            get
            {
                if ((this.mUIItem2022kopiCell == null))
                {
                    this.mUIItem2022kopiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2022kopiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayrhythmPlansGridControlCell[View]gvDayrhythmPlans[Row]0[Column]gcolPlan";
                    this.mUIItem2022kopiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2022kopiCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem2022kopiCell;
            }
        }
        
        public DXCell UIItem2022kopiCell1
        {
            get
            {
                if ((this.mUIItem2022kopiCell1 == null))
                {
                    this.mUIItem2022kopiCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2022kopiCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayrhythmPlansGridControlCell[View]gvDayrhythmPlans[Row]1[Column]gcolPlan";
                    this.mUIItem2022kopiCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2022kopiCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem2022kopiCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem2022kopiCell;
        
        private DXCell mUIItem2022kopiCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDøgnrytmeplanWindow : DXWindow
    {
        
        public UIDøgnrytmeplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Døgnrytmeplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UIPaNavbarPanelClient UIPaNavbarPanelClient
        {
            get
            {
                if ((this.mUIPaNavbarPanelClient == null))
                {
                    this.mUIPaNavbarPanelClient = new UIPaNavbarPanelClient(this);
                }
                return this.mUIPaNavbarPanelClient;
            }
        }
        
        public UIPaBottomPanelClient UIPaBottomPanelClient
        {
            get
            {
                if ((this.mUIPaBottomPanelClient == null))
                {
                    this.mUIPaBottomPanelClient = new UIPaBottomPanelClient(this);
                }
                return this.mUIPaBottomPanelClient;
            }
        }
        
        public UIPaHeaderPanelClient UIPaHeaderPanelClient
        {
            get
            {
                if ((this.mUIPaHeaderPanelClient == null))
                {
                    this.mUIPaHeaderPanelClient = new UIPaHeaderPanelClient(this);
                }
                return this.mUIPaHeaderPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaNavbarPanelClient mUIPaNavbarPanelClient;
        
        private UIPaBottomPanelClient mUIPaBottomPanelClient;
        
        private UIPaHeaderPanelClient mUIPaHeaderPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaNavbarPanelClient : DXTestControl
    {
        
        public UIPaNavbarPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paNavbarPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UIGsMainControlNavBar UIGsMainControlNavBar
        {
            get
            {
                if ((this.mUIGsMainControlNavBar == null))
                {
                    this.mUIGsMainControlNavBar = new UIGsMainControlNavBar(this);
                }
                return this.mUIGsMainControlNavBar;
            }
        }
        #endregion
        
        #region Fields
        private UIGsMainControlNavBar mUIGsMainControlNavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsMainControlNavBar : DXNavBar
    {
        
        public UIGsMainControlNavBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsMainControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UINbgccDetailsScrollableControl UINbgccDetailsScrollableControl
        {
            get
            {
                if ((this.mUINbgccDetailsScrollableControl == null))
                {
                    this.mUINbgccDetailsScrollableControl = new UINbgccDetailsScrollableControl(this);
                }
                return this.mUINbgccDetailsScrollableControl;
            }
        }
        
        public UINbgccLayerScrollableControl UINbgccLayerScrollableControl
        {
            get
            {
                if ((this.mUINbgccLayerScrollableControl == null))
                {
                    this.mUINbgccLayerScrollableControl = new UINbgccLayerScrollableControl(this);
                }
                return this.mUINbgccLayerScrollableControl;
            }
        }
        
        public UINbgccSumScrollableControl UINbgccSumScrollableControl
        {
            get
            {
                if ((this.mUINbgccSumScrollableControl == null))
                {
                    this.mUINbgccSumScrollableControl = new UINbgccSumScrollableControl(this);
                }
                return this.mUINbgccSumScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UINbgccDetailsScrollableControl mUINbgccDetailsScrollableControl;
        
        private UINbgccLayerScrollableControl mUINbgccLayerScrollableControl;
        
        private UINbgccSumScrollableControl mUINbgccSumScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbgccDetailsScrollableControl : DXScrollableControl
    {
        
        public UINbgccDetailsScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIENameEdit
        {
            get
            {
                if ((this.mUIENameEdit == null))
                {
                    this.mUIENameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eName";
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENameEdit.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIENameEdit;
            }
        }
        
        public DXTextEdit UIECommentEdit
        {
            get
            {
                if ((this.mUIECommentEdit == null))
                {
                    this.mUIECommentEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIECommentEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eComment";
                    this.mUIECommentEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSMemoEdit";
                    this.mUIECommentEdit.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIECommentEdit;
            }
        }
        
        public DXCheckBox UIChkDraftCheckBox
        {
            get
            {
                if ((this.mUIChkDraftCheckBox == null))
                {
                    this.mUIChkDraftCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkDraftCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkDraft";
                    this.mUIChkDraftCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkDraftCheckBox.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIChkDraftCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIENameEdit;
        
        private DXTextEdit mUIECommentEdit;
        
        private DXCheckBox mUIChkDraftCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbgccLayerScrollableControl : DXScrollableControl
    {
        
        public UINbgccLayerScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccLayer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UIPaMainPanelClient UIPaMainPanelClient
        {
            get
            {
                if ((this.mUIPaMainPanelClient == null))
                {
                    this.mUIPaMainPanelClient = new UIPaMainPanelClient(this);
                }
                return this.mUIPaMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaMainPanelClient mUIPaMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaMainPanelClient : DXTestControl
    {
        
        public UIPaMainPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UIGsSplitContainerContSplitContainerControl UIGsSplitContainerContSplitContainerControl
        {
            get
            {
                if ((this.mUIGsSplitContainerContSplitContainerControl == null))
                {
                    this.mUIGsSplitContainerContSplitContainerControl = new UIGsSplitContainerContSplitContainerControl(this);
                }
                return this.mUIGsSplitContainerContSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UIGsSplitContainerContSplitContainerControl mUIGsSplitContainerContSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsSplitContainerContSplitContainerControl : DXSplitContainerControl
    {
        
        public UIGsSplitContainerContSplitContainerControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSplitContainerControl";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UISplitGroupPanelClient UISplitGroupPanelClient
        {
            get
            {
                if ((this.mUISplitGroupPanelClient == null))
                {
                    this.mUISplitGroupPanelClient = new UISplitGroupPanelClient(this);
                }
                return this.mUISplitGroupPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UISplitGroupPanelClient mUISplitGroupPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISplitGroupPanelClient : DXTestControl
    {
        
        public UISplitGroupPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1SplitGroupPanel[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UIPaTopPanelClient UIPaTopPanelClient
        {
            get
            {
                if ((this.mUIPaTopPanelClient == null))
                {
                    this.mUIPaTopPanelClient = new UIPaTopPanelClient(this);
                }
                return this.mUIPaTopPanelClient;
            }
        }
        
        public UIPaMainPanelClient1 UIPaMainPanelClient
        {
            get
            {
                if ((this.mUIPaMainPanelClient == null))
                {
                    this.mUIPaMainPanelClient = new UIPaMainPanelClient1(this);
                }
                return this.mUIPaMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaTopPanelClient mUIPaTopPanelClient;
        
        private UIPaMainPanelClient1 mUIPaMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaTopPanelClient : DXTestControl
    {
        
        public UIPaTopPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paTopPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public DXButton UINyttlagButton
        {
            get
            {
                if ((this.mUINyttlagButton == null))
                {
                    this.mUINyttlagButton = new DXButton(this);
                    #region Search Criteria
                    this.mUINyttlagButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnNewLayer";
                    this.mUINyttlagButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUINyttlagButton.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUINyttlagButton;
            }
        }
        
        public DXButton UIEndrelagButton
        {
            get
            {
                if ((this.mUIEndrelagButton == null))
                {
                    this.mUIEndrelagButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIEndrelagButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditLayer";
                    this.mUIEndrelagButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIEndrelagButton.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIEndrelagButton;
            }
        }
        
        public DXButton UIBtnMoveLayerDownButton
        {
            get
            {
                if ((this.mUIBtnMoveLayerDownButton == null))
                {
                    this.mUIBtnMoveLayerDownButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIBtnMoveLayerDownButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnMoveLayerDown";
                    this.mUIBtnMoveLayerDownButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIBtnMoveLayerDownButton.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIBtnMoveLayerDownButton;
            }
        }
        
        public DXButton UIDupliserlagButton
        {
            get
            {
                if ((this.mUIDupliserlagButton == null))
                {
                    this.mUIDupliserlagButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIDupliserlagButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnDuplicateLayer";
                    this.mUIDupliserlagButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIDupliserlagButton.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIDupliserlagButton;
            }
        }
        
        public DXButton UISlettlagButton
        {
            get
            {
                if ((this.mUISlettlagButton == null))
                {
                    this.mUISlettlagButton = new DXButton(this);
                    #region Search Criteria
                    this.mUISlettlagButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnDeleteLayer";
                    this.mUISlettlagButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUISlettlagButton.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUISlettlagButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUINyttlagButton;
        
        private DXButton mUIEndrelagButton;
        
        private DXButton mUIBtnMoveLayerDownButton;
        
        private DXButton mUIDupliserlagButton;
        
        private DXButton mUISlettlagButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaMainPanelClient1 : DXTestControl
    {
        
        public UIPaMainPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UIGcPlanTable UIGcPlanTable
        {
            get
            {
                if ((this.mUIGcPlanTable == null))
                {
                    this.mUIGcPlanTable = new UIGcPlanTable(this);
                }
                return this.mUIGcPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcPlanTable mUIGcPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcPlanTable : DXGrid
    {
        
        public UIGcPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public DXCell UISykepleierCell
        {
            get
            {
                if ((this.mUISykepleierCell == null))
                {
                    this.mUISykepleierCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISykepleierCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]0[Column]gcName";
                    this.mUISykepleierCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISykepleierCell.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUISykepleierCell;
            }
        }
        
        public DXCell UISykepleierCell1
        {
            get
            {
                if ((this.mUISykepleierCell1 == null))
                {
                    this.mUISykepleierCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUISykepleierCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]1[Column]gcName";
                    this.mUISykepleierCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISykepleierCell1.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUISykepleierCell1;
            }
        }
        
        public DXCell UIItem10012022Cell
        {
            get
            {
                if ((this.mUIItem10012022Cell == null))
                {
                    this.mUIItem10012022Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem10012022Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]0[Column]gcFrom";
                    this.mUIItem10012022Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem10012022Cell.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIItem10012022Cell;
            }
        }
        
        public DXCell UIItem16012022Cell
        {
            get
            {
                if ((this.mUIItem16012022Cell == null))
                {
                    this.mUIItem16012022Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem16012022Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]0[Column]gcTo";
                    this.mUIItem16012022Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem16012022Cell.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIItem16012022Cell;
            }
        }
        
        public DXCell UIRullerertildatoCell
        {
            get
            {
                if ((this.mUIRullerertildatoCell == null))
                {
                    this.mUIRullerertildatoCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRullerertildatoCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]0[Column]gcType";
                    this.mUIRullerertildatoCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRullerertildatoCell.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIRullerertildatoCell;
            }
        }
        
        public DXCell UIItem01052022Cell
        {
            get
            {
                if ((this.mUIItem01052022Cell == null))
                {
                    this.mUIItem01052022Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem01052022Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]0[Column]gcRevolveEnd";
                    this.mUIItem01052022Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem01052022Cell.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIItem01052022Cell;
            }
        }
        
        public DXCell UIItilleggCell
        {
            get
            {
                if ((this.mUIItilleggCell == null))
                {
                    this.mUIItilleggCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItilleggCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]0[Column]gcMergeType";
                    this.mUIItilleggCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItilleggCell.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIItilleggCell;
            }
        }
        
        public DXCell UIItem03012022Cell
        {
            get
            {
                if ((this.mUIItem03012022Cell == null))
                {
                    this.mUIItem03012022Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem03012022Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]1[Column]gcFrom";
                    this.mUIItem03012022Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem03012022Cell.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIItem03012022Cell;
            }
        }
        
        public DXCell UIItem09012022Cell
        {
            get
            {
                if ((this.mUIItem09012022Cell == null))
                {
                    this.mUIItem09012022Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem09012022Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]1[Column]gcTo";
                    this.mUIItem09012022Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem09012022Cell.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIItem09012022Cell;
            }
        }
        
        public DXCell UIRullererutplanCell
        {
            get
            {
                if ((this.mUIRullererutplanCell == null))
                {
                    this.mUIRullererutplanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRullererutplanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]1[Column]gcType";
                    this.mUIRullererutplanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRullererutplanCell.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIRullererutplanCell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]1[Column]gcRevolveEnd";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItilleggCell1
        {
            get
            {
                if ((this.mUIItilleggCell1 == null))
                {
                    this.mUIItilleggCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItilleggCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]1[Column]gcMergeType";
                    this.mUIItilleggCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItilleggCell1.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIItilleggCell1;
            }
        }
        
        public DXCell UIPåske2022Cell
        {
            get
            {
                if ((this.mUIPåske2022Cell == null))
                {
                    this.mUIPåske2022Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIPåske2022Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]2[Column]gcName";
                    this.mUIPåske2022Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIPåske2022Cell.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIPåske2022Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUISykepleierCell;
        
        private DXCell mUISykepleierCell1;
        
        private DXCell mUIItem10012022Cell;
        
        private DXCell mUIItem16012022Cell;
        
        private DXCell mUIRullerertildatoCell;
        
        private DXCell mUIItem01052022Cell;
        
        private DXCell mUIItilleggCell;
        
        private DXCell mUIItem03012022Cell;
        
        private DXCell mUIItem09012022Cell;
        
        private DXCell mUIRullererutplanCell;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIItilleggCell1;
        
        private DXCell mUIPåske2022Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbgccSumScrollableControl : DXScrollableControl
    {
        
        public UINbgccSumScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccSum";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UITcGraphicsTabList UITcGraphicsTabList
        {
            get
            {
                if ((this.mUITcGraphicsTabList == null))
                {
                    this.mUITcGraphicsTabList = new UITcGraphicsTabList(this);
                }
                return this.mUITcGraphicsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcGraphicsTabList mUITcGraphicsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcGraphicsTabList : DXTestControl
    {
        
        public UITcGraphicsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcGraphics";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UITpSumClient UITpSumClient
        {
            get
            {
                if ((this.mUITpSumClient == null))
                {
                    this.mUITpSumClient = new UITpSumClient(this);
                }
                return this.mUITpSumClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpSumClient mUITpSumClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpSumClient : DXTestControl
    {
        
        public UITpSumClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpSum";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl1Client UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl1Client mUIGsPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl1Client : DXTestControl
    {
        
        public UIGsPanelControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UIPMainPanelClient UIPMainPanelClient
        {
            get
            {
                if ((this.mUIPMainPanelClient == null))
                {
                    this.mUIPMainPanelClient = new UIPMainPanelClient(this);
                }
                return this.mUIPMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPMainPanelClient mUIPMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPMainPanelClient : DXTestControl
    {
        
        public UIPMainPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public UIPTopPanelClient UIPTopPanelClient
        {
            get
            {
                if ((this.mUIPTopPanelClient == null))
                {
                    this.mUIPTopPanelClient = new UIPTopPanelClient(this);
                }
                return this.mUIPTopPanelClient;
            }
        }
        
        public UIGcSumDemandTable UIGcSumDemandTable
        {
            get
            {
                if ((this.mUIGcSumDemandTable == null))
                {
                    this.mUIGcSumDemandTable = new UIGcSumDemandTable(this);
                }
                return this.mUIGcSumDemandTable;
            }
        }
        #endregion
        
        #region Fields
        private UIPTopPanelClient mUIPTopPanelClient;
        
        private UIGcSumDemandTable mUIGcSumDemandTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPTopPanelClient : DXTestControl
    {
        
        public UIPTopPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pTopPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkShowDetailsCheckBox
        {
            get
            {
                if ((this.mUIChkShowDetailsCheckBox == null))
                {
                    this.mUIChkShowDetailsCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkShowDetailsCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkShowDetails";
                    this.mUIChkShowDetailsCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkShowDetailsCheckBox.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIChkShowDetailsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkShowDetailsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcSumDemandTable : DXGrid
    {
        
        public UIGcSumDemandTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemand";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public DXColumnHeader UIRosterCell_0ColumnHeader
        {
            get
            {
                if ((this.mUIRosterCell_0ColumnHeader == null))
                {
                    this.mUIRosterCell_0ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIRosterCell_0ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlColumnHeader[View]gvSumDemand[Column]RosterCell_0";
                    this.mUIRosterCell_0ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIRosterCell_0ColumnHeader.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIRosterCell_0ColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private DXColumnHeader mUIRosterCell_0ColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaBottomPanelClient : DXTestControl
    {
        
        public UIPaBottomPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paBottomPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSave";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaHeaderPanelClient : DXTestControl
    {
        
        public UIPaHeaderPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paHeaderPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Døgnrytmeplan");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UILnkDetailPopupEdit
        {
            get
            {
                if ((this.mUILnkDetailPopupEdit == null))
                {
                    this.mUILnkDetailPopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "lnkDetail";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "4";
                    this.mUILnkDetailPopupEdit.WindowTitles.Add("Døgnrytmeplan");
                    #endregion
                }
                return this.mUILnkDetailPopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUILnkDetailPopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDøgnrytmelagWindow : DXWindow
    {
        
        public UIDøgnrytmelagWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Døgnrytme lag";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Døgnrytme lag");
            #endregion
        }
        
        #region Properties
        public UIGsMainControlNavBar1 UIGsMainControlNavBar
        {
            get
            {
                if ((this.mUIGsMainControlNavBar == null))
                {
                    this.mUIGsMainControlNavBar = new UIGsMainControlNavBar1(this);
                }
                return this.mUIGsMainControlNavBar;
            }
        }
        
        public UIPaBottomClient UIPaBottomClient
        {
            get
            {
                if ((this.mUIPaBottomClient == null))
                {
                    this.mUIPaBottomClient = new UIPaBottomClient(this);
                }
                return this.mUIPaBottomClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGsMainControlNavBar1 mUIGsMainControlNavBar;
        
        private UIPaBottomClient mUIPaBottomClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsMainControlNavBar1 : DXNavBar
    {
        
        public UIGsMainControlNavBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsMainControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.WindowTitles.Add("Døgnrytme lag");
            #endregion
        }
        
        #region Properties
        public UINbgccDetailsScrollableControl1 UINbgccDetailsScrollableControl
        {
            get
            {
                if ((this.mUINbgccDetailsScrollableControl == null))
                {
                    this.mUINbgccDetailsScrollableControl = new UINbgccDetailsScrollableControl1(this);
                }
                return this.mUINbgccDetailsScrollableControl;
            }
        }
        
        public UINbgccLayersScrollableControl UINbgccLayersScrollableControl
        {
            get
            {
                if ((this.mUINbgccLayersScrollableControl == null))
                {
                    this.mUINbgccLayersScrollableControl = new UINbgccLayersScrollableControl(this);
                }
                return this.mUINbgccLayersScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UINbgccDetailsScrollableControl1 mUINbgccDetailsScrollableControl;
        
        private UINbgccLayersScrollableControl mUINbgccLayersScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbgccDetailsScrollableControl1 : DXScrollableControl
    {
        
        public UINbgccDetailsScrollableControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Døgnrytme lag");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIENameEdit
        {
            get
            {
                if ((this.mUIENameEdit == null))
                {
                    this.mUIENameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eName";
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENameEdit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIENameEdit;
            }
        }
        
        public UIDtCalculatedToDateCustom UIDtCalculatedToDateCustom
        {
            get
            {
                if ((this.mUIDtCalculatedToDateCustom == null))
                {
                    this.mUIDtCalculatedToDateCustom = new UIDtCalculatedToDateCustom(this);
                }
                return this.mUIDtCalculatedToDateCustom;
            }
        }
        
        public DXTextEdit UIENumber1Edit
        {
            get
            {
                if ((this.mUIENumber1Edit == null))
                {
                    this.mUIENumber1Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[1]";
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber1Edit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIENumber1Edit;
            }
        }
        
        public UIDrdLayerTypeLookUpEdit UIDrdLayerTypeLookUpEdit
        {
            get
            {
                if ((this.mUIDrdLayerTypeLookUpEdit == null))
                {
                    this.mUIDrdLayerTypeLookUpEdit = new UIDrdLayerTypeLookUpEdit(this);
                }
                return this.mUIDrdLayerTypeLookUpEdit;
            }
        }
        
        public DXRadioGroup UIGsRotationRadioGroup
        {
            get
            {
                if ((this.mUIGsRotationRadioGroup == null))
                {
                    this.mUIGsRotationRadioGroup = new DXRadioGroup(this);
                    #region Search Criteria
                    this.mUIGsRotationRadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "gsRotation";
                    this.mUIGsRotationRadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSRadioGroup";
                    this.mUIGsRotationRadioGroup.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIGsRotationRadioGroup;
            }
        }
        
        public DXTextEdit UIENumber0Edit
        {
            get
            {
                if ((this.mUIENumber0Edit == null))
                {
                    this.mUIENumber0Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber0Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[0]";
                    this.mUIENumber0Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber0Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber0Edit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIENumber0Edit;
            }
        }
        
        public DXTestControl UILblNrOfDaysCommentLabel
        {
            get
            {
                if ((this.mUILblNrOfDaysCommentLabel == null))
                {
                    this.mUILblNrOfDaysCommentLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUILblNrOfDaysCommentLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "lblNrOfDaysComment";
                    this.mUILblNrOfDaysCommentLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLabelControl";
                    this.mUILblNrOfDaysCommentLabel.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUILblNrOfDaysCommentLabel;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIENameEdit;
        
        private UIDtCalculatedToDateCustom mUIDtCalculatedToDateCustom;
        
        private DXTextEdit mUIENumber1Edit;
        
        private UIDrdLayerTypeLookUpEdit mUIDrdLayerTypeLookUpEdit;
        
        private DXRadioGroup mUIGsRotationRadioGroup;
        
        private DXTextEdit mUIENumber0Edit;
        
        private DXTestControl mUILblNrOfDaysCommentLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDtCalculatedToDateCustom : DXTestControl
    {
        
        public UIDtCalculatedToDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dtCalculatedToDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Døgnrytme lag");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDrdLayerTypeLookUpEdit : DXLookUpEdit
    {
        
        public UIDrdLayerTypeLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "drdLayerType";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Døgnrytme lag");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "drdLayerTypePopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbgccLayersScrollableControl : DXScrollableControl
    {
        
        public UINbgccLayersScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccLayers";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Døgnrytme lag");
            #endregion
        }
        
        #region Properties
        public UIGcItemsTable UIGcItemsTable
        {
            get
            {
                if ((this.mUIGcItemsTable == null))
                {
                    this.mUIGcItemsTable = new UIGcItemsTable(this);
                }
                return this.mUIGcItemsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcItemsTable mUIGcItemsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcItemsTable : DXGrid
    {
        
        public UIGcItemsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItems";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Døgnrytme lag");
            #endregion
        }
        
        #region Properties
        public DXCell UIVelgoppgaveCell
        {
            get
            {
                if ((this.mUIVelgoppgaveCell == null))
                {
                    this.mUIVelgoppgaveCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVelgoppgaveCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]-2147483647[Column]cItemNameDayR";
                    this.mUIVelgoppgaveCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVelgoppgaveCell.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIVelgoppgaveCell;
            }
        }
        
        public UIRow2147483647ColumncLookUpEdit UIRow2147483647ColumncLookUpEdit
        {
            get
            {
                if ((this.mUIRow2147483647ColumncLookUpEdit == null))
                {
                    this.mUIRow2147483647ColumncLookUpEdit = new UIRow2147483647ColumncLookUpEdit(this);
                }
                return this.mUIRow2147483647ColumncLookUpEdit;
            }
        }
        
        public DXCell UIValgtCell
        {
            get
            {
                if ((this.mUIValgtCell == null))
                {
                    this.mUIValgtCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIValgtCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]cInBook";
                    this.mUIValgtCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIValgtCell.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIValgtCell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle18";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle24";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXTextEdit UIRow0ColumnColumnHandEdit
        {
            get
            {
                if ((this.mUIRow0ColumnColumnHandEdit == null))
                {
                    this.mUIRow0ColumnColumnHandEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]0[Column]ColumnHandle18";
                    this.mUIRow0ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnColumnHandEdit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow0ColumnColumnHandEdit;
            }
        }
        
        public DXCell UIValgtCell1
        {
            get
            {
                if ((this.mUIValgtCell1 == null))
                {
                    this.mUIValgtCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIValgtCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]cInBook";
                    this.mUIValgtCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIValgtCell1.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIValgtCell1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle18";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle22";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXTextEdit UIRow1ColumnColumnHandEdit
        {
            get
            {
                if ((this.mUIRow1ColumnColumnHandEdit == null))
                {
                    this.mUIRow1ColumnColumnHandEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]1[Column]ColumnHandle18";
                    this.mUIRow1ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnColumnHandEdit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow1ColumnColumnHandEdit;
            }
        }
        
        public DXCell UIItemCell21
        {
            get
            {
                if ((this.mUIItemCell21 == null))
                {
                    this.mUIItemCell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle23";
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell21.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell21;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle24";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXTextEdit UIRow1ColumnColumnHandEdit1
        {
            get
            {
                if ((this.mUIRow1ColumnColumnHandEdit1 == null))
                {
                    this.mUIRow1ColumnColumnHandEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnColumnHandEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]1[Column]ColumnHandle23";
                    this.mUIRow1ColumnColumnHandEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnColumnHandEdit1.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow1ColumnColumnHandEdit1;
            }
        }
        
        public DXCheckBox UICheckEditCheckBox
        {
            get
            {
                if ((this.mUICheckEditCheckBox == null))
                {
                    this.mUICheckEditCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsCheckEdit[View]gvItems[Row]2[Column]cInBook";
                    this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
                    this.mUICheckEditCheckBox.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUICheckEditCheckBox;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]2[Column]ColumnHandle18";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]2[Column]ColumnHandle24";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXTextEdit UIRow2ColumnColumnHandEdit
        {
            get
            {
                if ((this.mUIRow2ColumnColumnHandEdit == null))
                {
                    this.mUIRow2ColumnColumnHandEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]2[Column]ColumnHandle18";
                    this.mUIRow2ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnColumnHandEdit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow2ColumnColumnHandEdit;
            }
        }
        
        public DXCell UIValgtCell2
        {
            get
            {
                if ((this.mUIValgtCell2 == null))
                {
                    this.mUIValgtCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIValgtCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]3[Column]cInBook";
                    this.mUIValgtCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIValgtCell2.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIValgtCell2;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]3[Column]ColumnHandle18";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXCell UIItemCell13
        {
            get
            {
                if ((this.mUIItemCell13 == null))
                {
                    this.mUIItemCell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]3[Column]ColumnHandle24";
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell13.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell13;
            }
        }
        
        public DXTextEdit UIRow3ColumnColumnHandEdit
        {
            get
            {
                if ((this.mUIRow3ColumnColumnHandEdit == null))
                {
                    this.mUIRow3ColumnColumnHandEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]3[Column]ColumnHandle18";
                    this.mUIRow3ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnColumnHandEdit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow3ColumnColumnHandEdit;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]4[Column]ColumnHandle18";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell14
        {
            get
            {
                if ((this.mUIItemCell14 == null))
                {
                    this.mUIItemCell14 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]4[Column]ColumnHandle24";
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell14.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell14;
            }
        }
        
        public DXTextEdit UIRow4ColumnColumnHandEdit
        {
            get
            {
                if ((this.mUIRow4ColumnColumnHandEdit == null))
                {
                    this.mUIRow4ColumnColumnHandEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]4[Column]ColumnHandle18";
                    this.mUIRow4ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnColumnHandEdit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow4ColumnColumnHandEdit;
            }
        }
        
        public DXCell UIValgtCell3
        {
            get
            {
                if ((this.mUIValgtCell3 == null))
                {
                    this.mUIValgtCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIValgtCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]5[Column]cInBook";
                    this.mUIValgtCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIValgtCell3.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIValgtCell3;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]5[Column]ColumnHandle18";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXCell UIItemCell15
        {
            get
            {
                if ((this.mUIItemCell15 == null))
                {
                    this.mUIItemCell15 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]5[Column]ColumnHandle24";
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell15.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell15;
            }
        }
        
        public DXTextEdit UIRow5ColumnColumnHandEdit
        {
            get
            {
                if ((this.mUIRow5ColumnColumnHandEdit == null))
                {
                    this.mUIRow5ColumnColumnHandEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow5ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]5[Column]ColumnHandle18";
                    this.mUIRow5ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow5ColumnColumnHandEdit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow5ColumnColumnHandEdit;
            }
        }
        
        public DXCell UIRAPPORT3Cell
        {
            get
            {
                if ((this.mUIRAPPORT3Cell == null))
                {
                    this.mUIRAPPORT3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRAPPORT3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]5[Column]cItemNameDayR";
                    this.mUIRAPPORT3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRAPPORT3Cell.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRAPPORT3Cell;
            }
        }
        
        public DXCell UIItem0730Cell
        {
            get
            {
                if ((this.mUIItem0730Cell == null))
                {
                    this.mUIItem0730Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0730Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]cFromTimeEditField";
                    this.mUIItem0730Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0730Cell.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItem0730Cell;
            }
        }
        
        public DXTextEdit UIRow0ColumncFromTimeEEdit
        {
            get
            {
                if ((this.mUIRow0ColumncFromTimeEEdit == null))
                {
                    this.mUIRow0ColumncFromTimeEEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumncFromTimeEEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGSSmartTimeEditEditor[View]gvItems[Row]0[Column]cFromTimeEditField";
                    this.mUIRow0ColumncFromTimeEEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartTimeEditEditor";
                    this.mUIRow0ColumncFromTimeEEdit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow0ColumncFromTimeEEdit;
            }
        }
        
        public DXTextEdit UIRow0ColumncToTimeEdiEdit
        {
            get
            {
                if ((this.mUIRow0ColumncToTimeEdiEdit == null))
                {
                    this.mUIRow0ColumncToTimeEdiEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumncToTimeEdiEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGSSmartTimeEditEditor[View]gvItems[Row]0[Column]cToTimeEditField";
                    this.mUIRow0ColumncToTimeEdiEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartTimeEditEditor";
                    this.mUIRow0ColumncToTimeEdiEdit.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow0ColumncToTimeEdiEdit;
            }
        }
        
        public DXCell UIItemCell16
        {
            get
            {
                if ((this.mUIItemCell16 == null))
                {
                    this.mUIItemCell16 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle20";
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell16.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell16;
            }
        }
        
        public DXCell UIItemCell22
        {
            get
            {
                if ((this.mUIItemCell22 == null))
                {
                    this.mUIItemCell22 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle22";
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell22.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell22;
            }
        }
        
        public DXTextEdit UIRow0ColumnColumnHandEdit1
        {
            get
            {
                if ((this.mUIRow0ColumnColumnHandEdit1 == null))
                {
                    this.mUIRow0ColumnColumnHandEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnColumnHandEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]0[Column]ColumnHandle22";
                    this.mUIRow0ColumnColumnHandEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnColumnHandEdit1.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow0ColumnColumnHandEdit1;
            }
        }
        
        public DXCell UIItem30mCell
        {
            get
            {
                if ((this.mUIItem30mCell == null))
                {
                    this.mUIItem30mCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem30mCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]cDuration";
                    this.mUIItem30mCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem30mCell.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItem30mCell;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle19";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXTextEdit UIRow1ColumnColumnHandEdit2
        {
            get
            {
                if ((this.mUIRow1ColumnColumnHandEdit2 == null))
                {
                    this.mUIRow1ColumnColumnHandEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnColumnHandEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]1[Column]ColumnHandle19";
                    this.mUIRow1ColumnColumnHandEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnColumnHandEdit2.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow1ColumnColumnHandEdit2;
            }
        }
        
        public DXCell UIItemCell17
        {
            get
            {
                if ((this.mUIItemCell17 == null))
                {
                    this.mUIItemCell17 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle21";
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell17.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell17;
            }
        }
        
        public DXTextEdit UIRow1ColumnColumnHandEdit11
        {
            get
            {
                if ((this.mUIRow1ColumnColumnHandEdit11 == null))
                {
                    this.mUIRow1ColumnColumnHandEdit11 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnColumnHandEdit11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]1[Column]ColumnHandle21";
                    this.mUIRow1ColumnColumnHandEdit11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnColumnHandEdit11.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow1ColumnColumnHandEdit11;
            }
        }
        
        public DXColumnHeader UIColumnHandle18ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle18ColumnHeader == null))
                {
                    this.mUIColumnHandle18ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle18ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlColumnHeader[View]gvItems[Column]ColumnHandle18";
                    this.mUIColumnHandle18ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle18ColumnHeader.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIColumnHandle18ColumnHeader;
            }
        }
        
        public DXCell UIMED3Cell
        {
            get
            {
                if ((this.mUIMED3Cell == null))
                {
                    this.mUIMED3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMED3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]4[Column]cItemNameDayR";
                    this.mUIMED3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMED3Cell.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIMED3Cell;
            }
        }
        
        public DXCell UIMED2Cell
        {
            get
            {
                if ((this.mUIMED2Cell == null))
                {
                    this.mUIMED2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMED2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]3[Column]cItemNameDayR";
                    this.mUIMED2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMED2Cell.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIMED2Cell;
            }
        }
        
        public DXCell UIRAPPORT1Cell
        {
            get
            {
                if ((this.mUIRAPPORT1Cell == null))
                {
                    this.mUIRAPPORT1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRAPPORT1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]cItemNameDayR";
                    this.mUIRAPPORT1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRAPPORT1Cell.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRAPPORT1Cell;
            }
        }
        
        public DXCell UIMED1Cell
        {
            get
            {
                if ((this.mUIMED1Cell == null))
                {
                    this.mUIMED1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMED1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]cItemNameDayR";
                    this.mUIMED1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMED1Cell.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIMED1Cell;
            }
        }
        
        public DXCell UIVISITTCell
        {
            get
            {
                if ((this.mUIVISITTCell == null))
                {
                    this.mUIVISITTCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVISITTCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]2[Column]cItemNameDayR";
                    this.mUIVISITTCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVISITTCell.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIVISITTCell;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle25";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXTextEdit UIRow0ColumnColumnHandEdit2
        {
            get
            {
                if ((this.mUIRow0ColumnColumnHandEdit2 == null))
                {
                    this.mUIRow0ColumnColumnHandEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnColumnHandEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]0[Column]ColumnHandle25";
                    this.mUIRow0ColumnColumnHandEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnColumnHandEdit2.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow0ColumnColumnHandEdit2;
            }
        }
        
        public DXCell UIItemCell18
        {
            get
            {
                if ((this.mUIItemCell18 == null))
                {
                    this.mUIItemCell18 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell18.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle26";
                    this.mUIItemCell18.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell18.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell18;
            }
        }
        
        public DXCell UIItemCell23
        {
            get
            {
                if ((this.mUIItemCell23 == null))
                {
                    this.mUIItemCell23 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell23.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle31";
                    this.mUIItemCell23.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell23.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell23;
            }
        }
        
        public DXTextEdit UIRow0ColumnColumnHandEdit3
        {
            get
            {
                if ((this.mUIRow0ColumnColumnHandEdit3 == null))
                {
                    this.mUIRow0ColumnColumnHandEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnColumnHandEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]0[Column]ColumnHandle26";
                    this.mUIRow0ColumnColumnHandEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnColumnHandEdit3.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow0ColumnColumnHandEdit3;
            }
        }
        
        public DXCell UIItemCell10
        {
            get
            {
                if ((this.mUIItemCell10 == null))
                {
                    this.mUIItemCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle26";
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell10.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell10;
            }
        }
        
        public DXCell UIItemCell19
        {
            get
            {
                if ((this.mUIItemCell19 == null))
                {
                    this.mUIItemCell19 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell19.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle31";
                    this.mUIItemCell19.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell19.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell19;
            }
        }
        
        public DXTextEdit UIRow1ColumnColumnHandEdit3
        {
            get
            {
                if ((this.mUIRow1ColumnColumnHandEdit3 == null))
                {
                    this.mUIRow1ColumnColumnHandEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnColumnHandEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]1[Column]ColumnHandle26";
                    this.mUIRow1ColumnColumnHandEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnColumnHandEdit3.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow1ColumnColumnHandEdit3;
            }
        }
        
        public DXCell UIItem2Cell1
        {
            get
            {
                if ((this.mUIItem2Cell1 == null))
                {
                    this.mUIItem2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]2[Column]ColumnHandle20";
                    this.mUIItem2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell1.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItem2Cell1;
            }
        }
        
        public DXCell UIItemCell20
        {
            get
            {
                if ((this.mUIItemCell20 == null))
                {
                    this.mUIItemCell20 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell20.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]2[Column]ColumnHandle25";
                    this.mUIItemCell20.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell20.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell20;
            }
        }
        
        public DXTextEdit UIRow2ColumnColumnHandEdit1
        {
            get
            {
                if ((this.mUIRow2ColumnColumnHandEdit1 == null))
                {
                    this.mUIRow2ColumnColumnHandEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnColumnHandEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]2[Column]ColumnHandle25";
                    this.mUIRow2ColumnColumnHandEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnColumnHandEdit1.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow2ColumnColumnHandEdit1;
            }
        }
        
        public DXCell UIItemCell110
        {
            get
            {
                if ((this.mUIItemCell110 == null))
                {
                    this.mUIItemCell110 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell110.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]2[Column]ColumnHandle26";
                    this.mUIItemCell110.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell110.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell110;
            }
        }
        
        public DXCell UIItemCell24
        {
            get
            {
                if ((this.mUIItemCell24 == null))
                {
                    this.mUIItemCell24 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell24.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]2[Column]ColumnHandle31";
                    this.mUIItemCell24.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell24.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIItemCell24;
            }
        }
        
        public DXTextEdit UIRow2ColumnColumnHandEdit2
        {
            get
            {
                if ((this.mUIRow2ColumnColumnHandEdit2 == null))
                {
                    this.mUIRow2ColumnColumnHandEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnColumnHandEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]2[Column]ColumnHandle26";
                    this.mUIRow2ColumnColumnHandEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnColumnHandEdit2.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIRow2ColumnColumnHandEdit2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIVelgoppgaveCell;
        
        private UIRow2147483647ColumncLookUpEdit mUIRow2147483647ColumncLookUpEdit;
        
        private DXCell mUIValgtCell;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXTextEdit mUIRow0ColumnColumnHandEdit;
        
        private DXCell mUIValgtCell1;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItemCell11;
        
        private DXTextEdit mUIRow1ColumnColumnHandEdit;
        
        private DXCell mUIItemCell21;
        
        private DXCell mUIItemCell3;
        
        private DXTextEdit mUIRow1ColumnColumnHandEdit1;
        
        private DXCheckBox mUICheckEditCheckBox;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell12;
        
        private DXTextEdit mUIRow2ColumnColumnHandEdit;
        
        private DXCell mUIValgtCell2;
        
        private DXCell mUIItemCell5;
        
        private DXCell mUIItemCell13;
        
        private DXTextEdit mUIRow3ColumnColumnHandEdit;
        
        private DXCheckBox mUICheckEditCheckBox1;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell14;
        
        private DXTextEdit mUIRow4ColumnColumnHandEdit;
        
        private DXCell mUIValgtCell3;
        
        private DXCell mUIItemCell7;
        
        private DXCell mUIItemCell15;
        
        private DXTextEdit mUIRow5ColumnColumnHandEdit;
        
        private DXCell mUIRAPPORT3Cell;
        
        private DXCell mUIItem0730Cell;
        
        private DXTextEdit mUIRow0ColumncFromTimeEEdit;
        
        private DXTextEdit mUIRow0ColumncToTimeEdiEdit;
        
        private DXCell mUIItemCell16;
        
        private DXCell mUIItemCell22;
        
        private DXTextEdit mUIRow0ColumnColumnHandEdit1;
        
        private DXCell mUIItem30mCell;
        
        private DXCell mUIItemCell8;
        
        private DXTextEdit mUIRow1ColumnColumnHandEdit2;
        
        private DXCell mUIItemCell17;
        
        private DXTextEdit mUIRow1ColumnColumnHandEdit11;
        
        private DXColumnHeader mUIColumnHandle18ColumnHeader;
        
        private DXCell mUIMED3Cell;
        
        private DXCell mUIMED2Cell;
        
        private DXCell mUIRAPPORT1Cell;
        
        private DXCell mUIMED1Cell;
        
        private DXCell mUIVISITTCell;
        
        private DXCell mUIItemCell9;
        
        private DXTextEdit mUIRow0ColumnColumnHandEdit2;
        
        private DXCell mUIItemCell18;
        
        private DXCell mUIItemCell23;
        
        private DXTextEdit mUIRow0ColumnColumnHandEdit3;
        
        private DXCell mUIItemCell10;
        
        private DXCell mUIItemCell19;
        
        private DXTextEdit mUIRow1ColumnColumnHandEdit3;
        
        private DXCell mUIItem2Cell1;
        
        private DXCell mUIItemCell20;
        
        private DXTextEdit mUIRow2ColumnColumnHandEdit1;
        
        private DXCell mUIItemCell110;
        
        private DXCell mUIItemCell24;
        
        private DXTextEdit mUIRow2ColumnColumnHandEdit2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow2147483647ColumncLookUpEdit : DXLookUpEdit
    {
        
        public UIRow2147483647ColumncLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsLookUpEdit[View]gvItems[Row]-2147483647[Column]cItemNameDayR";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Døgnrytme lag");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsLookUpEdit[View]gvItems[Row]-2147483647[Column]cItemNameDayRPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaBottomClient : DXTestControl
    {
        
        public UIPaBottomClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paBottom";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Døgnrytme lag");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSave";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Døgnrytme lag");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink3MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink3MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink3MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink3MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[3]";
                    this.mUIBarButtonItemLink3MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink3MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIBarButtonItemLink5MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink5MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink5MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink5MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[5]";
                    this.mUIBarButtonItemLink5MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink5MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIBarButtonItemLink1MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink1MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink1MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIBarButtonItemLink1MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink1MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIBarButtonItemLink4MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink4MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink4MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink4MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[4]";
                    this.mUIBarButtonItemLink4MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink4MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink3MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIBarButtonItemLink5MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIBarButtonItemLink1MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIBarButtonItemLink4MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISettekravtilpersonerWindow : DXWindow
    {
        
        public UISettekravtilpersonerWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) ";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) ");
            #endregion
        }
        
        #region Properties
        public UIGrpRequirementsClient UIGrpRequirementsClient
        {
            get
            {
                if ((this.mUIGrpRequirementsClient == null))
                {
                    this.mUIGrpRequirementsClient = new UIGrpRequirementsClient(this);
                }
                return this.mUIGrpRequirementsClient;
            }
        }
        
        public UIGsPanelControl1Client1 UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client1(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpRequirementsClient mUIGrpRequirementsClient;
        
        private UIGsPanelControl1Client1 mUIGsPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpRequirementsClient : DXTestControl
    {
        
        public UIGrpRequirementsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpRequirements";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) ");
            #endregion
        }
        
        #region Properties
        public UIGcRequirementTable UIGcRequirementTable
        {
            get
            {
                if ((this.mUIGcRequirementTable == null))
                {
                    this.mUIGcRequirementTable = new UIGcRequirementTable(this);
                }
                return this.mUIGcRequirementTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRequirementTable mUIGcRequirementTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRequirementTable : DXGrid
    {
        
        public UIGcRequirementTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) ");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]-2147483647[Column]gcolAmount" +
                        "";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) ");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow2147483647ColumngEdit
        {
            get
            {
                if ((this.mUIRow2147483647ColumngEdit == null))
                {
                    this.mUIRow2147483647ColumngEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementSpinEdit[View]gvRequirement[Row]-2147483647[Column]gcolAmount";
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
                    this.mUIRow2147483647ColumngEdit.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) ");
                    #endregion
                }
                return this.mUIRow2147483647ColumngEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]0[Column]gcolCompetance";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) ");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public UIRow0ColumngcolCompetLookUpEdit UIRow0ColumngcolCompetLookUpEdit
        {
            get
            {
                if ((this.mUIRow0ColumngcolCompetLookUpEdit == null))
                {
                    this.mUIRow0ColumngcolCompetLookUpEdit = new UIRow0ColumngcolCompetLookUpEdit(this);
                }
                return this.mUIRow0ColumngcolCompetLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow2147483647ColumngEdit;
        
        private DXCell mUIItemCell1;
        
        private UIRow0ColumngcolCompetLookUpEdit mUIRow0ColumngcolCompetLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow0ColumngcolCompetLookUpEdit : DXLookUpEdit
    {
        
        public UIRow0ColumngcolCompetLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]0[Column]gcolCompetance";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]0[Column]gcolCompetancePopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) ");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl1Client1 : DXTestControl
    {
        
        public UIGsPanelControl1Client1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) ");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSave";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) ");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISettekravtilpersonerWindow1 : DXWindow
    {
        
        public UISettekravtilpersonerWindow1()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Sette krav til personer på VISITT - Legevisitt (09.00 - 11.00) ";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sette krav til personer på VISITT - Legevisitt (09.00 - 11.00) ");
            #endregion
        }
        
        #region Properties
        public UIGrpRequirementsClient1 UIGrpRequirementsClient
        {
            get
            {
                if ((this.mUIGrpRequirementsClient == null))
                {
                    this.mUIGrpRequirementsClient = new UIGrpRequirementsClient1(this);
                }
                return this.mUIGrpRequirementsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpRequirementsClient1 mUIGrpRequirementsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpRequirementsClient1 : DXTestControl
    {
        
        public UIGrpRequirementsClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpRequirements";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Sette krav til personer på VISITT - Legevisitt (09.00 - 11.00) ");
            #endregion
        }
        
        #region Properties
        public UIGcRequirementTable1 UIGcRequirementTable
        {
            get
            {
                if ((this.mUIGcRequirementTable == null))
                {
                    this.mUIGcRequirementTable = new UIGcRequirementTable1(this);
                }
                return this.mUIGcRequirementTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRequirementTable1 mUIGcRequirementTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRequirementTable1 : DXGrid
    {
        
        public UIGcRequirementTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Sette krav til personer på VISITT - Legevisitt (09.00 - 11.00) ");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]-2147483647[Column]gcolAmount" +
                        "";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Sette krav til personer på VISITT - Legevisitt (09.00 - 11.00) ");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow2147483647ColumngEdit
        {
            get
            {
                if ((this.mUIRow2147483647ColumngEdit == null))
                {
                    this.mUIRow2147483647ColumngEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementSpinEdit[View]gvRequirement[Row]-2147483647[Column]gcolAmount";
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
                    this.mUIRow2147483647ColumngEdit.WindowTitles.Add("Sette krav til personer på VISITT - Legevisitt (09.00 - 11.00) ");
                    #endregion
                }
                return this.mUIRow2147483647ColumngEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]0[Column]gcolGroup";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Sette krav til personer på VISITT - Legevisitt (09.00 - 11.00) ");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow2147483647ColumngEdit;
        
        private DXCell mUIItemCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISettekravtilpersonerWindow2 : DXWindow
    {
        
        public UISettekravtilpersonerWindow2()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) på freda" +
                "g";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) på freda" +
                    "g");
            #endregion
        }
        
        #region Properties
        public UIGrpRequirementsClient2 UIGrpRequirementsClient
        {
            get
            {
                if ((this.mUIGrpRequirementsClient == null))
                {
                    this.mUIGrpRequirementsClient = new UIGrpRequirementsClient2(this);
                }
                return this.mUIGrpRequirementsClient;
            }
        }
        
        public UIGsPanelControl1Client2 UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client2(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpRequirementsClient2 mUIGrpRequirementsClient;
        
        private UIGsPanelControl1Client2 mUIGsPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpRequirementsClient2 : DXTestControl
    {
        
        public UIGrpRequirementsClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpRequirements";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) på freda" +
                    "g");
            #endregion
        }
        
        #region Properties
        public UIGcRequirementTable2 UIGcRequirementTable
        {
            get
            {
                if ((this.mUIGcRequirementTable == null))
                {
                    this.mUIGcRequirementTable = new UIGcRequirementTable2(this);
                }
                return this.mUIGcRequirementTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRequirementTable2 mUIGcRequirementTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRequirementTable2 : DXGrid
    {
        
        public UIGcRequirementTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) på freda" +
                    "g");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem2Cell
        {
            get
            {
                if ((this.mUIItem2Cell == null))
                {
                    this.mUIItem2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]0[Column]gcolAmount";
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) på freda" +
                            "g");
                    #endregion
                }
                return this.mUIItem2Cell;
            }
        }
        
        public DXCell UIT1Type1Cell
        {
            get
            {
                if ((this.mUIT1Type1Cell == null))
                {
                    this.mUIT1Type1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Type1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]0[Column]gcolCompetance";
                    this.mUIT1Type1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Type1Cell.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) på freda" +
                            "g");
                    #endregion
                }
                return this.mUIT1Type1Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem2Cell;
        
        private DXCell mUIT1Type1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl1Client2 : DXTestControl
    {
        
        public UIGsPanelControl1Client2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) på freda" +
                    "g");
            #endregion
        }
        
        #region Properties
        public DXButton UIAvbrytButton
        {
            get
            {
                if ((this.mUIAvbrytButton == null))
                {
                    this.mUIAvbrytButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnCancel";
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIAvbrytButton.WindowTitles.Add("Sette krav til personer på MED1 - Medisinutdeling morgen (08.30 - 09.00) på freda" +
                            "g");
                    #endregion
                }
                return this.mUIAvbrytButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIAvbrytButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISettekravtilpersonerWindow3 : DXWindow
    {
        
        public UISettekravtilpersonerWindow3()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
            #endregion
        }
        
        #region Properties
        public UIGrpRequirementsClient3 UIGrpRequirementsClient
        {
            get
            {
                if ((this.mUIGrpRequirementsClient == null))
                {
                    this.mUIGrpRequirementsClient = new UIGrpRequirementsClient3(this);
                }
                return this.mUIGrpRequirementsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpRequirementsClient3 mUIGrpRequirementsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpRequirementsClient3 : DXTestControl
    {
        
        public UIGrpRequirementsClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpRequirements";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
            #endregion
        }
        
        #region Properties
        public UIGcRequirementTable3 UIGcRequirementTable
        {
            get
            {
                if ((this.mUIGcRequirementTable == null))
                {
                    this.mUIGcRequirementTable = new UIGcRequirementTable3(this);
                }
                return this.mUIGcRequirementTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRequirementTable3 mUIGcRequirementTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRequirementTable3 : DXGrid
    {
        
        public UIGcRequirementTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]-2147483647[Column]gcolAmount" +
                        "";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow2147483647ColumngEdit
        {
            get
            {
                if ((this.mUIRow2147483647ColumngEdit == null))
                {
                    this.mUIRow2147483647ColumngEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementSpinEdit[View]gvRequirement[Row]-2147483647[Column]gcolAmount";
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
                    this.mUIRow2147483647ColumngEdit.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
                    #endregion
                }
                return this.mUIRow2147483647ColumngEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]0[Column]gcolCompetance";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public UIRow0ColumngcolCompetLookUpEdit1 UIRow0ColumngcolCompetLookUpEdit
        {
            get
            {
                if ((this.mUIRow0ColumngcolCompetLookUpEdit == null))
                {
                    this.mUIRow0ColumngcolCompetLookUpEdit = new UIRow0ColumngcolCompetLookUpEdit1(this);
                }
                return this.mUIRow0ColumngcolCompetLookUpEdit;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]1[Column]gcolGroup";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public UIRow1ColumngcolGroupLookUpEdit UIRow1ColumngcolGroupLookUpEdit
        {
            get
            {
                if ((this.mUIRow1ColumngcolGroupLookUpEdit == null))
                {
                    this.mUIRow1ColumngcolGroupLookUpEdit = new UIRow1ColumngcolGroupLookUpEdit(this);
                }
                return this.mUIRow1ColumngcolGroupLookUpEdit;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]2[Column]gcolPosCat";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public UIRow2ColumngcolPosCatLookUpEdit UIRow2ColumngcolPosCatLookUpEdit
        {
            get
            {
                if ((this.mUIRow2ColumngcolPosCatLookUpEdit == null))
                {
                    this.mUIRow2ColumngcolPosCatLookUpEdit = new UIRow2ColumngcolPosCatLookUpEdit(this);
                }
                return this.mUIRow2ColumngcolPosCatLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow2147483647ColumngEdit;
        
        private DXCell mUIItemCell1;
        
        private UIRow0ColumngcolCompetLookUpEdit1 mUIRow0ColumngcolCompetLookUpEdit;
        
        private DXCell mUIItemCell2;
        
        private UIRow1ColumngcolGroupLookUpEdit mUIRow1ColumngcolGroupLookUpEdit;
        
        private DXCell mUIItemCell3;
        
        private UIRow2ColumngcolPosCatLookUpEdit mUIRow2ColumngcolPosCatLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow0ColumngcolCompetLookUpEdit1 : DXLookUpEdit
    {
        
        public UIRow0ColumngcolCompetLookUpEdit1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]0[Column]gcolCompetance";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]0[Column]gcolCompetancePopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow1ColumngcolGroupLookUpEdit : DXLookUpEdit
    {
        
        public UIRow1ColumngcolGroupLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]1[Column]gcolGroup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]1[Column]gcolGroupPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow2ColumngcolPosCatLookUpEdit : DXLookUpEdit
    {
        
        public UIRow2ColumngcolPosCatLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]2[Column]gcolPosCat";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]2[Column]gcolPosCatPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Sette krav til personer på MIDDAG - Matservering middag (15.30 - 16.30) ");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : DXWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4001 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4001 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("GT-4001 - Informasjon");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
}
