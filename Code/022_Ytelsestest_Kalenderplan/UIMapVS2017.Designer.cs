// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _022_Ytelsestest_Kalenderplan.UIMapVS2017Classes
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v19_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMapVS2017
    {
        
        /// <summary>
        /// AddChesterShifts - Use 'AddChesterShiftsParams' to pass parameters into this method.
        /// </summary>
        public void AddChesterShifts()
        {
            #region Variable Declarations
            DXCell uIM1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIM1Cell;
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            DXTextEdit uIRow0ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit1;
            #endregion

            // Move 'M1' cell to cell
            uIItemCell.EnsureClickable(new Point(19, 8));
            Mouse.StartDragging(uIM1Cell, new Point(14, 7));
            Mouse.StopDragging(uIItemCell, new Point(19, 8));

            // Type 'm1{Tab}' in '[Row]0[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, this.AddChesterShiftsParams.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell2.EnsureClickable(new Point(15, 9));
            Mouse.StartDragging(uIItemCell1, new Point(45, 9));
            Mouse.StopDragging(uIItemCell2, new Point(15, 9));

            // Type 'm1{Tab}' in '[Row]0[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit1, this.AddChesterShiftsParams.UIRow0ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ApproveChester
        /// </summary>
        public void ApproveChester()
        {
            #region Variable Declarations
            DXCell uINSFNorsksykepleierfoCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UINSFNorsksykepleierfoCell;
            DXButton uIGodkjennButton = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UIGodkjennButton;
            DXButton uIJAButton = this.UIGT4006InformasjonWindow.UIJAButton;
            #endregion

            // Click 'NSF - Norsk sykepleierforbund' cell
            Mouse.Click(uINSFNorsksykepleierfoCell, new Point(36, 8));

            // Click 'Godkjenn' button
            Mouse.Click(uIGodkjennButton, new Point(1, 1));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// CheckEmpAtBottomOfListStep_3 - Use 'CheckEmpAtBottomOfListStep_3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpAtBottomOfListStep_3()
        {
            #region Variable Declarations
            DXTreeListCell uIItem119ChesterWinTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode118TreeListNode.UIItem119ChesterWinTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '119. Chester, Win' TreeListCell equals '119. Chester, Win'
            Assert.AreEqual(this.CheckEmpAtBottomOfListStep_3ExpectedValues.UIItem119ChesterWinTreeListCellValueAsString, uIItem119ChesterWinTreeListCell.ValueAsString, "Emp has wrong place in list");
        }
        
        /// <summary>
        /// CheckEmpAtTopOfListStep_3 - Use 'CheckEmpAtTopOfListStep_3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpAtTopOfListStep_3()
        {
            #region Variable Declarations
            DXTreeListCell uIItem1ChesterWinTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UIItem1ChesterWinTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '1. Chester, Win' TreeListCell equals '1. Chester, Win'
            Assert.AreEqual(this.CheckEmpAtTopOfListStep_3ExpectedValues.UIItem1ChesterWinTreeListCellValueAsString, uIItem1ChesterWinTreeListCell.ValueAsString, "Emp has wrong place in list");
        }
        
        /// <summary>
        /// MoveChesterToTopOfListStep_3
        /// </summary>
        public void MoveChesterToTopOfListStep_3()
        {
            #region Variable Declarations
            DXTreeListCell uIItem119ChesterWinTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode118TreeListNode.UIItem119ChesterWinTreeListCell;
            DXButton uIDropDownButtonArrowBButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIFlyttoppButton.UIDropDownButtonArrowBButton;
            DXMenuBaseButtonItem uIFlytttiltoppenMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIFlytttiltoppenMenuBaseButtonItem;
            #endregion

            // Click '119. Chester, Win' TreeListCell
            Mouse.Click(uIItem119ChesterWinTreeListCell, new Point(50, 6));

            // Click 'DropDownButtonArrowButton' button
            Mouse.Click(uIDropDownButtonArrowBButton, new Point(7, 9));

            // Click 'Flytt til toppen' MenuBaseButtonItem
            Mouse.Click(uIFlytttiltoppenMenuBaseButtonItem, new Point(74, 9));
        }
        
        /// <summary>
        /// RightClickLundekvamClausCell
        /// </summary>
        public void RightClickLundekvamClausCell()
        {
            #region Variable Declarations
            DXCell uILundekvamClausCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UILundekvamClausCell1;
            #endregion

            // Right-Click 'Lundekvam, Claus' cell
            Mouse.Click(uILundekvamClausCell1, MouseButtons.Right, ModifierKeys.None, new Point(130, 10));
        }
        
        /// <summary>
        /// CheckChesterApproved - Use 'CheckChesterApprovedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckChesterApproved()
        {
            #region Variable Declarations
            DXCell uIGodkjennCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell;
            DXCell uIGodkjennCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIGodkjennCell1;
            #endregion

            // Verify that the 'ValueAsString' property of 'Godkjenn' cell equals '1'
            Assert.AreEqual(this.CheckChesterApprovedExpectedValues.UIGodkjennCellValueAsString, uIGodkjennCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Godkjenn' cell equals '1'
            Assert.AreEqual(this.CheckChesterApprovedExpectedValues.UIGodkjennCell1ValueAsString, uIGodkjennCell1.ValueAsString);
        }
        
        #region Properties
        public virtual AddChesterShiftsParams AddChesterShiftsParams
        {
            get
            {
                if ((this.mAddChesterShiftsParams == null))
                {
                    this.mAddChesterShiftsParams = new AddChesterShiftsParams();
                }
                return this.mAddChesterShiftsParams;
            }
        }
        
        public virtual CheckEmpAtBottomOfListStep_3ExpectedValues CheckEmpAtBottomOfListStep_3ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpAtBottomOfListStep_3ExpectedValues == null))
                {
                    this.mCheckEmpAtBottomOfListStep_3ExpectedValues = new CheckEmpAtBottomOfListStep_3ExpectedValues();
                }
                return this.mCheckEmpAtBottomOfListStep_3ExpectedValues;
            }
        }
        
        public virtual CheckEmpAtTopOfListStep_3ExpectedValues CheckEmpAtTopOfListStep_3ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpAtTopOfListStep_3ExpectedValues == null))
                {
                    this.mCheckEmpAtTopOfListStep_3ExpectedValues = new CheckEmpAtTopOfListStep_3ExpectedValues();
                }
                return this.mCheckEmpAtTopOfListStep_3ExpectedValues;
            }
        }
        
        public virtual CheckChesterApprovedExpectedValues CheckChesterApprovedExpectedValues
        {
            get
            {
                if ((this.mCheckChesterApprovedExpectedValues == null))
                {
                    this.mCheckChesterApprovedExpectedValues = new CheckChesterApprovedExpectedValues();
                }
                return this.mCheckChesterApprovedExpectedValues;
            }
        }
        
        public UIAnsatteiarbeidsplanWindow UIAnsatteiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIAnsatteiarbeidsplanWindow == null))
                {
                    this.mUIAnsatteiarbeidsplanWindow = new UIAnsatteiarbeidsplanWindow();
                }
                return this.mUIAnsatteiarbeidsplanWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UIGT4003InformasjonWindow UIGT4003InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4003InformasjonWindow == null))
                {
                    this.mUIGT4003InformasjonWindow = new UIGT4003InformasjonWindow();
                }
                return this.mUIGT4003InformasjonWindow;
            }
        }
        
        public UIGT4006InformasjonWindow UIGT4006InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4006InformasjonWindow == null))
                {
                    this.mUIGT4006InformasjonWindow = new UIGT4006InformasjonWindow();
                }
                return this.mUIGT4006InformasjonWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddChesterShiftsParams mAddChesterShiftsParams;
        
        private CheckEmpAtBottomOfListStep_3ExpectedValues mCheckEmpAtBottomOfListStep_3ExpectedValues;
        
        private CheckEmpAtTopOfListStep_3ExpectedValues mCheckEmpAtTopOfListStep_3ExpectedValues;
        
        private CheckChesterApprovedExpectedValues mCheckChesterApprovedExpectedValues;
        
        private UIAnsatteiarbeidsplanWindow mUIAnsatteiarbeidsplanWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UIGT4003InformasjonWindow mUIGT4003InformasjonWindow;
        
        private UIGT4006InformasjonWindow mUIGT4006InformasjonWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddChesterShifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddChesterShiftsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'm1{Tab}' in '[Row]0[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "m1{Tab}";
        
        /// <summary>
        /// Type 'm1{Tab}' in '[Row]0[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit1SendKeys = "m1{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpAtBottomOfListStep_3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpAtBottomOfListStep_3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '119. Chester, Win' TreeListCell equals '119. Chester, Win'
        /// </summary>
        public string UIItem119ChesterWinTreeListCellValueAsString = "119. Chester, Win";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpAtTopOfListStep_3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpAtTopOfListStep_3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. Chester, Win' TreeListCell equals '1. Chester, Win'
        /// </summary>
        public string UIItem1ChesterWinTreeListCellValueAsString = "1. Chester, Win";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckChesterApproved'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckChesterApprovedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Godkjenn' cell equals '1'
        /// </summary>
        public string UIGodkjennCellValueAsString = "1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Godkjenn' cell equals '1'
        /// </summary>
        public string UIGodkjennCell1ValueAsString = "1";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsatteiarbeidsplanWindow : DXWindow
    {
        
        public UIAnsatteiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlOuterClient UIPanelControlOuterClient
        {
            get
            {
                if ((this.mUIPanelControlOuterClient == null))
                {
                    this.mUIPanelControlOuterClient = new UIPanelControlOuterClient(this);
                }
                return this.mUIPanelControlOuterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlOuterClient mUIPanelControlOuterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlOuterClient : DXTestControl
    {
        
        public UIPanelControlOuterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient mUIPanelControlLeftClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlLeftClient : DXTestControl
    {
        
        public UIPanelControlLeftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITreeListEmployeeTreeList UITreeListEmployeeTreeList
        {
            get
            {
                if ((this.mUITreeListEmployeeTreeList == null))
                {
                    this.mUITreeListEmployeeTreeList = new UITreeListEmployeeTreeList(this);
                }
                return this.mUITreeListEmployeeTreeList;
            }
        }
        
        public UIFlyttoppButton UIFlyttoppButton
        {
            get
            {
                if ((this.mUIFlyttoppButton == null))
                {
                    this.mUIFlyttoppButton = new UIFlyttoppButton(this);
                }
                return this.mUIFlyttoppButton;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListEmployeeTreeList mUITreeListEmployeeTreeList;
        
        private UIFlyttoppButton mUIFlyttoppButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListEmployeeTreeList : DXTreeList
    {
        
        public UITreeListEmployeeTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode118TreeListNode UINode118TreeListNode
        {
            get
            {
                if ((this.mUINode118TreeListNode == null))
                {
                    this.mUINode118TreeListNode = new UINode118TreeListNode(this);
                }
                return this.mUINode118TreeListNode;
            }
        }
        
        public UINode0TreeListNode UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode118TreeListNode mUINode118TreeListNode;
        
        private UINode0TreeListNode mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode118TreeListNode : DXTreeListNode
    {
        
        public UINode118TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node118";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem119ChesterWinTreeListCell
        {
            get
            {
                if ((this.mUIItem119ChesterWinTreeListCell == null))
                {
                    this.mUIItem119ChesterWinTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem119ChesterWinTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem119ChesterWinTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem119ChesterWinTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem119ChesterWinTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem119ChesterWinTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode : DXTreeListNode
    {
        
        public UINode0TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem1ChesterWinTreeListCell
        {
            get
            {
                if ((this.mUIItem1ChesterWinTreeListCell == null))
                {
                    this.mUIItem1ChesterWinTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem1ChesterWinTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem1ChesterWinTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem1ChesterWinTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem1ChesterWinTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem1ChesterWinTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFlyttoppButton : DXButton
    {
        
        public UIFlyttoppButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonMoveUpwards";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIDropDownButtonArrowBButton
        {
            get
            {
                if ((this.mUIDropDownButtonArrowBButton == null))
                {
                    this.mUIDropDownButtonArrowBButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIDropDownButtonArrowBButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonMoveUpwardsArrowButton";
                    this.mUIDropDownButtonArrowBButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButtonArrowButton";
                    this.mUIDropDownButtonArrowBButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIDropDownButtonArrowBButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIDropDownButtonArrowBButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIFlytttiltoppenMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIFlytttiltoppenMenuBaseButtonItem == null))
                {
                    this.mUIFlytttiltoppenMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIFlytttiltoppenMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiMoveToTop";
                    this.mUIFlytttiltoppenMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIFlytttiltoppenMenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIFlytttiltoppenMenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIDpnlVisualizationDockPanel UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        
        private UIDpnlVisualizationDockPanel mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIM1Cell
        {
            get
            {
                if ((this.mUIM1Cell == null))
                {
                    this.mUIM1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIM1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIM1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIM1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIM1Cell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_4";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit == null))
                {
                    this.mUIRow0ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_7";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_11";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_7";
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIM1Cell;
        
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIItemCell2;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable1 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable1(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable1 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable1 : DXGrid
    {
        
        public UIGcRosterPlanTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UILundekvamClausCell
        {
            get
            {
                if ((this.mUILundekvamClausCell == null))
                {
                    this.mUILundekvamClausCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILundekvamClausCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]84[Column]ColumnHandle1";
                    this.mUILundekvamClausCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILundekvamClausCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILundekvamClausCell;
            }
        }
        
        public DXCell UILundekvamClausCell1
        {
            get
            {
                if ((this.mUILundekvamClausCell1 == null))
                {
                    this.mUILundekvamClausCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUILundekvamClausCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]84[Column]EmployeeName";
                    this.mUILundekvamClausCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILundekvamClausCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILundekvamClausCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUILundekvamClausCell;
        
        private DXCell mUILundekvamClausCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlVisualizationDockPanel : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel3_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        
        public UITcSubtabsTabList UITcSubtabsTabList
        {
            get
            {
                if ((this.mUITcSubtabsTabList == null))
                {
                    this.mUITcSubtabsTabList = new UITcSubtabsTabList(this);
                }
                return this.mUITcSubtabsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList mUITcVisualizationTabList;
        
        private UITcSubtabsTabList mUITcSubtabsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcVisualizationTabList : DXTestControl
    {
        
        public UITcVisualizationTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UIXtraTabControlHeaderTabPage
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage == null))
                {
                    this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualizationPageHeader10";
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage;
            }
        }
        
        public UITpApprovalClient UITpApprovalClient
        {
            get
            {
                if ((this.mUITpApprovalClient == null))
                {
                    this.mUITpApprovalClient = new UITpApprovalClient(this);
                }
                return this.mUITpApprovalClient;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        
        private UITpApprovalClient mUITpApprovalClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpApprovalClient : DXTestControl
    {
        
        public UITpApprovalClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcMainCustom UILcMainCustom
        {
            get
            {
                if ((this.mUILcMainCustom == null))
                {
                    this.mUILcMainCustom = new UILcMainCustom(this);
                }
                return this.mUILcMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainCustom mUILcMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainCustom : DXTestControl
    {
        
        public UILcMainCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroup1LayoutGroup UILayoutControlGroup1LayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroup1LayoutGroup == null))
                {
                    this.mUILayoutControlGroup1LayoutGroup = new UILayoutControlGroup1LayoutGroup(this);
                }
                return this.mUILayoutControlGroup1LayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroup1LayoutGroup mUILayoutControlGroup1LayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlGroup1LayoutGroup : DXBaseLayoutItem
    {
        
        public UILayoutControlGroup1LayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroup1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlItem2LayoutControlItem UILayoutControlItem2LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem2LayoutControlItem == null))
                {
                    this.mUILayoutControlItem2LayoutControlItem = new UILayoutControlItem2LayoutControlItem(this);
                }
                return this.mUILayoutControlItem2LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlItem2LayoutControlItem mUILayoutControlItem2LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlItem2LayoutControlItem : DXBaseLayoutItem
    {
        
        public UILayoutControlItem2LayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcApprovalTable UIGcApprovalTable
        {
            get
            {
                if ((this.mUIGcApprovalTable == null))
                {
                    this.mUIGcApprovalTable = new UIGcApprovalTable(this);
                }
                return this.mUIGcApprovalTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcApprovalTable mUIGcApprovalTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcApprovalTable : DXGrid
    {
        
        public UIGcApprovalTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIChesterWinCell
        {
            get
            {
                if ((this.mUIChesterWinCell == null))
                {
                    this.mUIChesterWinCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIChesterWinCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]colName";
                    this.mUIChesterWinCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIChesterWinCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIChesterWinCell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColTillitsvalgt";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public UIRow0ColumnreqColTillComboBox UIRow0ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow0ColumnreqColTillComboBox == null))
                {
                    this.mUIRow0ColumnreqColTillComboBox = new UIRow0ColumnreqColTillComboBox(this);
                }
                return this.mUIRow0ColumnreqColTillComboBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIChesterWinCell;
        
        private DXCell mUIItemCell;
        
        private UIRow0ColumnreqColTillComboBox mUIRow0ColumnreqColTillComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow0ColumnreqColTillComboBox : DXComboBox
    {
        
        public UIRow0ColumnreqColTillComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList : DXListBox
    {
        
        public UIPopupImageComboBoxEdList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcSubtabsTabList : DXTestControl
    {
        
        public UITcSubtabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabs";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabControlViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewTabPageClient UIViewTabPageClient
        {
            get
            {
                if ((this.mUIViewTabPageClient == null))
                {
                    this.mUIViewTabPageClient = new UIViewTabPageClient(this);
                }
                return this.mUIViewTabPageClient;
            }
        }
        #endregion
        
        #region Fields
        private UIViewTabPageClient mUIViewTabPageClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient : DXTestControl
    {
        
        public UIViewTabPageClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[8]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIApprovalViewCustom UIApprovalViewCustom
        {
            get
            {
                if ((this.mUIApprovalViewCustom == null))
                {
                    this.mUIApprovalViewCustom = new UIApprovalViewCustom(this);
                }
                return this.mUIApprovalViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIApprovalViewCustom mUIApprovalViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIApprovalViewCustom : DXTestControl
    {
        
        public UIApprovalViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ApprovalView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ApprovalView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcMainCustom1 UILcMainCustom
        {
            get
            {
                if ((this.mUILcMainCustom == null))
                {
                    this.mUILcMainCustom = new UILcMainCustom1(this);
                }
                return this.mUILcMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainCustom1 mUILcMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainCustom1 : DXTestControl
    {
        
        public UILcMainCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroup1LayoutGroup1 UILayoutControlGroup1LayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroup1LayoutGroup == null))
                {
                    this.mUILayoutControlGroup1LayoutGroup = new UILayoutControlGroup1LayoutGroup1(this);
                }
                return this.mUILayoutControlGroup1LayoutGroup;
            }
        }
        
        public DXButton UIGodkjennButton
        {
            get
            {
                if ((this.mUIGodkjennButton == null))
                {
                    this.mUIGodkjennButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGodkjennButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnApprove";
                    this.mUIGodkjennButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGodkjennButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIGodkjennButton.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennButton;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroup1LayoutGroup1 mUILayoutControlGroup1LayoutGroup;
        
        private DXButton mUIGodkjennButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlGroup1LayoutGroup1 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroup1LayoutGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroup1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlItem2LayoutControlItem1 UILayoutControlItem2LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem2LayoutControlItem == null))
                {
                    this.mUILayoutControlItem2LayoutControlItem = new UILayoutControlItem2LayoutControlItem1(this);
                }
                return this.mUILayoutControlItem2LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlItem2LayoutControlItem1 mUILayoutControlItem2LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlItem2LayoutControlItem1 : DXBaseLayoutItem
    {
        
        public UILayoutControlItem2LayoutControlItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcApprovalTable1 UIGcApprovalTable
        {
            get
            {
                if ((this.mUIGcApprovalTable == null))
                {
                    this.mUIGcApprovalTable = new UIGcApprovalTable1(this);
                }
                return this.mUIGcApprovalTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcApprovalTable1 mUIGcApprovalTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcApprovalTable1 : DXGrid
    {
        
        public UIGcApprovalTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UINSFNorsksykepleierfoCell
        {
            get
            {
                if ((this.mUINSFNorsksykepleierfoCell == null))
                {
                    this.mUINSFNorsksykepleierfoCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINSFNorsksykepleierfoCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]colUnion";
                    this.mUINSFNorsksykepleierfoCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINSFNorsksykepleierfoCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINSFNorsksykepleierfoCell;
            }
        }
        
        public DXCell UIGodkjennCell
        {
            get
            {
                if ((this.mUIGodkjennCell == null))
                {
                    this.mUIGodkjennCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColTillitsvalgt";
                    this.mUIGodkjennCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell;
            }
        }
        
        public DXCell UIGodkjennCell1
        {
            get
            {
                if ((this.mUIGodkjennCell1 == null))
                {
                    this.mUIGodkjennCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGodkjennCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColLeder";
                    this.mUIGodkjennCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGodkjennCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUINSFNorsksykepleierfoCell;
        
        private DXCell mUIGodkjennCell;
        
        private DXCell mUIGodkjennCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT4003InformasjonWindow : DXWindow
    {
        
        public UIGT4003InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4003 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4003 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4003 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT4006InformasjonWindow : DXWindow
    {
        
        public UIGT4006InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4006 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4006 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4006 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
}
