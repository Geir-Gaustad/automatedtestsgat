// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _020_Test_Arbeidsplan_Bemanningsplan
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddComment - Use 'AddCommentParams' to pass parameters into this method.
        /// </summary>
        public void AddComment()
        {
            #region Variable Declarations
            DXTextEdit uIECommentEdit = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIECommentEdit;
            #endregion

            // Type 'Automatisert Test' in 'eComment' text box
            //ValueAsString
            uIECommentEdit.ValueAsString = this.AddCommentParams.UIECommentEditValueAsString;
        }
        
        /// <summary>
        /// AddGrunnbemanningLayer - Use 'AddGrunnbemanningLayerParams' to pass parameters into this method.
        /// </summary>
        public void AddGrunnbemanningLayer()
        {
            #region Variable Declarations
            DXTextEdit uIENameEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENameEdit;
            DXRadioGroup uIGrRotationRadioGroup = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIGrRotationRadioGroup;
            #endregion

            // Type 'Grunnbemanning' in 'eName' text box
            //ValueAsString
            uIENameEdit.ValueAsString = this.AddGrunnbemanningLayerParams.UIENameEditValueAsString;

            // Type '{Tab}' in 'eName' text box
            Keyboard.SendKeys(uIENameEdit, this.AddGrunnbemanningLayerParams.UIENameEditSendKeys, ModifierKeys.None);

            // Type '3' in 'grRotation' RadioGroup
            //SelectedIndex
            uIGrRotationRadioGroup.SelectedIndex = this.AddGrunnbemanningLayerParams.UIGrRotationRadioGroupSelectedIndex;
        }
        
        /// <summary>
        /// AddLederLayer - Use 'AddLederLayerParams' to pass parameters into this method.
        /// </summary>
        public void AddLederLayer()
        {
            #region Variable Declarations
            DXTextEdit uIENameEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENameEdit;
            DXTextEdit uIENumber1Edit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENumber1Edit;
            DXTextEdit uIENumber2Edit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENumber2Edit;
            DXRadioGroup uIGrRotationRadioGroup = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIGrRotationRadioGroup;
            DXTextEdit uIENumber0Edit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENumber0Edit;
            #endregion

            // Type 'Leder' in 'eName' text box
            //ValueAsString
            uIENameEdit.ValueAsString = this.AddLederLayerParams.UIENameEditValueAsString;

            // Type '{Tab}' in 'eName' text box
            Keyboard.SendKeys(uIENameEdit, this.AddLederLayerParams.UIENameEditSendKeys, ModifierKeys.None);

            // Type '37,50' in 'eNumber[1]' text box
            //ValueAsString
            uIENumber1Edit.ValueAsString = this.AddLederLayerParams.UIENumber1EditValueAsString;

            // Type '2' in 'eNumber[2]' text box
            //ValueAsString
            uIENumber2Edit.ValueAsString = this.AddLederLayerParams.UIENumber2EditValueAsString;

            // Type '2' in 'grRotation' RadioGroup
            //SelectedIndex
            uIGrRotationRadioGroup.SelectedIndex = this.AddLederLayerParams.UIGrRotationRadioGroupSelectedIndex;

            // Type '1' in 'eNumber[0]' text box
            //ValueAsString
            uIENumber0Edit.ValueAsString = this.AddLederLayerParams.UIENumber0EditValueAsString;
        }
        
        /// <summary>
        /// AddLederLayerManning - Use 'AddLederLayerManningParams' to pass parameters into this method.
        /// </summary>
        public void AddLederLayerManning()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell;
            DXCell uIItemCell11 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell11;
            DXGrid uIGcItemsTable = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow0ColumnColumnHandEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumnColumnHandEdit;
            DXCell uIItemCell21 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell21;
            DXCell uIItemCell31 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell31;
            DXTextEdit uIRow0ColumnColumnHandEdit1 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumnColumnHandEdit1;
            #endregion

            // Move cell to cell
            uIItemCell11.EnsureClickable(new Point(15, 9));
            Mouse.StartDragging(uIItemCell, new Point(23, 9));
            Mouse.StopDragging(uIItemCell11, new Point(15, 9));

            // Type '{NumPad1}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddLederLayerManningParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow0ColumnColumnHandEdit, this.AddLederLayerManningParams.UIRow0ColumnColumnHandEditSendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell31.EnsureClickable(new Point(12, 7));
            Mouse.StartDragging(uIItemCell21, new Point(39, 12));
            Mouse.StopDragging(uIItemCell31, new Point(12, 7));

            // Type '{NumPad1}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddLederLayerManningParams.UIGcItemsTableSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in '[Row]0[Column]ColumnHandle26' text box
            Keyboard.SendKeys(uIRow0ColumnColumnHandEdit1, this.AddLederLayerManningParams.UIRow0ColumnColumnHandEdit1SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddManning - Use 'AddManningParams' to pass parameters into this method.
        /// </summary>
        public void AddManning()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell;
            DXCell uIItemCell1 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell1;
            DXGrid uIGcItemsTable = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow0ColumnColumnHandEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumnColumnHandEdit;
            DXCell uIItemCell2 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell2;
            DXCell uIItemCell3 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell3;
            DXTextEdit uIRow1ColumnColumnHandEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow1ColumnColumnHandEdit;
            DXCell uIItemCell4 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell4;
            DXCell uIItemCell5 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell5;
            DXTextEdit uIRow2ColumnColumnHandEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow2ColumnColumnHandEdit;
            DXCell uIItemCell6 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell6;
            DXCell uIItemCell7 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell7;
            DXTextEdit uIRow3ColumnColumnHandEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow3ColumnColumnHandEdit;
            DXCell uIItemCell8 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell8;
            DXCell uIItemCell9 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell9;
            DXTextEdit uIRow4ColumnColumnHandEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow4ColumnColumnHandEdit;
            #endregion

            // Move cell to cell
            uIItemCell1.EnsureClickable(new Point(16, 5));
            Mouse.StartDragging(uIItemCell, new Point(22, 8));
            Mouse.StopDragging(uIItemCell1, new Point(16, 5));

            // Type '{NumPad2}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddManningParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow0ColumnColumnHandEdit, this.AddManningParams.UIRow0ColumnColumnHandEditSendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell3.EnsureClickable(new Point(15, 9));
            Mouse.StartDragging(uIItemCell2, new Point(40, 13));
            Mouse.StopDragging(uIItemCell3, new Point(15, 9));

            // Type '{NumPad1}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddManningParams.UIGcItemsTableSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in '[Row]1[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow1ColumnColumnHandEdit, this.AddManningParams.UIRow1ColumnColumnHandEditSendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell5.EnsureClickable(new Point(20, 5));
            Mouse.StartDragging(uIItemCell4, new Point(46, 5));
            Mouse.StopDragging(uIItemCell5, new Point(20, 5));

            // Type '{NumPad2}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddManningParams.UIGcItemsTableSendKeys2, ModifierKeys.None);

            // Type '{Enter}' in '[Row]2[Column]ColumnHandle23' text box
            Keyboard.SendKeys(uIRow2ColumnColumnHandEdit, this.AddManningParams.UIRow2ColumnColumnHandEditSendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell7.EnsureClickable(new Point(17, 8));
            Mouse.StartDragging(uIItemCell6, new Point(41, 5));
            Mouse.StopDragging(uIItemCell7, new Point(17, 8));

            // Type '{NumPad2}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddManningParams.UIGcItemsTableSendKeys3, ModifierKeys.None);

            // Type '{Enter}' in '[Row]3[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow3ColumnColumnHandEdit, this.AddManningParams.UIRow3ColumnColumnHandEditSendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell9.EnsureClickable(new Point(19, 8));
            Mouse.StartDragging(uIItemCell8, new Point(80, 7));
            Mouse.StopDragging(uIItemCell9, new Point(19, 8));

            // Type '{NumPad1}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddManningParams.UIGcItemsTableSendKeys4, ModifierKeys.None);

            // Type '{Enter}' in '[Row]4[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow4ColumnColumnHandEdit, this.AddManningParams.UIRow4ColumnColumnHandEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddNattLayer - Use 'AddNattLayerParams' to pass parameters into this method.
        /// </summary>
        public void AddNattLayer()
        {
            #region Variable Declarations
            DXTextEdit uIENameEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENameEdit;
            DXLookUpEdit uIDrdGroupLookUpEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIDrdGroupLookUpEdit;
            DXWindow uIPopupLookUpEditFormWindow = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIDrdGroupLookUpEdit.UIPopupLookUpEditFormWindow;
            DXRadioGroup uIGrRotationRadioGroup = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIGrRotationRadioGroup;
            #endregion

            // Type 'Natt' in 'eName' text box
            //ValueAsString
            uIENameEdit.ValueAsString = this.AddNattLayerParams.UIENameEditValueAsString;

            // Type '' in 'drdGroup' LookUpEdit
            //ValueAsString
            uIDrdGroupLookUpEdit.ValueAsString = this.AddNattLayerParams.UIDrdGroupLookUpEditValueAsString;

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow, new Point(33, 45));

            // Type '3' in 'grRotation' RadioGroup
            //SelectedIndex
            uIGrRotationRadioGroup.SelectedIndex = this.AddNattLayerParams.UIGrRotationRadioGroupSelectedIndex;

            // Type '{Tab}' in 'grRotation' RadioGroup
            Keyboard.SendKeys(uIGrRotationRadioGroup, this.AddNattLayerParams.UIGrRotationRadioGroupSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddNattManning - Use 'AddNattManningParams' to pass parameters into this method.
        /// </summary>
        public void AddNattManning()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell;
            DXCell uIItemCell12 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell12;
            DXGrid uIGcItemsTable = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow0ColumnColumnHandEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumnColumnHandEdit;
            #endregion

            // Move cell to cell
            uIItemCell12.EnsureClickable(new Point(15, 6));
            Mouse.StartDragging(uIItemCell, new Point(22, 8));
            Mouse.StopDragging(uIItemCell12, new Point(15, 6));

            // Type '{NumPad1}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddNattManningParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow0ColumnColumnHandEdit, this.AddNattManningParams.UIRow0ColumnColumnHandEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddNewStaffingLayer
        /// </summary>
        public void AddNewStaffingLayer()
        {
            #region Variable Declarations
            DXButton uINyttlagButton = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaTopPanelClient.UINyttlagButton;
            #endregion

            // Click 'Nytt lag' button
            Mouse.Click(uINyttlagButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddRequirementsToA1 - Use 'AddRequirementsToA1Params' to pass parameters into this method.
        /// </summary>
        public void AddRequirementsToA1()
        {
            #region Variable Declarations
            DXCell uIItemCell6 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell6;
            DXCell uIItemCell7 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell7;
            DXMenuBaseButtonItem uIBarButtonItemLink3MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink3MenuBaseButtonItem;
            DXCell uIItemCell = this.UISettekravtilpersonerWindow2.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell;
            DXTextEdit uIRow2147483647ColumngEdit = this.UISettekravtilpersonerWindow2.UIGrpRequirementsClient.UIGcRequirementTable.UIRow2147483647ColumngEdit;
            DXGrid uIGcRequirementTable = this.UISettekravtilpersonerWindow2.UIGrpRequirementsClient.UIGcRequirementTable;
            DXCell uIItemCell1 = this.UISettekravtilpersonerWindow2.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell1;
            DXWindow uIPopupLookUpEditFormWindow = this.UISettekravtilpersonerWindow2.UIGrpRequirementsClient.UIGcRequirementTable.UIRow0ColumngcolGroupLookUpEdit.UIPopupLookUpEditFormWindow;
            DXCell uIItemCell2 = this.UISettekravtilpersonerWindow2.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell2;
            DXWindow uIPopupLookUpEditFormWindow1 = this.UISettekravtilpersonerWindow2.UIGrpRequirementsClient.UIGcRequirementTable.UIRow1ColumngcolPosCatLookUpEdit.UIPopupLookUpEditFormWindow;
            DXCell uIItemCell3 = this.UISettekravtilpersonerWindow2.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell3;
            DXWindow uIPopupLookUpEditFormWindow2 = this.UISettekravtilpersonerWindow2.UIGrpRequirementsClient.UIGcRequirementTable.UIRow2ColumngcolGroupLookUpEdit.UIPopupLookUpEditFormWindow;
            DXButton uIGSSimpleButtonButton = this.UISettekravtilpersonerWindow2.UIGSPanelControlClient.UIGSSimpleButtonButton;
            #endregion

            // Move cell to cell
            uIItemCell7.EnsureClickable(new Point(17, 7));
            Mouse.StartDragging(uIItemCell6, new Point(43, 5));
            Mouse.StopDragging(uIItemCell7, new Point(17, 7));

            // Right-Click cell
            Mouse.Click(uIItemCell7, MouseButtons.Right, ModifierKeys.None, new Point(20, 9));

            // Click 'BarButtonItemLink[3]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink3MenuBaseButtonItem, new Point(76, 11));

            // Click cell
            Mouse.Click(uIItemCell, new Point(41, 10));

            // Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToA1Params.UIRow2147483647ColumngEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToA1Params.UIGcRequirementTableSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell1, new Point(174, 11));

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow, new Point(107, 42));

            // Click cell
            Mouse.Click(uIItemCell, new Point(41, 10));

            // Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToA1Params.UIRow2147483647ColumngEditSendKeys1, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToA1Params.UIGcRequirementTableSendKeys1, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell2, new Point(174, 9));

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow1, new Point(100, 178));

            // Click cell
            Mouse.Click(uIItemCell, new Point(44, 10));

            // Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToA1Params.UIRow2147483647ColumngEditSendKeys2, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell3, new Point(173, 8));

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow2, new Point(92, 57));

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddRequirementsToD1_1 - Use 'AddRequirementsToD1_1Params' to pass parameters into this method.
        /// </summary>
        public void AddRequirementsToD1_1()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell;
            DXCell uIItemCell1 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell1;
            DXMenuBaseButtonItem uIBarButtonItemLink3MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink3MenuBaseButtonItem;
            DXCell uIItemCell2 = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell;
            DXTextEdit uIRow2147483647ColumngEdit = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable.UIRow2147483647ColumngEdit;
            DXGrid uIGcRequirementTable = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable;
            #endregion

            // Move cell to cell
            uIItemCell1.EnsureClickable(new Point(15, 5));
            Mouse.StartDragging(uIItemCell, new Point(38, 9));
            Mouse.StopDragging(uIItemCell1, new Point(15, 5));

            // Right-Click cell
            Mouse.Click(uIItemCell1, MouseButtons.Right, ModifierKeys.None, new Point(15, 12));

            // Click 'BarButtonItemLink[3]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink3MenuBaseButtonItem, new Point(89, 9));

            // Click cell
            Mouse.Click(uIItemCell2, new Point(45, 9));

            // Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToD1_1Params.UIRow2147483647ColumngEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToD1_1Params.UIGcRequirementTableSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddRequirementsToD1_2 - Use 'AddRequirementsToD1_2Params' to pass parameters into this method.
        /// </summary>
        public void AddRequirementsToD1_2()
        {
            #region Variable Declarations
            DXLookUpEdit uIRow0ColumngcolCompetLookUpEdit = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable.UIRow0ColumngcolCompetLookUpEdit;
            DXCheckBox uICheckCheckBox = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable.UICheckCheckBox;
            DXCell uIItemCell = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell;
            DXTextEdit uIRow2147483647ColumngEdit = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable.UIRow2147483647ColumngEdit;
            DXGrid uIGcRequirementTable = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable;
            DXCell uIItemCell2 = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell2;
            DXWindow uIPopupLookUpEditFormWindow = this.UISettekravtilpersonerWindow.UIGrpRequirementsClient.UIGcRequirementTable.UIRow1ColumngcolPosCatLookUpEdit.UIPopupLookUpEditFormWindow;
            DXButton uIOKButton = this.UISettekravtilpersonerWindow.UIGsPanelControl1Client.UIOKButton;
            #endregion

            // Type '{Tab}' in '[Row]0[Column]gcolCompetance' LookUpEdit
            Keyboard.SendKeys(uIRow0ColumngcolCompetLookUpEdit, this.AddRequirementsToD1_2Params.UIRow0ColumngcolCompetLookUpEditSendKeys, ModifierKeys.None);

            // Select 'Check' check box
            uICheckCheckBox.Checked = this.AddRequirementsToD1_2Params.UICheckCheckBoxChecked;

            // Click cell
            Mouse.Click(uIItemCell, new Point(44, 11));

            // Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToD1_2Params.UIRow2147483647ColumngEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToD1_2Params.UIGcRequirementTableSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell2, new Point(172, 9));

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow, new Point(108, 178));

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddRequirementsToDH - Use 'AddRequirementsToDHParams' to pass parameters into this method.
        /// </summary>
        public void AddRequirementsToDH()
        {
            #region Variable Declarations
            DXCell uIItem2Cell = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItem2Cell;
            DXCell uIItem2Cell1 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItem2Cell1;
            DXMenuBaseButtonItem uIBarButtonItemLink3MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink3MenuBaseButtonItem;
            DXCell uIItemCell = this.UISettekravtilpersonerWindow1.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell;
            DXTextEdit uIRow2147483647ColumngEdit = this.UISettekravtilpersonerWindow1.UIGrpRequirementsClient.UIGcRequirementTable.UIRow2147483647ColumngEdit;
            DXGrid uIGcRequirementTable = this.UISettekravtilpersonerWindow1.UIGrpRequirementsClient.UIGcRequirementTable;
            DXCell uIItemCell1 = this.UISettekravtilpersonerWindow1.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell1;
            DXWindow uIPopupLookUpEditFormWindow = this.UISettekravtilpersonerWindow1.UIGrpRequirementsClient.UIGcRequirementTable.UIRow0ColumngcolGroupLookUpEdit.UIPopupLookUpEditFormWindow;
            DXCell uIItemCell2 = this.UISettekravtilpersonerWindow1.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell2;
            DXWindow uIPopupLookUpEditFormWindow1 = this.UISettekravtilpersonerWindow1.UIGrpRequirementsClient.UIGcRequirementTable.UIRow1ColumngcolGroupLookUpEdit.UIPopupLookUpEditFormWindow;
            DXButton uIOKButton = this.UISettekravtilpersonerWindow1.UIGsPanelControl1Client.UIOKButton;
            #endregion

            // Move '2' cell to '2' cell
            uIItem2Cell1.EnsureClickable(new Point(15, 10));
            Mouse.StartDragging(uIItem2Cell, new Point(41, 10));
            Mouse.StopDragging(uIItem2Cell1, new Point(15, 10));

            // Right-Click '2' cell
            Mouse.Click(uIItem2Cell1, MouseButtons.Right, ModifierKeys.None, new Point(15, 10));

            // Click 'BarButtonItemLink[3]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink3MenuBaseButtonItem, new Point(89, 12));

            // Click cell
            Mouse.Click(uIItemCell, new Point(45, 10));

            // Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToDHParams.UIRow2147483647ColumngEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToDHParams.UIGcRequirementTableSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell1, new Point(174, 9));

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow, new Point(105, 58));

            // Click cell
            Mouse.Click(uIItemCell, new Point(49, 9));

            // Type '1' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToDHParams.UIRow2147483647ColumngEditSendKeys1, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToDHParams.UIGcRequirementTableSendKeys1, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell2, new Point(175, 10));

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow1, new Point(99, 44));

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddRequirementsToL - Use 'AddRequirementsToLParams' to pass parameters into this method.
        /// </summary>
        public void AddRequirementsToL()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell;
            DXCell uIItem1Cell1 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItem1Cell1;
            DXCell uIItem1Cell2 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItem1Cell2;
            DXCell uIItemCell11 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell11;
            DXCell uIItemCell21 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell21;
            DXCell uIItem1Cell5 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItem1Cell5;
            DXCell uIItem1Cell6 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItem1Cell6;
            DXCell uIItemCell31 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell31;
            DXMenuBaseButtonItem uIBarButtonItemLink3MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink3MenuBaseButtonItem;
            DXCell uIItemCell1 = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell;
            DXTextEdit uIRow2147483647ColumngEdit = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIRow2147483647ColumngEdit;
            DXGrid uIGcRequirementTable = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable;
            DXCell uIItemCell12 = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIItemCell1;
            DXWindow uIPopupLookUpEditFormWindow = this.UISettekravtilpersonerWindow3.UIGrpRequirementsClient.UIGcRequirementTable.UIRow0ColumngcolPosCatLookUpEdit.UIPopupLookUpEditFormWindow;
            DXButton uIOKButton = this.UISettekravtilpersonerWindow3.UIGsPanelControl1Client.UIOKButton;
            #endregion

            // Click cell while pressing Control
            Mouse.Click(uIItemCell, MouseButtons.Left, ModifierKeys.Control, new Point(19, 6));

            // Click '1' cell while pressing Control
            Mouse.Click(uIItem1Cell1, MouseButtons.Left, ModifierKeys.Control, new Point(10, 6));

            // Click '1' cell while pressing Control
            Mouse.Click(uIItem1Cell2, MouseButtons.Left, ModifierKeys.Control, new Point(14, 8));

            // Click cell while pressing Control
            Mouse.Click(uIItemCell11, MouseButtons.Left, ModifierKeys.Control, new Point(8, 8));

            // Click cell while pressing Control
            Mouse.Click(uIItemCell21, MouseButtons.Left, ModifierKeys.Control, new Point(14, 6));

            // Click '1' cell while pressing Control
            Mouse.Click(uIItem1Cell5, MouseButtons.Left, ModifierKeys.Control, new Point(12, 8));

            // Click '1' cell while pressing Control
            Mouse.Click(uIItem1Cell6, MouseButtons.Left, ModifierKeys.Control, new Point(8, 8));

            // Click cell while pressing Control
            Mouse.Click(uIItemCell31, MouseButtons.Left, ModifierKeys.Control, new Point(18, 6));

            // Right-Click cell
            Mouse.Click(uIItemCell31, MouseButtons.Right, ModifierKeys.None, new Point(18, 6));

            // Click 'BarButtonItemLink[3]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink3MenuBaseButtonItem, new Point(78, 11));

            // Click cell
            Mouse.Click(uIItemCell1, new Point(43, 7));

            // Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
            Keyboard.SendKeys(uIRow2147483647ColumngEdit, this.AddRequirementsToLParams.UIRow2147483647ColumngEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'gcRequirement' table
            Keyboard.SendKeys(uIGcRequirementTable, this.AddRequirementsToLParams.UIGcRequirementTableSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell12, new Point(176, 9));

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow, new Point(109, 71));

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddVinterferieLayer - Use 'AddVinterferieLayerParams' to pass parameters into this method.
        /// </summary>
        public void AddVinterferieLayer()
        {
            #region Variable Declarations
            DXTextEdit uIENameEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENameEdit;
            DXDateTimePicker uIPceDateDateTimeEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIDtFromDateCustom.UIPceDateDateTimeEdit;
            DXTextEdit uIENumber2Edit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENumber2Edit;
            DXWindow uIPopupLookUpEditFormWindow = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIDrdLayerTypeLookUpEdit.UIPopupLookUpEditFormWindow;
            #endregion

            // Type 'Vinterferie' in 'eName' text box
            //ValueAsString
            uIENameEdit.ValueAsString = this.AddVinterferieLayerParams.UIENameEditValueAsString;

            // Type '2022-01-24 [SelectionStart]0' in 'pceDate' DateTimeEdit
            //ValueAsString
            uIPceDateDateTimeEdit.ValueAsString = this.AddVinterferieLayerParams.UIPceDateDateTimeEditValueAsString;

            // Type '2 [SelectionStart]0[SelectionLength]1' in 'eNumber[2]' text box
            //ValueAsString
            uIENumber2Edit.ValueAsString = this.AddVinterferieLayerParams.UIENumber2EditValueAsString;

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow, new Point(65, 43));
        }
        
        /// <summary>
        /// AddVinterferieLayerManning - Use 'AddVinterferieLayerManningParams' to pass parameters into this method.
        /// </summary>
        public void AddVinterferieLayerManning()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItemCell;
            DXCell uIItem1Cell11 = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIItem1Cell11;
            DXGrid uIGcItemsTable = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable;
            DXTextEdit uIRow0ColumnColumnHandEdit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIGcItemsTable.UIRow0ColumnColumnHandEdit;
            #endregion

            // Move cell to '1' cell
            uIItem1Cell11.EnsureClickable(new Point(17, 8));
            Mouse.StartDragging(uIItemCell, new Point(488, 43));
            Mouse.StopDragging(uIItem1Cell11, new Point(17, 8));

            // Type '{NumPad1}' in 'gcItems' table
            Keyboard.SendKeys(uIGcItemsTable, this.AddVinterferieLayerManningParams.UIGcItemsTableSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
            Keyboard.SendKeys(uIRow0ColumnColumnHandEdit, this.AddVinterferieLayerManningParams.UIRow0ColumnColumnHandEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// CheckOkEnabled - Use 'CheckOkEnabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOkEnabled()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIBemanningsplanWindow.UIPaBottomClient.UIOKButton;
            #endregion

            // Verify that the 'Enabled' property of 'Ok' button equals 'True'
            Assert.AreEqual(this.CheckOkEnabledExpectedValues.UIOKButtonEnabled, uIOKButton.Enabled, "Ok er ikke tilgjegelig");
        }
        
        /// <summary>
        /// CheckPlanNameEmpty - Use 'CheckPlanNameEmptyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlanNameEmpty()
        {
            #region Variable Declarations
            DXTextEdit uIENameEdit = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENameEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'eName' text box equals ''
            Assert.AreEqual(this.CheckPlanNameEmptyExpectedValues.UIENameEditValueAsString, uIENameEdit.ValueAsString, "Uventet navn på plan");
        }
        
        /// <summary>
        /// CheckPlanNameEmptyAndDraft - Use 'CheckPlanNameEmptyAndDraftExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlanNameEmptyAndDraft()
        {
            #region Variable Declarations
            DXTextEdit uIENameEdit = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENameEdit;
            DXCheckBox uIChkDraftCheckBox = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIChkDraftCheckBox;
            #endregion

            // Verify that the 'ValueAsString' property of 'eName' text box equals ''
            Assert.AreEqual(this.CheckPlanNameEmptyAndDraftExpectedValues.UIENameEditValueAsString, uIENameEdit.ValueAsString, "Navn er ikke tomt");

            // Verify that the 'ValueAsString' property of 'chkDraft' check box equals 'True'
            Assert.AreEqual(this.CheckPlanNameEmptyAndDraftExpectedValues.UIChkDraftCheckBoxValueAsString, uIChkDraftCheckBox.ValueAsString, "Kladd er ikke valgt");
        }
        
        /// <summary>
        /// CheckStaffingPlans - Use 'CheckStaffingPlansExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckStaffingPlans()
        {
            #region Variable Declarations
            DXCell uIDuplikatCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIGcStaffingPlansTable.UIDuplikatCell;
            DXCell uINattevakterSPLCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIGcStaffingPlansTable.UINattevakterSPLCell;
            DXCell uIQ12022Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIGcStaffingPlansTable.UIQ12022Cell;
            #endregion

            // Verify that the 'Name' property of 'Duplikat' cell equals 'gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]0[Column]gcolPlan'
            Assert.AreEqual(this.CheckStaffingPlansExpectedValues.UIDuplikatCellName, uIDuplikatCell.Name);

            // Verify that the 'Name' property of 'Nattevakter SPL' cell equals 'gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]1[Column]gcolPlan'
            Assert.AreEqual(this.CheckStaffingPlansExpectedValues.UINattevakterSPLCellName, uINattevakterSPLCell.Name);

            // Verify that the 'Name' property of 'Q1 2022' cell equals 'gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]2[Column]gcolPlan'
            Assert.AreEqual(this.CheckStaffingPlansExpectedValues.UIQ12022CellName, uIQ12022Cell.Name);
        }
        
        /// <summary>
        /// CheckValues_Step_25 - Use 'CheckValues_Step_25ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValues_Step_25()
        {
            #region Variable Declarations
            DXCell uIItem13393Cell = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UITpWeekHoursClient.UIPWeekHourPanelClient.UIPMainPanelClient.UIPTotalsPanelClient.UIGcTotalsTable.UIItem13393Cell;
            DXCell uIItem377Cell = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UITpWeekHoursClient.UIPWeekHourPanelClient.UIPMainPanelClient.UIPTotalsPanelClient.UIGcTotalsTable.UIItem377Cell;
            #endregion

            // Verify that the 'ValueAsString' property of '133,93' cell equals '133,93'
            Assert.AreEqual(this.CheckValues_Step_25ExpectedValues.UIItem13393CellValueAsString, uIItem13393Cell.ValueAsString, "Feil timer gj.snitt pr. uke");

            // Verify that the 'ValueAsString' property of '3,77' cell equals '3,77'
            Assert.AreEqual(this.CheckValues_Step_25ExpectedValues.UIItem377CellValueAsString, uIItem377Cell.ValueAsString, "Feil gj.snitt årsveksbehov");
        }
        
        /// <summary>
        /// CheckValues_Step_9 - Use 'CheckValues_Step_9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValues_Step_9()
        {
            #region Variable Declarations
            DXCell uIItem32817Cell = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UITpHoursAndPositionsClient.UIPHoursAndPositionsPaClient.UIPMainPanelClient.UIPTotalsPanelClient.UIGcTotalsTable.UIItem32817Cell;
            DXCell uIItem923Cell = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UITpHoursAndPositionsClient.UIPHoursAndPositionsPaClient.UIPMainPanelClient.UIPTotalsPanelClient.UIGcTotalsTable.UIItem923Cell;
            #endregion

            // Verify that the 'ValueAsString' property of '328,17' cell equals '328,17'
            Assert.AreEqual(this.CheckValues_Step_9ExpectedValues.UIItem32817CellValueAsString, uIItem32817Cell.ValueAsString, "Feil i gjennomsnitt timer pr. uke");

            // Verify that the 'ValueAsString' property of '9,23' cell equals '9,23'
            Assert.AreEqual(this.CheckValues_Step_9ExpectedValues.UIItem923CellValueAsString, uIItem923Cell.ValueAsString, "Feil i gj.snitt årsverksbehov");
        }
        
        /// <summary>
        /// ClickDuplicateStaffingplan
        /// </summary>
        public void ClickDuplicateStaffingplan()
        {
            #region Variable Declarations
            DXButton uIDupliserButton = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIDupliserButton;
            #endregion

            // Click '&Dupliser' button
            Mouse.Click(uIDupliserButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickEditLayer
        /// </summary>
        public void ClickEditLayer()
        {
            #region Variable Declarations
            DXButton uIEndrelagButton = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaTopPanelClient.UIEndrelagButton;
            #endregion

            // Click 'Endre lag' button
            Mouse.Click(uIEndrelagButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickNewStaffingplan
        /// </summary>
        public void ClickNewStaffingplan()
        {
            #region Variable Declarations
            DXButton uINYButton = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UINYButton;
            #endregion

            // Click '&Ny' button
            Mouse.Click(uINYButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickOkSaveStaffingLayer
        /// </summary>
        public void ClickOkSaveStaffingLayer()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIBemanningsplanlagWindow.UIPaBottomClient.UIOKButton;
            #endregion

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickOkSaveStaffingPlan
        /// </summary>
        public void ClickOkSaveStaffingPlan()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIBemanningsplanWindow.UIPaBottomClient.UIOKButton;
            #endregion

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DeleteStaffingplan
        /// </summary>
        public void DeleteStaffingplan()
        {
            #region Variable Declarations
            DXButton uISlettButton = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UISlettButton;
            DXButton uIGSSimpleButtonButton = this.UIItemWindow1.UIGSSimpleButtonButton;
            #endregion

            // Click '&Slett' button
            Mouse.Click(uISlettButton, new Point(1, 1));

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }
        
        /// <summary>
        /// OpenExcelFromSumTab
        /// </summary>
        public void OpenExcelFromSumTab()
        {
            #region Variable Declarations
            DXGridBand uIBand_DockedLeftGridBand = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UITpSumClient.UIPMainPanelClient.UIGcSumDemandTable.UIBand_DockedLeftGridBand;
            DXMenuBaseButtonItem uIBarButtonItemLink5MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink5MenuBaseButtonItem;
            #endregion

            // Right-Click 'Band_DockedLeft' GridBand
            Mouse.Click(uIBand_DockedLeftGridBand, MouseButtons.Right, ModifierKeys.None, new Point(86, 9));

            // Click 'BarButtonItemLink[5]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink5MenuBaseButtonItem, new Point(104, 12));
        }
        
        /// <summary>
        /// OpenExcelFromTimeYearPlanTab
        /// </summary>
        public void OpenExcelFromTimeYearPlanTab()
        {
            #region Variable Declarations
            DXGridBand uIBand_DockedLeftGridBand = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UITpHoursAndPositionsClient.UIPHoursAndPositionsPaClient.UIPMainPanelClient.UIPTopPanelClient.UIGcStaffingWeekHourSuTable.UIBand_DockedLeftGridBand;
            DXMenuBaseButtonItem uIBarButtonItemLink5MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink5MenuBaseButtonItem;
            #endregion

            // Right-Click 'Band_DockedLeft' GridBand
            Mouse.Click(uIBand_DockedLeftGridBand, MouseButtons.Right, ModifierKeys.None, new Point(46, 7));

            // Click 'BarButtonItemLink[5]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink5MenuBaseButtonItem, new Point(111, 13));
        }
        
        /// <summary>
        /// OpenExcelFromTimeYearTab
        /// </summary>
        public void OpenExcelFromTimeYearTab()
        {
            #region Variable Declarations
            DXGridBand uIBand_Week_1GridBand = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UITpWeekHoursClient.UIPWeekHourPanelClient.UIPMainPanelClient.UIPTopPanelClient.UIGcStaffingWeekHourSuTable.UIBand_Week_1GridBand;
            DXMenuBaseButtonItem uIBarButtonItemLink5MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink5MenuBaseButtonItem;
            #endregion

            // Right-Click 'Band_Week_1' GridBand
            Mouse.Click(uIBand_Week_1GridBand, MouseButtons.Right, ModifierKeys.None, new Point(49, 9));

            // Click 'BarButtonItemLink[5]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink5MenuBaseButtonItem, new Point(88, 9));
        }
        
        /// <summary>
        /// OpenExcelTotalFromTimeYearTab
        /// </summary>
        public void OpenExcelTotalFromTimeYearTab()
        {
            #region Variable Declarations
            DXColumnHeader uIGcTotalHoursColumnHeader = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UITpWeekHoursClient.UIPWeekHourPanelClient.UIPMainPanelClient.UIPTotalsPanelClient.UIGcTotalsTable.UIGcTotalHoursColumnHeader;
            DXMenuBaseButtonItem uIBarButtonItemLink5MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIBarButtonItemLink5MenuBaseButtonItem;
            #endregion

            // Right-Click 'gcTotalHours' column header
            Mouse.Click(uIGcTotalHoursColumnHeader, MouseButtons.Right, ModifierKeys.None, new Point(67, 9));

            // Click 'BarButtonItemLink[5]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink5MenuBaseButtonItem, new Point(99, 11));
        }
        
        /// <summary>
        /// SelectDraft - Use 'SelectDraftParams' to pass parameters into this method.
        /// </summary>
        public void SelectDraft()
        {
            #region Variable Declarations
            DXCheckBox uIChkDraftCheckBox = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIChkDraftCheckBox;
            #endregion

            // Select 'chkDraft' check box
            uIChkDraftCheckBox.Checked = this.SelectDraftParams.UIChkDraftCheckBoxChecked;
        }
        
        /// <summary>
        /// SelectFirstLayer
        /// </summary>
        public void SelectFirstLayer()
        {
            #region Variable Declarations
            DXCell uIGrunnbemanningCell = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UIGrunnbemanningCell;
            #endregion

            // Click 'Grunnbemanning' cell
            Mouse.Click(uIGrunnbemanningCell, new Point(103, 8));
        }
        
        /// <summary>
        /// SelectHoursYearTab
        /// </summary>
        public void SelectHoursYearTab()
        {
            #region Variable Declarations
            DXTestControl uIXtraTabControlHeaderTabPage = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UIXtraTabControlHeaderTabPage;
            #endregion

            // Click 'XtraTabControlHeader' tab
            Mouse.Click(uIXtraTabControlHeaderTabPage, new Point(37, 7));
        }
        
        /// <summary>
        /// SelectSecondLayer
        /// </summary>
        public void SelectSecondLayer()
        {
            #region Variable Declarations
            DXCell uILederCell = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccLayersScrollableControl.UIPaMainPanelClient.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIPaMainPanelClient.UIGcPlanTable.UILederCell;
            #endregion

            // Click 'Leder' cell
            Mouse.Click(uILederCell, new Point(85, 10));
        }
                
        /// <summary>
        /// SelectSumTab
        /// </summary>
        public void SelectSumTab()
        {
            #region Variable Declarations
            DXTestControl uIXtraTabControlHeaderTabPage1 = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccSumScrollableControl.UITcGraphicsTabList.UIXtraTabControlHeaderTabPage1;
            #endregion

            // Click 'XtraTabControlHeader' tab
            Mouse.Click(uIXtraTabControlHeaderTabPage1, new Point(17, 9));
        }
        
        /// <summary>
        /// SendTab - Use 'SendTabParams' to pass parameters into this method.
        /// </summary>
        public void SendTab()
        {
            #region Variable Declarations
            DXTextEdit uIENumber0Edit = this.UIBemanningsplanlagWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIENumber0Edit;
            #endregion

            // Type '{Tab}' in 'eNumber[0]' text box
            Keyboard.SendKeys(uIENumber0Edit, this.SendTabParams.UIENumber0EditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// UncheckDraft - Use 'UncheckDraftParams' to pass parameters into this method.
        /// </summary>
        public void UncheckDraft()
        {
            #region Variable Declarations
            DXCheckBox uIChkDraftCheckBox = this.UIBemanningsplanWindow.UIPaNavbarsPanelClient.UIGsMainControlNavBar.UINbgccDetailsScrollableControl.UIChkDraftCheckBox;
            #endregion

            // Clear 'chkDraft' check box
            uIChkDraftCheckBox.Checked = this.UncheckDraftParams.UIChkDraftCheckBoxChecked;
        }
        
        #region Properties
        public virtual AddCommentParams AddCommentParams
        {
            get
            {
                if ((this.mAddCommentParams == null))
                {
                    this.mAddCommentParams = new AddCommentParams();
                }
                return this.mAddCommentParams;
            }
        }
        
        public virtual AddGrunnbemanningLayerParams AddGrunnbemanningLayerParams
        {
            get
            {
                if ((this.mAddGrunnbemanningLayerParams == null))
                {
                    this.mAddGrunnbemanningLayerParams = new AddGrunnbemanningLayerParams();
                }
                return this.mAddGrunnbemanningLayerParams;
            }
        }
        
        public virtual AddLederLayerParams AddLederLayerParams
        {
            get
            {
                if ((this.mAddLederLayerParams == null))
                {
                    this.mAddLederLayerParams = new AddLederLayerParams();
                }
                return this.mAddLederLayerParams;
            }
        }
        
        public virtual AddLederLayerManningParams AddLederLayerManningParams
        {
            get
            {
                if ((this.mAddLederLayerManningParams == null))
                {
                    this.mAddLederLayerManningParams = new AddLederLayerManningParams();
                }
                return this.mAddLederLayerManningParams;
            }
        }
        
        public virtual AddManningParams AddManningParams
        {
            get
            {
                if ((this.mAddManningParams == null))
                {
                    this.mAddManningParams = new AddManningParams();
                }
                return this.mAddManningParams;
            }
        }
        
        public virtual AddNattLayerParams AddNattLayerParams
        {
            get
            {
                if ((this.mAddNattLayerParams == null))
                {
                    this.mAddNattLayerParams = new AddNattLayerParams();
                }
                return this.mAddNattLayerParams;
            }
        }
        
        public virtual AddNattManningParams AddNattManningParams
        {
            get
            {
                if ((this.mAddNattManningParams == null))
                {
                    this.mAddNattManningParams = new AddNattManningParams();
                }
                return this.mAddNattManningParams;
            }
        }
        
        public virtual AddRequirementsToA1Params AddRequirementsToA1Params
        {
            get
            {
                if ((this.mAddRequirementsToA1Params == null))
                {
                    this.mAddRequirementsToA1Params = new AddRequirementsToA1Params();
                }
                return this.mAddRequirementsToA1Params;
            }
        }
        
        public virtual AddRequirementsToD1_1Params AddRequirementsToD1_1Params
        {
            get
            {
                if ((this.mAddRequirementsToD1_1Params == null))
                {
                    this.mAddRequirementsToD1_1Params = new AddRequirementsToD1_1Params();
                }
                return this.mAddRequirementsToD1_1Params;
            }
        }
        
        public virtual AddRequirementsToD1_2Params AddRequirementsToD1_2Params
        {
            get
            {
                if ((this.mAddRequirementsToD1_2Params == null))
                {
                    this.mAddRequirementsToD1_2Params = new AddRequirementsToD1_2Params();
                }
                return this.mAddRequirementsToD1_2Params;
            }
        }
        
        public virtual AddRequirementsToDHParams AddRequirementsToDHParams
        {
            get
            {
                if ((this.mAddRequirementsToDHParams == null))
                {
                    this.mAddRequirementsToDHParams = new AddRequirementsToDHParams();
                }
                return this.mAddRequirementsToDHParams;
            }
        }
        
        public virtual AddRequirementsToLParams AddRequirementsToLParams
        {
            get
            {
                if ((this.mAddRequirementsToLParams == null))
                {
                    this.mAddRequirementsToLParams = new AddRequirementsToLParams();
                }
                return this.mAddRequirementsToLParams;
            }
        }
        
        public virtual AddVinterferieLayerParams AddVinterferieLayerParams
        {
            get
            {
                if ((this.mAddVinterferieLayerParams == null))
                {
                    this.mAddVinterferieLayerParams = new AddVinterferieLayerParams();
                }
                return this.mAddVinterferieLayerParams;
            }
        }
        
        public virtual AddVinterferieLayerManningParams AddVinterferieLayerManningParams
        {
            get
            {
                if ((this.mAddVinterferieLayerManningParams == null))
                {
                    this.mAddVinterferieLayerManningParams = new AddVinterferieLayerManningParams();
                }
                return this.mAddVinterferieLayerManningParams;
            }
        }
        
        public virtual CheckOkEnabledExpectedValues CheckOkEnabledExpectedValues
        {
            get
            {
                if ((this.mCheckOkEnabledExpectedValues == null))
                {
                    this.mCheckOkEnabledExpectedValues = new CheckOkEnabledExpectedValues();
                }
                return this.mCheckOkEnabledExpectedValues;
            }
        }
        
        public virtual CheckPlanNameEmptyExpectedValues CheckPlanNameEmptyExpectedValues
        {
            get
            {
                if ((this.mCheckPlanNameEmptyExpectedValues == null))
                {
                    this.mCheckPlanNameEmptyExpectedValues = new CheckPlanNameEmptyExpectedValues();
                }
                return this.mCheckPlanNameEmptyExpectedValues;
            }
        }
        
        public virtual CheckPlanNameEmptyAndDraftExpectedValues CheckPlanNameEmptyAndDraftExpectedValues
        {
            get
            {
                if ((this.mCheckPlanNameEmptyAndDraftExpectedValues == null))
                {
                    this.mCheckPlanNameEmptyAndDraftExpectedValues = new CheckPlanNameEmptyAndDraftExpectedValues();
                }
                return this.mCheckPlanNameEmptyAndDraftExpectedValues;
            }
        }
        
        public virtual CheckStaffingPlansExpectedValues CheckStaffingPlansExpectedValues
        {
            get
            {
                if ((this.mCheckStaffingPlansExpectedValues == null))
                {
                    this.mCheckStaffingPlansExpectedValues = new CheckStaffingPlansExpectedValues();
                }
                return this.mCheckStaffingPlansExpectedValues;
            }
        }
        
        public virtual CheckValues_Step_25ExpectedValues CheckValues_Step_25ExpectedValues
        {
            get
            {
                if ((this.mCheckValues_Step_25ExpectedValues == null))
                {
                    this.mCheckValues_Step_25ExpectedValues = new CheckValues_Step_25ExpectedValues();
                }
                return this.mCheckValues_Step_25ExpectedValues;
            }
        }
        
        public virtual CheckValues_Step_9ExpectedValues CheckValues_Step_9ExpectedValues
        {
            get
            {
                if ((this.mCheckValues_Step_9ExpectedValues == null))
                {
                    this.mCheckValues_Step_9ExpectedValues = new CheckValues_Step_9ExpectedValues();
                }
                return this.mCheckValues_Step_9ExpectedValues;
            }
        }
        
        public virtual SelectDraftParams SelectDraftParams
        {
            get
            {
                if ((this.mSelectDraftParams == null))
                {
                    this.mSelectDraftParams = new SelectDraftParams();
                }
                return this.mSelectDraftParams;
            }
        }
        
        public virtual SendTabParams SendTabParams
        {
            get
            {
                if ((this.mSendTabParams == null))
                {
                    this.mSendTabParams = new SendTabParams();
                }
                return this.mSendTabParams;
            }
        }
        
        public virtual UncheckDraftParams UncheckDraftParams
        {
            get
            {
                if ((this.mUncheckDraftParams == null))
                {
                    this.mUncheckDraftParams = new UncheckDraftParams();
                }
                return this.mUncheckDraftParams;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        
        public UIBemanningsplanWindow UIBemanningsplanWindow
        {
            get
            {
                if ((this.mUIBemanningsplanWindow == null))
                {
                    this.mUIBemanningsplanWindow = new UIBemanningsplanWindow();
                }
                return this.mUIBemanningsplanWindow;
            }
        }
        
        public UIBemanningsplanlagWindow UIBemanningsplanlagWindow
        {
            get
            {
                if ((this.mUIBemanningsplanlagWindow == null))
                {
                    this.mUIBemanningsplanlagWindow = new UIBemanningsplanlagWindow();
                }
                return this.mUIBemanningsplanlagWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISettekravtilpersonerWindow UISettekravtilpersonerWindow
        {
            get
            {
                if ((this.mUISettekravtilpersonerWindow == null))
                {
                    this.mUISettekravtilpersonerWindow = new UISettekravtilpersonerWindow();
                }
                return this.mUISettekravtilpersonerWindow;
            }
        }
        
        public UISettekravtilpersonerWindow1 UISettekravtilpersonerWindow1
        {
            get
            {
                if ((this.mUISettekravtilpersonerWindow1 == null))
                {
                    this.mUISettekravtilpersonerWindow1 = new UISettekravtilpersonerWindow1();
                }
                return this.mUISettekravtilpersonerWindow1;
            }
        }
        
        public UISettekravtilpersonerWindow2 UISettekravtilpersonerWindow2
        {
            get
            {
                if ((this.mUISettekravtilpersonerWindow2 == null))
                {
                    this.mUISettekravtilpersonerWindow2 = new UISettekravtilpersonerWindow2();
                }
                return this.mUISettekravtilpersonerWindow2;
            }
        }
        
        public UISettekravtilpersonerWindow3 UISettekravtilpersonerWindow3
        {
            get
            {
                if ((this.mUISettekravtilpersonerWindow3 == null))
                {
                    this.mUISettekravtilpersonerWindow3 = new UISettekravtilpersonerWindow3();
                }
                return this.mUISettekravtilpersonerWindow3;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private AddCommentParams mAddCommentParams;
        
        private AddGrunnbemanningLayerParams mAddGrunnbemanningLayerParams;
        
        private AddLederLayerParams mAddLederLayerParams;
        
        private AddLederLayerManningParams mAddLederLayerManningParams;
        
        private AddManningParams mAddManningParams;
        
        private AddNattLayerParams mAddNattLayerParams;
        
        private AddNattManningParams mAddNattManningParams;
        
        private AddRequirementsToA1Params mAddRequirementsToA1Params;
        
        private AddRequirementsToD1_1Params mAddRequirementsToD1_1Params;
        
        private AddRequirementsToD1_2Params mAddRequirementsToD1_2Params;
        
        private AddRequirementsToDHParams mAddRequirementsToDHParams;
        
        private AddRequirementsToLParams mAddRequirementsToLParams;
        
        private AddVinterferieLayerParams mAddVinterferieLayerParams;
        
        private AddVinterferieLayerManningParams mAddVinterferieLayerManningParams;
        
        private CheckOkEnabledExpectedValues mCheckOkEnabledExpectedValues;
        
        private CheckPlanNameEmptyExpectedValues mCheckPlanNameEmptyExpectedValues;
        
        private CheckPlanNameEmptyAndDraftExpectedValues mCheckPlanNameEmptyAndDraftExpectedValues;
        
        private CheckStaffingPlansExpectedValues mCheckStaffingPlansExpectedValues;
        
        private CheckValues_Step_25ExpectedValues mCheckValues_Step_25ExpectedValues;
        
        private CheckValues_Step_9ExpectedValues mCheckValues_Step_9ExpectedValues;
        
        private SelectDraftParams mSelectDraftParams;
        
        private SendTabParams mSendTabParams;
        
        private UncheckDraftParams mUncheckDraftParams;
        
        private UIGatWindow mUIGatWindow;
        
        private UIBemanningsplanWindow mUIBemanningsplanWindow;
        
        private UIBemanningsplanlagWindow mUIBemanningsplanlagWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UISettekravtilpersonerWindow mUISettekravtilpersonerWindow;
        
        private UISettekravtilpersonerWindow1 mUISettekravtilpersonerWindow1;
        
        private UISettekravtilpersonerWindow2 mUISettekravtilpersonerWindow2;
        
        private UISettekravtilpersonerWindow3 mUISettekravtilpersonerWindow3;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddComment'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddCommentParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Automatisert Test' in 'eComment' text box
        /// </summary>
        public string UIECommentEditValueAsString = "Automatisert Test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddGrunnbemanningLayer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddGrunnbemanningLayerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Grunnbemanning' in 'eName' text box
        /// </summary>
        public string UIENameEditValueAsString = "Grunnbemanning";
        
        /// <summary>
        /// Type '{Tab}' in 'eName' text box
        /// </summary>
        public string UIENameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '3' in 'grRotation' RadioGroup
        /// </summary>
        public int UIGrRotationRadioGroupSelectedIndex = 3;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddLederLayer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddLederLayerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Leder' in 'eName' text box
        /// </summary>
        public string UIENameEditValueAsString = "Leder";
        
        /// <summary>
        /// Type '{Tab}' in 'eName' text box
        /// </summary>
        public string UIENameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '37,50' in 'eNumber[1]' text box
        /// </summary>
        public string UIENumber1EditValueAsString = "37,50";
        
        /// <summary>
        /// Type '2' in 'eNumber[2]' text box
        /// </summary>
        public string UIENumber2EditValueAsString = "2";
        
        /// <summary>
        /// Type '2' in 'grRotation' RadioGroup
        /// </summary>
        public int UIGrRotationRadioGroupSelectedIndex = 2;
        
        /// <summary>
        /// Type '1' in 'eNumber[0]' text box
        /// </summary>
        public string UIENumber0EditValueAsString = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddLederLayerManning'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddLederLayerManningParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad1}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "{NumPad1}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow0ColumnColumnHandEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{NumPad1}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys1 = "{NumPad1}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]0[Column]ColumnHandle26' text box
        /// </summary>
        public string UIRow0ColumnColumnHandEdit1SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddManning'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddManningParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad2}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "{NumPad2}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow0ColumnColumnHandEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{NumPad1}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys1 = "{NumPad1}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]1[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow1ColumnColumnHandEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{NumPad2}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys2 = "{NumPad2}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]2[Column]ColumnHandle23' text box
        /// </summary>
        public string UIRow2ColumnColumnHandEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{NumPad2}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys3 = "{NumPad2}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]3[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow3ColumnColumnHandEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{NumPad1}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys4 = "{NumPad1}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]4[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow4ColumnColumnHandEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddNattLayer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddNattLayerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Natt' in 'eName' text box
        /// </summary>
        public string UIENameEditValueAsString = "Natt";
        
        /// <summary>
        /// Type '' in 'drdGroup' LookUpEdit
        /// </summary>
        public string UIDrdGroupLookUpEditValueAsString = "";
        
        /// <summary>
        /// Type '3' in 'grRotation' RadioGroup
        /// </summary>
        public int UIGrRotationRadioGroupSelectedIndex = 3;
        
        /// <summary>
        /// Type '{Tab}' in 'grRotation' RadioGroup
        /// </summary>
        public string UIGrRotationRadioGroupSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddNattManning'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddNattManningParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad1}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "{NumPad1}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow0ColumnColumnHandEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRequirementsToA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddRequirementsToA1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys = "{NumPad1}";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys1 = "{NumPad1}";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys2 = "{NumPad1}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRequirementsToD1_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddRequirementsToD1_1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys = "{NumPad1}";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRequirementsToD1_2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddRequirementsToD1_2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Tab}' in '[Row]0[Column]gcolCompetance' LookUpEdit
        /// </summary>
        public string UIRow0ColumngcolCompetLookUpEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'Check' check box
        /// </summary>
        public bool UICheckCheckBoxChecked = true;
        
        /// <summary>
        /// Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys = "{NumPad1}";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRequirementsToDH'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddRequirementsToDHParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys = "{NumPad1}";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys1 = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys1 = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRequirementsToL'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddRequirementsToLParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad1}' in '[Row]-2147483647[Column]gcolAmount' text box
        /// </summary>
        public string UIRow2147483647ColumngEditSendKeys = "{NumPad1}";
        
        /// <summary>
        /// Type '{Tab}' in 'gcRequirement' table
        /// </summary>
        public string UIGcRequirementTableSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddVinterferieLayer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddVinterferieLayerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Vinterferie' in 'eName' text box
        /// </summary>
        public string UIENameEditValueAsString = "Vinterferie";
        
        /// <summary>
        /// Type '2022-01-24 [SelectionStart]0' in 'pceDate' DateTimeEdit
        /// </summary>
        public string UIPceDateDateTimeEditValueAsString = "2022-01-24 [SelectionStart]0";
        
        /// <summary>
        /// Type '2 [SelectionStart]0[SelectionLength]1' in 'eNumber[2]' text box
        /// </summary>
        public string UIENumber2EditValueAsString = "2 [SelectionStart]0[SelectionLength]1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddVinterferieLayerManning'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddVinterferieLayerManningParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad1}' in 'gcItems' table
        /// </summary>
        public string UIGcItemsTableSendKeys = "{NumPad1}";
        
        /// <summary>
        /// Type '{Enter}' in '[Row]0[Column]ColumnHandle18' text box
        /// </summary>
        public string UIRow0ColumnColumnHandEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOkEnabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckOkEnabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Ok' button equals 'True'
        /// </summary>
        public bool UIOKButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlanNameEmpty'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckPlanNameEmptyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'eName' text box equals ''
        /// </summary>
        public string UIENameEditValueAsString = null;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlanNameEmptyAndDraft'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckPlanNameEmptyAndDraftExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'eName' text box equals ''
        /// </summary>
        public string UIENameEditValueAsString = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'chkDraft' check box equals 'True'
        /// </summary>
        public string UIChkDraftCheckBoxValueAsString = "True";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckStaffingPlans'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckStaffingPlansExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Duplikat' cell equals 'gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]0[Column]gcolPlan'
        /// </summary>
        public string UIDuplikatCellName = "gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]0[Column]gcolPlan";
        
        /// <summary>
        /// Verify that the 'Name' property of 'Nattevakter SPL' cell equals 'gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]1[Column]gcolPlan'
        /// </summary>
        public string UINattevakterSPLCellName = "gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]1[Column]gcolPlan";
        
        /// <summary>
        /// Verify that the 'Name' property of 'Q1 2022' cell equals 'gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]2[Column]gcolPlan'
        /// </summary>
        public string UIQ12022CellName = "gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]2[Column]gcolPlan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValues_Step_25'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckValues_Step_25ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '133,93' cell equals '133,93'
        /// </summary>
        public string UIItem13393CellValueAsString = "133,93";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3,77' cell equals '3,77'
        /// </summary>
        public string UIItem377CellValueAsString = "3,77";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValues_Step_9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckValues_Step_9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '328,17' cell equals '328,17'
        /// </summary>
        public string UIItem32817CellValueAsString = "328,17";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '9,23' cell equals '9,23'
        /// </summary>
        public string UIItem923CellValueAsString = "9,23";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectDraft'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectDraftParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'chkDraft' check box
        /// </summary>
        public bool UIChkDraftCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SendTab'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SendTabParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Tab}' in 'eNumber[0]' text box
        /// </summary>
        public string UIENumber0EditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UncheckDraft'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UncheckDraftParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'chkDraft' check box
        /// </summary>
        public bool UIChkDraftCheckBoxChecked = false;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxPageControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinClient UIAvdelingClient
        {
            get
            {
                if ((this.mUIAvdelingClient == null))
                {
                    this.mUIAvdelingClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAvdelingClient.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAvdelingClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAvdelingClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXButton UINYButton
        {
            get
            {
                if ((this.mUINYButton == null))
                {
                    this.mUINYButton = new DXButton(this);
                    #region Search Criteria
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.Name] = "bNew";
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUINYButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
                    this.mUINYButton.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUINYButton;
            }
        }
        
        public UIGcStaffingPlansTable UIGcStaffingPlansTable
        {
            get
            {
                if ((this.mUIGcStaffingPlansTable == null))
                {
                    this.mUIGcStaffingPlansTable = new UIGcStaffingPlansTable(this);
                }
                return this.mUIGcStaffingPlansTable;
            }
        }
        
        public DXButton UIDupliserButton
        {
            get
            {
                if ((this.mUIDupliserButton == null))
                {
                    this.mUIDupliserButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIDupliserButton.SearchProperties[DXTestControl.PropertyNames.Name] = "bDuplicate";
                    this.mUIDupliserButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIDupliserButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
                    this.mUIDupliserButton.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIDupliserButton;
            }
        }
        
        public DXButton UISlettButton
        {
            get
            {
                if ((this.mUISlettButton == null))
                {
                    this.mUISlettButton = new DXButton(this);
                    #region Search Criteria
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.Name] = "bDelete";
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
                    this.mUISlettButton.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISlettButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUINYButton;
        
        private UIGcStaffingPlansTable mUIGcStaffingPlansTable;
        
        private DXButton mUIDupliserButton;
        
        private DXButton mUISlettButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcStaffingPlansTable : DXGrid
    {
        
        public UIGcStaffingPlansTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingPlans";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]1[Column]gcolTimeLine";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIDuplikatCell
        {
            get
            {
                if ((this.mUIDuplikatCell == null))
                {
                    this.mUIDuplikatCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDuplikatCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]0[Column]gcolPlan";
                    this.mUIDuplikatCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDuplikatCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIDuplikatCell;
            }
        }
        
        public DXCell UINattevakterSPLCell
        {
            get
            {
                if ((this.mUINattevakterSPLCell == null))
                {
                    this.mUINattevakterSPLCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINattevakterSPLCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]1[Column]gcolPlan";
                    this.mUINattevakterSPLCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINattevakterSPLCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUINattevakterSPLCell;
            }
        }
        
        public DXCell UIQ12022Cell
        {
            get
            {
                if ((this.mUIQ12022Cell == null))
                {
                    this.mUIQ12022Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIQ12022Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]2[Column]gcolPlan";
                    this.mUIQ12022Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIQ12022Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIQ12022Cell;
            }
        }
        
        public DXCell UIJACell
        {
            get
            {
                if ((this.mUIJACell == null))
                {
                    this.mUIJACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIJACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]0[Column]gcolDraft";
                    this.mUIJACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIJACell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIJACell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXCell mUIDuplikatCell;
        
        private DXCell mUINattevakterSPLCell;
        
        private DXCell mUIQ12022Cell;
        
        private DXCell mUIJACell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBemanningsplanWindow : DXWindow
    {
        
        public UIBemanningsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Bemanningsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIPaNavbarsPanelClient UIPaNavbarsPanelClient
        {
            get
            {
                if ((this.mUIPaNavbarsPanelClient == null))
                {
                    this.mUIPaNavbarsPanelClient = new UIPaNavbarsPanelClient(this);
                }
                return this.mUIPaNavbarsPanelClient;
            }
        }
        
        public UIPaBottomClient UIPaBottomClient
        {
            get
            {
                if ((this.mUIPaBottomClient == null))
                {
                    this.mUIPaBottomClient = new UIPaBottomClient(this);
                }
                return this.mUIPaBottomClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaNavbarsPanelClient mUIPaNavbarsPanelClient;
        
        private UIPaBottomClient mUIPaBottomClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaNavbarsPanelClient : DXTestControl
    {
        
        public UIPaNavbarsPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paNavbarsPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIGsMainControlNavBar UIGsMainControlNavBar
        {
            get
            {
                if ((this.mUIGsMainControlNavBar == null))
                {
                    this.mUIGsMainControlNavBar = new UIGsMainControlNavBar(this);
                }
                return this.mUIGsMainControlNavBar;
            }
        }
        #endregion
        
        #region Fields
        private UIGsMainControlNavBar mUIGsMainControlNavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsMainControlNavBar : DXNavBar
    {
        
        public UIGsMainControlNavBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsMainControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UINbgccDetailsScrollableControl UINbgccDetailsScrollableControl
        {
            get
            {
                if ((this.mUINbgccDetailsScrollableControl == null))
                {
                    this.mUINbgccDetailsScrollableControl = new UINbgccDetailsScrollableControl(this);
                }
                return this.mUINbgccDetailsScrollableControl;
            }
        }
        
        public UINbgccLayersScrollableControl UINbgccLayersScrollableControl
        {
            get
            {
                if ((this.mUINbgccLayersScrollableControl == null))
                {
                    this.mUINbgccLayersScrollableControl = new UINbgccLayersScrollableControl(this);
                }
                return this.mUINbgccLayersScrollableControl;
            }
        }
        
        public UINbgccSumScrollableControl UINbgccSumScrollableControl
        {
            get
            {
                if ((this.mUINbgccSumScrollableControl == null))
                {
                    this.mUINbgccSumScrollableControl = new UINbgccSumScrollableControl(this);
                }
                return this.mUINbgccSumScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UINbgccDetailsScrollableControl mUINbgccDetailsScrollableControl;
        
        private UINbgccLayersScrollableControl mUINbgccLayersScrollableControl;
        
        private UINbgccSumScrollableControl mUINbgccSumScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbgccDetailsScrollableControl : DXScrollableControl
    {
        
        public UINbgccDetailsScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIENameEdit
        {
            get
            {
                if ((this.mUIENameEdit == null))
                {
                    this.mUIENameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eName";
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENameEdit.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIENameEdit;
            }
        }
        
        public DXTextEdit UIECommentEdit
        {
            get
            {
                if ((this.mUIECommentEdit == null))
                {
                    this.mUIECommentEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIECommentEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eComment";
                    this.mUIECommentEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSMemoEdit";
                    this.mUIECommentEdit.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIECommentEdit;
            }
        }
        
        public DXCheckBox UIChkDraftCheckBox
        {
            get
            {
                if ((this.mUIChkDraftCheckBox == null))
                {
                    this.mUIChkDraftCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkDraftCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkDraft";
                    this.mUIChkDraftCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkDraftCheckBox.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIChkDraftCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIENameEdit;
        
        private DXTextEdit mUIECommentEdit;
        
        private DXCheckBox mUIChkDraftCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbgccLayersScrollableControl : DXScrollableControl
    {
        
        public UINbgccLayersScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccLayers";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIPaMainPanelClient UIPaMainPanelClient
        {
            get
            {
                if ((this.mUIPaMainPanelClient == null))
                {
                    this.mUIPaMainPanelClient = new UIPaMainPanelClient(this);
                }
                return this.mUIPaMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaMainPanelClient mUIPaMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaMainPanelClient : DXTestControl
    {
        
        public UIPaMainPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIGsSplitContainerContSplitContainerControl UIGsSplitContainerContSplitContainerControl
        {
            get
            {
                if ((this.mUIGsSplitContainerContSplitContainerControl == null))
                {
                    this.mUIGsSplitContainerContSplitContainerControl = new UIGsSplitContainerContSplitContainerControl(this);
                }
                return this.mUIGsSplitContainerContSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UIGsSplitContainerContSplitContainerControl mUIGsSplitContainerContSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsSplitContainerContSplitContainerControl : DXSplitContainerControl
    {
        
        public UIGsSplitContainerContSplitContainerControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSplitContainerControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UISplitGroupPanelClient UISplitGroupPanelClient
        {
            get
            {
                if ((this.mUISplitGroupPanelClient == null))
                {
                    this.mUISplitGroupPanelClient = new UISplitGroupPanelClient(this);
                }
                return this.mUISplitGroupPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UISplitGroupPanelClient mUISplitGroupPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISplitGroupPanelClient : DXTestControl
    {
        
        public UISplitGroupPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1SplitGroupPanel[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIPaTopPanelClient UIPaTopPanelClient
        {
            get
            {
                if ((this.mUIPaTopPanelClient == null))
                {
                    this.mUIPaTopPanelClient = new UIPaTopPanelClient(this);
                }
                return this.mUIPaTopPanelClient;
            }
        }
        
        public UIPaMainPanelClient1 UIPaMainPanelClient
        {
            get
            {
                if ((this.mUIPaMainPanelClient == null))
                {
                    this.mUIPaMainPanelClient = new UIPaMainPanelClient1(this);
                }
                return this.mUIPaMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaTopPanelClient mUIPaTopPanelClient;
        
        private UIPaMainPanelClient1 mUIPaMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaTopPanelClient : DXTestControl
    {
        
        public UIPaTopPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paTopPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UINyttlagButton
        {
            get
            {
                if ((this.mUINyttlagButton == null))
                {
                    this.mUINyttlagButton = new DXButton(this);
                    #region Search Criteria
                    this.mUINyttlagButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnNewLayer";
                    this.mUINyttlagButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUINyttlagButton.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUINyttlagButton;
            }
        }
        
        public DXButton UIEndrelagButton
        {
            get
            {
                if ((this.mUIEndrelagButton == null))
                {
                    this.mUIEndrelagButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIEndrelagButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditLayer";
                    this.mUIEndrelagButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIEndrelagButton.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIEndrelagButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUINyttlagButton;
        
        private DXButton mUIEndrelagButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaMainPanelClient1 : DXTestControl
    {
        
        public UIPaMainPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIGcPlanTable UIGcPlanTable
        {
            get
            {
                if ((this.mUIGcPlanTable == null))
                {
                    this.mUIGcPlanTable = new UIGcPlanTable(this);
                }
                return this.mUIGcPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcPlanTable mUIGcPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcPlanTable : DXGrid
    {
        
        public UIGcPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIGrunnbemanningCell
        {
            get
            {
                if ((this.mUIGrunnbemanningCell == null))
                {
                    this.mUIGrunnbemanningCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGrunnbemanningCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]0[Column]gcName";
                    this.mUIGrunnbemanningCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGrunnbemanningCell.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIGrunnbemanningCell;
            }
        }
        
        public DXCell UILederCell
        {
            get
            {
                if ((this.mUILederCell == null))
                {
                    this.mUILederCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILederCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanGridControlCell[View]gvPlan[Row]1[Column]gcName";
                    this.mUILederCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILederCell.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUILederCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIGrunnbemanningCell;
        
        private DXCell mUILederCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbgccSumScrollableControl : DXScrollableControl
    {
        
        public UINbgccSumScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccSum";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UITcGraphicsTabList UITcGraphicsTabList
        {
            get
            {
                if ((this.mUITcGraphicsTabList == null))
                {
                    this.mUITcGraphicsTabList = new UITcGraphicsTabList(this);
                }
                return this.mUITcGraphicsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcGraphicsTabList mUITcGraphicsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcGraphicsTabList : DXTestControl
    {
        
        public UITcGraphicsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcGraphics";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UITpSumClient UITpSumClient
        {
            get
            {
                if ((this.mUITpSumClient == null))
                {
                    this.mUITpSumClient = new UITpSumClient(this);
                }
                return this.mUITpSumClient;
            }
        }
        
        public DXTestControl UIXtraTabControlHeaderTabPage
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage == null))
                {
                    this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "tcGraphicsPageHeader1";
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage;
            }
        }
        
        public DXTestControl UIXtraTabControlHeaderTabPage1
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage1 == null))
                {
                    this.mUIXtraTabControlHeaderTabPage1 = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage1.SearchProperties[DXTestControl.PropertyNames.Name] = "tcGraphicsPageHeader0";
                    this.mUIXtraTabControlHeaderTabPage1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage1.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage1;
            }
        }
        
        public UITpHoursAndPositionsClient UITpHoursAndPositionsClient
        {
            get
            {
                if ((this.mUITpHoursAndPositionsClient == null))
                {
                    this.mUITpHoursAndPositionsClient = new UITpHoursAndPositionsClient(this);
                }
                return this.mUITpHoursAndPositionsClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpSumClient mUITpSumClient;
        
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        
        private DXTestControl mUIXtraTabControlHeaderTabPage1;
        
        private UITpHoursAndPositionsClient mUITpHoursAndPositionsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpSumClient : DXTestControl
    {
        
        public UITpSumClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpSum";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIPMainPanelClient UIPMainPanelClient
        {
            get
            {
                if ((this.mUIPMainPanelClient == null))
                {
                    this.mUIPMainPanelClient = new UIPMainPanelClient(this);
                }
                return this.mUIPMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPMainPanelClient mUIPMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPMainPanelClient : DXTestControl
    {
        
        public UIPMainPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIPTopPanelClient UIPTopPanelClient
        {
            get
            {
                if ((this.mUIPTopPanelClient == null))
                {
                    this.mUIPTopPanelClient = new UIPTopPanelClient(this);
                }
                return this.mUIPTopPanelClient;
            }
        }
        
        public UIGcSumDemandTable UIGcSumDemandTable
        {
            get
            {
                if ((this.mUIGcSumDemandTable == null))
                {
                    this.mUIGcSumDemandTable = new UIGcSumDemandTable(this);
                }
                return this.mUIGcSumDemandTable;
            }
        }
        #endregion
        
        #region Fields
        private UIPTopPanelClient mUIPTopPanelClient;
        
        private UIGcSumDemandTable mUIGcSumDemandTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPTopPanelClient : DXTestControl
    {
        
        public UIPTopPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pTopPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UILeSumDemandDataSourcLookUpEdit
        {
            get
            {
                if ((this.mUILeSumDemandDataSourcLookUpEdit == null))
                {
                    this.mUILeSumDemandDataSourcLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILeSumDemandDataSourcLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leSumDemandDataSource";
                    this.mUILeSumDemandDataSourcLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    #endregion
                }
                return this.mUILeSumDemandDataSourcLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUILeSumDemandDataSourcLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcSumDemandTable : DXGrid
    {
        
        public UIGcSumDemandTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemand";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public DXGridBand UIBand_DockedLeftGridBand
        {
            get
            {
                if ((this.mUIBand_DockedLeftGridBand == null))
                {
                    this.mUIBand_DockedLeftGridBand = new DXGridBand(this);
                    #region Search Criteria
                    this.mUIBand_DockedLeftGridBand.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlBand[View]gvSumDemand[BandName]Band_DockedLeft";
                    this.mUIBand_DockedLeftGridBand.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlBand";
                    this.mUIBand_DockedLeftGridBand.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIBand_DockedLeftGridBand;
            }
        }
        #endregion
        
        #region Fields
        private DXGridBand mUIBand_DockedLeftGridBand;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpHoursAndPositionsClient : DXTestControl
    {
        
        public UITpHoursAndPositionsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpHoursAndPositions";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIPHoursAndPositionsPaClient UIPHoursAndPositionsPaClient
        {
            get
            {
                if ((this.mUIPHoursAndPositionsPaClient == null))
                {
                    this.mUIPHoursAndPositionsPaClient = new UIPHoursAndPositionsPaClient(this);
                }
                return this.mUIPHoursAndPositionsPaClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPHoursAndPositionsPaClient mUIPHoursAndPositionsPaClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPHoursAndPositionsPaClient : DXTestControl
    {
        
        public UIPHoursAndPositionsPaClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pHoursAndPositionsPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIPMainPanelClient1 UIPMainPanelClient
        {
            get
            {
                if ((this.mUIPMainPanelClient == null))
                {
                    this.mUIPMainPanelClient = new UIPMainPanelClient1(this);
                }
                return this.mUIPMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPMainPanelClient1 mUIPMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPMainPanelClient1 : DXTestControl
    {
        
        public UIPMainPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIPTotalsPanelClient UIPTotalsPanelClient
        {
            get
            {
                if ((this.mUIPTotalsPanelClient == null))
                {
                    this.mUIPTotalsPanelClient = new UIPTotalsPanelClient(this);
                }
                return this.mUIPTotalsPanelClient;
            }
        }
        
        public UIPTopPanelClient1 UIPTopPanelClient
        {
            get
            {
                if ((this.mUIPTopPanelClient == null))
                {
                    this.mUIPTopPanelClient = new UIPTopPanelClient1(this);
                }
                return this.mUIPTopPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPTotalsPanelClient mUIPTotalsPanelClient;
        
        private UIPTopPanelClient1 mUIPTopPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPTotalsPanelClient : DXTestControl
    {
        
        public UIPTotalsPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pTotalsPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIGcTotalsTable UIGcTotalsTable
        {
            get
            {
                if ((this.mUIGcTotalsTable == null))
                {
                    this.mUIGcTotalsTable = new UIGcTotalsTable(this);
                }
                return this.mUIGcTotalsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcTotalsTable mUIGcTotalsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcTotalsTable : DXGrid
    {
        
        public UIGcTotalsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcTotals";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem32817Cell
        {
            get
            {
                if ((this.mUIItem32817Cell == null))
                {
                    this.mUIItem32817Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem32817Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcTotalsGridControlCell[View]gvTotals[Row]0[Column]gcAverageHoursPerWeek";
                    this.mUIItem32817Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem32817Cell.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIItem32817Cell;
            }
        }
        
        public DXCell UIItem923Cell
        {
            get
            {
                if ((this.mUIItem923Cell == null))
                {
                    this.mUIItem923Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem923Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcTotalsGridControlCell[View]gvTotals[Row]0[Column]gcAveragePositions";
                    this.mUIItem923Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem923Cell.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIItem923Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem32817Cell;
        
        private DXCell mUIItem923Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPTopPanelClient1 : DXTestControl
    {
        
        public UIPTopPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pTopPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public UIGcStaffingWeekHourSuTable UIGcStaffingWeekHourSuTable
        {
            get
            {
                if ((this.mUIGcStaffingWeekHourSuTable == null))
                {
                    this.mUIGcStaffingWeekHourSuTable = new UIGcStaffingWeekHourSuTable(this);
                }
                return this.mUIGcStaffingWeekHourSuTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcStaffingWeekHourSuTable mUIGcStaffingWeekHourSuTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcStaffingWeekHourSuTable : DXGrid
    {
        
        public UIGcStaffingWeekHourSuTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingWeekHourSum";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public DXGridBand UIBand_DockedLeftGridBand
        {
            get
            {
                if ((this.mUIBand_DockedLeftGridBand == null))
                {
                    this.mUIBand_DockedLeftGridBand = new DXGridBand(this);
                    #region Search Criteria
                    this.mUIBand_DockedLeftGridBand.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingWeekHourSumGridControlBand[View]gvSumWeekHourSum[BandName]Band_DockedLe" +
                        "ft";
                    this.mUIBand_DockedLeftGridBand.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlBand";
                    this.mUIBand_DockedLeftGridBand.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIBand_DockedLeftGridBand;
            }
        }
        #endregion
        
        #region Fields
        private DXGridBand mUIBand_DockedLeftGridBand;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaBottomClient : DXTestControl
    {
        
        public UIPaBottomClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paBottom";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bemanningsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSave";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Bemanningsplan");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBemanningsplanlagWindow : DXWindow
    {
        
        public UIBemanningsplanlagWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Bemanningsplan lag";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public UIPaNavbarsPanelClient1 UIPaNavbarsPanelClient
        {
            get
            {
                if ((this.mUIPaNavbarsPanelClient == null))
                {
                    this.mUIPaNavbarsPanelClient = new UIPaNavbarsPanelClient1(this);
                }
                return this.mUIPaNavbarsPanelClient;
            }
        }
        
        public UIPaBottomClient1 UIPaBottomClient
        {
            get
            {
                if ((this.mUIPaBottomClient == null))
                {
                    this.mUIPaBottomClient = new UIPaBottomClient1(this);
                }
                return this.mUIPaBottomClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaNavbarsPanelClient1 mUIPaNavbarsPanelClient;
        
        private UIPaBottomClient1 mUIPaBottomClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaNavbarsPanelClient1 : DXTestControl
    {
        
        public UIPaNavbarsPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paNavbarsPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public UIGsMainControlNavBar1 UIGsMainControlNavBar
        {
            get
            {
                if ((this.mUIGsMainControlNavBar == null))
                {
                    this.mUIGsMainControlNavBar = new UIGsMainControlNavBar1(this);
                }
                return this.mUIGsMainControlNavBar;
            }
        }
        #endregion
        
        #region Fields
        private UIGsMainControlNavBar1 mUIGsMainControlNavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsMainControlNavBar1 : DXNavBar
    {
        
        public UIGsMainControlNavBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsMainControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public UINbgccSumScrollableControl1 UINbgccSumScrollableControl
        {
            get
            {
                if ((this.mUINbgccSumScrollableControl == null))
                {
                    this.mUINbgccSumScrollableControl = new UINbgccSumScrollableControl1(this);
                }
                return this.mUINbgccSumScrollableControl;
            }
        }
        
        public UINbgccDetailsScrollableControl1 UINbgccDetailsScrollableControl
        {
            get
            {
                if ((this.mUINbgccDetailsScrollableControl == null))
                {
                    this.mUINbgccDetailsScrollableControl = new UINbgccDetailsScrollableControl1(this);
                }
                return this.mUINbgccDetailsScrollableControl;
            }
        }
        
        public UINbgccLayersScrollableControl1 UINbgccLayersScrollableControl
        {
            get
            {
                if ((this.mUINbgccLayersScrollableControl == null))
                {
                    this.mUINbgccLayersScrollableControl = new UINbgccLayersScrollableControl1(this);
                }
                return this.mUINbgccLayersScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UINbgccSumScrollableControl1 mUINbgccSumScrollableControl;
        
        private UINbgccDetailsScrollableControl1 mUINbgccDetailsScrollableControl;
        
        private UINbgccLayersScrollableControl1 mUINbgccLayersScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbgccSumScrollableControl1 : DXScrollableControl
    {
        
        public UINbgccSumScrollableControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccSum";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public UITcGraphicsTabList1 UITcGraphicsTabList
        {
            get
            {
                if ((this.mUITcGraphicsTabList == null))
                {
                    this.mUITcGraphicsTabList = new UITcGraphicsTabList1(this);
                }
                return this.mUITcGraphicsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcGraphicsTabList1 mUITcGraphicsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcGraphicsTabList1 : DXTestControl
    {
        
        public UITcGraphicsTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcGraphics";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public UITpWeekHoursClient UITpWeekHoursClient
        {
            get
            {
                if ((this.mUITpWeekHoursClient == null))
                {
                    this.mUITpWeekHoursClient = new UITpWeekHoursClient(this);
                }
                return this.mUITpWeekHoursClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpWeekHoursClient mUITpWeekHoursClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpWeekHoursClient : DXTestControl
    {
        
        public UITpWeekHoursClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpWeekHours";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public UIPWeekHourPanelClient UIPWeekHourPanelClient
        {
            get
            {
                if ((this.mUIPWeekHourPanelClient == null))
                {
                    this.mUIPWeekHourPanelClient = new UIPWeekHourPanelClient(this);
                }
                return this.mUIPWeekHourPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPWeekHourPanelClient mUIPWeekHourPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPWeekHourPanelClient : DXTestControl
    {
        
        public UIPWeekHourPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pWeekHourPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public UIPMainPanelClient2 UIPMainPanelClient
        {
            get
            {
                if ((this.mUIPMainPanelClient == null))
                {
                    this.mUIPMainPanelClient = new UIPMainPanelClient2(this);
                }
                return this.mUIPMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPMainPanelClient2 mUIPMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPMainPanelClient2 : DXTestControl
    {
        
        public UIPMainPanelClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public UIPTotalsPanelClient1 UIPTotalsPanelClient
        {
            get
            {
                if ((this.mUIPTotalsPanelClient == null))
                {
                    this.mUIPTotalsPanelClient = new UIPTotalsPanelClient1(this);
                }
                return this.mUIPTotalsPanelClient;
            }
        }
        
        public UIPTopPanelClient2 UIPTopPanelClient
        {
            get
            {
                if ((this.mUIPTopPanelClient == null))
                {
                    this.mUIPTopPanelClient = new UIPTopPanelClient2(this);
                }
                return this.mUIPTopPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPTotalsPanelClient1 mUIPTotalsPanelClient;
        
        private UIPTopPanelClient2 mUIPTopPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPTotalsPanelClient1 : DXTestControl
    {
        
        public UIPTotalsPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pTotalsPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public UIGcTotalsTable1 UIGcTotalsTable
        {
            get
            {
                if ((this.mUIGcTotalsTable == null))
                {
                    this.mUIGcTotalsTable = new UIGcTotalsTable1(this);
                }
                return this.mUIGcTotalsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcTotalsTable1 mUIGcTotalsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcTotalsTable1 : DXGrid
    {
        
        public UIGcTotalsTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcTotals";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public DXColumnHeader UIGcTotalHoursColumnHeader
        {
            get
            {
                if ((this.mUIGcTotalHoursColumnHeader == null))
                {
                    this.mUIGcTotalHoursColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIGcTotalHoursColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcTotalsGridControlColumnHeader[View]gvTotals[Column]gcTotalHours";
                    this.mUIGcTotalHoursColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIGcTotalHoursColumnHeader.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIGcTotalHoursColumnHeader;
            }
        }
        
        public DXCell UIItem13393Cell
        {
            get
            {
                if ((this.mUIItem13393Cell == null))
                {
                    this.mUIItem13393Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem13393Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcTotalsGridControlCell[View]gvTotals[Row]0[Column]gcAverageHoursPerWeek";
                    this.mUIItem13393Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem13393Cell.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItem13393Cell;
            }
        }
        
        public DXCell UIItem377Cell
        {
            get
            {
                if ((this.mUIItem377Cell == null))
                {
                    this.mUIItem377Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem377Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcTotalsGridControlCell[View]gvTotals[Row]0[Column]gcAveragePositions";
                    this.mUIItem377Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem377Cell.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItem377Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXColumnHeader mUIGcTotalHoursColumnHeader;
        
        private DXCell mUIItem13393Cell;
        
        private DXCell mUIItem377Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPTopPanelClient2 : DXTestControl
    {
        
        public UIPTopPanelClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pTopPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public UIGcStaffingWeekHourSuTable1 UIGcStaffingWeekHourSuTable
        {
            get
            {
                if ((this.mUIGcStaffingWeekHourSuTable == null))
                {
                    this.mUIGcStaffingWeekHourSuTable = new UIGcStaffingWeekHourSuTable1(this);
                }
                return this.mUIGcStaffingWeekHourSuTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcStaffingWeekHourSuTable1 mUIGcStaffingWeekHourSuTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcStaffingWeekHourSuTable1 : DXGrid
    {
        
        public UIGcStaffingWeekHourSuTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingWeekHourSum";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public DXGridBand UIBand_Week_1GridBand
        {
            get
            {
                if ((this.mUIBand_Week_1GridBand == null))
                {
                    this.mUIBand_Week_1GridBand = new DXGridBand(this);
                    #region Search Criteria
                    this.mUIBand_Week_1GridBand.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingWeekHourSumGridControlBand[View]gvSumWeekHourSum[BandName]Band_Week_1";
                    this.mUIBand_Week_1GridBand.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlBand";
                    this.mUIBand_Week_1GridBand.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIBand_Week_1GridBand;
            }
        }
        #endregion
        
        #region Fields
        private DXGridBand mUIBand_Week_1GridBand;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbgccDetailsScrollableControl1 : DXScrollableControl
    {
        
        public UINbgccDetailsScrollableControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public DXRadioGroup UIGrRotationRadioGroup
        {
            get
            {
                if ((this.mUIGrRotationRadioGroup == null))
                {
                    this.mUIGrRotationRadioGroup = new DXRadioGroup(this);
                    #region Search Criteria
                    this.mUIGrRotationRadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "grRotation";
                    this.mUIGrRotationRadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSRadioGroup";
                    this.mUIGrRotationRadioGroup.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIGrRotationRadioGroup;
            }
        }
        
        public DXTextEdit UIENameEdit
        {
            get
            {
                if ((this.mUIENameEdit == null))
                {
                    this.mUIENameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eName";
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENameEdit.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIENameEdit;
            }
        }
        
        public DXTextEdit UIENumber1Edit
        {
            get
            {
                if ((this.mUIENumber1Edit == null))
                {
                    this.mUIENumber1Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[1]";
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber1Edit.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIENumber1Edit;
            }
        }
        
        public UIDrdPositionCategoryLookUpEdit UIDrdPositionCategoryLookUpEdit
        {
            get
            {
                if ((this.mUIDrdPositionCategoryLookUpEdit == null))
                {
                    this.mUIDrdPositionCategoryLookUpEdit = new UIDrdPositionCategoryLookUpEdit(this);
                }
                return this.mUIDrdPositionCategoryLookUpEdit;
            }
        }
        
        public DXTextEdit UIENumber0Edit
        {
            get
            {
                if ((this.mUIENumber0Edit == null))
                {
                    this.mUIENumber0Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber0Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[0]";
                    this.mUIENumber0Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber0Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber0Edit.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIENumber0Edit;
            }
        }
        
        public DXTextEdit UIENumber2Edit
        {
            get
            {
                if ((this.mUIENumber2Edit == null))
                {
                    this.mUIENumber2Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber2Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[2]";
                    this.mUIENumber2Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber2Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber2Edit.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIENumber2Edit;
            }
        }
        
        public UIDrdGroupLookUpEdit UIDrdGroupLookUpEdit
        {
            get
            {
                if ((this.mUIDrdGroupLookUpEdit == null))
                {
                    this.mUIDrdGroupLookUpEdit = new UIDrdGroupLookUpEdit(this);
                }
                return this.mUIDrdGroupLookUpEdit;
            }
        }
        
        public UIDtFromDateCustom UIDtFromDateCustom
        {
            get
            {
                if ((this.mUIDtFromDateCustom == null))
                {
                    this.mUIDtFromDateCustom = new UIDtFromDateCustom(this);
                }
                return this.mUIDtFromDateCustom;
            }
        }
        
        public UIDrdLayerTypeLookUpEdit UIDrdLayerTypeLookUpEdit
        {
            get
            {
                if ((this.mUIDrdLayerTypeLookUpEdit == null))
                {
                    this.mUIDrdLayerTypeLookUpEdit = new UIDrdLayerTypeLookUpEdit(this);
                }
                return this.mUIDrdLayerTypeLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXRadioGroup mUIGrRotationRadioGroup;
        
        private DXTextEdit mUIENameEdit;
        
        private DXTextEdit mUIENumber1Edit;
        
        private UIDrdPositionCategoryLookUpEdit mUIDrdPositionCategoryLookUpEdit;
        
        private DXTextEdit mUIENumber0Edit;
        
        private DXTextEdit mUIENumber2Edit;
        
        private UIDrdGroupLookUpEdit mUIDrdGroupLookUpEdit;
        
        private UIDtFromDateCustom mUIDtFromDateCustom;
        
        private UIDrdLayerTypeLookUpEdit mUIDrdLayerTypeLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDrdPositionCategoryLookUpEdit : DXLookUpEdit
    {
        
        public UIDrdPositionCategoryLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "drdPositionCategory";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "drdPositionCategoryPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDrdGroupLookUpEdit : DXLookUpEdit
    {
        
        public UIDrdGroupLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "drdGroup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "drdGroupPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDtFromDateCustom : DXTestControl
    {
        
        public UIDtFromDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dtFromDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDrdLayerTypeLookUpEdit : DXLookUpEdit
    {
        
        public UIDrdLayerTypeLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "drdLayerType";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "drdLayerTypePopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINbgccLayersScrollableControl1 : DXScrollableControl
    {
        
        public UINbgccLayersScrollableControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbgccLayers";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public UIGcItemsTable UIGcItemsTable
        {
            get
            {
                if ((this.mUIGcItemsTable == null))
                {
                    this.mUIGcItemsTable = new UIGcItemsTable(this);
                }
                return this.mUIGcItemsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcItemsTable mUIGcItemsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcItemsTable : DXGrid
    {
        
        public UIGcItemsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItems";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public DXCell UIVelgvaktkodeCell
        {
            get
            {
                if ((this.mUIVelgvaktkodeCell == null))
                {
                    this.mUIVelgvaktkodeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVelgvaktkodeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]-2147483647[Column]cItemName";
                    this.mUIVelgvaktkodeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVelgvaktkodeCell.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIVelgvaktkodeCell;
            }
        }
        
        public UIRow2147483647ColumncLookUpEdit UIRow2147483647ColumncLookUpEdit
        {
            get
            {
                if ((this.mUIRow2147483647ColumncLookUpEdit == null))
                {
                    this.mUIRow2147483647ColumncLookUpEdit = new UIRow2147483647ColumncLookUpEdit(this);
                }
                return this.mUIRow2147483647ColumncLookUpEdit;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle18";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle22";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXTextEdit UIRow0ColumnColumnHandEdit
        {
            get
            {
                if ((this.mUIRow0ColumnColumnHandEdit == null))
                {
                    this.mUIRow0ColumnColumnHandEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]0[Column]ColumnHandle18";
                    this.mUIRow0ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnColumnHandEdit.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIRow0ColumnColumnHandEdit;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle18";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle22";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXTextEdit UIRow1ColumnColumnHandEdit
        {
            get
            {
                if ((this.mUIRow1ColumnColumnHandEdit == null))
                {
                    this.mUIRow1ColumnColumnHandEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]1[Column]ColumnHandle18";
                    this.mUIRow1ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnColumnHandEdit.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIRow1ColumnColumnHandEdit;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]2[Column]ColumnHandle23";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]2[Column]ColumnHandle24";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXTextEdit UIRow2ColumnColumnHandEdit
        {
            get
            {
                if ((this.mUIRow2ColumnColumnHandEdit == null))
                {
                    this.mUIRow2ColumnColumnHandEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]2[Column]ColumnHandle23";
                    this.mUIRow2ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnColumnHandEdit.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIRow2ColumnColumnHandEdit;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]3[Column]ColumnHandle18";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]3[Column]ColumnHandle24";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXTextEdit UIRow3ColumnColumnHandEdit
        {
            get
            {
                if ((this.mUIRow3ColumnColumnHandEdit == null))
                {
                    this.mUIRow3ColumnColumnHandEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]3[Column]ColumnHandle18";
                    this.mUIRow3ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnColumnHandEdit.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIRow3ColumnColumnHandEdit;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]4[Column]ColumnHandle18";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]4[Column]ColumnHandle24";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXTextEdit UIRow4ColumnColumnHandEdit
        {
            get
            {
                if ((this.mUIRow4ColumnColumnHandEdit == null))
                {
                    this.mUIRow4ColumnColumnHandEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]4[Column]ColumnHandle18";
                    this.mUIRow4ColumnColumnHandEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnColumnHandEdit.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIRow4ColumnColumnHandEdit;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle21";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXCell UIItemCell21
        {
            get
            {
                if ((this.mUIItemCell21 == null))
                {
                    this.mUIItemCell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle26";
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell21.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell21;
            }
        }
        
        public DXCell UIItemCell31
        {
            get
            {
                if ((this.mUIItemCell31 == null))
                {
                    this.mUIItemCell31 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle29";
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell31.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell31;
            }
        }
        
        public DXTextEdit UIRow0ColumnColumnHandEdit1
        {
            get
            {
                if ((this.mUIRow0ColumnColumnHandEdit1 == null))
                {
                    this.mUIRow0ColumnColumnHandEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnColumnHandEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsTextEdit[View]gvItems[Row]0[Column]ColumnHandle26";
                    this.mUIRow0ColumnColumnHandEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnColumnHandEdit1.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIRow0ColumnColumnHandEdit1;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle24";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXCell UIItem2Cell
        {
            get
            {
                if ((this.mUIItem2Cell == null))
                {
                    this.mUIItem2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle23";
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItem2Cell;
            }
        }
        
        public DXCell UIItem2Cell1
        {
            get
            {
                if ((this.mUIItem2Cell1 == null))
                {
                    this.mUIItem2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]1[Column]ColumnHandle24";
                    this.mUIItem2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell1.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItem2Cell1;
            }
        }
        
        public DXCell UIItem1Cell1
        {
            get
            {
                if ((this.mUIItem1Cell1 == null))
                {
                    this.mUIItem1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle19";
                    this.mUIItem1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell1.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItem1Cell1;
            }
        }
        
        public DXCell UIItem1Cell2
        {
            get
            {
                if ((this.mUIItem1Cell2 == null))
                {
                    this.mUIItem1Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle20";
                    this.mUIItem1Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell2.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItem1Cell2;
            }
        }
        
        public DXCell UIItem1Cell5
        {
            get
            {
                if ((this.mUIItem1Cell5 == null))
                {
                    this.mUIItem1Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle27";
                    this.mUIItem1Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell5.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItem1Cell5;
            }
        }
        
        public DXCell UIItem1Cell6
        {
            get
            {
                if ((this.mUIItem1Cell6 == null))
                {
                    this.mUIItem1Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]0[Column]ColumnHandle28";
                    this.mUIItem1Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell6.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItem1Cell6;
            }
        }
        
        public DXCell UIItem1Cell11
        {
            get
            {
                if ((this.mUIItem1Cell11 == null))
                {
                    this.mUIItem1Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsGridControlCell[View]gvItems[Row]2[Column]ColumnHandle31";
                    this.mUIItem1Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell11.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIItem1Cell11;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIVelgvaktkodeCell;
        
        private UIRow2147483647ColumncLookUpEdit mUIRow2147483647ColumncLookUpEdit;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXTextEdit mUIRow0ColumnColumnHandEdit;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItemCell3;
        
        private DXTextEdit mUIRow1ColumnColumnHandEdit;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell5;
        
        private DXTextEdit mUIRow2ColumnColumnHandEdit;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell7;
        
        private DXTextEdit mUIRow3ColumnColumnHandEdit;
        
        private DXCell mUIItemCell8;
        
        private DXCell mUIItemCell9;
        
        private DXTextEdit mUIRow4ColumnColumnHandEdit;
        
        private DXCell mUIItemCell11;
        
        private DXCell mUIItemCell21;
        
        private DXCell mUIItemCell31;
        
        private DXTextEdit mUIRow0ColumnColumnHandEdit1;
        
        private DXCell mUIItemCell12;
        
        private DXCell mUIItem2Cell;
        
        private DXCell mUIItem2Cell1;
        
        private DXCell mUIItem1Cell1;
        
        private DXCell mUIItem1Cell2;
        
        private DXCell mUIItem1Cell5;
        
        private DXCell mUIItem1Cell6;
        
        private DXCell mUIItem1Cell11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow2147483647ColumncLookUpEdit : DXLookUpEdit
    {
        
        public UIRow2147483647ColumncLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsLookUpEdit[View]gvItems[Row]-2147483647[Column]cItemName";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcItemsLookUpEdit[View]gvItems[Row]-2147483647[Column]cItemNamePopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaBottomClient1 : DXTestControl
    {
        
        public UIPaBottomClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paBottom";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Bemanningsplan lag");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSave";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Bemanningsplan lag");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink5MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink5MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink5MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink5MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[5]";
                    this.mUIBarButtonItemLink5MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink5MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIBarButtonItemLink3MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink3MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink3MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink3MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[3]";
                    this.mUIBarButtonItemLink3MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink3MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink5MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIBarButtonItemLink3MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISettekravtilpersonerWindow : DXWindow
    {
        
        public UISettekravtilpersonerWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Sette krav til personer på D1 (07.00 - 15.00) ";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
            #endregion
        }
        
        #region Properties
        public UIGrpRequirementsClient UIGrpRequirementsClient
        {
            get
            {
                if ((this.mUIGrpRequirementsClient == null))
                {
                    this.mUIGrpRequirementsClient = new UIGrpRequirementsClient(this);
                }
                return this.mUIGrpRequirementsClient;
            }
        }
        
        public UIGsPanelControl1Client UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpRequirementsClient mUIGrpRequirementsClient;
        
        private UIGsPanelControl1Client mUIGsPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpRequirementsClient : DXTestControl
    {
        
        public UIGrpRequirementsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpRequirements";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
            #endregion
        }
        
        #region Properties
        public UIGcRequirementTable UIGcRequirementTable
        {
            get
            {
                if ((this.mUIGcRequirementTable == null))
                {
                    this.mUIGcRequirementTable = new UIGcRequirementTable(this);
                }
                return this.mUIGcRequirementTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRequirementTable mUIGcRequirementTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRequirementTable : DXGrid
    {
        
        public UIGcRequirementTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]-2147483647[Column]gcolAmount" +
                        "";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow2147483647ColumngEdit
        {
            get
            {
                if ((this.mUIRow2147483647ColumngEdit == null))
                {
                    this.mUIRow2147483647ColumngEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementSpinEdit[View]gvRequirement[Row]-2147483647[Column]gcolAmount";
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
                    this.mUIRow2147483647ColumngEdit.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
                    #endregion
                }
                return this.mUIRow2147483647ColumngEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]0[Column]gcolCompetance";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXLookUpEdit UIRow0ColumngcolCompetLookUpEdit
        {
            get
            {
                if ((this.mUIRow0ColumngcolCompetLookUpEdit == null))
                {
                    this.mUIRow0ColumngcolCompetLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumngcolCompetLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]0[Column]gcolCompetance";
                    this.mUIRow0ColumngcolCompetLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
                    this.mUIRow0ColumngcolCompetLookUpEdit.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
                    #endregion
                }
                return this.mUIRow0ColumngcolCompetLookUpEdit;
            }
        }
        
        public DXCheckBox UICheckCheckBox
        {
            get
            {
                if ((this.mUICheckCheckBox == null))
                {
                    this.mUICheckCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUICheckCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementCheckEdit[View]gvRequirement[Row]0[Column]gcolReserved";
                    this.mUICheckCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
                    this.mUICheckCheckBox.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
                    #endregion
                }
                return this.mUICheckCheckBox;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]1[Column]gcolPosCat";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public UIRow1ColumngcolPosCatLookUpEdit UIRow1ColumngcolPosCatLookUpEdit
        {
            get
            {
                if ((this.mUIRow1ColumngcolPosCatLookUpEdit == null))
                {
                    this.mUIRow1ColumngcolPosCatLookUpEdit = new UIRow1ColumngcolPosCatLookUpEdit(this);
                }
                return this.mUIRow1ColumngcolPosCatLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow2147483647ColumngEdit;
        
        private DXCell mUIItemCell1;
        
        private DXLookUpEdit mUIRow0ColumngcolCompetLookUpEdit;
        
        private DXCheckBox mUICheckCheckBox;
        
        private DXCell mUIItemCell2;
        
        private UIRow1ColumngcolPosCatLookUpEdit mUIRow1ColumngcolPosCatLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow1ColumngcolPosCatLookUpEdit : DXLookUpEdit
    {
        
        public UIRow1ColumngcolPosCatLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]1[Column]gcolPosCat";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]1[Column]gcolPosCatPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl1Client : DXTestControl
    {
        
        public UIGsPanelControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSave";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Sette krav til personer på D1 (07.00 - 15.00) ");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISettekravtilpersonerWindow1 : DXWindow
    {
        
        public UISettekravtilpersonerWindow1()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Sette krav til personer på DH (07.30 - 15.00) ";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
            #endregion
        }
        
        #region Properties
        public UIGrpRequirementsClient1 UIGrpRequirementsClient
        {
            get
            {
                if ((this.mUIGrpRequirementsClient == null))
                {
                    this.mUIGrpRequirementsClient = new UIGrpRequirementsClient1(this);
                }
                return this.mUIGrpRequirementsClient;
            }
        }
        
        public UIGsPanelControl1Client1 UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client1(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpRequirementsClient1 mUIGrpRequirementsClient;
        
        private UIGsPanelControl1Client1 mUIGsPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpRequirementsClient1 : DXTestControl
    {
        
        public UIGrpRequirementsClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpRequirements";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
            #endregion
        }
        
        #region Properties
        public UIGcRequirementTable1 UIGcRequirementTable
        {
            get
            {
                if ((this.mUIGcRequirementTable == null))
                {
                    this.mUIGcRequirementTable = new UIGcRequirementTable1(this);
                }
                return this.mUIGcRequirementTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRequirementTable1 mUIGcRequirementTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRequirementTable1 : DXGrid
    {
        
        public UIGcRequirementTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]-2147483647[Column]gcolAmount" +
                        "";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow2147483647ColumngEdit
        {
            get
            {
                if ((this.mUIRow2147483647ColumngEdit == null))
                {
                    this.mUIRow2147483647ColumngEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementSpinEdit[View]gvRequirement[Row]-2147483647[Column]gcolAmount";
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
                    this.mUIRow2147483647ColumngEdit.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
                    #endregion
                }
                return this.mUIRow2147483647ColumngEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]0[Column]gcolGroup";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public UIRow0ColumngcolGroupLookUpEdit UIRow0ColumngcolGroupLookUpEdit
        {
            get
            {
                if ((this.mUIRow0ColumngcolGroupLookUpEdit == null))
                {
                    this.mUIRow0ColumngcolGroupLookUpEdit = new UIRow0ColumngcolGroupLookUpEdit(this);
                }
                return this.mUIRow0ColumngcolGroupLookUpEdit;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]1[Column]gcolGroup";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public UIRow1ColumngcolGroupLookUpEdit UIRow1ColumngcolGroupLookUpEdit
        {
            get
            {
                if ((this.mUIRow1ColumngcolGroupLookUpEdit == null))
                {
                    this.mUIRow1ColumngcolGroupLookUpEdit = new UIRow1ColumngcolGroupLookUpEdit(this);
                }
                return this.mUIRow1ColumngcolGroupLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow2147483647ColumngEdit;
        
        private DXCell mUIItemCell1;
        
        private UIRow0ColumngcolGroupLookUpEdit mUIRow0ColumngcolGroupLookUpEdit;
        
        private DXCell mUIItemCell2;
        
        private UIRow1ColumngcolGroupLookUpEdit mUIRow1ColumngcolGroupLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow0ColumngcolGroupLookUpEdit : DXLookUpEdit
    {
        
        public UIRow0ColumngcolGroupLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]0[Column]gcolGroup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]0[Column]gcolGroupPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow1ColumngcolGroupLookUpEdit : DXLookUpEdit
    {
        
        public UIRow1ColumngcolGroupLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]1[Column]gcolGroup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]1[Column]gcolGroupPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl1Client1 : DXTestControl
    {
        
        public UIGsPanelControl1Client1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSave";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Sette krav til personer på DH (07.30 - 15.00) ");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISettekravtilpersonerWindow2 : DXWindow
    {
        
        public UISettekravtilpersonerWindow2()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Sette krav til personer på A1 (14.30 - 22.30) ";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
            #endregion
        }
        
        #region Properties
        public UIGrpRequirementsClient2 UIGrpRequirementsClient
        {
            get
            {
                if ((this.mUIGrpRequirementsClient == null))
                {
                    this.mUIGrpRequirementsClient = new UIGrpRequirementsClient2(this);
                }
                return this.mUIGrpRequirementsClient;
            }
        }
        
        public UIGSPanelControlClient UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpRequirementsClient2 mUIGrpRequirementsClient;
        
        private UIGSPanelControlClient mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpRequirementsClient2 : DXTestControl
    {
        
        public UIGrpRequirementsClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpRequirements";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
            #endregion
        }
        
        #region Properties
        public UIGcRequirementTable2 UIGcRequirementTable
        {
            get
            {
                if ((this.mUIGcRequirementTable == null))
                {
                    this.mUIGcRequirementTable = new UIGcRequirementTable2(this);
                }
                return this.mUIGcRequirementTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRequirementTable2 mUIGcRequirementTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRequirementTable2 : DXGrid
    {
        
        public UIGcRequirementTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]-2147483647[Column]gcolAmount" +
                        "";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow2147483647ColumngEdit
        {
            get
            {
                if ((this.mUIRow2147483647ColumngEdit == null))
                {
                    this.mUIRow2147483647ColumngEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementSpinEdit[View]gvRequirement[Row]-2147483647[Column]gcolAmount";
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
                    this.mUIRow2147483647ColumngEdit.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
                    #endregion
                }
                return this.mUIRow2147483647ColumngEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]0[Column]gcolGroup";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public UIRow0ColumngcolGroupLookUpEdit1 UIRow0ColumngcolGroupLookUpEdit
        {
            get
            {
                if ((this.mUIRow0ColumngcolGroupLookUpEdit == null))
                {
                    this.mUIRow0ColumngcolGroupLookUpEdit = new UIRow0ColumngcolGroupLookUpEdit1(this);
                }
                return this.mUIRow0ColumngcolGroupLookUpEdit;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]1[Column]gcolPosCat";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public UIRow1ColumngcolPosCatLookUpEdit1 UIRow1ColumngcolPosCatLookUpEdit
        {
            get
            {
                if ((this.mUIRow1ColumngcolPosCatLookUpEdit == null))
                {
                    this.mUIRow1ColumngcolPosCatLookUpEdit = new UIRow1ColumngcolPosCatLookUpEdit1(this);
                }
                return this.mUIRow1ColumngcolPosCatLookUpEdit;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]2[Column]gcolGroup";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public UIRow2ColumngcolGroupLookUpEdit UIRow2ColumngcolGroupLookUpEdit
        {
            get
            {
                if ((this.mUIRow2ColumngcolGroupLookUpEdit == null))
                {
                    this.mUIRow2ColumngcolGroupLookUpEdit = new UIRow2ColumngcolGroupLookUpEdit(this);
                }
                return this.mUIRow2ColumngcolGroupLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow2147483647ColumngEdit;
        
        private DXCell mUIItemCell1;
        
        private UIRow0ColumngcolGroupLookUpEdit1 mUIRow0ColumngcolGroupLookUpEdit;
        
        private DXCell mUIItemCell2;
        
        private UIRow1ColumngcolPosCatLookUpEdit1 mUIRow1ColumngcolPosCatLookUpEdit;
        
        private DXCell mUIItemCell3;
        
        private UIRow2ColumngcolGroupLookUpEdit mUIRow2ColumngcolGroupLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow0ColumngcolGroupLookUpEdit1 : DXLookUpEdit
    {
        
        public UIRow0ColumngcolGroupLookUpEdit1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]0[Column]gcolGroup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]0[Column]gcolGroupPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow1ColumngcolPosCatLookUpEdit1 : DXLookUpEdit
    {
        
        public UIRow1ColumngcolPosCatLookUpEdit1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]1[Column]gcolPosCat";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]1[Column]gcolPosCatPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow2ColumngcolGroupLookUpEdit : DXLookUpEdit
    {
        
        public UIRow2ColumngcolGroupLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]2[Column]gcolGroup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]2[Column]gcolGroupPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient : DXTestControl
    {
        
        public UIGSPanelControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSave";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Sette krav til personer på A1 (14.30 - 22.30) ");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISettekravtilpersonerWindow3 : DXWindow
    {
        
        public UISettekravtilpersonerWindow3()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Sette krav til personer på L (08.00 - 16.00) ";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sette krav til personer på L (08.00 - 16.00) ");
            #endregion
        }
        
        #region Properties
        public UIGrpRequirementsClient3 UIGrpRequirementsClient
        {
            get
            {
                if ((this.mUIGrpRequirementsClient == null))
                {
                    this.mUIGrpRequirementsClient = new UIGrpRequirementsClient3(this);
                }
                return this.mUIGrpRequirementsClient;
            }
        }
        
        public UIGsPanelControl1Client2 UIGsPanelControl1Client
        {
            get
            {
                if ((this.mUIGsPanelControl1Client == null))
                {
                    this.mUIGsPanelControl1Client = new UIGsPanelControl1Client2(this);
                }
                return this.mUIGsPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpRequirementsClient3 mUIGrpRequirementsClient;
        
        private UIGsPanelControl1Client2 mUIGsPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpRequirementsClient3 : DXTestControl
    {
        
        public UIGrpRequirementsClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpRequirements";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Sette krav til personer på L (08.00 - 16.00) ");
            #endregion
        }
        
        #region Properties
        public UIGcRequirementTable3 UIGcRequirementTable
        {
            get
            {
                if ((this.mUIGcRequirementTable == null))
                {
                    this.mUIGcRequirementTable = new UIGcRequirementTable3(this);
                }
                return this.mUIGcRequirementTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRequirementTable3 mUIGcRequirementTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRequirementTable3 : DXGrid
    {
        
        public UIGcRequirementTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Sette krav til personer på L (08.00 - 16.00) ");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]-2147483647[Column]gcolAmount" +
                        "";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Sette krav til personer på L (08.00 - 16.00) ");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow2147483647ColumngEdit
        {
            get
            {
                if ((this.mUIRow2147483647ColumngEdit == null))
                {
                    this.mUIRow2147483647ColumngEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementSpinEdit[View]gvRequirement[Row]-2147483647[Column]gcolAmount";
                    this.mUIRow2147483647ColumngEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
                    this.mUIRow2147483647ColumngEdit.WindowTitles.Add("Sette krav til personer på L (08.00 - 16.00) ");
                    #endregion
                }
                return this.mUIRow2147483647ColumngEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementGridControlCell[View]gvRequirement[Row]0[Column]gcolPosCat";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Sette krav til personer på L (08.00 - 16.00) ");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public UIRow0ColumngcolPosCatLookUpEdit UIRow0ColumngcolPosCatLookUpEdit
        {
            get
            {
                if ((this.mUIRow0ColumngcolPosCatLookUpEdit == null))
                {
                    this.mUIRow0ColumngcolPosCatLookUpEdit = new UIRow0ColumngcolPosCatLookUpEdit(this);
                }
                return this.mUIRow0ColumngcolPosCatLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow2147483647ColumngEdit;
        
        private DXCell mUIItemCell1;
        
        private UIRow0ColumngcolPosCatLookUpEdit mUIRow0ColumngcolPosCatLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow0ColumngcolPosCatLookUpEdit : DXLookUpEdit
    {
        
        public UIRow0ColumngcolPosCatLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]0[Column]gcolPosCat";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
            this.WindowTitles.Add("Sette krav til personer på L (08.00 - 16.00) ");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRequirementLookUpEdit[View]gvRequirement[Row]0[Column]gcolPosCatPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Sette krav til personer på L (08.00 - 16.00) ");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl1Client2 : DXTestControl
    {
        
        public UIGsPanelControl1Client2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Sette krav til personer på L (08.00 - 16.00) ");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSave";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Sette krav til personer på L (08.00 - 16.00) ");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : DXWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4001 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4001 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("GT-4001 - Informasjon");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
}
