// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _020_Test_Arbeidsplan_Redigering_GATP_740
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddAbsence_Step_51
        /// </summary>
        public void AddAbsence_Step_51()
        {
            #region Variable Declarations
            DXCell uIF1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell5;
            #endregion

            // Right-Click 'F1' cell
            Mouse.Click(uIF1Cell5, MouseButtons.Right, ModifierKeys.None, new Point(11, 9));
        }
        
        /// <summary>
        /// AddAbsence_Step_53
        /// </summary>
        public void AddAbsence_Step_53()
        {
            #region Variable Declarations
            DXCell uIN2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell4;
            #endregion

            // Right-Click 'N2' cell
            Mouse.Click(uIN2Cell4, MouseButtons.Right, ModifierKeys.None, new Point(23, 10));
        }
        
        /// <summary>
        /// AddBVShifts_Step_11
        /// </summary>
        public void AddBVShifts_Step_11()
        {
            #region Variable Declarations
            DXCell uIBVCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell;
            DXCell uIBVCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell3;
            DXCell uIBVCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell4;
            DXCell uIBVCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell5;
            DXCell uIBVCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell6;
            DXCell uIBVCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell7;
            DXCell uIBVCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell8;
            DXCell uIBVCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell9;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            #endregion

            // Click 'BV' cell
            Mouse.Click(uIBVCell, new Point(15, 10));

            // Click 'BV' cell
            Mouse.Click(uIBVCell3, new Point(18, 12));

            // Click 'BV' cell
            Mouse.Click(uIBVCell4, new Point(19, 9));

            // Click 'BV' cell
            Mouse.Click(uIBVCell5, new Point(23, 9));

            // Click 'BV' cell
            Mouse.Click(uIBVCell6, new Point(18, 9));

            // Click 'BV' cell
            Mouse.Click(uIBVCell7, new Point(22, 11));

            // Click 'BV' cell
            Mouse.Click(uIBVCell8, new Point(23, 8));

            // Click 'BV' cell
            Mouse.Click(uIBVCell9, new Point(13, 8));

            // Click cell
            Mouse.Click(uIItemCell4, new Point(6, 5));
        }
        
        /// <summary>
        /// AddEmployee_Step_31
        /// </summary>
        public void AddEmployee_Step_31()
        {
            #region Variable Declarations
            DXCell uIHansenHenrietteCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIHansenHenrietteCell;
            #endregion

            // Click 'Hansen, Henriette' cell
            Mouse.Click(uIHansenHenrietteCell, new Point(39, 8));
        }
        
        /// <summary>
        /// AddEmployees_Step_29 - Use 'AddEmployees_Step_29Params' to pass parameters into this method.
        /// </summary>
        public void AddEmployees_Step_29()
        {
            #region Variable Declarations
            DXCell uIBrøndboBjartmarCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIBrøndboBjartmarCell;
            DXGrid uIGcDepartmentEmployeeTable = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable;
            #endregion

            // Click 'Brøndbo, Bjartmar' cell
            Mouse.Click(uIBrøndboBjartmarCell, new Point(46, 7));

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.AddEmployees_Step_29Params.UIGcDepartmentEmployeeTableSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.AddEmployees_Step_29Params.UIGcDepartmentEmployeeTableSendKeys1, ModifierKeys.Shift);
        }
        
        /// <summary>
        /// AddShiftCodes_Step_46 - Use 'AddShiftCodes_Step_46Params' to pass parameters into this method.
        /// </summary>
        public void AddShiftCodes_Step_46()
        {
            #region Variable Declarations
            DXCell uIItemCell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell17;
            DXCell uIN2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell4;
            DXTextEdit uIRow2ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            #endregion

            // Move cell to 'N2' cell
            uIN2Cell4.EnsureClickable(new Point(19, 11));
            Mouse.StartDragging(uIItemCell17, new Point(12, 11));
            Mouse.StopDragging(uIN2Cell4, new Point(19, 11));

            // Type 'n2{Enter}' in '[Row]2[Column]RosterCell_14' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit, this.AddShiftCodes_Step_46Params.UIRow2ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddShiftsLine1Week1_Step_6 - Use 'AddShiftsLine1Week1_Step_6Params' to pass parameters into this method.
        /// </summary>
        public void AddShiftsLine1Week1_Step_6()
        {
            #region Variable Declarations
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            DXTextEdit uIRow0ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit1;
            DXTextEdit uIRow0ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit2;
            DXTextEdit uIRow0ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit3;
            DXTextEdit uIRow0ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit4;
            DXTextEdit uIRow0ColumnRosterCellEdit5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit5;
            DXTextEdit uIRow0ColumnRosterCellEdit6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit6;
            #endregion

            // Type 'd1{Tab}' in '[Row]0[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, this.AddShiftsLine1Week1_Step_6Params.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Type 'd2{Tab}' in '[Row]0[Column]RosterCell_1' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit1, this.AddShiftsLine1Week1_Step_6Params.UIRow0ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Type 'd3{Tab}' in '[Row]0[Column]RosterCell_2' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit2, this.AddShiftsLine1Week1_Step_6Params.UIRow0ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Type 'gv1{Tab}' in '[Row]0[Column]RosterCell_3' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit3, this.AddShiftsLine1Week1_Step_6Params.UIRow0ColumnRosterCellEdit3SendKeys, ModifierKeys.None);

            // Type 'f1{Tab}' in '[Row]0[Column]RosterCell_4' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit4, this.AddShiftsLine1Week1_Step_6Params.UIRow0ColumnRosterCellEdit4SendKeys, ModifierKeys.None);

            // Type 'a1{Tab}' in '[Row]0[Column]RosterCell_5' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit5, this.AddShiftsLine1Week1_Step_6Params.UIRow0ColumnRosterCellEdit5SendKeys, ModifierKeys.None);

            // Type 'a3{Tab}' in '[Row]0[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit6, this.AddShiftsLine1Week1_Step_6Params.UIRow0ColumnRosterCellEdit6SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ChangeViewperiod_Step_32
        /// </summary>
        public void ChangeViewperiod_Step_32()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIFremRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgDisplayPeriodRibbonPageGroup.UIFremRibbonBaseButtonItem;
            #endregion

            // Click 'Frem' RibbonBaseButtonItem
            Mouse.Click(uIFremRibbonBaseButtonItem, new Point(19, 24));
        }
        
        /// <summary>
        /// ChangeViewperiod_Step_34
        /// </summary>
        public void ChangeViewperiod_Step_34()
        {
            #region Variable Declarations
            DXRibbonButtonItem uITilbakeRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgDisplayPeriodRibbonPageGroup.UITilbakeRibbonBaseButtonItem;
            #endregion

            // Click 'Tilbake' RibbonBaseButtonItem
            Mouse.Click(uITilbakeRibbonBaseButtonItem, new Point(21, 36));
        }
        
        /// <summary>
        /// CheckAbsenceAdded_Step_51 - Use 'CheckAbsenceAdded_Step_51ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAbsenceAdded_Step_51()
        {
            #region Variable Declarations
            DXCell uIBVCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell6;
            DXCell uIBVCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell7;
            DXCell uIBVCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell8;
            DXCell uIBVCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell9;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIF2Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell5;
            DXCell uIF1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell5;
            #endregion

            // Verify that the 'ValueAsString' property of 'BV' cell equals 'NewPlanShift (GV1) readonly'
            Assert.AreEqual(this.CheckAbsenceAdded_Step_51ExpectedValues.UIBVCell6ValueAsString, uIBVCell6.ValueAsString);

            // Verify that the 'ValueAsString' property of 'BV' cell equals 'NewPlanShift (GV1) readonly'
            Assert.AreEqual(this.CheckAbsenceAdded_Step_51ExpectedValues.UIBVCell7ValueAsString, uIBVCell7.ValueAsString);

            // Verify that the 'ValueAsString' property of 'BV' cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckAbsenceAdded_Step_51ExpectedValues.UIBVCell8ValueAsString, uIBVCell8.ValueAsString);

            // Verify that the 'ValueAsString' property of 'BV' cell equals 'PlanShift (GV2) readonly'
            Assert.AreEqual(this.CheckAbsenceAdded_Step_51ExpectedValues.UIBVCell9ValueAsString, uIBVCell9.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (GV2) readonly'
            Assert.AreEqual(this.CheckAbsenceAdded_Step_51ExpectedValues.UIItemCell4ValueAsString, uIItemCell4.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckAbsenceAdded_Step_51ExpectedValues.UIF2Cell5ValueAsString, uIF2Cell5.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckAbsenceAdded_Step_51ExpectedValues.UIF1Cell5ValueAsString, uIF1Cell5.ValueAsString);
        }
        
        /// <summary>
        /// CheckAbsencesStep54 - Use 'CheckAbsencesStep54ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAbsencesStep54()
        {
            #region Variable Declarations
            DXCell uINilssonNisseCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIAbsenceListViewCustom.UIGcAbsenceListTable.UINilssonNisseCell;
            DXCell uIItem41FeriedagCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIItem41FeriedagCell;
            DXCell uIItem14052024Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIItem14052024Cell;
            DXCell uIItem14052024Cell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIItem14052024Cell1;
            DXCell uIItem4Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIItem4Cell;
            DXCell uIOlsenBrorCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIOlsenBrorCell;
            DXCell uIItem5010ArbeidsplanoCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIItem5010ArbeidsplanoCell;
            DXCell uIItem45Ferie5dgrukeCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIItem45Ferie5dgrukeCell;
            DXCell uIItem06052024Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIItem06052024Cell;
            DXCell uIItem12052024Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIItem12052024Cell;
            DXCell uIItem1Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIItem1Cell;
            #endregion

            // Verify that the 'Text' property of 'Nilsson, Nisse' cell equals 'Olsen, Bror'
            Assert.AreEqual(this.CheckAbsencesStep54ExpectedValues.UINilssonNisseCellText, uINilssonNisseCell.Text);

            // Verify that the 'Text' property of '41 - Ferie dag' cell equals '45 - Ferie 5 dgr/uke'
            Assert.AreEqual(this.CheckAbsencesStep54ExpectedValues.UIItem41FeriedagCellText, uIItem41FeriedagCell.Text);

            // Verify that the 'Text' property of '14.05.2024' cell equals '06.05.2024'
            Assert.AreEqual(this.CheckAbsencesStep54ExpectedValues.UIItem14052024CellText, uIItem14052024Cell.Text);

            // Verify that the 'Text' property of '14.05.2024' cell equals '12.05.2024'
            Assert.AreEqual(this.CheckAbsencesStep54ExpectedValues.UIItem14052024Cell1Text, uIItem14052024Cell1.Text);

            // Verify that the 'Text' property of '4' cell equals '4'
            Assert.AreEqual(this.CheckAbsencesStep54ExpectedValues.UIItem4CellText, uIItem4Cell.Text);

            // Verify that the 'Text' property of 'Olsen, Bror' cell equals 'Nilsson, Nisse'
            Assert.AreEqual(this.CheckAbsencesStep54ExpectedValues.UIOlsenBrorCellText, uIOlsenBrorCell.Text);

            // Verify that the 'Text' property of '5010 - Arbeidsplan og hjelpeplan' cell equals '5010 - Arbeidsplan og hjelpeplan'
            Assert.AreEqual(this.CheckAbsencesStep54ExpectedValues.UIItem5010ArbeidsplanoCellText, uIItem5010ArbeidsplanoCell.Text);

            // Verify that the 'Text' property of '45 - Ferie 5 dgr/uke' cell equals '41 - Ferie dag'
            Assert.AreEqual(this.CheckAbsencesStep54ExpectedValues.UIItem45Ferie5dgrukeCellText, uIItem45Ferie5dgrukeCell.Text);

            // Verify that the 'Text' property of '06.05.2024' cell equals '14.05.2024'
            Assert.AreEqual(this.CheckAbsencesStep54ExpectedValues.UIItem06052024CellText, uIItem06052024Cell.Text);

            // Verify that the 'Text' property of '12.05.2024' cell equals '14.05.2024'
            Assert.AreEqual(this.CheckAbsencesStep54ExpectedValues.UIItem12052024CellText, uIItem12052024Cell.Text);

            // Verify that the 'Text' property of '1' cell equals '1'
            Assert.AreEqual(this.CheckAbsencesStep54ExpectedValues.UIItem1CellText, uIItem1Cell.Text);
        }
        
        /// <summary>
        /// CheckCellsLocked_Step_49 - Use 'CheckCellsLocked_Step_49ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCellsLocked_Step_49()
        {
            #region Variable Declarations
            DXCell uID1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell2;
            #endregion

            // Verify that the 'Text' property of 'D1' cell equals 'GV1'
            Assert.AreEqual(this.CheckCellsLocked_Step_49ExpectedValues.UID1Cell2Text, uID1Cell2.Text);

            // Verify that the 'ValueAsString' property of 'D1' cell equals 'NewPlanShift (GV1)'
            Assert.AreEqual(this.CheckCellsLocked_Step_49ExpectedValues.UID1Cell2ValueAsString, uID1Cell2.ValueAsString);
        }
        
        /// <summary>
        /// CheckErrorMessage_Step_7 - Use 'CheckErrorMessage_Step_7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckErrorMessage_Step_7()
        {
            #region Variable Declarations
            DXTextEdit uIRow0ColumnRosterCellEdit41 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit41;
            #endregion

            // Verify that the 'ErrorText' property of '[Row]0[Column]RosterCell_16' text box equals 'Ukjent vaktkode(kk5)'
            Assert.AreEqual(this.CheckErrorMessage_Step_7ExpectedValues.UIRow0ColumnRosterCellEdit41ErrorText, uIRow0ColumnRosterCellEdit41.ErrorText);
        }
        
        /// <summary>
        /// CheckF3Shifts_Step_42 - Use 'CheckF3Shifts_Step_42ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckF3Shifts_Step_42()
        {
            #region Variable Declarations
            DXCell uID3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell;
            DXCell uIN2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell2;
            DXCell uIBVCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell3;
            DXCell uID3Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell3;
            DXCell uIItemCell24 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell24;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell11;
            DXCell uILCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell2;
            DXCell uIGV1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell2;
            DXCell uIBVCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell9;
            DXCell uIBV3Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell2;
            DXCell uIKK4Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK4Cell;
            DXCell uIF1Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell10;
            DXCell uIItemCell18 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell18;
            DXCell uIKK4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK4Cell1;
            DXCell uIGV2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell1;
            DXCell uIF3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell;
            DXCell uIF3Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell1;
            DXCell uIF3Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell2;
            DXCell uIF3Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell3;
            DXCell uIF3Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell4;
            #endregion

            // Verify that the 'Text' property of 'D3' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UID3CellText, uID3Cell.Text);

            // Verify that the 'Text' property of 'N2' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIN2Cell2Text, uIN2Cell2.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIBVCell3Text, uIBVCell3.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UID3Cell3Text, uID3Cell3.Text);

            // Verify that the 'Text' property of cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIItemCell24Text, uIItemCell24.Text);

            // Verify that the 'Text' property of cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIItemCell11Text, uIItemCell11.Text);

            // Verify that the 'Text' property of 'L' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UILCell2Text, uILCell2.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIGV1Cell2Text, uIGV1Cell2.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIBVCell9Text, uIBVCell9.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIBV3Cell2Text, uIBV3Cell2.Text);

            // Verify that the 'Text' property of 'KK4' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIKK4CellText, uIKK4Cell.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIF1Cell10Text, uIF1Cell10.Text);

            // Verify that the 'Text' property of cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIItemCell18Text, uIItemCell18.Text);

            // Verify that the 'Text' property of 'KK4' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIKK4Cell1Text, uIKK4Cell1.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIGV2Cell1Text, uIGV2Cell1.Text);

            // Verify that the 'Text' property of 'F3' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIF3CellText, uIF3Cell.Text);

            // Verify that the 'Text' property of 'F3' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIF3Cell1Text, uIF3Cell1.Text);

            // Verify that the 'Text' property of 'F3' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIF3Cell2Text, uIF3Cell2.Text);

            // Verify that the 'Text' property of 'F3' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIF3Cell3Text, uIF3Cell3.Text);

            // Verify that the 'Text' property of 'F3' cell equals 'F3'
            Assert.AreEqual(this.CheckF3Shifts_Step_42ExpectedValues.UIF3Cell4Text, uIF3Cell4.Text);
        }
        
        /// <summary>
        /// CheckFreeCodesAdded - Use 'CheckFreeCodesAddedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFreeCodesAdded()
        {
            #region Variable Declarations
            DXCell uIF2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell;
            DXCell uIF2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell1;
            DXCell uIF2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell2;
            DXCell uIF1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell;
            DXCell uIF1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell1;
            DXCell uIF1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell2;
            DXCell uIF2Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell3;
            DXCell uIF2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell4;
            DXCell uIF2Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell5;
            DXCell uIF1Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell3;
            DXCell uIF1Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell4;
            DXCell uIF1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell5;
            DXCell uIF2Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell6;
            DXCell uIF2Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell7;
            DXCell uIF2Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell8;
            DXCell uIF1Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell6;
            DXCell uIF1Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell7;
            DXCell uIF1Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell8;
            #endregion

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF2CellValueAsString, uIF2Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF2Cell1ValueAsString, uIF2Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF2Cell2ValueAsString, uIF2Cell2.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF1CellValueAsString, uIF1Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF1Cell1ValueAsString, uIF1Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF1Cell2ValueAsString, uIF1Cell2.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF2Cell3ValueAsString, uIF2Cell3.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF2Cell4ValueAsString, uIF2Cell4.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF2Cell5ValueAsString, uIF2Cell5.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF1Cell3ValueAsString, uIF1Cell3.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF1Cell4ValueAsString, uIF1Cell4.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF1Cell5ValueAsString, uIF1Cell5.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF2Cell6ValueAsString, uIF2Cell6.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF2Cell7ValueAsString, uIF2Cell7.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF2Cell8ValueAsString, uIF2Cell8.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF1Cell6ValueAsString, uIF1Cell6.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF1Cell7ValueAsString, uIF1Cell7.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
            Assert.AreEqual(this.CheckFreeCodesAddedExpectedValues.UIF1Cell8ValueAsString, uIF1Cell8.ValueAsString);
        }
        
        /// <summary>
        /// CheckInsertButton_Step_10 - Use 'CheckInsertButton_Step_10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckInsertButton_Step_10()
        {
            #region Variable Declarations
            DXRibbonButtonItem uISettinnRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpInsertToolsRibbonPageGroup.UISettinnRibbonBaseButtonItem;
            DXRibbonItem uIBV5010RibbonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpInsertToolsRibbonPageGroup.UIBV5010RibbonItem;
            #endregion

            // Verify that the 'Checked' property of 'Sett inn' RibbonBaseButtonItem equals 'True'
            Assert.AreEqual(this.CheckInsertButton_Step_10ExpectedValues.UISettinnRibbonBaseButtonItemChecked, uISettinnRibbonBaseButtonItem.Checked);

            // Verify that the 'Text' property of 'BV (5010)' RibbonItem equals 'BV (5010)'
            Assert.AreEqual(this.CheckInsertButton_Step_10ExpectedValues.UIBV5010RibbonItemText, uIBV5010RibbonItem.Text);
        }
        
        /// <summary>
        /// CheckMessage_Step_39 - Use 'CheckMessage_Step_39ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckMessage_Step_39()
        {
            #region Variable Declarations
            WinText uIPlanenerendretVildulText = this.UIRPL24009Window.UIPlanenerendretVildulText;
            #endregion

            // Verify that the 'Name' property of 'Planen er endret. Vil du lagre endringer før du fo...' label equals 'Planen er endret. Vil du lagre endringer før du fortsetter?'
            Assert.AreEqual(this.CheckMessage_Step_39ExpectedValues.UIPlanenerendretVildulTextName, uIPlanenerendretVildulText.Name);
        }
        
        /// <summary>
        /// CheckMessage_Step_8 - Use 'CheckMessage_Step_8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckMessage_Step_8()
        {
            #region Variable Declarations
            DXTextEdit uIEMessageEdit = this.UIGT3999InformasjonWindow.UIEMessageEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'eMessage' text box equals 'Du må gjøre ferdig endringene for den aktive cellen før du forlater redigeringsmodus!'
            Assert.AreEqual(this.CheckMessage_Step_8ExpectedValues.UIEMessageEditValueAsString, uIEMessageEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckOkDisabled_Step_23 - Use 'CheckOkDisabled_Step_23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOkDisabled_Step_23()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIUtjevningsvaktWindow.UIPnlButtonsClient.UIOKButton;
            #endregion

            // Verify that the 'Enabled' property of 'Ok' button equals 'False'
            Assert.AreEqual(this.CheckOkDisabled_Step_23ExpectedValues.UIOKButtonEnabled, uIOKButton.Enabled);
        }
        
        /// <summary>
        /// CheckRegStatusMessage_Step_23 - Use 'CheckRegStatusMessage_Step_23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRegStatusMessage_Step_23()
        {
            #region Variable Declarations
            DXCell uIAntallminuttererugylCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UIAntallminuttererugylCell;
            DXCell uIAntallminuttermåværeCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UIAntallminuttermåværeCell;
            #endregion

            // Verify that the 'Text' property of 'Antall minutter er ugyldig.' cell equals 'Antall minutter er ugyldig.'
            Assert.AreEqual(this.CheckRegStatusMessage_Step_23ExpectedValues.UIAntallminuttererugylCellText, uIAntallminuttererugylCell.Text);

            // Verify that the 'Text' property of 'Antall minutter må være fra 1 til 539.' cell equals 'Antall minutter må være fra 1 til 539.'
            Assert.AreEqual(this.CheckRegStatusMessage_Step_23ExpectedValues.UIAntallminuttermåværeCellText, uIAntallminuttermåværeCell.Text);
        }
        
        /// <summary>
        /// CheckReplacedShifts_Step_37 - Use 'CheckReplacedShifts_Step_37ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckReplacedShifts_Step_37()
        {
            #region Variable Declarations
            DXCell uIItemCell23 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell23;
            DXCell uIGV1Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell7;
            DXCell uIItemCell24 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell24;
            DXCell uIItemCell29 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell29;
            DXCell uIItemCell25 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell25;
            DXCell uIGV2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell2;
            DXCell uIA3Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell1;
            DXCell uIGV2Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell3;
            DXCell uIBV3Cell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell12;
            DXCell uIN1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell;
            DXCell uIBV3Cell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell13;
            DXCell uIN1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell1;
            DXCell uIBV3Cell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell14;
            DXCell uIN1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell2;
            DXCell uIBV3Cell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell15;
            DXCell uIN1Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell3;
            DXCell uIGV1Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell9;
            DXCell uIT1Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell7;
            DXCell uIItemCell40 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell40;
            DXCell uIT1Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell8;
            DXCell uIGV2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell4;
            DXCell uIT1Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell9;
            DXCell uIGV2Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell5;
            DXCell uIT1Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell10;
            DXCell uIBV3Cell16 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell16;
            DXCell uIN1Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell4;
            DXCell uIBV3Cell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell17;
            DXCell uIN1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell5;
            DXCell uIBV3Cell18 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell18;
            DXCell uIN1Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell6;
            DXCell uIBV3Cell19 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell19;
            DXCell uIN1Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell7;
            DXCell uIBV3Cell20 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell20;
            DXCell uIN1Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell8;
            DXCell uIBV3Cell21 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell21;
            DXCell uIN1Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell9;
            DXCell uIBV3Cell22 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell22;
            DXCell uIN1Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell10;
            DXCell uIBV3Cell23 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell23;
            DXCell uIN1Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN1Cell11;
            #endregion

            // Verify that the 'Text' property of cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIItemCell23Text, uIItemCell23.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIGV1Cell7Text, uIGV1Cell7.Text);

            // Verify that the 'Text' property of cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIItemCell24Text, uIItemCell24.Text);

            // Verify that the 'Text' property of cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIItemCell29Text, uIItemCell29.Text);

            // Verify that the 'Text' property of cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIItemCell25Text, uIItemCell25.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIGV2Cell2Text, uIGV2Cell2.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIA3Cell1Text, uIA3Cell1.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIGV2Cell3Text, uIGV2Cell3.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell12Text, uIBV3Cell12.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1CellText, uIN1Cell.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell13Text, uIBV3Cell13.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1Cell1Text, uIN1Cell1.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell14Text, uIBV3Cell14.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1Cell2Text, uIN1Cell2.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell15Text, uIBV3Cell15.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1Cell3Text, uIN1Cell3.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIGV1Cell9Text, uIGV1Cell9.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIT1Cell7Text, uIT1Cell7.Text);

            // Verify that the 'Text' property of cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIItemCell40Text, uIItemCell40.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIT1Cell8Text, uIT1Cell8.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIGV2Cell4Text, uIGV2Cell4.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIT1Cell9Text, uIT1Cell9.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIGV2Cell5Text, uIGV2Cell5.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIT1Cell10Text, uIT1Cell10.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell16Text, uIBV3Cell16.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1Cell4Text, uIN1Cell4.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell17Text, uIBV3Cell17.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1Cell5Text, uIN1Cell5.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell18Text, uIBV3Cell18.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1Cell6Text, uIN1Cell6.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell19Text, uIBV3Cell19.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1Cell7Text, uIN1Cell7.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell20Text, uIBV3Cell20.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1Cell8Text, uIN1Cell8.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell21Text, uIBV3Cell21.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1Cell9Text, uIN1Cell9.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell22Text, uIBV3Cell22.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1Cell10Text, uIN1Cell10.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIBV3Cell23Text, uIBV3Cell23.Text);

            // Verify that the 'Text' property of 'N1' cell equals 'N1'
            Assert.AreEqual(this.CheckReplacedShifts_Step_37ExpectedValues.UIN1Cell11Text, uIN1Cell11.Text);
        }
        
        /// <summary>
        /// CheckSaveDisabled_Step_21 - Use 'CheckSaveDisabled_Step_21ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSaveDisabled_Step_21()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIUtjevningsvaktWindow.UIPnlButtonsClient.UIOKButton;
            DXPopupEdit uILnkDetailPopupEdit = this.UIUtjevningsvaktWindow.UILnkDetailPopupEdit;
            #endregion

            // Verify that the 'Enabled' property of 'Ok' button equals 'False'
            Assert.AreEqual(this.CheckSaveDisabled_Step_21ExpectedValues.UIOKButtonEnabled, uIOKButton.Enabled);

            // Verify that the 'Text' property of 'lnkDetail' PopupEdit equals '1 meldinger.'
            Assert.AreEqual(this.CheckSaveDisabled_Step_21ExpectedValues.UILnkDetailPopupEditText, uILnkDetailPopupEdit.Text);
        }
        
        /// <summary>
        /// CheckSErrorMessage_Step_16 - Use 'CheckSErrorMessage_Step_16ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSErrorMessage_Step_16()
        {
            #region Variable Declarations
            DXTextEdit uIRow1ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit3;
            #endregion

            // Verify that the 'ErrorText' property of '[Row]1[Column]RosterCell_12' text box equals 'Vaktkode L kan ikke brukes på denne dagen. Vakten vil ikke bli iverksatt.'
            Assert.AreEqual(this.CheckSErrorMessage_Step_16ExpectedValues.UIRow1ColumnRosterCellEdit3ErrorText, uIRow1ColumnRosterCellEdit3.ErrorText);
        }
        
        /// <summary>
        /// CheckShift_Step_27 - Use 'CheckShift_Step_27ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShift_Step_27()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            DXCell uID2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID2Cell;
            DXCell uID3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell;
            DXCell uIGV1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell;
            DXCell uIF1Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell9;
            DXCell uIA1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA1Cell;
            DXCell uIA3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell;
            DXCell uIItemCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell9;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXCell uIN2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell1;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell11;
            DXCell uIItemCell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell10;
            DXCell uIF2Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell3;
            DXCell uIF1Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell3;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            DXCell uIItemCell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell13;
            DXCell uIItemCell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell12;
            DXCell uIItemCell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell14;
            DXCell uIKK4Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK4Cell;
            DXCell uIF2Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell6;
            DXCell uIF1Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell6;
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIBVCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell;
            DXCell uIN2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell2;
            DXCell uIN2Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell3;
            DXCell uIItemCell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell15;
            DXCell uIF2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell;
            DXCell uIF1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            DXCell uILCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell;
            DXCell uILCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell1;
            DXCell uILCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell2;
            DXCell uIItemCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell7;
            DXCell uIF2Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell9;
            DXCell uILCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell3;
            DXCell uID1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell;
            DXCell uID2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID2Cell1;
            DXCell uID3Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell1;
            DXCell uIGV1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell1;
            DXCell uIF1Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell10;
            DXCell uIF2Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell7;
            DXCell uIF1Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell7;
            DXCell uIKK1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK1Cell;
            DXCell uIItemCell16 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell16;
            DXCell uIBVCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell3;
            DXCell uIBVCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell4;
            DXCell uIBVCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell5;
            DXCell uIF2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell1;
            DXCell uIF1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell1;
            DXCell uID1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell1;
            DXCell uID2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID2Cell2;
            DXCell uID3Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell2;
            DXCell uIGV1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell2;
            DXCell uIF1Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell11;
            DXCell uIF2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell4;
            DXCell uIF1Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell4;
            DXCell uIItemCell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell17;
            DXCell uIN2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell4;
            DXCell uIN2Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell5;
            DXCell uIN2Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell6;
            DXCell uIItemCell18 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell18;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXCell uIBVCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell1;
            DXCell uID1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell2;
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXCell uID3Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell3;
            DXCell uIGV1Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell3;
            DXCell uIF1Cell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell12;
            DXCell uIF2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell2;
            DXCell uIF1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell2;
            DXCell uIBVCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell6;
            DXCell uIBVCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell7;
            DXCell uIBVCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell8;
            DXCell uIBVCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell9;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIF2Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell5;
            DXCell uIF1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell5;
            DXCell uIKK1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK1Cell1;
            DXCell uIItemCell19 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell19;
            DXCell uIKK2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK2Cell;
            DXCell uIItemCell20 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell20;
            DXCell uIKK4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK4Cell1;
            DXCell uIF2Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell8;
            DXCell uIF1Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell8;
            #endregion

            // Verify that the 'Text' property of cell equals 'D1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCellText, uIItemCell.Text);

            // Verify that the 'Text' property of 'D2' cell equals 'D2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UID2CellText, uID2Cell.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'D3'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UID3CellText, uID3Cell.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIGV1CellText, uIGV1Cell.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell9Text, uIF1Cell9.Text);

            // Verify that the 'Text' property of 'A1' cell equals 'A1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIA1CellText, uIA1Cell.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'A3'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIA3CellText, uIA3Cell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell9Text, uIItemCell9.Text);

            // Verify that the 'Text' property of cell equals 'N2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell1Text, uIItemCell1.Text);

            // Verify that the 'Text' property of 'N2' cell equals 'N2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIN2Cell1Text, uIN2Cell1.Text);

            // Verify that the 'Text' property of cell equals 'N2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell11Text, uIItemCell11.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell10Text, uIItemCell10.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF2Cell3Text, uIF2Cell3.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell3Text, uIF1Cell3.Text);

            // Verify that the 'Text' property of cell equals 'KK1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell2Text, uIItemCell2.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell13Text, uIItemCell13.Text);

            // Verify that the 'Text' property of cell equals 'KK2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell12Text, uIItemCell12.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell14Text, uIItemCell14.Text);

            // Verify that the 'Text' property of 'KK4' cell equals 'KK4'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIKK4CellText, uIKK4Cell.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF2Cell6Text, uIF2Cell6.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell6Text, uIF1Cell6.Text);

            // Verify that the 'ClassName' property of cell equals 'GridControlCell'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell3ClassName, uIItemCell3.ClassName);

            // Verify that the 'ClassName' property of 'BV' cell equals 'GridControlCell'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIBVCellClassName, uIBVCell.ClassName);

            // Verify that the 'Text' property of 'N2' cell equals 'N2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIN2Cell2Text, uIN2Cell2.Text);

            // Verify that the 'Text' property of 'N2' cell equals 'N2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIN2Cell3Text, uIN2Cell3.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell15Text, uIItemCell15.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF2CellText, uIF2Cell.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1CellText, uIF1Cell.Text);

            // Verify that the 'Text' property of cell equals 'KK1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell8Text, uIItemCell8.Text);

            // Verify that the 'Text' property of 'L' cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UILCellText, uILCell.Text);

            // Verify that the 'Text' property of 'L' cell equals 'KK2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UILCell1Text, uILCell1.Text);

            // Verify that the 'Text' property of 'L' cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UILCell2Text, uILCell2.Text);

            // Verify that the 'Text' property of cell equals 'KK4'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell7Text, uIItemCell7.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF2Cell9Text, uIF2Cell9.Text);

            // Verify that the 'Text' property of 'L' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UILCell3Text, uILCell3.Text);

            // Verify that the 'Text' property of 'D1' cell equals 'D1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UID1CellText, uID1Cell.Text);

            // Verify that the 'Text' property of 'D2' cell equals 'D2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UID2Cell1Text, uID2Cell1.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'D3'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UID3Cell1Text, uID3Cell1.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIGV1Cell1Text, uIGV1Cell1.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell10Text, uIF1Cell10.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'A1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF2Cell7Text, uIF2Cell7.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'A3'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell7Text, uIF1Cell7.Text);

            // Verify that the 'Text' property of 'KK1' cell equals 'KK1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIKK1CellText, uIKK1Cell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell16Text, uIItemCell16.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'KK2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIBVCell3Text, uIBVCell3.Text);

            // Verify that the 'Text' property of 'BV' cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIBVCell4Text, uIBVCell4.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'KK4'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIBVCell5Text, uIBVCell5.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF2Cell1Text, uIF2Cell1.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell1Text, uIF1Cell1.Text);

            // Verify that the 'Text' property of 'D1' cell equals 'D1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UID1Cell1Text, uID1Cell1.Text);

            // Verify that the 'Text' property of 'D2' cell equals 'D2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UID2Cell2Text, uID2Cell2.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'D3'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UID3Cell2Text, uID3Cell2.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIGV1Cell2Text, uIGV1Cell2.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell11Text, uIF1Cell11.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'A1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF2Cell4Text, uIF2Cell4.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'A3'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell4Text, uIF1Cell4.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell17Text, uIItemCell17.Text);

            // Verify that the 'Text' property of 'N2' cell equals 'N2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIN2Cell4Text, uIN2Cell4.Text);

            // Verify that the 'Text' property of 'N2' cell equals 'N2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIN2Cell5Text, uIN2Cell5.Text);

            // Verify that the 'Text' property of 'N2' cell equals 'N2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIN2Cell6Text, uIN2Cell6.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell18Text, uIItemCell18.Text);

            // Verify that the 'Text' property of cell equals 'F2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell5Text, uIItemCell5.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIBVCell1Text, uIBVCell1.Text);

            // Verify that the 'Text' property of 'D1' cell equals 'D1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UID1Cell2Text, uID1Cell2.Text);

            // Verify that the 'Text' property of cell equals 'D2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell6Text, uIItemCell6.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'D3'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UID3Cell3Text, uID3Cell3.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIGV1Cell3Text, uIGV1Cell3.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell12Text, uIF1Cell12.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'A1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF2Cell2Text, uIF2Cell2.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'A3'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell2Text, uIF1Cell2.Text);

            // Verify that the 'ClassName' property of 'BV' cell equals 'GridControlCell'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIBVCell6ClassName, uIBVCell6.ClassName);

            // Verify that the 'Text' property of 'BV' cell equals 'N2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIBVCell7Text, uIBVCell7.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'N2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIBVCell8Text, uIBVCell8.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'N2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIBVCell9Text, uIBVCell9.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell4Text, uIItemCell4.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF2Cell5Text, uIF2Cell5.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell5Text, uIF1Cell5.Text);

            // Verify that the 'Text' property of 'KK1' cell equals 'KK1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIKK1Cell1Text, uIKK1Cell1.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell19Text, uIItemCell19.Text);

            // Verify that the 'Text' property of 'KK2' cell equals 'KK2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIKK2CellText, uIKK2Cell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIItemCell20Text, uIItemCell20.Text);

            // Verify that the 'Text' property of 'KK4' cell equals 'KK4'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIKK4Cell1Text, uIKK4Cell1.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF2Cell8Text, uIF2Cell8.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShift_Step_27ExpectedValues.UIF1Cell8Text, uIF1Cell8.Text);
        }
        
        /// <summary>
        /// CheckShiftCodePattern_Step_38 - Use 'CheckShiftCodePattern_Step_38ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftCodePattern_Step_38()
        {
            #region Variable Declarations
            DXCell uIF1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            DXCell uILCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell;
            DXCell uILCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell1;
            DXCell uILCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell2;
            #endregion

            // Verify that the 'Text' property of 'F1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodePattern_Step_38ExpectedValues.UIF1CellText, uIF1Cell.Text);

            // Verify that the 'Text' property of cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodePattern_Step_38ExpectedValues.UIItemCell8Text, uIItemCell8.Text);

            // Verify that the 'Text' property of 'L' cell equals ''
            Assert.AreEqual(this.CheckShiftCodePattern_Step_38ExpectedValues.UILCellText, uILCell.Text);

            // Verify that the 'Text' property of 'L' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodePattern_Step_38ExpectedValues.UILCell1Text, uILCell1.Text);

            // Verify that the 'Text' property of 'L' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodePattern_Step_38ExpectedValues.UILCell2Text, uILCell2.Text);
        }
        
        /// <summary>
        /// CheckShiftCodePatternAdded_Step_43 - Use 'CheckShiftCodePatternAdded_Step_43ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftCodePatternAdded_Step_43()
        {
            #region Variable Declarations
            DXCell uID2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID2Cell;
            DXCell uID3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell;
            DXCell uIGV1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell;
            DXCell uIF1Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell9;
            DXCell uIItemCell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell10;
            DXCell uIF2Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell3;
            DXCell uIF1Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell3;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            DXCell uIItemCell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell13;
            DXCell uIItemCell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell14;
            DXCell uIKK4Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK4Cell;
            #endregion

            // Verify that the 'Text' property of 'D2' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodePatternAdded_Step_43ExpectedValues.UID2CellText, uID2Cell.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodePatternAdded_Step_43ExpectedValues.UID3CellText, uID3Cell.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodePatternAdded_Step_43ExpectedValues.UIGV1CellText, uIGV1Cell.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodePatternAdded_Step_43ExpectedValues.UIF1Cell9Text, uIF1Cell9.Text);

            // Verify that the 'Text' property of cell equals 'A3'
            Assert.AreEqual(this.CheckShiftCodePatternAdded_Step_43ExpectedValues.UIItemCell10Text, uIItemCell10.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'D3'
            Assert.AreEqual(this.CheckShiftCodePatternAdded_Step_43ExpectedValues.UIF2Cell3Text, uIF2Cell3.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftCodePatternAdded_Step_43ExpectedValues.UIF1Cell3Text, uIF1Cell3.Text);

            // Verify that the 'Text' property of cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodePatternAdded_Step_43ExpectedValues.UIItemCell2Text, uIItemCell2.Text);

            // Verify that the 'Text' property of cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodePatternAdded_Step_43ExpectedValues.UIItemCell13Text, uIItemCell13.Text);

            // Verify that the 'Text' property of cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodePatternAdded_Step_43ExpectedValues.UIItemCell14Text, uIItemCell14.Text);

            // Verify that the 'Text' property of 'KK4' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodePatternAdded_Step_43ExpectedValues.UIKK4CellText, uIKK4Cell.Text);
        }
        
        /// <summary>
        /// CheckShiftcodes_Step_11 - Use 'CheckShiftcodes_Step_11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftcodes_Step_11()
        {
            #region Variable Declarations
            DXRibbonButtonItem uISettinnRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpInsertToolsRibbonPageGroup.UISettinnRibbonBaseButtonItem;
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIBVCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell;
            DXCell uIBVCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell6;
            DXCell uIBVCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell7;
            DXCell uIBVCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell8;
            DXCell uIBVCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell9;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIBVCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell3;
            DXCell uIBVCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell4;
            DXCell uIBVCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell5;
            #endregion

            // Verify that the 'Checked' property of 'Sett inn' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckShiftcodes_Step_11ExpectedValues.UISettinnRibbonBaseButtonItemChecked, uISettinnRibbonBaseButtonItem.Checked);

            // Verify that the 'Text' property of cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_11ExpectedValues.UIItemCell3Text, uIItemCell3.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_11ExpectedValues.UIBVCellText, uIBVCell.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_11ExpectedValues.UIBVCell6Text, uIBVCell6.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_11ExpectedValues.UIBVCell7Text, uIBVCell7.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_11ExpectedValues.UIBVCell8Text, uIBVCell8.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_11ExpectedValues.UIBVCell9Text, uIBVCell9.Text);

            // Verify that the 'Text' property of cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_11ExpectedValues.UIItemCell4Text, uIItemCell4.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_11ExpectedValues.UIBVCell3Text, uIBVCell3.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_11ExpectedValues.UIBVCell4Text, uIBVCell4.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_11ExpectedValues.UIBVCell5Text, uIBVCell5.Text);
        }
        
        /// <summary>
        /// CheckShiftcodes_Step_12 - Use 'CheckShiftcodes_Step_12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftcodes_Step_12()
        {
            #region Variable Declarations
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXCell uIBVCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell1;
            #endregion

            // Verify that the 'Text' property of cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_12ExpectedValues.UIItemCell5Text, uIItemCell5.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_12ExpectedValues.UIBVCell1Text, uIBVCell1.Text);
        }
        
        /// <summary>
        /// CheckShiftcodes_Step_13 - Use 'CheckShiftcodes_Step_13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftcodes_Step_13()
        {
            #region Variable Declarations
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXCell uIBVCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell1;
            #endregion

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShiftcodes_Step_13ExpectedValues.UIItemCell5Text, uIItemCell5.Text);

            // Verify that the 'Text' property of 'BV' cell equals ''
            Assert.AreEqual(this.CheckShiftcodes_Step_13ExpectedValues.UIBVCell1Text, uIBVCell1.Text);
        }
        
        /// <summary>
        /// CheckShiftcodes_Step_14 - Use 'CheckShiftcodes_Step_14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftcodes_Step_14()
        {
            #region Variable Declarations
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIBVCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell;
            #endregion

            // Verify that the 'Text' property of cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_14ExpectedValues.UIItemCell3Text, uIItemCell3.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'BV'
            Assert.AreEqual(this.CheckShiftcodes_Step_14ExpectedValues.UIBVCellText, uIBVCell.Text);
        }
        
        /// <summary>
        /// CheckShiftcodes_Step_15 - Use 'CheckShiftcodes_Step_15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftcodes_Step_15()
        {
            #region Variable Declarations
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIBVCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell;
            #endregion

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShiftcodes_Step_15ExpectedValues.UIItemCell3Text, uIItemCell3.Text);

            // Verify that the 'ValueAsString' property of 'BV' cell equals 'NewPlanShift (Empty)'
            Assert.AreEqual(this.CheckShiftcodes_Step_15ExpectedValues.UIBVCellValueAsString, uIBVCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckShiftcodes_Step_19 - Use 'CheckShiftcodes_Step_19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftcodes_Step_19()
        {
            #region Variable Declarations
            DXCell uIBVCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell3;
            #endregion

            // Verify that the 'Text' property of 'BV' cell equals 'N2'
            Assert.AreEqual(this.CheckShiftcodes_Step_19ExpectedValues.UIBVCell3Text, uIBVCell3.Text);
        }
        
        /// <summary>
        /// CheckShiftcodes_Step_20 - Use 'CheckShiftcodes_Step_20ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftcodes_Step_20()
        {
            #region Variable Declarations
            DXCell uIBVCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell4;
            DXCell uIBVCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell5;
            DXCell uIBVCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell6;
            DXCell uIBVCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell7;
            DXCell uIBVCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell8;
            DXCell uIBVCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell9;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            #endregion

            // Verify that the 'Text' property of 'BV' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftcodes_Step_20ExpectedValues.UIBVCell4Text, uIBVCell4.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftcodes_Step_20ExpectedValues.UIBVCell5Text, uIBVCell5.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftcodes_Step_20ExpectedValues.UIBVCell6Text, uIBVCell6.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftcodes_Step_20ExpectedValues.UIBVCell7Text, uIBVCell7.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftcodes_Step_20ExpectedValues.UIBVCell8Text, uIBVCell8.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftcodes_Step_20ExpectedValues.UIBVCell9Text, uIBVCell9.Text);

            // Verify that the 'Text' property of cell equals 'A3'
            Assert.AreEqual(this.CheckShiftcodes_Step_20ExpectedValues.UIItemCell4Text, uIItemCell4.Text);
        }
        
        /// <summary>
        /// CheckShiftCodesAdded_Step_44 - Use 'CheckShiftCodesAdded_Step_44ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftCodesAdded_Step_44()
        {
            #region Variable Declarations
            DXCell uIF3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell;
            DXCell uIGV1Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell10;
            DXCell uIItemCell46 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell46;
            DXCell uIGV2Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell6;
            DXCell uIGV2Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell7;
            DXCell uIItemCell47 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell47;
            DXCell uIItemCell48 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell48;
            #endregion

            // Verify that the 'Text' property of 'F3' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_44ExpectedValues.UIF3CellText, uIF3Cell.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_44ExpectedValues.UIGV1Cell10Text, uIGV1Cell10.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_44ExpectedValues.UIItemCell46Text, uIItemCell46.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_44ExpectedValues.UIGV2Cell6Text, uIGV2Cell6.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_44ExpectedValues.UIGV2Cell7Text, uIGV2Cell7.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_44ExpectedValues.UIItemCell47Text, uIItemCell47.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_44ExpectedValues.UIItemCell48Text, uIItemCell48.Text);
        }
        
        /// <summary>
        /// CheckShiftCodesAdded_Step_45 - Use 'CheckShiftCodesAdded_Step_45ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftCodesAdded_Step_45()
        {
            #region Variable Declarations
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIBVCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell;
            DXCell uIN2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell2;
            DXCell uIN2Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell3;
            DXCell uIItemCell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell15;
            DXCell uIF2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell;
            DXCell uIF1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            DXCell uILCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell;
            DXCell uILCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell1;
            DXCell uILCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell2;
            DXCell uIItemCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell7;
            DXCell uIF2Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell9;
            DXCell uILCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell3;
            DXCell uID1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell;
            DXCell uID2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID2Cell1;
            DXCell uID3Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell1;
            DXCell uIGV1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell1;
            DXCell uIF1Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell10;
            DXCell uIF2Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell7;
            DXCell uIF1Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell7;
            DXCell uIF3Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell1;
            DXCell uIGV1Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell11;
            DXCell uIItemCell49 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell49;
            DXCell uIGV2Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell8;
            DXCell uIGV2Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell9;
            DXCell uIItemCell50 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell50;
            DXCell uIItemCell51 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell51;
            #endregion

            // Verify that the 'Text' property of cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIItemCell3Text, uIItemCell3.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIBVCellText, uIBVCell.Text);

            // Verify that the 'Text' property of 'N2' cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIN2Cell2Text, uIN2Cell2.Text);

            // Verify that the 'Text' property of 'N2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIN2Cell3Text, uIN2Cell3.Text);

            // Verify that the 'Text' property of cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIItemCell15Text, uIItemCell15.Text);

            // Verify that the 'Text' property of 'F2' cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIF2CellText, uIF2Cell.Text);

            // Verify that the 'Text' property of 'F1' cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIF1CellText, uIF1Cell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIItemCell8Text, uIItemCell8.Text);

            // Verify that the 'Text' property of 'L' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UILCellText, uILCell.Text);

            // Verify that the 'Text' property of 'L' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UILCell1Text, uILCell1.Text);

            // Verify that the 'Text' property of 'L' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UILCell2Text, uILCell2.Text);

            // Verify that the 'Text' property of cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIItemCell7Text, uIItemCell7.Text);

            // Verify that the 'Text' property of 'F2' cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIF2Cell9Text, uIF2Cell9.Text);

            // Verify that the 'Text' property of 'L' cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UILCell3Text, uILCell3.Text);

            // Verify that the 'Text' property of 'D1' cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UID1CellText, uID1Cell.Text);

            // Verify that the 'Text' property of 'D2' cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UID2Cell1Text, uID2Cell1.Text);

            // Verify that the 'Text' property of 'D3' cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UID3Cell1Text, uID3Cell1.Text);

            // Verify that the 'Text' property of 'GV1' cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIGV1Cell1Text, uIGV1Cell1.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIF1Cell10Text, uIF1Cell10.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'D3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIF2Cell7Text, uIF2Cell7.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIF1Cell7Text, uIF1Cell7.Text);

            // Verify that the 'Text' property of 'F3' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIF3Cell1Text, uIF3Cell1.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIGV1Cell11Text, uIGV1Cell11.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIItemCell49Text, uIItemCell49.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIGV2Cell8Text, uIGV2Cell8.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIGV2Cell9Text, uIGV2Cell9.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIItemCell50Text, uIItemCell50.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_45ExpectedValues.UIItemCell51Text, uIItemCell51.Text);
        }
        
        /// <summary>
        /// CheckShiftCodesAdded_Step_46 - Use 'CheckShiftCodesAdded_Step_46ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftCodesAdded_Step_46()
        {
            #region Variable Declarations
            DXCell uIItemCell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell17;
            DXCell uIN2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell4;
            #endregion

            // Verify that the 'Text' property of cell equals 'N2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_46ExpectedValues.UIItemCell17Text, uIItemCell17.Text);

            // Verify that the 'Text' property of 'N2' cell equals 'N2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_46ExpectedValues.UIN2Cell4Text, uIN2Cell4.Text);
        }
        
        /// <summary>
        /// CheckShiftCodesAdded_Step_47 - Use 'CheckShiftCodesAdded_Step_47ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftCodesAdded_Step_47()
        {
            #region Variable Declarations
            DXCell uID1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell2;
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXCell uIGV1Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell3;
            DXCell uIF1Cell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell12;
            DXCell uIBVCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell6;
            DXCell uIBVCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell7;
            DXCell uIBVCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell9;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIItemCell19 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell19;
            DXCell uIKK2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK2Cell;
            DXCell uIItemCell20 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell20;
            DXCell uIKK4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK4Cell1;
            DXCell uIA3Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell7;
            DXCell uID3Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell7;
            DXCell uIA3Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell8;
            DXCell uIA3Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell1;
            DXCell uID3Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell4;
            DXCell uIA3Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell2;
            DXCell uIItemCell22 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell22;
            DXCell uIBV3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell;
            DXCell uIBV3Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell2;
            DXCell uIBV3Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell3;
            DXCell uIGV1Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell4;
            DXCell uIGV1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell5;
            DXCell uIGV2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell;
            DXCell uIGV2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell1;
            DXCell uIBV3Cell24 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell24;
            DXCell uIBV3Cell25 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell25;
            DXCell uIBV3Cell26 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell26;
            DXCell uIBV3Cell27 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell27;
            #endregion

            // Verify that the 'Text' property of 'D1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UID1Cell2Text, uID1Cell2.Text);

            // Verify that the 'Text' property of cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIItemCell6Text, uIItemCell6.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIGV1Cell3Text, uIGV1Cell3.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIF1Cell12Text, uIF1Cell12.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIBVCell6Text, uIBVCell6.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIBVCell7Text, uIBVCell7.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIBVCell9Text, uIBVCell9.Text);

            // Verify that the 'Text' property of cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIItemCell4Text, uIItemCell4.Text);

            // Verify that the 'Text' property of cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIItemCell19Text, uIItemCell19.Text);

            // Verify that the 'Text' property of 'KK2' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIKK2CellText, uIKK2Cell.Text);

            // Verify that the 'Text' property of cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIItemCell20Text, uIItemCell20.Text);

            // Verify that the 'Text' property of 'KK4' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIKK4Cell1Text, uIKK4Cell1.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIA3Cell7Text, uIA3Cell7.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'D3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UID3Cell7Text, uID3Cell7.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIA3Cell8Text, uIA3Cell8.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIA3Cell1Text, uIA3Cell1.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'D3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UID3Cell4Text, uID3Cell4.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'A3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIA3Cell2Text, uIA3Cell2.Text);

            // Verify that the 'Text' property of cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIItemCell22Text, uIItemCell22.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIBV3CellText, uIBV3Cell.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIBV3Cell2Text, uIBV3Cell2.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIBV3Cell3Text, uIBV3Cell3.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIGV1Cell4Text, uIGV1Cell4.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIGV1Cell5Text, uIGV1Cell5.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIGV2CellText, uIGV2Cell.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIGV2Cell1Text, uIGV2Cell1.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIBV3Cell24Text, uIBV3Cell24.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIBV3Cell25Text, uIBV3Cell25.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIBV3Cell26Text, uIBV3Cell26.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShiftCodesAdded_Step_47ExpectedValues.UIBV3Cell27Text, uIBV3Cell27.Text);
        }
        
        /// <summary>
        /// CheckShiftExtended_Step_24 - Use 'CheckShiftExtended_Step_24ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftExtended_Step_24()
        {
            #region Variable Declarations
            DXCell uIN2Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpShiftDetailsClient.UIGcShiftDetailsTable.UIN2Cell;
            DXCell uIItem0201202422300301Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpShiftDetailsClient.UIGcShiftDetailsTable.UIItem0201202422300301Cell;
            DXCell uIVaktenerutvidetislutCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpShiftDetailsClient.UIGcShiftDetailsTable.UIVaktenerutvidetislutCell;
            #endregion

            // Verify that the 'Text' property of 'N2' cell equals 'N2'
            Assert.AreEqual(this.CheckShiftExtended_Step_24ExpectedValues.UIN2CellText, uIN2Cell.Text);

            // Verify that the 'Text' property of '02.01.2024 22:30 - 03.01.2024 16:29,' cell equals '02.01.2024 22:30 - 03.01.2024 16:29, '
            Assert.AreEqual(this.CheckShiftExtended_Step_24ExpectedValues.UIItem0201202422300301CellText, uIItem0201202422300301Cell.Text);

            // Verify that the 'Text' property of 'Vakten er utvidet i slutten med 539 minutter' cell equals 'Vakten er utvidet i slutten med 539 minutter'
            Assert.AreEqual(this.CheckShiftExtended_Step_24ExpectedValues.UIVaktenerutvidetislutCellText, uIVaktenerutvidetislutCell.Text);
        }
        
        /// <summary>
        /// CheckShiftExtended_Step_25 - Use 'CheckShiftExtended_Step_25ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftExtended_Step_25()
        {
            #region Variable Declarations
            DXCell uIN2Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpShiftDetailsClient.UIGcShiftDetailsTable.UIN2Cell;
            DXCell uIItem0201202422300301Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpShiftDetailsClient.UIGcShiftDetailsTable.UIItem0201202422300301Cell;
            DXCell uIVaktenerutvidetislutCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpShiftDetailsClient.UIGcShiftDetailsTable.UIVaktenerutvidetislutCell;
            #endregion

            // Verify that the 'Text' property of 'N2' cell equals 'N2'
            Assert.AreEqual(this.CheckShiftExtended_Step_25ExpectedValues.UIN2CellText, uIN2Cell.Text);

            // Verify that the 'Text' property of '02.01.2024 22:30 - 03.01.2024 16:29,' cell equals '02.01.2024 21:00 - 03.01.2024 07:30, '
            Assert.AreEqual(this.CheckShiftExtended_Step_25ExpectedValues.UIItem0201202422300301CellText, uIItem0201202422300301Cell.Text);

            // Verify that the 'Text' property of 'Vakten er utvidet i slutten med 539 minutter' cell equals 'Vakten er utvidet i starten med 90 minutter'
            Assert.AreEqual(this.CheckShiftExtended_Step_25ExpectedValues.UIVaktenerutvidetislutCellText, uIVaktenerutvidetislutCell.Text);
        }
        
        /// <summary>
        /// CheckShiftExtended_Step_26 - Use 'CheckShiftExtended_Step_26ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftExtended_Step_26()
        {
            #region Variable Declarations
            DXCell uIN2Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpShiftDetailsClient.UIGcShiftDetailsTable.UIN2Cell;
            DXCell uIItem0201202422300301Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpShiftDetailsClient.UIGcShiftDetailsTable.UIItem0201202422300301Cell;
            #endregion

            // Verify that the 'Text' property of 'N2' cell equals 'N2'
            Assert.AreEqual(this.CheckShiftExtended_Step_26ExpectedValues.UIN2CellText, uIN2Cell.Text);

            // Verify that the 'Text' property of '02.01.2024 22:30 - 03.01.2024 16:29,' cell equals '02.01.2024 22:30 - 03.01.2024 07:30, '
            Assert.AreEqual(this.CheckShiftExtended_Step_26ExpectedValues.UIItem0201202422300301CellText, uIItem0201202422300301Cell.Text);
        }
        
        /// <summary>
        /// CheckShiftReduced_Step_22 - Use 'CheckShiftReduced_Step_22ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftReduced_Step_22()
        {
            #region Variable Declarations
            DXCell uIVaktenerforkortetistCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpShiftDetailsClient.UIGcShiftDetailsTable.UIVaktenerforkortetistCell;
            DXCell uIItem748Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpShiftDetailsClient.UIGcShiftDetailsTable.UIItem748Cell;
            #endregion

            // Verify that the 'Text' property of 'Vakten er forkortet i starten med 1 minutter' cell equals 'Vakten er forkortet i starten med 1 minutter'
            Assert.AreEqual(this.CheckShiftReduced_Step_22ExpectedValues.UIVaktenerforkortetistCellText, uIVaktenerforkortetistCell.Text);

            // Verify that the 'Text' property of '7,48' cell equals '7,48'
            Assert.AreEqual(this.CheckShiftReduced_Step_22ExpectedValues.UIItem748CellText, uIItem748Cell.Text);
        }
        
        /// <summary>
        /// CheckShifts_Step_28 - Use 'CheckShifts_Step_28ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShifts_Step_28()
        {
            #region Variable Declarations
            DXCell uIKK1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK1Cell;
            DXCell uIItemCell16 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell16;
            DXCell uIBVCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell3;
            DXCell uIBVCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell4;
            DXCell uIBVCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell5;
            DXCell uIF2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell1;
            DXCell uIF1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell1;
            DXCell uID1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell1;
            DXCell uID2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID2Cell2;
            DXCell uID3Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell2;
            DXCell uIGV1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell2;
            DXCell uIF1Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell11;
            DXCell uIF2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell4;
            DXCell uIF1Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell4;
            DXCell uIItemCell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell17;
            DXCell uIN2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell4;
            DXCell uIN2Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell5;
            DXCell uIN2Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell6;
            DXCell uIItemCell18 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell18;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXCell uIBVCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell1;
            #endregion

            // Verify that the 'Text' property of 'KK1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIKK1CellText, uIKK1Cell.Text);

            // Verify that the 'Text' property of cell equals 'GV1'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIItemCell16Text, uIItemCell16.Text);

            // Verify that the 'Text' property of 'BV' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIBVCell3Text, uIBVCell3.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'GV2'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIBVCell4Text, uIBVCell4.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'GV2'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIBVCell5Text, uIBVCell5.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIF2Cell1Text, uIF2Cell1.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIF1Cell1Text, uIF1Cell1.Text);

            // Verify that the 'Text' property of 'D1' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UID1Cell1Text, uID1Cell1.Text);

            // Verify that the 'Text' property of 'D2' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UID2Cell2Text, uID2Cell2.Text);

            // Verify that the 'Text' property of 'D3' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UID3Cell2Text, uID3Cell2.Text);

            // Verify that the 'Text' property of 'GV1' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIGV1Cell2Text, uIGV1Cell2.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'A3'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIF1Cell11Text, uIF1Cell11.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'D3'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIF2Cell4Text, uIF2Cell4.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'A3'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIF1Cell4Text, uIF1Cell4.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIItemCell17Text, uIItemCell17.Text);

            // Verify that the 'Text' property of 'N2' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIN2Cell4Text, uIN2Cell4.Text);

            // Verify that the 'Text' property of 'N2' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIN2Cell5Text, uIN2Cell5.Text);

            // Verify that the 'Text' property of 'N2' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIN2Cell6Text, uIN2Cell6.Text);

            // Verify that the 'Text' property of cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIItemCell18Text, uIItemCell18.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIItemCell5Text, uIItemCell5.Text);

            // Verify that the 'Text' property of 'BV' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_28ExpectedValues.UIBVCell1Text, uIBVCell1.Text);
        }
        
        /// <summary>
        /// CheckShifts_Step_30_2 - Use 'CheckShifts_Step_30_2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShifts_Step_30_2()
        {
            #region Variable Declarations
            DXCell uID1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell2;
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXCell uID3Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell3;
            DXCell uIGV1Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell3;
            DXCell uIF1Cell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell12;
            DXCell uIF2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell2;
            DXCell uIF1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell2;
            DXCell uIBVCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell6;
            DXCell uIBVCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell7;
            DXCell uIBVCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell8;
            DXCell uIBVCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell9;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIF2Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell5;
            DXCell uIF1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell5;
            DXCell uIKK1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK1Cell1;
            DXCell uIItemCell19 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell19;
            DXCell uIKK2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK2Cell;
            DXCell uIItemCell20 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell20;
            DXCell uIKK4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK4Cell1;
            DXCell uIF2Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell8;
            DXCell uIF1Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell8;
            DXCell uIItemCell21 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell21;
            DXCell uIItemCell22 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell22;
            DXCell uIItemCell23 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell23;
            DXCell uIItemCell24 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell24;
            DXCell uIItemCell25 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell25;
            DXCell uIA3Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell1;
            DXCell uID3Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell4;
            DXCell uIA3Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell2;
            DXCell uIBV3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell;
            DXCell uIBV3Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell1;
            DXCell uIBV3Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell2;
            DXCell uIBV3Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell3;
            DXCell uIItemCell26 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell26;
            DXCell uIItemCell27 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell27;
            DXCell uIGV1Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell4;
            DXCell uIGV1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell5;
            DXCell uIItemCell28 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell28;
            DXCell uIGV2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell;
            DXCell uIGV2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell1;
            DXCell uIF2Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell10;
            DXCell uIF1Cell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell13;
            DXCell uIGV1Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell6;
            DXCell uIGV1Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell7;
            DXCell uIItemCell29 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell29;
            DXCell uIGV2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell2;
            DXCell uIGV2Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell3;
            DXCell uIF2Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell11;
            DXCell uIF1Cell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell14;
            DXCell uIItemCell30 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell30;
            DXCell uIItemCell31 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell31;
            DXCell uIItemCell32 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell32;
            DXCell uIItemCell33 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell33;
            DXCell uIA3Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell3;
            DXCell uID3Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell5;
            DXCell uIA3Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell4;
            DXCell uIItemCell34 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell34;
            DXCell uIBV3Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell4;
            DXCell uIBV3Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell5;
            DXCell uIBV3Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell6;
            DXCell uIBV3Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell7;
            DXCell uIItemCell35 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell35;
            DXCell uIItemCell36 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell36;
            DXCell uIItemCell37 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell37;
            DXCell uIBV3Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell8;
            DXCell uIBV3Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell9;
            DXCell uIBV3Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell10;
            DXCell uIBV3Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBV3Cell11;
            DXCell uIItemCell38 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell38;
            DXCell uIItemCell39 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell39;
            DXCell uIGV1Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell8;
            DXCell uIGV1Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV1Cell9;
            DXCell uIItemCell40 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell40;
            DXCell uIGV2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell4;
            DXCell uIGV2Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIGV2Cell5;
            DXCell uIF2Cell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell12;
            DXCell uIF1Cell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell15;
            DXCell uIItemCell41 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell41;
            DXCell uIItemCell42 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell42;
            DXCell uIItemCell43 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell43;
            DXCell uIItemCell44 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell44;
            DXCell uIA3Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell5;
            DXCell uID3Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID3Cell6;
            DXCell uIA3Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell6;
            #endregion

            // Verify that the 'Text' property of 'D1' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UID1Cell2Text, uID1Cell2.Text);

            // Verify that the 'Text' property of cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell6Text, uIItemCell6.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UID3Cell3Text, uID3Cell3.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV1Cell3Text, uIGV1Cell3.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF1Cell12Text, uIF1Cell12.Text);

            // Verify that the 'Text' property of 'F2' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF2Cell2Text, uIF2Cell2.Text);

            // Verify that the 'Text' property of 'F1' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF1Cell2Text, uIF1Cell2.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'GV1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBVCell6Text, uIBVCell6.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'GV1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBVCell7Text, uIBVCell7.Text);

            // Verify that the 'Text' property of 'BV' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBVCell8Text, uIBVCell8.Text);

            // Verify that the 'Text' property of 'BV' cell equals 'GV2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBVCell9Text, uIBVCell9.Text);

            // Verify that the 'Text' property of cell equals 'GV2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell4Text, uIItemCell4.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF2Cell5Text, uIF2Cell5.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF1Cell5Text, uIF1Cell5.Text);

            // Verify that the 'Text' property of 'KK1' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIKK1Cell1Text, uIKK1Cell1.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell19Text, uIItemCell19.Text);

            // Verify that the 'Text' property of 'KK2' cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIKK2CellText, uIKK2Cell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell20Text, uIItemCell20.Text);

            // Verify that the 'Text' property of 'KK4' cell equals 'A3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIKK4Cell1Text, uIKK4Cell1.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'D3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF2Cell8Text, uIF2Cell8.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'A3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF1Cell8Text, uIF1Cell8.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell21Text, uIItemCell21.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell22Text, uIItemCell22.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell23Text, uIItemCell23.Text);

            // Verify that the 'ColumnName' property of cell equals 'RosterCell_2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell24ColumnName, uIItemCell24.ColumnName);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell25Text, uIItemCell25.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'A3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIA3Cell1Text, uIA3Cell1.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'D3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UID3Cell4Text, uID3Cell4.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'A3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIA3Cell2Text, uIA3Cell2.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell22Text1, uIItemCell22.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3CellText, uIBV3Cell.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3Cell1Text, uIBV3Cell1.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3Cell2Text, uIBV3Cell2.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3Cell3Text, uIBV3Cell3.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell26Text, uIItemCell26.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell27Text, uIItemCell27.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV1Cell4Text, uIGV1Cell4.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV1Cell5Text, uIGV1Cell5.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell28Text, uIItemCell28.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV2CellText, uIGV2Cell.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV2Cell1Text, uIGV2Cell1.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF2Cell10Text, uIF2Cell10.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF1Cell13Text, uIF1Cell13.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV1Cell6Text, uIGV1Cell6.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV1Cell7Text, uIGV1Cell7.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell29Text, uIItemCell29.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV2Cell2Text, uIGV2Cell2.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV2Cell3Text, uIGV2Cell3.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF2Cell11Text, uIF2Cell11.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF1Cell14Text, uIF1Cell14.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell30Text, uIItemCell30.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell31Text, uIItemCell31.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell32Text, uIItemCell32.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell33Text, uIItemCell33.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'A3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIA3Cell3Text, uIA3Cell3.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'D3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UID3Cell5Text, uID3Cell5.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'A3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIA3Cell4Text, uIA3Cell4.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell34Text, uIItemCell34.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3Cell4Text, uIBV3Cell4.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3Cell5Text, uIBV3Cell5.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3Cell6Text, uIBV3Cell6.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3Cell7Text, uIBV3Cell7.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell35Text, uIItemCell35.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell36Text, uIItemCell36.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell37Text, uIItemCell37.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3Cell8Text, uIBV3Cell8.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3Cell9Text, uIBV3Cell9.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3Cell10Text, uIBV3Cell10.Text);

            // Verify that the 'Text' property of 'BV3' cell equals 'BV3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIBV3Cell11Text, uIBV3Cell11.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell38Text, uIItemCell38.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell39Text, uIItemCell39.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV1Cell8Text, uIGV1Cell8.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV1Cell9Text, uIGV1Cell9.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell40Text, uIItemCell40.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV2Cell4Text, uIGV2Cell4.Text);

            // Verify that the 'Text' property of 'GV2' cell equals 'GV2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIGV2Cell5Text, uIGV2Cell5.Text);

            // Verify that the 'Text' property of 'F2' cell equals 'F2'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF2Cell12Text, uIF2Cell12.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIF1Cell15Text, uIF1Cell15.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell41Text, uIItemCell41.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell42Text, uIItemCell42.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell43Text, uIItemCell43.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIItemCell44Text, uIItemCell44.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'A3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIA3Cell5Text, uIA3Cell5.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'D3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UID3Cell6Text, uID3Cell6.Text);

            // Verify that the 'Text' property of 'A3' cell equals 'A3'
            Assert.AreEqual(this.CheckShifts_Step_30_2ExpectedValues.UIA3Cell6Text, uIA3Cell6.Text);
        }
        
        /// <summary>
        /// CheckShiftsLocked_Step_48 - Use 'CheckShiftsLocked_Step_48ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckShiftsLocked_Step_48()
        {
            #region Variable Declarations
            DXRibbonButtonItem uILåsRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpFunctionsRibbonPageGroup.UILåsRibbonBaseButtonItem;
            DXRibbonButtonItem uILåsoppRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpFunctionsRibbonPageGroup.UILåsoppRibbonBaseButtonItem;
            #endregion

            // Verify that the 'Enabled' property of 'Lås' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckShiftsLocked_Step_48ExpectedValues.UILåsRibbonBaseButtonItemEnabled, uILåsRibbonBaseButtonItem.Enabled);

            // Verify that the 'Visible' property of 'Lås opp' RibbonBaseButtonItem equals 'True'
            Assert.AreEqual(this.CheckShiftsLocked_Step_48ExpectedValues.UILåsoppRibbonBaseButtonItemVisible, uILåsoppRibbonBaseButtonItem.Visible);

            // Verify that the 'Enabled' property of 'Lås opp' RibbonBaseButtonItem equals 'True'
            Assert.AreEqual(this.CheckShiftsLocked_Step_48ExpectedValues.UILåsoppRibbonBaseButtonItemEnabled, uILåsoppRibbonBaseButtonItem.Enabled);
        }
        
        /// <summary>
        /// CheckT1Shifts_Step_33 - Use 'CheckT1Shifts_Step_33ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckT1Shifts_Step_33()
        {
            #region Variable Declarations
            DXCell uIItemCell45 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell45;
            DXCell uIT1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell;
            DXCell uIT1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell1;
            DXCell uIT1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell2;
            DXCell uIT1Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell3;
            DXCell uIT1Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell4;
            DXCell uIT1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell5;
            DXCell uIT1Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell6;
            DXCell uIT1Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell7;
            DXCell uIT1Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell8;
            DXCell uIT1Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell9;
            DXCell uIT1Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell10;
            DXCell uIT1Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell11;
            DXCell uIT1Cell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell12;
            DXCell uIT1Cell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell13;
            DXCell uIT1Cell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell14;
            DXCell uIT1Cell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell15;
            DXCell uIT1Cell16 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell16;
            DXCell uIT1Cell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell17;
            DXCell uIT1Cell18 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell18;
            DXCell uIT1Cell19 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIT1Cell19;
            #endregion

            // Verify that the 'Text' property of cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIItemCell45Text, uIItemCell45.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1CellText, uIT1Cell.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell1Text, uIT1Cell1.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell2Text, uIT1Cell2.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell3Text, uIT1Cell3.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell4Text, uIT1Cell4.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell5Text, uIT1Cell5.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell6Text, uIT1Cell6.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell7Text, uIT1Cell7.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell8Text, uIT1Cell8.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell9Text, uIT1Cell9.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell10Text, uIT1Cell10.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell11Text, uIT1Cell11.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell12Text, uIT1Cell12.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell13Text, uIT1Cell13.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell14Text, uIT1Cell14.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell15Text, uIT1Cell15.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell16Text, uIT1Cell16.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell17Text, uIT1Cell17.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell18Text, uIT1Cell18.Text);

            // Verify that the 'Text' property of 'T1' cell equals 'T1'
            Assert.AreEqual(this.CheckT1Shifts_Step_33ExpectedValues.UIT1Cell19Text, uIT1Cell19.Text);
        }
        
        /// <summary>
        /// CheckWarnings_Step_17 - Use 'CheckWarnings_Step_17ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWarnings_Step_17()
        {
            #region Variable Declarations
            DXCell uIAndersenAstridCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpValidationMessagesClient.UIGsPanelControl7Client.UIGridValidationMessagTable.UIAndersenAstridCell1;
            DXCell uIVaktkodeLkanikkebrukCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcVisualizationTabList.UITpValidationMessagesClient.UIGsPanelControl7Client.UIGridValidationMessagTable.UIVaktkodeLkanikkebrukCell1;
            #endregion

            // Verify that the 'Text' property of 'Andersen, Astrid' cell equals 'Andersen, Astrid'
            Assert.AreEqual(this.CheckWarnings_Step_17ExpectedValues.UIAndersenAstridCell1Text, uIAndersenAstridCell1.Text, "Feil ansatt");

            // Verify that the 'Text' property of 'Vaktkode L kan ikke brukes på denne dagen. Vakten vil ikke bli iverksatt.' cell equals 'Vaktkode L kan ikke brukes på denne dagen. Vakten vil ikke bli iverksatt.'
            Assert.AreEqual(this.CheckWarnings_Step_17ExpectedValues.UIVaktkodeLkanikkebrukCell1Text, uIVaktkodeLkanikkebrukCell1.Text, "Feil advarsel");
        }
        
        /// <summary>
        /// CheckWeeksUnLocked_Step_50 - Use 'CheckWeeksUnLocked_Step_50ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWeeksUnLocked_Step_50()
        {
            #region Variable Declarations
            DXRibbonButtonItem uILåsRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpFunctionsRibbonPageGroup.UILåsRibbonBaseButtonItem;
            DXRibbonButtonItem uILåsoppRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpFunctionsRibbonPageGroup.UILåsoppRibbonBaseButtonItem;
            #endregion

            // Verify that the 'Enabled' property of 'Lås' RibbonBaseButtonItem equals 'True'
            Assert.AreEqual(this.CheckWeeksUnLocked_Step_50ExpectedValues.UILåsRibbonBaseButtonItemEnabled, uILåsRibbonBaseButtonItem.Enabled);

            // Verify that the 'Visible' property of 'Lås' RibbonBaseButtonItem equals 'True'
            Assert.AreEqual(this.CheckWeeksUnLocked_Step_50ExpectedValues.UILåsRibbonBaseButtonItemVisible, uILåsRibbonBaseButtonItem.Visible);

            // Verify that the 'Enabled' property of 'Lås opp' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWeeksUnLocked_Step_50ExpectedValues.UILåsoppRibbonBaseButtonItemEnabled, uILåsoppRibbonBaseButtonItem.Enabled);
        }
        
        /// <summary>
        /// ClickOkMessage_Step_9
        /// </summary>
        public void ClickOkMessage_Step_9()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIGT3999InformasjonWindow.UIOKButton;
            #endregion

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// CopyPasteLine1_Step_45 - Use 'CopyPasteLine1_Step_45Params' to pass parameters into this method.
        /// </summary>
        public void CopyPasteLine1_Step_45()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell, new Point(24, 16));

            // Type 'Control + l' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.CopyPasteLine1_Step_45Params.UIGcRosterPlanTableSendKeys, ModifierKeys.Control);

            // Type 'Control + c' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.CopyPasteLine1_Step_45Params.UIGcRosterPlanTableSendKeys1, ModifierKeys.Control);

            // Click cell
            Mouse.Click(uIItemCell8, new Point(21, 11));

            // Type 'Control + v' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.CopyPasteLine1_Step_45Params.UIGcRosterPlanTableSendKeys2, ModifierKeys.Control);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// CopyPasteShiftCodes_Step_44 - Use 'CopyPasteShiftCodes_Step_44Params' to pass parameters into this method.
        /// </summary>
        public void CopyPasteShiftCodes_Step_44()
        {
            #region Variable Declarations
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            DXCell uIF1Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell6;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXCell uIF3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            #endregion

            // Move cell to 'F1' cell
            uIF1Cell6.EnsureClickable(new Point(15, 16));
            Mouse.StartDragging(uIItemCell2, new Point(15, 7));
            Mouse.StopDragging(uIF1Cell6, new Point(15, 16));

            // Type 'Control + c' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.CopyPasteShiftCodes_Step_44Params.UIGcRosterPlanTableSendKeys, ModifierKeys.Control);

            // Click 'F3' cell
            Mouse.Click(uIF3Cell, new Point(25, 8));

            // Type 'Control + v' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.CopyPasteShiftCodes_Step_44Params.UIGcRosterPlanTableSendKeys1, ModifierKeys.Control);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DeactivateInsertButton - Use 'DeactivateInsertButtonParams' to pass parameters into this method.
        /// </summary>
        public void DeactivateInsertButton()
        {
            #region Variable Declarations
            DXTextEdit uIRow3ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit;
            DXRibbonButtonItem uISettinnRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpInsertToolsRibbonPageGroup.UISettinnRibbonBaseButtonItem;
            #endregion

            // Type '{Tab}' in '[Row]3[Column]RosterCell_11' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit, this.DeactivateInsertButtonParams.UIRow3ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click 'Sett inn' RibbonBaseButtonItem
            Mouse.Click(uISettinnRibbonBaseButtonItem, new Point(41, 14));
        }
        
        /// <summary>
        /// DeleteErrorLShifts_Step_18 - Use 'DeleteErrorLShifts_Step_18Params' to pass parameters into this method.
        /// </summary>
        public void DeleteErrorLShifts_Step_18()
        {
            #region Variable Declarations
            DXRibbonButtonItem uISettinnRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpInsertToolsRibbonPageGroup.UISettinnRibbonBaseButtonItem;
            DXCell uILCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell3;
            DXTextEdit uIRow1ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit4;
            #endregion

            // Click 'Sett inn' RibbonBaseButtonItem
            Mouse.Click(uISettinnRibbonBaseButtonItem, new Point(41, 11));

            // Click 'L' cell
            Mouse.Click(uILCell3, new Point(21, 14));

            // Type '{Back}' in '[Row]1[Column]RosterCell_13' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit4, this.DeleteErrorLShifts_Step_18Params.UIRow1ColumnRosterCellEdit4SendKeys, ModifierKeys.None);

            // Type '{Tab}' in '[Row]1[Column]RosterCell_13' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit4, this.DeleteErrorLShifts_Step_18Params.UIRow1ColumnRosterCellEdit4SendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// DeleteShifts_Step_15
        /// </summary>
        public void DeleteShifts_Step_15()
        {
            #region Variable Declarations
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIBVCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpEditToolsRibbonPageGroup.UISlettRibbonBaseButtonItem;
            DXButton uIJAButton = this.UIGT4001InformasjonWindow.UIJAButton;
            #endregion

            // Move cell to 'BV' cell
            uIBVCell.EnsureClickable(new Point(13, 9));
            Mouse.StartDragging(uIItemCell3, new Point(16, 10));
            Mouse.StopDragging(uIBVCell, new Point(13, 9));

            // Click 'Slett' RibbonBaseButtonItem
            Mouse.Click(uISlettRibbonBaseButtonItem, new Point(33, 11));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// EditExtendeddShift_Step_25 - Use 'EditExtendeddShift_Step_25Params' to pass parameters into this method.
        /// </summary>
        public void EditExtendeddShift_Step_25()
        {
            #region Variable Declarations
            DXRadioGroup uIRgrpEqualizationPlacRadioGroup = this.UIUtjevningsvaktWindow.UIGrpEqualizingClient.UIRgrpEqualizationPlacRadioGroup;
            DXTextEdit uIENumberEdit = this.UIUtjevningsvaktWindow.UIGrpEqualizingClient.UIENumberEdit;
            #endregion

            // Type '0' in 'rgrpEqualizationPlacement' RadioGroup
            //SelectedIndex
            uIRgrpEqualizationPlacRadioGroup.SelectedIndex = this.EditExtendeddShift_Step_25Params.UIRgrpEqualizationPlacRadioGroupSelectedIndex;

            // Type '90 [SelectionStart]0' in 'eNumber' text box
            //ValueAsString
            uIENumberEdit.ValueAsString = this.EditExtendeddShift_Step_25Params.UIENumberEditValueAsString;

            // Type '{Tab}' in 'eNumber' text box
            Keyboard.SendKeys(uIENumberEdit, this.EditExtendeddShift_Step_25Params.UIENumberEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ExtendShift_Step_23 - Use 'ExtendShift_Step_23Params' to pass parameters into this method.
        /// </summary>
        public void ExtendShift_Step_23()
        {
            #region Variable Declarations
            DXRadioGroup uIRgrpEqualizationModeRadioGroup = this.UIUtjevningsvaktWindow.UIGrpEqualizingClient.UIRgrpEqualizationModeRadioGroup;
            DXRadioGroup uIRgrpEqualizationPlacRadioGroup = this.UIUtjevningsvaktWindow.UIGrpEqualizingClient.UIRgrpEqualizationPlacRadioGroup;
            DXTextEdit uIENumberEdit = this.UIUtjevningsvaktWindow.UIGrpEqualizingClient.UIENumberEdit;
            #endregion

            // Type '1' in 'rgrpEqualizationMode' RadioGroup
            //SelectedIndex
            uIRgrpEqualizationModeRadioGroup.SelectedIndex = this.ExtendShift_Step_23Params.UIRgrpEqualizationModeRadioGroupSelectedIndex;

            // Type '1' in 'rgrpEqualizationPlacement' RadioGroup
            //SelectedIndex
            uIRgrpEqualizationPlacRadioGroup.SelectedIndex = this.ExtendShift_Step_23Params.UIRgrpEqualizationPlacRadioGroupSelectedIndex;

            // Type '540' in 'eNumber' text box
            //ValueAsString
            uIENumberEdit.ValueAsString = this.ExtendShift_Step_23Params.UIENumberEditValueAsString;

            // Type '{Tab}' in 'eNumber' text box
            Keyboard.SendKeys(uIENumberEdit, this.ExtendShift_Step_23Params.UIENumberEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ExtendShift_Step_24 - Use 'ExtendShift_Step_24Params' to pass parameters into this method.
        /// </summary>
        public void ExtendShift_Step_24()
        {
            #region Variable Declarations
            DXTextEdit uIENumberEdit = this.UIUtjevningsvaktWindow.UIGrpEqualizingClient.UIENumberEdit;
            #endregion

            // Type '539 [SelectionStart]0[SelectionLength]3' in 'eNumber' text box
            //ValueAsString
            uIENumberEdit.ValueAsString = this.ExtendShift_Step_24Params.UIENumberEditValueAsString;

            // Type '{Tab}' in 'eNumber' text box
            Keyboard.SendKeys(uIENumberEdit, this.ExtendShift_Step_24Params.UIENumberEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// InsertLShifts_Step_17 - Use 'InsertLShifts_Step_17Params' to pass parameters into this method.
        /// </summary>
        public void InsertLShifts_Step_17()
        {
            #region Variable Declarations
            DXTextEdit uIRow1ColumnRosterCellEdit11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit11;
            DXRibbonButtonItem uISettinnRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpInsertToolsRibbonPageGroup.UISettinnRibbonBaseButtonItem;
            DXCell uILCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell;
            DXCell uILCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell1;
            DXCell uILCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell2;
            DXCell uILCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UILCell3;
            DXTextEdit uIRow1ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit4;
            #endregion

            // Type 'l{Tab}' in '[Row]1[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit11, this.InsertLShifts_Step_17Params.UIRow1ColumnRosterCellEdit11SendKeys, ModifierKeys.None);

            // Click 'Sett inn' RibbonBaseButtonItem
            Mouse.Click(uISettinnRibbonBaseButtonItem, new Point(39, 9));

            // Click 'L' cell
            Mouse.Click(uILCell, new Point(18, 12));

            // Click 'L' cell
            Mouse.Click(uILCell1, new Point(19, 8));

            // Click 'L' cell
            Mouse.Click(uILCell2, new Point(14, 10));

            // Click 'L' cell
            Mouse.Click(uILCell3, new Point(17, 8));

            // Type '{Tab}' in '[Row]1[Column]RosterCell_13' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit4, this.InsertLShifts_Step_17Params.UIRow1ColumnRosterCellEdit4SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// LockShifts_Step_48
        /// </summary>
        public void LockShifts_Step_48()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            DXCell uIF1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell5;
            DXRibbonButtonItem uILåsRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpFunctionsRibbonPageGroup.UILåsRibbonBaseButtonItem;
            #endregion

            // Move cell to 'F1' cell
            uIF1Cell5.EnsureClickable(new Point(20, 7));
            Mouse.StartDragging(uIItemCell, new Point(21, 10));
            Mouse.StopDragging(uIF1Cell5, new Point(20, 7));

            // Click 'Lås' RibbonBaseButtonItem
            Mouse.Click(uILåsRibbonBaseButtonItem, new Point(29, 25));
        }
        
        /// <summary>
        /// OpenReduceShift_Step_21
        /// </summary>
        public void OpenReduceShift_Step_21()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            DXRibbonButtonItem uILeggtilutjevningRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpFunctionsRibbonPageGroup.UILeggtilutjevningRibbonBaseButtonItem;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell, new Point(20, 9));

            // Click 'Legg til utjevning' RibbonBaseButtonItem
            Mouse.Click(uILeggtilutjevningRibbonBaseButtonItem, new Point(29, 28));
        }
        
        /// <summary>
        /// PasteShifts_Step_47 - Use 'PasteShifts_Step_47Params' to pass parameters into this method.
        /// </summary>
        public void PasteShifts_Step_47()
        {
            #region Variable Declarations
            DXCell uIKK1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIKK1Cell1;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            DXCell uIF3Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF3Cell4;
            #endregion

            // Click 'KK1' cell
            Mouse.Click(uIKK1Cell1, new Point(13, 16));

            // Type 'Control + v' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.PasteShifts_Step_47Params.UIGcRosterPlanTableSendKeys, ModifierKeys.Control);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Click 'F3' cell
            Mouse.Click(uIF3Cell4, new Point(25, 13));

            // Type 'Control + v' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.PasteShifts_Step_47Params.UIGcRosterPlanTableSendKeys1, ModifierKeys.Control);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ReduceShift_Step_22 - Use 'ReduceShift_Step_22Params' to pass parameters into this method.
        /// </summary>
        public void ReduceShift_Step_22()
        {
            #region Variable Declarations
            DXTextEdit uIENumberEdit = this.UIUtjevningsvaktWindow.UIGrpEqualizingClient.UIENumberEdit;
            DXTestControl uIGrpEqualizingClient = this.UIUtjevningsvaktWindow.UIGrpEqualizingClient;
            DXButton uIOKButton = this.UIUtjevningsvaktWindow.UIPnlButtonsClient.UIOKButton;
            #endregion

            // Type '1 [SelectionStart]0[SelectionLength]1' in 'eNumber' text box
            //ValueAsString
            uIENumberEdit.ValueAsString = this.ReduceShift_Step_22Params.UIENumberEditValueAsString;

            // Move 'eNumber' text box to 'grpEqualizing' client
            uIGrpEqualizingClient.EnsureClickable(new Point(89, 99));
            Mouse.StartDragging(uIENumberEdit, new Point(68, 13));
            Mouse.StopDragging(uIGrpEqualizingClient, new Point(89, 99));

            // Type '{Tab}' in 'eNumber' text box
            Keyboard.SendKeys(uIENumberEdit, this.ReduceShift_Step_22Params.UIENumberEditSendKeys, ModifierKeys.None);

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// RegretCutAndPasteShifts_Step_13
        /// </summary>
        public void RegretCutAndPasteShifts_Step_13()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIAngreRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpEditToolsRibbonPageGroup.UIAngreRibbonBaseButtonItem;
            #endregion

            // Click 'Angre' RibbonBaseButtonItem
            Mouse.Click(uIAngreRibbonBaseButtonItem, new Point(24, 28));
        }
        
        /// <summary>
        /// RemoveKK5InsertKK4 - Use 'RemoveKK5InsertKK4Params' to pass parameters into this method.
        /// </summary>
        public void RemoveKK5InsertKK4()
        {
            #region Variable Declarations
            DXTextEdit uIRow0ColumnRosterCellEdit41 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit41;
            #endregion

            // Type 'Control + a' in '[Row]0[Column]RosterCell_16' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit41, this.RemoveKK5InsertKK4Params.UIRow0ColumnRosterCellEdit41SendKeys, ModifierKeys.Control);

            // Type '{Delete}' in '[Row]0[Column]RosterCell_16' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit41, this.RemoveKK5InsertKK4Params.UIRow0ColumnRosterCellEdit41SendKeys1, ModifierKeys.None);

            // Type 'kk4{Tab}' in '[Row]0[Column]RosterCell_16' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit41, this.RemoveKK5InsertKK4Params.UIRow0ColumnRosterCellEdit41SendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// RightClickHenrietteCell
        /// </summary>
        public void RightClickHenrietteCell()
        {
            #region Variable Declarations
            DXCell uIHansenHenrietteCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIHansenHenrietteCell;
            #endregion

            // Right-Click 'Hansen, Henriette' cell
            Mouse.Click(uIHansenHenrietteCell, MouseButtons.Right, ModifierKeys.None, new Point(68, 9));
        }
        
        /// <summary>
        /// SeachHelpAndMainLines - Use 'SeachHelpAndMainLinesParams' to pass parameters into this method.
        /// </summary>
        public void SeachHelpAndMainLines()
        {
            #region Variable Declarations
            DXCheckBox uICeBaseLineCheckBox = this.UISøkogErstattWindow.UIGrpAreaClient.UIPcLineSelectionClient.UICeBaseLineCheckBox;
            #endregion

            // Select 'ceBaseLine' check box
            uICeBaseLineCheckBox.Checked = this.SeachHelpAndMainLinesParams.UICeBaseLineCheckBoxChecked;
        }
        
        /// <summary>
        /// SelectAbsenceCellStep53
        /// </summary>
        public void SelectAbsenceCellStep53()
        {
            #region Variable Declarations
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell1;
            DXCell uIN2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIN2Cell;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell1, new Point(14, 10));

            // Click 'N2' cell
            Mouse.Click(uIN2Cell, new Point(18, 10));
        }
        
        /// <summary>
        /// SelectCell_Step_17
        /// </summary>
        public void SelectCell_Step_17()
        {
            #region Variable Declarations
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell8, new Point(22, 9));
        }
        
        /// <summary>
        /// SelectEmpPosLine_Step_31
        /// </summary>
        public void SelectEmpPosLine_Step_31()
        {
            #region Variable Declarations
            DXTreeListCell uIItem175TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode7TreeListNode.UINode0TreeListNode.UIItem175TreeListCell;
            #endregion

            // Click '1. 75%' TreeListCell
            Mouse.Click(uIItem175TreeListCell, new Point(48, 9));
        }
        
        /// <summary>
        /// SelectFiveEmployees_Step_42 - Use 'SelectFiveEmployees_Step_42Params' to pass parameters into this method.
        /// </summary>
        public void SelectFiveEmployees_Step_42()
        {
            #region Variable Declarations
            DXCell uIKuldeKalleCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIKuldeKalleCell;
            DXGrid uIGcDepartmentEmployeeTable = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable;
            #endregion

            // Click 'Kulde, Kalle' cell
            Mouse.Click(uIKuldeKalleCell, new Point(35, 7));

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.SelectFiveEmployees_Step_42Params.UIGcDepartmentEmployeeTableSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.SelectFiveEmployees_Step_42Params.UIGcDepartmentEmployeeTableSendKeys1, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.SelectFiveEmployees_Step_42Params.UIGcDepartmentEmployeeTableSendKeys2, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.SelectFiveEmployees_Step_42Params.UIGcDepartmentEmployeeTableSendKeys3, ModifierKeys.Shift);
        }
        
        /// <summary>
        /// SelectFourEmployees - Use 'SelectFourEmployeesParams' to pass parameters into this method.
        /// </summary>
        public void SelectFourEmployees()
        {
            #region Variable Declarations
            DXCell uIAndersenAndersCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAndersenAndersCell;
            DXGrid uIGcDepartmentEmployeeTable = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable;
            #endregion

            // Click 'Andersen, Anders' cell
            Mouse.Click(uIAndersenAndersCell, new Point(50, 12));

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.SelectFourEmployeesParams.UIGcDepartmentEmployeeTableSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.SelectFourEmployeesParams.UIGcDepartmentEmployeeTableSendKeys1, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.SelectFourEmployeesParams.UIGcDepartmentEmployeeTableSendKeys2, ModifierKeys.Shift);
        }
        
        /// <summary>
        /// SelectLineThree
        /// </summary>
        public void SelectLineThree()
        {
            #region Variable Declarations
            DXTreeListCell uIItem3BarskeBrynjulfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UIItem3BarskeBrynjulfTreeListCell;
            #endregion

            // Click '3. Barske, Brynjulf' TreeListCell
            Mouse.Click(uIItem3BarskeBrynjulfTreeListCell, new Point(75, 7));
        }
        
        /// <summary>
        /// SelectShift_Step_19
        /// </summary>
        public void SelectShift_Step_19()
        {
            #region Variable Declarations
            DXCell uIBVCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell3;
            #endregion

            // Click 'BV' cell
            Mouse.Click(uIBVCell3, new Point(13, 11));
        }
        
        /// <summary>
        /// SelectShift_Step_23
        /// </summary>
        public void SelectShift_Step_23()
        {
            #region Variable Declarations
            DXCell uIN2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell;
            #endregion

            // Click 'N2' cell
            Mouse.Click(uIN2Cell, new Point(11, 10));
        }
        
        /// <summary>
        /// SelectShift_Step_27
        /// </summary>
        public void SelectShift_Step_27()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell, new Point(12, 9));
        }
        
        /// <summary>
        /// SelectShift_Step_30
        /// </summary>
        public void SelectShift_Step_30()
        {
            #region Variable Declarations
            DXCell uID1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell1;
            #endregion

            // Click 'D1' cell
            Mouse.Click(uID1Cell1, new Point(14, 10));
        }
        
        /// <summary>
        /// SelectShift_Step_38
        /// </summary>
        public void SelectShift_Step_38()
        {
            #region Variable Declarations
            DXCell uIF2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF2Cell;
            DXCell uIF1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell;
            #endregion

            // Click 'F2' cell
            Mouse.Click(uIF2Cell, new Point(36, 11));

            // Right-Click 'F1' cell
            Mouse.Click(uIF1Cell, MouseButtons.Right, ModifierKeys.None, new Point(12, 10));
        }
        
        /// <summary>
        /// SelectWeek18shift
        /// </summary>
        public void SelectWeek18shift()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            #endregion

            // Right-Click cell
            Mouse.Click(uIItemCell, MouseButtons.Right, ModifierKeys.None, new Point(7, 11));
        }
        
        /// <summary>
        /// SelectWeek19shift
        /// </summary>
        public void SelectWeek19shift()
        {
            #region Variable Declarations
            DXCell uIItemCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell9;
            #endregion

            // Right-Click cell
            Mouse.Click(uIItemCell9, MouseButtons.Right, ModifierKeys.None, new Point(26, 0));
        }
        
        /// <summary>
        /// SelectWeek20shift
        /// </summary>
        public void SelectWeek20shift()
        {
            #region Variable Declarations
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            #endregion

            // Right-Click cell
            Mouse.Click(uIItemCell2, MouseButtons.Right, ModifierKeys.None, new Point(16, 9));
        }
        
        /// <summary>
        /// UnlockWeek_Step_50
        /// </summary>
        public void UnlockWeek_Step_50()
        {
            #region Variable Declarations
            DXCell uIBVCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIBVCell6;
            DXCell uIF1Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIF1Cell5;
            DXRibbonButtonItem uILåsoppRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpFunctionsRibbonPageGroup.UILåsoppRibbonBaseButtonItem;
            #endregion

            // Move 'BV' cell to 'F1' cell
            uIF1Cell5.EnsureClickable(new Point(13, 8));
            Mouse.StartDragging(uIBVCell6, new Point(15, 9));
            Mouse.StopDragging(uIF1Cell5, new Point(13, 8));

            // Click 'Lås opp' RibbonBaseButtonItem
            Mouse.Click(uILåsoppRibbonBaseButtonItem, new Point(12, 29));
        }
        
        /// <summary>
        /// CheckAbsenceAdded_Step_52 - Use 'CheckAbsenceAdded_Step_52ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAbsenceAdded_Step_52()
        {
            #region Variable Declarations
            DXRibbonButtonItem uILåsRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpFunctionsRibbonPageGroup.UILåsRibbonBaseButtonItem;
            DXRibbonButtonItem uILåsoppRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIGrpFunctionsRibbonPageGroup.UILåsoppRibbonBaseButtonItem;
            #endregion

            // Verify that the 'Enabled' property of 'Lås' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckAbsenceAdded_Step_52ExpectedValues.UILåsRibbonBaseButtonItemEnabled, uILåsRibbonBaseButtonItem.Enabled);

            // Verify that the 'Enabled' property of 'Lås opp' RibbonBaseButtonItem equals 'True'
            Assert.AreEqual(this.CheckAbsenceAdded_Step_52ExpectedValues.UILåsoppRibbonBaseButtonItemEnabled, uILåsoppRibbonBaseButtonItem.Enabled);
        }
        
        /// <summary>
        /// CheckAbsenceAdded_Step_53 - Use 'CheckAbsenceAdded_Step_53ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAbsenceAdded_Step_53()
        {
            #region Variable Declarations
            DXCell uIItem14052024Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIShiftDetailsViewCustom.UIGcShiftDetailsTable.UIItem14052024Cell;
            DXCell uIItem75Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIShiftDetailsViewCustom.UIGcShiftDetailsTable.UIItem75Cell;
            #endregion

            // Verify that the 'Text' property of '14.05.2024' cell equals '14.05.2024'
            Assert.AreEqual(this.CheckAbsenceAdded_Step_53ExpectedValues.UIItem14052024CellText, uIItem14052024Cell.Text);

            // Verify that the 'Text' property of '7.5' cell equals '7.5'
            Assert.AreEqual(this.CheckAbsenceAdded_Step_53ExpectedValues.UIItem75CellText, uIItem75Cell.Text);
        }
        
        #region Properties
        public virtual AddEmployees_Step_29Params AddEmployees_Step_29Params
        {
            get
            {
                if ((this.mAddEmployees_Step_29Params == null))
                {
                    this.mAddEmployees_Step_29Params = new AddEmployees_Step_29Params();
                }
                return this.mAddEmployees_Step_29Params;
            }
        }
        
        public virtual AddShiftCodes_Step_46Params AddShiftCodes_Step_46Params
        {
            get
            {
                if ((this.mAddShiftCodes_Step_46Params == null))
                {
                    this.mAddShiftCodes_Step_46Params = new AddShiftCodes_Step_46Params();
                }
                return this.mAddShiftCodes_Step_46Params;
            }
        }
        
        public virtual AddShiftsLine1Week1_Step_6Params AddShiftsLine1Week1_Step_6Params
        {
            get
            {
                if ((this.mAddShiftsLine1Week1_Step_6Params == null))
                {
                    this.mAddShiftsLine1Week1_Step_6Params = new AddShiftsLine1Week1_Step_6Params();
                }
                return this.mAddShiftsLine1Week1_Step_6Params;
            }
        }
        
        public virtual CheckAbsenceAdded_Step_51ExpectedValues CheckAbsenceAdded_Step_51ExpectedValues
        {
            get
            {
                if ((this.mCheckAbsenceAdded_Step_51ExpectedValues == null))
                {
                    this.mCheckAbsenceAdded_Step_51ExpectedValues = new CheckAbsenceAdded_Step_51ExpectedValues();
                }
                return this.mCheckAbsenceAdded_Step_51ExpectedValues;
            }
        }
        
        public virtual CheckAbsencesStep54ExpectedValues CheckAbsencesStep54ExpectedValues
        {
            get
            {
                if ((this.mCheckAbsencesStep54ExpectedValues == null))
                {
                    this.mCheckAbsencesStep54ExpectedValues = new CheckAbsencesStep54ExpectedValues();
                }
                return this.mCheckAbsencesStep54ExpectedValues;
            }
        }
        
        public virtual CheckCellsLocked_Step_49ExpectedValues CheckCellsLocked_Step_49ExpectedValues
        {
            get
            {
                if ((this.mCheckCellsLocked_Step_49ExpectedValues == null))
                {
                    this.mCheckCellsLocked_Step_49ExpectedValues = new CheckCellsLocked_Step_49ExpectedValues();
                }
                return this.mCheckCellsLocked_Step_49ExpectedValues;
            }
        }
        
        public virtual CheckErrorMessage_Step_7ExpectedValues CheckErrorMessage_Step_7ExpectedValues
        {
            get
            {
                if ((this.mCheckErrorMessage_Step_7ExpectedValues == null))
                {
                    this.mCheckErrorMessage_Step_7ExpectedValues = new CheckErrorMessage_Step_7ExpectedValues();
                }
                return this.mCheckErrorMessage_Step_7ExpectedValues;
            }
        }
        
        public virtual CheckF3Shifts_Step_42ExpectedValues CheckF3Shifts_Step_42ExpectedValues
        {
            get
            {
                if ((this.mCheckF3Shifts_Step_42ExpectedValues == null))
                {
                    this.mCheckF3Shifts_Step_42ExpectedValues = new CheckF3Shifts_Step_42ExpectedValues();
                }
                return this.mCheckF3Shifts_Step_42ExpectedValues;
            }
        }
        
        public virtual CheckFreeCodesAddedExpectedValues CheckFreeCodesAddedExpectedValues
        {
            get
            {
                if ((this.mCheckFreeCodesAddedExpectedValues == null))
                {
                    this.mCheckFreeCodesAddedExpectedValues = new CheckFreeCodesAddedExpectedValues();
                }
                return this.mCheckFreeCodesAddedExpectedValues;
            }
        }
        
        public virtual CheckInsertButton_Step_10ExpectedValues CheckInsertButton_Step_10ExpectedValues
        {
            get
            {
                if ((this.mCheckInsertButton_Step_10ExpectedValues == null))
                {
                    this.mCheckInsertButton_Step_10ExpectedValues = new CheckInsertButton_Step_10ExpectedValues();
                }
                return this.mCheckInsertButton_Step_10ExpectedValues;
            }
        }
        
        public virtual CheckMessage_Step_39ExpectedValues CheckMessage_Step_39ExpectedValues
        {
            get
            {
                if ((this.mCheckMessage_Step_39ExpectedValues == null))
                {
                    this.mCheckMessage_Step_39ExpectedValues = new CheckMessage_Step_39ExpectedValues();
                }
                return this.mCheckMessage_Step_39ExpectedValues;
            }
        }
        
        public virtual CheckMessage_Step_8ExpectedValues CheckMessage_Step_8ExpectedValues
        {
            get
            {
                if ((this.mCheckMessage_Step_8ExpectedValues == null))
                {
                    this.mCheckMessage_Step_8ExpectedValues = new CheckMessage_Step_8ExpectedValues();
                }
                return this.mCheckMessage_Step_8ExpectedValues;
            }
        }
        
        public virtual CheckOkDisabled_Step_23ExpectedValues CheckOkDisabled_Step_23ExpectedValues
        {
            get
            {
                if ((this.mCheckOkDisabled_Step_23ExpectedValues == null))
                {
                    this.mCheckOkDisabled_Step_23ExpectedValues = new CheckOkDisabled_Step_23ExpectedValues();
                }
                return this.mCheckOkDisabled_Step_23ExpectedValues;
            }
        }
        
        public virtual CheckRegStatusMessage_Step_23ExpectedValues CheckRegStatusMessage_Step_23ExpectedValues
        {
            get
            {
                if ((this.mCheckRegStatusMessage_Step_23ExpectedValues == null))
                {
                    this.mCheckRegStatusMessage_Step_23ExpectedValues = new CheckRegStatusMessage_Step_23ExpectedValues();
                }
                return this.mCheckRegStatusMessage_Step_23ExpectedValues;
            }
        }
        
        public virtual CheckReplacedShifts_Step_37ExpectedValues CheckReplacedShifts_Step_37ExpectedValues
        {
            get
            {
                if ((this.mCheckReplacedShifts_Step_37ExpectedValues == null))
                {
                    this.mCheckReplacedShifts_Step_37ExpectedValues = new CheckReplacedShifts_Step_37ExpectedValues();
                }
                return this.mCheckReplacedShifts_Step_37ExpectedValues;
            }
        }
        
        public virtual CheckSaveDisabled_Step_21ExpectedValues CheckSaveDisabled_Step_21ExpectedValues
        {
            get
            {
                if ((this.mCheckSaveDisabled_Step_21ExpectedValues == null))
                {
                    this.mCheckSaveDisabled_Step_21ExpectedValues = new CheckSaveDisabled_Step_21ExpectedValues();
                }
                return this.mCheckSaveDisabled_Step_21ExpectedValues;
            }
        }
        
        public virtual CheckSErrorMessage_Step_16ExpectedValues CheckSErrorMessage_Step_16ExpectedValues
        {
            get
            {
                if ((this.mCheckSErrorMessage_Step_16ExpectedValues == null))
                {
                    this.mCheckSErrorMessage_Step_16ExpectedValues = new CheckSErrorMessage_Step_16ExpectedValues();
                }
                return this.mCheckSErrorMessage_Step_16ExpectedValues;
            }
        }
        
        public virtual CheckShift_Step_27ExpectedValues CheckShift_Step_27ExpectedValues
        {
            get
            {
                if ((this.mCheckShift_Step_27ExpectedValues == null))
                {
                    this.mCheckShift_Step_27ExpectedValues = new CheckShift_Step_27ExpectedValues();
                }
                return this.mCheckShift_Step_27ExpectedValues;
            }
        }
        
        public virtual CheckShiftCodePattern_Step_38ExpectedValues CheckShiftCodePattern_Step_38ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftCodePattern_Step_38ExpectedValues == null))
                {
                    this.mCheckShiftCodePattern_Step_38ExpectedValues = new CheckShiftCodePattern_Step_38ExpectedValues();
                }
                return this.mCheckShiftCodePattern_Step_38ExpectedValues;
            }
        }
        
        public virtual CheckShiftCodePatternAdded_Step_43ExpectedValues CheckShiftCodePatternAdded_Step_43ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftCodePatternAdded_Step_43ExpectedValues == null))
                {
                    this.mCheckShiftCodePatternAdded_Step_43ExpectedValues = new CheckShiftCodePatternAdded_Step_43ExpectedValues();
                }
                return this.mCheckShiftCodePatternAdded_Step_43ExpectedValues;
            }
        }
        
        public virtual CheckShiftcodes_Step_11ExpectedValues CheckShiftcodes_Step_11ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftcodes_Step_11ExpectedValues == null))
                {
                    this.mCheckShiftcodes_Step_11ExpectedValues = new CheckShiftcodes_Step_11ExpectedValues();
                }
                return this.mCheckShiftcodes_Step_11ExpectedValues;
            }
        }
        
        public virtual CheckShiftcodes_Step_12ExpectedValues CheckShiftcodes_Step_12ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftcodes_Step_12ExpectedValues == null))
                {
                    this.mCheckShiftcodes_Step_12ExpectedValues = new CheckShiftcodes_Step_12ExpectedValues();
                }
                return this.mCheckShiftcodes_Step_12ExpectedValues;
            }
        }
        
        public virtual CheckShiftcodes_Step_13ExpectedValues CheckShiftcodes_Step_13ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftcodes_Step_13ExpectedValues == null))
                {
                    this.mCheckShiftcodes_Step_13ExpectedValues = new CheckShiftcodes_Step_13ExpectedValues();
                }
                return this.mCheckShiftcodes_Step_13ExpectedValues;
            }
        }
        
        public virtual CheckShiftcodes_Step_14ExpectedValues CheckShiftcodes_Step_14ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftcodes_Step_14ExpectedValues == null))
                {
                    this.mCheckShiftcodes_Step_14ExpectedValues = new CheckShiftcodes_Step_14ExpectedValues();
                }
                return this.mCheckShiftcodes_Step_14ExpectedValues;
            }
        }
        
        public virtual CheckShiftcodes_Step_15ExpectedValues CheckShiftcodes_Step_15ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftcodes_Step_15ExpectedValues == null))
                {
                    this.mCheckShiftcodes_Step_15ExpectedValues = new CheckShiftcodes_Step_15ExpectedValues();
                }
                return this.mCheckShiftcodes_Step_15ExpectedValues;
            }
        }
        
        public virtual CheckShiftcodes_Step_19ExpectedValues CheckShiftcodes_Step_19ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftcodes_Step_19ExpectedValues == null))
                {
                    this.mCheckShiftcodes_Step_19ExpectedValues = new CheckShiftcodes_Step_19ExpectedValues();
                }
                return this.mCheckShiftcodes_Step_19ExpectedValues;
            }
        }
        
        public virtual CheckShiftcodes_Step_20ExpectedValues CheckShiftcodes_Step_20ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftcodes_Step_20ExpectedValues == null))
                {
                    this.mCheckShiftcodes_Step_20ExpectedValues = new CheckShiftcodes_Step_20ExpectedValues();
                }
                return this.mCheckShiftcodes_Step_20ExpectedValues;
            }
        }
        
        public virtual CheckShiftCodesAdded_Step_44ExpectedValues CheckShiftCodesAdded_Step_44ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftCodesAdded_Step_44ExpectedValues == null))
                {
                    this.mCheckShiftCodesAdded_Step_44ExpectedValues = new CheckShiftCodesAdded_Step_44ExpectedValues();
                }
                return this.mCheckShiftCodesAdded_Step_44ExpectedValues;
            }
        }
        
        public virtual CheckShiftCodesAdded_Step_45ExpectedValues CheckShiftCodesAdded_Step_45ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftCodesAdded_Step_45ExpectedValues == null))
                {
                    this.mCheckShiftCodesAdded_Step_45ExpectedValues = new CheckShiftCodesAdded_Step_45ExpectedValues();
                }
                return this.mCheckShiftCodesAdded_Step_45ExpectedValues;
            }
        }
        
        public virtual CheckShiftCodesAdded_Step_46ExpectedValues CheckShiftCodesAdded_Step_46ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftCodesAdded_Step_46ExpectedValues == null))
                {
                    this.mCheckShiftCodesAdded_Step_46ExpectedValues = new CheckShiftCodesAdded_Step_46ExpectedValues();
                }
                return this.mCheckShiftCodesAdded_Step_46ExpectedValues;
            }
        }
        
        public virtual CheckShiftCodesAdded_Step_47ExpectedValues CheckShiftCodesAdded_Step_47ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftCodesAdded_Step_47ExpectedValues == null))
                {
                    this.mCheckShiftCodesAdded_Step_47ExpectedValues = new CheckShiftCodesAdded_Step_47ExpectedValues();
                }
                return this.mCheckShiftCodesAdded_Step_47ExpectedValues;
            }
        }
        
        public virtual CheckShiftExtended_Step_24ExpectedValues CheckShiftExtended_Step_24ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftExtended_Step_24ExpectedValues == null))
                {
                    this.mCheckShiftExtended_Step_24ExpectedValues = new CheckShiftExtended_Step_24ExpectedValues();
                }
                return this.mCheckShiftExtended_Step_24ExpectedValues;
            }
        }
        
        public virtual CheckShiftExtended_Step_25ExpectedValues CheckShiftExtended_Step_25ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftExtended_Step_25ExpectedValues == null))
                {
                    this.mCheckShiftExtended_Step_25ExpectedValues = new CheckShiftExtended_Step_25ExpectedValues();
                }
                return this.mCheckShiftExtended_Step_25ExpectedValues;
            }
        }
        
        public virtual CheckShiftExtended_Step_26ExpectedValues CheckShiftExtended_Step_26ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftExtended_Step_26ExpectedValues == null))
                {
                    this.mCheckShiftExtended_Step_26ExpectedValues = new CheckShiftExtended_Step_26ExpectedValues();
                }
                return this.mCheckShiftExtended_Step_26ExpectedValues;
            }
        }
        
        public virtual CheckShiftReduced_Step_22ExpectedValues CheckShiftReduced_Step_22ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftReduced_Step_22ExpectedValues == null))
                {
                    this.mCheckShiftReduced_Step_22ExpectedValues = new CheckShiftReduced_Step_22ExpectedValues();
                }
                return this.mCheckShiftReduced_Step_22ExpectedValues;
            }
        }
        
        public virtual CheckShifts_Step_28ExpectedValues CheckShifts_Step_28ExpectedValues
        {
            get
            {
                if ((this.mCheckShifts_Step_28ExpectedValues == null))
                {
                    this.mCheckShifts_Step_28ExpectedValues = new CheckShifts_Step_28ExpectedValues();
                }
                return this.mCheckShifts_Step_28ExpectedValues;
            }
        }
        
        public virtual CheckShifts_Step_30_2ExpectedValues CheckShifts_Step_30_2ExpectedValues
        {
            get
            {
                if ((this.mCheckShifts_Step_30_2ExpectedValues == null))
                {
                    this.mCheckShifts_Step_30_2ExpectedValues = new CheckShifts_Step_30_2ExpectedValues();
                }
                return this.mCheckShifts_Step_30_2ExpectedValues;
            }
        }
        
        public virtual CheckShiftsLocked_Step_48ExpectedValues CheckShiftsLocked_Step_48ExpectedValues
        {
            get
            {
                if ((this.mCheckShiftsLocked_Step_48ExpectedValues == null))
                {
                    this.mCheckShiftsLocked_Step_48ExpectedValues = new CheckShiftsLocked_Step_48ExpectedValues();
                }
                return this.mCheckShiftsLocked_Step_48ExpectedValues;
            }
        }
        
        public virtual CheckT1Shifts_Step_33ExpectedValues CheckT1Shifts_Step_33ExpectedValues
        {
            get
            {
                if ((this.mCheckT1Shifts_Step_33ExpectedValues == null))
                {
                    this.mCheckT1Shifts_Step_33ExpectedValues = new CheckT1Shifts_Step_33ExpectedValues();
                }
                return this.mCheckT1Shifts_Step_33ExpectedValues;
            }
        }
        
        public virtual CheckWarnings_Step_17ExpectedValues CheckWarnings_Step_17ExpectedValues
        {
            get
            {
                if ((this.mCheckWarnings_Step_17ExpectedValues == null))
                {
                    this.mCheckWarnings_Step_17ExpectedValues = new CheckWarnings_Step_17ExpectedValues();
                }
                return this.mCheckWarnings_Step_17ExpectedValues;
            }
        }
        
        public virtual CheckWeeksUnLocked_Step_50ExpectedValues CheckWeeksUnLocked_Step_50ExpectedValues
        {
            get
            {
                if ((this.mCheckWeeksUnLocked_Step_50ExpectedValues == null))
                {
                    this.mCheckWeeksUnLocked_Step_50ExpectedValues = new CheckWeeksUnLocked_Step_50ExpectedValues();
                }
                return this.mCheckWeeksUnLocked_Step_50ExpectedValues;
            }
        }
        
        public virtual CopyPasteLine1_Step_45Params CopyPasteLine1_Step_45Params
        {
            get
            {
                if ((this.mCopyPasteLine1_Step_45Params == null))
                {
                    this.mCopyPasteLine1_Step_45Params = new CopyPasteLine1_Step_45Params();
                }
                return this.mCopyPasteLine1_Step_45Params;
            }
        }
        
        public virtual CopyPasteShiftCodes_Step_44Params CopyPasteShiftCodes_Step_44Params
        {
            get
            {
                if ((this.mCopyPasteShiftCodes_Step_44Params == null))
                {
                    this.mCopyPasteShiftCodes_Step_44Params = new CopyPasteShiftCodes_Step_44Params();
                }
                return this.mCopyPasteShiftCodes_Step_44Params;
            }
        }
        
        public virtual DeactivateInsertButtonParams DeactivateInsertButtonParams
        {
            get
            {
                if ((this.mDeactivateInsertButtonParams == null))
                {
                    this.mDeactivateInsertButtonParams = new DeactivateInsertButtonParams();
                }
                return this.mDeactivateInsertButtonParams;
            }
        }
        
        public virtual DeleteErrorLShifts_Step_18Params DeleteErrorLShifts_Step_18Params
        {
            get
            {
                if ((this.mDeleteErrorLShifts_Step_18Params == null))
                {
                    this.mDeleteErrorLShifts_Step_18Params = new DeleteErrorLShifts_Step_18Params();
                }
                return this.mDeleteErrorLShifts_Step_18Params;
            }
        }
        
        public virtual EditExtendeddShift_Step_25Params EditExtendeddShift_Step_25Params
        {
            get
            {
                if ((this.mEditExtendeddShift_Step_25Params == null))
                {
                    this.mEditExtendeddShift_Step_25Params = new EditExtendeddShift_Step_25Params();
                }
                return this.mEditExtendeddShift_Step_25Params;
            }
        }
        
        public virtual ExtendShift_Step_23Params ExtendShift_Step_23Params
        {
            get
            {
                if ((this.mExtendShift_Step_23Params == null))
                {
                    this.mExtendShift_Step_23Params = new ExtendShift_Step_23Params();
                }
                return this.mExtendShift_Step_23Params;
            }
        }
        
        public virtual ExtendShift_Step_24Params ExtendShift_Step_24Params
        {
            get
            {
                if ((this.mExtendShift_Step_24Params == null))
                {
                    this.mExtendShift_Step_24Params = new ExtendShift_Step_24Params();
                }
                return this.mExtendShift_Step_24Params;
            }
        }
        
        public virtual InsertLShifts_Step_17Params InsertLShifts_Step_17Params
        {
            get
            {
                if ((this.mInsertLShifts_Step_17Params == null))
                {
                    this.mInsertLShifts_Step_17Params = new InsertLShifts_Step_17Params();
                }
                return this.mInsertLShifts_Step_17Params;
            }
        }
        
        public virtual PasteShifts_Step_47Params PasteShifts_Step_47Params
        {
            get
            {
                if ((this.mPasteShifts_Step_47Params == null))
                {
                    this.mPasteShifts_Step_47Params = new PasteShifts_Step_47Params();
                }
                return this.mPasteShifts_Step_47Params;
            }
        }
        
        public virtual ReduceShift_Step_22Params ReduceShift_Step_22Params
        {
            get
            {
                if ((this.mReduceShift_Step_22Params == null))
                {
                    this.mReduceShift_Step_22Params = new ReduceShift_Step_22Params();
                }
                return this.mReduceShift_Step_22Params;
            }
        }
        
        public virtual RemoveKK5InsertKK4Params RemoveKK5InsertKK4Params
        {
            get
            {
                if ((this.mRemoveKK5InsertKK4Params == null))
                {
                    this.mRemoveKK5InsertKK4Params = new RemoveKK5InsertKK4Params();
                }
                return this.mRemoveKK5InsertKK4Params;
            }
        }
        
        public virtual SeachHelpAndMainLinesParams SeachHelpAndMainLinesParams
        {
            get
            {
                if ((this.mSeachHelpAndMainLinesParams == null))
                {
                    this.mSeachHelpAndMainLinesParams = new SeachHelpAndMainLinesParams();
                }
                return this.mSeachHelpAndMainLinesParams;
            }
        }
        
        public virtual SelectFiveEmployees_Step_42Params SelectFiveEmployees_Step_42Params
        {
            get
            {
                if ((this.mSelectFiveEmployees_Step_42Params == null))
                {
                    this.mSelectFiveEmployees_Step_42Params = new SelectFiveEmployees_Step_42Params();
                }
                return this.mSelectFiveEmployees_Step_42Params;
            }
        }
        
        public virtual SelectFourEmployeesParams SelectFourEmployeesParams
        {
            get
            {
                if ((this.mSelectFourEmployeesParams == null))
                {
                    this.mSelectFourEmployeesParams = new SelectFourEmployeesParams();
                }
                return this.mSelectFourEmployeesParams;
            }
        }
        
        public virtual CheckAbsenceAdded_Step_52ExpectedValues CheckAbsenceAdded_Step_52ExpectedValues
        {
            get
            {
                if ((this.mCheckAbsenceAdded_Step_52ExpectedValues == null))
                {
                    this.mCheckAbsenceAdded_Step_52ExpectedValues = new CheckAbsenceAdded_Step_52ExpectedValues();
                }
                return this.mCheckAbsenceAdded_Step_52ExpectedValues;
            }
        }
        
        public virtual CheckAbsenceAdded_Step_53ExpectedValues CheckAbsenceAdded_Step_53ExpectedValues
        {
            get
            {
                if ((this.mCheckAbsenceAdded_Step_53ExpectedValues == null))
                {
                    this.mCheckAbsenceAdded_Step_53ExpectedValues = new CheckAbsenceAdded_Step_53ExpectedValues();
                }
                return this.mCheckAbsenceAdded_Step_53ExpectedValues;
            }
        }
        
        public UILeggtilansatteWindow UILeggtilansatteWindow
        {
            get
            {
                if ((this.mUILeggtilansatteWindow == null))
                {
                    this.mUILeggtilansatteWindow = new UILeggtilansatteWindow();
                }
                return this.mUILeggtilansatteWindow;
            }
        }
        
        public UIAnsatteiarbeidsplanWindow UIAnsatteiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIAnsatteiarbeidsplanWindow == null))
                {
                    this.mUIAnsatteiarbeidsplanWindow = new UIAnsatteiarbeidsplanWindow();
                }
                return this.mUIAnsatteiarbeidsplanWindow;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UIGT4003InformasjonWindow UIGT4003InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4003InformasjonWindow == null))
                {
                    this.mUIGT4003InformasjonWindow = new UIGT4003InformasjonWindow();
                }
                return this.mUIGT4003InformasjonWindow;
            }
        }
        
        public UIGT3999InformasjonWindow UIGT3999InformasjonWindow
        {
            get
            {
                if ((this.mUIGT3999InformasjonWindow == null))
                {
                    this.mUIGT3999InformasjonWindow = new UIGT3999InformasjonWindow();
                }
                return this.mUIGT3999InformasjonWindow;
            }
        }
        
        public UIGT4001InformasjonWindow UIGT4001InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4001InformasjonWindow == null))
                {
                    this.mUIGT4001InformasjonWindow = new UIGT4001InformasjonWindow();
                }
                return this.mUIGT4001InformasjonWindow;
            }
        }
        
        public UISøkogErstattWindow UISøkogErstattWindow
        {
            get
            {
                if ((this.mUISøkogErstattWindow == null))
                {
                    this.mUISøkogErstattWindow = new UISøkogErstattWindow();
                }
                return this.mUISøkogErstattWindow;
            }
        }
        
        public UIUtjevningsvaktWindow UIUtjevningsvaktWindow
        {
            get
            {
                if ((this.mUIUtjevningsvaktWindow == null))
                {
                    this.mUIUtjevningsvaktWindow = new UIUtjevningsvaktWindow();
                }
                return this.mUIUtjevningsvaktWindow;
            }
        }
        
        public UIRegistreringsstatusWindow UIRegistreringsstatusWindow
        {
            get
            {
                if ((this.mUIRegistreringsstatusWindow == null))
                {
                    this.mUIRegistreringsstatusWindow = new UIRegistreringsstatusWindow();
                }
                return this.mUIRegistreringsstatusWindow;
            }
        }
        
        public UIRPL4047InformasjonWindow UIRPL4047InformasjonWindow
        {
            get
            {
                if ((this.mUIRPL4047InformasjonWindow == null))
                {
                    this.mUIRPL4047InformasjonWindow = new UIRPL4047InformasjonWindow();
                }
                return this.mUIRPL4047InformasjonWindow;
            }
        }
        
        public UIRPL24009Window UIRPL24009Window
        {
            get
            {
                if ((this.mUIRPL24009Window == null))
                {
                    this.mUIRPL24009Window = new UIRPL24009Window();
                }
                return this.mUIRPL24009Window;
            }
        }
        #endregion
        
        #region Fields
        private AddEmployees_Step_29Params mAddEmployees_Step_29Params;
        
        private AddShiftCodes_Step_46Params mAddShiftCodes_Step_46Params;
        
        private AddShiftsLine1Week1_Step_6Params mAddShiftsLine1Week1_Step_6Params;
        
        private CheckAbsenceAdded_Step_51ExpectedValues mCheckAbsenceAdded_Step_51ExpectedValues;
        
        private CheckAbsencesStep54ExpectedValues mCheckAbsencesStep54ExpectedValues;
        
        private CheckCellsLocked_Step_49ExpectedValues mCheckCellsLocked_Step_49ExpectedValues;
        
        private CheckErrorMessage_Step_7ExpectedValues mCheckErrorMessage_Step_7ExpectedValues;
        
        private CheckF3Shifts_Step_42ExpectedValues mCheckF3Shifts_Step_42ExpectedValues;
        
        private CheckFreeCodesAddedExpectedValues mCheckFreeCodesAddedExpectedValues;
        
        private CheckInsertButton_Step_10ExpectedValues mCheckInsertButton_Step_10ExpectedValues;
        
        private CheckMessage_Step_39ExpectedValues mCheckMessage_Step_39ExpectedValues;
        
        private CheckMessage_Step_8ExpectedValues mCheckMessage_Step_8ExpectedValues;
        
        private CheckOkDisabled_Step_23ExpectedValues mCheckOkDisabled_Step_23ExpectedValues;
        
        private CheckRegStatusMessage_Step_23ExpectedValues mCheckRegStatusMessage_Step_23ExpectedValues;
        
        private CheckReplacedShifts_Step_37ExpectedValues mCheckReplacedShifts_Step_37ExpectedValues;
        
        private CheckSaveDisabled_Step_21ExpectedValues mCheckSaveDisabled_Step_21ExpectedValues;
        
        private CheckSErrorMessage_Step_16ExpectedValues mCheckSErrorMessage_Step_16ExpectedValues;
        
        private CheckShift_Step_27ExpectedValues mCheckShift_Step_27ExpectedValues;
        
        private CheckShiftCodePattern_Step_38ExpectedValues mCheckShiftCodePattern_Step_38ExpectedValues;
        
        private CheckShiftCodePatternAdded_Step_43ExpectedValues mCheckShiftCodePatternAdded_Step_43ExpectedValues;
        
        private CheckShiftcodes_Step_11ExpectedValues mCheckShiftcodes_Step_11ExpectedValues;
        
        private CheckShiftcodes_Step_12ExpectedValues mCheckShiftcodes_Step_12ExpectedValues;
        
        private CheckShiftcodes_Step_13ExpectedValues mCheckShiftcodes_Step_13ExpectedValues;
        
        private CheckShiftcodes_Step_14ExpectedValues mCheckShiftcodes_Step_14ExpectedValues;
        
        private CheckShiftcodes_Step_15ExpectedValues mCheckShiftcodes_Step_15ExpectedValues;
        
        private CheckShiftcodes_Step_19ExpectedValues mCheckShiftcodes_Step_19ExpectedValues;
        
        private CheckShiftcodes_Step_20ExpectedValues mCheckShiftcodes_Step_20ExpectedValues;
        
        private CheckShiftCodesAdded_Step_44ExpectedValues mCheckShiftCodesAdded_Step_44ExpectedValues;
        
        private CheckShiftCodesAdded_Step_45ExpectedValues mCheckShiftCodesAdded_Step_45ExpectedValues;
        
        private CheckShiftCodesAdded_Step_46ExpectedValues mCheckShiftCodesAdded_Step_46ExpectedValues;
        
        private CheckShiftCodesAdded_Step_47ExpectedValues mCheckShiftCodesAdded_Step_47ExpectedValues;
        
        private CheckShiftExtended_Step_24ExpectedValues mCheckShiftExtended_Step_24ExpectedValues;
        
        private CheckShiftExtended_Step_25ExpectedValues mCheckShiftExtended_Step_25ExpectedValues;
        
        private CheckShiftExtended_Step_26ExpectedValues mCheckShiftExtended_Step_26ExpectedValues;
        
        private CheckShiftReduced_Step_22ExpectedValues mCheckShiftReduced_Step_22ExpectedValues;
        
        private CheckShifts_Step_28ExpectedValues mCheckShifts_Step_28ExpectedValues;
        
        private CheckShifts_Step_30_2ExpectedValues mCheckShifts_Step_30_2ExpectedValues;
        
        private CheckShiftsLocked_Step_48ExpectedValues mCheckShiftsLocked_Step_48ExpectedValues;
        
        private CheckT1Shifts_Step_33ExpectedValues mCheckT1Shifts_Step_33ExpectedValues;
        
        private CheckWarnings_Step_17ExpectedValues mCheckWarnings_Step_17ExpectedValues;
        
        private CheckWeeksUnLocked_Step_50ExpectedValues mCheckWeeksUnLocked_Step_50ExpectedValues;
        
        private CopyPasteLine1_Step_45Params mCopyPasteLine1_Step_45Params;
        
        private CopyPasteShiftCodes_Step_44Params mCopyPasteShiftCodes_Step_44Params;
        
        private DeactivateInsertButtonParams mDeactivateInsertButtonParams;
        
        private DeleteErrorLShifts_Step_18Params mDeleteErrorLShifts_Step_18Params;
        
        private EditExtendeddShift_Step_25Params mEditExtendeddShift_Step_25Params;
        
        private ExtendShift_Step_23Params mExtendShift_Step_23Params;
        
        private ExtendShift_Step_24Params mExtendShift_Step_24Params;
        
        private InsertLShifts_Step_17Params mInsertLShifts_Step_17Params;
        
        private PasteShifts_Step_47Params mPasteShifts_Step_47Params;
        
        private ReduceShift_Step_22Params mReduceShift_Step_22Params;
        
        private RemoveKK5InsertKK4Params mRemoveKK5InsertKK4Params;
        
        private SeachHelpAndMainLinesParams mSeachHelpAndMainLinesParams;
        
        private SelectFiveEmployees_Step_42Params mSelectFiveEmployees_Step_42Params;
        
        private SelectFourEmployeesParams mSelectFourEmployeesParams;
        
        private CheckAbsenceAdded_Step_52ExpectedValues mCheckAbsenceAdded_Step_52ExpectedValues;
        
        private CheckAbsenceAdded_Step_53ExpectedValues mCheckAbsenceAdded_Step_53ExpectedValues;
        
        private UILeggtilansatteWindow mUILeggtilansatteWindow;
        
        private UIAnsatteiarbeidsplanWindow mUIAnsatteiarbeidsplanWindow;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UIGT4003InformasjonWindow mUIGT4003InformasjonWindow;
        
        private UIGT3999InformasjonWindow mUIGT3999InformasjonWindow;
        
        private UIGT4001InformasjonWindow mUIGT4001InformasjonWindow;
        
        private UISøkogErstattWindow mUISøkogErstattWindow;
        
        private UIUtjevningsvaktWindow mUIUtjevningsvaktWindow;
        
        private UIRegistreringsstatusWindow mUIRegistreringsstatusWindow;
        
        private UIRPL4047InformasjonWindow mUIRPL4047InformasjonWindow;
        
        private UIRPL24009Window mUIRPL24009Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddEmployees_Step_29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddEmployees_Step_29Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys1 = "{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddShiftCodes_Step_46'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddShiftCodes_Step_46Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'n2{Enter}' in '[Row]2[Column]RosterCell_14' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEditSendKeys = "n2{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddShiftsLine1Week1_Step_6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddShiftsLine1Week1_Step_6Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'd1{Tab}' in '[Row]0[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "d1{Tab}";
        
        /// <summary>
        /// Type 'd2{Tab}' in '[Row]0[Column]RosterCell_1' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit1SendKeys = "d2{Tab}";
        
        /// <summary>
        /// Type 'd3{Tab}' in '[Row]0[Column]RosterCell_2' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit2SendKeys = "d3{Tab}";
        
        /// <summary>
        /// Type 'gv1{Tab}' in '[Row]0[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit3SendKeys = "gv1{Tab}";
        
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]0[Column]RosterCell_4' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit4SendKeys = "f1{Tab}";
        
        /// <summary>
        /// Type 'a1{Tab}' in '[Row]0[Column]RosterCell_5' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit5SendKeys = "a1{Tab}";
        
        /// <summary>
        /// Type 'a3{Tab}' in '[Row]0[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit6SendKeys = "a3{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAbsenceAdded_Step_51'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAbsenceAdded_Step_51ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'BV' cell equals 'NewPlanShift (GV1) readonly'
        /// </summary>
        public string UIBVCell6ValueAsString = "NewPlanShift (GV1) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'BV' cell equals 'NewPlanShift (GV1) readonly'
        /// </summary>
        public string UIBVCell7ValueAsString = "NewPlanShift (GV1) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'BV' cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIBVCell8ValueAsString = "NewPlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'BV' cell equals 'PlanShift (GV2) readonly'
        /// </summary>
        public string UIBVCell9ValueAsString = "PlanShift (GV2) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (GV2) readonly'
        /// </summary>
        public string UIItemCell4ValueAsString = "NewPlanShift (GV2) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIF2Cell5ValueAsString = "NewPlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIF1Cell5ValueAsString = "NewPlanShift (Empty) readonly";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAbsencesStep54'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAbsencesStep54ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Nilsson, Nisse' cell equals 'Olsen, Bror'
        /// </summary>
        public string UINilssonNisseCellText = "Olsen, Bror";
        
        /// <summary>
        /// Verify that the 'Text' property of '41 - Ferie dag' cell equals '45 - Ferie 5 dgr/uke'
        /// </summary>
        public string UIItem41FeriedagCellText = "45 - Ferie 5 dgr/uke";
        
        /// <summary>
        /// Verify that the 'Text' property of '14.05.2024' cell equals '06.05.2024'
        /// </summary>
        public string UIItem14052024CellText = "06.05.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '14.05.2024' cell equals '12.05.2024'
        /// </summary>
        public string UIItem14052024Cell1Text = "12.05.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '4' cell equals '4'
        /// </summary>
        public string UIItem4CellText = "4";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Olsen, Bror' cell equals 'Nilsson, Nisse'
        /// </summary>
        public string UIOlsenBrorCellText = "Nilsson, Nisse";
        
        /// <summary>
        /// Verify that the 'Text' property of '5010 - Arbeidsplan og hjelpeplan' cell equals '5010 - Arbeidsplan og hjelpeplan'
        /// </summary>
        public string UIItem5010ArbeidsplanoCellText = "5010 - Arbeidsplan og hjelpeplan";
        
        /// <summary>
        /// Verify that the 'Text' property of '45 - Ferie 5 dgr/uke' cell equals '41 - Ferie dag'
        /// </summary>
        public string UIItem45Ferie5dgrukeCellText = "41 - Ferie dag";
        
        /// <summary>
        /// Verify that the 'Text' property of '06.05.2024' cell equals '14.05.2024'
        /// </summary>
        public string UIItem06052024CellText = "14.05.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '12.05.2024' cell equals '14.05.2024'
        /// </summary>
        public string UIItem12052024CellText = "14.05.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '1' cell equals '1'
        /// </summary>
        public string UIItem1CellText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCellsLocked_Step_49'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckCellsLocked_Step_49ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'D1' cell equals 'GV1'
        /// </summary>
        public string UID1Cell2Text = "GV1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'D1' cell equals 'NewPlanShift (GV1)'
        /// </summary>
        public string UID1Cell2ValueAsString = "NewPlanShift (GV1)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckErrorMessage_Step_7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckErrorMessage_Step_7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ErrorText' property of '[Row]0[Column]RosterCell_16' text box equals 'Ukjent vaktkode(kk5)'
        /// </summary>
        public string UIRow0ColumnRosterCellEdit41ErrorText = "Ukjent vaktkode(kk5)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckF3Shifts_Step_42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckF3Shifts_Step_42ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'F3'
        /// </summary>
        public string UID3CellText = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'F3'
        /// </summary>
        public string UIN2Cell2Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'F3'
        /// </summary>
        public string UIBVCell3Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'F3'
        /// </summary>
        public string UID3Cell3Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'F3'
        /// </summary>
        public string UIItemCell24Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'F3'
        /// </summary>
        public string UIItemCell11Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals 'F3'
        /// </summary>
        public string UILCell2Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'F3'
        /// </summary>
        public string UIGV1Cell2Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'F3'
        /// </summary>
        public string UIBVCell9Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'F3'
        /// </summary>
        public string UIBV3Cell2Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK4' cell equals 'F3'
        /// </summary>
        public string UIKK4CellText = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F3'
        /// </summary>
        public string UIF1Cell10Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'F3'
        /// </summary>
        public string UIItemCell18Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK4' cell equals 'F3'
        /// </summary>
        public string UIKK4Cell1Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'F3'
        /// </summary>
        public string UIGV2Cell1Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F3' cell equals 'F3'
        /// </summary>
        public string UIF3CellText = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F3' cell equals 'F3'
        /// </summary>
        public string UIF3Cell1Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F3' cell equals 'F3'
        /// </summary>
        public string UIF3Cell2Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F3' cell equals 'F3'
        /// </summary>
        public string UIF3Cell3Text = "F3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F3' cell equals 'F3'
        /// </summary>
        public string UIF3Cell4Text = "F3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFreeCodesAdded'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckFreeCodesAddedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
        /// </summary>
        public string UIF2CellValueAsString = "PlanShift (F2)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
        /// </summary>
        public string UIF2Cell1ValueAsString = "PlanShift (F2)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
        /// </summary>
        public string UIF2Cell2ValueAsString = "PlanShift (F2)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
        /// </summary>
        public string UIF1CellValueAsString = "PlanShift (F1)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
        /// </summary>
        public string UIF1Cell1ValueAsString = "PlanShift (F1)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
        /// </summary>
        public string UIF1Cell2ValueAsString = "PlanShift (F1)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
        /// </summary>
        public string UIF2Cell3ValueAsString = "PlanShift (F2)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
        /// </summary>
        public string UIF2Cell4ValueAsString = "PlanShift (F2)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
        /// </summary>
        public string UIF2Cell5ValueAsString = "PlanShift (F2)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
        /// </summary>
        public string UIF1Cell3ValueAsString = "PlanShift (F1)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
        /// </summary>
        public string UIF1Cell4ValueAsString = "PlanShift (F1)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
        /// </summary>
        public string UIF1Cell5ValueAsString = "PlanShift (F1)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
        /// </summary>
        public string UIF2Cell6ValueAsString = "PlanShift (F2)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
        /// </summary>
        public string UIF2Cell7ValueAsString = "PlanShift (F2)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F2' cell equals 'PlanShift (F2)'
        /// </summary>
        public string UIF2Cell8ValueAsString = "PlanShift (F2)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
        /// </summary>
        public string UIF1Cell6ValueAsString = "PlanShift (F1)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
        /// </summary>
        public string UIF1Cell7ValueAsString = "PlanShift (F1)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'PlanShift (F1)'
        /// </summary>
        public string UIF1Cell8ValueAsString = "PlanShift (F1)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckInsertButton_Step_10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckInsertButton_Step_10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'Sett inn' RibbonBaseButtonItem equals 'True'
        /// </summary>
        public bool UISettinnRibbonBaseButtonItemChecked = true;
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV (5010)' RibbonItem equals 'BV (5010)'
        /// </summary>
        public string UIBV5010RibbonItemText = "BV (5010)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckMessage_Step_39'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckMessage_Step_39ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Planen er endret. Vil du lagre endringer før du fo...' label equals 'Planen er endret. Vil du lagre endringer før du fortsetter?'
        /// </summary>
        public string UIPlanenerendretVildulTextName = "Planen er endret. Vil du lagre endringer før du fortsetter?";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckMessage_Step_8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckMessage_Step_8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'eMessage' text box equals 'Du må gjøre ferdig endringene for den aktive cellen før du forlater redigeringsmodus!'
        /// </summary>
        public string UIEMessageEditValueAsString = "Du må gjøre ferdig endringene for den aktive cellen før du forlater redigeringsmo" +
            "dus!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOkDisabled_Step_23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOkDisabled_Step_23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Ok' button equals 'False'
        /// </summary>
        public bool UIOKButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRegStatusMessage_Step_23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRegStatusMessage_Step_23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Antall minutter er ugyldig.' cell equals 'Antall minutter er ugyldig.'
        /// </summary>
        public string UIAntallminuttererugylCellText = "Antall minutter er ugyldig.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Antall minutter må være fra 1 til 539.' cell equals 'Antall minutter må være fra 1 til 539.'
        /// </summary>
        public string UIAntallminuttermåværeCellText = "Antall minutter må være fra 1 til 539.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckReplacedShifts_Step_37'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckReplacedShifts_Step_37ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV3'
        /// </summary>
        public string UIItemCell23Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'N1'
        /// </summary>
        public string UIGV1Cell7Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV3'
        /// </summary>
        public string UIItemCell24Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'N1'
        /// </summary>
        public string UIItemCell29Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV3'
        /// </summary>
        public string UIItemCell25Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'N1'
        /// </summary>
        public string UIGV2Cell2Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'BV3'
        /// </summary>
        public string UIA3Cell1Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'N1'
        /// </summary>
        public string UIGV2Cell3Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell12Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1CellText = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell13Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1Cell1Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell14Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1Cell2Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell15Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1Cell3Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'BV3'
        /// </summary>
        public string UIGV1Cell9Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'N1'
        /// </summary>
        public string UIT1Cell7Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV3'
        /// </summary>
        public string UIItemCell40Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'N1'
        /// </summary>
        public string UIT1Cell8Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'BV3'
        /// </summary>
        public string UIGV2Cell4Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'N1'
        /// </summary>
        public string UIT1Cell9Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'BV3'
        /// </summary>
        public string UIGV2Cell5Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'N1'
        /// </summary>
        public string UIT1Cell10Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell16Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1Cell4Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell17Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1Cell5Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell18Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1Cell6Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell19Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1Cell7Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell20Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1Cell8Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell21Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1Cell9Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell22Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1Cell10Text = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell23Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N1' cell equals 'N1'
        /// </summary>
        public string UIN1Cell11Text = "N1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSaveDisabled_Step_21'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSaveDisabled_Step_21ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Ok' button equals 'False'
        /// </summary>
        public bool UIOKButtonEnabled = false;
        
        /// <summary>
        /// Verify that the 'Text' property of 'lnkDetail' PopupEdit equals '1 meldinger.'
        /// </summary>
        public string UILnkDetailPopupEditText = "1 meldinger.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSErrorMessage_Step_16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSErrorMessage_Step_16ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ErrorText' property of '[Row]1[Column]RosterCell_12' text box equals 'Vaktkode L kan ikke brukes på denne dagen. Vakten vil ikke bli iverksatt.'
        /// </summary>
        public string UIRow1ColumnRosterCellEdit3ErrorText = "Vaktkode L kan ikke brukes på denne dagen. Vakten vil ikke bli iverksatt.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShift_Step_27'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShift_Step_27ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'D1'
        /// </summary>
        public string UIItemCellText = "D1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D2' cell equals 'D2'
        /// </summary>
        public string UID2CellText = "D2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'D3'
        /// </summary>
        public string UID3CellText = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1CellText = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell9Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A1' cell equals 'A1'
        /// </summary>
        public string UIA1CellText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'A3'
        /// </summary>
        public string UIA3CellText = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell9Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'N2'
        /// </summary>
        public string UIItemCell1Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'N2'
        /// </summary>
        public string UIN2Cell1Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'N2'
        /// </summary>
        public string UIItemCell11Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell10Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell3Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell3Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'KK1'
        /// </summary>
        public string UIItemCell2Text = "KK1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell13Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'KK2'
        /// </summary>
        public string UIItemCell12Text = "KK2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell14Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK4' cell equals 'KK4'
        /// </summary>
        public string UIKK4CellText = "KK4";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell6Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell6Text = "F1";
        
        /// <summary>
        /// Verify that the 'ClassName' property of cell equals 'GridControlCell'
        /// </summary>
        public string UIItemCell3ClassName = "GridControlCell";
        
        /// <summary>
        /// Verify that the 'ClassName' property of 'BV' cell equals 'GridControlCell'
        /// </summary>
        public string UIBVCellClassName = "GridControlCell";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'N2'
        /// </summary>
        public string UIN2Cell2Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'N2'
        /// </summary>
        public string UIN2Cell3Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell15Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2CellText = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1CellText = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'KK1'
        /// </summary>
        public string UIItemCell8Text = "KK1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals ''
        /// </summary>
        public string UILCellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals 'KK2'
        /// </summary>
        public string UILCell1Text = "KK2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals ''
        /// </summary>
        public string UILCell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'KK4'
        /// </summary>
        public string UIItemCell7Text = "KK4";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell9Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals 'F1'
        /// </summary>
        public string UILCell3Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D1' cell equals 'D1'
        /// </summary>
        public string UID1CellText = "D1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D2' cell equals 'D2'
        /// </summary>
        public string UID2Cell1Text = "D2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'D3'
        /// </summary>
        public string UID3Cell1Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell1Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell10Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'A1'
        /// </summary>
        public string UIF2Cell7Text = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'A3'
        /// </summary>
        public string UIF1Cell7Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK1' cell equals 'KK1'
        /// </summary>
        public string UIKK1CellText = "KK1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell16Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'KK2'
        /// </summary>
        public string UIBVCell3Text = "KK2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals ''
        /// </summary>
        public string UIBVCell4Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'KK4'
        /// </summary>
        public string UIBVCell5Text = "KK4";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell1Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell1Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D1' cell equals 'D1'
        /// </summary>
        public string UID1Cell1Text = "D1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D2' cell equals 'D2'
        /// </summary>
        public string UID2Cell2Text = "D2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'D3'
        /// </summary>
        public string UID3Cell2Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell2Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell11Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'A1'
        /// </summary>
        public string UIF2Cell4Text = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'A3'
        /// </summary>
        public string UIF1Cell4Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell17Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'N2'
        /// </summary>
        public string UIN2Cell4Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'N2'
        /// </summary>
        public string UIN2Cell5Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'N2'
        /// </summary>
        public string UIN2Cell6Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell18Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'F2'
        /// </summary>
        public string UIItemCell5Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'F1'
        /// </summary>
        public string UIBVCell1Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D1' cell equals 'D1'
        /// </summary>
        public string UID1Cell2Text = "D1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'D2'
        /// </summary>
        public string UIItemCell6Text = "D2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'D3'
        /// </summary>
        public string UID3Cell3Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell3Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell12Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'A1'
        /// </summary>
        public string UIF2Cell2Text = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'A3'
        /// </summary>
        public string UIF1Cell2Text = "A3";
        
        /// <summary>
        /// Verify that the 'ClassName' property of 'BV' cell equals 'GridControlCell'
        /// </summary>
        public string UIBVCell6ClassName = "GridControlCell";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'N2'
        /// </summary>
        public string UIBVCell7Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'N2'
        /// </summary>
        public string UIBVCell8Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'N2'
        /// </summary>
        public string UIBVCell9Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell4Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell5Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell5Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK1' cell equals 'KK1'
        /// </summary>
        public string UIKK1Cell1Text = "KK1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell19Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK2' cell equals 'KK2'
        /// </summary>
        public string UIKK2CellText = "KK2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell20Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK4' cell equals 'KK4'
        /// </summary>
        public string UIKK4Cell1Text = "KK4";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell8Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell8Text = "F1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftCodePattern_Step_38'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftCodePattern_Step_38ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'GV1'
        /// </summary>
        public string UIF1CellText = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'GV1'
        /// </summary>
        public string UIItemCell8Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals ''
        /// </summary>
        public string UILCellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals 'GV2'
        /// </summary>
        public string UILCell1Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals 'GV2'
        /// </summary>
        public string UILCell2Text = "GV2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftCodePatternAdded_Step_43'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftCodePatternAdded_Step_43ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'D2' cell equals 'BV3'
        /// </summary>
        public string UID2CellText = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'BV3'
        /// </summary>
        public string UID3CellText = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'BV3'
        /// </summary>
        public string UIGV1CellText = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'BV3'
        /// </summary>
        public string UIF1Cell9Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'A3'
        /// </summary>
        public string UIItemCell10Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'D3'
        /// </summary>
        public string UIF2Cell3Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'A3'
        /// </summary>
        public string UIF1Cell3Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'GV1'
        /// </summary>
        public string UIItemCell2Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'GV1'
        /// </summary>
        public string UIItemCell13Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'GV2'
        /// </summary>
        public string UIItemCell14Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK4' cell equals 'GV2'
        /// </summary>
        public string UIKK4CellText = "GV2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftcodes_Step_11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftcodes_Step_11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'Sett inn' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UISettinnRibbonBaseButtonItemChecked = false;
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV'
        /// </summary>
        public string UIItemCell3Text = "BV";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'BV'
        /// </summary>
        public string UIBVCellText = "BV";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'BV'
        /// </summary>
        public string UIBVCell6Text = "BV";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'BV'
        /// </summary>
        public string UIBVCell7Text = "BV";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'BV'
        /// </summary>
        public string UIBVCell8Text = "BV";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'BV'
        /// </summary>
        public string UIBVCell9Text = "BV";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV'
        /// </summary>
        public string UIItemCell4Text = "BV";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'BV'
        /// </summary>
        public string UIBVCell3Text = "BV";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'BV'
        /// </summary>
        public string UIBVCell4Text = "BV";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'BV'
        /// </summary>
        public string UIBVCell5Text = "BV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftcodes_Step_12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftcodes_Step_12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV'
        /// </summary>
        public string UIItemCell5Text = "BV";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'BV'
        /// </summary>
        public string UIBVCell1Text = "BV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftcodes_Step_13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftcodes_Step_13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell5Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals ''
        /// </summary>
        public string UIBVCell1Text = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftcodes_Step_14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftcodes_Step_14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV'
        /// </summary>
        public string UIItemCell3Text = "BV";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'BV'
        /// </summary>
        public string UIBVCellText = "BV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftcodes_Step_15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftcodes_Step_15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell3Text = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'BV' cell equals 'NewPlanShift (Empty)'
        /// </summary>
        public string UIBVCellValueAsString = "NewPlanShift (Empty)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftcodes_Step_19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftcodes_Step_19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'N2'
        /// </summary>
        public string UIBVCell3Text = "N2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftcodes_Step_20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftcodes_Step_20ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'A3'
        /// </summary>
        public string UIBVCell4Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'A3'
        /// </summary>
        public string UIBVCell5Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'A3'
        /// </summary>
        public string UIBVCell6Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'A3'
        /// </summary>
        public string UIBVCell7Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'A3'
        /// </summary>
        public string UIBVCell8Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'A3'
        /// </summary>
        public string UIBVCell9Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'A3'
        /// </summary>
        public string UIItemCell4Text = "A3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftCodesAdded_Step_44'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftCodesAdded_Step_44ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'F3' cell equals 'GV1'
        /// </summary>
        public string UIF3CellText = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell10Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell46Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2Cell6Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2Cell7Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell47Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell48Text = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftCodesAdded_Step_45'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftCodesAdded_Step_45ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'GV1'
        /// </summary>
        public string UIItemCell3Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'GV1'
        /// </summary>
        public string UIBVCellText = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals ''
        /// </summary>
        public string UIN2Cell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'GV2'
        /// </summary>
        public string UIN2Cell3Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'GV2'
        /// </summary>
        public string UIItemCell15Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals ''
        /// </summary>
        public string UIF2CellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals ''
        /// </summary>
        public string UIF1CellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell8Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals 'BV3'
        /// </summary>
        public string UILCellText = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals 'BV3'
        /// </summary>
        public string UILCell1Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals 'BV3'
        /// </summary>
        public string UILCell2Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV3'
        /// </summary>
        public string UIItemCell7Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals ''
        /// </summary>
        public string UIF2Cell9Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'L' cell equals ''
        /// </summary>
        public string UILCell3Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D1' cell equals ''
        /// </summary>
        public string UID1CellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D2' cell equals ''
        /// </summary>
        public string UID2Cell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals ''
        /// </summary>
        public string UID3Cell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals ''
        /// </summary>
        public string UIGV1Cell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'A3'
        /// </summary>
        public string UIF1Cell10Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'D3'
        /// </summary>
        public string UIF2Cell7Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'A3'
        /// </summary>
        public string UIF1Cell7Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F3' cell equals 'GV1'
        /// </summary>
        public string UIF3Cell1Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell11Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell49Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2Cell8Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2Cell9Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell50Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell51Text = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftCodesAdded_Step_46'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftCodesAdded_Step_46ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'N2'
        /// </summary>
        public string UIItemCell17Text = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'N2'
        /// </summary>
        public string UIN2Cell4Text = "N2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftCodesAdded_Step_47'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftCodesAdded_Step_47ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'D1' cell equals 'GV1'
        /// </summary>
        public string UID1Cell2Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'GV1'
        /// </summary>
        public string UIItemCell6Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV2'
        /// </summary>
        public string UIGV1Cell3Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'GV2'
        /// </summary>
        public string UIF1Cell12Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'GV1'
        /// </summary>
        public string UIBVCell6Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'GV1'
        /// </summary>
        public string UIBVCell7Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'GV2'
        /// </summary>
        public string UIBVCell9Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'GV2'
        /// </summary>
        public string UIItemCell4Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV3'
        /// </summary>
        public string UIItemCell19Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK2' cell equals 'BV3'
        /// </summary>
        public string UIKK2CellText = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV3'
        /// </summary>
        public string UIItemCell20Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK4' cell equals 'BV3'
        /// </summary>
        public string UIKK4Cell1Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'A3'
        /// </summary>
        public string UIA3Cell7Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'D3'
        /// </summary>
        public string UID3Cell7Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'A3'
        /// </summary>
        public string UIA3Cell8Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'A3'
        /// </summary>
        public string UIA3Cell1Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'D3'
        /// </summary>
        public string UID3Cell4Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'A3'
        /// </summary>
        public string UIA3Cell2Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'GV1'
        /// </summary>
        public string UIItemCell22Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'GV1'
        /// </summary>
        public string UIBV3CellText = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'GV2'
        /// </summary>
        public string UIBV3Cell2Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'GV2'
        /// </summary>
        public string UIBV3Cell3Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell4Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell5Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2CellText = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2Cell1Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell24Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell25Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell26Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell27Text = "BV3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftExtended_Step_24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftExtended_Step_24ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'N2'
        /// </summary>
        public string UIN2CellText = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of '02.01.2024 22:30 - 03.01.2024 16:29,' cell equals '02.01.2024 22:30 - 03.01.2024 16:29, '
        /// </summary>
        public string UIItem0201202422300301CellText = "02.01.2024 22:30 - 03.01.2024 16:29, ";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Vakten er utvidet i slutten med 539 minutter' cell equals 'Vakten er utvidet i slutten med 539 minutter'
        /// </summary>
        public string UIVaktenerutvidetislutCellText = "Vakten er utvidet i slutten med 539 minutter";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftExtended_Step_25'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftExtended_Step_25ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'N2'
        /// </summary>
        public string UIN2CellText = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of '02.01.2024 22:30 - 03.01.2024 16:29,' cell equals '02.01.2024 21:00 - 03.01.2024 07:30, '
        /// </summary>
        public string UIItem0201202422300301CellText = "02.01.2024 21:00 - 03.01.2024 07:30, ";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Vakten er utvidet i slutten med 539 minutter' cell equals 'Vakten er utvidet i starten med 90 minutter'
        /// </summary>
        public string UIVaktenerutvidetislutCellText = "Vakten er utvidet i starten med 90 minutter";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftExtended_Step_26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftExtended_Step_26ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'N2'
        /// </summary>
        public string UIN2CellText = "N2";
        
        /// <summary>
        /// Verify that the 'Text' property of '02.01.2024 22:30 - 03.01.2024 16:29,' cell equals '02.01.2024 22:30 - 03.01.2024 07:30, '
        /// </summary>
        public string UIItem0201202422300301CellText = "02.01.2024 22:30 - 03.01.2024 07:30, ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftReduced_Step_22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftReduced_Step_22ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Vakten er forkortet i starten med 1 minutter' cell equals 'Vakten er forkortet i starten med 1 minutter'
        /// </summary>
        public string UIVaktenerforkortetistCellText = "Vakten er forkortet i starten med 1 minutter";
        
        /// <summary>
        /// Verify that the 'Text' property of '7,48' cell equals '7,48'
        /// </summary>
        public string UIItem748CellText = "7,48";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShifts_Step_28'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShifts_Step_28ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'KK1' cell equals 'GV1'
        /// </summary>
        public string UIKK1CellText = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'GV1'
        /// </summary>
        public string UIItemCell16Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals ''
        /// </summary>
        public string UIBVCell3Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'GV2'
        /// </summary>
        public string UIBVCell4Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'GV2'
        /// </summary>
        public string UIBVCell5Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell1Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell1Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D1' cell equals ''
        /// </summary>
        public string UID1Cell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D2' cell equals ''
        /// </summary>
        public string UID2Cell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals ''
        /// </summary>
        public string UID3Cell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals ''
        /// </summary>
        public string UIGV1Cell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'A3'
        /// </summary>
        public string UIF1Cell11Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'D3'
        /// </summary>
        public string UIF2Cell4Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'A3'
        /// </summary>
        public string UIF1Cell4Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell17Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'BV3'
        /// </summary>
        public string UIN2Cell4Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'BV3'
        /// </summary>
        public string UIN2Cell5Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N2' cell equals 'BV3'
        /// </summary>
        public string UIN2Cell6Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV3'
        /// </summary>
        public string UIItemCell18Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell5Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals ''
        /// </summary>
        public string UIBVCell1Text = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShifts_Step_30_2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShifts_Step_30_2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'D1' cell equals ''
        /// </summary>
        public string UID1Cell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'BV3'
        /// </summary>
        public string UIItemCell6Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'BV3'
        /// </summary>
        public string UID3Cell3Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'BV3'
        /// </summary>
        public string UIGV1Cell3Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'BV3'
        /// </summary>
        public string UIF1Cell12Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals ''
        /// </summary>
        public string UIF2Cell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals ''
        /// </summary>
        public string UIF1Cell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'GV1'
        /// </summary>
        public string UIBVCell6Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'GV1'
        /// </summary>
        public string UIBVCell7Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals ''
        /// </summary>
        public string UIBVCell8Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV' cell equals 'GV2'
        /// </summary>
        public string UIBVCell9Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'GV2'
        /// </summary>
        public string UIItemCell4Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell5Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell5Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK1' cell equals ''
        /// </summary>
        public string UIKK1Cell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell19Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK2' cell equals ''
        /// </summary>
        public string UIKK2CellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell20Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KK4' cell equals 'A3'
        /// </summary>
        public string UIKK4Cell1Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'D3'
        /// </summary>
        public string UIF2Cell8Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'A3'
        /// </summary>
        public string UIF1Cell8Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell21Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell22Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell23Text = "";
        
        /// <summary>
        /// Verify that the 'ColumnName' property of cell equals 'RosterCell_2'
        /// </summary>
        public string UIItemCell24ColumnName = "RosterCell_2";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell25Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'A3'
        /// </summary>
        public string UIA3Cell1Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'D3'
        /// </summary>
        public string UID3Cell4Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'A3'
        /// </summary>
        public string UIA3Cell2Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell22Text1 = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3CellText = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell1Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell2Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell3Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell26Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell27Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell4Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell5Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell28Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2CellText = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2Cell1Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell10Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell13Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell6Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell7Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell29Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2Cell2Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2Cell3Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell11Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell14Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell30Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell31Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell32Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell33Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'A3'
        /// </summary>
        public string UIA3Cell3Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'D3'
        /// </summary>
        public string UID3Cell5Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'A3'
        /// </summary>
        public string UIA3Cell4Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell34Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell4Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell5Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell6Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell7Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell35Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell36Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell37Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell8Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell9Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell10Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BV3' cell equals 'BV3'
        /// </summary>
        public string UIBV3Cell11Text = "BV3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell38Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell39Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell8Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell9Text = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell40Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2Cell4Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV2' cell equals 'GV2'
        /// </summary>
        public string UIGV2Cell5Text = "GV2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F2' cell equals 'F2'
        /// </summary>
        public string UIF2Cell12Text = "F2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell15Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell41Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell42Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell43Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell44Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'A3'
        /// </summary>
        public string UIA3Cell5Text = "A3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'D3'
        /// </summary>
        public string UID3Cell6Text = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A3' cell equals 'A3'
        /// </summary>
        public string UIA3Cell6Text = "A3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckShiftsLocked_Step_48'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckShiftsLocked_Step_48ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Lås' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UILåsRibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'Lås opp' RibbonBaseButtonItem equals 'True'
        /// </summary>
        public bool UILåsoppRibbonBaseButtonItemVisible = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Lås opp' RibbonBaseButtonItem equals 'True'
        /// </summary>
        public bool UILåsoppRibbonBaseButtonItemEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckT1Shifts_Step_33'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckT1Shifts_Step_33ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'T1'
        /// </summary>
        public string UIItemCell45Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1CellText = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell1Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell2Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell3Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell4Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell5Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell6Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell7Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell8Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell9Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell10Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell11Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell12Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell13Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell14Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell15Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell16Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell17Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell18Text = "T1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'T1' cell equals 'T1'
        /// </summary>
        public string UIT1Cell19Text = "T1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWarnings_Step_17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckWarnings_Step_17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersen, Astrid' cell equals 'Andersen, Astrid'
        /// </summary>
        public string UIAndersenAstridCell1Text = "Andersen, Astrid";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Vaktkode L kan ikke brukes på denne dagen. Vakten vil ikke bli iverksatt.' cell equals 'Vaktkode L kan ikke brukes på denne dagen. Vakten vil ikke bli iverksatt.'
        /// </summary>
        public string UIVaktkodeLkanikkebrukCell1Text = "Vaktkode L kan ikke brukes på denne dagen. Vakten vil ikke bli iverksatt.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWeeksUnLocked_Step_50'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckWeeksUnLocked_Step_50ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Lås' RibbonBaseButtonItem equals 'True'
        /// </summary>
        public bool UILåsRibbonBaseButtonItemEnabled = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'Lås' RibbonBaseButtonItem equals 'True'
        /// </summary>
        public bool UILåsRibbonBaseButtonItemVisible = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Lås opp' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UILåsoppRibbonBaseButtonItemEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CopyPasteLine1_Step_45'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CopyPasteLine1_Step_45Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + l' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "l";
        
        /// <summary>
        /// Type 'Control + c' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys1 = "c";
        
        /// <summary>
        /// Type 'Control + v' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys2 = "v";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CopyPasteShiftCodes_Step_44'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CopyPasteShiftCodes_Step_44Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + c' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "c";
        
        /// <summary>
        /// Type 'Control + v' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys1 = "v";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeactivateInsertButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DeactivateInsertButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Tab}' in '[Row]3[Column]RosterCell_11' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeleteErrorLShifts_Step_18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DeleteErrorLShifts_Step_18Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Back}' in '[Row]1[Column]RosterCell_13' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit4SendKeys = "{Back}";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_13' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit4SendKeys1 = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditExtendeddShift_Step_25'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditExtendeddShift_Step_25Params
    {
        
        #region Fields
        /// <summary>
        /// Type '0' in 'rgrpEqualizationPlacement' RadioGroup
        /// </summary>
        public int UIRgrpEqualizationPlacRadioGroupSelectedIndex = 0;
        
        /// <summary>
        /// Type '90 [SelectionStart]0' in 'eNumber' text box
        /// </summary>
        public string UIENumberEditValueAsString = "90 [SelectionStart]0";
        
        /// <summary>
        /// Type '{Tab}' in 'eNumber' text box
        /// </summary>
        public string UIENumberEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExtendShift_Step_23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ExtendShift_Step_23Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'rgrpEqualizationMode' RadioGroup
        /// </summary>
        public int UIRgrpEqualizationModeRadioGroupSelectedIndex = 1;
        
        /// <summary>
        /// Type '1' in 'rgrpEqualizationPlacement' RadioGroup
        /// </summary>
        public int UIRgrpEqualizationPlacRadioGroupSelectedIndex = 1;
        
        /// <summary>
        /// Type '540' in 'eNumber' text box
        /// </summary>
        public string UIENumberEditValueAsString = "540";
        
        /// <summary>
        /// Type '{Tab}' in 'eNumber' text box
        /// </summary>
        public string UIENumberEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExtendShift_Step_24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ExtendShift_Step_24Params
    {
        
        #region Fields
        /// <summary>
        /// Type '539 [SelectionStart]0[SelectionLength]3' in 'eNumber' text box
        /// </summary>
        public string UIENumberEditValueAsString = "539 [SelectionStart]0[SelectionLength]3";
        
        /// <summary>
        /// Type '{Tab}' in 'eNumber' text box
        /// </summary>
        public string UIENumberEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertLShifts_Step_17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class InsertLShifts_Step_17Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'l{Tab}' in '[Row]1[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit11SendKeys = "l{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]1[Column]RosterCell_13' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit4SendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasteShifts_Step_47'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class PasteShifts_Step_47Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + v' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "v";
        
        /// <summary>
        /// Type 'Control + v' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys1 = "v";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ReduceShift_Step_22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ReduceShift_Step_22Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1 [SelectionStart]0[SelectionLength]1' in 'eNumber' text box
        /// </summary>
        public string UIENumberEditValueAsString = "1 [SelectionStart]0[SelectionLength]1";
        
        /// <summary>
        /// Type '{Tab}' in 'eNumber' text box
        /// </summary>
        public string UIENumberEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RemoveKK5InsertKK4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RemoveKK5InsertKK4Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + a' in '[Row]0[Column]RosterCell_16' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit41SendKeys = "a";
        
        /// <summary>
        /// Type '{Delete}' in '[Row]0[Column]RosterCell_16' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit41SendKeys1 = "{Delete}";
        
        /// <summary>
        /// Type 'kk4{Tab}' in '[Row]0[Column]RosterCell_16' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit41SendKeys2 = "kk4{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SeachHelpAndMainLines'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SeachHelpAndMainLinesParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'ceBaseLine' check box
        /// </summary>
        public bool UICeBaseLineCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectFiveEmployees_Step_42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectFiveEmployees_Step_42Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys1 = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys2 = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys3 = "{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectFourEmployees'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectFourEmployeesParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys1 = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys2 = "{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAbsenceAdded_Step_52'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAbsenceAdded_Step_52ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Lås' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UILåsRibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Lås opp' RibbonBaseButtonItem equals 'True'
        /// </summary>
        public bool UILåsoppRibbonBaseButtonItemEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAbsenceAdded_Step_53'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAbsenceAdded_Step_53ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '14.05.2024' cell equals '14.05.2024'
        /// </summary>
        public string UIItem14052024CellText = "14.05.2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '7.5' cell equals '7.5'
        /// </summary>
        public string UIItem75CellText = "7.5";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeggtilansatteWindow : DXWindow
    {
        
        public UILeggtilansatteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Legg til ansatte";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UISelectDepartmentEmplCustom UISelectDepartmentEmplCustom
        {
            get
            {
                if ((this.mUISelectDepartmentEmplCustom == null))
                {
                    this.mUISelectDepartmentEmplCustom = new UISelectDepartmentEmplCustom(this);
                }
                return this.mUISelectDepartmentEmplCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISelectDepartmentEmplCustom mUISelectDepartmentEmplCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectDepartmentEmplCustom : DXTestControl
    {
        
        public UISelectDepartmentEmplCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SelectDepartmentEmployeesView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SelectDepartmentEmployeesView";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentContainerClient UIPcContentContainerClient
        {
            get
            {
                if ((this.mUIPcContentContainerClient == null))
                {
                    this.mUIPcContentContainerClient = new UIPcContentContainerClient(this);
                }
                return this.mUIPcContentContainerClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentContainerClient mUIPcContentContainerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentContainerClient : DXTestControl
    {
        
        public UIPcContentContainerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContentContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIGcDepartmentEmployeeTable UIGcDepartmentEmployeeTable
        {
            get
            {
                if ((this.mUIGcDepartmentEmployeeTable == null))
                {
                    this.mUIGcDepartmentEmployeeTable = new UIGcDepartmentEmployeeTable(this);
                }
                return this.mUIGcDepartmentEmployeeTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDepartmentEmployeeTable mUIGcDepartmentEmployeeTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDepartmentEmployeeTable : DXGrid
    {
        
        public UIGcDepartmentEmployeeTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXCell UIAndersenAndersCell
        {
            get
            {
                if ((this.mUIAndersenAndersCell == null))
                {
                    this.mUIAndersenAndersCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAndersenAndersCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]0[Column]colE" +
                        "mployee";
                    this.mUIAndersenAndersCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAndersenAndersCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAndersenAndersCell;
            }
        }
        
        public DXCell UIBrøndboBjartmarCell
        {
            get
            {
                if ((this.mUIBrøndboBjartmarCell == null))
                {
                    this.mUIBrøndboBjartmarCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBrøndboBjartmarCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]1[Column]colE" +
                        "mployee";
                    this.mUIBrøndboBjartmarCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBrøndboBjartmarCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIBrøndboBjartmarCell;
            }
        }
        
        public DXCell UIHansenHenrietteCell
        {
            get
            {
                if ((this.mUIHansenHenrietteCell == null))
                {
                    this.mUIHansenHenrietteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHansenHenrietteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]3[Column]colE" +
                        "mployee";
                    this.mUIHansenHenrietteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHansenHenrietteCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIHansenHenrietteCell;
            }
        }
        
        public DXCell UIKuldeKalleCell
        {
            get
            {
                if ((this.mUIKuldeKalleCell == null))
                {
                    this.mUIKuldeKalleCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKuldeKalleCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]11[Column]col" +
                        "Employee";
                    this.mUIKuldeKalleCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKuldeKalleCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIKuldeKalleCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAndersenAndersCell;
        
        private DXCell mUIBrøndboBjartmarCell;
        
        private DXCell mUIHansenHenrietteCell;
        
        private DXCell mUIKuldeKalleCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsatteiarbeidsplanWindow : DXWindow
    {
        
        public UIAnsatteiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlOuterClient UIPanelControlOuterClient
        {
            get
            {
                if ((this.mUIPanelControlOuterClient == null))
                {
                    this.mUIPanelControlOuterClient = new UIPanelControlOuterClient(this);
                }
                return this.mUIPanelControlOuterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlOuterClient mUIPanelControlOuterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlOuterClient : DXTestControl
    {
        
        public UIPanelControlOuterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        
        public UIPanelControlRightClient UIPanelControlRightClient
        {
            get
            {
                if ((this.mUIPanelControlRightClient == null))
                {
                    this.mUIPanelControlRightClient = new UIPanelControlRightClient(this);
                }
                return this.mUIPanelControlRightClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient mUIPanelControlLeftClient;
        
        private UIPanelControlRightClient mUIPanelControlRightClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlLeftClient : DXTestControl
    {
        
        public UIPanelControlLeftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITreeListEmployeeTreeList UITreeListEmployeeTreeList
        {
            get
            {
                if ((this.mUITreeListEmployeeTreeList == null))
                {
                    this.mUITreeListEmployeeTreeList = new UITreeListEmployeeTreeList(this);
                }
                return this.mUITreeListEmployeeTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListEmployeeTreeList mUITreeListEmployeeTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListEmployeeTreeList : DXTreeList
    {
        
        public UITreeListEmployeeTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode1TreeListNode UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public UINode2TreeListNode UINode2TreeListNode
        {
            get
            {
                if ((this.mUINode2TreeListNode == null))
                {
                    this.mUINode2TreeListNode = new UINode2TreeListNode(this);
                }
                return this.mUINode2TreeListNode;
            }
        }
        
        public UINode7TreeListNode UINode7TreeListNode
        {
            get
            {
                if ((this.mUINode7TreeListNode == null))
                {
                    this.mUINode7TreeListNode = new UINode7TreeListNode(this);
                }
                return this.mUINode7TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode mUINode0TreeListNode;
        
        private UINode1TreeListNode mUINode1TreeListNode;
        
        private UINode2TreeListNode mUINode2TreeListNode;
        
        private UINode7TreeListNode mUINode7TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode : DXTreeListNode
    {
        
        public UINode0TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem1AndersenAndersTreeListCell
        {
            get
            {
                if ((this.mUIItem1AndersenAndersTreeListCell == null))
                {
                    this.mUIItem1AndersenAndersTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem1AndersenAndersTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem1AndersenAndersTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem1AndersenAndersTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem1AndersenAndersTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem1AndersenAndersTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode : DXTreeListNode
    {
        
        public UINode1TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem2AndersenAstridTreeListCell
        {
            get
            {
                if ((this.mUIItem2AndersenAstridTreeListCell == null))
                {
                    this.mUIItem2AndersenAstridTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem2AndersenAstridTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem2AndersenAstridTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem2AndersenAstridTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem2AndersenAstridTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem2AndersenAstridTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode2TreeListNode : DXTreeListNode
    {
        
        public UINode2TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem3BarskeBrynjulfTreeListCell
        {
            get
            {
                if ((this.mUIItem3BarskeBrynjulfTreeListCell == null))
                {
                    this.mUIItem3BarskeBrynjulfTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem3BarskeBrynjulfTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem3BarskeBrynjulfTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem3BarskeBrynjulfTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem3BarskeBrynjulfTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem3BarskeBrynjulfTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode7TreeListNode : DXTreeListNode
    {
        
        public UINode7TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node7";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode1 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode1(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode1 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode1 : DXTreeListNode
    {
        
        public UINode0TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem175TreeListCell
        {
            get
            {
                if ((this.mUIItem175TreeListCell == null))
                {
                    this.mUIItem175TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem175TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem175TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem175TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem175TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem175TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlRightClient : DXTestControl
    {
        
        public UIPanelControlRightClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlRight";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom1 UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom1(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom1 mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom1 : DXTestControl
    {
        
        public UIViewHostCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient1 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient1(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient1 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient1 : DXTestControl
    {
        
        public UIPcViewClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIEmployeeEditorsViewCustom UIEmployeeEditorsViewCustom
        {
            get
            {
                if ((this.mUIEmployeeEditorsViewCustom == null))
                {
                    this.mUIEmployeeEditorsViewCustom = new UIEmployeeEditorsViewCustom(this);
                }
                return this.mUIEmployeeEditorsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeEditorsViewCustom mUIEmployeeEditorsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeEditorsViewCustom : DXTestControl
    {
        
        public UIEmployeeEditorsViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeEditorsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeEditorsView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient1 UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient1(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient1 mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient1 : DXTestControl
    {
        
        public UIPcContentClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIXscContentScrollableControl UIXscContentScrollableControl
        {
            get
            {
                if ((this.mUIXscContentScrollableControl == null))
                {
                    this.mUIXscContentScrollableControl = new UIXscContentScrollableControl(this);
                }
                return this.mUIXscContentScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscContentScrollableControl mUIXscContentScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXscContentScrollableControl : DXScrollableControl
    {
        
        public UIXscContentScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGroupControlViewHostCustom UIGroupControlViewHostCustom
        {
            get
            {
                if ((this.mUIGroupControlViewHostCustom == null))
                {
                    this.mUIGroupControlViewHostCustom = new UIGroupControlViewHostCustom(this);
                }
                return this.mUIGroupControlViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlViewHostCustom mUIGroupControlViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlViewHostCustom : DXTestControl
    {
        
        public UIGroupControlViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControlViewHost";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGroupControlClient UIGroupControlClient
        {
            get
            {
                if ((this.mUIGroupControlClient == null))
                {
                    this.mUIGroupControlClient = new UIGroupControlClient(this);
                }
                return this.mUIGroupControlClient;
            }
        }
        
        public UIGroupControlClient1 UIGroupControlClient1
        {
            get
            {
                if ((this.mUIGroupControlClient1 == null))
                {
                    this.mUIGroupControlClient1 = new UIGroupControlClient1(this);
                }
                return this.mUIGroupControlClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlClient mUIGroupControlClient;
        
        private UIGroupControlClient1 mUIGroupControlClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlClient : DXTestControl
    {
        
        public UIGroupControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerEmploCustom UIEmployeeManagerEmploCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerEmploCustom == null))
                {
                    this.mUIEmployeeManagerEmploCustom = new UIEmployeeManagerEmploCustom(this);
                }
                return this.mUIEmployeeManagerEmploCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerEmploCustom mUIEmployeeManagerEmploCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerEmploCustom : DXTestControl
    {
        
        public UIEmployeeManagerEmploCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerEmployeeView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerEmployeeView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UILaghelgemønsterButton
        {
            get
            {
                if ((this.mUILaghelgemønsterButton == null))
                {
                    this.mUILaghelgemønsterButton = new DXButton(this);
                    #region Search Criteria
                    this.mUILaghelgemønsterButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonCreateWeekendPattern";
                    this.mUILaghelgemønsterButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
                    this.mUILaghelgemønsterButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUILaghelgemønsterButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUILaghelgemønsterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlClient1 : DXTestControl
    {
        
        public UIGroupControlClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[3]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerRevolCustom UIEmployeeManagerRevolCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerRevolCustom == null))
                {
                    this.mUIEmployeeManagerRevolCustom = new UIEmployeeManagerRevolCustom(this);
                }
                return this.mUIEmployeeManagerRevolCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerRevolCustom mUIEmployeeManagerRevolCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerRevolCustom : DXTestControl
    {
        
        public UIEmployeeManagerRevolCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerRevolvingDatesView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerRevolvingDatesView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIERevolveToDateTimeEdit
        {
            get
            {
                if ((this.mUIERevolveToDateTimeEdit == null))
                {
                    this.mUIERevolveToDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIERevolveToDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eRevolveTo";
                    this.mUIERevolveToDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIERevolveToDateTimeEdit.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIERevolveToDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIERevolveToDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIRcMenuRibbon UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        
        public UIDpnlVisualizationDockPanel UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        
        public UIPnlRosterPlanClient1 UIPnlRosterPlanClient1
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient1 == null))
                {
                    this.mUIPnlRosterPlanClient1 = new UIPnlRosterPlanClient1(this);
                }
                return this.mUIPnlRosterPlanClient1;
            }
        }
        
        public UIDpnlVisualizationDockPanel1 UIDpnlVisualizationDockPanel1
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel1 == null))
                {
                    this.mUIDpnlVisualizationDockPanel1 = new UIDpnlVisualizationDockPanel1(this);
                }
                return this.mUIDpnlVisualizationDockPanel1;
            }
        }
        
        public UIRosterPlanGridMenu1Custom UIRosterPlanGridMenu1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGridMenu1Custom == null))
                {
                    this.mUIRosterPlanGridMenu1Custom = new UIRosterPlanGridMenu1Custom(this);
                }
                return this.mUIRosterPlanGridMenu1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        
        private UIRcMenuRibbon mUIRcMenuRibbon;
        
        private UIDpnlVisualizationDockPanel mUIDpnlVisualizationDockPanel;
        
        private UIPnlRosterPlanClient1 mUIPnlRosterPlanClient1;
        
        private UIDpnlVisualizationDockPanel1 mUIDpnlVisualizationDockPanel1;
        
        private UIRosterPlanGridMenu1Custom mUIRosterPlanGridMenu1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXColumnHeader UIRosterCell_0ColumnHeader
        {
            get
            {
                if ((this.mUIRosterCell_0ColumnHeader == null))
                {
                    this.mUIRosterCell_0ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIRosterCell_0ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]RosterCell_0";
                    this.mUIRosterCell_0ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIRosterCell_0ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRosterCell_0ColumnHeader;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIF2Cell
        {
            get
            {
                if ((this.mUIF2Cell == null))
                {
                    this.mUIF2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_5";
                    this.mUIF2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell;
            }
        }
        
        public DXCell UIF2Cell1
        {
            get
            {
                if ((this.mUIF2Cell1 == null))
                {
                    this.mUIF2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_5";
                    this.mUIF2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell1;
            }
        }
        
        public DXCell UIF2Cell2
        {
            get
            {
                if ((this.mUIF2Cell2 == null))
                {
                    this.mUIF2Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_5";
                    this.mUIF2Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell2;
            }
        }
        
        public DXCell UIF1Cell
        {
            get
            {
                if ((this.mUIF1Cell == null))
                {
                    this.mUIF1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_6";
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell;
            }
        }
        
        public DXCell UIF1Cell1
        {
            get
            {
                if ((this.mUIF1Cell1 == null))
                {
                    this.mUIF1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_6";
                    this.mUIF1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell1;
            }
        }
        
        public DXCell UIF1Cell2
        {
            get
            {
                if ((this.mUIF1Cell2 == null))
                {
                    this.mUIF1Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_6";
                    this.mUIF1Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell2;
            }
        }
        
        public DXCell UIF2Cell3
        {
            get
            {
                if ((this.mUIF2Cell3 == null))
                {
                    this.mUIF2Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_12";
                    this.mUIF2Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell3;
            }
        }
        
        public DXCell UIF2Cell4
        {
            get
            {
                if ((this.mUIF2Cell4 == null))
                {
                    this.mUIF2Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_12";
                    this.mUIF2Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell4;
            }
        }
        
        public DXCell UIF2Cell5
        {
            get
            {
                if ((this.mUIF2Cell5 == null))
                {
                    this.mUIF2Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_12";
                    this.mUIF2Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell5;
            }
        }
        
        public DXCell UIF1Cell3
        {
            get
            {
                if ((this.mUIF1Cell3 == null))
                {
                    this.mUIF1Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_13";
                    this.mUIF1Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell3;
            }
        }
        
        public DXCell UIF1Cell4
        {
            get
            {
                if ((this.mUIF1Cell4 == null))
                {
                    this.mUIF1Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_13";
                    this.mUIF1Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell4;
            }
        }
        
        public DXCell UIF1Cell5
        {
            get
            {
                if ((this.mUIF1Cell5 == null))
                {
                    this.mUIF1Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_13";
                    this.mUIF1Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell5;
            }
        }
        
        public DXCell UIF2Cell6
        {
            get
            {
                if ((this.mUIF2Cell6 == null))
                {
                    this.mUIF2Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_19";
                    this.mUIF2Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell6;
            }
        }
        
        public DXCell UIF2Cell7
        {
            get
            {
                if ((this.mUIF2Cell7 == null))
                {
                    this.mUIF2Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_19";
                    this.mUIF2Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell7;
            }
        }
        
        public DXCell UIF2Cell8
        {
            get
            {
                if ((this.mUIF2Cell8 == null))
                {
                    this.mUIF2Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_19";
                    this.mUIF2Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell8;
            }
        }
        
        public DXCell UIF1Cell6
        {
            get
            {
                if ((this.mUIF1Cell6 == null))
                {
                    this.mUIF1Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_20";
                    this.mUIF1Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell6;
            }
        }
        
        public DXCell UIF1Cell7
        {
            get
            {
                if ((this.mUIF1Cell7 == null))
                {
                    this.mUIF1Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_20";
                    this.mUIF1Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell7;
            }
        }
        
        public DXCell UIF1Cell8
        {
            get
            {
                if ((this.mUIF1Cell8 == null))
                {
                    this.mUIF1Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_20";
                    this.mUIF1Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell8;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit == null))
                {
                    this.mUIRow0ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_1";
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit1;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_2";
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit2;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_3";
                    this.mUIRow0ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit3;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_4";
                    this.mUIRow0ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit4;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit5
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit5 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit5 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_5";
                    this.mUIRow0ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit5;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit6
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit6 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit6 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIRow0ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit6;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_8";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_10";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_3";
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_14";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit7
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit7 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit7 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_14";
                    this.mUIRow0ColumnRosterCellEdit7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit7;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_16";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit41
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit41 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit41 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit41.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_18";
                    this.mUIRow0ColumnRosterCellEdit41.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit41.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit41;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit == null))
                {
                    this.mUIRow1ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIBVCell
        {
            get
            {
                if ((this.mUIBVCell == null))
                {
                    this.mUIBVCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBVCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_1";
                    this.mUIBVCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBVCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBVCell;
            }
        }
        
        public DXCell UIBVCell3
        {
            get
            {
                if ((this.mUIBVCell3 == null))
                {
                    this.mUIBVCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBVCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_2";
                    this.mUIBVCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBVCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBVCell3;
            }
        }
        
        public DXCell UIBVCell4
        {
            get
            {
                if ((this.mUIBVCell4 == null))
                {
                    this.mUIBVCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBVCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_3";
                    this.mUIBVCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBVCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBVCell4;
            }
        }
        
        public DXCell UIBVCell5
        {
            get
            {
                if ((this.mUIBVCell5 == null))
                {
                    this.mUIBVCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBVCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_4";
                    this.mUIBVCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBVCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBVCell5;
            }
        }
        
        public DXCell UIBVCell6
        {
            get
            {
                if ((this.mUIBVCell6 == null))
                {
                    this.mUIBVCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBVCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_7";
                    this.mUIBVCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBVCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBVCell6;
            }
        }
        
        public DXCell UIBVCell7
        {
            get
            {
                if ((this.mUIBVCell7 == null))
                {
                    this.mUIBVCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBVCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_8";
                    this.mUIBVCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBVCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBVCell7;
            }
        }
        
        public DXCell UIBVCell8
        {
            get
            {
                if ((this.mUIBVCell8 == null))
                {
                    this.mUIBVCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBVCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_9";
                    this.mUIBVCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBVCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBVCell8;
            }
        }
        
        public DXCell UIBVCell9
        {
            get
            {
                if ((this.mUIBVCell9 == null))
                {
                    this.mUIBVCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBVCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_10";
                    this.mUIBVCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBVCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBVCell9;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_11";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit == null))
                {
                    this.mUIRow3ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_11";
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_19";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXCell UIBVCell1
        {
            get
            {
                if ((this.mUIBVCell1 == null))
                {
                    this.mUIBVCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBVCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_20";
                    this.mUIBVCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBVCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBVCell1;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_1";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_11";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_12";
                    this.mUIRow1ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit3;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit11
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit11 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit11 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIRow1ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit11;
            }
        }
        
        public DXCell UILCell
        {
            get
            {
                if ((this.mUILCell == null))
                {
                    this.mUILCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_8";
                    this.mUILCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILCell;
            }
        }
        
        public DXCell UILCell1
        {
            get
            {
                if ((this.mUILCell1 == null))
                {
                    this.mUILCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUILCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_9";
                    this.mUILCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILCell1;
            }
        }
        
        public DXCell UILCell2
        {
            get
            {
                if ((this.mUILCell2 == null))
                {
                    this.mUILCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUILCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_10";
                    this.mUILCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILCell2;
            }
        }
        
        public DXCell UILCell3
        {
            get
            {
                if ((this.mUILCell3 == null))
                {
                    this.mUILCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUILCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_13";
                    this.mUILCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILCell3;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_13";
                    this.mUIRow1ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit4;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXCell UIN2Cell
        {
            get
            {
                if ((this.mUIN2Cell == null))
                {
                    this.mUIN2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_2";
                    this.mUIN2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell;
            }
        }
        
        public DXCell UID2Cell
        {
            get
            {
                if ((this.mUID2Cell == null))
                {
                    this.mUID2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUID2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_1";
                    this.mUID2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID2Cell;
            }
        }
        
        public DXCell UID3Cell
        {
            get
            {
                if ((this.mUID3Cell == null))
                {
                    this.mUID3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUID3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_2";
                    this.mUID3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID3Cell;
            }
        }
        
        public DXCell UIGV1Cell
        {
            get
            {
                if ((this.mUIGV1Cell == null))
                {
                    this.mUIGV1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_3";
                    this.mUIGV1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell;
            }
        }
        
        public DXCell UIF1Cell9
        {
            get
            {
                if ((this.mUIF1Cell9 == null))
                {
                    this.mUIF1Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_4";
                    this.mUIF1Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell9;
            }
        }
        
        public DXCell UIA1Cell
        {
            get
            {
                if ((this.mUIA1Cell == null))
                {
                    this.mUIA1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIA1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_5";
                    this.mUIA1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA1Cell;
            }
        }
        
        public DXCell UIA3Cell
        {
            get
            {
                if ((this.mUIA3Cell == null))
                {
                    this.mUIA3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIA3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIA3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA3Cell;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_7";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXCell UIN2Cell1
        {
            get
            {
                if ((this.mUIN2Cell1 == null))
                {
                    this.mUIN2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_9";
                    this.mUIN2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell1;
            }
        }
        
        public DXCell UIItemCell10
        {
            get
            {
                if ((this.mUIItemCell10 == null))
                {
                    this.mUIItemCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_11";
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell10;
            }
        }
        
        public DXCell UIItemCell13
        {
            get
            {
                if ((this.mUIItemCell13 == null))
                {
                    this.mUIItemCell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_15";
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell13;
            }
        }
        
        public DXCell UIItemCell14
        {
            get
            {
                if ((this.mUIItemCell14 == null))
                {
                    this.mUIItemCell14 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_17";
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell14.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell14;
            }
        }
        
        public DXCell UIKK4Cell
        {
            get
            {
                if ((this.mUIKK4Cell == null))
                {
                    this.mUIKK4Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKK4Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_18";
                    this.mUIKK4Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKK4Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKK4Cell;
            }
        }
        
        public DXCell UIN2Cell2
        {
            get
            {
                if ((this.mUIN2Cell2 == null))
                {
                    this.mUIN2Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_2";
                    this.mUIN2Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell2;
            }
        }
        
        public DXCell UIN2Cell3
        {
            get
            {
                if ((this.mUIN2Cell3 == null))
                {
                    this.mUIN2Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_3";
                    this.mUIN2Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell3;
            }
        }
        
        public DXCell UIItemCell15
        {
            get
            {
                if ((this.mUIItemCell15 == null))
                {
                    this.mUIItemCell15 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_4";
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell15.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell15;
            }
        }
        
        public DXCell UIF2Cell9
        {
            get
            {
                if ((this.mUIF2Cell9 == null))
                {
                    this.mUIF2Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_12";
                    this.mUIF2Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell9;
            }
        }
        
        public DXCell UID1Cell
        {
            get
            {
                if ((this.mUID1Cell == null))
                {
                    this.mUID1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUID1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_14";
                    this.mUID1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID1Cell;
            }
        }
        
        public DXCell UID2Cell1
        {
            get
            {
                if ((this.mUID2Cell1 == null))
                {
                    this.mUID2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUID2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_15";
                    this.mUID2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID2Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID2Cell1;
            }
        }
        
        public DXCell UID3Cell1
        {
            get
            {
                if ((this.mUID3Cell1 == null))
                {
                    this.mUID3Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUID3Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_16";
                    this.mUID3Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID3Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID3Cell1;
            }
        }
        
        public DXCell UIGV1Cell1
        {
            get
            {
                if ((this.mUIGV1Cell1 == null))
                {
                    this.mUIGV1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_17";
                    this.mUIGV1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell1;
            }
        }
        
        public DXCell UIF1Cell10
        {
            get
            {
                if ((this.mUIF1Cell10 == null))
                {
                    this.mUIF1Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_18";
                    this.mUIF1Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell10;
            }
        }
        
        public DXCell UIKK1Cell
        {
            get
            {
                if ((this.mUIKK1Cell == null))
                {
                    this.mUIKK1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKK1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIKK1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKK1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKK1Cell;
            }
        }
        
        public DXCell UIItemCell16
        {
            get
            {
                if ((this.mUIItemCell16 == null))
                {
                    this.mUIItemCell16 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_1";
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell16.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell16;
            }
        }
        
        public DXCell UID1Cell1
        {
            get
            {
                if ((this.mUID1Cell1 == null))
                {
                    this.mUID1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUID1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_7";
                    this.mUID1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID1Cell1;
            }
        }
        
        public DXCell UID2Cell2
        {
            get
            {
                if ((this.mUID2Cell2 == null))
                {
                    this.mUID2Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUID2Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_8";
                    this.mUID2Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID2Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID2Cell2;
            }
        }
        
        public DXCell UID3Cell2
        {
            get
            {
                if ((this.mUID3Cell2 == null))
                {
                    this.mUID3Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUID3Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_9";
                    this.mUID3Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID3Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID3Cell2;
            }
        }
        
        public DXCell UIGV1Cell2
        {
            get
            {
                if ((this.mUIGV1Cell2 == null))
                {
                    this.mUIGV1Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_10";
                    this.mUIGV1Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell2;
            }
        }
        
        public DXCell UIF1Cell11
        {
            get
            {
                if ((this.mUIF1Cell11 == null))
                {
                    this.mUIF1Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_11";
                    this.mUIF1Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell11;
            }
        }
        
        public DXCell UIItemCell17
        {
            get
            {
                if ((this.mUIItemCell17 == null))
                {
                    this.mUIItemCell17 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_14";
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell17.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell17;
            }
        }
        
        public DXCell UIN2Cell4
        {
            get
            {
                if ((this.mUIN2Cell4 == null))
                {
                    this.mUIN2Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_15";
                    this.mUIN2Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell4;
            }
        }
        
        public DXCell UIN2Cell5
        {
            get
            {
                if ((this.mUIN2Cell5 == null))
                {
                    this.mUIN2Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_16";
                    this.mUIN2Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell5;
            }
        }
        
        public DXCell UIN2Cell6
        {
            get
            {
                if ((this.mUIN2Cell6 == null))
                {
                    this.mUIN2Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_17";
                    this.mUIN2Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell6;
            }
        }
        
        public DXCell UIItemCell18
        {
            get
            {
                if ((this.mUIItemCell18 == null))
                {
                    this.mUIItemCell18 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell18.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_18";
                    this.mUIItemCell18.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell18.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell18;
            }
        }
        
        public DXCell UID1Cell2
        {
            get
            {
                if ((this.mUID1Cell2 == null))
                {
                    this.mUID1Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUID1Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_0";
                    this.mUID1Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID1Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID1Cell2;
            }
        }
        
        public DXCell UID3Cell3
        {
            get
            {
                if ((this.mUID3Cell3 == null))
                {
                    this.mUID3Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUID3Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_2";
                    this.mUID3Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID3Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID3Cell3;
            }
        }
        
        public DXCell UIGV1Cell3
        {
            get
            {
                if ((this.mUIGV1Cell3 == null))
                {
                    this.mUIGV1Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_3";
                    this.mUIGV1Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell3;
            }
        }
        
        public DXCell UIF1Cell12
        {
            get
            {
                if ((this.mUIF1Cell12 == null))
                {
                    this.mUIF1Cell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_4";
                    this.mUIF1Cell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell12;
            }
        }
        
        public DXCell UIKK1Cell1
        {
            get
            {
                if ((this.mUIKK1Cell1 == null))
                {
                    this.mUIKK1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKK1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_14";
                    this.mUIKK1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKK1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKK1Cell1;
            }
        }
        
        public DXCell UIItemCell19
        {
            get
            {
                if ((this.mUIItemCell19 == null))
                {
                    this.mUIItemCell19 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell19.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_15";
                    this.mUIItemCell19.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell19.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell19;
            }
        }
        
        public DXCell UIKK2Cell
        {
            get
            {
                if ((this.mUIKK2Cell == null))
                {
                    this.mUIKK2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKK2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_16";
                    this.mUIKK2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKK2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKK2Cell;
            }
        }
        
        public DXCell UIItemCell20
        {
            get
            {
                if ((this.mUIItemCell20 == null))
                {
                    this.mUIItemCell20 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell20.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_17";
                    this.mUIItemCell20.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell20.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell20;
            }
        }
        
        public DXCell UIKK4Cell1
        {
            get
            {
                if ((this.mUIKK4Cell1 == null))
                {
                    this.mUIKK4Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKK4Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_18";
                    this.mUIKK4Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKK4Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKK4Cell1;
            }
        }
        
        public DXCell UIItemCell21
        {
            get
            {
                if ((this.mUIItemCell21 == null))
                {
                    this.mUIItemCell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_0";
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell21.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell21;
            }
        }
        
        public DXCell UIItemCell22
        {
            get
            {
                if ((this.mUIItemCell22 == null))
                {
                    this.mUIItemCell22 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_7";
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell22.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell22;
            }
        }
        
        public DXCell UIItemCell23
        {
            get
            {
                if ((this.mUIItemCell23 == null))
                {
                    this.mUIItemCell23 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell23.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_1";
                    this.mUIItemCell23.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell23.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell23;
            }
        }
        
        public DXCell UIItemCell24
        {
            get
            {
                if ((this.mUIItemCell24 == null))
                {
                    this.mUIItemCell24 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell24.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_2";
                    this.mUIItemCell24.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell24.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell24;
            }
        }
        
        public DXCell UIItemCell25
        {
            get
            {
                if ((this.mUIItemCell25 == null))
                {
                    this.mUIItemCell25 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell25.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_3";
                    this.mUIItemCell25.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell25.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell25;
            }
        }
        
        public DXCell UIA3Cell1
        {
            get
            {
                if ((this.mUIA3Cell1 == null))
                {
                    this.mUIA3Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA3Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_4";
                    this.mUIA3Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA3Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA3Cell1;
            }
        }
        
        public DXCell UID3Cell4
        {
            get
            {
                if ((this.mUID3Cell4 == null))
                {
                    this.mUID3Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUID3Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_5";
                    this.mUID3Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID3Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID3Cell4;
            }
        }
        
        public DXCell UIA3Cell2
        {
            get
            {
                if ((this.mUIA3Cell2 == null))
                {
                    this.mUIA3Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA3Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_6";
                    this.mUIA3Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA3Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA3Cell2;
            }
        }
        
        public DXCell UIBV3Cell
        {
            get
            {
                if ((this.mUIBV3Cell == null))
                {
                    this.mUIBV3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_8";
                    this.mUIBV3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell;
            }
        }
        
        public DXCell UIBV3Cell1
        {
            get
            {
                if ((this.mUIBV3Cell1 == null))
                {
                    this.mUIBV3Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_9";
                    this.mUIBV3Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell1;
            }
        }
        
        public DXCell UIBV3Cell2
        {
            get
            {
                if ((this.mUIBV3Cell2 == null))
                {
                    this.mUIBV3Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_10";
                    this.mUIBV3Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell2;
            }
        }
        
        public DXCell UIBV3Cell3
        {
            get
            {
                if ((this.mUIBV3Cell3 == null))
                {
                    this.mUIBV3Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_11";
                    this.mUIBV3Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell3;
            }
        }
        
        public DXCell UIItemCell26
        {
            get
            {
                if ((this.mUIItemCell26 == null))
                {
                    this.mUIItemCell26 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell26.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_12";
                    this.mUIItemCell26.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell26.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell26;
            }
        }
        
        public DXCell UIItemCell27
        {
            get
            {
                if ((this.mUIItemCell27 == null))
                {
                    this.mUIItemCell27 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell27.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_13";
                    this.mUIItemCell27.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell27.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell27;
            }
        }
        
        public DXCell UIGV1Cell4
        {
            get
            {
                if ((this.mUIGV1Cell4 == null))
                {
                    this.mUIGV1Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_14";
                    this.mUIGV1Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell4;
            }
        }
        
        public DXCell UIGV1Cell5
        {
            get
            {
                if ((this.mUIGV1Cell5 == null))
                {
                    this.mUIGV1Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_15";
                    this.mUIGV1Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell5;
            }
        }
        
        public DXCell UIItemCell28
        {
            get
            {
                if ((this.mUIItemCell28 == null))
                {
                    this.mUIItemCell28 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell28.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_16";
                    this.mUIItemCell28.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell28.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell28;
            }
        }
        
        public DXCell UIGV2Cell
        {
            get
            {
                if ((this.mUIGV2Cell == null))
                {
                    this.mUIGV2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_17";
                    this.mUIGV2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV2Cell;
            }
        }
        
        public DXCell UIGV2Cell1
        {
            get
            {
                if ((this.mUIGV2Cell1 == null))
                {
                    this.mUIGV2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_18";
                    this.mUIGV2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV2Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV2Cell1;
            }
        }
        
        public DXCell UIF2Cell10
        {
            get
            {
                if ((this.mUIF2Cell10 == null))
                {
                    this.mUIF2Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_19";
                    this.mUIF2Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell10;
            }
        }
        
        public DXCell UIF1Cell13
        {
            get
            {
                if ((this.mUIF1Cell13 == null))
                {
                    this.mUIF1Cell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_20";
                    this.mUIF1Cell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell13;
            }
        }
        
        public DXCell UIGV1Cell6
        {
            get
            {
                if ((this.mUIGV1Cell6 == null))
                {
                    this.mUIGV1Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_0";
                    this.mUIGV1Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell6;
            }
        }
        
        public DXCell UIGV1Cell7
        {
            get
            {
                if ((this.mUIGV1Cell7 == null))
                {
                    this.mUIGV1Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_1";
                    this.mUIGV1Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell7;
            }
        }
        
        public DXCell UIItemCell29
        {
            get
            {
                if ((this.mUIItemCell29 == null))
                {
                    this.mUIItemCell29 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell29.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_2";
                    this.mUIItemCell29.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell29.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell29;
            }
        }
        
        public DXCell UIGV2Cell2
        {
            get
            {
                if ((this.mUIGV2Cell2 == null))
                {
                    this.mUIGV2Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV2Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_3";
                    this.mUIGV2Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV2Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV2Cell2;
            }
        }
        
        public DXCell UIGV2Cell3
        {
            get
            {
                if ((this.mUIGV2Cell3 == null))
                {
                    this.mUIGV2Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV2Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_4";
                    this.mUIGV2Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV2Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV2Cell3;
            }
        }
        
        public DXCell UIF2Cell11
        {
            get
            {
                if ((this.mUIF2Cell11 == null))
                {
                    this.mUIF2Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_5";
                    this.mUIF2Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell11;
            }
        }
        
        public DXCell UIF1Cell14
        {
            get
            {
                if ((this.mUIF1Cell14 == null))
                {
                    this.mUIF1Cell14 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell14.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_6";
                    this.mUIF1Cell14.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell14.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell14;
            }
        }
        
        public DXCell UIItemCell30
        {
            get
            {
                if ((this.mUIItemCell30 == null))
                {
                    this.mUIItemCell30 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell30.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_7";
                    this.mUIItemCell30.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell30.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell30;
            }
        }
        
        public DXCell UIItemCell31
        {
            get
            {
                if ((this.mUIItemCell31 == null))
                {
                    this.mUIItemCell31 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_8";
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell31.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell31;
            }
        }
        
        public DXCell UIItemCell32
        {
            get
            {
                if ((this.mUIItemCell32 == null))
                {
                    this.mUIItemCell32 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell32.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_9";
                    this.mUIItemCell32.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell32.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell32;
            }
        }
        
        public DXCell UIItemCell33
        {
            get
            {
                if ((this.mUIItemCell33 == null))
                {
                    this.mUIItemCell33 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell33.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_10";
                    this.mUIItemCell33.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell33.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell33;
            }
        }
        
        public DXCell UIA3Cell3
        {
            get
            {
                if ((this.mUIA3Cell3 == null))
                {
                    this.mUIA3Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA3Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_11";
                    this.mUIA3Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA3Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA3Cell3;
            }
        }
        
        public DXCell UID3Cell5
        {
            get
            {
                if ((this.mUID3Cell5 == null))
                {
                    this.mUID3Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUID3Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_12";
                    this.mUID3Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID3Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID3Cell5;
            }
        }
        
        public DXCell UIA3Cell4
        {
            get
            {
                if ((this.mUIA3Cell4 == null))
                {
                    this.mUIA3Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA3Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_13";
                    this.mUIA3Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA3Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA3Cell4;
            }
        }
        
        public DXCell UIItemCell34
        {
            get
            {
                if ((this.mUIItemCell34 == null))
                {
                    this.mUIItemCell34 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell34.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_14";
                    this.mUIItemCell34.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell34.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell34;
            }
        }
        
        public DXCell UIBV3Cell4
        {
            get
            {
                if ((this.mUIBV3Cell4 == null))
                {
                    this.mUIBV3Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_15";
                    this.mUIBV3Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell4;
            }
        }
        
        public DXCell UIBV3Cell5
        {
            get
            {
                if ((this.mUIBV3Cell5 == null))
                {
                    this.mUIBV3Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_16";
                    this.mUIBV3Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell5;
            }
        }
        
        public DXCell UIBV3Cell6
        {
            get
            {
                if ((this.mUIBV3Cell6 == null))
                {
                    this.mUIBV3Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_17";
                    this.mUIBV3Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell6;
            }
        }
        
        public DXCell UIBV3Cell7
        {
            get
            {
                if ((this.mUIBV3Cell7 == null))
                {
                    this.mUIBV3Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_18";
                    this.mUIBV3Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell7;
            }
        }
        
        public DXCell UIItemCell35
        {
            get
            {
                if ((this.mUIItemCell35 == null))
                {
                    this.mUIItemCell35 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell35.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_19";
                    this.mUIItemCell35.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell35.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell35;
            }
        }
        
        public DXCell UIItemCell36
        {
            get
            {
                if ((this.mUIItemCell36 == null))
                {
                    this.mUIItemCell36 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell36.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]RosterCell_20";
                    this.mUIItemCell36.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell36.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell36;
            }
        }
        
        public DXCell UIItemCell37
        {
            get
            {
                if ((this.mUIItemCell37 == null))
                {
                    this.mUIItemCell37 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell37.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_0";
                    this.mUIItemCell37.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell37.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell37;
            }
        }
        
        public DXCell UIBV3Cell8
        {
            get
            {
                if ((this.mUIBV3Cell8 == null))
                {
                    this.mUIBV3Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_1";
                    this.mUIBV3Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell8;
            }
        }
        
        public DXCell UIBV3Cell9
        {
            get
            {
                if ((this.mUIBV3Cell9 == null))
                {
                    this.mUIBV3Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_2";
                    this.mUIBV3Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell9;
            }
        }
        
        public DXCell UIBV3Cell10
        {
            get
            {
                if ((this.mUIBV3Cell10 == null))
                {
                    this.mUIBV3Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_3";
                    this.mUIBV3Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell10;
            }
        }
        
        public DXCell UIBV3Cell11
        {
            get
            {
                if ((this.mUIBV3Cell11 == null))
                {
                    this.mUIBV3Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_4";
                    this.mUIBV3Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell11;
            }
        }
        
        public DXCell UIItemCell38
        {
            get
            {
                if ((this.mUIItemCell38 == null))
                {
                    this.mUIItemCell38 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell38.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_5";
                    this.mUIItemCell38.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell38.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell38;
            }
        }
        
        public DXCell UIItemCell39
        {
            get
            {
                if ((this.mUIItemCell39 == null))
                {
                    this.mUIItemCell39 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell39.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_6";
                    this.mUIItemCell39.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell39.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell39;
            }
        }
        
        public DXCell UIGV1Cell8
        {
            get
            {
                if ((this.mUIGV1Cell8 == null))
                {
                    this.mUIGV1Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_7";
                    this.mUIGV1Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell8;
            }
        }
        
        public DXCell UIGV1Cell9
        {
            get
            {
                if ((this.mUIGV1Cell9 == null))
                {
                    this.mUIGV1Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_8";
                    this.mUIGV1Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell9;
            }
        }
        
        public DXCell UIItemCell40
        {
            get
            {
                if ((this.mUIItemCell40 == null))
                {
                    this.mUIItemCell40 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell40.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_9";
                    this.mUIItemCell40.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell40.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell40;
            }
        }
        
        public DXCell UIGV2Cell4
        {
            get
            {
                if ((this.mUIGV2Cell4 == null))
                {
                    this.mUIGV2Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV2Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_10";
                    this.mUIGV2Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV2Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV2Cell4;
            }
        }
        
        public DXCell UIGV2Cell5
        {
            get
            {
                if ((this.mUIGV2Cell5 == null))
                {
                    this.mUIGV2Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV2Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_11";
                    this.mUIGV2Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV2Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV2Cell5;
            }
        }
        
        public DXCell UIF2Cell12
        {
            get
            {
                if ((this.mUIF2Cell12 == null))
                {
                    this.mUIF2Cell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF2Cell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_12";
                    this.mUIF2Cell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF2Cell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF2Cell12;
            }
        }
        
        public DXCell UIF1Cell15
        {
            get
            {
                if ((this.mUIF1Cell15 == null))
                {
                    this.mUIF1Cell15 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell15.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_13";
                    this.mUIF1Cell15.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell15.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell15;
            }
        }
        
        public DXCell UIItemCell41
        {
            get
            {
                if ((this.mUIItemCell41 == null))
                {
                    this.mUIItemCell41 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell41.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_14";
                    this.mUIItemCell41.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell41.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell41;
            }
        }
        
        public DXCell UIItemCell42
        {
            get
            {
                if ((this.mUIItemCell42 == null))
                {
                    this.mUIItemCell42 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell42.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_15";
                    this.mUIItemCell42.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell42.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell42;
            }
        }
        
        public DXCell UIItemCell43
        {
            get
            {
                if ((this.mUIItemCell43 == null))
                {
                    this.mUIItemCell43 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell43.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_16";
                    this.mUIItemCell43.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell43.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell43;
            }
        }
        
        public DXCell UIItemCell44
        {
            get
            {
                if ((this.mUIItemCell44 == null))
                {
                    this.mUIItemCell44 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell44.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_17";
                    this.mUIItemCell44.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell44.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell44;
            }
        }
        
        public DXCell UIA3Cell5
        {
            get
            {
                if ((this.mUIA3Cell5 == null))
                {
                    this.mUIA3Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA3Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_18";
                    this.mUIA3Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA3Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA3Cell5;
            }
        }
        
        public DXCell UID3Cell6
        {
            get
            {
                if ((this.mUID3Cell6 == null))
                {
                    this.mUID3Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUID3Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_19";
                    this.mUID3Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID3Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID3Cell6;
            }
        }
        
        public DXCell UIA3Cell6
        {
            get
            {
                if ((this.mUIA3Cell6 == null))
                {
                    this.mUIA3Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA3Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]RosterCell_20";
                    this.mUIA3Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA3Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA3Cell6;
            }
        }
        
        public DXCell UIItemCell45
        {
            get
            {
                if ((this.mUIItemCell45 == null))
                {
                    this.mUIItemCell45 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell45.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_0";
                    this.mUIItemCell45.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell45.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell45;
            }
        }
        
        public DXTextEdit UIRow7ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow7ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow7ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow7ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]7[Column]RosterCell_0";
                    this.mUIRow7ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow7ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow7ColumnRosterCellEdit1;
            }
        }
        
        public DXTextEdit UIRow7ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow7ColumnRosterCellEdit == null))
                {
                    this.mUIRow7ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow7ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]7[Column]RosterCell_1";
                    this.mUIRow7ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow7ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow7ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIT1Cell
        {
            get
            {
                if ((this.mUIT1Cell == null))
                {
                    this.mUIT1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_1";
                    this.mUIT1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell;
            }
        }
        
        public DXCell UIT1Cell1
        {
            get
            {
                if ((this.mUIT1Cell1 == null))
                {
                    this.mUIT1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_2";
                    this.mUIT1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell1;
            }
        }
        
        public DXCell UIT1Cell2
        {
            get
            {
                if ((this.mUIT1Cell2 == null))
                {
                    this.mUIT1Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_3";
                    this.mUIT1Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell2;
            }
        }
        
        public DXCell UIT1Cell3
        {
            get
            {
                if ((this.mUIT1Cell3 == null))
                {
                    this.mUIT1Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_4";
                    this.mUIT1Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell3;
            }
        }
        
        public DXCell UIT1Cell4
        {
            get
            {
                if ((this.mUIT1Cell4 == null))
                {
                    this.mUIT1Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_5";
                    this.mUIT1Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell4;
            }
        }
        
        public DXCell UIT1Cell5
        {
            get
            {
                if ((this.mUIT1Cell5 == null))
                {
                    this.mUIT1Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_6";
                    this.mUIT1Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell5;
            }
        }
        
        public DXCell UIT1Cell6
        {
            get
            {
                if ((this.mUIT1Cell6 == null))
                {
                    this.mUIT1Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_7";
                    this.mUIT1Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell6;
            }
        }
        
        public DXCell UIT1Cell7
        {
            get
            {
                if ((this.mUIT1Cell7 == null))
                {
                    this.mUIT1Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_8";
                    this.mUIT1Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell7;
            }
        }
        
        public DXCell UIT1Cell8
        {
            get
            {
                if ((this.mUIT1Cell8 == null))
                {
                    this.mUIT1Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_9";
                    this.mUIT1Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell8;
            }
        }
        
        public DXCell UIT1Cell9
        {
            get
            {
                if ((this.mUIT1Cell9 == null))
                {
                    this.mUIT1Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_10";
                    this.mUIT1Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell9;
            }
        }
        
        public DXCell UIT1Cell10
        {
            get
            {
                if ((this.mUIT1Cell10 == null))
                {
                    this.mUIT1Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_11";
                    this.mUIT1Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell10;
            }
        }
        
        public DXCell UIT1Cell11
        {
            get
            {
                if ((this.mUIT1Cell11 == null))
                {
                    this.mUIT1Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_12";
                    this.mUIT1Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell11;
            }
        }
        
        public DXCell UIT1Cell12
        {
            get
            {
                if ((this.mUIT1Cell12 == null))
                {
                    this.mUIT1Cell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_13";
                    this.mUIT1Cell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell12;
            }
        }
        
        public DXCell UIT1Cell13
        {
            get
            {
                if ((this.mUIT1Cell13 == null))
                {
                    this.mUIT1Cell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_14";
                    this.mUIT1Cell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell13;
            }
        }
        
        public DXCell UIT1Cell14
        {
            get
            {
                if ((this.mUIT1Cell14 == null))
                {
                    this.mUIT1Cell14 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell14.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_15";
                    this.mUIT1Cell14.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell14.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell14;
            }
        }
        
        public DXCell UIT1Cell15
        {
            get
            {
                if ((this.mUIT1Cell15 == null))
                {
                    this.mUIT1Cell15 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell15.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_16";
                    this.mUIT1Cell15.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell15.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell15;
            }
        }
        
        public DXCell UIT1Cell16
        {
            get
            {
                if ((this.mUIT1Cell16 == null))
                {
                    this.mUIT1Cell16 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell16.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_17";
                    this.mUIT1Cell16.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell16.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell16;
            }
        }
        
        public DXCell UIT1Cell17
        {
            get
            {
                if ((this.mUIT1Cell17 == null))
                {
                    this.mUIT1Cell17 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell17.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_18";
                    this.mUIT1Cell17.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell17.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell17;
            }
        }
        
        public DXCell UIT1Cell18
        {
            get
            {
                if ((this.mUIT1Cell18 == null))
                {
                    this.mUIT1Cell18 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell18.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_19";
                    this.mUIT1Cell18.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell18.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell18;
            }
        }
        
        public DXCell UIT1Cell19
        {
            get
            {
                if ((this.mUIT1Cell19 == null))
                {
                    this.mUIT1Cell19 = new DXCell(this);
                    #region Search Criteria
                    this.mUIT1Cell19.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_20";
                    this.mUIT1Cell19.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIT1Cell19.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIT1Cell19;
            }
        }
        
        public DXCell UIBV3Cell12
        {
            get
            {
                if ((this.mUIBV3Cell12 == null))
                {
                    this.mUIBV3Cell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_1";
                    this.mUIBV3Cell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell12;
            }
        }
        
        public DXCell UIN1Cell
        {
            get
            {
                if ((this.mUIN1Cell == null))
                {
                    this.mUIN1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]11[Column]RosterCell_1";
                    this.mUIN1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell;
            }
        }
        
        public DXCell UIBV3Cell13
        {
            get
            {
                if ((this.mUIBV3Cell13 == null))
                {
                    this.mUIBV3Cell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_2";
                    this.mUIBV3Cell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell13;
            }
        }
        
        public DXCell UIN1Cell1
        {
            get
            {
                if ((this.mUIN1Cell1 == null))
                {
                    this.mUIN1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]11[Column]RosterCell_2";
                    this.mUIN1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell1;
            }
        }
        
        public DXCell UIBV3Cell14
        {
            get
            {
                if ((this.mUIBV3Cell14 == null))
                {
                    this.mUIBV3Cell14 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell14.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_3";
                    this.mUIBV3Cell14.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell14.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell14;
            }
        }
        
        public DXCell UIN1Cell2
        {
            get
            {
                if ((this.mUIN1Cell2 == null))
                {
                    this.mUIN1Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]11[Column]RosterCell_3";
                    this.mUIN1Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell2;
            }
        }
        
        public DXCell UIBV3Cell15
        {
            get
            {
                if ((this.mUIBV3Cell15 == null))
                {
                    this.mUIBV3Cell15 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell15.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_4";
                    this.mUIBV3Cell15.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell15.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell15;
            }
        }
        
        public DXCell UIN1Cell3
        {
            get
            {
                if ((this.mUIN1Cell3 == null))
                {
                    this.mUIN1Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]11[Column]RosterCell_4";
                    this.mUIN1Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell3;
            }
        }
        
        public DXCell UIBV3Cell16
        {
            get
            {
                if ((this.mUIBV3Cell16 == null))
                {
                    this.mUIBV3Cell16 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell16.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]RosterCell_8";
                    this.mUIBV3Cell16.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell16.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell16;
            }
        }
        
        public DXCell UIN1Cell4
        {
            get
            {
                if ((this.mUIN1Cell4 == null))
                {
                    this.mUIN1Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]13[Column]RosterCell_8";
                    this.mUIN1Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell4;
            }
        }
        
        public DXCell UIBV3Cell17
        {
            get
            {
                if ((this.mUIBV3Cell17 == null))
                {
                    this.mUIBV3Cell17 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell17.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]RosterCell_9";
                    this.mUIBV3Cell17.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell17.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell17;
            }
        }
        
        public DXCell UIN1Cell5
        {
            get
            {
                if ((this.mUIN1Cell5 == null))
                {
                    this.mUIN1Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]13[Column]RosterCell_9";
                    this.mUIN1Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell5;
            }
        }
        
        public DXCell UIBV3Cell18
        {
            get
            {
                if ((this.mUIBV3Cell18 == null))
                {
                    this.mUIBV3Cell18 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell18.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]RosterCell_10";
                    this.mUIBV3Cell18.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell18.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell18;
            }
        }
        
        public DXCell UIN1Cell6
        {
            get
            {
                if ((this.mUIN1Cell6 == null))
                {
                    this.mUIN1Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]13[Column]RosterCell_10";
                    this.mUIN1Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell6;
            }
        }
        
        public DXCell UIBV3Cell19
        {
            get
            {
                if ((this.mUIBV3Cell19 == null))
                {
                    this.mUIBV3Cell19 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell19.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]RosterCell_11";
                    this.mUIBV3Cell19.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell19.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell19;
            }
        }
        
        public DXCell UIN1Cell7
        {
            get
            {
                if ((this.mUIN1Cell7 == null))
                {
                    this.mUIN1Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]13[Column]RosterCell_11";
                    this.mUIN1Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell7;
            }
        }
        
        public DXCell UIBV3Cell20
        {
            get
            {
                if ((this.mUIBV3Cell20 == null))
                {
                    this.mUIBV3Cell20 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell20.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]RosterCell_15";
                    this.mUIBV3Cell20.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell20.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell20;
            }
        }
        
        public DXCell UIN1Cell8
        {
            get
            {
                if ((this.mUIN1Cell8 == null))
                {
                    this.mUIN1Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]9[Column]RosterCell_15";
                    this.mUIN1Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell8;
            }
        }
        
        public DXCell UIBV3Cell21
        {
            get
            {
                if ((this.mUIBV3Cell21 == null))
                {
                    this.mUIBV3Cell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]RosterCell_16";
                    this.mUIBV3Cell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell21.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell21;
            }
        }
        
        public DXCell UIN1Cell9
        {
            get
            {
                if ((this.mUIN1Cell9 == null))
                {
                    this.mUIN1Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]9[Column]RosterCell_16";
                    this.mUIN1Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell9;
            }
        }
        
        public DXCell UIBV3Cell22
        {
            get
            {
                if ((this.mUIBV3Cell22 == null))
                {
                    this.mUIBV3Cell22 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell22.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]RosterCell_17";
                    this.mUIBV3Cell22.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell22.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell22;
            }
        }
        
        public DXCell UIN1Cell10
        {
            get
            {
                if ((this.mUIN1Cell10 == null))
                {
                    this.mUIN1Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]9[Column]RosterCell_17";
                    this.mUIN1Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell10;
            }
        }
        
        public DXCell UIBV3Cell23
        {
            get
            {
                if ((this.mUIBV3Cell23 == null))
                {
                    this.mUIBV3Cell23 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell23.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]RosterCell_18";
                    this.mUIBV3Cell23.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell23.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell23;
            }
        }
        
        public DXCell UIN1Cell11
        {
            get
            {
                if ((this.mUIN1Cell11 == null))
                {
                    this.mUIN1Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN1Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]9[Column]RosterCell_18";
                    this.mUIN1Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN1Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN1Cell11;
            }
        }
        
        public DXCell UIF3Cell
        {
            get
            {
                if ((this.mUIF3Cell == null))
                {
                    this.mUIF3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_21";
                    this.mUIF3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell;
            }
        }
        
        public DXCell UIF3Cell1
        {
            get
            {
                if ((this.mUIF3Cell1 == null))
                {
                    this.mUIF3Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_21";
                    this.mUIF3Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell1;
            }
        }
        
        public DXCell UIF3Cell2
        {
            get
            {
                if ((this.mUIF3Cell2 == null))
                {
                    this.mUIF3Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_21";
                    this.mUIF3Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell2;
            }
        }
        
        public DXCell UIF3Cell3
        {
            get
            {
                if ((this.mUIF3Cell3 == null))
                {
                    this.mUIF3Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_21";
                    this.mUIF3Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell3;
            }
        }
        
        public DXCell UIF3Cell4
        {
            get
            {
                if ((this.mUIF3Cell4 == null))
                {
                    this.mUIF3Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_21";
                    this.mUIF3Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell4;
            }
        }
        
        public DXCell UIGV1Cell10
        {
            get
            {
                if ((this.mUIGV1Cell10 == null))
                {
                    this.mUIGV1Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_22";
                    this.mUIGV1Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell10;
            }
        }
        
        public DXCell UIItemCell46
        {
            get
            {
                if ((this.mUIItemCell46 == null))
                {
                    this.mUIItemCell46 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell46.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_23";
                    this.mUIItemCell46.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell46.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell46;
            }
        }
        
        public DXCell UIGV2Cell6
        {
            get
            {
                if ((this.mUIGV2Cell6 == null))
                {
                    this.mUIGV2Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV2Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_24";
                    this.mUIGV2Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV2Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV2Cell6;
            }
        }
        
        public DXCell UIGV2Cell7
        {
            get
            {
                if ((this.mUIGV2Cell7 == null))
                {
                    this.mUIGV2Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV2Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_25";
                    this.mUIGV2Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV2Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV2Cell7;
            }
        }
        
        public DXCell UIItemCell47
        {
            get
            {
                if ((this.mUIItemCell47 == null))
                {
                    this.mUIItemCell47 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell47.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_26";
                    this.mUIItemCell47.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell47.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell47;
            }
        }
        
        public DXCell UIItemCell48
        {
            get
            {
                if ((this.mUIItemCell48 == null))
                {
                    this.mUIItemCell48 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell48.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_27";
                    this.mUIItemCell48.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell48.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell48;
            }
        }
        
        public DXCell UIGV1Cell11
        {
            get
            {
                if ((this.mUIGV1Cell11 == null))
                {
                    this.mUIGV1Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_22";
                    this.mUIGV1Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell11;
            }
        }
        
        public DXCell UIItemCell49
        {
            get
            {
                if ((this.mUIItemCell49 == null))
                {
                    this.mUIItemCell49 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell49.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_23";
                    this.mUIItemCell49.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell49.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell49;
            }
        }
        
        public DXCell UIGV2Cell8
        {
            get
            {
                if ((this.mUIGV2Cell8 == null))
                {
                    this.mUIGV2Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV2Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_24";
                    this.mUIGV2Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV2Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV2Cell8;
            }
        }
        
        public DXCell UIGV2Cell9
        {
            get
            {
                if ((this.mUIGV2Cell9 == null))
                {
                    this.mUIGV2Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV2Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_25";
                    this.mUIGV2Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV2Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV2Cell9;
            }
        }
        
        public DXCell UIItemCell50
        {
            get
            {
                if ((this.mUIItemCell50 == null))
                {
                    this.mUIItemCell50 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell50.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_26";
                    this.mUIItemCell50.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell50.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell50;
            }
        }
        
        public DXCell UIItemCell51
        {
            get
            {
                if ((this.mUIItemCell51 == null))
                {
                    this.mUIItemCell51 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell51.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_27";
                    this.mUIItemCell51.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell51.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell51;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit == null))
                {
                    this.mUIRow2ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_14";
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow3ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_14";
                    this.mUIRow3ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIA3Cell7
        {
            get
            {
                if ((this.mUIA3Cell7 == null))
                {
                    this.mUIA3Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA3Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_25";
                    this.mUIA3Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA3Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA3Cell7;
            }
        }
        
        public DXCell UID3Cell7
        {
            get
            {
                if ((this.mUID3Cell7 == null))
                {
                    this.mUID3Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUID3Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_26";
                    this.mUID3Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID3Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID3Cell7;
            }
        }
        
        public DXCell UIA3Cell8
        {
            get
            {
                if ((this.mUIA3Cell8 == null))
                {
                    this.mUIA3Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA3Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_27";
                    this.mUIA3Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA3Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA3Cell8;
            }
        }
        
        public DXCell UIBV3Cell24
        {
            get
            {
                if ((this.mUIBV3Cell24 == null))
                {
                    this.mUIBV3Cell24 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell24.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_22";
                    this.mUIBV3Cell24.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell24.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell24;
            }
        }
        
        public DXCell UIBV3Cell25
        {
            get
            {
                if ((this.mUIBV3Cell25 == null))
                {
                    this.mUIBV3Cell25 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell25.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_23";
                    this.mUIBV3Cell25.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell25.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell25;
            }
        }
        
        public DXCell UIBV3Cell26
        {
            get
            {
                if ((this.mUIBV3Cell26 == null))
                {
                    this.mUIBV3Cell26 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell26.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_24";
                    this.mUIBV3Cell26.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell26.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell26;
            }
        }
        
        public DXCell UIBV3Cell27
        {
            get
            {
                if ((this.mUIBV3Cell27 == null))
                {
                    this.mUIBV3Cell27 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBV3Cell27.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_25";
                    this.mUIBV3Cell27.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBV3Cell27.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV3Cell27;
            }
        }
        #endregion
        
        #region Fields
        private DXColumnHeader mUIRosterCell_0ColumnHeader;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIF2Cell;
        
        private DXCell mUIF2Cell1;
        
        private DXCell mUIF2Cell2;
        
        private DXCell mUIF1Cell;
        
        private DXCell mUIF1Cell1;
        
        private DXCell mUIF1Cell2;
        
        private DXCell mUIF2Cell3;
        
        private DXCell mUIF2Cell4;
        
        private DXCell mUIF2Cell5;
        
        private DXCell mUIF1Cell3;
        
        private DXCell mUIF1Cell4;
        
        private DXCell mUIF1Cell5;
        
        private DXCell mUIF2Cell6;
        
        private DXCell mUIF2Cell7;
        
        private DXCell mUIF2Cell8;
        
        private DXCell mUIF1Cell6;
        
        private DXCell mUIF1Cell7;
        
        private DXCell mUIF1Cell8;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit1;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit2;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit3;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit4;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit5;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit6;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIItemCell11;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell2;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit7;
        
        private DXCell mUIItemCell12;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit41;
        
        private DXCell mUIItemCell3;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit;
        
        private DXCell mUIBVCell;
        
        private DXCell mUIBVCell3;
        
        private DXCell mUIBVCell4;
        
        private DXCell mUIBVCell5;
        
        private DXCell mUIBVCell6;
        
        private DXCell mUIBVCell7;
        
        private DXCell mUIBVCell8;
        
        private DXCell mUIBVCell9;
        
        private DXCell mUIItemCell4;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit;
        
        private DXCell mUIItemCell5;
        
        private DXCell mUIBVCell1;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell7;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit3;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit11;
        
        private DXCell mUILCell;
        
        private DXCell mUILCell1;
        
        private DXCell mUILCell2;
        
        private DXCell mUILCell3;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit4;
        
        private DXCell mUIItemCell8;
        
        private DXCell mUIN2Cell;
        
        private DXCell mUID2Cell;
        
        private DXCell mUID3Cell;
        
        private DXCell mUIGV1Cell;
        
        private DXCell mUIF1Cell9;
        
        private DXCell mUIA1Cell;
        
        private DXCell mUIA3Cell;
        
        private DXCell mUIItemCell9;
        
        private DXCell mUIN2Cell1;
        
        private DXCell mUIItemCell10;
        
        private DXCell mUIItemCell13;
        
        private DXCell mUIItemCell14;
        
        private DXCell mUIKK4Cell;
        
        private DXCell mUIN2Cell2;
        
        private DXCell mUIN2Cell3;
        
        private DXCell mUIItemCell15;
        
        private DXCell mUIF2Cell9;
        
        private DXCell mUID1Cell;
        
        private DXCell mUID2Cell1;
        
        private DXCell mUID3Cell1;
        
        private DXCell mUIGV1Cell1;
        
        private DXCell mUIF1Cell10;
        
        private DXCell mUIKK1Cell;
        
        private DXCell mUIItemCell16;
        
        private DXCell mUID1Cell1;
        
        private DXCell mUID2Cell2;
        
        private DXCell mUID3Cell2;
        
        private DXCell mUIGV1Cell2;
        
        private DXCell mUIF1Cell11;
        
        private DXCell mUIItemCell17;
        
        private DXCell mUIN2Cell4;
        
        private DXCell mUIN2Cell5;
        
        private DXCell mUIN2Cell6;
        
        private DXCell mUIItemCell18;
        
        private DXCell mUID1Cell2;
        
        private DXCell mUID3Cell3;
        
        private DXCell mUIGV1Cell3;
        
        private DXCell mUIF1Cell12;
        
        private DXCell mUIKK1Cell1;
        
        private DXCell mUIItemCell19;
        
        private DXCell mUIKK2Cell;
        
        private DXCell mUIItemCell20;
        
        private DXCell mUIKK4Cell1;
        
        private DXCell mUIItemCell21;
        
        private DXCell mUIItemCell22;
        
        private DXCell mUIItemCell23;
        
        private DXCell mUIItemCell24;
        
        private DXCell mUIItemCell25;
        
        private DXCell mUIA3Cell1;
        
        private DXCell mUID3Cell4;
        
        private DXCell mUIA3Cell2;
        
        private DXCell mUIBV3Cell;
        
        private DXCell mUIBV3Cell1;
        
        private DXCell mUIBV3Cell2;
        
        private DXCell mUIBV3Cell3;
        
        private DXCell mUIItemCell26;
        
        private DXCell mUIItemCell27;
        
        private DXCell mUIGV1Cell4;
        
        private DXCell mUIGV1Cell5;
        
        private DXCell mUIItemCell28;
        
        private DXCell mUIGV2Cell;
        
        private DXCell mUIGV2Cell1;
        
        private DXCell mUIF2Cell10;
        
        private DXCell mUIF1Cell13;
        
        private DXCell mUIGV1Cell6;
        
        private DXCell mUIGV1Cell7;
        
        private DXCell mUIItemCell29;
        
        private DXCell mUIGV2Cell2;
        
        private DXCell mUIGV2Cell3;
        
        private DXCell mUIF2Cell11;
        
        private DXCell mUIF1Cell14;
        
        private DXCell mUIItemCell30;
        
        private DXCell mUIItemCell31;
        
        private DXCell mUIItemCell32;
        
        private DXCell mUIItemCell33;
        
        private DXCell mUIA3Cell3;
        
        private DXCell mUID3Cell5;
        
        private DXCell mUIA3Cell4;
        
        private DXCell mUIItemCell34;
        
        private DXCell mUIBV3Cell4;
        
        private DXCell mUIBV3Cell5;
        
        private DXCell mUIBV3Cell6;
        
        private DXCell mUIBV3Cell7;
        
        private DXCell mUIItemCell35;
        
        private DXCell mUIItemCell36;
        
        private DXCell mUIItemCell37;
        
        private DXCell mUIBV3Cell8;
        
        private DXCell mUIBV3Cell9;
        
        private DXCell mUIBV3Cell10;
        
        private DXCell mUIBV3Cell11;
        
        private DXCell mUIItemCell38;
        
        private DXCell mUIItemCell39;
        
        private DXCell mUIGV1Cell8;
        
        private DXCell mUIGV1Cell9;
        
        private DXCell mUIItemCell40;
        
        private DXCell mUIGV2Cell4;
        
        private DXCell mUIGV2Cell5;
        
        private DXCell mUIF2Cell12;
        
        private DXCell mUIF1Cell15;
        
        private DXCell mUIItemCell41;
        
        private DXCell mUIItemCell42;
        
        private DXCell mUIItemCell43;
        
        private DXCell mUIItemCell44;
        
        private DXCell mUIA3Cell5;
        
        private DXCell mUID3Cell6;
        
        private DXCell mUIA3Cell6;
        
        private DXCell mUIItemCell45;
        
        private DXTextEdit mUIRow7ColumnRosterCellEdit1;
        
        private DXTextEdit mUIRow7ColumnRosterCellEdit;
        
        private DXCell mUIT1Cell;
        
        private DXCell mUIT1Cell1;
        
        private DXCell mUIT1Cell2;
        
        private DXCell mUIT1Cell3;
        
        private DXCell mUIT1Cell4;
        
        private DXCell mUIT1Cell5;
        
        private DXCell mUIT1Cell6;
        
        private DXCell mUIT1Cell7;
        
        private DXCell mUIT1Cell8;
        
        private DXCell mUIT1Cell9;
        
        private DXCell mUIT1Cell10;
        
        private DXCell mUIT1Cell11;
        
        private DXCell mUIT1Cell12;
        
        private DXCell mUIT1Cell13;
        
        private DXCell mUIT1Cell14;
        
        private DXCell mUIT1Cell15;
        
        private DXCell mUIT1Cell16;
        
        private DXCell mUIT1Cell17;
        
        private DXCell mUIT1Cell18;
        
        private DXCell mUIT1Cell19;
        
        private DXCell mUIBV3Cell12;
        
        private DXCell mUIN1Cell;
        
        private DXCell mUIBV3Cell13;
        
        private DXCell mUIN1Cell1;
        
        private DXCell mUIBV3Cell14;
        
        private DXCell mUIN1Cell2;
        
        private DXCell mUIBV3Cell15;
        
        private DXCell mUIN1Cell3;
        
        private DXCell mUIBV3Cell16;
        
        private DXCell mUIN1Cell4;
        
        private DXCell mUIBV3Cell17;
        
        private DXCell mUIN1Cell5;
        
        private DXCell mUIBV3Cell18;
        
        private DXCell mUIN1Cell6;
        
        private DXCell mUIBV3Cell19;
        
        private DXCell mUIN1Cell7;
        
        private DXCell mUIBV3Cell20;
        
        private DXCell mUIN1Cell8;
        
        private DXCell mUIBV3Cell21;
        
        private DXCell mUIN1Cell9;
        
        private DXCell mUIBV3Cell22;
        
        private DXCell mUIN1Cell10;
        
        private DXCell mUIBV3Cell23;
        
        private DXCell mUIN1Cell11;
        
        private DXCell mUIF3Cell;
        
        private DXCell mUIF3Cell1;
        
        private DXCell mUIF3Cell2;
        
        private DXCell mUIF3Cell3;
        
        private DXCell mUIF3Cell4;
        
        private DXCell mUIGV1Cell10;
        
        private DXCell mUIItemCell46;
        
        private DXCell mUIGV2Cell6;
        
        private DXCell mUIGV2Cell7;
        
        private DXCell mUIItemCell47;
        
        private DXCell mUIItemCell48;
        
        private DXCell mUIGV1Cell11;
        
        private DXCell mUIItemCell49;
        
        private DXCell mUIGV2Cell8;
        
        private DXCell mUIGV2Cell9;
        
        private DXCell mUIItemCell50;
        
        private DXCell mUIItemCell51;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit1;
        
        private DXCell mUIA3Cell7;
        
        private DXCell mUID3Cell7;
        
        private DXCell mUIA3Cell8;
        
        private DXCell mUIBV3Cell24;
        
        private DXCell mUIBV3Cell25;
        
        private DXCell mUIBV3Cell26;
        
        private DXCell mUIBV3Cell27;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable1 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable1(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable1 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable1 : DXGrid
    {
        
        public UIGcRosterPlanTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIHansenHenrietteCell
        {
            get
            {
                if ((this.mUIHansenHenrietteCell == null))
                {
                    this.mUIHansenHenrietteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHansenHenrietteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]EmployeeName";
                    this.mUIHansenHenrietteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHansenHenrietteCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHansenHenrietteCell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow7ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow7ColumnRosterCellEdit == null))
                {
                    this.mUIRow7ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow7ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]7[Column]RosterCell_0";
                    this.mUIRow7ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow7ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow7ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIN2Cell
        {
            get
            {
                if ((this.mUIN2Cell == null))
                {
                    this.mUIN2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_15";
                    this.mUIN2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_16";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIHansenHenrietteCell;
        
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow7ColumnRosterCellEdit;
        
        private DXCell mUIN2Cell;
        
        private DXCell mUIItemCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRcMenuRibbon : DXRibbon
    {
        
        public UIRcMenuRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpRosterPlanRibbonPage UIRpRosterPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpRosterPlanRibbonPage == null))
                {
                    this.mUIRpRosterPlanRibbonPage = new UIRpRosterPlanRibbonPage(this);
                }
                return this.mUIRpRosterPlanRibbonPage;
            }
        }
        
        public UIRpFilterRibbonPage UIRpFilterRibbonPage
        {
            get
            {
                if ((this.mUIRpFilterRibbonPage == null))
                {
                    this.mUIRpFilterRibbonPage = new UIRpFilterRibbonPage(this);
                }
                return this.mUIRpFilterRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpRosterPlanRibbonPage mUIRpRosterPlanRibbonPage;
        
        private UIRpFilterRibbonPage mUIRpFilterRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpRosterPlanRibbonPage : DXRibbonPage
    {
        
        public UIRpRosterPlanRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGrpInsertToolsRibbonPageGroup UIGrpInsertToolsRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpInsertToolsRibbonPageGroup == null))
                {
                    this.mUIGrpInsertToolsRibbonPageGroup = new UIGrpInsertToolsRibbonPageGroup(this);
                }
                return this.mUIGrpInsertToolsRibbonPageGroup;
            }
        }
        
        public UIGrpEditToolsRibbonPageGroup UIGrpEditToolsRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpEditToolsRibbonPageGroup == null))
                {
                    this.mUIGrpEditToolsRibbonPageGroup = new UIGrpEditToolsRibbonPageGroup(this);
                }
                return this.mUIGrpEditToolsRibbonPageGroup;
            }
        }
        
        public UIGrpFunctionsRibbonPageGroup UIGrpFunctionsRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpFunctionsRibbonPageGroup == null))
                {
                    this.mUIGrpFunctionsRibbonPageGroup = new UIGrpFunctionsRibbonPageGroup(this);
                }
                return this.mUIGrpFunctionsRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpInsertToolsRibbonPageGroup mUIGrpInsertToolsRibbonPageGroup;
        
        private UIGrpEditToolsRibbonPageGroup mUIGrpEditToolsRibbonPageGroup;
        
        private UIGrpFunctionsRibbonPageGroup mUIGrpFunctionsRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpInsertToolsRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpInsertToolsRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpInsertTools";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UISettinnRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUISettinnRibbonBaseButtonItem == null))
                {
                    this.mUISettinnRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUISettinnRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnInsert";
                    this.mUISettinnRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUISettinnRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISettinnRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonItem UIBV5010RibbonItem
        {
            get
            {
                if ((this.mUIBV5010RibbonItem == null))
                {
                    this.mUIBV5010RibbonItem = new DXRibbonItem(this);
                    #region Search Criteria
                    this.mUIBV5010RibbonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "lblInsertCode";
                    this.mUIBV5010RibbonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonItem";
                    this.mUIBV5010RibbonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBV5010RibbonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUISettinnRibbonBaseButtonItem;
        
        private DXRibbonItem mUIBV5010RibbonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpEditToolsRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpEditToolsRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpEditTools";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UILiminnRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUILiminnRibbonBaseButtonItem == null))
                {
                    this.mUILiminnRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUILiminnRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditPaste";
                    this.mUILiminnRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUILiminnRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILiminnRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIAngreRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIAngreRibbonBaseButtonItem == null))
                {
                    this.mUIAngreRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIAngreRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnUndo";
                    this.mUIAngreRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIAngreRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAngreRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UISlettRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUISlettRibbonBaseButtonItem == null))
                {
                    this.mUISlettRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditDelete";
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUISlettRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISlettRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUILiminnRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIAngreRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUISlettRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpFunctionsRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpFunctionsRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpFunctions";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIErstattvaktkoderRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIErstattvaktkoderRibbonBaseButtonItem == null))
                {
                    this.mUIErstattvaktkoderRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIErstattvaktkoderRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnReplaceShiftCodes";
                    this.mUIErstattvaktkoderRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIErstattvaktkoderRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIErstattvaktkoderRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UILeggtilutjevningRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUILeggtilutjevningRibbonBaseButtonItem == null))
                {
                    this.mUILeggtilutjevningRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUILeggtilutjevningRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEqualizingShiftAdd";
                    this.mUILeggtilutjevningRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUILeggtilutjevningRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILeggtilutjevningRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIRotermotvenstreRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIRotermotvenstreRibbonBaseButtonItem == null))
                {
                    this.mUIRotermotvenstreRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIRotermotvenstreRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnRotateForward";
                    this.mUIRotermotvenstreRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIRotermotvenstreRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRotermotvenstreRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UILåsRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUILåsRibbonBaseButtonItem == null))
                {
                    this.mUILåsRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUILåsRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnLockCells";
                    this.mUILåsRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUILåsRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILåsRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UILåsoppRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUILåsoppRibbonBaseButtonItem == null))
                {
                    this.mUILåsoppRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUILåsoppRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnUnlockCells";
                    this.mUILåsoppRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUILåsoppRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILåsoppRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIErstattvaktkoderRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUILeggtilutjevningRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIRotermotvenstreRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUILåsRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUILåsoppRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpFilterRibbonPage : DXRibbonPage
    {
        
        public UIRpFilterRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpgDisplayPeriodRibbonPageGroup UIRpgDisplayPeriodRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgDisplayPeriodRibbonPageGroup == null))
                {
                    this.mUIRpgDisplayPeriodRibbonPageGroup = new UIRpgDisplayPeriodRibbonPageGroup(this);
                }
                return this.mUIRpgDisplayPeriodRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgDisplayPeriodRibbonPageGroup mUIRpgDisplayPeriodRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpgDisplayPeriodRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgDisplayPeriodRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgDisplayPeriod";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIFremRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIFremRibbonBaseButtonItem == null))
                {
                    this.mUIFremRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIFremRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnForwards";
                    this.mUIFremRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIFremRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFremRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UITilbakeRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUITilbakeRibbonBaseButtonItem == null))
                {
                    this.mUITilbakeRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUITilbakeRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnBackwards";
                    this.mUITilbakeRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUITilbakeRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUITilbakeRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIFremRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUITilbakeRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlVisualizationDockPanel : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel3_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        
        public UITcSubtabsTabList UITcSubtabsTabList
        {
            get
            {
                if ((this.mUITcSubtabsTabList == null))
                {
                    this.mUITcSubtabsTabList = new UITcSubtabsTabList(this);
                }
                return this.mUITcSubtabsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList mUITcVisualizationTabList;
        
        private UITcSubtabsTabList mUITcSubtabsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcVisualizationTabList : DXTestControl
    {
        
        public UITcVisualizationTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITpValidationMessagesClient UITpValidationMessagesClient
        {
            get
            {
                if ((this.mUITpValidationMessagesClient == null))
                {
                    this.mUITpValidationMessagesClient = new UITpValidationMessagesClient(this);
                }
                return this.mUITpValidationMessagesClient;
            }
        }
        
        public UITpShiftDetailsClient UITpShiftDetailsClient
        {
            get
            {
                if ((this.mUITpShiftDetailsClient == null))
                {
                    this.mUITpShiftDetailsClient = new UITpShiftDetailsClient(this);
                }
                return this.mUITpShiftDetailsClient;
            }
        }
        
        public UITpAbsenceClient UITpAbsenceClient
        {
            get
            {
                if ((this.mUITpAbsenceClient == null))
                {
                    this.mUITpAbsenceClient = new UITpAbsenceClient(this);
                }
                return this.mUITpAbsenceClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpValidationMessagesClient mUITpValidationMessagesClient;
        
        private UITpShiftDetailsClient mUITpShiftDetailsClient;
        
        private UITpAbsenceClient mUITpAbsenceClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpValidationMessagesClient : DXTestControl
    {
        
        public UITpValidationMessagesClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl7Client UIGsPanelControl7Client
        {
            get
            {
                if ((this.mUIGsPanelControl7Client == null))
                {
                    this.mUIGsPanelControl7Client = new UIGsPanelControl7Client(this);
                }
                return this.mUIGsPanelControl7Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl7Client mUIGsPanelControl7Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl7Client : DXTestControl
    {
        
        public UIGsPanelControl7Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl7";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGridValidationMessagTable UIGridValidationMessagTable
        {
            get
            {
                if ((this.mUIGridValidationMessagTable == null))
                {
                    this.mUIGridValidationMessagTable = new UIGridValidationMessagTable(this);
                }
                return this.mUIGridValidationMessagTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridValidationMessagTable mUIGridValidationMessagTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridValidationMessagTable : DXGrid
    {
        
        public UIGridValidationMessagTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAndersenAstridCell
        {
            get
            {
                if ((this.mUIAndersenAstridCell == null))
                {
                    this.mUIAndersenAstridCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lFullname";
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAndersenAstridCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAndersenAstridCell;
            }
        }
        
        public DXCell UIVaktkodeLkanikkebrukCell
        {
            get
            {
                if ((this.mUIVaktkodeLkanikkebrukCell == null))
                {
                    this.mUIVaktkodeLkanikkebrukCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVaktkodeLkanikkebrukCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lDescription";
                    this.mUIVaktkodeLkanikkebrukCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVaktkodeLkanikkebrukCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIVaktkodeLkanikkebrukCell;
            }
        }
        
        public DXCell UIAndersenAstridCell1
        {
            get
            {
                if ((this.mUIAndersenAstridCell1 == null))
                {
                    this.mUIAndersenAstridCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIAndersenAstridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]20[Column]c" +
                        "olFullname";
                    this.mUIAndersenAstridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAndersenAstridCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAndersenAstridCell1;
            }
        }
        
        public DXCell UIVaktkodeLkanikkebrukCell1
        {
            get
            {
                if ((this.mUIVaktkodeLkanikkebrukCell1 == null))
                {
                    this.mUIVaktkodeLkanikkebrukCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIVaktkodeLkanikkebrukCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]20[Column]c" +
                        "olDescription";
                    this.mUIVaktkodeLkanikkebrukCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVaktkodeLkanikkebrukCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIVaktkodeLkanikkebrukCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAndersenAstridCell;
        
        private DXCell mUIVaktkodeLkanikkebrukCell;
        
        private DXCell mUIAndersenAstridCell1;
        
        private DXCell mUIVaktkodeLkanikkebrukCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpShiftDetailsClient : DXTestControl
    {
        
        public UITpShiftDetailsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpShiftDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcShiftDetailsTable UIGcShiftDetailsTable
        {
            get
            {
                if ((this.mUIGcShiftDetailsTable == null))
                {
                    this.mUIGcShiftDetailsTable = new UIGcShiftDetailsTable(this);
                }
                return this.mUIGcShiftDetailsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcShiftDetailsTable mUIGcShiftDetailsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcShiftDetailsTable : DXGrid
    {
        
        public UIGcShiftDetailsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIVaktenerforkortetistCell
        {
            get
            {
                if ((this.mUIVaktenerforkortetistCell == null))
                {
                    this.mUIVaktenerforkortetistCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVaktenerforkortetistCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]2[Column]gridColumnValue";
                    this.mUIVaktenerforkortetistCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVaktenerforkortetistCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIVaktenerforkortetistCell;
            }
        }
        
        public DXCell UIItem748Cell
        {
            get
            {
                if ((this.mUIItem748Cell == null))
                {
                    this.mUIItem748Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem748Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]4[Column]gridColumnValue";
                    this.mUIItem748Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem748Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem748Cell;
            }
        }
        
        public DXCell UIItem0201202422300301Cell
        {
            get
            {
                if ((this.mUIItem0201202422300301Cell == null))
                {
                    this.mUIItem0201202422300301Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0201202422300301Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]1[Column]gridColumnValue";
                    this.mUIItem0201202422300301Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0201202422300301Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0201202422300301Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIVaktenerforkortetistCell;
        
        private DXCell mUIItem748Cell;
        
        private DXCell mUIItem0201202422300301Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpAbsenceClient : DXTestControl
    {
        
        public UITpAbsenceClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpAbsence";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcAbsenceListTable UIGcAbsenceListTable
        {
            get
            {
                if ((this.mUIGcAbsenceListTable == null))
                {
                    this.mUIGcAbsenceListTable = new UIGcAbsenceListTable(this);
                }
                return this.mUIGcAbsenceListTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAbsenceListTable mUIGcAbsenceListTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAbsenceListTable : DXGrid
    {
        
        public UIGcAbsenceListTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIOlsenBrorCell
        {
            get
            {
                if ((this.mUIOlsenBrorCell == null))
                {
                    this.mUIOlsenBrorCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOlsenBrorCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcName";
                    this.mUIOlsenBrorCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOlsenBrorCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIOlsenBrorCell;
            }
        }
        
        public DXCell UIItem45Ferie5dgrukeCell
        {
            get
            {
                if ((this.mUIItem45Ferie5dgrukeCell == null))
                {
                    this.mUIItem45Ferie5dgrukeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem45Ferie5dgrukeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcAbsenceCode";
                    this.mUIItem45Ferie5dgrukeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem45Ferie5dgrukeCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem45Ferie5dgrukeCell;
            }
        }
        
        public DXCell UIItem06052024Cell
        {
            get
            {
                if ((this.mUIItem06052024Cell == null))
                {
                    this.mUIItem06052024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem06052024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcPlannedPeriodFrom";
                    this.mUIItem06052024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem06052024Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem06052024Cell;
            }
        }
        
        public DXCell UIItem12052024Cell
        {
            get
            {
                if ((this.mUIItem12052024Cell == null))
                {
                    this.mUIItem12052024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem12052024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcPlannedPeriodTo";
                    this.mUIItem12052024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem12052024Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem12052024Cell;
            }
        }
        
        public DXCell UIItem4Cell
        {
            get
            {
                if ((this.mUIItem4Cell == null))
                {
                    this.mUIItem4Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcPlannedAbsenceBank" +
                        "Value";
                    this.mUIItem4Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem4Cell;
            }
        }
        
        public DXCell UINilssonNisseCell
        {
            get
            {
                if ((this.mUINilssonNisseCell == null))
                {
                    this.mUINilssonNisseCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINilssonNisseCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcName";
                    this.mUINilssonNisseCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINilssonNisseCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINilssonNisseCell;
            }
        }
        
        public DXCell UIItem41FeriedagCell
        {
            get
            {
                if ((this.mUIItem41FeriedagCell == null))
                {
                    this.mUIItem41FeriedagCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem41FeriedagCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcAbsenceCode";
                    this.mUIItem41FeriedagCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem41FeriedagCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem41FeriedagCell;
            }
        }
        
        public DXCell UIItem14052024Cell
        {
            get
            {
                if ((this.mUIItem14052024Cell == null))
                {
                    this.mUIItem14052024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14052024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcPlannedPeriodFrom";
                    this.mUIItem14052024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14052024Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem14052024Cell;
            }
        }
        
        public DXCell UIItem14052024Cell1
        {
            get
            {
                if ((this.mUIItem14052024Cell1 == null))
                {
                    this.mUIItem14052024Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14052024Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcPlannedPeriodTo";
                    this.mUIItem14052024Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14052024Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem14052024Cell1;
            }
        }
        
        public DXCell UIItem1Cell
        {
            get
            {
                if ((this.mUIItem1Cell == null))
                {
                    this.mUIItem1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcPlannedAbsenceBank" +
                        "Value";
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIOlsenBrorCell;
        
        private DXCell mUIItem45Ferie5dgrukeCell;
        
        private DXCell mUIItem06052024Cell;
        
        private DXCell mUIItem12052024Cell;
        
        private DXCell mUIItem4Cell;
        
        private DXCell mUINilssonNisseCell;
        
        private DXCell mUIItem41FeriedagCell;
        
        private DXCell mUIItem14052024Cell;
        
        private DXCell mUIItem14052024Cell1;
        
        private DXCell mUIItem1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcSubtabsTabList : DXTestControl
    {
        
        public UITcSubtabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabs";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabControlViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewTabPageClient UIViewTabPageClient
        {
            get
            {
                if ((this.mUIViewTabPageClient == null))
                {
                    this.mUIViewTabPageClient = new UIViewTabPageClient(this);
                }
                return this.mUIViewTabPageClient;
            }
        }
        
        public UIViewTabPageClient1 UIViewTabPageClient1
        {
            get
            {
                if ((this.mUIViewTabPageClient1 == null))
                {
                    this.mUIViewTabPageClient1 = new UIViewTabPageClient1(this);
                }
                return this.mUIViewTabPageClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIViewTabPageClient mUIViewTabPageClient;
        
        private UIViewTabPageClient1 mUIViewTabPageClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient : DXTestControl
    {
        
        public UIViewTabPageClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIShiftDetailsViewCustom UIShiftDetailsViewCustom
        {
            get
            {
                if ((this.mUIShiftDetailsViewCustom == null))
                {
                    this.mUIShiftDetailsViewCustom = new UIShiftDetailsViewCustom(this);
                }
                return this.mUIShiftDetailsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIShiftDetailsViewCustom mUIShiftDetailsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIShiftDetailsViewCustom : DXTestControl
    {
        
        public UIShiftDetailsViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ShiftDetailsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ShiftDetailsView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcShiftDetailsTable1 UIGcShiftDetailsTable
        {
            get
            {
                if ((this.mUIGcShiftDetailsTable == null))
                {
                    this.mUIGcShiftDetailsTable = new UIGcShiftDetailsTable1(this);
                }
                return this.mUIGcShiftDetailsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcShiftDetailsTable1 mUIGcShiftDetailsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcShiftDetailsTable1 : DXGrid
    {
        
        public UIGcShiftDetailsTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIFraværstimeriukesumdCell
        {
            get
            {
                if ((this.mUIFraværstimeriukesumdCell == null))
                {
                    this.mUIFraværstimeriukesumdCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraværstimeriukesumdCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]1[Column]gridColumnKey";
                    this.mUIFraværstimeriukesumdCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraværstimeriukesumdCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraværstimeriukesumdCell;
            }
        }
        
        public DXCell UIItem75Cell
        {
            get
            {
                if ((this.mUIItem75Cell == null))
                {
                    this.mUIItem75Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem75Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]1[Column]gridColumnValue";
                    this.mUIItem75Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem75Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem75Cell;
            }
        }
        
        public DXCell UIItem14052024Cell
        {
            get
            {
                if ((this.mUIItem14052024Cell == null))
                {
                    this.mUIItem14052024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14052024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]0[Column]gridColumnValue";
                    this.mUIItem14052024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14052024Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem14052024Cell;
            }
        }
        
        public DXCell UIItem1305202422301405Cell
        {
            get
            {
                if ((this.mUIItem1305202422301405Cell == null))
                {
                    this.mUIItem1305202422301405Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1305202422301405Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]2[Column]gridColumnValue";
                    this.mUIItem1305202422301405Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1305202422301405Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1305202422301405Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIFraværstimeriukesumdCell;
        
        private DXCell mUIItem75Cell;
        
        private DXCell mUIItem14052024Cell;
        
        private DXCell mUIItem1305202422301405Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient1 : DXTestControl
    {
        
        public UIViewTabPageClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[5]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIAbsenceListViewCustom UIAbsenceListViewCustom
        {
            get
            {
                if ((this.mUIAbsenceListViewCustom == null))
                {
                    this.mUIAbsenceListViewCustom = new UIAbsenceListViewCustom(this);
                }
                return this.mUIAbsenceListViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIAbsenceListViewCustom mUIAbsenceListViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAbsenceListViewCustom : DXTestControl
    {
        
        public UIAbsenceListViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "AbsenceListView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AbsenceListView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcAbsenceListTable1 UIGcAbsenceListTable
        {
            get
            {
                if ((this.mUIGcAbsenceListTable == null))
                {
                    this.mUIGcAbsenceListTable = new UIGcAbsenceListTable1(this);
                }
                return this.mUIGcAbsenceListTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAbsenceListTable1 mUIGcAbsenceListTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAbsenceListTable1 : DXGrid
    {
        
        public UIGcAbsenceListTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UINilssonNisseCell
        {
            get
            {
                if ((this.mUINilssonNisseCell == null))
                {
                    this.mUINilssonNisseCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINilssonNisseCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcName";
                    this.mUINilssonNisseCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINilssonNisseCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINilssonNisseCell;
            }
        }
        
        public DXCell UIItem41FeriedagCell
        {
            get
            {
                if ((this.mUIItem41FeriedagCell == null))
                {
                    this.mUIItem41FeriedagCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem41FeriedagCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcAbsenceCode";
                    this.mUIItem41FeriedagCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem41FeriedagCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem41FeriedagCell;
            }
        }
        
        public DXCell UIItem14052024Cell
        {
            get
            {
                if ((this.mUIItem14052024Cell == null))
                {
                    this.mUIItem14052024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14052024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcPlannedPeriodFrom";
                    this.mUIItem14052024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14052024Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem14052024Cell;
            }
        }
        
        public DXCell UIItem14052024Cell1
        {
            get
            {
                if ((this.mUIItem14052024Cell1 == null))
                {
                    this.mUIItem14052024Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14052024Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcPlannedPeriodTo";
                    this.mUIItem14052024Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14052024Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem14052024Cell1;
            }
        }
        
        public DXCell UIOlsenBrorCell
        {
            get
            {
                if ((this.mUIOlsenBrorCell == null))
                {
                    this.mUIOlsenBrorCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOlsenBrorCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcName";
                    this.mUIOlsenBrorCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOlsenBrorCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIOlsenBrorCell;
            }
        }
        
        public DXCell UIItem45Ferie5dgrukeCell
        {
            get
            {
                if ((this.mUIItem45Ferie5dgrukeCell == null))
                {
                    this.mUIItem45Ferie5dgrukeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem45Ferie5dgrukeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcAbsenceCode";
                    this.mUIItem45Ferie5dgrukeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem45Ferie5dgrukeCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem45Ferie5dgrukeCell;
            }
        }
        
        public DXCell UIItem06052024Cell
        {
            get
            {
                if ((this.mUIItem06052024Cell == null))
                {
                    this.mUIItem06052024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem06052024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcPlannedPeriodFrom";
                    this.mUIItem06052024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem06052024Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem06052024Cell;
            }
        }
        
        public DXCell UIItem12052024Cell
        {
            get
            {
                if ((this.mUIItem12052024Cell == null))
                {
                    this.mUIItem12052024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem12052024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcPlannedPeriodTo";
                    this.mUIItem12052024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem12052024Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem12052024Cell;
            }
        }
        
        public DXCell UIItem4Cell
        {
            get
            {
                if ((this.mUIItem4Cell == null))
                {
                    this.mUIItem4Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcPlannedAbsenceBank" +
                        "Value";
                    this.mUIItem4Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem4Cell;
            }
        }
        
        public DXCell UIItem5010ArbeidsplanoCell
        {
            get
            {
                if ((this.mUIItem5010ArbeidsplanoCell == null))
                {
                    this.mUIItem5010ArbeidsplanoCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5010ArbeidsplanoCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcDepartment";
                    this.mUIItem5010ArbeidsplanoCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5010ArbeidsplanoCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5010ArbeidsplanoCell;
            }
        }
        
        public DXCell UIItem1Cell
        {
            get
            {
                if ((this.mUIItem1Cell == null))
                {
                    this.mUIItem1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcPlannedAbsenceBank" +
                        "Value";
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUINilssonNisseCell;
        
        private DXCell mUIItem41FeriedagCell;
        
        private DXCell mUIItem14052024Cell;
        
        private DXCell mUIItem14052024Cell1;
        
        private DXCell mUIOlsenBrorCell;
        
        private DXCell mUIItem45Ferie5dgrukeCell;
        
        private DXCell mUIItem06052024Cell;
        
        private DXCell mUIItem12052024Cell;
        
        private DXCell mUIItem4Cell;
        
        private DXCell mUIItem5010ArbeidsplanoCell;
        
        private DXCell mUIItem1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient1 : DXTestControl
    {
        
        public UIPnlRosterPlanClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanGrid1Custom1 UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom1(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanGrid1Custom1 mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom1 : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable2 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable2(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable2 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable2 : DXGrid
    {
        
        public UIGcRosterPlanTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIHansenHenrietteCell
        {
            get
            {
                if ((this.mUIHansenHenrietteCell == null))
                {
                    this.mUIHansenHenrietteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHansenHenrietteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]ColumnHandle1";
                    this.mUIHansenHenrietteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHansenHenrietteCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHansenHenrietteCell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIHansenHenrietteCell;
        
        private DXCell mUIItemCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlVisualizationDockPanel1 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom1 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom1(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom1 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel3_ContainerCustom1 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList1 UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList1(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList1 mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcVisualizationTabList1 : DXTestControl
    {
        
        public UITcVisualizationTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITpShiftDetailsClient1 UITpShiftDetailsClient
        {
            get
            {
                if ((this.mUITpShiftDetailsClient == null))
                {
                    this.mUITpShiftDetailsClient = new UITpShiftDetailsClient1(this);
                }
                return this.mUITpShiftDetailsClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpShiftDetailsClient1 mUITpShiftDetailsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpShiftDetailsClient1 : DXTestControl
    {
        
        public UITpShiftDetailsClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpShiftDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcShiftDetailsTable2 UIGcShiftDetailsTable
        {
            get
            {
                if ((this.mUIGcShiftDetailsTable == null))
                {
                    this.mUIGcShiftDetailsTable = new UIGcShiftDetailsTable2(this);
                }
                return this.mUIGcShiftDetailsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcShiftDetailsTable2 mUIGcShiftDetailsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcShiftDetailsTable2 : DXGrid
    {
        
        public UIGcShiftDetailsTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIN2Cell
        {
            get
            {
                if ((this.mUIN2Cell == null))
                {
                    this.mUIN2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]1[Column]gridColumnKey";
                    this.mUIN2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell;
            }
        }
        
        public DXCell UIItem0201202422300301Cell
        {
            get
            {
                if ((this.mUIItem0201202422300301Cell == null))
                {
                    this.mUIItem0201202422300301Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0201202422300301Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]1[Column]gridColumnValue";
                    this.mUIItem0201202422300301Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0201202422300301Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0201202422300301Cell;
            }
        }
        
        public DXCell UIVaktenerutvidetislutCell
        {
            get
            {
                if ((this.mUIVaktenerutvidetislutCell == null))
                {
                    this.mUIVaktenerutvidetislutCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVaktenerutvidetislutCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]2[Column]gridColumnValue";
                    this.mUIVaktenerutvidetislutCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVaktenerutvidetislutCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIVaktenerutvidetislutCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIN2Cell;
        
        private DXCell mUIItem0201202422300301Cell;
        
        private DXCell mUIVaktenerutvidetislutCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGridMenu1Custom : DXTestControl
    {
        
        public UIRosterPlanGridMenu1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGridMenu1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGridMenu";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRcMenuRibbon1 UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon1(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        #endregion
        
        #region Fields
        private UIRcMenuRibbon1 mUIRcMenuRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRcMenuRibbon1 : DXRibbon
    {
        
        public UIRcMenuRibbon1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpRosterPlanRibbonPage1 UIRpRosterPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpRosterPlanRibbonPage == null))
                {
                    this.mUIRpRosterPlanRibbonPage = new UIRpRosterPlanRibbonPage1(this);
                }
                return this.mUIRpRosterPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpRosterPlanRibbonPage1 mUIRpRosterPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpRosterPlanRibbonPage1 : DXRibbonPage
    {
        
        public UIRpRosterPlanRibbonPage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGrpFunctionsRibbonPageGroup1 UIGrpFunctionsRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpFunctionsRibbonPageGroup == null))
                {
                    this.mUIGrpFunctionsRibbonPageGroup = new UIGrpFunctionsRibbonPageGroup1(this);
                }
                return this.mUIGrpFunctionsRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpFunctionsRibbonPageGroup1 mUIGrpFunctionsRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpFunctionsRibbonPageGroup1 : DXRibbonPageGroup
    {
        
        public UIGrpFunctionsRibbonPageGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpFunctions";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UILåsRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUILåsRibbonBaseButtonItem == null))
                {
                    this.mUILåsRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUILåsRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnLockCells";
                    this.mUILåsRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUILåsRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILåsRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UILåsoppRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUILåsoppRibbonBaseButtonItem == null))
                {
                    this.mUILåsoppRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUILåsoppRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnUnlockCells";
                    this.mUILåsoppRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUILåsoppRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILåsoppRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUILåsRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUILåsoppRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT4003InformasjonWindow : DXWindow
    {
        
        public UIGT4003InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4003 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4003 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4003 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT3999InformasjonWindow : DXWindow
    {
        
        public UIGT3999InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-3999 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-3999 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIEMessageEdit
        {
            get
            {
                if ((this.mUIEMessageEdit == null))
                {
                    this.mUIEMessageEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIEMessageEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eMessage";
                    this.mUIEMessageEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSMemoEdit";
                    this.mUIEMessageEdit.WindowTitles.Add("GT-3999 - Informasjon");
                    #endregion
                }
                return this.mUIEMessageEdit;
            }
        }
        
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btOK";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("GT-3999 - Informasjon");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIEMessageEdit;
        
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT4001InformasjonWindow : DXWindow
    {
        
        public UIGT4001InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4001 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4001 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4001 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISøkogErstattWindow : DXWindow
    {
        
        public UISøkogErstattWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Søk og Erstatt";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Søk og Erstatt");
            #endregion
        }
        
        #region Properties
        public UIGrpFindClient UIGrpFindClient
        {
            get
            {
                if ((this.mUIGrpFindClient == null))
                {
                    this.mUIGrpFindClient = new UIGrpFindClient(this);
                }
                return this.mUIGrpFindClient;
            }
        }
        
        public UIGrpReplaceClient UIGrpReplaceClient
        {
            get
            {
                if ((this.mUIGrpReplaceClient == null))
                {
                    this.mUIGrpReplaceClient = new UIGrpReplaceClient(this);
                }
                return this.mUIGrpReplaceClient;
            }
        }
        
        public UIPnlButtonsClient UIPnlButtonsClient
        {
            get
            {
                if ((this.mUIPnlButtonsClient == null))
                {
                    this.mUIPnlButtonsClient = new UIPnlButtonsClient(this);
                }
                return this.mUIPnlButtonsClient;
            }
        }
        
        public UIGrpAreaClient UIGrpAreaClient
        {
            get
            {
                if ((this.mUIGrpAreaClient == null))
                {
                    this.mUIGrpAreaClient = new UIGrpAreaClient(this);
                }
                return this.mUIGrpAreaClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpFindClient mUIGrpFindClient;
        
        private UIGrpReplaceClient mUIGrpReplaceClient;
        
        private UIPnlButtonsClient mUIPnlButtonsClient;
        
        private UIGrpAreaClient mUIGrpAreaClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpFindClient : DXTestControl
    {
        
        public UIGrpFindClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpFind";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Søk og Erstatt");
            #endregion
        }
        
        #region Properties
        public DXComboBox UICbFromCodeComboBox
        {
            get
            {
                if ((this.mUICbFromCodeComboBox == null))
                {
                    this.mUICbFromCodeComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUICbFromCodeComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "cbFromCode";
                    this.mUICbFromCodeComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSImageComboBoxEdit";
                    this.mUICbFromCodeComboBox.WindowTitles.Add("Søk og Erstatt");
                    #endregion
                }
                return this.mUICbFromCodeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private DXComboBox mUICbFromCodeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpReplaceClient : DXTestControl
    {
        
        public UIGrpReplaceClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpReplace";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Søk og Erstatt");
            #endregion
        }
        
        #region Properties
        public DXComboBox UICbToCodeComboBox
        {
            get
            {
                if ((this.mUICbToCodeComboBox == null))
                {
                    this.mUICbToCodeComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUICbToCodeComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "cbToCode";
                    this.mUICbToCodeComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSImageComboBoxEdit";
                    this.mUICbToCodeComboBox.WindowTitles.Add("Søk og Erstatt");
                    #endregion
                }
                return this.mUICbToCodeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private DXComboBox mUICbToCodeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlButtonsClient : DXTestControl
    {
        
        public UIPnlButtonsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Søk og Erstatt");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Søk og Erstatt");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpAreaClient : DXTestControl
    {
        
        public UIGrpAreaClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpArea";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Søk og Erstatt");
            #endregion
        }
        
        #region Properties
        public UIPcAreaClient UIPcAreaClient
        {
            get
            {
                if ((this.mUIPcAreaClient == null))
                {
                    this.mUIPcAreaClient = new UIPcAreaClient(this);
                }
                return this.mUIPcAreaClient;
            }
        }
        
        public UIPcLineSelectionClient UIPcLineSelectionClient
        {
            get
            {
                if ((this.mUIPcLineSelectionClient == null))
                {
                    this.mUIPcLineSelectionClient = new UIPcLineSelectionClient(this);
                }
                return this.mUIPcLineSelectionClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcAreaClient mUIPcAreaClient;
        
        private UIPcLineSelectionClient mUIPcLineSelectionClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcAreaClient : DXTestControl
    {
        
        public UIPcAreaClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcArea";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Søk og Erstatt");
            #endregion
        }
        
        #region Properties
        public UILeAreaLookUpEdit UILeAreaLookUpEdit
        {
            get
            {
                if ((this.mUILeAreaLookUpEdit == null))
                {
                    this.mUILeAreaLookUpEdit = new UILeAreaLookUpEdit(this);
                }
                return this.mUILeAreaLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private UILeAreaLookUpEdit mUILeAreaLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeAreaLookUpEdit : DXLookUpEdit
    {
        
        public UILeAreaLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "leArea";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Søk og Erstatt");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "leAreaPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Søk og Erstatt");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcLineSelectionClient : DXTestControl
    {
        
        public UIPcLineSelectionClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcLineSelection";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Søk og Erstatt");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UICeBaseLineCheckBox
        {
            get
            {
                if ((this.mUICeBaseLineCheckBox == null))
                {
                    this.mUICeBaseLineCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUICeBaseLineCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ceBaseLine";
                    this.mUICeBaseLineCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUICeBaseLineCheckBox.WindowTitles.Add("Søk og Erstatt");
                    #endregion
                }
                return this.mUICeBaseLineCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUICeBaseLineCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUtjevningsvaktWindow : DXWindow
    {
        
        public UIUtjevningsvaktWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Utjevningsvakt";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Utjevningsvakt");
            #endregion
        }
        
        #region Properties
        public UIPnlButtonsClient1 UIPnlButtonsClient
        {
            get
            {
                if ((this.mUIPnlButtonsClient == null))
                {
                    this.mUIPnlButtonsClient = new UIPnlButtonsClient1(this);
                }
                return this.mUIPnlButtonsClient;
            }
        }
        
        public DXPopupEdit UILnkDetailPopupEdit
        {
            get
            {
                if ((this.mUILnkDetailPopupEdit == null))
                {
                    this.mUILnkDetailPopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "lnkDetail";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "4";
                    this.mUILnkDetailPopupEdit.WindowTitles.Add("Utjevningsvakt");
                    #endregion
                }
                return this.mUILnkDetailPopupEdit;
            }
        }
        
        public UIGrpEqualizingClient UIGrpEqualizingClient
        {
            get
            {
                if ((this.mUIGrpEqualizingClient == null))
                {
                    this.mUIGrpEqualizingClient = new UIGrpEqualizingClient(this);
                }
                return this.mUIGrpEqualizingClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlButtonsClient1 mUIPnlButtonsClient;
        
        private DXPopupEdit mUILnkDetailPopupEdit;
        
        private UIGrpEqualizingClient mUIGrpEqualizingClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlButtonsClient1 : DXTestControl
    {
        
        public UIPnlButtonsClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Utjevningsvakt");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Utjevningsvakt");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpEqualizingClient : DXTestControl
    {
        
        public UIGrpEqualizingClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpEqualizing";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Utjevningsvakt");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIENumberEdit
        {
            get
            {
                if ((this.mUIENumberEdit == null))
                {
                    this.mUIENumberEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber";
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumberEdit.WindowTitles.Add("Utjevningsvakt");
                    #endregion
                }
                return this.mUIENumberEdit;
            }
        }
        
        public DXRadioGroup UIRgrpEqualizationModeRadioGroup
        {
            get
            {
                if ((this.mUIRgrpEqualizationModeRadioGroup == null))
                {
                    this.mUIRgrpEqualizationModeRadioGroup = new DXRadioGroup(this);
                    #region Search Criteria
                    this.mUIRgrpEqualizationModeRadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "rgrpEqualizationMode";
                    this.mUIRgrpEqualizationModeRadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSRadioGroup";
                    this.mUIRgrpEqualizationModeRadioGroup.WindowTitles.Add("Utjevningsvakt");
                    #endregion
                }
                return this.mUIRgrpEqualizationModeRadioGroup;
            }
        }
        
        public DXRadioGroup UIRgrpEqualizationPlacRadioGroup
        {
            get
            {
                if ((this.mUIRgrpEqualizationPlacRadioGroup == null))
                {
                    this.mUIRgrpEqualizationPlacRadioGroup = new DXRadioGroup(this);
                    #region Search Criteria
                    this.mUIRgrpEqualizationPlacRadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "rgrpEqualizationPlacement";
                    this.mUIRgrpEqualizationPlacRadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSRadioGroup";
                    this.mUIRgrpEqualizationPlacRadioGroup.WindowTitles.Add("Utjevningsvakt");
                    #endregion
                }
                return this.mUIRgrpEqualizationPlacRadioGroup;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIENumberEdit;
        
        private DXRadioGroup mUIRgrpEqualizationModeRadioGroup;
        
        private DXRadioGroup mUIRgrpEqualizationPlacRadioGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRegistreringsstatusWindow : DXWindow
    {
        
        public UIRegistreringsstatusWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Registreringsstatus";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILcMessagesCustom UILcMessagesCustom
        {
            get
            {
                if ((this.mUILcMessagesCustom == null))
                {
                    this.mUILcMessagesCustom = new UILcMessagesCustom(this);
                }
                return this.mUILcMessagesCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMessagesCustom mUILcMessagesCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMessagesCustom : DXTestControl
    {
        
        public UILcMessagesCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILcgMessagesLayoutGroup UILcgMessagesLayoutGroup
        {
            get
            {
                if ((this.mUILcgMessagesLayoutGroup == null))
                {
                    this.mUILcgMessagesLayoutGroup = new UILcgMessagesLayoutGroup(this);
                }
                return this.mUILcgMessagesLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILcgMessagesLayoutGroup mUILcgMessagesLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcgMessagesLayoutGroup : DXBaseLayoutItem
    {
        
        public UILcgMessagesLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcgMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILciMessagesLayoutControlItem UILciMessagesLayoutControlItem
        {
            get
            {
                if ((this.mUILciMessagesLayoutControlItem == null))
                {
                    this.mUILciMessagesLayoutControlItem = new UILciMessagesLayoutControlItem(this);
                }
                return this.mUILciMessagesLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILciMessagesLayoutControlItem mUILciMessagesLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILciMessagesLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILciMessagesLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UIGMessagesTable UIGMessagesTable
        {
            get
            {
                if ((this.mUIGMessagesTable == null))
                {
                    this.mUIGMessagesTable = new UIGMessagesTable(this);
                }
                return this.mUIGMessagesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGMessagesTable mUIGMessagesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGMessagesTable : DXGrid
    {
        
        public UIGMessagesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public DXCell UIAntallminuttererugylCell
        {
            get
            {
                if ((this.mUIAntallminuttererugylCell == null))
                {
                    this.mUIAntallminuttererugylCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAntallminuttererugylCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]0[Column]gvMessagesColumn_Text";
                    this.mUIAntallminuttererugylCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAntallminuttererugylCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUIAntallminuttererugylCell;
            }
        }
        
        public DXCell UIAntallminuttermåværeCell
        {
            get
            {
                if ((this.mUIAntallminuttermåværeCell == null))
                {
                    this.mUIAntallminuttermåværeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAntallminuttermåværeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]0[Column]gvMessagesColumn_Info";
                    this.mUIAntallminuttermåværeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAntallminuttermåværeCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUIAntallminuttermåværeCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAntallminuttererugylCell;
        
        private DXCell mUIAntallminuttermåværeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRPL4047InformasjonWindow : DXWindow
    {
        
        public UIRPL4047InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RPL-4047 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("RPL-4047 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("RPL-4047 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRPL24009Window : WinWindow
    {
        
        public UIRPL24009Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "RPL2-4009";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("RPL2-4009");
            #endregion
        }
        
        #region Properties
        public WinText UIPlanenerendretVildulText
        {
            get
            {
                if ((this.mUIPlanenerendretVildulText == null))
                {
                    this.mUIPlanenerendretVildulText = new WinText(this);
                    #region Search Criteria
                    this.mUIPlanenerendretVildulText.SearchProperties[WinText.PropertyNames.Name] = "Planen er endret. Vil du lagre endringer før du fortsetter?";
                    this.mUIPlanenerendretVildulText.WindowTitles.Add("RPL2-4009");
                    #endregion
                }
                return this.mUIPlanenerendretVildulText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIPlanenerendretVildulText;
        #endregion
    }
}
