// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _027_Test_Helligdagsberegning_kalenderplan.UIMapVS2017Classes
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v19_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMapVS2017
    {
        
        /// <summary>
        /// CheckEmployees_step_1 - Use 'CheckEmployees_step_1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployees_step_1()
        {
            #region Variable Declarations
            DXCell uIAnderssonKennethCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonKennethCell;
            DXCell uIBrolinThomasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrolinThomasCell;
            DXCell uIDahlinMartinCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDahlinMartinCell;
            DXCell uIDahlinMartinCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDahlinMartinCell1;
            DXCell uIRavelliThomasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIRavelliThomasCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Kenneth' cell equals 'Andersson, Kenneth'
            Assert.AreEqual(this.CheckEmployees_step_1ExpectedValues.UIAnderssonKennethCellText, uIAnderssonKennethCell.Text);

            // Verify that the 'Text' property of 'Brolin, Thomas' cell equals 'Brolin, Thomas'
            Assert.AreEqual(this.CheckEmployees_step_1ExpectedValues.UIBrolinThomasCellText, uIBrolinThomasCell.Text);

            // Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
            Assert.AreEqual(this.CheckEmployees_step_1ExpectedValues.UIDahlinMartinCellText, uIDahlinMartinCell.Text);

            // Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
            Assert.AreEqual(this.CheckEmployees_step_1ExpectedValues.UIDahlinMartinCell1Text, uIDahlinMartinCell1.Text);

            // Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Elmander, Johan'
            Assert.AreEqual(this.CheckEmployees_step_1ExpectedValues.UIRavelliThomasCellText, uIRavelliThomasCell.Text);
        }
        
        /// <summary>
        /// CheckAnderssonStep4 - Use 'CheckAnderssonStep4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAnderssonStep4()
        {
            #region Variable Declarations
            DXCell uIAnderssonKennethCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonKennethCell;
            DXCell uIGCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell6;
            DXCell uIItem7av7Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem7av7Cell1;
            DXCell uIItem0av4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av4Cell1;
            DXCell uIItem0av0Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell7;
            DXCell uIItem7av7Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem7av7Cell;
            DXCell uIItem5865Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5865Cell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Kenneth' cell equals 'Andersson, Kenneth'
            Assert.AreEqual(this.CheckAnderssonStep4ExpectedValues.UIAnderssonKennethCellText, uIAnderssonKennethCell.Text);

            // Verify that the 'Text' property of 'G' cell equals 'G'
            Assert.AreEqual(this.CheckAnderssonStep4ExpectedValues.UIGCell6Text, uIGCell6.Text);

            // Verify that the 'Text' property of '7 av 7' cell equals '7 av 7'
            Assert.AreEqual(this.CheckAnderssonStep4ExpectedValues.UIItem7av7Cell1Text, uIItem7av7Cell1.Text);

            // Verify that the 'Text' property of '0 av 4' cell equals '0 av 4'
            Assert.AreEqual(this.CheckAnderssonStep4ExpectedValues.UIItem0av4Cell1Text, uIItem0av4Cell1.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckAnderssonStep4ExpectedValues.UIItem0av0Cell7Text, uIItem0av0Cell7.Text);

            // Verify that the 'Text' property of '7 av 7' cell equals '58,65'
            Assert.AreEqual(this.CheckAnderssonStep4ExpectedValues.UIItem7av7CellText, uIItem7av7Cell.Text);

            // Verify that the 'Text' property of '58,65' cell equals '58,65'
            Assert.AreEqual(this.CheckAnderssonStep4ExpectedValues.UIItem5865CellText, uIItem5865Cell.Text);
        }
        
        /// <summary>
        /// CheckBrolinStep4 - Use 'CheckBrolinStep4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckBrolinStep4()
        {
            #region Variable Declarations
            DXCell uIDahlinMartinCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDahlinMartinCell;
            DXCell uIGCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell7;
            DXCell uIItem2av7Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem2av7Cell1;
            DXCell uIItem0av0Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell8;
            DXCell uIItem0av0Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell9;
            #endregion

            // Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Brolin, Thomas'
            Assert.AreEqual(this.CheckBrolinStep4ExpectedValues.UIDahlinMartinCellText, uIDahlinMartinCell.Text);

            // Verify that the 'Text' property of 'G' cell equals 'G'
            Assert.AreEqual(this.CheckBrolinStep4ExpectedValues.UIGCell7Text, uIGCell7.Text);

            // Verify that the 'Text' property of '2 av 7' cell equals '2 av 7'
            Assert.AreEqual(this.CheckBrolinStep4ExpectedValues.UIItem2av7Cell1Text, uIItem2av7Cell1.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckBrolinStep4ExpectedValues.UIItem0av0Cell8Text, uIItem0av0Cell8.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckBrolinStep4ExpectedValues.UIItem0av0Cell9Text, uIItem0av0Cell9.Text);
        }
        
        /// <summary>
        /// CheckDahlinStep4 - Use 'CheckDahlinStep4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDahlinStep4()
        {
            #region Variable Declarations
            DXCell uIDahlinMartinCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDahlinMartinCell2;
            DXCell uIGCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell8;
            DXCell uIItem5av7Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av7Cell2;
            DXCell uIItem0av2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell4;
            DXCell uIItem0av1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av1Cell2;
            #endregion

            // Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
            Assert.AreEqual(this.CheckDahlinStep4ExpectedValues.UIDahlinMartinCell2Text, uIDahlinMartinCell2.Text);

            // Verify that the 'Text' property of 'G' cell equals 'G'
            Assert.AreEqual(this.CheckDahlinStep4ExpectedValues.UIGCell8Text, uIGCell8.Text);

            // Verify that the 'Text' property of '5 av 7' cell equals '5 av 7'
            Assert.AreEqual(this.CheckDahlinStep4ExpectedValues.UIItem5av7Cell2Text, uIItem5av7Cell2.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckDahlinStep4ExpectedValues.UIItem0av2Cell4Text, uIItem0av2Cell4.Text);

            // Verify that the 'Text' property of '0 av 1' cell equals '0 av 1'
            Assert.AreEqual(this.CheckDahlinStep4ExpectedValues.UIItem0av1Cell2Text, uIItem0av1Cell2.Text);
        }
        
        /// <summary>
        /// CheckElmanderStep4 - Use 'CheckElmanderStep4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckElmanderStep4()
        {
            #region Variable Declarations
            DXCell uIElmanderJohanCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIElmanderJohanCell;
            DXCell uIGCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell9;
            DXCell uIItem5av7Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av7Cell3;
            DXCell uIItem5av7Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av7Cell1;
            DXCell uIItem0av2Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell5;
            DXCell uIItem0av0Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell10;
            #endregion

            // Verify that the 'Text' property of 'Elmander, Johan' cell equals 'Elmander, Johan'
            Assert.AreEqual(this.CheckElmanderStep4ExpectedValues.UIElmanderJohanCellText, uIElmanderJohanCell.Text);

            // Verify that the 'Text' property of 'G' cell equals 'G'
            Assert.AreEqual(this.CheckElmanderStep4ExpectedValues.UIGCell9Text, uIGCell9.Text);

            // Verify that the 'Text' property of '5 av 7' cell equals '5 av 7'
            Assert.AreEqual(this.CheckElmanderStep4ExpectedValues.UIItem5av7Cell3Text, uIItem5av7Cell3.Text);

            // Verify that the 'Text' property of '5 av 7' cell equals '32,42'
            Assert.AreEqual(this.CheckElmanderStep4ExpectedValues.UIItem5av7Cell1Text, uIItem5av7Cell1.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckElmanderStep4ExpectedValues.UIItem0av2Cell5Text, uIItem0av2Cell5.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckElmanderStep4ExpectedValues.UIItem0av0Cell10Text, uIItem0av0Cell10.Text);
        }
        
        /// <summary>
        /// CheckAnderssonStep8 - Use 'CheckAnderssonStep8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAnderssonStep8()
        {
            #region Variable Declarations
            DXCell uIBrolinThomasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrolinThomasCell;
            DXCell uIGCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell6;
            DXCell uIItem7av7Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem7av7Cell1;
            DXCell uIItem0av5Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av5Cell;
            DXCell uIItem0av0Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell7;
            #endregion

            // Verify that the 'Text' property of 'Brolin, Thomas' cell equals 'Andersson, Kenneth'
            Assert.AreEqual(this.CheckAnderssonStep8ExpectedValues.UIBrolinThomasCellText, uIBrolinThomasCell.Text);

            // Verify that the 'Text' property of 'G' cell equals 'G'
            Assert.AreEqual(this.CheckAnderssonStep8ExpectedValues.UIGCell6Text, uIGCell6.Text);

            // Verify that the 'Text' property of '7 av 7' cell equals '9 av 9'
            Assert.AreEqual(this.CheckAnderssonStep8ExpectedValues.UIItem7av7Cell1Text, uIItem7av7Cell1.Text);

            // Verify that the 'Text' property of '0 av 5' cell equals '0 av 5'
            Assert.AreEqual(this.CheckAnderssonStep8ExpectedValues.UIItem0av5CellText, uIItem0av5Cell.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckAnderssonStep8ExpectedValues.UIItem0av0Cell7Text, uIItem0av0Cell7.Text);
        }
        
        /// <summary>
        /// CheckBrolinStep8 - Use 'CheckBrolinStep8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckBrolinStep8()
        {
            #region Variable Declarations
            DXCell uIDahlinMartinCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDahlinMartinCell;
            DXCell uIGCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell7;
            DXCell uIItem2av9Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem2av9Cell;
            DXCell uIItem0av0Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell8;
            DXCell uIItem0av0Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell9;
            #endregion

            // Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Brolin, Thomas'
            Assert.AreEqual(this.CheckBrolinStep8ExpectedValues.UIDahlinMartinCellText, uIDahlinMartinCell.Text);

            // Verify that the 'Text' property of 'G' cell equals 'G'
            Assert.AreEqual(this.CheckBrolinStep8ExpectedValues.UIGCell7Text, uIGCell7.Text);

            // Verify that the 'Text' property of '2 av 9' cell equals '2 av 9'
            Assert.AreEqual(this.CheckBrolinStep8ExpectedValues.UIItem2av9CellText, uIItem2av9Cell.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckBrolinStep8ExpectedValues.UIItem0av0Cell8Text, uIItem0av0Cell8.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckBrolinStep8ExpectedValues.UIItem0av0Cell9Text, uIItem0av0Cell9.Text);
        }
        
        /// <summary>
        /// CheckDahlinStep8 - Use 'CheckDahlinStep8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDahlinStep8()
        {
            #region Variable Declarations
            DXCell uIDahlinMartinCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDahlinMartinCell2;
            DXCell uIGCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell8;
            DXCell uIItem6av9Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem6av9Cell2;
            DXCell uIItem0av2Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell6;
            DXCell uIItem0av1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av1Cell2;
            #endregion

            // Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
            Assert.AreEqual(this.CheckDahlinStep8ExpectedValues.UIDahlinMartinCell2Text, uIDahlinMartinCell2.Text);

            // Verify that the 'Text' property of 'G' cell equals 'G'
            Assert.AreEqual(this.CheckDahlinStep8ExpectedValues.UIGCell8Text, uIGCell8.Text);

            // Verify that the 'Text' property of '6 av 9' cell equals '6 av 9'
            Assert.AreEqual(this.CheckDahlinStep8ExpectedValues.UIItem6av9Cell2Text, uIItem6av9Cell2.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckDahlinStep8ExpectedValues.UIItem0av2Cell6Text, uIItem0av2Cell6.Text);

            // Verify that the 'Text' property of '0 av 1' cell equals '0 av 2'
            Assert.AreEqual(this.CheckDahlinStep8ExpectedValues.UIItem0av1Cell2Text, uIItem0av1Cell2.Text);
        }
        
        /// <summary>
        /// CheckElmanderStep8 - Use 'CheckElmanderStep8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckElmanderStep8()
        {
            #region Variable Declarations
            DXCell uIElmanderJohanCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIElmanderJohanCell;
            DXCell uIGCell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell10;
            DXCell uIItem5av7Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av7Cell3;
            DXCell uIItem0av2Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell7;
            DXCell uIItem0av0Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell10;
            #endregion

            // Verify that the 'Text' property of 'Elmander, Johan' cell equals 'Elmander, Johan'
            Assert.AreEqual(this.CheckElmanderStep8ExpectedValues.UIElmanderJohanCellText, uIElmanderJohanCell.Text);

            // Verify that the 'Text' property of 'G' cell equals 'G'
            Assert.AreEqual(this.CheckElmanderStep8ExpectedValues.UIGCell10Text, uIGCell10.Text);

            // Verify that the 'Text' property of '5 av 7' cell equals '6 av 9'
            Assert.AreEqual(this.CheckElmanderStep8ExpectedValues.UIItem5av7Cell3Text, uIItem5av7Cell3.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckElmanderStep8ExpectedValues.UIItem0av2Cell7Text, uIItem0av2Cell7.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckElmanderStep8ExpectedValues.UIItem0av0Cell10Text, uIItem0av0Cell10.Text);
        }
        
        /// <summary>
        /// CheckAnderssonStep9 - Use 'CheckAnderssonStep9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAnderssonStep9()
        {
            #region Variable Declarations
            DXCell uIAnderssonKennethCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonKennethCell;
            DXCell uIGCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell6;
            DXCell uIItem7av7Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem7av7Cell1;
            DXCell uIItem0av4Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av4Cell1;
            DXCell uIItem0av0Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell11;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Kenneth' cell equals 'Andersson, Kenneth'
            Assert.AreEqual(this.CheckAnderssonStep9ExpectedValues.UIAnderssonKennethCellText, uIAnderssonKennethCell.Text);

            // Verify that the 'Text' property of 'G' cell equals 'A'
            Assert.AreEqual(this.CheckAnderssonStep9ExpectedValues.UIGCell6Text, uIGCell6.Text);

            // Verify that the 'Text' property of '7 av 7' cell equals '9 av 9'
            Assert.AreEqual(this.CheckAnderssonStep9ExpectedValues.UIItem7av7Cell1Text, uIItem7av7Cell1.Text);

            // Verify that the 'Text' property of '0 av 4' cell equals '0 av 4'
            Assert.AreEqual(this.CheckAnderssonStep9ExpectedValues.UIItem0av4Cell1Text, uIItem0av4Cell1.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckAnderssonStep9ExpectedValues.UIItem0av0Cell11Text, uIItem0av0Cell11.Text);
        }
        
        /// <summary>
        /// CheckBrolinStep9 - Use 'CheckBrolinStep9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckBrolinStep9()
        {
            #region Variable Declarations
            DXCell uIDahlinMartinCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDahlinMartinCell;
            DXCell uIGCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell7;
            DXCell uIItem2av7Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem2av7Cell1;
            DXCell uIItem0av0Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell8;
            DXCell uIItem0av0Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell9;
            #endregion

            // Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Brolin, Thomas'
            Assert.AreEqual(this.CheckBrolinStep9ExpectedValues.UIDahlinMartinCellText, uIDahlinMartinCell.Text);

            // Verify that the 'Text' property of 'G' cell equals 'A'
            Assert.AreEqual(this.CheckBrolinStep9ExpectedValues.UIGCell7Text, uIGCell7.Text);

            // Verify that the 'Text' property of '2 av 7' cell equals '2 av 9'
            Assert.AreEqual(this.CheckBrolinStep9ExpectedValues.UIItem2av7Cell1Text, uIItem2av7Cell1.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 1'
            Assert.AreEqual(this.CheckBrolinStep9ExpectedValues.UIItem0av0Cell8Text, uIItem0av0Cell8.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckBrolinStep9ExpectedValues.UIItem0av0Cell9Text, uIItem0av0Cell9.Text);
        }
        
        /// <summary>
        /// CheckDahlinStep9 - Use 'CheckDahlinStep9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDahlinStep9()
        {
            #region Variable Declarations
            DXCell uIDahlinMartinCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDahlinMartinCell2;
            DXCell uIGCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell8;
            DXCell uIItem6av9Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem6av9Cell2;
            DXCell uIItem0av2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell4;
            DXCell uIItem0av2Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell8;
            #endregion

            // Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
            Assert.AreEqual(this.CheckDahlinStep9ExpectedValues.UIDahlinMartinCell2Text, uIDahlinMartinCell2.Text);

            // Verify that the 'Text' property of 'G' cell equals 'A'
            Assert.AreEqual(this.CheckDahlinStep9ExpectedValues.UIGCell8Text, uIGCell8.Text);

            // Verify that the 'Text' property of '6 av 9' cell equals '6 av 9'
            Assert.AreEqual(this.CheckDahlinStep9ExpectedValues.UIItem6av9Cell2Text, uIItem6av9Cell2.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckDahlinStep9ExpectedValues.UIItem0av2Cell4Text, uIItem0av2Cell4.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckDahlinStep9ExpectedValues.UIItem0av2Cell8Text, uIItem0av2Cell8.Text);
        }
        
        /// <summary>
        /// CheckIbrahimovicCalculationsStep19 - Use 'CheckIbrahimovicCalculationsStep19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckIbrahimovicCalculationsStep19()
        {
            #region Variable Declarations
            DXCell uIIbrahimovicZlatanCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIIbrahimovicZlatanCell;
            DXCell uIACell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell1;
            DXCell uIItem6av9Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem6av9Cell3;
            DXCell uIItem0Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0Cell;
            DXCell uIItem2965Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem2965Cell1;
            #endregion

            // Verify that the 'Text' property of 'Ibrahimovic, Zlatan' cell equals 'Ibrahimovic, Zlatan'
            Assert.AreEqual(this.CheckIbrahimovicCalculationsStep19ExpectedValues.UIIbrahimovicZlatanCellText, uIIbrahimovicZlatanCell.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckIbrahimovicCalculationsStep19ExpectedValues.UIACell1Text, uIACell1.Text);

            // Verify that the 'Text' property of '6 av 9' cell equals '6 av 9'
            Assert.AreEqual(this.CheckIbrahimovicCalculationsStep19ExpectedValues.UIItem6av9Cell3Text, uIItem6av9Cell3.Text);

            // Verify that the 'Text' property of '0' cell equals '0 av 2'
            Assert.AreEqual(this.CheckIbrahimovicCalculationsStep19ExpectedValues.UIItem0CellText, uIItem0Cell.Text);

            // Verify that the 'Text' property of '29,65' cell equals ''
            Assert.AreEqual(this.CheckIbrahimovicCalculationsStep19ExpectedValues.UIItem2965Cell1Text, uIItem2965Cell1.Text);
        }
        
        /// <summary>
        /// CheckLarssonCalculationsStep19 - Use 'CheckLarssonCalculationsStep19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLarssonCalculationsStep19()
        {
            #region Variable Declarations
            DXCell uILarssonHenrikCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UILarssonHenrikCell;
            DXCell uIGCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell11;
            DXCell uIItem6av9Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem6av9Cell4;
            DXCell uIItem0Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0Cell1;
            DXCell uIItem1621Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem1621Cell1;
            #endregion

            // Verify that the 'Text' property of 'Larsson, Henrik' cell equals 'Larsson, Henrik'
            Assert.AreEqual(this.CheckLarssonCalculationsStep19ExpectedValues.UILarssonHenrikCellText, uILarssonHenrikCell.Text);

            // Verify that the 'Text' property of 'G' cell equals 'G'
            Assert.AreEqual(this.CheckLarssonCalculationsStep19ExpectedValues.UIGCell11Text, uIGCell11.Text);

            // Verify that the 'Text' property of '6 av 9' cell equals '6 av 9'
            Assert.AreEqual(this.CheckLarssonCalculationsStep19ExpectedValues.UIItem6av9Cell4Text, uIItem6av9Cell4.Text);

            // Verify that the 'Text' property of '0' cell equals '0 av 2'
            Assert.AreEqual(this.CheckLarssonCalculationsStep19ExpectedValues.UIItem0Cell1Text, uIItem0Cell1.Text);

            // Verify that the 'Text' property of '16,21' cell equals '0 av 1'
            Assert.AreEqual(this.CheckLarssonCalculationsStep19ExpectedValues.UIItem1621Cell1Text, uIItem1621Cell1.Text);
        }
        
        /// <summary>
        /// CheckMildCalculationsStep19 - Use 'CheckMildCalculationsStep19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckMildCalculationsStep19()
        {
            #region Variable Declarations
            DXCell uIMildHåkanCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIMildHåkanCell;
            DXCell uIGCell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell12;
            DXCell uIItem6av7Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem6av7Cell1;
            DXCell uIGCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell5;
            DXCell uIItem0Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0Cell2;
            DXCell uIItem1288Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem1288Cell1;
            #endregion

            // Verify that the 'Text' property of 'Mild, Håkan' cell equals 'Mild, Håkan'
            Assert.AreEqual(this.CheckMildCalculationsStep19ExpectedValues.UIMildHåkanCellText, uIMildHåkanCell.Text);

            // Verify that the 'Text' property of 'G' cell equals 'G'
            Assert.AreEqual(this.CheckMildCalculationsStep19ExpectedValues.UIGCell12Text, uIGCell12.Text);

            // Verify that the 'Text' property of '6 av 7' cell equals '6 av 7'
            Assert.AreEqual(this.CheckMildCalculationsStep19ExpectedValues.UIItem6av7Cell1Text, uIItem6av7Cell1.Text);

            // Verify that the 'Text' property of 'G' cell equals '9,66'
            Assert.AreEqual(this.CheckMildCalculationsStep19ExpectedValues.UIGCell5Text, uIGCell5.Text);

            // Verify that the 'Text' property of '0' cell equals '0 av 3'
            Assert.AreEqual(this.CheckMildCalculationsStep19ExpectedValues.UIItem0Cell2Text, uIItem0Cell2.Text);

            // Verify that the 'Text' property of '12,88' cell equals '0 av 0'
            Assert.AreEqual(this.CheckMildCalculationsStep19ExpectedValues.UIItem1288Cell1Text, uIItem1288Cell1.Text);
        }
        
        /// <summary>
        /// CheckVakantCalculationsStep19 - Use 'CheckVakantCalculationsStep19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckVakantCalculationsStep19()
        {
            #region Variable Declarations
            DXCell uIVAKANTCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIVAKANTCell;
            DXCell uIICell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIICell1;
            DXCell uIItem8av9Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem8av9Cell1;
            DXCell uIItem0Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0Cell3;
            DXCell uIItem1421Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem1421Cell1;
            #endregion

            // Verify that the 'Text' property of 'VAKANT' cell equals 'VAKANT'
            Assert.AreEqual(this.CheckVakantCalculationsStep19ExpectedValues.UIVAKANTCellText, uIVAKANTCell.Text);

            // Verify that the 'Text' property of 'I' cell equals 'I'
            Assert.AreEqual(this.CheckVakantCalculationsStep19ExpectedValues.UIICell1Text, uIICell1.Text);

            // Verify that the 'Text' property of '8 av 9' cell equals '8 av 9'
            Assert.AreEqual(this.CheckVakantCalculationsStep19ExpectedValues.UIItem8av9Cell1Text, uIItem8av9Cell1.Text);

            // Verify that the 'Text' property of '0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckVakantCalculationsStep19ExpectedValues.UIItem0Cell3Text, uIItem0Cell3.Text);

            // Verify that the 'Text' property of '14,21' cell equals '0 av 0'
            Assert.AreEqual(this.CheckVakantCalculationsStep19ExpectedValues.UIItem1421Cell1Text, uIItem1421Cell1.Text);
        }
        
        /// <summary>
        /// CheckLarsonF3 - Use 'CheckLarsonF3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckLarsonF3()
        {
            #region Variable Declarations
            DXCell uILarssonHenrikCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UILarssonHenrikCell;
            DXCell uIGCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIGCell11;
            DXCell uIItem0Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0Cell1;
            DXCell uIItem1621Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem1621Cell1;
            #endregion

            // Verify that the 'Text' property of 'Larsson, Henrik' cell equals 'Larsson, Henrik'
            Assert.AreEqual(this.CheckLarsonF3ExpectedValues.UILarssonHenrikCellText, uILarssonHenrikCell.Text);

            // Verify that the 'Text' property of 'G' cell equals 'A'
            Assert.AreEqual(this.CheckLarsonF3ExpectedValues.UIGCell11Text, uIGCell11.Text);

            // Verify that the 'Text' property of '0' cell equals '0 av 3'
            Assert.AreEqual(this.CheckLarsonF3ExpectedValues.UIItem0Cell1Text, uIItem0Cell1.Text);

            // Verify that the 'Text' property of '16,21' cell equals '0 av 1'
            Assert.AreEqual(this.CheckLarsonF3ExpectedValues.UIItem1621Cell1Text, uIItem1621Cell1.Text);
        }
        
        /// <summary>
        /// ChangeMildCalculationType - Use 'ChangeMildCalculationTypeParams' to pass parameters into this method.
        /// </summary>
        public void ChangeMildCalculationType()
        {
            #region Variable Declarations
            DXTreeListCell uIItem7MildHåkanTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode6TreeListNode.UIItem7MildHåkanTreeListCell;
            DXLookUpEdit uILueF3CalculationOptiLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerF3CalCustom.UILueF3CalculationOptiLookUpEdit;
            #endregion

            // Click '7. Mild, Håkan' TreeListCell
            Mouse.Click(uIItem7MildHåkanTreeListCell, new Point(48, 7));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionViewModel' in 'lueF3CalculationOption' LookUpEdit
            //ValueTypeName
            uILueF3CalculationOptiLookUpEdit.ValueTypeName = this.ChangeMildCalculationTypeParams.UILueF3CalculationOptiLookUpEditValueTypeName;

            // Type 'Gjennomsnitt' in 'lueF3CalculationOption' LookUpEdit
            //ValueAsString
            uILueF3CalculationOptiLookUpEdit.ValueAsString = this.ChangeMildCalculationTypeParams.UILueF3CalculationOptiLookUpEditValueAsString;
        }
        
        /// <summary>
        /// ChangeLarsonCalculationType - Use 'ChangeLarsonCalculationTypeParams' to pass parameters into this method.
        /// </summary>
        public void ChangeLarsonCalculationType()
        {
            #region Variable Declarations
            DXTreeListCell uIItem6LarssonHenrikTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UIItem6LarssonHenrikTreeListCell;
            DXLookUpEdit uILueF3CalculationOptiLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerF3CalCustom.UILueF3CalculationOptiLookUpEdit;
            #endregion

            // Click '6. Larsson, Henrik' TreeListCell
            Mouse.Click(uIItem6LarssonHenrikTreeListCell, new Point(34, 8));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionViewModel' in 'lueF3CalculationOption' LookUpEdit
            //ValueTypeName
            uILueF3CalculationOptiLookUpEdit.ValueTypeName = this.ChangeLarsonCalculationTypeParams.UILueF3CalculationOptiLookUpEditValueTypeName;

            // Type 'Gjennomsnitt' in 'lueF3CalculationOption' LookUpEdit
            //ValueAsString
            uILueF3CalculationOptiLookUpEdit.ValueAsString = this.ChangeLarsonCalculationTypeParams.UILueF3CalculationOptiLookUpEditValueAsString;
        }
        
        /// <summary>
        /// SelectVacant
        /// </summary>
        public void SelectVacant()
        {
            #region Variable Declarations
            DXTreeListCell uIItem8VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode7TreeListNode.UIItem8VAKANTTreeListCell;
            #endregion

            // Click '8. VAKANT' TreeListCell
            Mouse.Click(uIItem8VAKANTTreeListCell, new Point(36, 11));
        }
        
        /// <summary>
        /// CheckElmanderStep9 - Use 'CheckElmanderStep9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckElmanderStep9()
        {
            #region Variable Declarations
            DXCell uIElmanderJohanCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIElmanderJohanCell1;
            DXCell uIACell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell2;
            DXCell uIItem6av9Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem6av9Cell5;
            DXCell uIItem0av2Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell9;
            DXCell uIItem0av0Cell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av0Cell12;
            #endregion

            // Verify that the 'Text' property of 'Elmander, Johan' cell equals 'Elmander, Johan'
            Assert.AreEqual(this.CheckElmanderStep9ExpectedValues.UIElmanderJohanCell1Text, uIElmanderJohanCell1.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckElmanderStep9ExpectedValues.UIACell2Text, uIACell2.Text);

            // Verify that the 'Text' property of '6 av 9' cell equals '6 av 9'
            Assert.AreEqual(this.CheckElmanderStep9ExpectedValues.UIItem6av9Cell5Text, uIItem6av9Cell5.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckElmanderStep9ExpectedValues.UIItem0av2Cell9Text, uIItem0av2Cell9.Text);

            // Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
            Assert.AreEqual(this.CheckElmanderStep9ExpectedValues.UIItem0av0Cell12Text, uIItem0av0Cell12.Text);
        }
        
        #region Properties
        public virtual CheckEmployees_step_1ExpectedValues CheckEmployees_step_1ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployees_step_1ExpectedValues == null))
                {
                    this.mCheckEmployees_step_1ExpectedValues = new CheckEmployees_step_1ExpectedValues();
                }
                return this.mCheckEmployees_step_1ExpectedValues;
            }
        }
        
        public virtual CheckAnderssonStep4ExpectedValues CheckAnderssonStep4ExpectedValues
        {
            get
            {
                if ((this.mCheckAnderssonStep4ExpectedValues == null))
                {
                    this.mCheckAnderssonStep4ExpectedValues = new CheckAnderssonStep4ExpectedValues();
                }
                return this.mCheckAnderssonStep4ExpectedValues;
            }
        }
        
        public virtual CheckBrolinStep4ExpectedValues CheckBrolinStep4ExpectedValues
        {
            get
            {
                if ((this.mCheckBrolinStep4ExpectedValues == null))
                {
                    this.mCheckBrolinStep4ExpectedValues = new CheckBrolinStep4ExpectedValues();
                }
                return this.mCheckBrolinStep4ExpectedValues;
            }
        }
        
        public virtual CheckDahlinStep4ExpectedValues CheckDahlinStep4ExpectedValues
        {
            get
            {
                if ((this.mCheckDahlinStep4ExpectedValues == null))
                {
                    this.mCheckDahlinStep4ExpectedValues = new CheckDahlinStep4ExpectedValues();
                }
                return this.mCheckDahlinStep4ExpectedValues;
            }
        }
        
        public virtual CheckElmanderStep4ExpectedValues CheckElmanderStep4ExpectedValues
        {
            get
            {
                if ((this.mCheckElmanderStep4ExpectedValues == null))
                {
                    this.mCheckElmanderStep4ExpectedValues = new CheckElmanderStep4ExpectedValues();
                }
                return this.mCheckElmanderStep4ExpectedValues;
            }
        }
        
        public virtual CheckAnderssonStep8ExpectedValues CheckAnderssonStep8ExpectedValues
        {
            get
            {
                if ((this.mCheckAnderssonStep8ExpectedValues == null))
                {
                    this.mCheckAnderssonStep8ExpectedValues = new CheckAnderssonStep8ExpectedValues();
                }
                return this.mCheckAnderssonStep8ExpectedValues;
            }
        }
        
        public virtual CheckBrolinStep8ExpectedValues CheckBrolinStep8ExpectedValues
        {
            get
            {
                if ((this.mCheckBrolinStep8ExpectedValues == null))
                {
                    this.mCheckBrolinStep8ExpectedValues = new CheckBrolinStep8ExpectedValues();
                }
                return this.mCheckBrolinStep8ExpectedValues;
            }
        }
        
        public virtual CheckDahlinStep8ExpectedValues CheckDahlinStep8ExpectedValues
        {
            get
            {
                if ((this.mCheckDahlinStep8ExpectedValues == null))
                {
                    this.mCheckDahlinStep8ExpectedValues = new CheckDahlinStep8ExpectedValues();
                }
                return this.mCheckDahlinStep8ExpectedValues;
            }
        }
        
        public virtual CheckElmanderStep8ExpectedValues CheckElmanderStep8ExpectedValues
        {
            get
            {
                if ((this.mCheckElmanderStep8ExpectedValues == null))
                {
                    this.mCheckElmanderStep8ExpectedValues = new CheckElmanderStep8ExpectedValues();
                }
                return this.mCheckElmanderStep8ExpectedValues;
            }
        }
        
        public virtual CheckAnderssonStep9ExpectedValues CheckAnderssonStep9ExpectedValues
        {
            get
            {
                if ((this.mCheckAnderssonStep9ExpectedValues == null))
                {
                    this.mCheckAnderssonStep9ExpectedValues = new CheckAnderssonStep9ExpectedValues();
                }
                return this.mCheckAnderssonStep9ExpectedValues;
            }
        }
        
        public virtual CheckBrolinStep9ExpectedValues CheckBrolinStep9ExpectedValues
        {
            get
            {
                if ((this.mCheckBrolinStep9ExpectedValues == null))
                {
                    this.mCheckBrolinStep9ExpectedValues = new CheckBrolinStep9ExpectedValues();
                }
                return this.mCheckBrolinStep9ExpectedValues;
            }
        }
        
        public virtual CheckDahlinStep9ExpectedValues CheckDahlinStep9ExpectedValues
        {
            get
            {
                if ((this.mCheckDahlinStep9ExpectedValues == null))
                {
                    this.mCheckDahlinStep9ExpectedValues = new CheckDahlinStep9ExpectedValues();
                }
                return this.mCheckDahlinStep9ExpectedValues;
            }
        }
        
        public virtual CheckIbrahimovicCalculationsStep19ExpectedValues CheckIbrahimovicCalculationsStep19ExpectedValues
        {
            get
            {
                if ((this.mCheckIbrahimovicCalculationsStep19ExpectedValues == null))
                {
                    this.mCheckIbrahimovicCalculationsStep19ExpectedValues = new CheckIbrahimovicCalculationsStep19ExpectedValues();
                }
                return this.mCheckIbrahimovicCalculationsStep19ExpectedValues;
            }
        }
        
        public virtual CheckLarssonCalculationsStep19ExpectedValues CheckLarssonCalculationsStep19ExpectedValues
        {
            get
            {
                if ((this.mCheckLarssonCalculationsStep19ExpectedValues == null))
                {
                    this.mCheckLarssonCalculationsStep19ExpectedValues = new CheckLarssonCalculationsStep19ExpectedValues();
                }
                return this.mCheckLarssonCalculationsStep19ExpectedValues;
            }
        }
        
        public virtual CheckMildCalculationsStep19ExpectedValues CheckMildCalculationsStep19ExpectedValues
        {
            get
            {
                if ((this.mCheckMildCalculationsStep19ExpectedValues == null))
                {
                    this.mCheckMildCalculationsStep19ExpectedValues = new CheckMildCalculationsStep19ExpectedValues();
                }
                return this.mCheckMildCalculationsStep19ExpectedValues;
            }
        }
        
        public virtual CheckVakantCalculationsStep19ExpectedValues CheckVakantCalculationsStep19ExpectedValues
        {
            get
            {
                if ((this.mCheckVakantCalculationsStep19ExpectedValues == null))
                {
                    this.mCheckVakantCalculationsStep19ExpectedValues = new CheckVakantCalculationsStep19ExpectedValues();
                }
                return this.mCheckVakantCalculationsStep19ExpectedValues;
            }
        }
        
        public virtual CheckLarsonF3ExpectedValues CheckLarsonF3ExpectedValues
        {
            get
            {
                if ((this.mCheckLarsonF3ExpectedValues == null))
                {
                    this.mCheckLarsonF3ExpectedValues = new CheckLarsonF3ExpectedValues();
                }
                return this.mCheckLarsonF3ExpectedValues;
            }
        }
        
        public virtual ChangeMildCalculationTypeParams ChangeMildCalculationTypeParams
        {
            get
            {
                if ((this.mChangeMildCalculationTypeParams == null))
                {
                    this.mChangeMildCalculationTypeParams = new ChangeMildCalculationTypeParams();
                }
                return this.mChangeMildCalculationTypeParams;
            }
        }
        
        public virtual ChangeLarsonCalculationTypeParams ChangeLarsonCalculationTypeParams
        {
            get
            {
                if ((this.mChangeLarsonCalculationTypeParams == null))
                {
                    this.mChangeLarsonCalculationTypeParams = new ChangeLarsonCalculationTypeParams();
                }
                return this.mChangeLarsonCalculationTypeParams;
            }
        }
        
        public virtual CheckElmanderStep9ExpectedValues CheckElmanderStep9ExpectedValues
        {
            get
            {
                if ((this.mCheckElmanderStep9ExpectedValues == null))
                {
                    this.mCheckElmanderStep9ExpectedValues = new CheckElmanderStep9ExpectedValues();
                }
                return this.mCheckElmanderStep9ExpectedValues;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UIAnsatteiarbeidsplanWindow UIAnsatteiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIAnsatteiarbeidsplanWindow == null))
                {
                    this.mUIAnsatteiarbeidsplanWindow = new UIAnsatteiarbeidsplanWindow();
                }
                return this.mUIAnsatteiarbeidsplanWindow;
            }
        }
        #endregion
        
        #region Fields
        private CheckEmployees_step_1ExpectedValues mCheckEmployees_step_1ExpectedValues;
        
        private CheckAnderssonStep4ExpectedValues mCheckAnderssonStep4ExpectedValues;
        
        private CheckBrolinStep4ExpectedValues mCheckBrolinStep4ExpectedValues;
        
        private CheckDahlinStep4ExpectedValues mCheckDahlinStep4ExpectedValues;
        
        private CheckElmanderStep4ExpectedValues mCheckElmanderStep4ExpectedValues;
        
        private CheckAnderssonStep8ExpectedValues mCheckAnderssonStep8ExpectedValues;
        
        private CheckBrolinStep8ExpectedValues mCheckBrolinStep8ExpectedValues;
        
        private CheckDahlinStep8ExpectedValues mCheckDahlinStep8ExpectedValues;
        
        private CheckElmanderStep8ExpectedValues mCheckElmanderStep8ExpectedValues;
        
        private CheckAnderssonStep9ExpectedValues mCheckAnderssonStep9ExpectedValues;
        
        private CheckBrolinStep9ExpectedValues mCheckBrolinStep9ExpectedValues;
        
        private CheckDahlinStep9ExpectedValues mCheckDahlinStep9ExpectedValues;
        
        private CheckIbrahimovicCalculationsStep19ExpectedValues mCheckIbrahimovicCalculationsStep19ExpectedValues;
        
        private CheckLarssonCalculationsStep19ExpectedValues mCheckLarssonCalculationsStep19ExpectedValues;
        
        private CheckMildCalculationsStep19ExpectedValues mCheckMildCalculationsStep19ExpectedValues;
        
        private CheckVakantCalculationsStep19ExpectedValues mCheckVakantCalculationsStep19ExpectedValues;
        
        private CheckLarsonF3ExpectedValues mCheckLarsonF3ExpectedValues;
        
        private ChangeMildCalculationTypeParams mChangeMildCalculationTypeParams;
        
        private ChangeLarsonCalculationTypeParams mChangeLarsonCalculationTypeParams;
        
        private CheckElmanderStep9ExpectedValues mCheckElmanderStep9ExpectedValues;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UIAnsatteiarbeidsplanWindow mUIAnsatteiarbeidsplanWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployees_step_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployees_step_1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Kenneth' cell equals 'Andersson, Kenneth'
        /// </summary>
        public string UIAnderssonKennethCellText = "Andersson, Kenneth";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brolin, Thomas' cell equals 'Brolin, Thomas'
        /// </summary>
        public string UIBrolinThomasCellText = "Brolin, Thomas";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
        /// </summary>
        public string UIDahlinMartinCellText = "Dahlin, Martin";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
        /// </summary>
        public string UIDahlinMartinCell1Text = "Dahlin, Martin";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ravelli, Thomas' cell equals 'Elmander, Johan'
        /// </summary>
        public string UIRavelliThomasCellText = "Elmander, Johan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAnderssonStep4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAnderssonStep4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Kenneth' cell equals 'Andersson, Kenneth'
        /// </summary>
        public string UIAnderssonKennethCellText = "Andersson, Kenneth";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'G'
        /// </summary>
        public string UIGCell6Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of '7 av 7' cell equals '7 av 7'
        /// </summary>
        public string UIItem7av7Cell1Text = "7 av 7";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 4' cell equals '0 av 4'
        /// </summary>
        public string UIItem0av4Cell1Text = "0 av 4";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0av0Cell7Text = "0 av 0";
        
        /// <summary>
        /// Verify that the 'Text' property of '7 av 7' cell equals '58,65'
        /// </summary>
        public string UIItem7av7CellText = "58,65";
        
        /// <summary>
        /// Verify that the 'Text' property of '58,65' cell equals '58,65'
        /// </summary>
        public string UIItem5865CellText = "58,65";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckBrolinStep4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckBrolinStep4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Brolin, Thomas'
        /// </summary>
        public string UIDahlinMartinCellText = "Brolin, Thomas";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'G'
        /// </summary>
        public string UIGCell7Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of '2 av 7' cell equals '2 av 7'
        /// </summary>
        public string UIItem2av7Cell1Text = "2 av 7";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0av0Cell8Text = "0 av 0";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0av0Cell9Text = "0 av 0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDahlinStep4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckDahlinStep4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
        /// </summary>
        public string UIDahlinMartinCell2Text = "Dahlin, Martin";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'G'
        /// </summary>
        public string UIGCell8Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 7' cell equals '5 av 7'
        /// </summary>
        public string UIItem5av7Cell2Text = "5 av 7";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell4Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 1' cell equals '0 av 1'
        /// </summary>
        public string UIItem0av1Cell2Text = "0 av 1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckElmanderStep4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckElmanderStep4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Elmander, Johan' cell equals 'Elmander, Johan'
        /// </summary>
        public string UIElmanderJohanCellText = "Elmander, Johan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'G'
        /// </summary>
        public string UIGCell9Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 7' cell equals '5 av 7'
        /// </summary>
        public string UIItem5av7Cell3Text = "5 av 7";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 7' cell equals '32,42'
        /// </summary>
        public string UIItem5av7Cell1Text = "32,42";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell5Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0av0Cell10Text = "0 av 0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAnderssonStep8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAnderssonStep8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Brolin, Thomas' cell equals 'Andersson, Kenneth'
        /// </summary>
        public string UIBrolinThomasCellText = "Andersson, Kenneth";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'G'
        /// </summary>
        public string UIGCell6Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of '7 av 7' cell equals '9 av 9'
        /// </summary>
        public string UIItem7av7Cell1Text = "9 av 9";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 5' cell equals '0 av 5'
        /// </summary>
        public string UIItem0av5CellText = "0 av 5";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0av0Cell7Text = "0 av 0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckBrolinStep8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckBrolinStep8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Brolin, Thomas'
        /// </summary>
        public string UIDahlinMartinCellText = "Brolin, Thomas";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'G'
        /// </summary>
        public string UIGCell7Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of '2 av 9' cell equals '2 av 9'
        /// </summary>
        public string UIItem2av9CellText = "2 av 9";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0av0Cell8Text = "0 av 0";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0av0Cell9Text = "0 av 0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDahlinStep8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckDahlinStep8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
        /// </summary>
        public string UIDahlinMartinCell2Text = "Dahlin, Martin";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'G'
        /// </summary>
        public string UIGCell8Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of '6 av 9' cell equals '6 av 9'
        /// </summary>
        public string UIItem6av9Cell2Text = "6 av 9";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell6Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 1' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av1Cell2Text = "0 av 2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckElmanderStep8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckElmanderStep8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Elmander, Johan' cell equals 'Elmander, Johan'
        /// </summary>
        public string UIElmanderJohanCellText = "Elmander, Johan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'G'
        /// </summary>
        public string UIGCell10Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 7' cell equals '6 av 9'
        /// </summary>
        public string UIItem5av7Cell3Text = "6 av 9";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell7Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0av0Cell10Text = "0 av 0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAnderssonStep9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAnderssonStep9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Kenneth' cell equals 'Andersson, Kenneth'
        /// </summary>
        public string UIAnderssonKennethCellText = "Andersson, Kenneth";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'A'
        /// </summary>
        public string UIGCell6Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of '7 av 7' cell equals '9 av 9'
        /// </summary>
        public string UIItem7av7Cell1Text = "9 av 9";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 4' cell equals '0 av 4'
        /// </summary>
        public string UIItem0av4Cell1Text = "0 av 4";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0av0Cell11Text = "0 av 0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckBrolinStep9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckBrolinStep9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Brolin, Thomas'
        /// </summary>
        public string UIDahlinMartinCellText = "Brolin, Thomas";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'A'
        /// </summary>
        public string UIGCell7Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of '2 av 7' cell equals '2 av 9'
        /// </summary>
        public string UIItem2av7Cell1Text = "2 av 9";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 1'
        /// </summary>
        public string UIItem0av0Cell8Text = "0 av 1";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0av0Cell9Text = "0 av 0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDahlinStep9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckDahlinStep9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Dahlin, Martin' cell equals 'Dahlin, Martin'
        /// </summary>
        public string UIDahlinMartinCell2Text = "Dahlin, Martin";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'A'
        /// </summary>
        public string UIGCell8Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of '6 av 9' cell equals '6 av 9'
        /// </summary>
        public string UIItem6av9Cell2Text = "6 av 9";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell4Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell8Text = "0 av 2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckIbrahimovicCalculationsStep19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckIbrahimovicCalculationsStep19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ibrahimovic, Zlatan' cell equals 'Ibrahimovic, Zlatan'
        /// </summary>
        public string UIIbrahimovicZlatanCellText = "Ibrahimovic, Zlatan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell1Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of '6 av 9' cell equals '6 av 9'
        /// </summary>
        public string UIItem6av9Cell3Text = "6 av 9";
        
        /// <summary>
        /// Verify that the 'Text' property of '0' cell equals '0 av 2'
        /// </summary>
        public string UIItem0CellText = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '29,65' cell equals ''
        /// </summary>
        public string UIItem2965Cell1Text = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLarssonCalculationsStep19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLarssonCalculationsStep19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Larsson, Henrik' cell equals 'Larsson, Henrik'
        /// </summary>
        public string UILarssonHenrikCellText = "Larsson, Henrik";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'G'
        /// </summary>
        public string UIGCell11Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of '6 av 9' cell equals '6 av 9'
        /// </summary>
        public string UIItem6av9Cell4Text = "6 av 9";
        
        /// <summary>
        /// Verify that the 'Text' property of '0' cell equals '0 av 2'
        /// </summary>
        public string UIItem0Cell1Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '16,21' cell equals '0 av 1'
        /// </summary>
        public string UIItem1621Cell1Text = "0 av 1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckMildCalculationsStep19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckMildCalculationsStep19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Mild, Håkan' cell equals 'Mild, Håkan'
        /// </summary>
        public string UIMildHåkanCellText = "Mild, Håkan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'G'
        /// </summary>
        public string UIGCell12Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of '6 av 7' cell equals '6 av 7'
        /// </summary>
        public string UIItem6av7Cell1Text = "6 av 7";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals '9,66'
        /// </summary>
        public string UIGCell5Text = "9,66";
        
        /// <summary>
        /// Verify that the 'Text' property of '0' cell equals '0 av 3'
        /// </summary>
        public string UIItem0Cell2Text = "0 av 3";
        
        /// <summary>
        /// Verify that the 'Text' property of '12,88' cell equals '0 av 0'
        /// </summary>
        public string UIItem1288Cell1Text = "0 av 0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckVakantCalculationsStep19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckVakantCalculationsStep19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'VAKANT' cell equals 'VAKANT'
        /// </summary>
        public string UIVAKANTCellText = "VAKANT";
        
        /// <summary>
        /// Verify that the 'Text' property of 'I' cell equals 'I'
        /// </summary>
        public string UIICell1Text = "I";
        
        /// <summary>
        /// Verify that the 'Text' property of '8 av 9' cell equals '8 av 9'
        /// </summary>
        public string UIItem8av9Cell1Text = "8 av 9";
        
        /// <summary>
        /// Verify that the 'Text' property of '0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0Cell3Text = "0 av 0";
        
        /// <summary>
        /// Verify that the 'Text' property of '14,21' cell equals '0 av 0'
        /// </summary>
        public string UIItem1421Cell1Text = "0 av 0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLarsonF3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckLarsonF3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Larsson, Henrik' cell equals 'Larsson, Henrik'
        /// </summary>
        public string UILarssonHenrikCellText = "Larsson, Henrik";
        
        /// <summary>
        /// Verify that the 'Text' property of 'G' cell equals 'A'
        /// </summary>
        public string UIGCell11Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of '0' cell equals '0 av 3'
        /// </summary>
        public string UIItem0Cell1Text = "0 av 3";
        
        /// <summary>
        /// Verify that the 'Text' property of '16,21' cell equals '0 av 1'
        /// </summary>
        public string UIItem1621Cell1Text = "0 av 1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeMildCalculationType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ChangeMildCalculationTypeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionViewModel' in 'lueF3CalculationOption' LookUpEdit
        /// </summary>
        public string UILueF3CalculationOptiLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionView" +
            "Model";
        
        /// <summary>
        /// Type 'Gjennomsnitt' in 'lueF3CalculationOption' LookUpEdit
        /// </summary>
        public string UILueF3CalculationOptiLookUpEditValueAsString = "Gjennomsnitt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeLarsonCalculationType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ChangeLarsonCalculationTypeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionViewModel' in 'lueF3CalculationOption' LookUpEdit
        /// </summary>
        public string UILueF3CalculationOptiLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionView" +
            "Model";
        
        /// <summary>
        /// Type 'Gjennomsnitt' in 'lueF3CalculationOption' LookUpEdit
        /// </summary>
        public string UILueF3CalculationOptiLookUpEditValueAsString = "Gjennomsnitt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckElmanderStep9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckElmanderStep9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Elmander, Johan' cell equals 'Elmander, Johan'
        /// </summary>
        public string UIElmanderJohanCell1Text = "Elmander, Johan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell2Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of '6 av 9' cell equals '6 av 9'
        /// </summary>
        public string UIItem6av9Cell5Text = "6 av 9";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell9Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 0' cell equals '0 av 0'
        /// </summary>
        public string UIItem0av0Cell12Text = "0 av 0";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        
        public UIDpnlColumnsDockPanel UIDpnlColumnsDockPanel
        {
            get
            {
                if ((this.mUIDpnlColumnsDockPanel == null))
                {
                    this.mUIDpnlColumnsDockPanel = new UIDpnlColumnsDockPanel(this);
                }
                return this.mUIDpnlColumnsDockPanel;
            }
        }
        
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        
        private UIDpnlColumnsDockPanel mUIDpnlColumnsDockPanel;
        
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnderssonKennethCell
        {
            get
            {
                if ((this.mUIAnderssonKennethCell == null))
                {
                    this.mUIAnderssonKennethCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonKennethCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_EmployeeName";
                    this.mUIAnderssonKennethCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonKennethCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnderssonKennethCell;
            }
        }
        
        public DXCell UIBrolinThomasCell
        {
            get
            {
                if ((this.mUIBrolinThomasCell == null))
                {
                    this.mUIBrolinThomasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBrolinThomasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]Col_EmployeeName";
                    this.mUIBrolinThomasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBrolinThomasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBrolinThomasCell;
            }
        }
        
        public DXCell UIDahlinMartinCell
        {
            get
            {
                if ((this.mUIDahlinMartinCell == null))
                {
                    this.mUIDahlinMartinCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDahlinMartinCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]Col_EmployeeName";
                    this.mUIDahlinMartinCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDahlinMartinCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDahlinMartinCell;
            }
        }
        
        public DXCell UIDahlinMartinCell1
        {
            get
            {
                if ((this.mUIDahlinMartinCell1 == null))
                {
                    this.mUIDahlinMartinCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDahlinMartinCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]Col_EmployeeName";
                    this.mUIDahlinMartinCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDahlinMartinCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDahlinMartinCell1;
            }
        }
        
        public DXCell UIElmanderJohanCell
        {
            get
            {
                if ((this.mUIElmanderJohanCell == null))
                {
                    this.mUIElmanderJohanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIElmanderJohanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]Col_EmployeeName";
                    this.mUIElmanderJohanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIElmanderJohanCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIElmanderJohanCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnderssonKennethCell;
        
        private DXCell mUIBrolinThomasCell;
        
        private DXCell mUIDahlinMartinCell;
        
        private DXCell mUIDahlinMartinCell1;
        
        private DXCell mUIElmanderJohanCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlColumnsDockPanel : DXDockPanel
    {
        
        public UIDpnlColumnsDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlColumns";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel1_ContainerCustom UIDockPanel1_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel1_ContainerCustom == null))
                {
                    this.mUIDockPanel1_ContainerCustom = new UIDockPanel1_ContainerCustom(this);
                }
                return this.mUIDockPanel1_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel1_ContainerCustom mUIDockPanel1_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel1_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel1_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel1_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcExtraGridTable UIGcExtraGridTable
        {
            get
            {
                if ((this.mUIGcExtraGridTable == null))
                {
                    this.mUIGcExtraGridTable = new UIGcExtraGridTable(this);
                }
                return this.mUIGcExtraGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcExtraGridTable mUIGcExtraGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcExtraGridTable : DXGrid
    {
        
        public UIGcExtraGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIGCell
        {
            get
            {
                if ((this.mUIGCell == null))
                {
                    this.mUIGCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]9[Column]Col_F3Calc";
                    this.mUIGCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell;
            }
        }
        
        public DXCell UIItem5av7Cell
        {
            get
            {
                if ((this.mUIItem5av7Cell == null))
                {
                    this.mUIItem5av7Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av7Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]9[Column]Col_SH";
                    this.mUIItem5av7Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av7Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av7Cell;
            }
        }
        
        public DXCell UIItem0av2Cell
        {
            get
            {
                if ((this.mUIItem0av2Cell == null))
                {
                    this.mUIItem0av2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]9[Column]Col_F3";
                    this.mUIItem0av2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell;
            }
        }
        
        public DXCell UIItem0av0Cell
        {
            get
            {
                if ((this.mUIItem0av0Cell == null))
                {
                    this.mUIItem0av0Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]Col_F1F5";
                    this.mUIItem0av0Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell;
            }
        }
        
        public DXCell UIItem0av2Cell1
        {
            get
            {
                if ((this.mUIItem0av2Cell1 == null))
                {
                    this.mUIItem0av2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]Col_F3";
                    this.mUIItem0av2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell1;
            }
        }
        
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]Col_F3Calc";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        
        public DXCell UIItem9av9Cell
        {
            get
            {
                if ((this.mUIItem9av9Cell == null))
                {
                    this.mUIItem9av9Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem9av9Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]Col_SH";
                    this.mUIItem9av9Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem9av9Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem9av9Cell;
            }
        }
        
        public DXCell UIItem0av4Cell
        {
            get
            {
                if ((this.mUIItem0av4Cell == null))
                {
                    this.mUIItem0av4Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av4Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]Col_F3";
                    this.mUIItem0av4Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av4Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av4Cell;
            }
        }
        
        public DXCell UIItem0av0Cell1
        {
            get
            {
                if ((this.mUIItem0av0Cell1 == null))
                {
                    this.mUIItem0av0Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]Col_F1F5";
                    this.mUIItem0av0Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell1;
            }
        }
        
        public DXCell UIACell1
        {
            get
            {
                if ((this.mUIACell1 == null))
                {
                    this.mUIACell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]Col_F3Calc";
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell1;
            }
        }
        
        public DXCell UIItem6av9Cell
        {
            get
            {
                if ((this.mUIItem6av9Cell == null))
                {
                    this.mUIItem6av9Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6av9Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]5[Column]Col_SH";
                    this.mUIItem6av9Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6av9Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6av9Cell;
            }
        }
        
        public DXCell UIItem0av2Cell2
        {
            get
            {
                if ((this.mUIItem0av2Cell2 == null))
                {
                    this.mUIItem0av2Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]Col_F3";
                    this.mUIItem0av2Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell2;
            }
        }
        
        public DXCell UIItem0av2Cell3
        {
            get
            {
                if ((this.mUIItem0av2Cell3 == null))
                {
                    this.mUIItem0av2Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]Col_F1F5";
                    this.mUIItem0av2Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell3;
            }
        }
        
        public DXCell UIItem0av0Cell2
        {
            get
            {
                if ((this.mUIItem0av0Cell2 == null))
                {
                    this.mUIItem0av0Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]9[Column]Col_F1F5";
                    this.mUIItem0av0Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIGCell;
        
        private DXCell mUIItem5av7Cell;
        
        private DXCell mUIItem0av2Cell;
        
        private DXCell mUIItem0av0Cell;
        
        private DXCell mUIItem0av2Cell1;
        
        private DXCell mUIACell;
        
        private DXCell mUIItem9av9Cell;
        
        private DXCell mUIItem0av4Cell;
        
        private DXCell mUIItem0av0Cell1;
        
        private DXCell mUIACell1;
        
        private DXCell mUIItem6av9Cell;
        
        private DXCell mUIItem0av2Cell2;
        
        private DXCell mUIItem0av2Cell3;
        
        private DXCell mUIItem0av0Cell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable1 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable1(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        
        public UIDpnlColumnsDockPanel1 UIDpnlColumnsDockPanel
        {
            get
            {
                if ((this.mUIDpnlColumnsDockPanel == null))
                {
                    this.mUIDpnlColumnsDockPanel = new UIDpnlColumnsDockPanel1(this);
                }
                return this.mUIDpnlColumnsDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable1 mUIGcRosterPlanTable;
        
        private UIDpnlColumnsDockPanel1 mUIDpnlColumnsDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable1 : DXGrid
    {
        
        public UIGcRosterPlanTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIRavelliThomasCell
        {
            get
            {
                if ((this.mUIRavelliThomasCell == null))
                {
                    this.mUIRavelliThomasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRavelliThomasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]ColumnHandle1";
                    this.mUIRavelliThomasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRavelliThomasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRavelliThomasCell;
            }
        }
        
        public DXCell UIAnderssonKennethCell
        {
            get
            {
                if ((this.mUIAnderssonKennethCell == null))
                {
                    this.mUIAnderssonKennethCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonKennethCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle1";
                    this.mUIAnderssonKennethCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonKennethCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnderssonKennethCell;
            }
        }
        
        public DXCell UIBrolinThomasCell
        {
            get
            {
                if ((this.mUIBrolinThomasCell == null))
                {
                    this.mUIBrolinThomasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBrolinThomasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]ColumnHandle1";
                    this.mUIBrolinThomasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBrolinThomasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBrolinThomasCell;
            }
        }
        
        public DXCell UIDahlinMartinCell
        {
            get
            {
                if ((this.mUIDahlinMartinCell == null))
                {
                    this.mUIDahlinMartinCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDahlinMartinCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]ColumnHandle1";
                    this.mUIDahlinMartinCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDahlinMartinCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDahlinMartinCell;
            }
        }
        
        public DXCell UIDahlinMartinCell1
        {
            get
            {
                if ((this.mUIDahlinMartinCell1 == null))
                {
                    this.mUIDahlinMartinCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDahlinMartinCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]ColumnHandle1";
                    this.mUIDahlinMartinCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDahlinMartinCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDahlinMartinCell1;
            }
        }
        
        public DXCell UIDahlinMartinCell2
        {
            get
            {
                if ((this.mUIDahlinMartinCell2 == null))
                {
                    this.mUIDahlinMartinCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDahlinMartinCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]ColumnHandle1";
                    this.mUIDahlinMartinCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDahlinMartinCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDahlinMartinCell2;
            }
        }
        
        public DXCell UIElmanderJohanCell
        {
            get
            {
                if ((this.mUIElmanderJohanCell == null))
                {
                    this.mUIElmanderJohanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIElmanderJohanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]ColumnHandle1";
                    this.mUIElmanderJohanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIElmanderJohanCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIElmanderJohanCell;
            }
        }
        
        public DXCell UIIbrahimovicZlatanCell
        {
            get
            {
                if ((this.mUIIbrahimovicZlatanCell == null))
                {
                    this.mUIIbrahimovicZlatanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIIbrahimovicZlatanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]11[Column]ColumnHandle1";
                    this.mUIIbrahimovicZlatanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIbrahimovicZlatanCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIIbrahimovicZlatanCell;
            }
        }
        
        public DXCell UILarssonHenrikCell
        {
            get
            {
                if ((this.mUILarssonHenrikCell == null))
                {
                    this.mUILarssonHenrikCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILarssonHenrikCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]ColumnHandle1";
                    this.mUILarssonHenrikCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILarssonHenrikCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILarssonHenrikCell;
            }
        }
        
        public DXCell UIMildHåkanCell
        {
            get
            {
                if ((this.mUIMildHåkanCell == null))
                {
                    this.mUIMildHåkanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMildHåkanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]14[Column]ColumnHandle1";
                    this.mUIMildHåkanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMildHåkanCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIMildHåkanCell;
            }
        }
        
        public DXCell UIVAKANTCell
        {
            get
            {
                if ((this.mUIVAKANTCell == null))
                {
                    this.mUIVAKANTCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVAKANTCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]16[Column]ColumnHandle1";
                    this.mUIVAKANTCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVAKANTCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIVAKANTCell;
            }
        }
        
        public DXCell UIElmanderJohanCell1
        {
            get
            {
                if ((this.mUIElmanderJohanCell1 == null))
                {
                    this.mUIElmanderJohanCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIElmanderJohanCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]EmployeeName";
                    this.mUIElmanderJohanCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIElmanderJohanCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIElmanderJohanCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIRavelliThomasCell;
        
        private DXCell mUIAnderssonKennethCell;
        
        private DXCell mUIBrolinThomasCell;
        
        private DXCell mUIDahlinMartinCell;
        
        private DXCell mUIDahlinMartinCell1;
        
        private DXCell mUIDahlinMartinCell2;
        
        private DXCell mUIElmanderJohanCell;
        
        private DXCell mUIIbrahimovicZlatanCell;
        
        private DXCell mUILarssonHenrikCell;
        
        private DXCell mUIMildHåkanCell;
        
        private DXCell mUIVAKANTCell;
        
        private DXCell mUIElmanderJohanCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlColumnsDockPanel1 : DXDockPanel
    {
        
        public UIDpnlColumnsDockPanel1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlColumns";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel1_ContainerCustom1 UIDockPanel1_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel1_ContainerCustom == null))
                {
                    this.mUIDockPanel1_ContainerCustom = new UIDockPanel1_ContainerCustom1(this);
                }
                return this.mUIDockPanel1_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel1_ContainerCustom1 mUIDockPanel1_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel1_ContainerCustom1 : DXTestControl
    {
        
        public UIDockPanel1_ContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel1_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcExtraGridTable1 UIGcExtraGridTable
        {
            get
            {
                if ((this.mUIGcExtraGridTable == null))
                {
                    this.mUIGcExtraGridTable = new UIGcExtraGridTable1(this);
                }
                return this.mUIGcExtraGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcExtraGridTable1 mUIGcExtraGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcExtraGridTable1 : DXGrid
    {
        
        public UIGcExtraGridTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIGCell
        {
            get
            {
                if ((this.mUIGCell == null))
                {
                    this.mUIGCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle42";
                    this.mUIGCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell;
            }
        }
        
        public DXCell UIItem7av7Cell
        {
            get
            {
                if ((this.mUIItem7av7Cell == null))
                {
                    this.mUIItem7av7Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem7av7Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle43";
                    this.mUIItem7av7Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem7av7Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem7av7Cell;
            }
        }
        
        public DXCell UIItem0av4Cell
        {
            get
            {
                if ((this.mUIItem0av4Cell == null))
                {
                    this.mUIItem0av4Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av4Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle48";
                    this.mUIItem0av4Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av4Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av4Cell;
            }
        }
        
        public DXCell UIItem0av0Cell
        {
            get
            {
                if ((this.mUIItem0av0Cell == null))
                {
                    this.mUIItem0av0Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle49";
                    this.mUIItem0av0Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell;
            }
        }
        
        public DXCell UIGCell1
        {
            get
            {
                if ((this.mUIGCell1 == null))
                {
                    this.mUIGCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle42";
                    this.mUIGCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell1;
            }
        }
        
        public DXCell UIItem2av7Cell
        {
            get
            {
                if ((this.mUIItem2av7Cell == null))
                {
                    this.mUIItem2av7Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2av7Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle43";
                    this.mUIItem2av7Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2av7Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2av7Cell;
            }
        }
        
        public DXCell UIItem0av0Cell1
        {
            get
            {
                if ((this.mUIItem0av0Cell1 == null))
                {
                    this.mUIItem0av0Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle48";
                    this.mUIItem0av0Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell1;
            }
        }
        
        public DXCell UIItem0av0Cell2
        {
            get
            {
                if ((this.mUIItem0av0Cell2 == null))
                {
                    this.mUIItem0av0Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle49";
                    this.mUIItem0av0Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell2;
            }
        }
        
        public DXCell UIGCell2
        {
            get
            {
                if ((this.mUIGCell2 == null))
                {
                    this.mUIGCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle42";
                    this.mUIGCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell2;
            }
        }
        
        public DXCell UIItem5av7Cell
        {
            get
            {
                if ((this.mUIItem5av7Cell == null))
                {
                    this.mUIItem5av7Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av7Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle43";
                    this.mUIItem5av7Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av7Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av7Cell;
            }
        }
        
        public DXCell UIItem0av2Cell
        {
            get
            {
                if ((this.mUIItem0av2Cell == null))
                {
                    this.mUIItem0av2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle48";
                    this.mUIItem0av2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell;
            }
        }
        
        public DXCell UIItem0av1Cell
        {
            get
            {
                if ((this.mUIItem0av1Cell == null))
                {
                    this.mUIItem0av1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle49";
                    this.mUIItem0av1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av1Cell;
            }
        }
        
        public DXCell UIGCell3
        {
            get
            {
                if ((this.mUIGCell3 == null))
                {
                    this.mUIGCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle42";
                    this.mUIGCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell3;
            }
        }
        
        public DXCell UIItem5av7Cell1
        {
            get
            {
                if ((this.mUIItem5av7Cell1 == null))
                {
                    this.mUIItem5av7Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av7Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle43";
                    this.mUIItem5av7Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av7Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av7Cell1;
            }
        }
        
        public DXCell UIItem0av2Cell1
        {
            get
            {
                if ((this.mUIItem0av2Cell1 == null))
                {
                    this.mUIItem0av2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle48";
                    this.mUIItem0av2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell1;
            }
        }
        
        public DXCell UIItem0av0Cell3
        {
            get
            {
                if ((this.mUIItem0av0Cell3 == null))
                {
                    this.mUIItem0av0Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle49";
                    this.mUIItem0av0Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell3;
            }
        }
        
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle42";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        
        public DXCell UIItem6av9Cell
        {
            get
            {
                if ((this.mUIItem6av9Cell == null))
                {
                    this.mUIItem6av9Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6av9Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle43";
                    this.mUIItem6av9Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6av9Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6av9Cell;
            }
        }
        
        public DXCell UIItem2224Cell
        {
            get
            {
                if ((this.mUIItem2224Cell == null))
                {
                    this.mUIItem2224Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2224Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle44";
                    this.mUIItem2224Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2224Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2224Cell;
            }
        }
        
        public DXCell UIItem2965Cell
        {
            get
            {
                if ((this.mUIItem2965Cell == null))
                {
                    this.mUIItem2965Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2965Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle45";
                    this.mUIItem2965Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2965Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2965Cell;
            }
        }
        
        public DXCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle46";
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public DXCell UIItem2965Cell1
        {
            get
            {
                if ((this.mUIItem2965Cell1 == null))
                {
                    this.mUIItem2965Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2965Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle47";
                    this.mUIItem2965Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2965Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2965Cell1;
            }
        }
        
        public DXCell UIItem0av2Cell2
        {
            get
            {
                if ((this.mUIItem0av2Cell2 == null))
                {
                    this.mUIItem0av2Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle48";
                    this.mUIItem0av2Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell2;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle49";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIGCell4
        {
            get
            {
                if ((this.mUIGCell4 == null))
                {
                    this.mUIGCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle42";
                    this.mUIGCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell4;
            }
        }
        
        public DXCell UIItem6av9Cell1
        {
            get
            {
                if ((this.mUIItem6av9Cell1 == null))
                {
                    this.mUIItem6av9Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6av9Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle43";
                    this.mUIItem6av9Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6av9Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6av9Cell1;
            }
        }
        
        public DXCell UIItem1216Cell
        {
            get
            {
                if ((this.mUIItem1216Cell == null))
                {
                    this.mUIItem1216Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1216Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle44";
                    this.mUIItem1216Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1216Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1216Cell;
            }
        }
        
        public DXCell UIItem1621Cell
        {
            get
            {
                if ((this.mUIItem1621Cell == null))
                {
                    this.mUIItem1621Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1621Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle45";
                    this.mUIItem1621Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1621Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1621Cell;
            }
        }
        
        public DXCell UIItem0Cell1
        {
            get
            {
                if ((this.mUIItem0Cell1 == null))
                {
                    this.mUIItem0Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle46";
                    this.mUIItem0Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0Cell1;
            }
        }
        
        public DXCell UIItem1621Cell1
        {
            get
            {
                if ((this.mUIItem1621Cell1 == null))
                {
                    this.mUIItem1621Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1621Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle47";
                    this.mUIItem1621Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1621Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1621Cell1;
            }
        }
        
        public DXCell UIItem0av2Cell3
        {
            get
            {
                if ((this.mUIItem0av2Cell3 == null))
                {
                    this.mUIItem0av2Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle48";
                    this.mUIItem0av2Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell3;
            }
        }
        
        public DXCell UIItem0av1Cell1
        {
            get
            {
                if ((this.mUIItem0av1Cell1 == null))
                {
                    this.mUIItem0av1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle49";
                    this.mUIItem0av1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av1Cell1;
            }
        }
        
        public DXCell UIGCell5
        {
            get
            {
                if ((this.mUIGCell5 == null))
                {
                    this.mUIGCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle42";
                    this.mUIGCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell5;
            }
        }
        
        public DXCell UIItem6av7Cell
        {
            get
            {
                if ((this.mUIItem6av7Cell == null))
                {
                    this.mUIItem6av7Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6av7Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle43";
                    this.mUIItem6av7Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6av7Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6av7Cell;
            }
        }
        
        public DXCell UIItem966Cell
        {
            get
            {
                if ((this.mUIItem966Cell == null))
                {
                    this.mUIItem966Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem966Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle44";
                    this.mUIItem966Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem966Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem966Cell;
            }
        }
        
        public DXCell UIItem1288Cell
        {
            get
            {
                if ((this.mUIItem1288Cell == null))
                {
                    this.mUIItem1288Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1288Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle45";
                    this.mUIItem1288Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1288Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1288Cell;
            }
        }
        
        public DXCell UIItem0Cell2
        {
            get
            {
                if ((this.mUIItem0Cell2 == null))
                {
                    this.mUIItem0Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle46";
                    this.mUIItem0Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0Cell2;
            }
        }
        
        public DXCell UIItem1288Cell1
        {
            get
            {
                if ((this.mUIItem1288Cell1 == null))
                {
                    this.mUIItem1288Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1288Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle47";
                    this.mUIItem1288Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1288Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1288Cell1;
            }
        }
        
        public DXCell UIItem0av3Cell
        {
            get
            {
                if ((this.mUIItem0av3Cell == null))
                {
                    this.mUIItem0av3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle48";
                    this.mUIItem0av3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av3Cell;
            }
        }
        
        public DXCell UIItem0av0Cell4
        {
            get
            {
                if ((this.mUIItem0av0Cell4 == null))
                {
                    this.mUIItem0av0Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle49";
                    this.mUIItem0av0Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell4;
            }
        }
        
        public DXCell UIICell
        {
            get
            {
                if ((this.mUIICell == null))
                {
                    this.mUIICell = new DXCell(this);
                    #region Search Criteria
                    this.mUIICell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle42";
                    this.mUIICell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIICell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIICell;
            }
        }
        
        public DXCell UIItem8av9Cell
        {
            get
            {
                if ((this.mUIItem8av9Cell == null))
                {
                    this.mUIItem8av9Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem8av9Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle43";
                    this.mUIItem8av9Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem8av9Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem8av9Cell;
            }
        }
        
        public DXCell UIItem1066Cell
        {
            get
            {
                if ((this.mUIItem1066Cell == null))
                {
                    this.mUIItem1066Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1066Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle44";
                    this.mUIItem1066Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1066Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1066Cell;
            }
        }
        
        public DXCell UIItem1421Cell
        {
            get
            {
                if ((this.mUIItem1421Cell == null))
                {
                    this.mUIItem1421Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1421Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle45";
                    this.mUIItem1421Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1421Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1421Cell;
            }
        }
        
        public DXCell UIItem0Cell3
        {
            get
            {
                if ((this.mUIItem0Cell3 == null))
                {
                    this.mUIItem0Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle46";
                    this.mUIItem0Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0Cell3;
            }
        }
        
        public DXCell UIItem1421Cell1
        {
            get
            {
                if ((this.mUIItem1421Cell1 == null))
                {
                    this.mUIItem1421Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1421Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle47";
                    this.mUIItem1421Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1421Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1421Cell1;
            }
        }
        
        public DXCell UIItem0av0Cell5
        {
            get
            {
                if ((this.mUIItem0av0Cell5 == null))
                {
                    this.mUIItem0av0Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle48";
                    this.mUIItem0av0Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell5;
            }
        }
        
        public DXCell UIItem0av0Cell6
        {
            get
            {
                if ((this.mUIItem0av0Cell6 == null))
                {
                    this.mUIItem0av0Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle49";
                    this.mUIItem0av0Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell6;
            }
        }
        
        public DXCell UIGCell6
        {
            get
            {
                if ((this.mUIGCell6 == null))
                {
                    this.mUIGCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle40";
                    this.mUIGCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell6;
            }
        }
        
        public DXCell UIItem7av7Cell1
        {
            get
            {
                if ((this.mUIItem7av7Cell1 == null))
                {
                    this.mUIItem7av7Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem7av7Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle41";
                    this.mUIItem7av7Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem7av7Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem7av7Cell1;
            }
        }
        
        public DXCell UIItem0av4Cell1
        {
            get
            {
                if ((this.mUIItem0av4Cell1 == null))
                {
                    this.mUIItem0av4Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av4Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle46";
                    this.mUIItem0av4Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av4Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av4Cell1;
            }
        }
        
        public DXCell UIItem0av0Cell7
        {
            get
            {
                if ((this.mUIItem0av0Cell7 == null))
                {
                    this.mUIItem0av0Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle47";
                    this.mUIItem0av0Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell7;
            }
        }
        
        public DXCell UIItem5865Cell
        {
            get
            {
                if ((this.mUIItem5865Cell == null))
                {
                    this.mUIItem5865Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5865Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle45";
                    this.mUIItem5865Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5865Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5865Cell;
            }
        }
        
        public DXCell UIGCell7
        {
            get
            {
                if ((this.mUIGCell7 == null))
                {
                    this.mUIGCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle40";
                    this.mUIGCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell7;
            }
        }
        
        public DXCell UIItem2av7Cell1
        {
            get
            {
                if ((this.mUIItem2av7Cell1 == null))
                {
                    this.mUIItem2av7Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2av7Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle41";
                    this.mUIItem2av7Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2av7Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2av7Cell1;
            }
        }
        
        public DXCell UIItem0av0Cell8
        {
            get
            {
                if ((this.mUIItem0av0Cell8 == null))
                {
                    this.mUIItem0av0Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle46";
                    this.mUIItem0av0Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell8;
            }
        }
        
        public DXCell UIItem0av0Cell9
        {
            get
            {
                if ((this.mUIItem0av0Cell9 == null))
                {
                    this.mUIItem0av0Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle47";
                    this.mUIItem0av0Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell9;
            }
        }
        
        public DXCell UIGCell8
        {
            get
            {
                if ((this.mUIGCell8 == null))
                {
                    this.mUIGCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]5[Column]ColumnHandle40";
                    this.mUIGCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell8;
            }
        }
        
        public DXCell UIItem5av7Cell2
        {
            get
            {
                if ((this.mUIItem5av7Cell2 == null))
                {
                    this.mUIItem5av7Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av7Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle41";
                    this.mUIItem5av7Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av7Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av7Cell2;
            }
        }
        
        public DXCell UIItem0av2Cell4
        {
            get
            {
                if ((this.mUIItem0av2Cell4 == null))
                {
                    this.mUIItem0av2Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle46";
                    this.mUIItem0av2Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell4;
            }
        }
        
        public DXCell UIItem0av1Cell2
        {
            get
            {
                if ((this.mUIItem0av1Cell2 == null))
                {
                    this.mUIItem0av1Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av1Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle47";
                    this.mUIItem0av1Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av1Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av1Cell2;
            }
        }
        
        public DXCell UIGCell9
        {
            get
            {
                if ((this.mUIGCell9 == null))
                {
                    this.mUIGCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle40";
                    this.mUIGCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell9;
            }
        }
        
        public DXCell UIItem5av7Cell3
        {
            get
            {
                if ((this.mUIItem5av7Cell3 == null))
                {
                    this.mUIItem5av7Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av7Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle41";
                    this.mUIItem5av7Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av7Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av7Cell3;
            }
        }
        
        public DXCell UIItem0av2Cell5
        {
            get
            {
                if ((this.mUIItem0av2Cell5 == null))
                {
                    this.mUIItem0av2Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle46";
                    this.mUIItem0av2Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell5;
            }
        }
        
        public DXCell UIItem0av0Cell10
        {
            get
            {
                if ((this.mUIItem0av0Cell10 == null))
                {
                    this.mUIItem0av0Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle47";
                    this.mUIItem0av0Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell10;
            }
        }
        
        public DXCell UIItem0av5Cell
        {
            get
            {
                if ((this.mUIItem0av5Cell == null))
                {
                    this.mUIItem0av5Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av5Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]ColumnHandle46";
                    this.mUIItem0av5Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av5Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av5Cell;
            }
        }
        
        public DXCell UIItem2av9Cell
        {
            get
            {
                if ((this.mUIItem2av9Cell == null))
                {
                    this.mUIItem2av9Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2av9Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]ColumnHandle41";
                    this.mUIItem2av9Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2av9Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2av9Cell;
            }
        }
        
        public DXCell UIItem6av9Cell2
        {
            get
            {
                if ((this.mUIItem6av9Cell2 == null))
                {
                    this.mUIItem6av9Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6av9Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]5[Column]ColumnHandle41";
                    this.mUIItem6av9Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6av9Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6av9Cell2;
            }
        }
        
        public DXCell UIItem0av2Cell6
        {
            get
            {
                if ((this.mUIItem0av2Cell6 == null))
                {
                    this.mUIItem0av2Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]ColumnHandle46";
                    this.mUIItem0av2Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell6;
            }
        }
        
        public DXCell UIGCell10
        {
            get
            {
                if ((this.mUIGCell10 == null))
                {
                    this.mUIGCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]9[Column]ColumnHandle40";
                    this.mUIGCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell10;
            }
        }
        
        public DXCell UIItem0av2Cell7
        {
            get
            {
                if ((this.mUIItem0av2Cell7 == null))
                {
                    this.mUIItem0av2Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]9[Column]ColumnHandle46";
                    this.mUIItem0av2Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell7;
            }
        }
        
        public DXCell UIItem0av0Cell11
        {
            get
            {
                if ((this.mUIItem0av0Cell11 == null))
                {
                    this.mUIItem0av0Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]ColumnHandle47";
                    this.mUIItem0av0Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell11;
            }
        }
        
        public DXCell UIItem0av2Cell8
        {
            get
            {
                if ((this.mUIItem0av2Cell8 == null))
                {
                    this.mUIItem0av2Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]5[Column]ColumnHandle47";
                    this.mUIItem0av2Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell8;
            }
        }
        
        public DXCell UIACell1
        {
            get
            {
                if ((this.mUIACell1 == null))
                {
                    this.mUIACell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]11[Column]ColumnHandle40";
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell1;
            }
        }
        
        public DXCell UIItem6av9Cell3
        {
            get
            {
                if ((this.mUIItem6av9Cell3 == null))
                {
                    this.mUIItem6av9Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6av9Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle41";
                    this.mUIItem6av9Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6av9Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6av9Cell3;
            }
        }
        
        public DXCell UIGCell11
        {
            get
            {
                if ((this.mUIGCell11 == null))
                {
                    this.mUIGCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle40";
                    this.mUIGCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell11;
            }
        }
        
        public DXCell UIItem6av9Cell4
        {
            get
            {
                if ((this.mUIItem6av9Cell4 == null))
                {
                    this.mUIItem6av9Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6av9Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle41";
                    this.mUIItem6av9Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6av9Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6av9Cell4;
            }
        }
        
        public DXCell UIGCell12
        {
            get
            {
                if ((this.mUIGCell12 == null))
                {
                    this.mUIGCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle40";
                    this.mUIGCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell12;
            }
        }
        
        public DXCell UIItem6av7Cell1
        {
            get
            {
                if ((this.mUIItem6av7Cell1 == null))
                {
                    this.mUIItem6av7Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6av7Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle41";
                    this.mUIItem6av7Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6av7Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6av7Cell1;
            }
        }
        
        public DXCell UIICell1
        {
            get
            {
                if ((this.mUIICell1 == null))
                {
                    this.mUIICell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIICell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle40";
                    this.mUIICell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIICell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIICell1;
            }
        }
        
        public DXCell UIItem8av9Cell1
        {
            get
            {
                if ((this.mUIItem8av9Cell1 == null))
                {
                    this.mUIItem8av9Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem8av9Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle41";
                    this.mUIItem8av9Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem8av9Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem8av9Cell1;
            }
        }
        
        public DXCell UIACell2
        {
            get
            {
                if ((this.mUIACell2 == null))
                {
                    this.mUIACell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]F3Calc";
                    this.mUIACell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell2;
            }
        }
        
        public DXCell UIItem6av9Cell5
        {
            get
            {
                if ((this.mUIItem6av9Cell5 == null))
                {
                    this.mUIItem6av9Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6av9Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]SH";
                    this.mUIItem6av9Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6av9Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6av9Cell5;
            }
        }
        
        public DXCell UIItem0av2Cell9
        {
            get
            {
                if ((this.mUIItem0av2Cell9 == null))
                {
                    this.mUIItem0av2Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]F3";
                    this.mUIItem0av2Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell9;
            }
        }
        
        public DXCell UIItem0av0Cell12
        {
            get
            {
                if ((this.mUIItem0av0Cell12 == null))
                {
                    this.mUIItem0av0Cell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av0Cell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]F1F5";
                    this.mUIItem0av0Cell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av0Cell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av0Cell12;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIGCell;
        
        private DXCell mUIItem7av7Cell;
        
        private DXCell mUIItem0av4Cell;
        
        private DXCell mUIItem0av0Cell;
        
        private DXCell mUIGCell1;
        
        private DXCell mUIItem2av7Cell;
        
        private DXCell mUIItem0av0Cell1;
        
        private DXCell mUIItem0av0Cell2;
        
        private DXCell mUIGCell2;
        
        private DXCell mUIItem5av7Cell;
        
        private DXCell mUIItem0av2Cell;
        
        private DXCell mUIItem0av1Cell;
        
        private DXCell mUIGCell3;
        
        private DXCell mUIItem5av7Cell1;
        
        private DXCell mUIItem0av2Cell1;
        
        private DXCell mUIItem0av0Cell3;
        
        private DXCell mUIACell;
        
        private DXCell mUIItem6av9Cell;
        
        private DXCell mUIItem2224Cell;
        
        private DXCell mUIItem2965Cell;
        
        private DXCell mUIItem0Cell;
        
        private DXCell mUIItem2965Cell1;
        
        private DXCell mUIItem0av2Cell2;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIGCell4;
        
        private DXCell mUIItem6av9Cell1;
        
        private DXCell mUIItem1216Cell;
        
        private DXCell mUIItem1621Cell;
        
        private DXCell mUIItem0Cell1;
        
        private DXCell mUIItem1621Cell1;
        
        private DXCell mUIItem0av2Cell3;
        
        private DXCell mUIItem0av1Cell1;
        
        private DXCell mUIGCell5;
        
        private DXCell mUIItem6av7Cell;
        
        private DXCell mUIItem966Cell;
        
        private DXCell mUIItem1288Cell;
        
        private DXCell mUIItem0Cell2;
        
        private DXCell mUIItem1288Cell1;
        
        private DXCell mUIItem0av3Cell;
        
        private DXCell mUIItem0av0Cell4;
        
        private DXCell mUIICell;
        
        private DXCell mUIItem8av9Cell;
        
        private DXCell mUIItem1066Cell;
        
        private DXCell mUIItem1421Cell;
        
        private DXCell mUIItem0Cell3;
        
        private DXCell mUIItem1421Cell1;
        
        private DXCell mUIItem0av0Cell5;
        
        private DXCell mUIItem0av0Cell6;
        
        private DXCell mUIGCell6;
        
        private DXCell mUIItem7av7Cell1;
        
        private DXCell mUIItem0av4Cell1;
        
        private DXCell mUIItem0av0Cell7;
        
        private DXCell mUIItem5865Cell;
        
        private DXCell mUIGCell7;
        
        private DXCell mUIItem2av7Cell1;
        
        private DXCell mUIItem0av0Cell8;
        
        private DXCell mUIItem0av0Cell9;
        
        private DXCell mUIGCell8;
        
        private DXCell mUIItem5av7Cell2;
        
        private DXCell mUIItem0av2Cell4;
        
        private DXCell mUIItem0av1Cell2;
        
        private DXCell mUIGCell9;
        
        private DXCell mUIItem5av7Cell3;
        
        private DXCell mUIItem0av2Cell5;
        
        private DXCell mUIItem0av0Cell10;
        
        private DXCell mUIItem0av5Cell;
        
        private DXCell mUIItem2av9Cell;
        
        private DXCell mUIItem6av9Cell2;
        
        private DXCell mUIItem0av2Cell6;
        
        private DXCell mUIGCell10;
        
        private DXCell mUIItem0av2Cell7;
        
        private DXCell mUIItem0av0Cell11;
        
        private DXCell mUIItem0av2Cell8;
        
        private DXCell mUIACell1;
        
        private DXCell mUIItem6av9Cell3;
        
        private DXCell mUIGCell11;
        
        private DXCell mUIItem6av9Cell4;
        
        private DXCell mUIGCell12;
        
        private DXCell mUIItem6av7Cell1;
        
        private DXCell mUIICell1;
        
        private DXCell mUIItem8av9Cell1;
        
        private DXCell mUIACell2;
        
        private DXCell mUIItem6av9Cell5;
        
        private DXCell mUIItem0av2Cell9;
        
        private DXCell mUIItem0av0Cell12;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsatteiarbeidsplanWindow : DXWindow
    {
        
        public UIAnsatteiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlOuterClient UIPanelControlOuterClient
        {
            get
            {
                if ((this.mUIPanelControlOuterClient == null))
                {
                    this.mUIPanelControlOuterClient = new UIPanelControlOuterClient(this);
                }
                return this.mUIPanelControlOuterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlOuterClient mUIPanelControlOuterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlOuterClient : DXTestControl
    {
        
        public UIPanelControlOuterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        
        public UIPanelControlRightClient UIPanelControlRightClient
        {
            get
            {
                if ((this.mUIPanelControlRightClient == null))
                {
                    this.mUIPanelControlRightClient = new UIPanelControlRightClient(this);
                }
                return this.mUIPanelControlRightClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient mUIPanelControlLeftClient;
        
        private UIPanelControlRightClient mUIPanelControlRightClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlLeftClient : DXTestControl
    {
        
        public UIPanelControlLeftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITreeListEmployeeTreeList UITreeListEmployeeTreeList
        {
            get
            {
                if ((this.mUITreeListEmployeeTreeList == null))
                {
                    this.mUITreeListEmployeeTreeList = new UITreeListEmployeeTreeList(this);
                }
                return this.mUITreeListEmployeeTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListEmployeeTreeList mUITreeListEmployeeTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListEmployeeTreeList : DXTreeList
    {
        
        public UITreeListEmployeeTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode6TreeListNode UINode6TreeListNode
        {
            get
            {
                if ((this.mUINode6TreeListNode == null))
                {
                    this.mUINode6TreeListNode = new UINode6TreeListNode(this);
                }
                return this.mUINode6TreeListNode;
            }
        }
        
        public UINode5TreeListNode UINode5TreeListNode
        {
            get
            {
                if ((this.mUINode5TreeListNode == null))
                {
                    this.mUINode5TreeListNode = new UINode5TreeListNode(this);
                }
                return this.mUINode5TreeListNode;
            }
        }
        
        public UINode7TreeListNode UINode7TreeListNode
        {
            get
            {
                if ((this.mUINode7TreeListNode == null))
                {
                    this.mUINode7TreeListNode = new UINode7TreeListNode(this);
                }
                return this.mUINode7TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode6TreeListNode mUINode6TreeListNode;
        
        private UINode5TreeListNode mUINode5TreeListNode;
        
        private UINode7TreeListNode mUINode7TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode6TreeListNode : DXTreeListNode
    {
        
        public UINode6TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node6";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem7MildHåkanTreeListCell
        {
            get
            {
                if ((this.mUIItem7MildHåkanTreeListCell == null))
                {
                    this.mUIItem7MildHåkanTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem7MildHåkanTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem7MildHåkanTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem7MildHåkanTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem7MildHåkanTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem7MildHåkanTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode5TreeListNode : DXTreeListNode
    {
        
        public UINode5TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node5";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem6LarssonHenrikTreeListCell
        {
            get
            {
                if ((this.mUIItem6LarssonHenrikTreeListCell == null))
                {
                    this.mUIItem6LarssonHenrikTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem6LarssonHenrikTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem6LarssonHenrikTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem6LarssonHenrikTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem6LarssonHenrikTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem6LarssonHenrikTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode7TreeListNode : DXTreeListNode
    {
        
        public UINode7TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node7";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem8VAKANTTreeListCell
        {
            get
            {
                if ((this.mUIItem8VAKANTTreeListCell == null))
                {
                    this.mUIItem8VAKANTTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem8VAKANTTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem8VAKANTTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem8VAKANTTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem8VAKANTTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem8VAKANTTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlRightClient : DXTestControl
    {
        
        public UIPanelControlRightClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlRight";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIEmployeeEditorsViewCustom UIEmployeeEditorsViewCustom
        {
            get
            {
                if ((this.mUIEmployeeEditorsViewCustom == null))
                {
                    this.mUIEmployeeEditorsViewCustom = new UIEmployeeEditorsViewCustom(this);
                }
                return this.mUIEmployeeEditorsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeEditorsViewCustom mUIEmployeeEditorsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeEditorsViewCustom : DXTestControl
    {
        
        public UIEmployeeEditorsViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeEditorsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeEditorsView";
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIXscContentScrollableControl UIXscContentScrollableControl
        {
            get
            {
                if ((this.mUIXscContentScrollableControl == null))
                {
                    this.mUIXscContentScrollableControl = new UIXscContentScrollableControl(this);
                }
                return this.mUIXscContentScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscContentScrollableControl mUIXscContentScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXscContentScrollableControl : DXScrollableControl
    {
        
        public UIXscContentScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            #endregion
        }
        
        #region Properties
        public UIGroupControlViewHostCustom UIGroupControlViewHostCustom
        {
            get
            {
                if ((this.mUIGroupControlViewHostCustom == null))
                {
                    this.mUIGroupControlViewHostCustom = new UIGroupControlViewHostCustom(this);
                }
                return this.mUIGroupControlViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlViewHostCustom mUIGroupControlViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlViewHostCustom : DXTestControl
    {
        
        public UIGroupControlViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControlViewHost";
            #endregion
        }
        
        #region Properties
        public UIGroupControlClient UIGroupControlClient
        {
            get
            {
                if ((this.mUIGroupControlClient == null))
                {
                    this.mUIGroupControlClient = new UIGroupControlClient(this);
                }
                return this.mUIGroupControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlClient mUIGroupControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlClient : DXTestControl
    {
        
        public UIGroupControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerF3CalCustom UIEmployeeManagerF3CalCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerF3CalCustom == null))
                {
                    this.mUIEmployeeManagerF3CalCustom = new UIEmployeeManagerF3CalCustom(this);
                }
                return this.mUIEmployeeManagerF3CalCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerF3CalCustom mUIEmployeeManagerF3CalCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerF3CalCustom : DXTestControl
    {
        
        public UIEmployeeManagerF3CalCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerF3CalculationOptionView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerF3CalculationOptionView";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UILueF3CalculationOptiLookUpEdit
        {
            get
            {
                if ((this.mUILueF3CalculationOptiLookUpEdit == null))
                {
                    this.mUILueF3CalculationOptiLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILueF3CalculationOptiLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "lueF3CalculationOption";
                    this.mUILueF3CalculationOptiLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
                    #endregion
                }
                return this.mUILueF3CalculationOptiLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUILueF3CalculationOptiLookUpEdit;
        #endregion
    }
}
