// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _023_Test_Omregnet_Tid.UIMapVS2017_2Classes
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v19_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMapVS2017_2
    {
        
        /// <summary>
        /// SelectChopinInSubTabBanks
        /// </summary>
        public void SelectChopinInSubTabBanks()
        {
            #region Variable Declarations
            WinClient uIAnsatteClient = this.UIGatWindow.UIItemWindow.UIAnsatteClient;
            #endregion

            // Click 'Ansatte' client
            Mouse.Click(uIAnsatteClient, new Point(40, 78));
        }
        
        /// <summary>
        /// SelectMozartInSubTabBanks
        /// </summary>
        public void SelectMozartInSubTabBanks()
        {
            #region Variable Declarations
            WinClient uIAnsatteClient = this.UIGatWindow.UIItemWindow.UIAnsatteClient;
            #endregion

            // Click 'Ansatte' client
            Mouse.Click(uIAnsatteClient, new Point(70, 113));
        }
        
        /// <summary>
        /// SelectSchubertInSubTabBanks
        /// </summary>
        public void SelectSchubertInSubTabBanks()
        {
            #region Variable Declarations
            WinClient uIAnsatteClient = this.UIGatWindow.UIItemWindow.UIAnsatteClient;
            #endregion

            // Click 'Ansatte' client
            Mouse.Click(uIAnsatteClient, new Point(39, 126));
        }
        
        /// <summary>
        /// CheckBrahmsCalculations - Use 'CheckBrahmsCalculationsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckBrahmsCalculations()
        {
            #region Variable Declarations
            DXCell uIItem355Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem355Cell;
            DXCell uIItem5Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5Cell;
            DXCell uIItem305Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem305Cell;
            DXCell uIItem1065Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem1065Cell;
            DXCell uIItem15Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem15Cell;
            DXCell uIItem15Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem15Cell1;
            DXCell uIItem15Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem15Cell2;
            DXCell uIItem5Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5Cell1;
            DXCell uIItem975Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem975Cell;
            DXCell uIItem915Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem915Cell;
            DXCell uIItem915Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem915Cell1;
            DXCell uIItem1408Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem1408Cell;
            #endregion

            // Verify that the 'Text' property of '35,5' cell equals '35,5'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem355CellText, uIItem355Cell.Text);

            // Verify that the 'Text' property of '5' cell equals '5'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem5CellText, uIItem5Cell.Text);

            // Verify that the 'Text' property of '-30,5' cell equals '-30,5'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem305CellText, uIItem305Cell.Text);

            // Verify that the 'Text' property of '106,5' cell equals '106,5'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem1065CellText, uIItem1065Cell.Text);

            // Verify that the 'Text' property of '15' cell equals '15'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem15CellText, uIItem15Cell.Text);

            // Verify that the 'Text' property of '15' cell equals '15'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem15Cell1Text, uIItem15Cell1.Text);

            // Verify that the 'Text' property of '15' cell equals '15'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem15Cell2Text, uIItem15Cell2.Text);

            // Verify that the 'Text' property of '5' cell equals '5'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem5Cell1Text, uIItem5Cell1.Text);

            // Verify that the 'Text' property of '97,5' cell equals '97,5'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem975CellText, uIItem975Cell.Text);

            // Verify that the 'Text' property of '-91,5' cell equals '-91,5'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem915CellText, uIItem915Cell.Text);

            // Verify that the 'Text' property of '-91,5' cell equals '-91,5'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem915Cell1Text, uIItem915Cell1.Text);

            // Verify that the 'Text' property of '14,08%' cell equals '14,08%'
            Assert.AreEqual(this.CheckBrahmsCalculationsExpectedValues.UIItem1408CellText, uIItem1408Cell.Text);
        }
        
        /// <summary>
        /// CheckSibeliusCalculations - Use 'CheckSibeliusCalculationsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSibeliusCalculations()
        {
            #region Variable Declarations
            DXCell uIItem355Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem355Cell1;
            DXCell uIItem5Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5Cell2;
            DXCell uIItem305Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem305Cell1;
            DXCell uIItem71Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem71Cell;
            DXCell uIItem10Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem10Cell;
            DXCell uIItem10Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem10Cell1;
            DXCell uIItem12Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem12Cell;
            DXCell uIItem6Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem6Cell;
            DXCell uIItem63Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem63Cell;
            DXCell uIItem61Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem61Cell;
            DXCell uIItem61Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem61Cell1;
            DXCell uIItem1408Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem1408Cell1;
            #endregion

            // Verify that the 'Text' property of '35,5' cell equals '35,5'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem355Cell1Text, uIItem355Cell1.Text);

            // Verify that the 'Text' property of '5' cell equals '5'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem5Cell2Text, uIItem5Cell2.Text);

            // Verify that the 'Text' property of '-30,5' cell equals '-30,5'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem305Cell1Text, uIItem305Cell1.Text);

            // Verify that the 'Text' property of '71' cell equals '71'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem71CellText, uIItem71Cell.Text);

            // Verify that the 'Text' property of '10' cell equals '10'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem10CellText, uIItem10Cell.Text);

            // Verify that the 'Text' property of '10' cell equals '10'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem10Cell1Text, uIItem10Cell1.Text);

            // Verify that the 'Text' property of '12' cell equals '12'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem12CellText, uIItem12Cell.Text);

            // Verify that the 'Text' property of '6' cell equals '6'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem6CellText, uIItem6Cell.Text);

            // Verify that the 'Text' property of '63' cell equals '63'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem63CellText, uIItem63Cell.Text);

            // Verify that the 'Text' property of '-61' cell equals '-61'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem61CellText, uIItem61Cell.Text);

            // Verify that the 'Text' property of '-61' cell equals '-61'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem61Cell1Text, uIItem61Cell1.Text);

            // Verify that the 'Text' property of '14,08%' cell equals '14,08%'
            Assert.AreEqual(this.CheckSibeliusCalculationsExpectedValues.UIItem1408Cell1Text, uIItem1408Cell1.Text);
        }
        
        #region Properties
        public virtual CheckBrahmsCalculationsExpectedValues CheckBrahmsCalculationsExpectedValues
        {
            get
            {
                if ((this.mCheckBrahmsCalculationsExpectedValues == null))
                {
                    this.mCheckBrahmsCalculationsExpectedValues = new CheckBrahmsCalculationsExpectedValues();
                }
                return this.mCheckBrahmsCalculationsExpectedValues;
            }
        }
        
        public virtual CheckSibeliusCalculationsExpectedValues CheckSibeliusCalculationsExpectedValues
        {
            get
            {
                if ((this.mCheckSibeliusCalculationsExpectedValues == null))
                {
                    this.mCheckSibeliusCalculationsExpectedValues = new CheckSibeliusCalculationsExpectedValues();
                }
                return this.mCheckSibeliusCalculationsExpectedValues;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        #endregion
        
        #region Fields
        private CheckBrahmsCalculationsExpectedValues mCheckBrahmsCalculationsExpectedValues;
        
        private CheckSibeliusCalculationsExpectedValues mCheckSibeliusCalculationsExpectedValues;
        
        private UIGatWindow mUIGatWindow;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckBrahmsCalculations'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckBrahmsCalculationsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '35,5' cell equals '35,5'
        /// </summary>
        public string UIItem355CellText = "35,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' cell equals '5'
        /// </summary>
        public string UIItem5CellText = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of '-30,5' cell equals '-30,5'
        /// </summary>
        public string UIItem305CellText = "-30,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '106,5' cell equals '106,5'
        /// </summary>
        public string UIItem1065CellText = "106,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '15' cell equals '15'
        /// </summary>
        public string UIItem15CellText = "15";
        
        /// <summary>
        /// Verify that the 'Text' property of '15' cell equals '15'
        /// </summary>
        public string UIItem15Cell1Text = "15";
        
        /// <summary>
        /// Verify that the 'Text' property of '15' cell equals '15'
        /// </summary>
        public string UIItem15Cell2Text = "15";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' cell equals '5'
        /// </summary>
        public string UIItem5Cell1Text = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of '97,5' cell equals '97,5'
        /// </summary>
        public string UIItem975CellText = "97,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '-91,5' cell equals '-91,5'
        /// </summary>
        public string UIItem915CellText = "-91,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '-91,5' cell equals '-91,5'
        /// </summary>
        public string UIItem915Cell1Text = "-91,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '14,08%' cell equals '14,08%'
        /// </summary>
        public string UIItem1408CellText = "14,08%";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSibeliusCalculations'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSibeliusCalculationsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '35,5' cell equals '35,5'
        /// </summary>
        public string UIItem355Cell1Text = "35,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '5' cell equals '5'
        /// </summary>
        public string UIItem5Cell2Text = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of '-30,5' cell equals '-30,5'
        /// </summary>
        public string UIItem305Cell1Text = "-30,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '71' cell equals '71'
        /// </summary>
        public string UIItem71CellText = "71";
        
        /// <summary>
        /// Verify that the 'Text' property of '10' cell equals '10'
        /// </summary>
        public string UIItem10CellText = "10";
        
        /// <summary>
        /// Verify that the 'Text' property of '10' cell equals '10'
        /// </summary>
        public string UIItem10Cell1Text = "10";
        
        /// <summary>
        /// Verify that the 'Text' property of '12' cell equals '12'
        /// </summary>
        public string UIItem12CellText = "12";
        
        /// <summary>
        /// Verify that the 'Text' property of '6' cell equals '6'
        /// </summary>
        public string UIItem6CellText = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of '63' cell equals '63'
        /// </summary>
        public string UIItem63CellText = "63";
        
        /// <summary>
        /// Verify that the 'Text' property of '-61' cell equals '-61'
        /// </summary>
        public string UIItem61CellText = "-61";
        
        /// <summary>
        /// Verify that the 'Text' property of '-61' cell equals '-61'
        /// </summary>
        public string UIItem61Cell1Text = "-61";
        
        /// <summary>
        /// Verify that the 'Text' property of '14,08%' cell equals '14,08%'
        /// </summary>
        public string UIItem1408Cell1Text = "14,08%";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinClient UIAnsatteClient
        {
            get
            {
                if ((this.mUIAnsatteClient == null))
                {
                    this.mUIAnsatteClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAnsatteClient.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAnsatteClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAnsatteClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlColumnsDockPanel UIDpnlColumnsDockPanel
        {
            get
            {
                if ((this.mUIDpnlColumnsDockPanel == null))
                {
                    this.mUIDpnlColumnsDockPanel = new UIDpnlColumnsDockPanel(this);
                }
                return this.mUIDpnlColumnsDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlColumnsDockPanel mUIDpnlColumnsDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlColumnsDockPanel : DXDockPanel
    {
        
        public UIDpnlColumnsDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlColumns";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel1_ContainerCustom UIDockPanel1_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel1_ContainerCustom == null))
                {
                    this.mUIDockPanel1_ContainerCustom = new UIDockPanel1_ContainerCustom(this);
                }
                return this.mUIDockPanel1_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel1_ContainerCustom mUIDockPanel1_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel1_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel1_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel1_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcExtraGridTable UIGcExtraGridTable
        {
            get
            {
                if ((this.mUIGcExtraGridTable == null))
                {
                    this.mUIGcExtraGridTable = new UIGcExtraGridTable(this);
                }
                return this.mUIGcExtraGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcExtraGridTable mUIGcExtraGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcExtraGridTable : DXGrid
    {
        
        public UIGcExtraGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem355Cell
        {
            get
            {
                if ((this.mUIItem355Cell == null))
                {
                    this.mUIItem355Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem355Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]HoursPerWeekBasedOnPosit" +
                        "ion";
                    this.mUIItem355Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem355Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem355Cell;
            }
        }
        
        public DXCell UIItem5Cell
        {
            get
            {
                if ((this.mUIItem5Cell == null))
                {
                    this.mUIItem5Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]HoursPerWeekAverage";
                    this.mUIItem5Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5Cell;
            }
        }
        
        public DXCell UIItem305Cell
        {
            get
            {
                if ((this.mUIItem305Cell == null))
                {
                    this.mUIItem305Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem305Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]ActualAverageDifferenceW" +
                        "orkingHours";
                    this.mUIItem305Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem305Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem305Cell;
            }
        }
        
        public DXCell UIItem1065Cell
        {
            get
            {
                if ((this.mUIItem1065Cell == null))
                {
                    this.mUIItem1065Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1065Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]TotalWorkingHoursBasedOn" +
                        "Position";
                    this.mUIItem1065Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1065Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1065Cell;
            }
        }
        
        public DXCell UIItem15Cell
        {
            get
            {
                if ((this.mUIItem15Cell == null))
                {
                    this.mUIItem15Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem15Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]TotalWorkingHoursForLine" +
                        "";
                    this.mUIItem15Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem15Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem15Cell;
            }
        }
        
        public DXCell UIItem15Cell1
        {
            get
            {
                if ((this.mUIItem15Cell1 == null))
                {
                    this.mUIItem15Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem15Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]TotalWorkingHours";
                    this.mUIItem15Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem15Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem15Cell1;
            }
        }
        
        public DXCell UIItem15Cell2
        {
            get
            {
                if ((this.mUIItem15Cell2 == null))
                {
                    this.mUIItem15Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem15Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]ActualWorkingHoursAsCalc" +
                        "ulatatedTime";
                    this.mUIItem15Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem15Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem15Cell2;
            }
        }
        
        public DXCell UIItem5Cell1
        {
            get
            {
                if ((this.mUIItem5Cell1 == null))
                {
                    this.mUIItem5Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]ActualWeekAverageWorking" +
                        "HoursAsCalculatedTime";
                    this.mUIItem5Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5Cell1;
            }
        }
        
        public DXCell UIItem975Cell
        {
            get
            {
                if ((this.mUIItem975Cell == null))
                {
                    this.mUIItem975Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem975Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]CalculatedTimeLeftOver";
                    this.mUIItem975Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem975Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem975Cell;
            }
        }
        
        public DXCell UIItem915Cell
        {
            get
            {
                if ((this.mUIItem915Cell == null))
                {
                    this.mUIItem915Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem915Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]ActualTotalDifferenceFor" +
                        "Line";
                    this.mUIItem915Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem915Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem915Cell;
            }
        }
        
        public DXCell UIItem915Cell1
        {
            get
            {
                if ((this.mUIItem915Cell1 == null))
                {
                    this.mUIItem915Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem915Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]ActualTotalDifference";
                    this.mUIItem915Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem915Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem915Cell1;
            }
        }
        
        public DXCell UIItem1408Cell
        {
            get
            {
                if ((this.mUIItem1408Cell == null))
                {
                    this.mUIItem1408Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1408Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]ActualPositionDifference" +
                        "";
                    this.mUIItem1408Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1408Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1408Cell;
            }
        }
        
        public DXCell UIItem355Cell1
        {
            get
            {
                if ((this.mUIItem355Cell1 == null))
                {
                    this.mUIItem355Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem355Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]HoursPerWeekBasedOnPosit" +
                        "ion";
                    this.mUIItem355Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem355Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem355Cell1;
            }
        }
        
        public DXCell UIItem5Cell2
        {
            get
            {
                if ((this.mUIItem5Cell2 == null))
                {
                    this.mUIItem5Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]HoursPerWeekAverage";
                    this.mUIItem5Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5Cell2;
            }
        }
        
        public DXCell UIItem305Cell1
        {
            get
            {
                if ((this.mUIItem305Cell1 == null))
                {
                    this.mUIItem305Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem305Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ActualAverageDifferenceW" +
                        "orkingHours";
                    this.mUIItem305Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem305Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem305Cell1;
            }
        }
        
        public DXCell UIItem71Cell
        {
            get
            {
                if ((this.mUIItem71Cell == null))
                {
                    this.mUIItem71Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem71Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]TotalWorkingHoursBasedOn" +
                        "Position";
                    this.mUIItem71Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem71Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem71Cell;
            }
        }
        
        public DXCell UIItem10Cell
        {
            get
            {
                if ((this.mUIItem10Cell == null))
                {
                    this.mUIItem10Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem10Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]TotalWorkingHoursForLine" +
                        "";
                    this.mUIItem10Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem10Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem10Cell;
            }
        }
        
        public DXCell UIItem10Cell1
        {
            get
            {
                if ((this.mUIItem10Cell1 == null))
                {
                    this.mUIItem10Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem10Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]TotalWorkingHours";
                    this.mUIItem10Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem10Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem10Cell1;
            }
        }
        
        public DXCell UIItem12Cell
        {
            get
            {
                if ((this.mUIItem12Cell == null))
                {
                    this.mUIItem12Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem12Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ActualWorkingHoursAsCalc" +
                        "ulatatedTime";
                    this.mUIItem12Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem12Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem12Cell;
            }
        }
        
        public DXCell UIItem6Cell
        {
            get
            {
                if ((this.mUIItem6Cell == null))
                {
                    this.mUIItem6Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ActualWeekAverageWorking" +
                        "HoursAsCalculatedTime";
                    this.mUIItem6Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6Cell;
            }
        }
        
        public DXCell UIItem63Cell
        {
            get
            {
                if ((this.mUIItem63Cell == null))
                {
                    this.mUIItem63Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem63Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]CalculatedTimeLeftOver";
                    this.mUIItem63Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem63Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem63Cell;
            }
        }
        
        public DXCell UIItem61Cell
        {
            get
            {
                if ((this.mUIItem61Cell == null))
                {
                    this.mUIItem61Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem61Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ActualTotalDifferenceFor" +
                        "Line";
                    this.mUIItem61Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem61Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem61Cell;
            }
        }
        
        public DXCell UIItem61Cell1
        {
            get
            {
                if ((this.mUIItem61Cell1 == null))
                {
                    this.mUIItem61Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem61Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ActualTotalDifference";
                    this.mUIItem61Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem61Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem61Cell1;
            }
        }
        
        public DXCell UIItem1408Cell1
        {
            get
            {
                if ((this.mUIItem1408Cell1 == null))
                {
                    this.mUIItem1408Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1408Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ActualPositionDifference" +
                        "";
                    this.mUIItem1408Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1408Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1408Cell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem355Cell;
        
        private DXCell mUIItem5Cell;
        
        private DXCell mUIItem305Cell;
        
        private DXCell mUIItem1065Cell;
        
        private DXCell mUIItem15Cell;
        
        private DXCell mUIItem15Cell1;
        
        private DXCell mUIItem15Cell2;
        
        private DXCell mUIItem5Cell1;
        
        private DXCell mUIItem975Cell;
        
        private DXCell mUIItem915Cell;
        
        private DXCell mUIItem915Cell1;
        
        private DXCell mUIItem1408Cell;
        
        private DXCell mUIItem355Cell1;
        
        private DXCell mUIItem5Cell2;
        
        private DXCell mUIItem305Cell1;
        
        private DXCell mUIItem71Cell;
        
        private DXCell mUIItem10Cell;
        
        private DXCell mUIItem10Cell1;
        
        private DXCell mUIItem12Cell;
        
        private DXCell mUIItem6Cell;
        
        private DXCell mUIItem63Cell;
        
        private DXCell mUIItem61Cell;
        
        private DXCell mUIItem61Cell1;
        
        private DXCell mUIItem1408Cell1;
        #endregion
    }
}
