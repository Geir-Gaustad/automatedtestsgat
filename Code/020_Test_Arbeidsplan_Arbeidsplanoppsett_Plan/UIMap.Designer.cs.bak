// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _020_Test_Arbeidsplan_Arbeidsplanoppsett_Plan
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddShiftsStep15_1 - Use 'AddShiftsStep15_1Params' to pass parameters into this method.
        /// </summary>
        public void AddShiftsStep15_1()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXTextEdit uIRow0ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit1;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            DXTextEdit uIRow0ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit2;
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXTextEdit uIRow0ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit3;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXTextEdit uIRow0ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit4;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell, new Point(16, 9));

            // Type 'a1{Tab}' in '[Row]0[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, this.AddShiftsStep15_1Params.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell1, new Point(12, 12));

            // Type 'd{Tab}' in '[Row]0[Column]RosterCell_1' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit1, this.AddShiftsStep15_1Params.UIRow0ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell2, new Point(22, 9));

            // Type 'a1{Tab}' in '[Row]0[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit2, this.AddShiftsStep15_1Params.UIRow0ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell3, new Point(19, 8));

            // Type 'd{Tab}' in '[Row]0[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit3, this.AddShiftsStep15_1Params.UIRow0ColumnRosterCellEdit3SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell4, new Point(19, 7));

            // Type 'd{Tab}' in '[Row]0[Column]RosterCell_13' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit4, this.AddShiftsStep15_1Params.UIRow0ColumnRosterCellEdit4SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddShiftsStep15_2 - Use 'AddShiftsStep15_2Params' to pass parameters into this method.
        /// </summary>
        public void AddShiftsStep15_2()
        {
            #region Variable Declarations
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXTextEdit uIRow1ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit;
            DXCell uIItemCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell7;
            DXTextEdit uIRow1ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit1;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            DXTextEdit uIRow1ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit2;
            DXCell uIItemCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell9;
            DXTextEdit uIRow1ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit3;
            DXCell uIItemCell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell10;
            DXTextEdit uIRow1ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit4;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell11;
            DXTextEdit uIRow1ColumnRosterCellEdit5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit5;
            DXCell uIItemCell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell12;
            DXTextEdit uIRow1ColumnRosterCellEdit6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit6;
            DXCell uIItemCell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell13;
            DXTextEdit uIRow1ColumnRosterCellEdit7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit7;
            DXCell uIItemCell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell14;
            DXCell uIItemCell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell15;
            DXTextEdit uIRow1ColumnRosterCellEdit8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit8;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            DXCell uIItemCell16 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell16;
            DXTextEdit uIRow1ColumnRosterCellEdit9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit9;
            DXCell uIItemCell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell17;
            DXTextEdit uIRow2ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit;
            DXCell uIItemCell18 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell18;
            DXTextEdit uIRow2ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit1;
            DXCell uIItemCell19 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell19;
            DXTextEdit uIRow2ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit2;
            DXCell uIItemCell20 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell20;
            DXTextEdit uIRow2ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit3;
            DXCell uIItemCell21 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell21;
            DXTextEdit uIRow2ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit4;
            DXCell uIItemCell22 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell22;
            DXTextEdit uIRow2ColumnRosterCellEdit5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit5;
            DXCell uIItemCell23 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell23;
            DXTextEdit uIRow2ColumnRosterCellEdit6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit6;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell6, new Point(19, 8));

            // Type 'a1{Tab}' in '[Row]1[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit, this.AddShiftsStep15_2Params.UIRow1ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell7, new Point(14, 9));

            // Type 'd{Tab}' in '[Row]1[Column]RosterCell_1' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit1, this.AddShiftsStep15_2Params.UIRow1ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell8, new Point(2, 9));

            // Type 'n{Tab}' in '[Row]1[Column]RosterCell_2' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit2, this.AddShiftsStep15_2Params.UIRow1ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell9, new Point(23, 10));

            // Type 'd{Tab}' in '[Row]1[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit3, this.AddShiftsStep15_2Params.UIRow1ColumnRosterCellEdit3SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell10, new Point(9, 5));

            // Type 'd{Tab}' in '[Row]1[Column]RosterCell_8' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit4, this.AddShiftsStep15_2Params.UIRow1ColumnRosterCellEdit4SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell11, new Point(16, 6));

            // Type 'd{Tab}' in '[Row]1[Column]RosterCell_9' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit5, this.AddShiftsStep15_2Params.UIRow1ColumnRosterCellEdit5SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell12, new Point(12, 6));

            // Type 'd{Tab}' in '[Row]1[Column]RosterCell_10' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit6, this.AddShiftsStep15_2Params.UIRow1ColumnRosterCellEdit6SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell13, new Point(21, 12));

            // Type 'd{Tab}' in '[Row]1[Column]RosterCell_12' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit7, this.AddShiftsStep15_2Params.UIRow1ColumnRosterCellEdit7SendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell15.EnsureClickable(new Point(21, 6));
            Mouse.StartDragging(uIItemCell14, new Point(17, 11));
            Mouse.StopDragging(uIItemCell15, new Point(21, 6));

            // Type 'dfm{Tab}' in '[Row]1[Column]RosterCell_14' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit8, this.AddShiftsStep15_2Params.UIRow1ColumnRosterCellEdit8SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Click cell
            Mouse.Click(uIItemCell16, new Point(19, 8));

            // Type 'f1{Tab}' in '[Row]1[Column]RosterCell_20' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit9, this.AddShiftsStep15_2Params.UIRow1ColumnRosterCellEdit9SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell17, new Point(14, 10));

            // Type 'kk2{Tab}' in '[Row]2[Column]RosterCell_3' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit, this.AddShiftsStep15_2Params.UIRow2ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell18, new Point(17, 9));

            // Type 'gv1{Tab}' in '[Row]2[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit1, this.AddShiftsStep15_2Params.UIRow2ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell19, new Point(10, 10));

            // Type 'kk2{Tab}' in '[Row]2[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit2, this.AddShiftsStep15_2Params.UIRow2ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell20, new Point(15, 3));

            // Type 'kk2{Tab}' in '[Row]2[Column]RosterCell_9' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit3, this.AddShiftsStep15_2Params.UIRow2ColumnRosterCellEdit3SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell21, new Point(21, 6));

            // Type 'kk2{Tab}' in '[Row]2[Column]RosterCell_11' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit4, this.AddShiftsStep15_2Params.UIRow2ColumnRosterCellEdit4SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell22, new Point(11, 11));

            // Type 'gv1{Tab}' in '[Row]2[Column]RosterCell_13' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit5, this.AddShiftsStep15_2Params.UIRow2ColumnRosterCellEdit5SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell23, new Point(24, 13));

            // Type 'gv1{Tab}' in '[Row]2[Column]RosterCell_20' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit6, this.AddShiftsStep15_2Params.UIRow2ColumnRosterCellEdit6SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddShiftsStep28 - Use 'AddShiftsStep28Params' to pass parameters into this method.
        /// </summary>
        public void AddShiftsStep28()
        {
            #region Variable Declarations
            DXCell uIItemCell25 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell25;
            DXTextEdit uIRow3ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit;
            DXCell uIItemCell111 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell111;
            DXTextEdit uIRow3ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit1;
            DXCell uIItemCell26 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell26;
            DXTextEdit uIRow3ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit2;
            DXCell uIItemCell31 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell31;
            DXCell uIItemCell41 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell41;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXTextEdit uIRow3ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit3;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            DXCell uIItemCell51 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell51;
            DXTextEdit uIRow3ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit4;
            DXCell uIItemCell61 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell61;
            DXTextEdit uIRow3ColumnRosterCellEdit5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit5;
            DXCell uIItemCell71 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell71;
            DXCell uIItemCell81 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell81;
            DXTextEdit uIRow4ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit;
            DXCell uIItemCell91 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell91;
            DXTextEdit uIRow4ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit1;
            DXCell uIItemCell101 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell101;
            DXTextEdit uIRow4ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit2;
            DXCell uIItemCell112 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell112;
            DXTextEdit uIRow4ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow4ColumnRosterCellEdit3;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell25, new Point(24, 13));

            // Type 'a1{Tab}' in '[Row]3[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit, this.AddShiftsStep28Params.UIRow3ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell111, new Point(17, 6));

            // Type 'a1{Tab}' in '[Row]3[Column]RosterCell_1' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit1, this.AddShiftsStep28Params.UIRow3ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell26, new Point(14, 9));

            // Type 'f1{Tab}' in '[Row]3[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit2, this.AddShiftsStep28Params.UIRow3ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell41.EnsureClickable(new Point(8, 4));
            Mouse.StartDragging(uIItemCell31, new Point(13, 10));
            Mouse.StopDragging(uIItemCell41, new Point(8, 4));

            // Type 'n' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.AddShiftsStep28Params.UIGcRosterPlanTableSendKeys, ModifierKeys.None);

            // Type '{Tab}' in '[Row]3[Column]RosterCell_8' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit3, this.AddShiftsStep28Params.UIRow3ColumnRosterCellEdit3SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Click cell
            Mouse.Click(uIItemCell51, new Point(22, 9));

            // Type 'f1{Tab}' in '[Row]3[Column]RosterCell_13' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit4, this.AddShiftsStep28Params.UIRow3ColumnRosterCellEdit4SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell61, new Point(17, 11));

            // Type 'f1{Tab}' in '[Row]3[Column]RosterCell_20' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit5, this.AddShiftsStep28Params.UIRow3ColumnRosterCellEdit5SendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell81.EnsureClickable(new Point(13, 8));
            Mouse.StartDragging(uIItemCell71, new Point(7, 11));
            Mouse.StopDragging(uIItemCell81, new Point(13, 8));

            // Type 'd' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.AddShiftsStep28Params.UIGcRosterPlanTableSendKeys1, ModifierKeys.None);

            // Type '{Tab}' in '[Row]4[Column]RosterCell_2' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit, this.AddShiftsStep28Params.UIRow4ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Click cell
            Mouse.Click(uIItemCell91, new Point(13, 9));

            // Type 'f1{Tab}' in '[Row]4[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit1, this.AddShiftsStep28Params.UIRow4ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell101, new Point(20, 9));

            // Type 'f1{Tab}' in '[Row]4[Column]RosterCell_13' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit2, this.AddShiftsStep28Params.UIRow4ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell112, new Point(25, 17));

            // Type 'f1{Tab}' in '[Row]4[Column]RosterCell_20' text box
            Keyboard.SendKeys(uIRow4ColumnRosterCellEdit3, this.AddShiftsStep28Params.UIRow4ColumnRosterCellEdit3SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// CheckADMDepSettingValues - Use 'CheckADMDepSettingValuesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckADMDepSettingValues()
        {
            #region Variable Declarations
            DXNavBarGroup uIMaksplanlagttidperdaNavBarGroup = this.UIArbeidsplanoppsettfoWindow.UINbcRosterSetupNavBar.UIMaksplanlagttidperdaNavBarGroup;
            DXNavBarGroup uIMaksplanlagttidperukNavBarGroup = this.UIArbeidsplanoppsettfoWindow.UINbcRosterSetupNavBar.UIMaksplanlagttidperukNavBarGroup;
            DXNavBarGroup uIMaksantalllørdagerpåNavBarGroup = this.UIArbeidsplanoppsettfoWindow.UINbcRosterSetupNavBar.UIMaksantalllørdagerpåNavBarGroup;
            DXNavBarGroup uIMaksantallvakterpåraNavBarGroup = this.UIArbeidsplanoppsettfoWindow.UINbcRosterSetupNavBar.UIMaksantallvakterpåraNavBarGroup;
            #endregion

            // Verify that the 'Text' property of 'Maks planlagt tid per dag (§10-4) - 8,00' NavBarGroup equals 'Maks planlagt tid per dag (§10-4) - 8,00'
            Assert.AreEqual(this.CheckADMDepSettingValuesExpectedValues.UIMaksplanlagttidperdaNavBarGroupText, uIMaksplanlagttidperdaNavBarGroup.Text);

            // Verify that the 'Text' property of 'Maks planlagt tid per uke (§10-4) - 38,00' NavBarGroup equals 'Maks planlagt tid per uke (§10-4) - 38,00'
            Assert.AreEqual(this.CheckADMDepSettingValuesExpectedValues.UIMaksplanlagttidperukNavBarGroupText, uIMaksplanlagttidperukNavBarGroup.Text);

            // Verify that the 'Text' property of 'Maks antall lørdager på rad. - 1,00' NavBarGroup equals 'Maks antall lørdager på rad. - 1,00'
            Assert.AreEqual(this.CheckADMDepSettingValuesExpectedValues.UIMaksantalllørdagerpåNavBarGroupText, uIMaksantalllørdagerpåNavBarGroup.Text);

            // Verify that the 'Text' property of 'Maks antall vakter på rad. - 5,00' NavBarGroup equals 'Maks antall vakter på rad. - 5,00'
            Assert.AreEqual(this.CheckADMDepSettingValuesExpectedValues.UIMaksantallvakterpåraNavBarGroupText, uIMaksantallvakterpåraNavBarGroup.Text);
        }
        
        /// <summary>
        /// CheckEmployeeDataStep10 - Use 'CheckEmployeeDataStep10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeeDataStep10()
        {
            #region Variable Declarations
            DXTreeListCell uIItem1AnsattEnTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UIItem1AnsattEnTreeListCell;
            DXTreeListCell uIItem150TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UINode0TreeListNode1.UIItem150TreeListCell;
            DXTreeListCell uIItem5110DiverseTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UINode0TreeListNode1.UIItem5110DiverseTreeListCell;
            DXTreeListCell uISSykepleierTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UINode0TreeListNode1.UISSykepleierTreeListCell;
            DXTreeListCell uITURNUSTurnus355tukeTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UINode0TreeListNode1.UITURNUSTurnus355tukeTreeListCell;
            DXTreeListCell uIItem355TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UINode0TreeListNode1.UIItem355TreeListCell;
            DXTreeListCell uIItem2AnsattFemTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UIItem2AnsattFemTreeListCell;
            DXTreeListCell uIItem190TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UINode0TreeListNode.UIItem190TreeListCell;
            DXTreeListCell uIItem5110DiverseTreeListCell1 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UINode0TreeListNode.UIItem5110DiverseTreeListCell;
            DXTreeListCell uIDDagtidspersonellTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UINode0TreeListNode.UIDDagtidspersonellTreeListCell;
            DXTreeListCell uIADMAdministrasjonTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UINode0TreeListNode.UIADMAdministrasjonTreeListCell;
            DXTreeListCell uIItem375TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UINode0TreeListNode.UIItem375TreeListCell;
            DXTreeListCell uIItem50TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UINode0TreeListNode1.UIItem50TreeListCell;
            DXTreeListCell uIItem90TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UINode0TreeListNode.UIItem90TreeListCell;
            DXTreeListCell uIItem3AnsattTiTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UIItem3AnsattTiTreeListCell;
            DXTreeListCell uIItem1100TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UINode0TreeListNode.UIItem1100TreeListCell;
            DXTreeListCell uIItem5110DiverseTreeListCell2 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UINode0TreeListNode.UIItem5110DiverseTreeListCell;
            DXTreeListCell uILLegeTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UINode0TreeListNode.UILLegeTreeListCell;
            DXTreeListCell uIItem100TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UINode0TreeListNode.UIItem100TreeListCell;
            DXTreeListCell uIL38Lege38t35525TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UINode0TreeListNode.UIL38Lege38t35525TreeListCell;
            DXTreeListCell uIItem38TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UINode0TreeListNode.UIItem38TreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '1. Ansatt, En' TreeListCell equals '1. Ansatt, En'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem1AnsattEnTreeListCellValueAsString, uIItem1AnsattEnTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1. 50%' TreeListCell equals '1. 50%'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem150TreeListCellValueAsString, uIItem150TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5110 - Diverse' TreeListCell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem5110DiverseTreeListCellValueAsString, uIItem5110DiverseTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'S - Sykepleier' TreeListCell equals 'S - Sykepleier'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UISSykepleierTreeListCellValueAsString, uISSykepleierTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'TURNUS - Turnus 35,5t/uke' TreeListCell equals 'TURNUS - Turnus 35,5t/uke'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UITURNUSTurnus355tukeTreeListCellValueAsString, uITURNUSTurnus355tukeTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '35,5' TreeListCell equals '35.5'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem355TreeListCellValueAsString, uIItem355TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2. Ansatt, Fem' TreeListCell equals '2. Ansatt, Fem'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem2AnsattFemTreeListCellValueAsString, uIItem2AnsattFemTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1. 90%' TreeListCell equals '1. 90%'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem190TreeListCellValueAsString, uIItem190TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5110 - Diverse' TreeListCell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem5110DiverseTreeListCellValueAsString1, uIItem5110DiverseTreeListCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'D - Dagtidspersonell' TreeListCell equals 'D - Dagtidspersonell'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIDDagtidspersonellTreeListCellValueAsString, uIDDagtidspersonellTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'ADM - Administrasjon' TreeListCell equals 'ADM - Administrasjon'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIADMAdministrasjonTreeListCellValueAsString, uIADMAdministrasjonTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '37,5' TreeListCell equals '37.5'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem375TreeListCellValueAsString, uIItem375TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '50' TreeListCell equals '50'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem50TreeListCellValueAsString, uIItem50TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '90' TreeListCell equals '90'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem90TreeListCellValueAsString, uIItem90TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '3. Ansatt, Ti' TreeListCell equals '3. Ansatt, Ti'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem3AnsattTiTreeListCellValueAsString, uIItem3AnsattTiTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1. 100%' TreeListCell equals '1. 100%'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem1100TreeListCellValueAsString, uIItem1100TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5110 - Diverse' TreeListCell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem5110DiverseTreeListCellValueAsString2, uIItem5110DiverseTreeListCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of 'L - Lege' TreeListCell equals 'L - Lege'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UILLegeTreeListCellValueAsString, uILLegeTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '100' TreeListCell equals '100'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem100TreeListCellValueAsString, uIItem100TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'L38 - Lege 38t(35.5+2.5)' TreeListCell equals 'L38 - Lege 38t(35.5+2.5)'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIL38Lege38t35525TreeListCellValueAsString, uIL38Lege38t35525TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '38' TreeListCell equals '38'
            Assert.AreEqual(this.CheckEmployeeDataStep10ExpectedValues.UIItem38TreeListCellValueAsString, uIItem38TreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckErrorAndWarningsStep16 - Use 'CheckErrorAndWarningsStep16ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckErrorAndWarningsStep16()
        {
            #region Variable Declarations
            DXCell uIKravtilF1vaktiukeintCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIKravtilF1vaktiukeintCell;
            DXCell uIDenneA1vaktenskaperhCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneA1vaktenskaperhCell;
            DXCell uIFormangejobbesøndageCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangejobbesøndageCell;
            DXCell uIKravtilF1vaktiukeintCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIKravtilF1vaktiukeintCell1;
            DXCell uIDenneDvaktenskaperhvCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneDvaktenskaperhvCell;
            DXCell uIFormangejobbesøndageCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangejobbesøndageCell1;
            DXCell uIDenneDvaktenskaperhvCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneDvaktenskaperhvCell1;
            DXCell uIDenneNvaktenskaperhvCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneNvaktenskaperhvCell;
            DXCell uIKravtilF1vaktiukeintCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIKravtilF1vaktiukeintCell2;
            DXCell uIBeregnetstillingsproCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIBeregnetstillingsproCell;
            #endregion

            // Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep16ExpectedValues.UIKravtilF1vaktiukeintCellText, uIKravtilF1vaktiukeintCell.Text);

            // Verify that the 'Text' property of 'Denne A1-vakten skaper hviletidsbrudd med D-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne A1-vakten skaper hviletidsbrudd med D-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep16ExpectedValues.UIDenneA1vaktenskaperhCellText, uIDenneA1vaktenskaperhCell.Text);

            // Verify that the 'Text' property of 'For mange jobbe-søndager på rad (maks=1, faktisk=2, dato-intervall=08.01.2023-15.01.2023)' cell equals 'For mange jobbe-søndager på rad (maks=1, faktisk=2, dato-intervall=08.01.2023-15.01.2023)'
            Assert.AreEqual(this.CheckErrorAndWarningsStep16ExpectedValues.UIFormangejobbesøndageCellText, uIFormangejobbesøndageCell.Text);

            // Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep16ExpectedValues.UIKravtilF1vaktiukeintCell1Text, uIKravtilF1vaktiukeintCell1.Text);

            // Verify that the 'Text' property of 'Denne D-vakten skaper hviletidsbrudd med A1-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne D-vakten skaper hviletidsbrudd med A1-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep16ExpectedValues.UIDenneDvaktenskaperhvCellText, uIDenneDvaktenskaperhvCell.Text);

            // Verify that the 'Text' property of 'For mange jobbe-søndager på rad (maks=1, faktisk=2, dato-intervall=08.01.2023-15.01.2023)' cell equals 'For mange jobbe-søndager på rad (maks=1, faktisk=2, dato-intervall=08.01.2023-15.01.2023)'
            Assert.AreEqual(this.CheckErrorAndWarningsStep16ExpectedValues.UIFormangejobbesøndageCell1Text, uIFormangejobbesøndageCell1.Text);

            // Verify that the 'Text' property of 'Denne D-vakten skaper hviletidsbrudd med N-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne D-vakten skaper hviletidsbrudd med N-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep16ExpectedValues.UIDenneDvaktenskaperhvCell1Text, uIDenneDvaktenskaperhvCell1.Text);

            // Verify that the 'Text' property of 'Denne N-vakten skaper hviletidsbrudd med D-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne N-vakten skaper hviletidsbrudd med D-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep16ExpectedValues.UIDenneNvaktenskaperhvCellText, uIDenneNvaktenskaperhvCell.Text);

            // Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 16.01.2023 til 22.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 16.01.2023 til 22.01.2023 er ikke oppfylt.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep16ExpectedValues.UIKravtilF1vaktiukeintCell2Text, uIKravtilF1vaktiukeintCell2.Text);

            // Verify that the 'Text' property of 'Beregnet stillingsprosent overstiger stillingsprosenten som er angitt på linjen.' cell equals 'Beregnet stillingsprosent overstiger stillingsprosenten som er angitt på linjen.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep16ExpectedValues.UIBeregnetstillingsproCellText, uIBeregnetstillingsproCell.Text);
        }
        
        /// <summary>
        /// CheckErrorAndWarningsStep17 - Use 'CheckErrorAndWarningsStep17ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckErrorAndWarningsStep17()
        {
            #region Variable Declarations
            DXCell uIDenneA1vaktenskaperhCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneA1vaktenskaperhCell;
            DXCell uIKravtilF1vaktiukeintCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIKravtilF1vaktiukeintCell;
            DXCell uISamletarbeidstiddettCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UISamletarbeidstiddettCell;
            DXCell uIDenneDvaktenskaperhvCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneDvaktenskaperhvCell;
            DXCell uIDenneDvaktenskaperhvCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneDvaktenskaperhvCell1;
            DXCell uITotalarbeidstidfordeCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UITotalarbeidstidfordeCell;
            DXCell uIDenneNvaktenskaperhvCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneNvaktenskaperhvCell;
            DXCell uIDennevaktenavgir1timCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIDennevaktenavgir1timCell;
            DXCell uIKravtilF1vaktiukeintCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIKravtilF1vaktiukeintCell1;
            DXCell uIFormangetimerforukenCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangetimerforukenCell;
            DXCell uIFormangejobbelørdageCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangejobbelørdageCell;
            DXCell uIFormangevakterpåradmCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangevakterpåradmCell;
            DXCell uIFormangevakterpåradmCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangevakterpåradmCell1;
            DXCell uIFormangevakterpåradmCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangevakterpåradmCell2;
            DXCell uIFormangevakterpåradmCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangevakterpåradmCell3;
            DXCell uIFormangevakterpåradmCell4 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangevakterpåradmCell4;
            DXCell uIFormangevakterpåradmCell5 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangevakterpåradmCell5;
            DXCell uIFormangejobbelørdageCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangejobbelørdageCell1;
            #endregion

            // Verify that the 'Text' property of 'Denne A1-vakten skaper hviletidsbrudd med D-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne A1-vakten skaper hviletidsbrudd med D-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIDenneA1vaktenskaperhCellText, uIDenneA1vaktenskaperhCell.Text);

            // Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIKravtilF1vaktiukeintCellText, uIKravtilF1vaktiukeintCell.Text);

            // Verify that the 'Text' property of 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t). Denne vakten bidrar med 8 timer.' cell equals 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t). Denne vakten bidrar med 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UISamletarbeidstiddettCellText, uISamletarbeidstiddettCell.Text);

            // Verify that the 'Text' property of 'Denne D-vakten skaper hviletidsbrudd med A1-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne D-vakten skaper hviletidsbrudd med A1-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIDenneDvaktenskaperhvCellText, uIDenneDvaktenskaperhvCell.Text);

            // Verify that the 'Text' property of 'Denne D-vakten skaper hviletidsbrudd med N-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne D-vakten skaper hviletidsbrudd med N-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIDenneDvaktenskaperhvCell1Text, uIDenneDvaktenskaperhvCell1.Text);

            // Verify that the 'Text' property of 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t).' cell equals 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UITotalarbeidstidfordeCellText, uITotalarbeidstidfordeCell.Text);

            // Verify that the 'Text' property of 'Denne N-vakten skaper hviletidsbrudd med D-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne N-vakten skaper hviletidsbrudd med D-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIDenneNvaktenskaperhvCellText, uIDenneNvaktenskaperhvCell.Text);

            // Verify that the 'Text' property of 'Denne vakten avgir 1 timer til dagen før slik at samlet arbeidstid døgnet før er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t).' cell equals 'Denne vakten avgir 1 timer til dagen før slik at samlet arbeidstid døgnet før er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIDennevaktenavgir1timCellText, uIDennevaktenavgir1timCell.Text);

            // Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIKravtilF1vaktiukeintCell1Text, uIKravtilF1vaktiukeintCell1.Text);

            // Verify that the 'Text' property of 'For mange timer for uken (maks=38t, faktisk=40t).' cell equals 'For mange timer for uken (maks=38t, faktisk=40t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIFormangetimerforukenCellText, uIFormangetimerforukenCell.Text);

            // Verify that the 'Text' property of 'For mange jobbe-lørdager på rad (maks=1, faktisk=2, dato-intervall=14.01.2023-21.01.2023).' cell equals 'For mange jobbe-lørdager på rad (maks=1, faktisk=2, dato-intervall=14.01.2023-21.01.2023).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIFormangejobbelørdageCellText, uIFormangejobbelørdageCell.Text);

            // Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIFormangevakterpåradmCellText, uIFormangevakterpåradmCell.Text);

            // Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIFormangevakterpåradmCell1Text, uIFormangevakterpåradmCell1.Text);

            // Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIFormangevakterpåradmCell2Text, uIFormangevakterpåradmCell2.Text);

            // Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIFormangevakterpåradmCell3Text, uIFormangevakterpåradmCell3.Text);

            // Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIFormangevakterpåradmCell4Text, uIFormangevakterpåradmCell4.Text);

            // Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIFormangevakterpåradmCell5Text, uIFormangevakterpåradmCell5.Text);

            // Verify that the 'Text' property of 'For mange jobbe-lørdager på rad (maks=1, faktisk=2, dato-intervall=14.01.2023-21.01.2023).' cell equals 'For mange jobbe-lørdager på rad (maks=1, faktisk=2, dato-intervall=14.01.2023-21.01.2023).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep17ExpectedValues.UIFormangejobbelørdageCell1Text, uIFormangejobbelørdageCell1.Text);
        }
        
        /// <summary>
        /// CheckErrorAndWarningsStep18 - Use 'CheckErrorAndWarningsStep18ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckErrorAndWarningsStep18()
        {
            #region Variable Declarations
            DXCell uIDenneGV1vaktenskaperCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneGV1vaktenskaperCell;
            DXCell uIDenneKK2vaktenskaperCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneKK2vaktenskaperCell;
            #endregion

            // Verify that the 'Text' property of 'Denne GV1-vakten skaper hviletidsbrudd med KK2-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne GV1-vakten skaper hviletidsbrudd med KK2-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep18ExpectedValues.UIDenneGV1vaktenskaperCellText, uIDenneGV1vaktenskaperCell.Text);

            // Verify that the 'Text' property of 'Denne KK2-vakten skaper hviletidsbrudd med GV1-vakten på avd  dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne KK2-vakten skaper hviletidsbrudd med GV1-vakten på avd  dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep18ExpectedValues.UIDenneKK2vaktenskaperCellText, uIDenneKK2vaktenskaperCell.Text);
        }
        
        /// <summary>
        /// CheckErrorAndWarningsStep21 - Use 'CheckErrorAndWarningsStep21ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckErrorAndWarningsStep21()
        {
            #region Variable Declarations
            DXCell uIAnsattEnCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIValidationViewCustom.UIGridValidationMessagTable.UIAnsattEnCell;
            DXCell uIFeilCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIValidationViewCustom.UIGridValidationMessagTable.UIFeilCell;
            DXCell uIBeregnetstillingsproCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIValidationViewCustom.UIGridValidationMessagTable.UIBeregnetstillingsproCell;
            #endregion

            // Verify that the 'Text' property of 'Ansatt, En' cell equals 'Ansatt, En'
            Assert.AreEqual(this.CheckErrorAndWarningsStep21ExpectedValues.UIAnsattEnCellText, uIAnsattEnCell.Text);

            // Verify that the 'Text' property of 'Feil' cell equals 'Feil'
            Assert.AreEqual(this.CheckErrorAndWarningsStep21ExpectedValues.UIFeilCellText, uIFeilCell.Text);

            // Verify that the 'Text' property of 'Beregnet stillingsprosent overstiger stillingsprosenten som er angitt på linjen.' cell equals 'Beregnet stillingsprosent overstiger stillingsprosenten som er angitt på linjen.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep21ExpectedValues.UIBeregnetstillingsproCellText, uIBeregnetstillingsproCell.Text);
        }
        
        /// <summary>
        /// CheckErrorAndWarningsStep22 - Use 'CheckErrorAndWarningsStep22ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckErrorAndWarningsStep22()
        {
            #region Variable Declarations
            DXCell uIKravtilF1vaktiukeintCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIValidationViewCustom.UIGridValidationMessagTable.UIKravtilF1vaktiukeintCell;
            DXCell uIKravtilF1vaktiukeintCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIValidationViewCustom.UIGridValidationMessagTable.UIKravtilF1vaktiukeintCell1;
            DXCell uIUkehvileF1erforkortpCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIValidationViewCustom.UIGridValidationMessagTable.UIUkehvileF1erforkortpCell;
            DXCell uIMandagCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIValidationViewCustom.UIGridValidationMessagTable.UIMandagCell;
            DXCell uIMandagCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIValidationViewCustom.UIGridValidationMessagTable.UIMandagCell1;
            DXCell uISøndagCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel1.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIValidationViewCustom.UIGridValidationMessagTable.UISøndagCell;
            #endregion

            // Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep22ExpectedValues.UIKravtilF1vaktiukeintCellText, uIKravtilF1vaktiukeintCell.Text);

            // Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep22ExpectedValues.UIKravtilF1vaktiukeintCell1Text, uIKravtilF1vaktiukeintCell1.Text);

            // Verify that the 'Text' property of 'Ukehvile/F1 er for kort pga. omliggende vakter. Kravet er 40 timer, faktisk hvile er 36 timer.' cell equals 'Ukehvile/F1 er for kort pga. omliggende vakter. Kravet er 40 timer, faktisk hvile er 36 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep22ExpectedValues.UIUkehvileF1erforkortpCellText, uIUkehvileF1erforkortpCell.Text);

            // Verify that the 'Text' property of 'Mandag' cell equals 'Mandag'
            Assert.AreEqual(this.CheckErrorAndWarningsStep22ExpectedValues.UIMandagCellText, uIMandagCell.Text);

            // Verify that the 'Text' property of 'Mandag' cell equals 'Mandag'
            Assert.AreEqual(this.CheckErrorAndWarningsStep22ExpectedValues.UIMandagCell1Text, uIMandagCell1.Text);

            // Verify that the 'Text' property of 'Søndag' cell equals 'Søndag'
            Assert.AreEqual(this.CheckErrorAndWarningsStep22ExpectedValues.UISøndagCellText, uISøndagCell.Text);
        }
        
        /// <summary>
        /// CheckErrorAndWarningsStep24 - Use 'CheckErrorAndWarningsStep24ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckErrorAndWarningsStep24()
        {
            #region Variable Declarations
            DXCell uIAnsattTiCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIAnsattTiCell;
            DXCell uIKravtilF1vaktiukeintCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIKravtilF1vaktiukeintCell;
            DXCell uITotalarbeidstidfordeCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UITotalarbeidstidfordeCell;
            DXCell uISamletarbeidstiddettCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UISamletarbeidstiddettCell;
            DXCell uIDenneGV1vaktenskaperCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneGV1vaktenskaperCell;
            DXCell uIFormangejobbesøndageCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangejobbesøndageCell;
            DXCell uIDenneKK2vaktenskaperCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIDenneKK2vaktenskaperCell;
            DXCell uITotalarbeidstidfordeCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UITotalarbeidstidfordeCell1;
            DXCell uISamletarbeidstiddettCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UISamletarbeidstiddettCell1;
            DXCell uIFormangetimerforukenCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangetimerforukenCell;
            DXCell uIKravtilF1vaktiukeintCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIKravtilF1vaktiukeintCell1;
            DXCell uISamletarbeidstiddettCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UISamletarbeidstiddettCell2;
            DXCell uITotalarbeidstidfordeCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UITotalarbeidstidfordeCell2;
            DXCell uISamletarbeidstiddettCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UISamletarbeidstiddettCell3;
            DXCell uITotalarbeidstidfordeCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UITotalarbeidstidfordeCell3;
            DXCell uIFormangejobbesøndageCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangejobbesøndageCell1;
            DXCell uIKravtilF1vaktiukeintCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIKravtilF1vaktiukeintCell2;
            DXCell uIFormangejobbesøndageCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangejobbesøndageCell2;
            DXCell uIFormangevakteravtypeCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIFormangevakteravtypeCell;
            DXCell uIAdvarselCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIValidationViewCustom.UIGridValidationMessagTable.UIAdvarselCell;
            #endregion

            // Verify that the 'Text' property of 'Ansatt, Ti' cell equals 'Ansatt, Ti'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIAnsattTiCellText, uIAnsattTiCell.Text);

            // Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIKravtilF1vaktiukeintCellText, uIKravtilF1vaktiukeintCell.Text);

            // Verify that the 'Text' property of 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UITotalarbeidstidfordeCellText, uITotalarbeidstidfordeCell.Text);

            // Verify that the 'Text' property of 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UISamletarbeidstiddettCellText, uISamletarbeidstiddettCell.Text);

            // Verify that the 'Text' property of 'Denne GV1-vakten skaper hviletidsbrudd med KK2-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne GV1-vakten skaper hviletidsbrudd med KK2-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIDenneGV1vaktenskaperCellText, uIDenneGV1vaktenskaperCell.Text);

            // Verify that the 'Text' property of 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)' cell equals 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIFormangejobbesøndageCellText, uIFormangejobbesøndageCell.Text);

            // Verify that the 'Text' property of 'Denne KK2-vakten skaper hviletidsbrudd med GV1-vakten på avd  dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne KK2-vakten skaper hviletidsbrudd med GV1-vakten på avd  dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIDenneKK2vaktenskaperCellText, uIDenneKK2vaktenskaperCell.Text);

            // Verify that the 'Text' property of 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UITotalarbeidstidfordeCell1Text, uITotalarbeidstidfordeCell1.Text);

            // Verify that the 'Text' property of 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UISamletarbeidstiddettCell1Text, uISamletarbeidstiddettCell1.Text);

            // Verify that the 'Text' property of 'For mange timer for uken (maks=48t, faktisk=55,5t).' cell equals 'For mange timer for uken (maks=48t, faktisk=55,5t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIFormangetimerforukenCellText, uIFormangetimerforukenCell.Text);

            // Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIKravtilF1vaktiukeintCell1Text, uIKravtilF1vaktiukeintCell1.Text);

            // Verify that the 'Text' property of 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UISamletarbeidstiddettCell2Text, uISamletarbeidstiddettCell2.Text);

            // Verify that the 'Text' property of 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UITotalarbeidstidfordeCell2Text, uITotalarbeidstidfordeCell2.Text);

            // Verify that the 'Text' property of 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UISamletarbeidstiddettCell3Text, uISamletarbeidstiddettCell3.Text);

            // Verify that the 'Text' property of 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UITotalarbeidstidfordeCell3Text, uITotalarbeidstidfordeCell3.Text);

            // Verify that the 'Text' property of 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)' cell equals 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIFormangejobbesøndageCell1Text, uIFormangejobbesøndageCell1.Text);

            // Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 16.01.2023 til 22.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 16.01.2023 til 22.01.2023 er ikke oppfylt.'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIKravtilF1vaktiukeintCell2Text, uIKravtilF1vaktiukeintCell2.Text);

            // Verify that the 'Text' property of 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)' cell equals 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIFormangejobbesøndageCell2Text, uIFormangejobbesøndageCell2.Text);

            // Verify that the 'Text' property of 'For mange vakter av typen Dag i perioden (Maksimum=1, Faktisk=3).' cell equals 'For mange vakter av typen Dag i perioden (Maksimum=1, Faktisk=3). '
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIFormangevakteravtypeCellText, uIFormangevakteravtypeCell.Text);

            // Verify that the 'Text' property of 'Advarsel' cell equals 'Advarsel'
            Assert.AreEqual(this.CheckErrorAndWarningsStep24ExpectedValues.UIAdvarselCellText, uIAdvarselCell.Text);
        }
        
        /// <summary>
        /// CheckErrorAndWarningsStep29 - Use 'CheckErrorAndWarningsStep29ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckErrorAndWarningsStep29()
        {
            #region Variable Declarations
            DXCell uIAnsattNiCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIAnsattNiCell;
            DXCell uIAdvarselCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIAdvarselCell;
            DXCell uIDeterformangeaftenvaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIDeterformangeaftenvaCell;
            DXCell uIDeterformangeaftenvaCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIDeterformangeaftenvaCell1;
            DXCell uIDeterformangenattvakCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIDeterformangenattvakCell;
            DXCell uIDeterformangenattvakCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIDeterformangenattvakCell1;
            DXCell uIDeterformangenattvakCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIDeterformangenattvakCell2;
            DXCell uIDeterformangenattvakCell3 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIValidationViewCustom.UIGridValidationMessagTable.UIDeterformangenattvakCell3;
            #endregion

            // Verify that the 'Text' property of 'Ansatt, Ni' cell equals 'Ansatt, Ni'
            Assert.AreEqual(this.CheckErrorAndWarningsStep29ExpectedValues.UIAnsattNiCellText, uIAnsattNiCell.Text);

            // Verify that the 'Text' property of 'Advarsel' cell equals 'Advarsel'
            Assert.AreEqual(this.CheckErrorAndWarningsStep29ExpectedValues.UIAdvarselCellText, uIAdvarselCell.Text);

            // Verify that the 'Text' property of 'Det er for mange aften-vakter på rad (maks=1, faktisk=2).' cell equals 'Det er for mange aften-vakter på rad (maks=1, faktisk=2).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep29ExpectedValues.UIDeterformangeaftenvaCellText, uIDeterformangeaftenvaCell.Text);

            // Verify that the 'Text' property of 'Det er for mange aften-vakter på rad (maks=1, faktisk=2).' cell equals 'Det er for mange aften-vakter på rad (maks=1, faktisk=2).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep29ExpectedValues.UIDeterformangeaftenvaCell1Text, uIDeterformangeaftenvaCell1.Text);

            // Verify that the 'Text' property of 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).' cell equals 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep29ExpectedValues.UIDeterformangenattvakCellText, uIDeterformangenattvakCell.Text);

            // Verify that the 'Text' property of 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).' cell equals 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep29ExpectedValues.UIDeterformangenattvakCell1Text, uIDeterformangenattvakCell1.Text);

            // Verify that the 'Text' property of 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).' cell equals 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep29ExpectedValues.UIDeterformangenattvakCell2Text, uIDeterformangenattvakCell2.Text);

            // Verify that the 'Text' property of 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).' cell equals 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep29ExpectedValues.UIDeterformangenattvakCell3Text, uIDeterformangenattvakCell3.Text);
        }
        
        /// <summary>
        /// CheckErrorAndWarningsStep30 - Use 'CheckErrorAndWarningsStep30ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckErrorAndWarningsStep30()
        {
            #region Variable Declarations
            DXCell uIAnsattSeksCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIValidationViewCustom.UIGridValidationMessagTable.UIAnsattSeksCell;
            DXCell uIOnsdagCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIValidationViewCustom.UIGridValidationMessagTable.UIOnsdagCell;
            DXCell uIAdvarselCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIValidationViewCustom.UIGridValidationMessagTable.UIAdvarselCell;
            DXCell uIDeterformangedagvaktCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIValidationViewCustom.UIGridValidationMessagTable.UIDeterformangedagvaktCell;
            DXCell uIDeterformangedagvaktCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIValidationViewCustom.UIGridValidationMessagTable.UIDeterformangedagvaktCell1;
            DXCell uIDeterformangedagvaktCell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIValidationViewCustom.UIGridValidationMessagTable.UIDeterformangedagvaktCell2;
            #endregion

            // Verify that the 'Text' property of 'Ansatt, Seks' cell equals 'Ansatt, Seks'
            Assert.AreEqual(this.CheckErrorAndWarningsStep30ExpectedValues.UIAnsattSeksCellText, uIAnsattSeksCell.Text);

            // Verify that the 'Text' property of 'Onsdag' cell equals 'Onsdag'
            Assert.AreEqual(this.CheckErrorAndWarningsStep30ExpectedValues.UIOnsdagCellText, uIOnsdagCell.Text);

            // Verify that the 'Text' property of 'Advarsel' cell equals 'Advarsel'
            Assert.AreEqual(this.CheckErrorAndWarningsStep30ExpectedValues.UIAdvarselCellText, uIAdvarselCell.Text);

            // Verify that the 'Text' property of 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).' cell equals 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep30ExpectedValues.UIDeterformangedagvaktCellText, uIDeterformangedagvaktCell.Text);

            // Verify that the 'Text' property of 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).' cell equals 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep30ExpectedValues.UIDeterformangedagvaktCell1Text, uIDeterformangedagvaktCell1.Text);

            // Verify that the 'Text' property of 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).' cell equals 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).'
            Assert.AreEqual(this.CheckErrorAndWarningsStep30ExpectedValues.UIDeterformangedagvaktCell2Text, uIDeterformangedagvaktCell2.Text);
        }
        
        /// <summary>
        /// CheckL38DepSettingValues - Use 'CheckL38DepSettingValuesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckL38DepSettingValues()
        {
            #region Variable Declarations
            DXNavBarGroup uIKravtilF1hverukeNeiNavBarGroup = this.UIArbeidsplanoppsettfoWindow.UINbcRosterSetupNavBar.UIKravtilF1hverukeNeiNavBarGroup;
            DXNavBarGroup uIMaksantallsøndagerpåNavBarGroup = this.UIArbeidsplanoppsettfoWindow.UINbcRosterSetupNavBar.UIMaksantallsøndagerpåNavBarGroup;
            DXNavBarGroup uIMaksplanlagttidperdaNavBarGroup1 = this.UIArbeidsplanoppsettfoWindow.UINbcRosterSetupNavBar.UIMaksplanlagttidperdaNavBarGroup1;
            DXNavBarGroup uIMaksplanlagttidperukNavBarGroup1 = this.UIArbeidsplanoppsettfoWindow.UINbcRosterSetupNavBar.UIMaksplanlagttidperukNavBarGroup1;
            #endregion

            // Verify that the 'Text' property of 'Krav til F1 hver uke? - Nei' NavBarGroup equals 'Krav til F1 hver uke? - Nei'
            Assert.AreEqual(this.CheckL38DepSettingValuesExpectedValues.UIKravtilF1hverukeNeiNavBarGroupText, uIKravtilF1hverukeNeiNavBarGroup.Text);

            // Verify that the 'Text' property of 'Maks antall søndager på rad (§10-8). - 3,00' NavBarGroup equals 'Maks antall søndager på rad (§10-8). - 3,00'
            Assert.AreEqual(this.CheckL38DepSettingValuesExpectedValues.UIMaksantallsøndagerpåNavBarGroupText, uIMaksantallsøndagerpåNavBarGroup.Text);

            // Verify that the 'Text' property of 'Maks planlagt tid per dag (§10-4) - 20,00' NavBarGroup equals 'Maks planlagt tid per dag (§10-4) - 20,00'
            Assert.AreEqual(this.CheckL38DepSettingValuesExpectedValues.UIMaksplanlagttidperdaNavBarGroup1Text, uIMaksplanlagttidperdaNavBarGroup1.Text);

            // Verify that the 'Text' property of 'Maks planlagt tid per uke (§10-4) - 60,00' NavBarGroup equals 'Maks planlagt tid per uke (§10-4) - 60,00'
            Assert.AreEqual(this.CheckL38DepSettingValuesExpectedValues.UIMaksplanlagttidperukNavBarGroup1Text, uIMaksplanlagttidperukNavBarGroup1.Text);
        }
        
        /// <summary>
        /// CheckSetupStep11 - Use 'CheckSetupStep11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSetupStep11()
        {
            #region Variable Declarations
            DXTreeListCell uIFellesarbeidsplanoppTreeListCell = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode0TreeListNode.UIFellesarbeidsplanoppTreeListCell;
            DXTreeListCell uIA1AnsattEnTreeListCell = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode0TreeListNode.UINode0TreeListNode1.UIA1AnsattEnTreeListCell;
            DXTreeListCell uIFellesarbeidsplanoppTreeListCell1 = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode1TreeListNode.UIFellesarbeidsplanoppTreeListCell;
            DXTreeListCell uIA5AnsattFemTreeListCell = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode1TreeListNode.UINode0TreeListNode.UIA5AnsattFemTreeListCell;
            DXTreeListCell uIFellesarbeidsplanoppTreeListCell2 = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode2TreeListNode.UIFellesarbeidsplanoppTreeListCell;
            DXTreeListCell uIA10AnsattTiTreeListCell = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode2TreeListNode.UINode0TreeListNode.UIA10AnsattTiTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Felles arbeidsplanoppsett 1' TreeListCell equals 'Felles arbeidsplanoppsett 1'
            Assert.AreEqual(this.CheckSetupStep11ExpectedValues.UIFellesarbeidsplanoppTreeListCellValueAsString, uIFellesarbeidsplanoppTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A1;Ansatt, En' TreeListCell equals 'A1;Ansatt, En'
            Assert.AreEqual(this.CheckSetupStep11ExpectedValues.UIA1AnsattEnTreeListCellValueAsString, uIA1AnsattEnTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Felles arbeidsplanoppsett 2' TreeListCell equals 'Felles arbeidsplanoppsett 2'
            Assert.AreEqual(this.CheckSetupStep11ExpectedValues.UIFellesarbeidsplanoppTreeListCellValueAsString1, uIFellesarbeidsplanoppTreeListCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A5;Ansatt, Fem' TreeListCell equals 'A5;Ansatt, Fem'
            Assert.AreEqual(this.CheckSetupStep11ExpectedValues.UIA5AnsattFemTreeListCellValueAsString, uIA5AnsattFemTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Felles arbeidsplanoppsett 3' TreeListCell equals 'Felles arbeidsplanoppsett 3'
            Assert.AreEqual(this.CheckSetupStep11ExpectedValues.UIFellesarbeidsplanoppTreeListCellValueAsString2, uIFellesarbeidsplanoppTreeListCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A10;Ansatt, Ti' TreeListCell equals 'A10;Ansatt, Ti'
            Assert.AreEqual(this.CheckSetupStep11ExpectedValues.UIA10AnsattTiTreeListCellValueAsString, uIA10AnsattTiTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckSetupStep26 - Use 'CheckSetupStep26ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSetupStep26()
        {
            #region Variable Declarations
            DXTreeListCell uIFellesarbeidsplanoppTreeListCell = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode3TreeListNode.UIFellesarbeidsplanoppTreeListCell;
            DXTreeListCell uIA9AnsattNiTreeListCell = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode3TreeListNode.UINode0TreeListNode.UIA9AnsattNiTreeListCell;
            DXTreeListCell uIA6AnsattSeksTreeListCell = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode3TreeListNode.UINode1TreeListNode.UIA6AnsattSeksTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Felles arbeidsplanoppsett 4' TreeListCell equals 'Felles arbeidsplanoppsett 4'
            Assert.AreEqual(this.CheckSetupStep26ExpectedValues.UIFellesarbeidsplanoppTreeListCellValueAsString, uIFellesarbeidsplanoppTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A9;Ansatt, Ni' TreeListCell equals 'A9;Ansatt, Ni'
            Assert.AreEqual(this.CheckSetupStep26ExpectedValues.UIA9AnsattNiTreeListCellValueAsString, uIA9AnsattNiTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A6;Ansatt, Seks' TreeListCell equals 'A6;Ansatt, Seks'
            Assert.AreEqual(this.CheckSetupStep26ExpectedValues.UIA6AnsattSeksTreeListCellValueAsString, uIA6AnsattSeksTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckSetupStep27 - Use 'CheckSetupStep27ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSetupStep27()
        {
            #region Variable Declarations
            DXNavBarGroup uIF3kanbrukespåhalveheNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIF3kanbrukespåhalveheNavBarGroup;
            DXNavBarGroup uIF3kanbrukespåsøndageNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIF3kanbrukespåsøndageNavBarGroup;
            DXNavBarGroup uIKravtilF1hverukeJaNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIKravtilF1hverukeJaNavBarGroup;
            DXNavBarGroup uIMaksantallsøndagerpåNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMaksantallsøndagerpåNavBarGroup;
            DXNavBarGroup uIMaksplanlagttidperdaNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMaksplanlagttidperdaNavBarGroup;
            DXNavBarGroup uIMaksplanlagttidperukNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMaksplanlagttidperukNavBarGroup;
            DXNavBarGroup uIMinstedagligearbeidsNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMinstedagligearbeidsNavBarGroup;
            DXNavBarGroup uIMinstedagligearbeidsNavBarGroup1 = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMinstedagligearbeidsNavBarGroup1;
            DXNavBarGroup uIMinstedagligearbeidsNavBarGroup2 = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMinstedagligearbeidsNavBarGroup2;
            DXNavBarGroup uIUkentligarbeidsfrigjNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIUkentligarbeidsfrigjNavBarGroup;
            DXNavBarGroup uIF3LengdeVaktfragrunnNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIF3LengdeVaktfragrunnNavBarGroup;
            DXNavBarGroup uIF4LengdeVaktfragrunnNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIF4LengdeVaktfragrunnNavBarGroup;
            DXNavBarGroup uIF5LengdeVaktfragrunnNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIF5LengdeVaktfragrunnNavBarGroup;
            DXNavBarGroup uIMaksantallAftenvakteNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMaksantallAftenvakteNavBarGroup;
            DXNavBarGroup uIMaksantallDagvakterpNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMaksantallDagvakterpNavBarGroup;
            DXNavBarGroup uIMaksantallNattvakterNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMaksantallNattvakterNavBarGroup;
            DXNavBarGroup uIMaksantalllørdagerpåNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMaksantalllørdagerpåNavBarGroup;
            DXNavBarGroup uIMaksantallvakterpåraNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMaksantallvakterpåraNavBarGroup;
            DXNavBarGroup uIMaksimumantallvakterNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMaksimumantallvakterNavBarGroup;
            DXNavBarGroup uIMinimumantallvakterpNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMinimumantallvakterpNavBarGroup;
            DXNavBarGroup uIMinimumogmaksimumantNavBarGroup = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UINbcRosterSetupNavBar.UIMinimumogmaksimumantNavBarGroup;
            #endregion

            // Verify that the 'Text' property of 'F3 kan brukes på halve helligdager? - Nei' NavBarGroup equals 'F3 kan brukes på halve helligdager? - Nei'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIF3kanbrukespåhalveheNavBarGroupText, uIF3kanbrukespåhalveheNavBarGroup.Text);

            // Verify that the 'Text' property of 'F3 kan brukes på søndager? - Ja' NavBarGroup equals 'F3 kan brukes på søndager? - Ja'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIF3kanbrukespåsøndageNavBarGroupText, uIF3kanbrukespåsøndageNavBarGroup.Text);

            // Verify that the 'Text' property of 'Krav til F1 hver uke? - Ja' NavBarGroup equals 'Krav til F1 hver uke? - Ja'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIKravtilF1hverukeJaNavBarGroupText, uIKravtilF1hverukeJaNavBarGroup.Text);

            // Verify that the 'Text' property of 'Maks antall søndager på rad (§10-8). - 1,00' NavBarGroup equals 'Maks antall søndager på rad (§10-8). - 1,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMaksantallsøndagerpåNavBarGroupText, uIMaksantallsøndagerpåNavBarGroup.Text);

            // Verify that the 'Text' property of 'Maks planlagt tid per dag (§10-4) - 12,00' NavBarGroup equals 'Maks planlagt tid per dag (§10-4) - 12,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMaksplanlagttidperdaNavBarGroupText, uIMaksplanlagttidperdaNavBarGroup.Text);

            // Verify that the 'Text' property of 'Maks planlagt tid per uke (§10-4) - 48,00' NavBarGroup equals 'Maks planlagt tid per uke (§10-4) - 48,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMaksplanlagttidperukNavBarGroupText, uIMaksplanlagttidperukNavBarGroup.Text);

            // Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMinstedagligearbeidsNavBarGroupText, uIMinstedagligearbeidsNavBarGroup.Text);

            // Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMinstedagligearbeidsNavBarGroup1Text, uIMinstedagligearbeidsNavBarGroup1.Text);

            // Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMinstedagligearbeidsNavBarGroup2Text, uIMinstedagligearbeidsNavBarGroup2.Text);

            // Verify that the 'Text' property of 'Ukentlig arbeidsfri (gjelder kun F1) (§10-8) - 35,00' NavBarGroup equals 'Ukentlig arbeidsfri (gjelder kun F1) (§10-8) - 35,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIUkentligarbeidsfrigjNavBarGroupText, uIUkentligarbeidsfrigjNavBarGroup.Text);

            // Verify that the 'Text' property of 'F3 Lengde - Vakt fra grunnplan' NavBarGroup equals 'F3 Lengde - Vakt fra grunnplan'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIF3LengdeVaktfragrunnNavBarGroupText, uIF3LengdeVaktfragrunnNavBarGroup.Text);

            // Verify that the 'Text' property of 'F4 Lengde - Vakt fra grunnplan' NavBarGroup equals 'F4 Lengde - Vakt fra grunnplan'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIF4LengdeVaktfragrunnNavBarGroupText, uIF4LengdeVaktfragrunnNavBarGroup.Text);

            // Verify that the 'Text' property of 'F5 Lengde - Vakt fra grunnplan' NavBarGroup equals 'F5 Lengde - Vakt fra grunnplan'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIF5LengdeVaktfragrunnNavBarGroupText, uIF5LengdeVaktfragrunnNavBarGroup.Text);

            // Verify that the 'Text' property of 'Maks antall Aften-vakter på rad. - 1,00' NavBarGroup equals 'Maks antall Aften-vakter på rad. - 1,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMaksantallAftenvakteNavBarGroupText, uIMaksantallAftenvakteNavBarGroup.Text, "Error in comparison to Global layout");

            // Verify that the 'Text' property of 'Maks antall Dag-vakter på rad. - 2,00' NavBarGroup equals 'Maks antall Dag-vakter på rad. - 2,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMaksantallDagvakterpNavBarGroupText, uIMaksantallDagvakterpNavBarGroup.Text, "Error in comparison to Global layout");

            // Verify that the 'Text' property of 'Maks antall Natt-vakter på rad. - 3,00' NavBarGroup equals 'Maks antall Natt-vakter på rad. - 3,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMaksantallNattvakterNavBarGroupText, uIMaksantallNattvakterNavBarGroup.Text, "Error in comparison to Global layout");

            // Verify that the 'Text' property of 'Maks antall lørdager på rad. - 2,00' NavBarGroup equals 'Maks antall lørdager på rad. - 2,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMaksantalllørdagerpåNavBarGroupText, uIMaksantalllørdagerpåNavBarGroup.Text);

            // Verify that the 'Text' property of 'Maks antall vakter på rad. - 8,00' NavBarGroup equals 'Maks antall vakter på rad. - 8,00'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMaksantallvakterpåraNavBarGroupText, uIMaksantallvakterpåraNavBarGroup.Text);

            // Verify that the 'Text' property of 'Maksimum antall vakter pr. vaktkategori - 999 / 999 / 999 /' NavBarGroup equals 'Maksimum antall vakter pr. vaktkategori - 999 / 999 / 999 / '
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMaksimumantallvakterNavBarGroupText, uIMaksimumantallvakterNavBarGroup.Text);

            // Verify that the 'Text' property of 'Minimum antall vakter pr. vaktkategori - - / - / - /' NavBarGroup equals 'Minimum antall vakter pr. vaktkategori - - / - / - / '
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMinimumantallvakterpNavBarGroupText, uIMinimumantallvakterpNavBarGroup.Text);

            // Verify that the 'Text' property of 'Minimum og maksimum antall vakter pr. vaktkategori justeres etter stillingsstørrelse? - Nei' NavBarGroup equals 'Minimum og maksimum antall vakter pr. vaktkategori justeres etter stillingsstørrelse? - Nei'
            Assert.AreEqual(this.CheckSetupStep27ExpectedValues.UIMinimumogmaksimumantNavBarGroupText, uIMinimumogmaksimumantNavBarGroup.Text);
        }
        
        /// <summary>
        /// CheckTurnusDepSettingValues - Use 'CheckTurnusDepSettingValuesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckTurnusDepSettingValues()
        {
            #region Variable Declarations
            DXNavBarGroup uIMinstedagligearbeidsNavBarGroup = this.UIArbeidsplanoppsettfoWindow.UINbcRosterSetupNavBar.UIMinstedagligearbeidsNavBarGroup;
            DXNavBarGroup uIMinstedagligearbeidsNavBarGroup1 = this.UIArbeidsplanoppsettfoWindow.UINbcRosterSetupNavBar.UIMinstedagligearbeidsNavBarGroup1;
            DXNavBarGroup uIMinstedagligearbeidsNavBarGroup2 = this.UIArbeidsplanoppsettfoWindow.UINbcRosterSetupNavBar.UIMinstedagligearbeidsNavBarGroup2;
            #endregion

            // Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
            Assert.AreEqual(this.CheckTurnusDepSettingValuesExpectedValues.UIMinstedagligearbeidsNavBarGroupText, uIMinstedagligearbeidsNavBarGroup.Text);

            // Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
            Assert.AreEqual(this.CheckTurnusDepSettingValuesExpectedValues.UIMinstedagligearbeidsNavBarGroup1Text, uIMinstedagligearbeidsNavBarGroup1.Text);

            // Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
            Assert.AreEqual(this.CheckTurnusDepSettingValuesExpectedValues.UIMinstedagligearbeidsNavBarGroup2Text, uIMinstedagligearbeidsNavBarGroup2.Text);
        }
        
        /// <summary>
        /// OpenEmpTiLayoutWindow
        /// </summary>
        public void OpenEmpTiLayoutWindow()
        {
            #region Variable Declarations
            DXCell uIAnsattTiCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnsattTiCell1;
            DXMenuBaseButtonItem uIBarButtonItemLink0MenuBaseButtonItem = this.UIItemWindow2.UIPopupMenuBarControlMenu.UIBarButtonItemLink0MenuBaseButtonItem;
            DXTestControl uIXtraTabControlHeaderTabPage = this.UIAnsattinnstillingerfWindow.UIPaMainContentClient1.UIGsTabControl1TabList.UIXtraTabControlHeaderTabPage;
            #endregion

            // Right-Click 'Ansatt, Ti' cell
            Mouse.Click(uIAnsattTiCell1, MouseButtons.Right, ModifierKeys.None, new Point(53, 11));

            // Click 'BarButtonItemLink[0]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink0MenuBaseButtonItem, new Point(137, 12));

            // Click 'XtraTabControlHeader' tab
            Mouse.Click(uIXtraTabControlHeaderTabPage, new Point(57, 8));
        }
        
        /// <summary>
        /// SelectEmpEnLine
        /// </summary>
        public void SelectEmpEnLine()
        {
            #region Variable Declarations
            DXCell uIAnsattEnCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnsattEnCell1;
            #endregion

            // Click 'Ansatt, En' cell
            Mouse.Click(uIAnsattEnCell1, new Point(80, 9));
        }
        
        /// <summary>
        /// SelectEmpFemLine
        /// </summary>
        public void SelectEmpFemLine()
        {
            #region Variable Declarations
            DXCell uIAnsattFemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnsattFemCell1;
            #endregion

            // Click 'Ansatt, Fem' cell
            Mouse.Click(uIAnsattFemCell1, new Point(53, 10));
        }
        
        /// <summary>
        /// SelectEmployeesStep10
        /// </summary>
        public void SelectEmployeesStep10()
        {
            #region Variable Declarations
            DXCell uIAnsattEnCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattEnCell;
            DXCell uIAnsattFemCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattFemCell;
            DXCell uIAnsattTiCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattTiCell;
            #endregion

            // Click 'Ansatt, En' cell
            Mouse.Click(uIAnsattEnCell, new Point(70, 7));

            // Click 'Ansatt, Fem' cell while pressing Control
            Mouse.Click(uIAnsattFemCell, MouseButtons.Left, ModifierKeys.Control, new Point(70, 12));

            // Click 'Ansatt, Ti' cell while pressing Control
            Mouse.Click(uIAnsattTiCell, MouseButtons.Left, ModifierKeys.Control, new Point(47, 9));
        }
        
        /// <summary>
        /// SelectEmployeesStep26
        /// </summary>
        public void SelectEmployeesStep26()
        {
            #region Variable Declarations
            DXCell uIAnsattFemCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattFemCell;
            DXCell uIAnsattSeksCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattSeksCell;
            #endregion

            // Click 'Ansatt, Fem' cell
            Mouse.Click(uIAnsattFemCell, new Point(61, 9));

            // Click 'Ansatt, Seks' cell while pressing Control
            Mouse.Click(uIAnsattSeksCell, MouseButtons.Left, ModifierKeys.Control, new Point(54, 6));
        }
        
        /// <summary>
        /// SelectEmpNiLine
        /// </summary>
        public void SelectEmpNiLine()
        {
            #region Variable Declarations
            DXCell uIAnsattNiCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnsattNiCell;
            #endregion

            // Click 'Ansatt, Ni' cell
            Mouse.Click(uIAnsattNiCell, new Point(51, 12));
        }
        
        /// <summary>
        /// SelectEmpSeksLine
        /// </summary>
        public void SelectEmpSeksLine()
        {
            #region Variable Declarations
            DXCell uIAnsattSeksCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnsattSeksCell;
            #endregion

            // Click 'Ansatt, Seks' cell
            Mouse.Click(uIAnsattSeksCell, new Point(61, 9));
        }
        
        /// <summary>
        /// SelectEmpTiLine
        /// </summary>
        public void SelectEmpTiLine()
        {
            #region Variable Declarations
            DXCell uIAnsattTiCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnsattTiCell1;
            #endregion

            // Click 'Ansatt, Ti' cell
            Mouse.Click(uIAnsattTiCell1, new Point(52, 8));
        }
        
        /// <summary>
        /// SelectRosterPlanLayout_2 - Use 'SelectRosterPlanLayout_2Params' to pass parameters into this method.
        /// </summary>
        public void SelectRosterPlanLayout_2()
        {
            #region Variable Declarations
            DXButton uIEditorButton0Button = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIEditorButton0Button;
            DXTreeListNode uINode1TreeListNode = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode1TreeListNode;
            #endregion

            // Click 'EditorButton0' button
            Mouse.Click(uIEditorButton0Button, new Point(6, 9));

            // Type 'True' in 'Node1' TreeListNode
            //Checked
            uINode1TreeListNode.Checked = this.SelectRosterPlanLayout_2Params.UINode1TreeListNodeChecked;
        }
        
        /// <summary>
        /// SelectRosterPlanLayout_3 - Use 'SelectRosterPlanLayout_3Params' to pass parameters into this method.
        /// </summary>
        public void SelectRosterPlanLayout_3()
        {
            #region Variable Declarations
            DXButton uIEditorButton0Button = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIEditorButton0Button;
            DXTreeListNode uINode2TreeListNode = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode2TreeListNode;
            #endregion

            // Click 'EditorButton0' button
            Mouse.Click(uIEditorButton0Button, new Point(7, 7));

            // Type 'True' in 'Node2' TreeListNode
            //Checked
            uINode2TreeListNode.Checked = this.SelectRosterPlanLayout_3Params.UINode2TreeListNodeChecked;
        }
        
        /// <summary>
        /// SelectRosterPlanLayout_4 - Use 'SelectRosterPlanLayout_4Params' to pass parameters into this method.
        /// </summary>
        public void SelectRosterPlanLayout_4()
        {
            #region Variable Declarations
            DXTreeListNode uINode3TreeListNode = this.UIArbeidsplanoppsettWindow.UIGsTabControlTabList.UITabPersonGroupRosterClient.UIPnlFilterClient.UIGrpRuleTypeClient.UIPcEditEmployeePopupEdit.UIPopupContainerFormWindow.UIPcControlEmployeeClient.UITlEmployeeTreeList.UINode3TreeListNode;
            #endregion

            // Type 'True' in 'Node3' TreeListNode
            //Checked
            uINode3TreeListNode.Checked = this.SelectRosterPlanLayout_4Params.UINode3TreeListNodeChecked;
        }
        
        #region Properties
        public virtual AddShiftsStep15_1Params AddShiftsStep15_1Params
        {
            get
            {
                if ((this.mAddShiftsStep15_1Params == null))
                {
                    this.mAddShiftsStep15_1Params = new AddShiftsStep15_1Params();
                }
                return this.mAddShiftsStep15_1Params;
            }
        }
        
        public virtual AddShiftsStep15_2Params AddShiftsStep15_2Params
        {
            get
            {
                if ((this.mAddShiftsStep15_2Params == null))
                {
                    this.mAddShiftsStep15_2Params = new AddShiftsStep15_2Params();
                }
                return this.mAddShiftsStep15_2Params;
            }
        }
        
        public virtual AddShiftsStep28Params AddShiftsStep28Params
        {
            get
            {
                if ((this.mAddShiftsStep28Params == null))
                {
                    this.mAddShiftsStep28Params = new AddShiftsStep28Params();
                }
                return this.mAddShiftsStep28Params;
            }
        }
        
        public virtual CheckADMDepSettingValuesExpectedValues CheckADMDepSettingValuesExpectedValues
        {
            get
            {
                if ((this.mCheckADMDepSettingValuesExpectedValues == null))
                {
                    this.mCheckADMDepSettingValuesExpectedValues = new CheckADMDepSettingValuesExpectedValues();
                }
                return this.mCheckADMDepSettingValuesExpectedValues;
            }
        }
        
        public virtual CheckEmployeeDataStep10ExpectedValues CheckEmployeeDataStep10ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeeDataStep10ExpectedValues == null))
                {
                    this.mCheckEmployeeDataStep10ExpectedValues = new CheckEmployeeDataStep10ExpectedValues();
                }
                return this.mCheckEmployeeDataStep10ExpectedValues;
            }
        }
        
        public virtual CheckErrorAndWarningsStep16ExpectedValues CheckErrorAndWarningsStep16ExpectedValues
        {
            get
            {
                if ((this.mCheckErrorAndWarningsStep16ExpectedValues == null))
                {
                    this.mCheckErrorAndWarningsStep16ExpectedValues = new CheckErrorAndWarningsStep16ExpectedValues();
                }
                return this.mCheckErrorAndWarningsStep16ExpectedValues;
            }
        }
        
        public virtual CheckErrorAndWarningsStep17ExpectedValues CheckErrorAndWarningsStep17ExpectedValues
        {
            get
            {
                if ((this.mCheckErrorAndWarningsStep17ExpectedValues == null))
                {
                    this.mCheckErrorAndWarningsStep17ExpectedValues = new CheckErrorAndWarningsStep17ExpectedValues();
                }
                return this.mCheckErrorAndWarningsStep17ExpectedValues;
            }
        }
        
        public virtual CheckErrorAndWarningsStep18ExpectedValues CheckErrorAndWarningsStep18ExpectedValues
        {
            get
            {
                if ((this.mCheckErrorAndWarningsStep18ExpectedValues == null))
                {
                    this.mCheckErrorAndWarningsStep18ExpectedValues = new CheckErrorAndWarningsStep18ExpectedValues();
                }
                return this.mCheckErrorAndWarningsStep18ExpectedValues;
            }
        }
        
        public virtual CheckErrorAndWarningsStep21ExpectedValues CheckErrorAndWarningsStep21ExpectedValues
        {
            get
            {
                if ((this.mCheckErrorAndWarningsStep21ExpectedValues == null))
                {
                    this.mCheckErrorAndWarningsStep21ExpectedValues = new CheckErrorAndWarningsStep21ExpectedValues();
                }
                return this.mCheckErrorAndWarningsStep21ExpectedValues;
            }
        }
        
        public virtual CheckErrorAndWarningsStep22ExpectedValues CheckErrorAndWarningsStep22ExpectedValues
        {
            get
            {
                if ((this.mCheckErrorAndWarningsStep22ExpectedValues == null))
                {
                    this.mCheckErrorAndWarningsStep22ExpectedValues = new CheckErrorAndWarningsStep22ExpectedValues();
                }
                return this.mCheckErrorAndWarningsStep22ExpectedValues;
            }
        }
        
        public virtual CheckErrorAndWarningsStep24ExpectedValues CheckErrorAndWarningsStep24ExpectedValues
        {
            get
            {
                if ((this.mCheckErrorAndWarningsStep24ExpectedValues == null))
                {
                    this.mCheckErrorAndWarningsStep24ExpectedValues = new CheckErrorAndWarningsStep24ExpectedValues();
                }
                return this.mCheckErrorAndWarningsStep24ExpectedValues;
            }
        }
        
        public virtual CheckErrorAndWarningsStep29ExpectedValues CheckErrorAndWarningsStep29ExpectedValues
        {
            get
            {
                if ((this.mCheckErrorAndWarningsStep29ExpectedValues == null))
                {
                    this.mCheckErrorAndWarningsStep29ExpectedValues = new CheckErrorAndWarningsStep29ExpectedValues();
                }
                return this.mCheckErrorAndWarningsStep29ExpectedValues;
            }
        }
        
        public virtual CheckErrorAndWarningsStep30ExpectedValues CheckErrorAndWarningsStep30ExpectedValues
        {
            get
            {
                if ((this.mCheckErrorAndWarningsStep30ExpectedValues == null))
                {
                    this.mCheckErrorAndWarningsStep30ExpectedValues = new CheckErrorAndWarningsStep30ExpectedValues();
                }
                return this.mCheckErrorAndWarningsStep30ExpectedValues;
            }
        }
        
        public virtual CheckL38DepSettingValuesExpectedValues CheckL38DepSettingValuesExpectedValues
        {
            get
            {
                if ((this.mCheckL38DepSettingValuesExpectedValues == null))
                {
                    this.mCheckL38DepSettingValuesExpectedValues = new CheckL38DepSettingValuesExpectedValues();
                }
                return this.mCheckL38DepSettingValuesExpectedValues;
            }
        }
        
        public virtual CheckSetupStep11ExpectedValues CheckSetupStep11ExpectedValues
        {
            get
            {
                if ((this.mCheckSetupStep11ExpectedValues == null))
                {
                    this.mCheckSetupStep11ExpectedValues = new CheckSetupStep11ExpectedValues();
                }
                return this.mCheckSetupStep11ExpectedValues;
            }
        }
        
        public virtual CheckSetupStep26ExpectedValues CheckSetupStep26ExpectedValues
        {
            get
            {
                if ((this.mCheckSetupStep26ExpectedValues == null))
                {
                    this.mCheckSetupStep26ExpectedValues = new CheckSetupStep26ExpectedValues();
                }
                return this.mCheckSetupStep26ExpectedValues;
            }
        }
        
        public virtual CheckSetupStep27ExpectedValues CheckSetupStep27ExpectedValues
        {
            get
            {
                if ((this.mCheckSetupStep27ExpectedValues == null))
                {
                    this.mCheckSetupStep27ExpectedValues = new CheckSetupStep27ExpectedValues();
                }
                return this.mCheckSetupStep27ExpectedValues;
            }
        }
        
        public virtual CheckTurnusDepSettingValuesExpectedValues CheckTurnusDepSettingValuesExpectedValues
        {
            get
            {
                if ((this.mCheckTurnusDepSettingValuesExpectedValues == null))
                {
                    this.mCheckTurnusDepSettingValuesExpectedValues = new CheckTurnusDepSettingValuesExpectedValues();
                }
                return this.mCheckTurnusDepSettingValuesExpectedValues;
            }
        }
        
        public virtual SelectRosterPlanLayout_2Params SelectRosterPlanLayout_2Params
        {
            get
            {
                if ((this.mSelectRosterPlanLayout_2Params == null))
                {
                    this.mSelectRosterPlanLayout_2Params = new SelectRosterPlanLayout_2Params();
                }
                return this.mSelectRosterPlanLayout_2Params;
            }
        }
        
        public virtual SelectRosterPlanLayout_3Params SelectRosterPlanLayout_3Params
        {
            get
            {
                if ((this.mSelectRosterPlanLayout_3Params == null))
                {
                    this.mSelectRosterPlanLayout_3Params = new SelectRosterPlanLayout_3Params();
                }
                return this.mSelectRosterPlanLayout_3Params;
            }
        }
        
        public virtual SelectRosterPlanLayout_4Params SelectRosterPlanLayout_4Params
        {
            get
            {
                if ((this.mSelectRosterPlanLayout_4Params == null))
                {
                    this.mSelectRosterPlanLayout_4Params = new SelectRosterPlanLayout_4Params();
                }
                return this.mSelectRosterPlanLayout_4Params;
            }
        }
        
        public UIArbeidsplanoppsettfoWindow UIArbeidsplanoppsettfoWindow
        {
            get
            {
                if ((this.mUIArbeidsplanoppsettfoWindow == null))
                {
                    this.mUIArbeidsplanoppsettfoWindow = new UIArbeidsplanoppsettfoWindow();
                }
                return this.mUIArbeidsplanoppsettfoWindow;
            }
        }
        
        public UILeggtilansatteWindow UILeggtilansatteWindow
        {
            get
            {
                if ((this.mUILeggtilansatteWindow == null))
                {
                    this.mUILeggtilansatteWindow = new UILeggtilansatteWindow();
                }
                return this.mUILeggtilansatteWindow;
            }
        }
        
        public UIAnsatteiarbeidsplanWindow UIAnsatteiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIAnsatteiarbeidsplanWindow == null))
                {
                    this.mUIAnsatteiarbeidsplanWindow = new UIAnsatteiarbeidsplanWindow();
                }
                return this.mUIAnsatteiarbeidsplanWindow;
            }
        }
        
        public UIArbeidsplanoppsettWindow UIArbeidsplanoppsettWindow
        {
            get
            {
                if ((this.mUIArbeidsplanoppsettWindow == null))
                {
                    this.mUIArbeidsplanoppsettWindow = new UIArbeidsplanoppsettWindow();
                }
                return this.mUIArbeidsplanoppsettWindow;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UIGT4003InformasjonWindow UIGT4003InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4003InformasjonWindow == null))
                {
                    this.mUIGT4003InformasjonWindow = new UIGT4003InformasjonWindow();
                }
                return this.mUIGT4003InformasjonWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAnsattinnstillingerfWindow UIAnsattinnstillingerfWindow
        {
            get
            {
                if ((this.mUIAnsattinnstillingerfWindow == null))
                {
                    this.mUIAnsattinnstillingerfWindow = new UIAnsattinnstillingerfWindow();
                }
                return this.mUIAnsattinnstillingerfWindow;
            }
        }
        
        public UIGlobaltarbeidsplanopWindow UIGlobaltarbeidsplanopWindow
        {
            get
            {
                if ((this.mUIGlobaltarbeidsplanopWindow == null))
                {
                    this.mUIGlobaltarbeidsplanopWindow = new UIGlobaltarbeidsplanopWindow();
                }
                return this.mUIGlobaltarbeidsplanopWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2();
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private AddShiftsStep15_1Params mAddShiftsStep15_1Params;
        
        private AddShiftsStep15_2Params mAddShiftsStep15_2Params;
        
        private AddShiftsStep28Params mAddShiftsStep28Params;
        
        private CheckADMDepSettingValuesExpectedValues mCheckADMDepSettingValuesExpectedValues;
        
        private CheckEmployeeDataStep10ExpectedValues mCheckEmployeeDataStep10ExpectedValues;
        
        private CheckErrorAndWarningsStep16ExpectedValues mCheckErrorAndWarningsStep16ExpectedValues;
        
        private CheckErrorAndWarningsStep17ExpectedValues mCheckErrorAndWarningsStep17ExpectedValues;
        
        private CheckErrorAndWarningsStep18ExpectedValues mCheckErrorAndWarningsStep18ExpectedValues;
        
        private CheckErrorAndWarningsStep21ExpectedValues mCheckErrorAndWarningsStep21ExpectedValues;
        
        private CheckErrorAndWarningsStep22ExpectedValues mCheckErrorAndWarningsStep22ExpectedValues;
        
        private CheckErrorAndWarningsStep24ExpectedValues mCheckErrorAndWarningsStep24ExpectedValues;
        
        private CheckErrorAndWarningsStep29ExpectedValues mCheckErrorAndWarningsStep29ExpectedValues;
        
        private CheckErrorAndWarningsStep30ExpectedValues mCheckErrorAndWarningsStep30ExpectedValues;
        
        private CheckL38DepSettingValuesExpectedValues mCheckL38DepSettingValuesExpectedValues;
        
        private CheckSetupStep11ExpectedValues mCheckSetupStep11ExpectedValues;
        
        private CheckSetupStep26ExpectedValues mCheckSetupStep26ExpectedValues;
        
        private CheckSetupStep27ExpectedValues mCheckSetupStep27ExpectedValues;
        
        private CheckTurnusDepSettingValuesExpectedValues mCheckTurnusDepSettingValuesExpectedValues;
        
        private SelectRosterPlanLayout_2Params mSelectRosterPlanLayout_2Params;
        
        private SelectRosterPlanLayout_3Params mSelectRosterPlanLayout_3Params;
        
        private SelectRosterPlanLayout_4Params mSelectRosterPlanLayout_4Params;
        
        private UIArbeidsplanoppsettfoWindow mUIArbeidsplanoppsettfoWindow;
        
        private UILeggtilansatteWindow mUILeggtilansatteWindow;
        
        private UIAnsatteiarbeidsplanWindow mUIAnsatteiarbeidsplanWindow;
        
        private UIArbeidsplanoppsettWindow mUIArbeidsplanoppsettWindow;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UIGT4003InformasjonWindow mUIGT4003InformasjonWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIAnsattinnstillingerfWindow mUIAnsattinnstillingerfWindow;
        
        private UIGlobaltarbeidsplanopWindow mUIGlobaltarbeidsplanopWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddShiftsStep15_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddShiftsStep15_1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'a1{Tab}' in '[Row]0[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "a1{Tab}";
        
        /// <summary>
        /// Type 'd{Tab}' in '[Row]0[Column]RosterCell_1' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit1SendKeys = "d{Tab}";
        
        /// <summary>
        /// Type 'a1{Tab}' in '[Row]0[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit2SendKeys = "a1{Tab}";
        
        /// <summary>
        /// Type 'd{Tab}' in '[Row]0[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit3SendKeys = "d{Tab}";
        
        /// <summary>
        /// Type 'd{Tab}' in '[Row]0[Column]RosterCell_13' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit4SendKeys = "d{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddShiftsStep15_2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddShiftsStep15_2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'a1{Tab}' in '[Row]1[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditSendKeys = "a1{Tab}";
        
        /// <summary>
        /// Type 'd{Tab}' in '[Row]1[Column]RosterCell_1' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit1SendKeys = "d{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]1[Column]RosterCell_2' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit2SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'd{Tab}' in '[Row]1[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit3SendKeys = "d{Tab}";
        
        /// <summary>
        /// Type 'd{Tab}' in '[Row]1[Column]RosterCell_8' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit4SendKeys = "d{Tab}";
        
        /// <summary>
        /// Type 'd{Tab}' in '[Row]1[Column]RosterCell_9' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit5SendKeys = "d{Tab}";
        
        /// <summary>
        /// Type 'd{Tab}' in '[Row]1[Column]RosterCell_10' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit6SendKeys = "d{Tab}";
        
        /// <summary>
        /// Type 'd{Tab}' in '[Row]1[Column]RosterCell_12' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit7SendKeys = "d{Tab}";
        
        /// <summary>
        /// Type 'dfm{Tab}' in '[Row]1[Column]RosterCell_14' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit8SendKeys = "dfm{Tab}";
        
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]1[Column]RosterCell_20' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit9SendKeys = "f1{Tab}";
        
        /// <summary>
        /// Type 'kk2{Tab}' in '[Row]2[Column]RosterCell_3' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEditSendKeys = "kk2{Tab}";
        
        /// <summary>
        /// Type 'gv1{Tab}' in '[Row]2[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit1SendKeys = "gv1{Tab}";
        
        /// <summary>
        /// Type 'kk2{Tab}' in '[Row]2[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit2SendKeys = "kk2{Tab}";
        
        /// <summary>
        /// Type 'kk2{Tab}' in '[Row]2[Column]RosterCell_9' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit3SendKeys = "kk2{Tab}";
        
        /// <summary>
        /// Type 'kk2{Tab}' in '[Row]2[Column]RosterCell_11' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit4SendKeys = "kk2{Tab}";
        
        /// <summary>
        /// Type 'gv1{Tab}' in '[Row]2[Column]RosterCell_13' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit5SendKeys = "gv1{Tab}";
        
        /// <summary>
        /// Type 'gv1{Tab}' in '[Row]2[Column]RosterCell_20' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit6SendKeys = "gv1{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddShiftsStep28'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddShiftsStep28Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'a1{Tab}' in '[Row]3[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEditSendKeys = "a1{Tab}";
        
        /// <summary>
        /// Type 'a1{Tab}' in '[Row]3[Column]RosterCell_1' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEdit1SendKeys = "a1{Tab}";
        
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]3[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEdit2SendKeys = "f1{Tab}";
        
        /// <summary>
        /// Type 'n' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "n";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]3[Column]RosterCell_8' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEdit3SendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]3[Column]RosterCell_13' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEdit4SendKeys = "f1{Tab}";
        
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]3[Column]RosterCell_20' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEdit5SendKeys = "f1{Tab}";
        
        /// <summary>
        /// Type 'd' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys1 = "d";
        
        /// <summary>
        /// Type '{Tab}' in '[Row]4[Column]RosterCell_2' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]4[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit1SendKeys = "f1{Tab}";
        
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]4[Column]RosterCell_13' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit2SendKeys = "f1{Tab}";
        
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]4[Column]RosterCell_20' text box
        /// </summary>
        public string UIRow4ColumnRosterCellEdit3SendKeys = "f1{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckADMDepSettingValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckADMDepSettingValuesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Maks planlagt tid per dag (§10-4) - 8,00' NavBarGroup equals 'Maks planlagt tid per dag (§10-4) - 8,00'
        /// </summary>
        public string UIMaksplanlagttidperdaNavBarGroupText = "Maks planlagt tid per dag (§10-4) - 8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks planlagt tid per uke (§10-4) - 38,00' NavBarGroup equals 'Maks planlagt tid per uke (§10-4) - 38,00'
        /// </summary>
        public string UIMaksplanlagttidperukNavBarGroupText = "Maks planlagt tid per uke (§10-4) - 38,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks antall lørdager på rad. - 1,00' NavBarGroup equals 'Maks antall lørdager på rad. - 1,00'
        /// </summary>
        public string UIMaksantalllørdagerpåNavBarGroupText = "Maks antall lørdager på rad. - 1,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks antall vakter på rad. - 5,00' NavBarGroup equals 'Maks antall vakter på rad. - 5,00'
        /// </summary>
        public string UIMaksantallvakterpåraNavBarGroupText = "Maks antall vakter på rad. - 5,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeeDataStep10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeeDataStep10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. Ansatt, En' TreeListCell equals '1. Ansatt, En'
        /// </summary>
        public string UIItem1AnsattEnTreeListCellValueAsString = "1. Ansatt, En";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. 50%' TreeListCell equals '1. 50%'
        /// </summary>
        public string UIItem150TreeListCellValueAsString = "1. 50%";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5110 - Diverse' TreeListCell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5110DiverseTreeListCellValueAsString = "5110 - Diverse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'S - Sykepleier' TreeListCell equals 'S - Sykepleier'
        /// </summary>
        public string UISSykepleierTreeListCellValueAsString = "S - Sykepleier";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'TURNUS - Turnus 35,5t/uke' TreeListCell equals 'TURNUS - Turnus 35,5t/uke'
        /// </summary>
        public string UITURNUSTurnus355tukeTreeListCellValueAsString = "TURNUS - Turnus 35,5t/uke";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '35,5' TreeListCell equals '35.5'
        /// </summary>
        public string UIItem355TreeListCellValueAsString = "35.5";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2. Ansatt, Fem' TreeListCell equals '2. Ansatt, Fem'
        /// </summary>
        public string UIItem2AnsattFemTreeListCellValueAsString = "2. Ansatt, Fem";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. 90%' TreeListCell equals '1. 90%'
        /// </summary>
        public string UIItem190TreeListCellValueAsString = "1. 90%";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5110 - Diverse' TreeListCell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5110DiverseTreeListCellValueAsString1 = "5110 - Diverse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'D - Dagtidspersonell' TreeListCell equals 'D - Dagtidspersonell'
        /// </summary>
        public string UIDDagtidspersonellTreeListCellValueAsString = "D - Dagtidspersonell";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'ADM - Administrasjon' TreeListCell equals 'ADM - Administrasjon'
        /// </summary>
        public string UIADMAdministrasjonTreeListCellValueAsString = "ADM - Administrasjon";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '37,5' TreeListCell equals '37.5'
        /// </summary>
        public string UIItem375TreeListCellValueAsString = "37.5";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '50' TreeListCell equals '50'
        /// </summary>
        public string UIItem50TreeListCellValueAsString = "50";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '90' TreeListCell equals '90'
        /// </summary>
        public string UIItem90TreeListCellValueAsString = "90";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3. Ansatt, Ti' TreeListCell equals '3. Ansatt, Ti'
        /// </summary>
        public string UIItem3AnsattTiTreeListCellValueAsString = "3. Ansatt, Ti";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. 100%' TreeListCell equals '1. 100%'
        /// </summary>
        public string UIItem1100TreeListCellValueAsString = "1. 100%";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5110 - Diverse' TreeListCell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5110DiverseTreeListCellValueAsString2 = "5110 - Diverse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'L - Lege' TreeListCell equals 'L - Lege'
        /// </summary>
        public string UILLegeTreeListCellValueAsString = "L - Lege";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '100' TreeListCell equals '100'
        /// </summary>
        public string UIItem100TreeListCellValueAsString = "100";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'L38 - Lege 38t(35.5+2.5)' TreeListCell equals 'L38 - Lege 38t(35.5+2.5)'
        /// </summary>
        public string UIL38Lege38t35525TreeListCellValueAsString = "L38 - Lege 38t(35.5+2.5)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '38' TreeListCell equals '38'
        /// </summary>
        public string UIItem38TreeListCellValueAsString = "38";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckErrorAndWarningsStep16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckErrorAndWarningsStep16ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.'
        /// </summary>
        public string UIKravtilF1vaktiukeintCellText = "Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Denne A1-vakten skaper hviletidsbrudd med D-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne A1-vakten skaper hviletidsbrudd med D-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneA1vaktenskaperhCellText = "Denne A1-vakten skaper hviletidsbrudd med D-vakten neste dag på avd 5110. Det er " +
            "krav til 11 timer mellom disse, men det er 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange jobbe-søndager på rad (maks=1, faktisk=2, dato-intervall=08.01.2023-15.01.2023)' cell equals 'For mange jobbe-søndager på rad (maks=1, faktisk=2, dato-intervall=08.01.2023-15.01.2023)'
        /// </summary>
        public string UIFormangejobbesøndageCellText = "For mange jobbe-søndager på rad (maks=1, faktisk=2, dato-intervall=08.01.2023-15." +
            "01.2023)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.'
        /// </summary>
        public string UIKravtilF1vaktiukeintCell1Text = "Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Denne D-vakten skaper hviletidsbrudd med A1-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne D-vakten skaper hviletidsbrudd med A1-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneDvaktenskaperhvCellText = "Denne D-vakten skaper hviletidsbrudd med A1-vakten på avd 5110 dagen før. Det er " +
            "krav til 11 timer mellom disse, men det er 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange jobbe-søndager på rad (maks=1, faktisk=2, dato-intervall=08.01.2023-15.01.2023)' cell equals 'For mange jobbe-søndager på rad (maks=1, faktisk=2, dato-intervall=08.01.2023-15.01.2023)'
        /// </summary>
        public string UIFormangejobbesøndageCell1Text = "For mange jobbe-søndager på rad (maks=1, faktisk=2, dato-intervall=08.01.2023-15." +
            "01.2023)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Denne D-vakten skaper hviletidsbrudd med N-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne D-vakten skaper hviletidsbrudd med N-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneDvaktenskaperhvCell1Text = "Denne D-vakten skaper hviletidsbrudd med N-vakten neste dag på avd 5110. Det er k" +
            "rav til 11 timer mellom disse, men det er 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Denne N-vakten skaper hviletidsbrudd med D-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne N-vakten skaper hviletidsbrudd med D-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneNvaktenskaperhvCellText = "Denne N-vakten skaper hviletidsbrudd med D-vakten på avd 5110 dagen før. Det er k" +
            "rav til 11 timer mellom disse, men det er 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 16.01.2023 til 22.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 16.01.2023 til 22.01.2023 er ikke oppfylt.'
        /// </summary>
        public string UIKravtilF1vaktiukeintCell2Text = "Krav til F1-vakt i ukeintervallet fra 16.01.2023 til 22.01.2023 er ikke oppfylt.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Beregnet stillingsprosent overstiger stillingsprosenten som er angitt på linjen.' cell equals 'Beregnet stillingsprosent overstiger stillingsprosenten som er angitt på linjen.'
        /// </summary>
        public string UIBeregnetstillingsproCellText = "Beregnet stillingsprosent overstiger stillingsprosenten som er angitt på linjen.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckErrorAndWarningsStep17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckErrorAndWarningsStep17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Denne A1-vakten skaper hviletidsbrudd med D-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne A1-vakten skaper hviletidsbrudd med D-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneA1vaktenskaperhCellText = "Denne A1-vakten skaper hviletidsbrudd med D-vakten neste dag på avd 5110. Det er " +
            "krav til 11 timer mellom disse, men det er 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.'
        /// </summary>
        public string UIKravtilF1vaktiukeintCellText = "Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t). Denne vakten bidrar med 8 timer.' cell equals 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t). Denne vakten bidrar med 8 timer.'
        /// </summary>
        public string UISamletarbeidstiddettCellText = "Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=8t, samlet arbeid" +
            "stid=9t). Denne vakten bidrar med 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Denne D-vakten skaper hviletidsbrudd med A1-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne D-vakten skaper hviletidsbrudd med A1-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneDvaktenskaperhvCellText = "Denne D-vakten skaper hviletidsbrudd med A1-vakten på avd 5110 dagen før. Det er " +
            "krav til 11 timer mellom disse, men det er 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Denne D-vakten skaper hviletidsbrudd med N-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne D-vakten skaper hviletidsbrudd med N-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneDvaktenskaperhvCell1Text = "Denne D-vakten skaper hviletidsbrudd med N-vakten neste dag på avd 5110. Det er k" +
            "rav til 11 timer mellom disse, men det er 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t).' cell equals 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t).'
        /// </summary>
        public string UITotalarbeidstidfordeCellText = "Total arbeidstid for denne vakten er over tillatt maksgrense (maks=8t, samlet arb" +
            "eidstid=9t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Denne N-vakten skaper hviletidsbrudd med D-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne N-vakten skaper hviletidsbrudd med D-vakten på avd 5110 dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneNvaktenskaperhvCellText = "Denne N-vakten skaper hviletidsbrudd med D-vakten på avd 5110 dagen før. Det er k" +
            "rav til 11 timer mellom disse, men det er 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Denne vakten avgir 1 timer til dagen før slik at samlet arbeidstid døgnet før er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t).' cell equals 'Denne vakten avgir 1 timer til dagen før slik at samlet arbeidstid døgnet før er over tillatt maksgrense (maks=8t, samlet arbeidstid=9t).'
        /// </summary>
        public string UIDennevaktenavgir1timCellText = "Denne vakten avgir 1 timer til dagen før slik at samlet arbeidstid døgnet før er " +
            "over tillatt maksgrense (maks=8t, samlet arbeidstid=9t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.'
        /// </summary>
        public string UIKravtilF1vaktiukeintCell1Text = "Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange timer for uken (maks=38t, faktisk=40t).' cell equals 'For mange timer for uken (maks=38t, faktisk=40t).'
        /// </summary>
        public string UIFormangetimerforukenCellText = "For mange timer for uken (maks=38t, faktisk=40t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange jobbe-lørdager på rad (maks=1, faktisk=2, dato-intervall=14.01.2023-21.01.2023).' cell equals 'For mange jobbe-lørdager på rad (maks=1, faktisk=2, dato-intervall=14.01.2023-21.01.2023).'
        /// </summary>
        public string UIFormangejobbelørdageCellText = "For mange jobbe-lørdager på rad (maks=1, faktisk=2, dato-intervall=14.01.2023-21." +
            "01.2023).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
        /// </summary>
        public string UIFormangevakterpåradmCellText = "For mange vakter på rad (maks=5, faktisk=6).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
        /// </summary>
        public string UIFormangevakterpåradmCell1Text = "For mange vakter på rad (maks=5, faktisk=6).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
        /// </summary>
        public string UIFormangevakterpåradmCell2Text = "For mange vakter på rad (maks=5, faktisk=6).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
        /// </summary>
        public string UIFormangevakterpåradmCell3Text = "For mange vakter på rad (maks=5, faktisk=6).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
        /// </summary>
        public string UIFormangevakterpåradmCell4Text = "For mange vakter på rad (maks=5, faktisk=6).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange vakter på rad (maks=5, faktisk=6).' cell equals 'For mange vakter på rad (maks=5, faktisk=6).'
        /// </summary>
        public string UIFormangevakterpåradmCell5Text = "For mange vakter på rad (maks=5, faktisk=6).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange jobbe-lørdager på rad (maks=1, faktisk=2, dato-intervall=14.01.2023-21.01.2023).' cell equals 'For mange jobbe-lørdager på rad (maks=1, faktisk=2, dato-intervall=14.01.2023-21.01.2023).'
        /// </summary>
        public string UIFormangejobbelørdageCell1Text = "For mange jobbe-lørdager på rad (maks=1, faktisk=2, dato-intervall=14.01.2023-21." +
            "01.2023).";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckErrorAndWarningsStep18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckErrorAndWarningsStep18ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Denne GV1-vakten skaper hviletidsbrudd med KK2-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne GV1-vakten skaper hviletidsbrudd med KK2-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneGV1vaktenskaperCellText = "Denne GV1-vakten skaper hviletidsbrudd med KK2-vakten neste dag på avd 5110. Det " +
            "er krav til 11 timer mellom disse, men det er 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Denne KK2-vakten skaper hviletidsbrudd med GV1-vakten på avd  dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne KK2-vakten skaper hviletidsbrudd med GV1-vakten på avd  dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneKK2vaktenskaperCellText = "Denne KK2-vakten skaper hviletidsbrudd med GV1-vakten på avd  dagen før. Det er k" +
            "rav til 11 timer mellom disse, men det er 8 timer.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckErrorAndWarningsStep21'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckErrorAndWarningsStep21ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ansatt, En' cell equals 'Ansatt, En'
        /// </summary>
        public string UIAnsattEnCellText = "Ansatt, En";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Feil' cell equals 'Feil'
        /// </summary>
        public string UIFeilCellText = "Feil";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Beregnet stillingsprosent overstiger stillingsprosenten som er angitt på linjen.' cell equals 'Beregnet stillingsprosent overstiger stillingsprosenten som er angitt på linjen.'
        /// </summary>
        public string UIBeregnetstillingsproCellText = "Beregnet stillingsprosent overstiger stillingsprosenten som er angitt på linjen.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckErrorAndWarningsStep22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckErrorAndWarningsStep22ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.'
        /// </summary>
        public string UIKravtilF1vaktiukeintCellText = "Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.'
        /// </summary>
        public string UIKravtilF1vaktiukeintCell1Text = "Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ukehvile/F1 er for kort pga. omliggende vakter. Kravet er 40 timer, faktisk hvile er 36 timer.' cell equals 'Ukehvile/F1 er for kort pga. omliggende vakter. Kravet er 40 timer, faktisk hvile er 36 timer.'
        /// </summary>
        public string UIUkehvileF1erforkortpCellText = "Ukehvile/F1 er for kort pga. omliggende vakter. Kravet er 40 timer, faktisk hvile" +
            " er 36 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Mandag' cell equals 'Mandag'
        /// </summary>
        public string UIMandagCellText = "Mandag";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Mandag' cell equals 'Mandag'
        /// </summary>
        public string UIMandagCell1Text = "Mandag";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Søndag' cell equals 'Søndag'
        /// </summary>
        public string UISøndagCellText = "Søndag";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckErrorAndWarningsStep24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckErrorAndWarningsStep24ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ansatt, Ti' cell equals 'Ansatt, Ti'
        /// </summary>
        public string UIAnsattTiCellText = "Ansatt, Ti";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.'
        /// </summary>
        public string UIKravtilF1vaktiukeintCellText = "Krav til F1-vakt i ukeintervallet fra 02.01.2023 til 08.01.2023 er ikke oppfylt.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
        /// </summary>
        public string UITotalarbeidstidfordeCellText = "Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet ar" +
            "beidstid=16t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
        /// </summary>
        public string UISamletarbeidstiddettCellText = "Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbei" +
            "dstid=16t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Denne GV1-vakten skaper hviletidsbrudd med KK2-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne GV1-vakten skaper hviletidsbrudd med KK2-vakten neste dag på avd 5110. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneGV1vaktenskaperCellText = "Denne GV1-vakten skaper hviletidsbrudd med KK2-vakten neste dag på avd 5110. Det " +
            "er krav til 11 timer mellom disse, men det er 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)' cell equals 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)'
        /// </summary>
        public string UIFormangejobbesøndageCellText = "For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22." +
            "01.2023)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Denne KK2-vakten skaper hviletidsbrudd med GV1-vakten på avd  dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.' cell equals 'Denne KK2-vakten skaper hviletidsbrudd med GV1-vakten på avd  dagen før. Det er krav til 11 timer mellom disse, men det er 8 timer.'
        /// </summary>
        public string UIDenneKK2vaktenskaperCellText = "Denne KK2-vakten skaper hviletidsbrudd med GV1-vakten på avd  dagen før. Det er k" +
            "rav til 11 timer mellom disse, men det er 8 timer.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
        /// </summary>
        public string UITotalarbeidstidfordeCell1Text = "Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet ar" +
            "beidstid=16t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
        /// </summary>
        public string UISamletarbeidstiddettCell1Text = "Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbei" +
            "dstid=16t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange timer for uken (maks=48t, faktisk=55,5t).' cell equals 'For mange timer for uken (maks=48t, faktisk=55,5t).'
        /// </summary>
        public string UIFormangetimerforukenCellText = "For mange timer for uken (maks=48t, faktisk=55,5t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.'
        /// </summary>
        public string UIKravtilF1vaktiukeintCell1Text = "Krav til F1-vakt i ukeintervallet fra 09.01.2023 til 15.01.2023 er ikke oppfylt.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
        /// </summary>
        public string UISamletarbeidstiddettCell2Text = "Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbei" +
            "dstid=16t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
        /// </summary>
        public string UITotalarbeidstidfordeCell2Text = "Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet ar" +
            "beidstid=16t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
        /// </summary>
        public string UISamletarbeidstiddettCell3Text = "Samlet arbeidstid dette døgnet er over tillatt maksgrense (maks=12t, samlet arbei" +
            "dstid=16t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).' cell equals 'Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet arbeidstid=16t).'
        /// </summary>
        public string UITotalarbeidstidfordeCell3Text = "Total arbeidstid for denne vakten er over tillatt maksgrense (maks=12t, samlet ar" +
            "beidstid=16t).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)' cell equals 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)'
        /// </summary>
        public string UIFormangejobbesøndageCell1Text = "For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22." +
            "01.2023)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1-vakt i ukeintervallet fra 16.01.2023 til 22.01.2023 er ikke oppfylt.' cell equals 'Krav til F1-vakt i ukeintervallet fra 16.01.2023 til 22.01.2023 er ikke oppfylt.'
        /// </summary>
        public string UIKravtilF1vaktiukeintCell2Text = "Krav til F1-vakt i ukeintervallet fra 16.01.2023 til 22.01.2023 er ikke oppfylt.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)' cell equals 'For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22.01.2023)'
        /// </summary>
        public string UIFormangejobbesøndageCell2Text = "For mange jobbe-søndager på rad (maks=2, faktisk=3, dato-intervall=08.01.2023-22." +
            "01.2023)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'For mange vakter av typen Dag i perioden (Maksimum=1, Faktisk=3).' cell equals 'For mange vakter av typen Dag i perioden (Maksimum=1, Faktisk=3). '
        /// </summary>
        public string UIFormangevakteravtypeCellText = "For mange vakter av typen Dag i perioden (Maksimum=1, Faktisk=3). ";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Advarsel' cell equals 'Advarsel'
        /// </summary>
        public string UIAdvarselCellText = "Advarsel";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckErrorAndWarningsStep29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckErrorAndWarningsStep29ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ansatt, Ni' cell equals 'Ansatt, Ni'
        /// </summary>
        public string UIAnsattNiCellText = "Ansatt, Ni";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Advarsel' cell equals 'Advarsel'
        /// </summary>
        public string UIAdvarselCellText = "Advarsel";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Det er for mange aften-vakter på rad (maks=1, faktisk=2).' cell equals 'Det er for mange aften-vakter på rad (maks=1, faktisk=2).'
        /// </summary>
        public string UIDeterformangeaftenvaCellText = "Det er for mange aften-vakter på rad (maks=1, faktisk=2).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Det er for mange aften-vakter på rad (maks=1, faktisk=2).' cell equals 'Det er for mange aften-vakter på rad (maks=1, faktisk=2).'
        /// </summary>
        public string UIDeterformangeaftenvaCell1Text = "Det er for mange aften-vakter på rad (maks=1, faktisk=2).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).' cell equals 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).'
        /// </summary>
        public string UIDeterformangenattvakCellText = "Det er for mange natt-vakter på rad (maks=3, faktisk=4).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).' cell equals 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).'
        /// </summary>
        public string UIDeterformangenattvakCell1Text = "Det er for mange natt-vakter på rad (maks=3, faktisk=4).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).' cell equals 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).'
        /// </summary>
        public string UIDeterformangenattvakCell2Text = "Det er for mange natt-vakter på rad (maks=3, faktisk=4).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).' cell equals 'Det er for mange natt-vakter på rad (maks=3, faktisk=4).'
        /// </summary>
        public string UIDeterformangenattvakCell3Text = "Det er for mange natt-vakter på rad (maks=3, faktisk=4).";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckErrorAndWarningsStep30'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckErrorAndWarningsStep30ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ansatt, Seks' cell equals 'Ansatt, Seks'
        /// </summary>
        public string UIAnsattSeksCellText = "Ansatt, Seks";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Onsdag' cell equals 'Onsdag'
        /// </summary>
        public string UIOnsdagCellText = "Onsdag";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Advarsel' cell equals 'Advarsel'
        /// </summary>
        public string UIAdvarselCellText = "Advarsel";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).' cell equals 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).'
        /// </summary>
        public string UIDeterformangedagvaktCellText = "Det er for mange dag-vakter på rad (maks=2, faktisk=3).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).' cell equals 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).'
        /// </summary>
        public string UIDeterformangedagvaktCell1Text = "Det er for mange dag-vakter på rad (maks=2, faktisk=3).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).' cell equals 'Det er for mange dag-vakter på rad (maks=2, faktisk=3).'
        /// </summary>
        public string UIDeterformangedagvaktCell2Text = "Det er for mange dag-vakter på rad (maks=2, faktisk=3).";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckL38DepSettingValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckL38DepSettingValuesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1 hver uke? - Nei' NavBarGroup equals 'Krav til F1 hver uke? - Nei'
        /// </summary>
        public string UIKravtilF1hverukeNeiNavBarGroupText = "Krav til F1 hver uke? - Nei";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks antall søndager på rad (§10-8). - 3,00' NavBarGroup equals 'Maks antall søndager på rad (§10-8). - 3,00'
        /// </summary>
        public string UIMaksantallsøndagerpåNavBarGroupText = "Maks antall søndager på rad (§10-8). - 3,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks planlagt tid per dag (§10-4) - 20,00' NavBarGroup equals 'Maks planlagt tid per dag (§10-4) - 20,00'
        /// </summary>
        public string UIMaksplanlagttidperdaNavBarGroup1Text = "Maks planlagt tid per dag (§10-4) - 20,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks planlagt tid per uke (§10-4) - 60,00' NavBarGroup equals 'Maks planlagt tid per uke (§10-4) - 60,00'
        /// </summary>
        public string UIMaksplanlagttidperukNavBarGroup1Text = "Maks planlagt tid per uke (§10-4) - 60,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSetupStep11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSetupStep11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Felles arbeidsplanoppsett 1' TreeListCell equals 'Felles arbeidsplanoppsett 1'
        /// </summary>
        public string UIFellesarbeidsplanoppTreeListCellValueAsString = "Felles arbeidsplanoppsett 1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A1;Ansatt, En' TreeListCell equals 'A1;Ansatt, En'
        /// </summary>
        public string UIA1AnsattEnTreeListCellValueAsString = "A1;Ansatt, En";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Felles arbeidsplanoppsett 2' TreeListCell equals 'Felles arbeidsplanoppsett 2'
        /// </summary>
        public string UIFellesarbeidsplanoppTreeListCellValueAsString1 = "Felles arbeidsplanoppsett 2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A5;Ansatt, Fem' TreeListCell equals 'A5;Ansatt, Fem'
        /// </summary>
        public string UIA5AnsattFemTreeListCellValueAsString = "A5;Ansatt, Fem";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Felles arbeidsplanoppsett 3' TreeListCell equals 'Felles arbeidsplanoppsett 3'
        /// </summary>
        public string UIFellesarbeidsplanoppTreeListCellValueAsString2 = "Felles arbeidsplanoppsett 3";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A10;Ansatt, Ti' TreeListCell equals 'A10;Ansatt, Ti'
        /// </summary>
        public string UIA10AnsattTiTreeListCellValueAsString = "A10;Ansatt, Ti";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSetupStep26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSetupStep26ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Felles arbeidsplanoppsett 4' TreeListCell equals 'Felles arbeidsplanoppsett 4'
        /// </summary>
        public string UIFellesarbeidsplanoppTreeListCellValueAsString = "Felles arbeidsplanoppsett 4";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A9;Ansatt, Ni' TreeListCell equals 'A9;Ansatt, Ni'
        /// </summary>
        public string UIA9AnsattNiTreeListCellValueAsString = "A9;Ansatt, Ni";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A6;Ansatt, Seks' TreeListCell equals 'A6;Ansatt, Seks'
        /// </summary>
        public string UIA6AnsattSeksTreeListCellValueAsString = "A6;Ansatt, Seks";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSetupStep27'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSetupStep27ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'F3 kan brukes på halve helligdager? - Nei' NavBarGroup equals 'F3 kan brukes på halve helligdager? - Nei'
        /// </summary>
        public string UIF3kanbrukespåhalveheNavBarGroupText = "F3 kan brukes på halve helligdager? - Nei";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F3 kan brukes på søndager? - Ja' NavBarGroup equals 'F3 kan brukes på søndager? - Ja'
        /// </summary>
        public string UIF3kanbrukespåsøndageNavBarGroupText = "F3 kan brukes på søndager? - Ja";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Krav til F1 hver uke? - Ja' NavBarGroup equals 'Krav til F1 hver uke? - Ja'
        /// </summary>
        public string UIKravtilF1hverukeJaNavBarGroupText = "Krav til F1 hver uke? - Ja";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks antall søndager på rad (§10-8). - 1,00' NavBarGroup equals 'Maks antall søndager på rad (§10-8). - 1,00'
        /// </summary>
        public string UIMaksantallsøndagerpåNavBarGroupText = "Maks antall søndager på rad (§10-8). - 1,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks planlagt tid per dag (§10-4) - 12,00' NavBarGroup equals 'Maks planlagt tid per dag (§10-4) - 12,00'
        /// </summary>
        public string UIMaksplanlagttidperdaNavBarGroupText = "Maks planlagt tid per dag (§10-4) - 12,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks planlagt tid per uke (§10-4) - 48,00' NavBarGroup equals 'Maks planlagt tid per uke (§10-4) - 48,00'
        /// </summary>
        public string UIMaksplanlagttidperukNavBarGroupText = "Maks planlagt tid per uke (§10-4) - 48,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
        /// </summary>
        public string UIMinstedagligearbeidsNavBarGroupText = "Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 " +
            "/ 8,00 / 8,00 / 8,00 / 11,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
        /// </summary>
        public string UIMinstedagligearbeidsNavBarGroup1Text = "Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 /" +
            " 8,00 / 8,00 / 8,00 / 11,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
        /// </summary>
        public string UIMinstedagligearbeidsNavBarGroup2Text = "Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00" +
            " / 8,00 / 8,00 / 8,00 / 11,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ukentlig arbeidsfri (gjelder kun F1) (§10-8) - 35,00' NavBarGroup equals 'Ukentlig arbeidsfri (gjelder kun F1) (§10-8) - 35,00'
        /// </summary>
        public string UIUkentligarbeidsfrigjNavBarGroupText = "Ukentlig arbeidsfri (gjelder kun F1) (§10-8) - 35,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F3 Lengde - Vakt fra grunnplan' NavBarGroup equals 'F3 Lengde - Vakt fra grunnplan'
        /// </summary>
        public string UIF3LengdeVaktfragrunnNavBarGroupText = "F3 Lengde - Vakt fra grunnplan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F4 Lengde - Vakt fra grunnplan' NavBarGroup equals 'F4 Lengde - Vakt fra grunnplan'
        /// </summary>
        public string UIF4LengdeVaktfragrunnNavBarGroupText = "F4 Lengde - Vakt fra grunnplan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F5 Lengde - Vakt fra grunnplan' NavBarGroup equals 'F5 Lengde - Vakt fra grunnplan'
        /// </summary>
        public string UIF5LengdeVaktfragrunnNavBarGroupText = "F5 Lengde - Vakt fra grunnplan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks antall Aften-vakter på rad. - 1,00' NavBarGroup equals 'Maks antall Aften-vakter på rad. - 1,00'
        /// </summary>
        public string UIMaksantallAftenvakteNavBarGroupText = "Maks antall Aften-vakter på rad. - 1,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks antall Dag-vakter på rad. - 2,00' NavBarGroup equals 'Maks antall Dag-vakter på rad. - 2,00'
        /// </summary>
        public string UIMaksantallDagvakterpNavBarGroupText = "Maks antall Dag-vakter på rad. - 2,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks antall Natt-vakter på rad. - 3,00' NavBarGroup equals 'Maks antall Natt-vakter på rad. - 3,00'
        /// </summary>
        public string UIMaksantallNattvakterNavBarGroupText = "Maks antall Natt-vakter på rad. - 3,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks antall lørdager på rad. - 2,00' NavBarGroup equals 'Maks antall lørdager på rad. - 2,00'
        /// </summary>
        public string UIMaksantalllørdagerpåNavBarGroupText = "Maks antall lørdager på rad. - 2,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maks antall vakter på rad. - 8,00' NavBarGroup equals 'Maks antall vakter på rad. - 8,00'
        /// </summary>
        public string UIMaksantallvakterpåraNavBarGroupText = "Maks antall vakter på rad. - 8,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Maksimum antall vakter pr. vaktkategori - 999 / 999 / 999 /' NavBarGroup equals 'Maksimum antall vakter pr. vaktkategori - 999 / 999 / 999 / '
        /// </summary>
        public string UIMaksimumantallvakterNavBarGroupText = "Maksimum antall vakter pr. vaktkategori - 999 / 999 / 999 / ";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Minimum antall vakter pr. vaktkategori - - / - / - /' NavBarGroup equals 'Minimum antall vakter pr. vaktkategori - - / - / - / '
        /// </summary>
        public string UIMinimumantallvakterpNavBarGroupText = "Minimum antall vakter pr. vaktkategori - - / - / - / ";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Minimum og maksimum antall vakter pr. vaktkategori justeres etter stillingsstørrelse? - Nei' NavBarGroup equals 'Minimum og maksimum antall vakter pr. vaktkategori justeres etter stillingsstørrelse? - Nei'
        /// </summary>
        public string UIMinimumogmaksimumantNavBarGroupText = "Minimum og maksimum antall vakter pr. vaktkategori justeres etter stillingsstørre" +
            "lse? - Nei";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckTurnusDepSettingValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckTurnusDepSettingValuesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
        /// </summary>
        public string UIMinstedagligearbeidsNavBarGroupText = "Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 " +
            "/ 8,00 / 8,00 / 8,00 / 11,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
        /// </summary>
        public string UIMinstedagligearbeidsNavBarGroup1Text = "Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 /" +
            " 8,00 / 8,00 / 8,00 / 11,00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00' NavBarGroup equals 'Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 8,00 / 11,00'
        /// </summary>
        public string UIMinstedagligearbeidsNavBarGroup2Text = "Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00" +
            " / 8,00 / 8,00 / 8,00 / 11,00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectRosterPlanLayout_2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectRosterPlanLayout_2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'True' in 'Node1' TreeListNode
        /// </summary>
        public bool UINode1TreeListNodeChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectRosterPlanLayout_3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectRosterPlanLayout_3Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'True' in 'Node2' TreeListNode
        /// </summary>
        public bool UINode2TreeListNodeChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectRosterPlanLayout_4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectRosterPlanLayout_4Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'True' in 'Node3' TreeListNode
        /// </summary>
        public bool UINode3TreeListNodeChecked = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanoppsettfoWindow : DXWindow
    {
        
        public UIArbeidsplanoppsettfoWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "Arbeidsplanoppsett", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UINbcRosterSetupNavBar UINbcRosterSetupNavBar
        {
            get
            {
                if ((this.mUINbcRosterSetupNavBar == null))
                {
                    this.mUINbcRosterSetupNavBar = new UINbcRosterSetupNavBar(this);
                }
                return this.mUINbcRosterSetupNavBar;
            }
        }
        #endregion
        
        #region Fields
        private UINbcRosterSetupNavBar mUINbcRosterSetupNavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINbcRosterSetupNavBar : DXNavBar
    {
        
        public UINbcRosterSetupNavBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UINavBarGroupControlCoScrollableControl UINavBarGroupControlCoScrollableControl
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl = new UINavBarGroupControlCoScrollableControl(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl;
            }
        }
        
        public DXNavBarGroup UIMaksplanlagttidperdaNavBarGroup
        {
            get
            {
                if ((this.mUIMaksplanlagttidperdaNavBarGroup == null))
                {
                    this.mUIMaksplanlagttidperdaNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksplanlagttidperdaNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks planlagt tid per dag (§10-4) - 8,00";
                    this.mUIMaksplanlagttidperdaNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksplanlagttidperdaNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIMaksplanlagttidperdaNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksplanlagttidperukNavBarGroup
        {
            get
            {
                if ((this.mUIMaksplanlagttidperukNavBarGroup == null))
                {
                    this.mUIMaksplanlagttidperukNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksplanlagttidperukNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks planlagt tid per uke (§10-4) - 38,00";
                    this.mUIMaksplanlagttidperukNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksplanlagttidperukNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMaksplanlagttidperukNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksantalllørdagerpåNavBarGroup
        {
            get
            {
                if ((this.mUIMaksantalllørdagerpåNavBarGroup == null))
                {
                    this.mUIMaksantalllørdagerpåNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksantalllørdagerpåNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks antall lørdager på rad. - 1,00";
                    this.mUIMaksantalllørdagerpåNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksantalllørdagerpåNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIMaksantalllørdagerpåNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksantallvakterpåraNavBarGroup
        {
            get
            {
                if ((this.mUIMaksantallvakterpåraNavBarGroup == null))
                {
                    this.mUIMaksantallvakterpåraNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksantallvakterpåraNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks antall vakter på rad. - 5,00";
                    this.mUIMaksantallvakterpåraNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksantallvakterpåraNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIMaksantallvakterpåraNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIKravtilF1hverukeNeiNavBarGroup
        {
            get
            {
                if ((this.mUIKravtilF1hverukeNeiNavBarGroup == null))
                {
                    this.mUIKravtilF1hverukeNeiNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIKravtilF1hverukeNeiNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Krav til F1 hver uke? - Nei";
                    this.mUIKravtilF1hverukeNeiNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIKravtilF1hverukeNeiNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIKravtilF1hverukeNeiNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksantallsøndagerpåNavBarGroup
        {
            get
            {
                if ((this.mUIMaksantallsøndagerpåNavBarGroup == null))
                {
                    this.mUIMaksantallsøndagerpåNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksantallsøndagerpåNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks antall søndager på rad (§10-8). - 3,00";
                    this.mUIMaksantallsøndagerpåNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksantallsøndagerpåNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIMaksantallsøndagerpåNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksplanlagttidperdaNavBarGroup1
        {
            get
            {
                if ((this.mUIMaksplanlagttidperdaNavBarGroup1 == null))
                {
                    this.mUIMaksplanlagttidperdaNavBarGroup1 = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksplanlagttidperdaNavBarGroup1.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks planlagt tid per dag (§10-4) - 20,00";
                    this.mUIMaksplanlagttidperdaNavBarGroup1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksplanlagttidperdaNavBarGroup1.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIMaksplanlagttidperdaNavBarGroup1;
            }
        }
        
        public DXNavBarGroup UIMaksplanlagttidperukNavBarGroup1
        {
            get
            {
                if ((this.mUIMaksplanlagttidperukNavBarGroup1 == null))
                {
                    this.mUIMaksplanlagttidperukNavBarGroup1 = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksplanlagttidperukNavBarGroup1.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks planlagt tid per uke (§10-4) - 60,00";
                    this.mUIMaksplanlagttidperukNavBarGroup1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksplanlagttidperukNavBarGroup1.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIMaksplanlagttidperukNavBarGroup1;
            }
        }
        
        public DXNavBarGroup UIMinstedagligearbeidsNavBarGroup
        {
            get
            {
                if ((this.mUIMinstedagligearbeidsNavBarGroup == null))
                {
                    this.mUIMinstedagligearbeidsNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMinstedagligearbeidsNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 " +
                        "/ 8,00 / 8,00 / 8,00 / 11,00";
                    this.mUIMinstedagligearbeidsNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMinstedagligearbeidsNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIMinstedagligearbeidsNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMinstedagligearbeidsNavBarGroup1
        {
            get
            {
                if ((this.mUIMinstedagligearbeidsNavBarGroup1 == null))
                {
                    this.mUIMinstedagligearbeidsNavBarGroup1 = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMinstedagligearbeidsNavBarGroup1.SearchProperties[DXTestControl.PropertyNames.Name] = "Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 /" +
                        " 8,00 / 8,00 / 8,00 / 11,00";
                    this.mUIMinstedagligearbeidsNavBarGroup1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMinstedagligearbeidsNavBarGroup1.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIMinstedagligearbeidsNavBarGroup1;
            }
        }
        
        public DXNavBarGroup UIMinstedagligearbeidsNavBarGroup2
        {
            get
            {
                if ((this.mUIMinstedagligearbeidsNavBarGroup2 == null))
                {
                    this.mUIMinstedagligearbeidsNavBarGroup2 = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMinstedagligearbeidsNavBarGroup2.SearchProperties[DXTestControl.PropertyNames.Name] = "Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00" +
                        " / 8,00 / 8,00 / 8,00 / 11,00";
                    this.mUIMinstedagligearbeidsNavBarGroup2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMinstedagligearbeidsNavBarGroup2.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIMinstedagligearbeidsNavBarGroup2;
            }
        }
        #endregion
        
        #region Fields
        private UINavBarGroupControlCoScrollableControl mUINavBarGroupControlCoScrollableControl;
        
        private DXNavBarGroup mUIMaksplanlagttidperdaNavBarGroup;
        
        private DXNavBarGroup mUIMaksplanlagttidperukNavBarGroup;
        
        private DXNavBarGroup mUIMaksantalllørdagerpåNavBarGroup;
        
        private DXNavBarGroup mUIMaksantallvakterpåraNavBarGroup;
        
        private DXNavBarGroup mUIKravtilF1hverukeNeiNavBarGroup;
        
        private DXNavBarGroup mUIMaksantallsøndagerpåNavBarGroup;
        
        private DXNavBarGroup mUIMaksplanlagttidperdaNavBarGroup1;
        
        private DXNavBarGroup mUIMaksplanlagttidperukNavBarGroup1;
        
        private DXNavBarGroup mUIMinstedagligearbeidsNavBarGroup;
        
        private DXNavBarGroup mUIMinstedagligearbeidsNavBarGroup1;
        
        private DXNavBarGroup mUIMinstedagligearbeidsNavBarGroup2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEditClient : DXTestControl
    {
        
        public UIPnlEditClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIENumberEdit
        {
            get
            {
                if ((this.mUIENumberEdit == null))
                {
                    this.mUIENumberEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber";
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
                    this.mUIENumberEdit.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIENumberEdit;
            }
        }
        
        public DXCheckBox UIChkEditCheckBox
        {
            get
            {
                if ((this.mUIChkEditCheckBox == null))
                {
                    this.mUIChkEditCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIChkEditCheckBox.WindowTitles.Add("Arbeidsplanoppsett for avdeling 5110 - Diverse");
                    #endregion
                }
                return this.mUIChkEditCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIENumberEdit;
        
        private DXCheckBox mUIChkEditCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeggtilansatteWindow : DXWindow
    {
        
        public UILeggtilansatteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Legg til ansatte";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UISelectDepartmentEmplCustom UISelectDepartmentEmplCustom
        {
            get
            {
                if ((this.mUISelectDepartmentEmplCustom == null))
                {
                    this.mUISelectDepartmentEmplCustom = new UISelectDepartmentEmplCustom(this);
                }
                return this.mUISelectDepartmentEmplCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISelectDepartmentEmplCustom mUISelectDepartmentEmplCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectDepartmentEmplCustom : DXTestControl
    {
        
        public UISelectDepartmentEmplCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SelectDepartmentEmployeesView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SelectDepartmentEmployeesView";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentContainerClient UIPcContentContainerClient
        {
            get
            {
                if ((this.mUIPcContentContainerClient == null))
                {
                    this.mUIPcContentContainerClient = new UIPcContentContainerClient(this);
                }
                return this.mUIPcContentContainerClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentContainerClient mUIPcContentContainerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentContainerClient : DXTestControl
    {
        
        public UIPcContentContainerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContentContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIGcDepartmentEmployeeTable UIGcDepartmentEmployeeTable
        {
            get
            {
                if ((this.mUIGcDepartmentEmployeeTable == null))
                {
                    this.mUIGcDepartmentEmployeeTable = new UIGcDepartmentEmployeeTable(this);
                }
                return this.mUIGcDepartmentEmployeeTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDepartmentEmployeeTable mUIGcDepartmentEmployeeTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDepartmentEmployeeTable : DXGrid
    {
        
        public UIGcDepartmentEmployeeTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnsattEnCell
        {
            get
            {
                if ((this.mUIAnsattEnCell == null))
                {
                    this.mUIAnsattEnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]0[Column]colE" +
                        "mployee";
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattEnCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattEnCell;
            }
        }
        
        public DXCell UIAnsattFemCell
        {
            get
            {
                if ((this.mUIAnsattFemCell == null))
                {
                    this.mUIAnsattFemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattFemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]1[Column]colE" +
                        "mployee";
                    this.mUIAnsattFemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattFemCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattFemCell;
            }
        }
        
        public DXCell UIAnsattTiCell
        {
            get
            {
                if ((this.mUIAnsattTiCell == null))
                {
                    this.mUIAnsattTiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattTiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]6[Column]colE" +
                        "mployee";
                    this.mUIAnsattTiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattTiCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattTiCell;
            }
        }
        
        public DXCell UIAnsattSeksCell
        {
            get
            {
                if ((this.mUIAnsattSeksCell == null))
                {
                    this.mUIAnsattSeksCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]2[Column]colE" +
                        "mployee";
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattSeksCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattSeksCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnsattEnCell;
        
        private DXCell mUIAnsattFemCell;
        
        private DXCell mUIAnsattTiCell;
        
        private DXCell mUIAnsattSeksCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsatteiarbeidsplanWindow : DXWindow
    {
        
        public UIAnsatteiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlOuterClient UIPanelControlOuterClient
        {
            get
            {
                if ((this.mUIPanelControlOuterClient == null))
                {
                    this.mUIPanelControlOuterClient = new UIPanelControlOuterClient(this);
                }
                return this.mUIPanelControlOuterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlOuterClient mUIPanelControlOuterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlOuterClient : DXTestControl
    {
        
        public UIPanelControlOuterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient mUIPanelControlLeftClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlLeftClient : DXTestControl
    {
        
        public UIPanelControlLeftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITreeListEmployeeTreeList UITreeListEmployeeTreeList
        {
            get
            {
                if ((this.mUITreeListEmployeeTreeList == null))
                {
                    this.mUITreeListEmployeeTreeList = new UITreeListEmployeeTreeList(this);
                }
                return this.mUITreeListEmployeeTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListEmployeeTreeList mUITreeListEmployeeTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListEmployeeTreeList : DXTreeList
    {
        
        public UITreeListEmployeeTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode1TreeListNode UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public UINode2TreeListNode UINode2TreeListNode
        {
            get
            {
                if ((this.mUINode2TreeListNode == null))
                {
                    this.mUINode2TreeListNode = new UINode2TreeListNode(this);
                }
                return this.mUINode2TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode mUINode0TreeListNode;
        
        private UINode1TreeListNode mUINode1TreeListNode;
        
        private UINode2TreeListNode mUINode2TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode : DXTreeListNode
    {
        
        public UINode0TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem1AnsattEnTreeListCell
        {
            get
            {
                if ((this.mUIItem1AnsattEnTreeListCell == null))
                {
                    this.mUIItem1AnsattEnTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem1AnsattEnTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem1AnsattEnTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem1AnsattEnTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem1AnsattEnTreeListCell;
            }
        }
        
        public UINode0TreeListNode1 UINode0TreeListNode1
        {
            get
            {
                if ((this.mUINode0TreeListNode1 == null))
                {
                    this.mUINode0TreeListNode1 = new UINode0TreeListNode1(this);
                }
                return this.mUINode0TreeListNode1;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem1AnsattEnTreeListCell;
        
        private UINode0TreeListNode1 mUINode0TreeListNode1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode1 : DXTreeListNode
    {
        
        public UINode0TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem150TreeListCell
        {
            get
            {
                if ((this.mUIItem150TreeListCell == null))
                {
                    this.mUIItem150TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem150TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem150TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem5110DiverseTreeListCell
        {
            get
            {
                if ((this.mUIItem5110DiverseTreeListCell == null))
                {
                    this.mUIItem5110DiverseTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentDisplayNameMain";
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem5110DiverseTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem5110DiverseTreeListCell;
            }
        }
        
        public DXTreeListCell UISSykepleierTreeListCell
        {
            get
            {
                if ((this.mUISSykepleierTreeListCell == null))
                {
                    this.mUISSykepleierTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUISSykepleierTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colPositionCategoryDisplayNameMain";
                    this.mUISSykepleierTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUISSykepleierTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUISSykepleierTreeListCell;
            }
        }
        
        public DXTreeListCell UITURNUSTurnus355tukeTreeListCell
        {
            get
            {
                if ((this.mUITURNUSTurnus355tukeTreeListCell == null))
                {
                    this.mUITURNUSTurnus355tukeTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUITURNUSTurnus355tukeTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colRuleSetDisplayNameMain";
                    this.mUITURNUSTurnus355tukeTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUITURNUSTurnus355tukeTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUITURNUSTurnus355tukeTreeListCell;
            }
        }
        
        public DXTreeListCell UIItem355TreeListCell
        {
            get
            {
                if ((this.mUIItem355TreeListCell == null))
                {
                    this.mUIItem355TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem355TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colWeekSumMain";
                    this.mUIItem355TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem355TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem355TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem50TreeListCell
        {
            get
            {
                if ((this.mUIItem50TreeListCell == null))
                {
                    this.mUIItem50TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem50TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colPositionPercentageMain";
                    this.mUIItem50TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem50TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem50TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem150TreeListCell;
        
        private DXTreeListCell mUIItem5110DiverseTreeListCell;
        
        private DXTreeListCell mUISSykepleierTreeListCell;
        
        private DXTreeListCell mUITURNUSTurnus355tukeTreeListCell;
        
        private DXTreeListCell mUIItem355TreeListCell;
        
        private DXTreeListCell mUIItem50TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode : DXTreeListNode
    {
        
        public UINode1TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem2AnsattFemTreeListCell
        {
            get
            {
                if ((this.mUIItem2AnsattFemTreeListCell == null))
                {
                    this.mUIItem2AnsattFemTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem2AnsattFemTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem2AnsattFemTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem2AnsattFemTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem2AnsattFemTreeListCell;
            }
        }
        
        public UINode0TreeListNode2 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode2(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem2AnsattFemTreeListCell;
        
        private UINode0TreeListNode2 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode2 : DXTreeListNode
    {
        
        public UINode0TreeListNode2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem190TreeListCell
        {
            get
            {
                if ((this.mUIItem190TreeListCell == null))
                {
                    this.mUIItem190TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem190TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem190TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem190TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem190TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem5110DiverseTreeListCell
        {
            get
            {
                if ((this.mUIItem5110DiverseTreeListCell == null))
                {
                    this.mUIItem5110DiverseTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentDisplayNameMain";
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem5110DiverseTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem5110DiverseTreeListCell;
            }
        }
        
        public DXTreeListCell UIDDagtidspersonellTreeListCell
        {
            get
            {
                if ((this.mUIDDagtidspersonellTreeListCell == null))
                {
                    this.mUIDDagtidspersonellTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIDDagtidspersonellTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colPositionCategoryDisplayNameMain";
                    this.mUIDDagtidspersonellTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIDDagtidspersonellTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIDDagtidspersonellTreeListCell;
            }
        }
        
        public DXTreeListCell UIADMAdministrasjonTreeListCell
        {
            get
            {
                if ((this.mUIADMAdministrasjonTreeListCell == null))
                {
                    this.mUIADMAdministrasjonTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIADMAdministrasjonTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colRuleSetDisplayNameMain";
                    this.mUIADMAdministrasjonTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIADMAdministrasjonTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIADMAdministrasjonTreeListCell;
            }
        }
        
        public DXTreeListCell UIItem375TreeListCell
        {
            get
            {
                if ((this.mUIItem375TreeListCell == null))
                {
                    this.mUIItem375TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem375TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colWeekSumMain";
                    this.mUIItem375TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem375TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem375TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem90TreeListCell
        {
            get
            {
                if ((this.mUIItem90TreeListCell == null))
                {
                    this.mUIItem90TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem90TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colPositionPercentageMain";
                    this.mUIItem90TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem90TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem90TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem190TreeListCell;
        
        private DXTreeListCell mUIItem5110DiverseTreeListCell;
        
        private DXTreeListCell mUIDDagtidspersonellTreeListCell;
        
        private DXTreeListCell mUIADMAdministrasjonTreeListCell;
        
        private DXTreeListCell mUIItem375TreeListCell;
        
        private DXTreeListCell mUIItem90TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode2TreeListNode : DXTreeListNode
    {
        
        public UINode2TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem3AnsattTiTreeListCell
        {
            get
            {
                if ((this.mUIItem3AnsattTiTreeListCell == null))
                {
                    this.mUIItem3AnsattTiTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem3AnsattTiTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem3AnsattTiTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem3AnsattTiTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem3AnsattTiTreeListCell;
            }
        }
        
        public UINode0TreeListNode3 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode3(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem3AnsattTiTreeListCell;
        
        private UINode0TreeListNode3 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode3 : DXTreeListNode
    {
        
        public UINode0TreeListNode3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem1100TreeListCell
        {
            get
            {
                if ((this.mUIItem1100TreeListCell == null))
                {
                    this.mUIItem1100TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem1100TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem1100TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem5110DiverseTreeListCell
        {
            get
            {
                if ((this.mUIItem5110DiverseTreeListCell == null))
                {
                    this.mUIItem5110DiverseTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentDisplayNameMain";
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem5110DiverseTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem5110DiverseTreeListCell;
            }
        }
        
        public DXTreeListCell UILLegeTreeListCell
        {
            get
            {
                if ((this.mUILLegeTreeListCell == null))
                {
                    this.mUILLegeTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUILLegeTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colPositionCategoryDisplayNameMain";
                    this.mUILLegeTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUILLegeTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUILLegeTreeListCell;
            }
        }
        
        public DXTreeListCell UIItem100TreeListCell
        {
            get
            {
                if ((this.mUIItem100TreeListCell == null))
                {
                    this.mUIItem100TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem100TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colPositionPercentageMain";
                    this.mUIItem100TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem100TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem100TreeListCell;
            }
        }
        
        public DXTreeListCell UIL38Lege38t35525TreeListCell
        {
            get
            {
                if ((this.mUIL38Lege38t35525TreeListCell == null))
                {
                    this.mUIL38Lege38t35525TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIL38Lege38t35525TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colRuleSetDisplayNameMain";
                    this.mUIL38Lege38t35525TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIL38Lege38t35525TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIL38Lege38t35525TreeListCell;
            }
        }
        
        public DXTreeListCell UIItem38TreeListCell
        {
            get
            {
                if ((this.mUIItem38TreeListCell == null))
                {
                    this.mUIItem38TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem38TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colWeekSumMain";
                    this.mUIItem38TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem38TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem38TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem1100TreeListCell;
        
        private DXTreeListCell mUIItem5110DiverseTreeListCell;
        
        private DXTreeListCell mUILLegeTreeListCell;
        
        private DXTreeListCell mUIItem100TreeListCell;
        
        private DXTreeListCell mUIL38Lege38t35525TreeListCell;
        
        private DXTreeListCell mUIItem38TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanoppsettWindow : DXWindow
    {
        
        public UIArbeidsplanoppsettWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplanoppsett";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIGsTabControlTabList UIGsTabControlTabList
        {
            get
            {
                if ((this.mUIGsTabControlTabList == null))
                {
                    this.mUIGsTabControlTabList = new UIGsTabControlTabList(this);
                }
                return this.mUIGsTabControlTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIGsTabControlTabList mUIGsTabControlTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsTabControlTabList : DXTestControl
    {
        
        public UIGsTabControlTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsTabControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UITabPersonGroupRosterClient UITabPersonGroupRosterClient
        {
            get
            {
                if ((this.mUITabPersonGroupRosterClient == null))
                {
                    this.mUITabPersonGroupRosterClient = new UITabPersonGroupRosterClient(this);
                }
                return this.mUITabPersonGroupRosterClient;
            }
        }
        #endregion
        
        #region Fields
        private UITabPersonGroupRosterClient mUITabPersonGroupRosterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabPersonGroupRosterClient : DXTestControl
    {
        
        public UITabPersonGroupRosterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabPersonGroupRoster";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIPnlFilterClient UIPnlFilterClient
        {
            get
            {
                if ((this.mUIPnlFilterClient == null))
                {
                    this.mUIPnlFilterClient = new UIPnlFilterClient(this);
                }
                return this.mUIPnlFilterClient;
            }
        }
        
        public UINbcRosterSetupNavBar1 UINbcRosterSetupNavBar
        {
            get
            {
                if ((this.mUINbcRosterSetupNavBar == null))
                {
                    this.mUINbcRosterSetupNavBar = new UINbcRosterSetupNavBar1(this);
                }
                return this.mUINbcRosterSetupNavBar;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlFilterClient mUIPnlFilterClient;
        
        private UINbcRosterSetupNavBar1 mUINbcRosterSetupNavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlFilterClient : DXTestControl
    {
        
        public UIPnlFilterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIGrpRuleTypeClient UIGrpRuleTypeClient
        {
            get
            {
                if ((this.mUIGrpRuleTypeClient == null))
                {
                    this.mUIGrpRuleTypeClient = new UIGrpRuleTypeClient(this);
                }
                return this.mUIGrpRuleTypeClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpRuleTypeClient mUIGrpRuleTypeClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpRuleTypeClient : DXTestControl
    {
        
        public UIGrpRuleTypeClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpRuleType";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIPcEditEmployeePopupEdit UIPcEditEmployeePopupEdit
        {
            get
            {
                if ((this.mUIPcEditEmployeePopupEdit == null))
                {
                    this.mUIPcEditEmployeePopupEdit = new UIPcEditEmployeePopupEdit(this);
                }
                return this.mUIPcEditEmployeePopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIPcEditEmployeePopupEdit mUIPcEditEmployeePopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcEditEmployeePopupEdit : DXPopupEdit
    {
        
        public UIPcEditEmployeePopupEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcEditEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIPopupContainerFormWindow UIPopupContainerFormWindow
        {
            get
            {
                if ((this.mUIPopupContainerFormWindow == null))
                {
                    this.mUIPopupContainerFormWindow = new UIPopupContainerFormWindow(this);
                }
                return this.mUIPopupContainerFormWindow;
            }
        }
        
        public DXButton UIEditorButton0Button
        {
            get
            {
                if ((this.mUIEditorButton0Button == null))
                {
                    this.mUIEditorButton0Button = new DXButton(this);
                    #region Search Criteria
                    this.mUIEditorButton0Button.SearchProperties[DXTestControl.PropertyNames.Name] = "pcEditEmployeeButton[0]";
                    this.mUIEditorButton0Button.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EditorButton";
                    this.mUIEditorButton0Button.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIEditorButton0Button;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupContainerFormWindow mUIPopupContainerFormWindow;
        
        private DXButton mUIEditorButton0Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerFormWindow : DXWindow
    {
        
        public UIPopupContainerFormWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcEditEmployeePopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerForm";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIPcControlEmployeeClient UIPcControlEmployeeClient
        {
            get
            {
                if ((this.mUIPcControlEmployeeClient == null))
                {
                    this.mUIPcControlEmployeeClient = new UIPcControlEmployeeClient(this);
                }
                return this.mUIPcControlEmployeeClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcControlEmployeeClient mUIPcControlEmployeeClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcControlEmployeeClient : DXTestControl
    {
        
        public UIPcControlEmployeeClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcControlEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerControl";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UITlEmployeeTreeList UITlEmployeeTreeList
        {
            get
            {
                if ((this.mUITlEmployeeTreeList == null))
                {
                    this.mUITlEmployeeTreeList = new UITlEmployeeTreeList(this);
                }
                return this.mUITlEmployeeTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UITlEmployeeTreeList mUITlEmployeeTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITlEmployeeTreeList : DXTreeList
    {
        
        public UITlEmployeeTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tlEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTreeList";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode4 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode4(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode1TreeListNode1 UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode1(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public UINode2TreeListNode1 UINode2TreeListNode
        {
            get
            {
                if ((this.mUINode2TreeListNode == null))
                {
                    this.mUINode2TreeListNode = new UINode2TreeListNode1(this);
                }
                return this.mUINode2TreeListNode;
            }
        }
        
        public UINode3TreeListNode UINode3TreeListNode
        {
            get
            {
                if ((this.mUINode3TreeListNode == null))
                {
                    this.mUINode3TreeListNode = new UINode3TreeListNode(this);
                }
                return this.mUINode3TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode4 mUINode0TreeListNode;
        
        private UINode1TreeListNode1 mUINode1TreeListNode;
        
        private UINode2TreeListNode1 mUINode2TreeListNode;
        
        private UINode3TreeListNode mUINode3TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode4 : DXTreeListNode
    {
        
        public UINode0TreeListNode4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIFellesarbeidsplanoppTreeListCell
        {
            get
            {
                if ((this.mUIFellesarbeidsplanoppTreeListCell == null))
                {
                    this.mUIFellesarbeidsplanoppTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIFellesarbeidsplanoppTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colItem";
                    this.mUIFellesarbeidsplanoppTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIFellesarbeidsplanoppTreeListCell.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIFellesarbeidsplanoppTreeListCell;
            }
        }
        
        public UINode0TreeListNode11 UINode0TreeListNode1
        {
            get
            {
                if ((this.mUINode0TreeListNode1 == null))
                {
                    this.mUINode0TreeListNode1 = new UINode0TreeListNode11(this);
                }
                return this.mUINode0TreeListNode1;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIFellesarbeidsplanoppTreeListCell;
        
        private UINode0TreeListNode11 mUINode0TreeListNode1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode11 : DXTreeListNode
    {
        
        public UINode0TreeListNode11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIA1AnsattEnTreeListCell
        {
            get
            {
                if ((this.mUIA1AnsattEnTreeListCell == null))
                {
                    this.mUIA1AnsattEnTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIA1AnsattEnTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colItem";
                    this.mUIA1AnsattEnTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIA1AnsattEnTreeListCell.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIA1AnsattEnTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIA1AnsattEnTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode1 : DXTreeListNode
    {
        
        public UINode1TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIFellesarbeidsplanoppTreeListCell
        {
            get
            {
                if ((this.mUIFellesarbeidsplanoppTreeListCell == null))
                {
                    this.mUIFellesarbeidsplanoppTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIFellesarbeidsplanoppTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colItem";
                    this.mUIFellesarbeidsplanoppTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIFellesarbeidsplanoppTreeListCell.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIFellesarbeidsplanoppTreeListCell;
            }
        }
        
        public UINode0TreeListNode5 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode5(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIFellesarbeidsplanoppTreeListCell;
        
        private UINode0TreeListNode5 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode5 : DXTreeListNode
    {
        
        public UINode0TreeListNode5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIA5AnsattFemTreeListCell
        {
            get
            {
                if ((this.mUIA5AnsattFemTreeListCell == null))
                {
                    this.mUIA5AnsattFemTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIA5AnsattFemTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colItem";
                    this.mUIA5AnsattFemTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIA5AnsattFemTreeListCell.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIA5AnsattFemTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIA5AnsattFemTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode2TreeListNode1 : DXTreeListNode
    {
        
        public UINode2TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIFellesarbeidsplanoppTreeListCell
        {
            get
            {
                if ((this.mUIFellesarbeidsplanoppTreeListCell == null))
                {
                    this.mUIFellesarbeidsplanoppTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIFellesarbeidsplanoppTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colItem";
                    this.mUIFellesarbeidsplanoppTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIFellesarbeidsplanoppTreeListCell.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIFellesarbeidsplanoppTreeListCell;
            }
        }
        
        public UINode0TreeListNode6 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode6(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIFellesarbeidsplanoppTreeListCell;
        
        private UINode0TreeListNode6 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode6 : DXTreeListNode
    {
        
        public UINode0TreeListNode6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIA10AnsattTiTreeListCell
        {
            get
            {
                if ((this.mUIA10AnsattTiTreeListCell == null))
                {
                    this.mUIA10AnsattTiTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIA10AnsattTiTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colItem";
                    this.mUIA10AnsattTiTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIA10AnsattTiTreeListCell.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIA10AnsattTiTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIA10AnsattTiTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode3TreeListNode : DXTreeListNode
    {
        
        public UINode3TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIFellesarbeidsplanoppTreeListCell
        {
            get
            {
                if ((this.mUIFellesarbeidsplanoppTreeListCell == null))
                {
                    this.mUIFellesarbeidsplanoppTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIFellesarbeidsplanoppTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colItem";
                    this.mUIFellesarbeidsplanoppTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIFellesarbeidsplanoppTreeListCell.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIFellesarbeidsplanoppTreeListCell;
            }
        }
        
        public UINode0TreeListNode7 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode7(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode1TreeListNode2 UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode2(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIFellesarbeidsplanoppTreeListCell;
        
        private UINode0TreeListNode7 mUINode0TreeListNode;
        
        private UINode1TreeListNode2 mUINode1TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode7 : DXTreeListNode
    {
        
        public UINode0TreeListNode7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIA9AnsattNiTreeListCell
        {
            get
            {
                if ((this.mUIA9AnsattNiTreeListCell == null))
                {
                    this.mUIA9AnsattNiTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIA9AnsattNiTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colItem";
                    this.mUIA9AnsattNiTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIA9AnsattNiTreeListCell.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIA9AnsattNiTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIA9AnsattNiTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode2 : DXTreeListNode
    {
        
        public UINode1TreeListNode2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIA6AnsattSeksTreeListCell
        {
            get
            {
                if ((this.mUIA6AnsattSeksTreeListCell == null))
                {
                    this.mUIA6AnsattSeksTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIA6AnsattSeksTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colItem";
                    this.mUIA6AnsattSeksTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIA6AnsattSeksTreeListCell.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIA6AnsattSeksTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIA6AnsattSeksTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINbcRosterSetupNavBar1 : DXNavBar
    {
        
        public UINbcRosterSetupNavBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXNavBarGroup UIF3kanbrukespåhalveheNavBarGroup
        {
            get
            {
                if ((this.mUIF3kanbrukespåhalveheNavBarGroup == null))
                {
                    this.mUIF3kanbrukespåhalveheNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIF3kanbrukespåhalveheNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "F3 kan brukes på halve helligdager? - Nei";
                    this.mUIF3kanbrukespåhalveheNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIF3kanbrukespåhalveheNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIF3kanbrukespåhalveheNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIF3kanbrukespåsøndageNavBarGroup
        {
            get
            {
                if ((this.mUIF3kanbrukespåsøndageNavBarGroup == null))
                {
                    this.mUIF3kanbrukespåsøndageNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIF3kanbrukespåsøndageNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "F3 kan brukes på søndager? - Ja";
                    this.mUIF3kanbrukespåsøndageNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIF3kanbrukespåsøndageNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIF3kanbrukespåsøndageNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIKravtilF1hverukeJaNavBarGroup
        {
            get
            {
                if ((this.mUIKravtilF1hverukeJaNavBarGroup == null))
                {
                    this.mUIKravtilF1hverukeJaNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIKravtilF1hverukeJaNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Krav til F1 hver uke? - Ja";
                    this.mUIKravtilF1hverukeJaNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIKravtilF1hverukeJaNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIKravtilF1hverukeJaNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksantallsøndagerpåNavBarGroup
        {
            get
            {
                if ((this.mUIMaksantallsøndagerpåNavBarGroup == null))
                {
                    this.mUIMaksantallsøndagerpåNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksantallsøndagerpåNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks antall søndager på rad (§10-8). - 1,00";
                    this.mUIMaksantallsøndagerpåNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksantallsøndagerpåNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMaksantallsøndagerpåNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksplanlagttidperdaNavBarGroup
        {
            get
            {
                if ((this.mUIMaksplanlagttidperdaNavBarGroup == null))
                {
                    this.mUIMaksplanlagttidperdaNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksplanlagttidperdaNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks planlagt tid per dag (§10-4) - 12,00";
                    this.mUIMaksplanlagttidperdaNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksplanlagttidperdaNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMaksplanlagttidperdaNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksplanlagttidperukNavBarGroup
        {
            get
            {
                if ((this.mUIMaksplanlagttidperukNavBarGroup == null))
                {
                    this.mUIMaksplanlagttidperukNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksplanlagttidperukNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks planlagt tid per uke (§10-4) - 48,00";
                    this.mUIMaksplanlagttidperukNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksplanlagttidperukNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMaksplanlagttidperukNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMinstedagligearbeidsNavBarGroup
        {
            get
            {
                if ((this.mUIMinstedagligearbeidsNavBarGroup == null))
                {
                    this.mUIMinstedagligearbeidsNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMinstedagligearbeidsNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Minste daglige arbeidsfri mellom Aften- og Dag-vakt (§10-8) - 8,00 / 8,00 / 8,00 " +
                        "/ 8,00 / 8,00 / 8,00 / 11,00";
                    this.mUIMinstedagligearbeidsNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMinstedagligearbeidsNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMinstedagligearbeidsNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMinstedagligearbeidsNavBarGroup1
        {
            get
            {
                if ((this.mUIMinstedagligearbeidsNavBarGroup1 == null))
                {
                    this.mUIMinstedagligearbeidsNavBarGroup1 = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMinstedagligearbeidsNavBarGroup1.SearchProperties[DXTestControl.PropertyNames.Name] = "Minste daglige arbeidsfri mellom Dag- og Natt-vakt (§10-8) - 8,00 / 8,00 / 8,00 /" +
                        " 8,00 / 8,00 / 8,00 / 11,00";
                    this.mUIMinstedagligearbeidsNavBarGroup1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMinstedagligearbeidsNavBarGroup1.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMinstedagligearbeidsNavBarGroup1;
            }
        }
        
        public DXNavBarGroup UIMinstedagligearbeidsNavBarGroup2
        {
            get
            {
                if ((this.mUIMinstedagligearbeidsNavBarGroup2 == null))
                {
                    this.mUIMinstedagligearbeidsNavBarGroup2 = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMinstedagligearbeidsNavBarGroup2.SearchProperties[DXTestControl.PropertyNames.Name] = "Minste daglige arbeidsfri mellom Natt- og Aften-vakt (§10-8) - 8,00 / 8,00 / 8,00" +
                        " / 8,00 / 8,00 / 8,00 / 11,00";
                    this.mUIMinstedagligearbeidsNavBarGroup2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMinstedagligearbeidsNavBarGroup2.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMinstedagligearbeidsNavBarGroup2;
            }
        }
        
        public DXNavBarGroup UIUkentligarbeidsfrigjNavBarGroup
        {
            get
            {
                if ((this.mUIUkentligarbeidsfrigjNavBarGroup == null))
                {
                    this.mUIUkentligarbeidsfrigjNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIUkentligarbeidsfrigjNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Ukentlig arbeidsfri (gjelder kun F1) (§10-8) - 35,00";
                    this.mUIUkentligarbeidsfrigjNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIUkentligarbeidsfrigjNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIUkentligarbeidsfrigjNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIF3LengdeVaktfragrunnNavBarGroup
        {
            get
            {
                if ((this.mUIF3LengdeVaktfragrunnNavBarGroup == null))
                {
                    this.mUIF3LengdeVaktfragrunnNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIF3LengdeVaktfragrunnNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "F3 Lengde - Vakt fra grunnplan";
                    this.mUIF3LengdeVaktfragrunnNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIF3LengdeVaktfragrunnNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIF3LengdeVaktfragrunnNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIF4LengdeVaktfragrunnNavBarGroup
        {
            get
            {
                if ((this.mUIF4LengdeVaktfragrunnNavBarGroup == null))
                {
                    this.mUIF4LengdeVaktfragrunnNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIF4LengdeVaktfragrunnNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "F4 Lengde - Vakt fra grunnplan";
                    this.mUIF4LengdeVaktfragrunnNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIF4LengdeVaktfragrunnNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIF4LengdeVaktfragrunnNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIF5LengdeVaktfragrunnNavBarGroup
        {
            get
            {
                if ((this.mUIF5LengdeVaktfragrunnNavBarGroup == null))
                {
                    this.mUIF5LengdeVaktfragrunnNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIF5LengdeVaktfragrunnNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "F5 Lengde - Vakt fra grunnplan";
                    this.mUIF5LengdeVaktfragrunnNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIF5LengdeVaktfragrunnNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIF5LengdeVaktfragrunnNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksantallAftenvakteNavBarGroup
        {
            get
            {
                if ((this.mUIMaksantallAftenvakteNavBarGroup == null))
                {
                    this.mUIMaksantallAftenvakteNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksantallAftenvakteNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks antall Aften-vakter på rad. - 1,00";
                    this.mUIMaksantallAftenvakteNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksantallAftenvakteNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMaksantallAftenvakteNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksantallDagvakterpNavBarGroup
        {
            get
            {
                if ((this.mUIMaksantallDagvakterpNavBarGroup == null))
                {
                    this.mUIMaksantallDagvakterpNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksantallDagvakterpNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks antall Dag-vakter på rad. - 2,00";
                    this.mUIMaksantallDagvakterpNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksantallDagvakterpNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMaksantallDagvakterpNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksantallNattvakterNavBarGroup
        {
            get
            {
                if ((this.mUIMaksantallNattvakterNavBarGroup == null))
                {
                    this.mUIMaksantallNattvakterNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksantallNattvakterNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks antall Natt-vakter på rad. - 3,00";
                    this.mUIMaksantallNattvakterNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksantallNattvakterNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMaksantallNattvakterNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksantalllørdagerpåNavBarGroup
        {
            get
            {
                if ((this.mUIMaksantalllørdagerpåNavBarGroup == null))
                {
                    this.mUIMaksantalllørdagerpåNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksantalllørdagerpåNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks antall lørdager på rad. - 2,00";
                    this.mUIMaksantalllørdagerpåNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksantalllørdagerpåNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMaksantalllørdagerpåNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksantallvakterpåraNavBarGroup
        {
            get
            {
                if ((this.mUIMaksantallvakterpåraNavBarGroup == null))
                {
                    this.mUIMaksantallvakterpåraNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksantallvakterpåraNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maks antall vakter på rad. - 8,00";
                    this.mUIMaksantallvakterpåraNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksantallvakterpåraNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMaksantallvakterpåraNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMaksimumantallvakterNavBarGroup
        {
            get
            {
                if ((this.mUIMaksimumantallvakterNavBarGroup == null))
                {
                    this.mUIMaksimumantallvakterNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMaksimumantallvakterNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Maksimum antall vakter pr. vaktkategori - 999 / 999 / 999 / ";
                    this.mUIMaksimumantallvakterNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMaksimumantallvakterNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMaksimumantallvakterNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMinimumantallvakterpNavBarGroup
        {
            get
            {
                if ((this.mUIMinimumantallvakterpNavBarGroup == null))
                {
                    this.mUIMinimumantallvakterpNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMinimumantallvakterpNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Minimum antall vakter pr. vaktkategori - - / - / - / ";
                    this.mUIMinimumantallvakterpNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMinimumantallvakterpNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMinimumantallvakterpNavBarGroup;
            }
        }
        
        public DXNavBarGroup UIMinimumogmaksimumantNavBarGroup
        {
            get
            {
                if ((this.mUIMinimumogmaksimumantNavBarGroup == null))
                {
                    this.mUIMinimumogmaksimumantNavBarGroup = new DXNavBarGroup(this);
                    #region Search Criteria
                    this.mUIMinimumogmaksimumantNavBarGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "Minimum og maksimum antall vakter pr. vaktkategori justeres etter stillingsstørre" +
                        "lse? - Nei";
                    this.mUIMinimumogmaksimumantNavBarGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
                    this.mUIMinimumogmaksimumantNavBarGroup.WindowTitles.Add("Arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIMinimumogmaksimumantNavBarGroup;
            }
        }
        #endregion
        
        #region Fields
        private DXNavBarGroup mUIF3kanbrukespåhalveheNavBarGroup;
        
        private DXNavBarGroup mUIF3kanbrukespåsøndageNavBarGroup;
        
        private DXNavBarGroup mUIKravtilF1hverukeJaNavBarGroup;
        
        private DXNavBarGroup mUIMaksantallsøndagerpåNavBarGroup;
        
        private DXNavBarGroup mUIMaksplanlagttidperdaNavBarGroup;
        
        private DXNavBarGroup mUIMaksplanlagttidperukNavBarGroup;
        
        private DXNavBarGroup mUIMinstedagligearbeidsNavBarGroup;
        
        private DXNavBarGroup mUIMinstedagligearbeidsNavBarGroup1;
        
        private DXNavBarGroup mUIMinstedagligearbeidsNavBarGroup2;
        
        private DXNavBarGroup mUIUkentligarbeidsfrigjNavBarGroup;
        
        private DXNavBarGroup mUIF3LengdeVaktfragrunnNavBarGroup;
        
        private DXNavBarGroup mUIF4LengdeVaktfragrunnNavBarGroup;
        
        private DXNavBarGroup mUIF5LengdeVaktfragrunnNavBarGroup;
        
        private DXNavBarGroup mUIMaksantallAftenvakteNavBarGroup;
        
        private DXNavBarGroup mUIMaksantallDagvakterpNavBarGroup;
        
        private DXNavBarGroup mUIMaksantallNattvakterNavBarGroup;
        
        private DXNavBarGroup mUIMaksantalllørdagerpåNavBarGroup;
        
        private DXNavBarGroup mUIMaksantallvakterpåraNavBarGroup;
        
        private DXNavBarGroup mUIMaksimumantallvakterNavBarGroup;
        
        private DXNavBarGroup mUIMinimumantallvakterpNavBarGroup;
        
        private DXNavBarGroup mUIMinimumogmaksimumantNavBarGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIDpnlVisualizationDockPanel UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        
        public UIPnlRosterPlanClient1 UIPnlRosterPlanClient1
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient1 == null))
                {
                    this.mUIPnlRosterPlanClient1 = new UIPnlRosterPlanClient1(this);
                }
                return this.mUIPnlRosterPlanClient1;
            }
        }
        
        public UIDpnlVisualizationDockPanel1 UIDpnlVisualizationDockPanel1
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel1 == null))
                {
                    this.mUIDpnlVisualizationDockPanel1 = new UIDpnlVisualizationDockPanel1(this);
                }
                return this.mUIDpnlVisualizationDockPanel1;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        
        private UIDpnlVisualizationDockPanel mUIDpnlVisualizationDockPanel;
        
        private UIPnlRosterPlanClient1 mUIPnlRosterPlanClient1;
        
        private UIDpnlVisualizationDockPanel1 mUIDpnlVisualizationDockPanel1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit == null))
                {
                    this.mUIRow0ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_1";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_1";
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_7";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_7";
                    this.mUIRow0ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_13";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_13";
                    this.mUIRow0ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_14";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit5
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit5 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit5 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_14";
                    this.mUIRow0ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit5;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit6
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit6 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit6 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_17";
                    this.mUIRow0ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit6;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit7
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit7 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit7 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_18";
                    this.mUIRow0ColumnRosterCellEdit7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit7;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit == null))
                {
                    this.mUIRow1ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_1";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_1";
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_2";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_2";
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIRow1ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIItemCell10
        {
            get
            {
                if ((this.mUIItemCell10 == null))
                {
                    this.mUIItemCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_8";
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell10;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_8";
                    this.mUIRow1ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit4;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_9";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit5
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit5 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit5 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_9";
                    this.mUIRow1ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit5;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_10";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit6
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit6 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit6 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_10";
                    this.mUIRow1ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit6;
            }
        }
        
        public DXCell UIItemCell13
        {
            get
            {
                if ((this.mUIItemCell13 == null))
                {
                    this.mUIItemCell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_12";
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell13;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit7
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit7 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit7 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_12";
                    this.mUIRow1ColumnRosterCellEdit7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit7;
            }
        }
        
        public DXCell UIItemCell14
        {
            get
            {
                if ((this.mUIItemCell14 == null))
                {
                    this.mUIItemCell14 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_14";
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell14.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell14;
            }
        }
        
        public DXCell UIItemCell15
        {
            get
            {
                if ((this.mUIItemCell15 == null))
                {
                    this.mUIItemCell15 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_19";
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell15.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell15;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit8
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit8 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit8 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_14";
                    this.mUIRow1ColumnRosterCellEdit8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit8;
            }
        }
        
        public DXCell UIItemCell16
        {
            get
            {
                if ((this.mUIItemCell16 == null))
                {
                    this.mUIItemCell16 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_20";
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell16.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell16;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit9
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit9 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit9 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_20";
                    this.mUIRow1ColumnRosterCellEdit9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit9;
            }
        }
        
        public DXCell UIItemCell17
        {
            get
            {
                if ((this.mUIItemCell17 == null))
                {
                    this.mUIItemCell17 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_3";
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell17.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell17;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit == null))
                {
                    this.mUIRow2ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_3";
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell18
        {
            get
            {
                if ((this.mUIItemCell18 == null))
                {
                    this.mUIItemCell18 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell18.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_6";
                    this.mUIItemCell18.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell18.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell18;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_6";
                    this.mUIRow2ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell19
        {
            get
            {
                if ((this.mUIItemCell19 == null))
                {
                    this.mUIItemCell19 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell19.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_7";
                    this.mUIItemCell19.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell19.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell19;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_7";
                    this.mUIRow2ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell20
        {
            get
            {
                if ((this.mUIItemCell20 == null))
                {
                    this.mUIItemCell20 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell20.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_9";
                    this.mUIItemCell20.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell20.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell20;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_9";
                    this.mUIRow2ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIItemCell21
        {
            get
            {
                if ((this.mUIItemCell21 == null))
                {
                    this.mUIItemCell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_11";
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell21.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell21;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_11";
                    this.mUIRow2ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit4;
            }
        }
        
        public DXCell UIItemCell22
        {
            get
            {
                if ((this.mUIItemCell22 == null))
                {
                    this.mUIItemCell22 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_13";
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell22.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell22;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit5
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit5 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit5 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_13";
                    this.mUIRow2ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit5;
            }
        }
        
        public DXCell UIItemCell23
        {
            get
            {
                if ((this.mUIItemCell23 == null))
                {
                    this.mUIItemCell23 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell23.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_20";
                    this.mUIItemCell23.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell23.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell23;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit6
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit6 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit6 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_20";
                    this.mUIRow2ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit6;
            }
        }
        
        public DXCell UIItemCell24
        {
            get
            {
                if ((this.mUIItemCell24 == null))
                {
                    this.mUIItemCell24 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell24.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_17";
                    this.mUIItemCell24.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell24.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell24;
            }
        }
        
        public DXCell UIItemCell110
        {
            get
            {
                if ((this.mUIItemCell110 == null))
                {
                    this.mUIItemCell110 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell110.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_18";
                    this.mUIItemCell110.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell110.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell110;
            }
        }
        
        public DXCell UIAnsattEnCell
        {
            get
            {
                if ((this.mUIAnsattEnCell == null))
                {
                    this.mUIAnsattEnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_EmployeeName";
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattEnCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattEnCell;
            }
        }
        
        public DXCell UIAnsattFemCell
        {
            get
            {
                if ((this.mUIAnsattFemCell == null))
                {
                    this.mUIAnsattFemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattFemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]Col_EmployeeName";
                    this.mUIAnsattFemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattFemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattFemCell;
            }
        }
        
        public DXCell UIAnsattTiCell
        {
            get
            {
                if ((this.mUIAnsattTiCell == null))
                {
                    this.mUIAnsattTiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattTiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]Col_EmployeeName";
                    this.mUIAnsattTiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattTiCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattTiCell;
            }
        }
        
        public DXCell UIItemCell25
        {
            get
            {
                if ((this.mUIItemCell25 == null))
                {
                    this.mUIItemCell25 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell25.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_0";
                    this.mUIItemCell25.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell25.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell25;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit == null))
                {
                    this.mUIRow3ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_0";
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell111
        {
            get
            {
                if ((this.mUIItemCell111 == null))
                {
                    this.mUIItemCell111 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell111.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_1";
                    this.mUIItemCell111.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell111.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell111;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow3ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_1";
                    this.mUIRow3ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell26
        {
            get
            {
                if ((this.mUIItemCell26 == null))
                {
                    this.mUIItemCell26 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell26.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_6";
                    this.mUIItemCell26.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell26.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell26;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow3ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_6";
                    this.mUIRow3ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell31
        {
            get
            {
                if ((this.mUIItemCell31 == null))
                {
                    this.mUIItemCell31 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_8";
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell31.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell31;
            }
        }
        
        public DXCell UIItemCell41
        {
            get
            {
                if ((this.mUIItemCell41 == null))
                {
                    this.mUIItemCell41 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell41.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_11";
                    this.mUIItemCell41.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell41.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell41;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow3ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_8";
                    this.mUIRow3ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIItemCell51
        {
            get
            {
                if ((this.mUIItemCell51 == null))
                {
                    this.mUIItemCell51 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell51.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_13";
                    this.mUIItemCell51.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell51.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell51;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow3ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_13";
                    this.mUIRow3ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit4;
            }
        }
        
        public DXCell UIItemCell61
        {
            get
            {
                if ((this.mUIItemCell61 == null))
                {
                    this.mUIItemCell61 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell61.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_20";
                    this.mUIItemCell61.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell61.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell61;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit5
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit5 == null))
                {
                    this.mUIRow3ColumnRosterCellEdit5 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_20";
                    this.mUIRow3ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit5;
            }
        }
        
        public DXCell UIItemCell71
        {
            get
            {
                if ((this.mUIItemCell71 == null))
                {
                    this.mUIItemCell71 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell71.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_2";
                    this.mUIItemCell71.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell71.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell71;
            }
        }
        
        public DXCell UIItemCell81
        {
            get
            {
                if ((this.mUIItemCell81 == null))
                {
                    this.mUIItemCell81 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell81.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_4";
                    this.mUIItemCell81.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell81.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell81;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit == null))
                {
                    this.mUIRow4ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_2";
                    this.mUIRow4ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell91
        {
            get
            {
                if ((this.mUIItemCell91 == null))
                {
                    this.mUIItemCell91 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell91.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_6";
                    this.mUIItemCell91.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell91.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell91;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_6";
                    this.mUIRow4ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell101
        {
            get
            {
                if ((this.mUIItemCell101 == null))
                {
                    this.mUIItemCell101 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell101.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_13";
                    this.mUIItemCell101.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell101.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell101;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_13";
                    this.mUIRow4ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell112
        {
            get
            {
                if ((this.mUIItemCell112 == null))
                {
                    this.mUIItemCell112 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell112.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]RosterCell_20";
                    this.mUIItemCell112.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell112.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell112;
            }
        }
        
        public DXTextEdit UIRow4ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow4ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow4ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow4ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]4[Column]RosterCell_20";
                    this.mUIRow4ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow4ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow4ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIAnsattNiCell
        {
            get
            {
                if ((this.mUIAnsattNiCell == null))
                {
                    this.mUIAnsattNiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattNiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]Col_EmployeeName";
                    this.mUIAnsattNiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattNiCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattNiCell;
            }
        }
        
        public DXCell UIAnsattSeksCell
        {
            get
            {
                if ((this.mUIAnsattSeksCell == null))
                {
                    this.mUIAnsattSeksCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]Col_EmployeeName";
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattSeksCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattSeksCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit;
        
        private DXCell mUIItemCell1;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell2;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell3;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit3;
        
        private DXCell mUIItemCell4;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit4;
        
        private DXCell mUIItemCell5;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit5;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit6;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit7;
        
        private DXCell mUIItemCell6;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit;
        
        private DXCell mUIItemCell7;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell8;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell9;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit3;
        
        private DXCell mUIItemCell10;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit4;
        
        private DXCell mUIItemCell11;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit5;
        
        private DXCell mUIItemCell12;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit6;
        
        private DXCell mUIItemCell13;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit7;
        
        private DXCell mUIItemCell14;
        
        private DXCell mUIItemCell15;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit8;
        
        private DXCell mUIItemCell16;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit9;
        
        private DXCell mUIItemCell17;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit;
        
        private DXCell mUIItemCell18;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell19;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell20;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit3;
        
        private DXCell mUIItemCell21;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit4;
        
        private DXCell mUIItemCell22;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit5;
        
        private DXCell mUIItemCell23;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit6;
        
        private DXCell mUIItemCell24;
        
        private DXCell mUIItemCell110;
        
        private DXCell mUIAnsattEnCell;
        
        private DXCell mUIAnsattFemCell;
        
        private DXCell mUIAnsattTiCell;
        
        private DXCell mUIItemCell25;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit;
        
        private DXCell mUIItemCell111;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell26;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell31;
        
        private DXCell mUIItemCell41;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit3;
        
        private DXCell mUIItemCell51;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit4;
        
        private DXCell mUIItemCell61;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit5;
        
        private DXCell mUIItemCell71;
        
        private DXCell mUIItemCell81;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit;
        
        private DXCell mUIItemCell91;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell101;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell112;
        
        private DXTextEdit mUIRow4ColumnRosterCellEdit3;
        
        private DXCell mUIAnsattNiCell;
        
        private DXCell mUIAnsattSeksCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable1 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable1(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable1 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable1 : DXGrid
    {
        
        public UIGcRosterPlanTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnsattNiCell
        {
            get
            {
                if ((this.mUIAnsattNiCell == null))
                {
                    this.mUIAnsattNiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattNiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]EmployeeName";
                    this.mUIAnsattNiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattNiCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattNiCell;
            }
        }
        
        public DXCell UIAnsattSeksCell
        {
            get
            {
                if ((this.mUIAnsattSeksCell == null))
                {
                    this.mUIAnsattSeksCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]EmployeeName";
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattSeksCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattSeksCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnsattNiCell;
        
        private DXCell mUIAnsattSeksCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlVisualizationDockPanel : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel3_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        
        public UITcSubtabsTabList UITcSubtabsTabList
        {
            get
            {
                if ((this.mUITcSubtabsTabList == null))
                {
                    this.mUITcSubtabsTabList = new UITcSubtabsTabList(this);
                }
                return this.mUITcSubtabsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList mUITcVisualizationTabList;
        
        private UITcSubtabsTabList mUITcSubtabsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcVisualizationTabList : DXTestControl
    {
        
        public UITcVisualizationTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITpValidationMessagesClient UITpValidationMessagesClient
        {
            get
            {
                if ((this.mUITpValidationMessagesClient == null))
                {
                    this.mUITpValidationMessagesClient = new UITpValidationMessagesClient(this);
                }
                return this.mUITpValidationMessagesClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpValidationMessagesClient mUITpValidationMessagesClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpValidationMessagesClient : DXTestControl
    {
        
        public UITpValidationMessagesClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl7Client UIGsPanelControl7Client
        {
            get
            {
                if ((this.mUIGsPanelControl7Client == null))
                {
                    this.mUIGsPanelControl7Client = new UIGsPanelControl7Client(this);
                }
                return this.mUIGsPanelControl7Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl7Client mUIGsPanelControl7Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsPanelControl7Client : DXTestControl
    {
        
        public UIGsPanelControl7Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl7";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGridValidationMessagTable UIGridValidationMessagTable
        {
            get
            {
                if ((this.mUIGridValidationMessagTable == null))
                {
                    this.mUIGridValidationMessagTable = new UIGridValidationMessagTable(this);
                }
                return this.mUIGridValidationMessagTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridValidationMessagTable mUIGridValidationMessagTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridValidationMessagTable : DXGrid
    {
        
        public UIGridValidationMessagTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnsattEnCell
        {
            get
            {
                if ((this.mUIAnsattEnCell == null))
                {
                    this.mUIAnsattEnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lFullname";
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattEnCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattEnCell;
            }
        }
        
        public DXCell UIMandagCell
        {
            get
            {
                if ((this.mUIMandagCell == null))
                {
                    this.mUIMandagCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMandagCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lWeekDay";
                    this.mUIMandagCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMandagCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIMandagCell;
            }
        }
        
        public DXCell UIA1Cell
        {
            get
            {
                if ((this.mUIA1Cell == null))
                {
                    this.mUIA1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIA1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lShiftCode";
                    this.mUIA1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA1Cell;
            }
        }
        
        public DXCell UIItem1Cell
        {
            get
            {
                if ((this.mUIItem1Cell == null))
                {
                    this.mUIItem1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lWeeknumber";
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1Cell;
            }
        }
        
        public DXCell UIItem2Cell
        {
            get
            {
                if ((this.mUIItem2Cell == null))
                {
                    this.mUIItem2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]3[Column]co" +
                        "lWeeknumber";
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2Cell;
            }
        }
        
        public DXCell UIItem3Cell
        {
            get
            {
                if ((this.mUIItem3Cell == null))
                {
                    this.mUIItem3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]7[Column]co" +
                        "lWeeknumber";
                    this.mUIItem3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3Cell;
            }
        }
        
        public DXCell UIFeilCell
        {
            get
            {
                if ((this.mUIFeilCell == null))
                {
                    this.mUIFeilCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFeilCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lMessageType";
                    this.mUIFeilCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFeilCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFeilCell;
            }
        }
        
        public DXCell UIUkeCell
        {
            get
            {
                if ((this.mUIUkeCell == null))
                {
                    this.mUIUkeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIUkeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lStatusGroup";
                    this.mUIUkeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIUkeCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIUkeCell;
            }
        }
        
        public DXCell UIKravtilvakterCell
        {
            get
            {
                if ((this.mUIKravtilvakterCell == null))
                {
                    this.mUIKravtilvakterCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilvakterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]5[Column]co" +
                        "lStatusGroup";
                    this.mUIKravtilvakterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilvakterCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilvakterCell;
            }
        }
        
        public DXCell UIArbeidstidCell
        {
            get
            {
                if ((this.mUIArbeidstidCell == null))
                {
                    this.mUIArbeidstidCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIArbeidstidCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]9[Column]co" +
                        "lStatusGroup";
                    this.mUIArbeidstidCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIArbeidstidCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIArbeidstidCell;
            }
        }
        
        public DXCell UIFeilCell1
        {
            get
            {
                if ((this.mUIFeilCell1 == null))
                {
                    this.mUIFeilCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFeilCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]9[Column]co" +
                        "lMessageType";
                    this.mUIFeilCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFeilCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFeilCell1;
            }
        }
        
        public DXCell UIKravtilF1vaktiukeintCell
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell == null))
                {
                    this.mUIKravtilF1vaktiukeintCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell;
            }
        }
        
        public DXCell UIDenneA1vaktenskaperhCell
        {
            get
            {
                if ((this.mUIDenneA1vaktenskaperhCell == null))
                {
                    this.mUIDenneA1vaktenskaperhCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneA1vaktenskaperhCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lDescription";
                    this.mUIDenneA1vaktenskaperhCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneA1vaktenskaperhCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneA1vaktenskaperhCell;
            }
        }
        
        public DXCell UIFormangejobbesøndageCell
        {
            get
            {
                if ((this.mUIFormangejobbesøndageCell == null))
                {
                    this.mUIFormangejobbesøndageCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangejobbesøndageCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lDescription";
                    this.mUIFormangejobbesøndageCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangejobbesøndageCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangejobbesøndageCell;
            }
        }
        
        public DXCell UIKravtilF1vaktiukeintCell1
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell1 == null))
                {
                    this.mUIKravtilF1vaktiukeintCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]3[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell1;
            }
        }
        
        public DXCell UIDenneDvaktenskaperhvCell
        {
            get
            {
                if ((this.mUIDenneDvaktenskaperhvCell == null))
                {
                    this.mUIDenneDvaktenskaperhvCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneDvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]4[Column]co" +
                        "lDescription";
                    this.mUIDenneDvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneDvaktenskaperhvCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneDvaktenskaperhvCell;
            }
        }
        
        public DXCell UIFormangejobbesøndageCell1
        {
            get
            {
                if ((this.mUIFormangejobbesøndageCell1 == null))
                {
                    this.mUIFormangejobbesøndageCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangejobbesøndageCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]5[Column]co" +
                        "lDescription";
                    this.mUIFormangejobbesøndageCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangejobbesøndageCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangejobbesøndageCell1;
            }
        }
        
        public DXCell UIDenneDvaktenskaperhvCell1
        {
            get
            {
                if ((this.mUIDenneDvaktenskaperhvCell1 == null))
                {
                    this.mUIDenneDvaktenskaperhvCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneDvaktenskaperhvCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]6[Column]co" +
                        "lDescription";
                    this.mUIDenneDvaktenskaperhvCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneDvaktenskaperhvCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneDvaktenskaperhvCell1;
            }
        }
        
        public DXCell UIDenneNvaktenskaperhvCell
        {
            get
            {
                if ((this.mUIDenneNvaktenskaperhvCell == null))
                {
                    this.mUIDenneNvaktenskaperhvCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneNvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]7[Column]co" +
                        "lDescription";
                    this.mUIDenneNvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneNvaktenskaperhvCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneNvaktenskaperhvCell;
            }
        }
        
        public DXCell UIKravtilF1vaktiukeintCell2
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell2 == null))
                {
                    this.mUIKravtilF1vaktiukeintCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]8[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell2;
            }
        }
        
        public DXCell UIBeregnetstillingsproCell
        {
            get
            {
                if ((this.mUIBeregnetstillingsproCell == null))
                {
                    this.mUIBeregnetstillingsproCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBeregnetstillingsproCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]9[Column]co" +
                        "lDescription";
                    this.mUIBeregnetstillingsproCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBeregnetstillingsproCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBeregnetstillingsproCell;
            }
        }
        
        public DXCell UIGV1Cell
        {
            get
            {
                if ((this.mUIGV1Cell == null))
                {
                    this.mUIGV1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lShiftCode";
                    this.mUIGV1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell;
            }
        }
        
        public DXCell UIAnsattTiCell
        {
            get
            {
                if ((this.mUIAnsattTiCell == null))
                {
                    this.mUIAnsattTiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattTiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lFullname";
                    this.mUIAnsattTiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattTiCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattTiCell;
            }
        }
        
        public DXCell UIMandagCell1
        {
            get
            {
                if ((this.mUIMandagCell1 == null))
                {
                    this.mUIMandagCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIMandagCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lWeekDay";
                    this.mUIMandagCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMandagCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIMandagCell1;
            }
        }
        
        public DXCell UIItem2Cell1
        {
            get
            {
                if ((this.mUIItem2Cell1 == null))
                {
                    this.mUIItem2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lWeeknumber";
                    this.mUIItem2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2Cell1;
            }
        }
        
        public DXCell UIFeilCell2
        {
            get
            {
                if ((this.mUIFeilCell2 == null))
                {
                    this.mUIFeilCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFeilCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lMessageType";
                    this.mUIFeilCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFeilCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFeilCell2;
            }
        }
        
        public DXCell UIHviletidCell
        {
            get
            {
                if ((this.mUIHviletidCell == null))
                {
                    this.mUIHviletidCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHviletidCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lStatusGroup";
                    this.mUIHviletidCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHviletidCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHviletidCell;
            }
        }
        
        public DXCell UIDCell
        {
            get
            {
                if ((this.mUIDCell == null))
                {
                    this.mUIDCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]4[Column]co" +
                        "lShiftCode";
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell;
            }
        }
        
        public DXCell UIDFMCell
        {
            get
            {
                if ((this.mUIDFMCell == null))
                {
                    this.mUIDFMCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDFMCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]11[Column]c" +
                        "olShiftCode";
                    this.mUIDFMCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDFMCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDFMCell;
            }
        }
        
        public DXCell UIOnsdagCell
        {
            get
            {
                if ((this.mUIOnsdagCell == null))
                {
                    this.mUIOnsdagCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOnsdagCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]7[Column]co" +
                        "lWeekDay";
                    this.mUIOnsdagCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOnsdagCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIOnsdagCell;
            }
        }
        
        public DXCell UITorsdagCell
        {
            get
            {
                if ((this.mUITorsdagCell == null))
                {
                    this.mUITorsdagCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITorsdagCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]14[Column]c" +
                        "olWeekDay";
                    this.mUITorsdagCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITorsdagCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUITorsdagCell;
            }
        }
        
        public DXCell UIItem2Cell2
        {
            get
            {
                if ((this.mUIItem2Cell2 == null))
                {
                    this.mUIItem2Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]9[Column]co" +
                        "lWeeknumber";
                    this.mUIItem2Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2Cell2;
            }
        }
        
        public DXCell UIItem3Cell1
        {
            get
            {
                if ((this.mUIItem3Cell1 == null))
                {
                    this.mUIItem3Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]14[Column]c" +
                        "olWeeknumber";
                    this.mUIItem3Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3Cell1;
            }
        }
        
        public DXCell UIFeilCell3
        {
            get
            {
                if ((this.mUIFeilCell3 == null))
                {
                    this.mUIFeilCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFeilCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]7[Column]co" +
                        "lMessageType";
                    this.mUIFeilCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFeilCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFeilCell3;
            }
        }
        
        public DXCell UIAdvarselCell
        {
            get
            {
                if ((this.mUIAdvarselCell == null))
                {
                    this.mUIAdvarselCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAdvarselCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]12[Column]c" +
                        "olMessageType";
                    this.mUIAdvarselCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAdvarselCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAdvarselCell;
            }
        }
        
        public DXCell UIArbeidstidCell1
        {
            get
            {
                if ((this.mUIArbeidstidCell1 == null))
                {
                    this.mUIArbeidstidCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIArbeidstidCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]7[Column]co" +
                        "lStatusGroup";
                    this.mUIArbeidstidCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIArbeidstidCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIArbeidstidCell1;
            }
        }
        
        public DXCell UIKravtilvakterCell1
        {
            get
            {
                if ((this.mUIKravtilvakterCell1 == null))
                {
                    this.mUIKravtilvakterCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilvakterCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]12[Column]c" +
                        "olStatusGroup";
                    this.mUIKravtilvakterCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilvakterCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilvakterCell1;
            }
        }
        
        public DXCell UIFormangejobbelørdageCell
        {
            get
            {
                if ((this.mUIFormangejobbelørdageCell == null))
                {
                    this.mUIFormangejobbelørdageCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangejobbelørdageCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]10[Column]c" +
                        "olDescription";
                    this.mUIFormangejobbelørdageCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangejobbelørdageCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangejobbelørdageCell;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell == null))
                {
                    this.mUIFormangevakterpåradmCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]11[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell1
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell1 == null))
                {
                    this.mUIFormangevakterpåradmCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]12[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell1;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell2
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell2 == null))
                {
                    this.mUIFormangevakterpåradmCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]13[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell2;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell3
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell3 == null))
                {
                    this.mUIFormangevakterpåradmCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]14[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell3;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell4
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell4 == null))
                {
                    this.mUIFormangevakterpåradmCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]15[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell4;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell5
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell5 == null))
                {
                    this.mUIFormangevakterpåradmCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]16[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell5;
            }
        }
        
        public DXCell UIFormangejobbelørdageCell1
        {
            get
            {
                if ((this.mUIFormangejobbelørdageCell1 == null))
                {
                    this.mUIFormangejobbelørdageCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangejobbelørdageCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]17[Column]c" +
                        "olDescription";
                    this.mUIFormangejobbelørdageCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangejobbelørdageCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangejobbelørdageCell1;
            }
        }
        
        public DXCell UIAnsattFemCell
        {
            get
            {
                if ((this.mUIAnsattFemCell == null))
                {
                    this.mUIAnsattFemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattFemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lFullname";
                    this.mUIAnsattFemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattFemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattFemCell;
            }
        }
        
        public DXCell UIF1Cell
        {
            get
            {
                if ((this.mUIF1Cell == null))
                {
                    this.mUIF1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lShiftCode";
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell;
            }
        }
        
        public DXCell UISøndagCell
        {
            get
            {
                if ((this.mUISøndagCell == null))
                {
                    this.mUISøndagCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISøndagCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lWeekDay";
                    this.mUISøndagCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISøndagCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISøndagCell;
            }
        }
        
        public DXCell UIItem3Cell2
        {
            get
            {
                if ((this.mUIItem3Cell2 == null))
                {
                    this.mUIItem3Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lWeeknumber";
                    this.mUIItem3Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3Cell2;
            }
        }
        
        public DXCell UIFeilCell4
        {
            get
            {
                if ((this.mUIFeilCell4 == null))
                {
                    this.mUIFeilCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFeilCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lMessageType";
                    this.mUIFeilCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFeilCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFeilCell4;
            }
        }
        
        public DXCell UIHviletidCell1
        {
            get
            {
                if ((this.mUIHviletidCell1 == null))
                {
                    this.mUIHviletidCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIHviletidCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lStatusGroup";
                    this.mUIHviletidCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHviletidCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHviletidCell1;
            }
        }
        
        public DXCell UIKK2Cell
        {
            get
            {
                if ((this.mUIKK2Cell == null))
                {
                    this.mUIKK2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKK2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]10[Column]c" +
                        "olShiftCode";
                    this.mUIKK2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKK2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKK2Cell;
            }
        }
        
        public DXCell UIGV1Cell1
        {
            get
            {
                if ((this.mUIGV1Cell1 == null))
                {
                    this.mUIGV1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]14[Column]c" +
                        "olShiftCode";
                    this.mUIGV1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell1;
            }
        }
        
        public DXCell UIMandagCell2
        {
            get
            {
                if ((this.mUIMandagCell2 == null))
                {
                    this.mUIMandagCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIMandagCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]5[Column]co" +
                        "lWeekDay";
                    this.mUIMandagCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMandagCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIMandagCell2;
            }
        }
        
        public DXCell UIOnsdagCell1
        {
            get
            {
                if ((this.mUIOnsdagCell1 == null))
                {
                    this.mUIOnsdagCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIOnsdagCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]11[Column]c" +
                        "olWeekDay";
                    this.mUIOnsdagCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOnsdagCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIOnsdagCell1;
            }
        }
        
        public DXCell UISøndagCell1
        {
            get
            {
                if ((this.mUISøndagCell1 == null))
                {
                    this.mUISøndagCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUISøndagCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]16[Column]c" +
                        "olWeekDay";
                    this.mUISøndagCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISøndagCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISøndagCell1;
            }
        }
        
        public DXCell UIItem2Cell3
        {
            get
            {
                if ((this.mUIItem2Cell3 == null))
                {
                    this.mUIItem2Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]5[Column]co" +
                        "lWeeknumber";
                    this.mUIItem2Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2Cell3;
            }
        }
        
        public DXCell UIItem3Cell3
        {
            get
            {
                if ((this.mUIItem3Cell3 == null))
                {
                    this.mUIItem3Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]15[Column]c" +
                        "olWeeknumber";
                    this.mUIItem3Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3Cell3;
            }
        }
        
        public DXCell UIFeilCell5
        {
            get
            {
                if ((this.mUIFeilCell5 == null))
                {
                    this.mUIFeilCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFeilCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]5[Column]co" +
                        "lMessageType";
                    this.mUIFeilCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFeilCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFeilCell5;
            }
        }
        
        public DXCell UIFeilCell6
        {
            get
            {
                if ((this.mUIFeilCell6 == null))
                {
                    this.mUIFeilCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFeilCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]15[Column]c" +
                        "olMessageType";
                    this.mUIFeilCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFeilCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFeilCell6;
            }
        }
        
        public DXCell UIAdvarselCell1
        {
            get
            {
                if ((this.mUIAdvarselCell1 == null))
                {
                    this.mUIAdvarselCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIAdvarselCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]17[Column]c" +
                        "olMessageType";
                    this.mUIAdvarselCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAdvarselCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAdvarselCell1;
            }
        }
        
        public DXCell UIKravtilvakterCell2
        {
            get
            {
                if ((this.mUIKravtilvakterCell2 == null))
                {
                    this.mUIKravtilvakterCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilvakterCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]4[Column]co" +
                        "lStatusGroup";
                    this.mUIKravtilvakterCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilvakterCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilvakterCell2;
            }
        }
        
        public DXCell UIKravtilvakterCell3
        {
            get
            {
                if ((this.mUIKravtilvakterCell3 == null))
                {
                    this.mUIKravtilvakterCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilvakterCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]17[Column]c" +
                        "olStatusGroup";
                    this.mUIKravtilvakterCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilvakterCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilvakterCell3;
            }
        }
        
        public DXCell UIAdvarselCell2
        {
            get
            {
                if ((this.mUIAdvarselCell2 == null))
                {
                    this.mUIAdvarselCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIAdvarselCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]3[Column]co" +
                        "lMessageType";
                    this.mUIAdvarselCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAdvarselCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAdvarselCell2;
            }
        }
        
        public DXCell UIKravtilvakterCell4
        {
            get
            {
                if ((this.mUIKravtilvakterCell4 == null))
                {
                    this.mUIKravtilvakterCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilvakterCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]3[Column]co" +
                        "lStatusGroup";
                    this.mUIKravtilvakterCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilvakterCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilvakterCell4;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnsattEnCell;
        
        private DXCell mUIMandagCell;
        
        private DXCell mUIA1Cell;
        
        private DXCell mUIItem1Cell;
        
        private DXCell mUIItem2Cell;
        
        private DXCell mUIItem3Cell;
        
        private DXCell mUIFeilCell;
        
        private DXCell mUIUkeCell;
        
        private DXCell mUIKravtilvakterCell;
        
        private DXCell mUIArbeidstidCell;
        
        private DXCell mUIFeilCell1;
        
        private DXCell mUIKravtilF1vaktiukeintCell;
        
        private DXCell mUIDenneA1vaktenskaperhCell;
        
        private DXCell mUIFormangejobbesøndageCell;
        
        private DXCell mUIKravtilF1vaktiukeintCell1;
        
        private DXCell mUIDenneDvaktenskaperhvCell;
        
        private DXCell mUIFormangejobbesøndageCell1;
        
        private DXCell mUIDenneDvaktenskaperhvCell1;
        
        private DXCell mUIDenneNvaktenskaperhvCell;
        
        private DXCell mUIKravtilF1vaktiukeintCell2;
        
        private DXCell mUIBeregnetstillingsproCell;
        
        private DXCell mUIGV1Cell;
        
        private DXCell mUIAnsattTiCell;
        
        private DXCell mUIMandagCell1;
        
        private DXCell mUIItem2Cell1;
        
        private DXCell mUIFeilCell2;
        
        private DXCell mUIHviletidCell;
        
        private DXCell mUIDCell;
        
        private DXCell mUIDFMCell;
        
        private DXCell mUIOnsdagCell;
        
        private DXCell mUITorsdagCell;
        
        private DXCell mUIItem2Cell2;
        
        private DXCell mUIItem3Cell1;
        
        private DXCell mUIFeilCell3;
        
        private DXCell mUIAdvarselCell;
        
        private DXCell mUIArbeidstidCell1;
        
        private DXCell mUIKravtilvakterCell1;
        
        private DXCell mUIFormangejobbelørdageCell;
        
        private DXCell mUIFormangevakterpåradmCell;
        
        private DXCell mUIFormangevakterpåradmCell1;
        
        private DXCell mUIFormangevakterpåradmCell2;
        
        private DXCell mUIFormangevakterpåradmCell3;
        
        private DXCell mUIFormangevakterpåradmCell4;
        
        private DXCell mUIFormangevakterpåradmCell5;
        
        private DXCell mUIFormangejobbelørdageCell1;
        
        private DXCell mUIAnsattFemCell;
        
        private DXCell mUIF1Cell;
        
        private DXCell mUISøndagCell;
        
        private DXCell mUIItem3Cell2;
        
        private DXCell mUIFeilCell4;
        
        private DXCell mUIHviletidCell1;
        
        private DXCell mUIKK2Cell;
        
        private DXCell mUIGV1Cell1;
        
        private DXCell mUIMandagCell2;
        
        private DXCell mUIOnsdagCell1;
        
        private DXCell mUISøndagCell1;
        
        private DXCell mUIItem2Cell3;
        
        private DXCell mUIItem3Cell3;
        
        private DXCell mUIFeilCell5;
        
        private DXCell mUIFeilCell6;
        
        private DXCell mUIAdvarselCell1;
        
        private DXCell mUIKravtilvakterCell2;
        
        private DXCell mUIKravtilvakterCell3;
        
        private DXCell mUIAdvarselCell2;
        
        private DXCell mUIKravtilvakterCell4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcSubtabsTabList : DXTestControl
    {
        
        public UITcSubtabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabs";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabControlViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewTabPageClient UIViewTabPageClient
        {
            get
            {
                if ((this.mUIViewTabPageClient == null))
                {
                    this.mUIViewTabPageClient = new UIViewTabPageClient(this);
                }
                return this.mUIViewTabPageClient;
            }
        }
        
        public UIViewTabPageClient1 UIViewTabPageClient1
        {
            get
            {
                if ((this.mUIViewTabPageClient1 == null))
                {
                    this.mUIViewTabPageClient1 = new UIViewTabPageClient1(this);
                }
                return this.mUIViewTabPageClient1;
            }
        }
        
        public UIViewTabPageClient2 UIViewTabPageClient2
        {
            get
            {
                if ((this.mUIViewTabPageClient2 == null))
                {
                    this.mUIViewTabPageClient2 = new UIViewTabPageClient2(this);
                }
                return this.mUIViewTabPageClient2;
            }
        }
        #endregion
        
        #region Fields
        private UIViewTabPageClient mUIViewTabPageClient;
        
        private UIViewTabPageClient1 mUIViewTabPageClient1;
        
        private UIViewTabPageClient2 mUIViewTabPageClient2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient : DXTestControl
    {
        
        public UIViewTabPageClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIValidationViewCustom UIValidationViewCustom
        {
            get
            {
                if ((this.mUIValidationViewCustom == null))
                {
                    this.mUIValidationViewCustom = new UIValidationViewCustom(this);
                }
                return this.mUIValidationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationViewCustom mUIValidationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIValidationViewCustom : DXTestControl
    {
        
        public UIValidationViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ValidationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ValidationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGridValidationMessagTable1 UIGridValidationMessagTable
        {
            get
            {
                if ((this.mUIGridValidationMessagTable == null))
                {
                    this.mUIGridValidationMessagTable = new UIGridValidationMessagTable1(this);
                }
                return this.mUIGridValidationMessagTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridValidationMessagTable1 mUIGridValidationMessagTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridValidationMessagTable1 : DXGrid
    {
        
        public UIGridValidationMessagTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnsattTiCell
        {
            get
            {
                if ((this.mUIAnsattTiCell == null))
                {
                    this.mUIAnsattTiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattTiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lFullname";
                    this.mUIAnsattTiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattTiCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattTiCell;
            }
        }
        
        public DXCell UIKravtilF1vaktiukeintCell
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell == null))
                {
                    this.mUIKravtilF1vaktiukeintCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell;
            }
        }
        
        public DXCell UITotalarbeidstidfordeCell
        {
            get
            {
                if ((this.mUITotalarbeidstidfordeCell == null))
                {
                    this.mUITotalarbeidstidfordeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITotalarbeidstidfordeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lDescription";
                    this.mUITotalarbeidstidfordeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITotalarbeidstidfordeCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUITotalarbeidstidfordeCell;
            }
        }
        
        public DXCell UISamletarbeidstiddettCell
        {
            get
            {
                if ((this.mUISamletarbeidstiddettCell == null))
                {
                    this.mUISamletarbeidstiddettCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISamletarbeidstiddettCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lDescription";
                    this.mUISamletarbeidstiddettCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISamletarbeidstiddettCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISamletarbeidstiddettCell;
            }
        }
        
        public DXCell UIDenneGV1vaktenskaperCell
        {
            get
            {
                if ((this.mUIDenneGV1vaktenskaperCell == null))
                {
                    this.mUIDenneGV1vaktenskaperCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneGV1vaktenskaperCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]3[Column]co" +
                        "lDescription";
                    this.mUIDenneGV1vaktenskaperCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneGV1vaktenskaperCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneGV1vaktenskaperCell;
            }
        }
        
        public DXCell UIFormangejobbesøndageCell
        {
            get
            {
                if ((this.mUIFormangejobbesøndageCell == null))
                {
                    this.mUIFormangejobbesøndageCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangejobbesøndageCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]4[Column]co" +
                        "lDescription";
                    this.mUIFormangejobbesøndageCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangejobbesøndageCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangejobbesøndageCell;
            }
        }
        
        public DXCell UIDenneKK2vaktenskaperCell
        {
            get
            {
                if ((this.mUIDenneKK2vaktenskaperCell == null))
                {
                    this.mUIDenneKK2vaktenskaperCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneKK2vaktenskaperCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]5[Column]co" +
                        "lDescription";
                    this.mUIDenneKK2vaktenskaperCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneKK2vaktenskaperCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneKK2vaktenskaperCell;
            }
        }
        
        public DXCell UITotalarbeidstidfordeCell1
        {
            get
            {
                if ((this.mUITotalarbeidstidfordeCell1 == null))
                {
                    this.mUITotalarbeidstidfordeCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUITotalarbeidstidfordeCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]6[Column]co" +
                        "lDescription";
                    this.mUITotalarbeidstidfordeCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITotalarbeidstidfordeCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUITotalarbeidstidfordeCell1;
            }
        }
        
        public DXCell UISamletarbeidstiddettCell1
        {
            get
            {
                if ((this.mUISamletarbeidstiddettCell1 == null))
                {
                    this.mUISamletarbeidstiddettCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUISamletarbeidstiddettCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]7[Column]co" +
                        "lDescription";
                    this.mUISamletarbeidstiddettCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISamletarbeidstiddettCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISamletarbeidstiddettCell1;
            }
        }
        
        public DXCell UIFormangetimerforukenCell
        {
            get
            {
                if ((this.mUIFormangetimerforukenCell == null))
                {
                    this.mUIFormangetimerforukenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangetimerforukenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]8[Column]co" +
                        "lDescription";
                    this.mUIFormangetimerforukenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangetimerforukenCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangetimerforukenCell;
            }
        }
        
        public DXCell UIKravtilF1vaktiukeintCell1
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell1 == null))
                {
                    this.mUIKravtilF1vaktiukeintCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]9[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell1;
            }
        }
        
        public DXCell UISamletarbeidstiddettCell2
        {
            get
            {
                if ((this.mUISamletarbeidstiddettCell2 == null))
                {
                    this.mUISamletarbeidstiddettCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUISamletarbeidstiddettCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]10[Column]c" +
                        "olDescription";
                    this.mUISamletarbeidstiddettCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISamletarbeidstiddettCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISamletarbeidstiddettCell2;
            }
        }
        
        public DXCell UITotalarbeidstidfordeCell2
        {
            get
            {
                if ((this.mUITotalarbeidstidfordeCell2 == null))
                {
                    this.mUITotalarbeidstidfordeCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUITotalarbeidstidfordeCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]11[Column]c" +
                        "olDescription";
                    this.mUITotalarbeidstidfordeCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITotalarbeidstidfordeCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUITotalarbeidstidfordeCell2;
            }
        }
        
        public DXCell UISamletarbeidstiddettCell3
        {
            get
            {
                if ((this.mUISamletarbeidstiddettCell3 == null))
                {
                    this.mUISamletarbeidstiddettCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUISamletarbeidstiddettCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]12[Column]c" +
                        "olDescription";
                    this.mUISamletarbeidstiddettCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISamletarbeidstiddettCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISamletarbeidstiddettCell3;
            }
        }
        
        public DXCell UITotalarbeidstidfordeCell3
        {
            get
            {
                if ((this.mUITotalarbeidstidfordeCell3 == null))
                {
                    this.mUITotalarbeidstidfordeCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUITotalarbeidstidfordeCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]13[Column]c" +
                        "olDescription";
                    this.mUITotalarbeidstidfordeCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITotalarbeidstidfordeCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUITotalarbeidstidfordeCell3;
            }
        }
        
        public DXCell UIFormangejobbesøndageCell1
        {
            get
            {
                if ((this.mUIFormangejobbesøndageCell1 == null))
                {
                    this.mUIFormangejobbesøndageCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangejobbesøndageCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]14[Column]c" +
                        "olDescription";
                    this.mUIFormangejobbesøndageCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangejobbesøndageCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangejobbesøndageCell1;
            }
        }
        
        public DXCell UIKravtilF1vaktiukeintCell2
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell2 == null))
                {
                    this.mUIKravtilF1vaktiukeintCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]15[Column]c" +
                        "olDescription";
                    this.mUIKravtilF1vaktiukeintCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell2;
            }
        }
        
        public DXCell UIFormangejobbesøndageCell2
        {
            get
            {
                if ((this.mUIFormangejobbesøndageCell2 == null))
                {
                    this.mUIFormangejobbesøndageCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangejobbesøndageCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]16[Column]c" +
                        "olDescription";
                    this.mUIFormangejobbesøndageCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangejobbesøndageCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangejobbesøndageCell2;
            }
        }
        
        public DXCell UIFormangevakteravtypeCell
        {
            get
            {
                if ((this.mUIFormangevakteravtypeCell == null))
                {
                    this.mUIFormangevakteravtypeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakteravtypeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]17[Column]c" +
                        "olDescription";
                    this.mUIFormangevakteravtypeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakteravtypeCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakteravtypeCell;
            }
        }
        
        public DXCell UIAdvarselCell
        {
            get
            {
                if ((this.mUIAdvarselCell == null))
                {
                    this.mUIAdvarselCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAdvarselCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]17[Column]c" +
                        "olMessageType";
                    this.mUIAdvarselCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAdvarselCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAdvarselCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnsattTiCell;
        
        private DXCell mUIKravtilF1vaktiukeintCell;
        
        private DXCell mUITotalarbeidstidfordeCell;
        
        private DXCell mUISamletarbeidstiddettCell;
        
        private DXCell mUIDenneGV1vaktenskaperCell;
        
        private DXCell mUIFormangejobbesøndageCell;
        
        private DXCell mUIDenneKK2vaktenskaperCell;
        
        private DXCell mUITotalarbeidstidfordeCell1;
        
        private DXCell mUISamletarbeidstiddettCell1;
        
        private DXCell mUIFormangetimerforukenCell;
        
        private DXCell mUIKravtilF1vaktiukeintCell1;
        
        private DXCell mUISamletarbeidstiddettCell2;
        
        private DXCell mUITotalarbeidstidfordeCell2;
        
        private DXCell mUISamletarbeidstiddettCell3;
        
        private DXCell mUITotalarbeidstidfordeCell3;
        
        private DXCell mUIFormangejobbesøndageCell1;
        
        private DXCell mUIKravtilF1vaktiukeintCell2;
        
        private DXCell mUIFormangejobbesøndageCell2;
        
        private DXCell mUIFormangevakteravtypeCell;
        
        private DXCell mUIAdvarselCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient1 : DXTestControl
    {
        
        public UIViewTabPageClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIValidationViewCustom1 UIValidationViewCustom
        {
            get
            {
                if ((this.mUIValidationViewCustom == null))
                {
                    this.mUIValidationViewCustom = new UIValidationViewCustom1(this);
                }
                return this.mUIValidationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationViewCustom1 mUIValidationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIValidationViewCustom1 : DXTestControl
    {
        
        public UIValidationViewCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ValidationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ValidationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGridValidationMessagTable2 UIGridValidationMessagTable
        {
            get
            {
                if ((this.mUIGridValidationMessagTable == null))
                {
                    this.mUIGridValidationMessagTable = new UIGridValidationMessagTable2(this);
                }
                return this.mUIGridValidationMessagTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridValidationMessagTable2 mUIGridValidationMessagTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridValidationMessagTable2 : DXGrid
    {
        
        public UIGridValidationMessagTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnsattNiCell
        {
            get
            {
                if ((this.mUIAnsattNiCell == null))
                {
                    this.mUIAnsattNiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattNiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lFullname";
                    this.mUIAnsattNiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattNiCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattNiCell;
            }
        }
        
        public DXCell UIAdvarselCell
        {
            get
            {
                if ((this.mUIAdvarselCell == null))
                {
                    this.mUIAdvarselCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAdvarselCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lMessageType";
                    this.mUIAdvarselCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAdvarselCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAdvarselCell;
            }
        }
        
        public DXCell UIDeterformangeaftenvaCell
        {
            get
            {
                if ((this.mUIDeterformangeaftenvaCell == null))
                {
                    this.mUIDeterformangeaftenvaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDeterformangeaftenvaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lDescription";
                    this.mUIDeterformangeaftenvaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDeterformangeaftenvaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDeterformangeaftenvaCell;
            }
        }
        
        public DXCell UIDeterformangeaftenvaCell1
        {
            get
            {
                if ((this.mUIDeterformangeaftenvaCell1 == null))
                {
                    this.mUIDeterformangeaftenvaCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDeterformangeaftenvaCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lDescription";
                    this.mUIDeterformangeaftenvaCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDeterformangeaftenvaCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDeterformangeaftenvaCell1;
            }
        }
        
        public DXCell UIDeterformangenattvakCell
        {
            get
            {
                if ((this.mUIDeterformangenattvakCell == null))
                {
                    this.mUIDeterformangenattvakCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDeterformangenattvakCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lDescription";
                    this.mUIDeterformangenattvakCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDeterformangenattvakCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDeterformangenattvakCell;
            }
        }
        
        public DXCell UIDeterformangenattvakCell1
        {
            get
            {
                if ((this.mUIDeterformangenattvakCell1 == null))
                {
                    this.mUIDeterformangenattvakCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDeterformangenattvakCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]3[Column]co" +
                        "lDescription";
                    this.mUIDeterformangenattvakCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDeterformangenattvakCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDeterformangenattvakCell1;
            }
        }
        
        public DXCell UIDeterformangenattvakCell2
        {
            get
            {
                if ((this.mUIDeterformangenattvakCell2 == null))
                {
                    this.mUIDeterformangenattvakCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDeterformangenattvakCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]4[Column]co" +
                        "lDescription";
                    this.mUIDeterformangenattvakCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDeterformangenattvakCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDeterformangenattvakCell2;
            }
        }
        
        public DXCell UIDeterformangenattvakCell3
        {
            get
            {
                if ((this.mUIDeterformangenattvakCell3 == null))
                {
                    this.mUIDeterformangenattvakCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDeterformangenattvakCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]5[Column]co" +
                        "lDescription";
                    this.mUIDeterformangenattvakCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDeterformangenattvakCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDeterformangenattvakCell3;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnsattNiCell;
        
        private DXCell mUIAdvarselCell;
        
        private DXCell mUIDeterformangeaftenvaCell;
        
        private DXCell mUIDeterformangeaftenvaCell1;
        
        private DXCell mUIDeterformangenattvakCell;
        
        private DXCell mUIDeterformangenattvakCell1;
        
        private DXCell mUIDeterformangenattvakCell2;
        
        private DXCell mUIDeterformangenattvakCell3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient2 : DXTestControl
    {
        
        public UIViewTabPageClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIValidationViewCustom2 UIValidationViewCustom
        {
            get
            {
                if ((this.mUIValidationViewCustom == null))
                {
                    this.mUIValidationViewCustom = new UIValidationViewCustom2(this);
                }
                return this.mUIValidationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationViewCustom2 mUIValidationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIValidationViewCustom2 : DXTestControl
    {
        
        public UIValidationViewCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ValidationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ValidationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGridValidationMessagTable3 UIGridValidationMessagTable
        {
            get
            {
                if ((this.mUIGridValidationMessagTable == null))
                {
                    this.mUIGridValidationMessagTable = new UIGridValidationMessagTable3(this);
                }
                return this.mUIGridValidationMessagTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridValidationMessagTable3 mUIGridValidationMessagTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridValidationMessagTable3 : DXGrid
    {
        
        public UIGridValidationMessagTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnsattSeksCell
        {
            get
            {
                if ((this.mUIAnsattSeksCell == null))
                {
                    this.mUIAnsattSeksCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lFullname";
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattSeksCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattSeksCell;
            }
        }
        
        public DXCell UIOnsdagCell
        {
            get
            {
                if ((this.mUIOnsdagCell == null))
                {
                    this.mUIOnsdagCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOnsdagCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lWeekDay";
                    this.mUIOnsdagCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOnsdagCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIOnsdagCell;
            }
        }
        
        public DXCell UIAdvarselCell
        {
            get
            {
                if ((this.mUIAdvarselCell == null))
                {
                    this.mUIAdvarselCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAdvarselCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lMessageType";
                    this.mUIAdvarselCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAdvarselCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAdvarselCell;
            }
        }
        
        public DXCell UIDeterformangedagvaktCell
        {
            get
            {
                if ((this.mUIDeterformangedagvaktCell == null))
                {
                    this.mUIDeterformangedagvaktCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDeterformangedagvaktCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lDescription";
                    this.mUIDeterformangedagvaktCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDeterformangedagvaktCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDeterformangedagvaktCell;
            }
        }
        
        public DXCell UIDeterformangedagvaktCell1
        {
            get
            {
                if ((this.mUIDeterformangedagvaktCell1 == null))
                {
                    this.mUIDeterformangedagvaktCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDeterformangedagvaktCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lDescription";
                    this.mUIDeterformangedagvaktCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDeterformangedagvaktCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDeterformangedagvaktCell1;
            }
        }
        
        public DXCell UIDeterformangedagvaktCell2
        {
            get
            {
                if ((this.mUIDeterformangedagvaktCell2 == null))
                {
                    this.mUIDeterformangedagvaktCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDeterformangedagvaktCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lDescription";
                    this.mUIDeterformangedagvaktCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDeterformangedagvaktCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDeterformangedagvaktCell2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnsattSeksCell;
        
        private DXCell mUIOnsdagCell;
        
        private DXCell mUIAdvarselCell;
        
        private DXCell mUIDeterformangedagvaktCell;
        
        private DXCell mUIDeterformangedagvaktCell1;
        
        private DXCell mUIDeterformangedagvaktCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient1 : DXTestControl
    {
        
        public UIPnlRosterPlanClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanGrid1Custom1 UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom1(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanGrid1Custom1 mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom1 : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable2 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable2(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable2 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable2 : DXGrid
    {
        
        public UIGcRosterPlanTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnsattEnCell
        {
            get
            {
                if ((this.mUIAnsattEnCell == null))
                {
                    this.mUIAnsattEnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle1";
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattEnCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattEnCell;
            }
        }
        
        public DXCell UIAnsattFemCell
        {
            get
            {
                if ((this.mUIAnsattFemCell == null))
                {
                    this.mUIAnsattFemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattFemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]ColumnHandle1";
                    this.mUIAnsattFemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattFemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattFemCell;
            }
        }
        
        public DXCell UIAnsattTiCell
        {
            get
            {
                if ((this.mUIAnsattTiCell == null))
                {
                    this.mUIAnsattTiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattTiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]ColumnHandle1";
                    this.mUIAnsattTiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattTiCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattTiCell;
            }
        }
        
        public DXCell UIAnsattNiCell
        {
            get
            {
                if ((this.mUIAnsattNiCell == null))
                {
                    this.mUIAnsattNiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattNiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]ColumnHandle1";
                    this.mUIAnsattNiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattNiCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattNiCell;
            }
        }
        
        public DXCell UIAnsattSeksCell
        {
            get
            {
                if ((this.mUIAnsattSeksCell == null))
                {
                    this.mUIAnsattSeksCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]ColumnHandle1";
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattSeksCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattSeksCell;
            }
        }
        
        public DXCell UIA1Cell1
        {
            get
            {
                if ((this.mUIA1Cell1 == null))
                {
                    this.mUIA1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIA1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIA1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA1Cell1;
            }
        }
        
        public DXCell UIA1Cell
        {
            get
            {
                if ((this.mUIA1Cell == null))
                {
                    this.mUIA1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIA1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIA1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA1Cell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIAnsattEnCell1
        {
            get
            {
                if ((this.mUIAnsattEnCell1 == null))
                {
                    this.mUIAnsattEnCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattEnCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]EmployeeName";
                    this.mUIAnsattEnCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattEnCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattEnCell1;
            }
        }
        
        public DXCell UIAnsattFemCell1
        {
            get
            {
                if ((this.mUIAnsattFemCell1 == null))
                {
                    this.mUIAnsattFemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattFemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]EmployeeName";
                    this.mUIAnsattFemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattFemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattFemCell1;
            }
        }
        
        public DXCell UIAnsattTiCell1
        {
            get
            {
                if ((this.mUIAnsattTiCell1 == null))
                {
                    this.mUIAnsattTiCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattTiCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]EmployeeName";
                    this.mUIAnsattTiCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattTiCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattTiCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnsattEnCell;
        
        private DXCell mUIAnsattFemCell;
        
        private DXCell mUIAnsattTiCell;
        
        private DXCell mUIAnsattNiCell;
        
        private DXCell mUIAnsattSeksCell;
        
        private DXCell mUIA1Cell1;
        
        private DXCell mUIA1Cell;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIAnsattEnCell1;
        
        private DXCell mUIAnsattFemCell1;
        
        private DXCell mUIAnsattTiCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlVisualizationDockPanel1 : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom1 UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom1(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom1 mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel3_ContainerCustom1 : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITcSubtabsTabList1 UITcSubtabsTabList
        {
            get
            {
                if ((this.mUITcSubtabsTabList == null))
                {
                    this.mUITcSubtabsTabList = new UITcSubtabsTabList1(this);
                }
                return this.mUITcSubtabsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcSubtabsTabList1 mUITcSubtabsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcSubtabsTabList1 : DXTestControl
    {
        
        public UITcSubtabsTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabs";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabControlViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewTabPageClient3 UIViewTabPageClient
        {
            get
            {
                if ((this.mUIViewTabPageClient == null))
                {
                    this.mUIViewTabPageClient = new UIViewTabPageClient3(this);
                }
                return this.mUIViewTabPageClient;
            }
        }
        
        public UIViewTabPageClient11 UIViewTabPageClient1
        {
            get
            {
                if ((this.mUIViewTabPageClient1 == null))
                {
                    this.mUIViewTabPageClient1 = new UIViewTabPageClient11(this);
                }
                return this.mUIViewTabPageClient1;
            }
        }
        
        public UIViewTabPageClient21 UIViewTabPageClient2
        {
            get
            {
                if ((this.mUIViewTabPageClient2 == null))
                {
                    this.mUIViewTabPageClient2 = new UIViewTabPageClient21(this);
                }
                return this.mUIViewTabPageClient2;
            }
        }
        
        public UIViewTabPageClient31 UIViewTabPageClient3
        {
            get
            {
                if ((this.mUIViewTabPageClient3 == null))
                {
                    this.mUIViewTabPageClient3 = new UIViewTabPageClient31(this);
                }
                return this.mUIViewTabPageClient3;
            }
        }
        
        public UIViewTabPageClient4 UIViewTabPageClient4
        {
            get
            {
                if ((this.mUIViewTabPageClient4 == null))
                {
                    this.mUIViewTabPageClient4 = new UIViewTabPageClient4(this);
                }
                return this.mUIViewTabPageClient4;
            }
        }
        #endregion
        
        #region Fields
        private UIViewTabPageClient3 mUIViewTabPageClient;
        
        private UIViewTabPageClient11 mUIViewTabPageClient1;
        
        private UIViewTabPageClient21 mUIViewTabPageClient2;
        
        private UIViewTabPageClient31 mUIViewTabPageClient3;
        
        private UIViewTabPageClient4 mUIViewTabPageClient4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient3 : DXTestControl
    {
        
        public UIViewTabPageClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIValidationViewCustom3 UIValidationViewCustom
        {
            get
            {
                if ((this.mUIValidationViewCustom == null))
                {
                    this.mUIValidationViewCustom = new UIValidationViewCustom3(this);
                }
                return this.mUIValidationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationViewCustom3 mUIValidationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIValidationViewCustom3 : DXTestControl
    {
        
        public UIValidationViewCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ValidationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ValidationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGridValidationMessagTable4 UIGridValidationMessagTable
        {
            get
            {
                if ((this.mUIGridValidationMessagTable == null))
                {
                    this.mUIGridValidationMessagTable = new UIGridValidationMessagTable4(this);
                }
                return this.mUIGridValidationMessagTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridValidationMessagTable4 mUIGridValidationMessagTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridValidationMessagTable4 : DXGrid
    {
        
        public UIGridValidationMessagTable4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIKravtilF1vaktiukeintCell
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell == null))
                {
                    this.mUIKravtilF1vaktiukeintCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell;
            }
        }
        
        public DXCell UIDenneA1vaktenskaperhCell
        {
            get
            {
                if ((this.mUIDenneA1vaktenskaperhCell == null))
                {
                    this.mUIDenneA1vaktenskaperhCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneA1vaktenskaperhCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lDescription";
                    this.mUIDenneA1vaktenskaperhCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneA1vaktenskaperhCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneA1vaktenskaperhCell;
            }
        }
        
        public DXCell UIFormangejobbesøndageCell
        {
            get
            {
                if ((this.mUIFormangejobbesøndageCell == null))
                {
                    this.mUIFormangejobbesøndageCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangejobbesøndageCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lDescription";
                    this.mUIFormangejobbesøndageCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangejobbesøndageCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangejobbesøndageCell;
            }
        }
        
        public DXCell UIKravtilF1vaktiukeintCell1
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell1 == null))
                {
                    this.mUIKravtilF1vaktiukeintCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]3[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell1;
            }
        }
        
        public DXCell UIDenneDvaktenskaperhvCell
        {
            get
            {
                if ((this.mUIDenneDvaktenskaperhvCell == null))
                {
                    this.mUIDenneDvaktenskaperhvCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneDvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]4[Column]co" +
                        "lDescription";
                    this.mUIDenneDvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneDvaktenskaperhvCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneDvaktenskaperhvCell;
            }
        }
        
        public DXCell UIFormangejobbesøndageCell1
        {
            get
            {
                if ((this.mUIFormangejobbesøndageCell1 == null))
                {
                    this.mUIFormangejobbesøndageCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangejobbesøndageCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]5[Column]co" +
                        "lDescription";
                    this.mUIFormangejobbesøndageCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangejobbesøndageCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangejobbesøndageCell1;
            }
        }
        
        public DXCell UIDenneDvaktenskaperhvCell1
        {
            get
            {
                if ((this.mUIDenneDvaktenskaperhvCell1 == null))
                {
                    this.mUIDenneDvaktenskaperhvCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneDvaktenskaperhvCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]6[Column]co" +
                        "lDescription";
                    this.mUIDenneDvaktenskaperhvCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneDvaktenskaperhvCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneDvaktenskaperhvCell1;
            }
        }
        
        public DXCell UIDenneNvaktenskaperhvCell
        {
            get
            {
                if ((this.mUIDenneNvaktenskaperhvCell == null))
                {
                    this.mUIDenneNvaktenskaperhvCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneNvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]7[Column]co" +
                        "lDescription";
                    this.mUIDenneNvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneNvaktenskaperhvCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneNvaktenskaperhvCell;
            }
        }
        
        public DXCell UIKravtilF1vaktiukeintCell2
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell2 == null))
                {
                    this.mUIKravtilF1vaktiukeintCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]8[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell2;
            }
        }
        
        public DXCell UIBeregnetstillingsproCell
        {
            get
            {
                if ((this.mUIBeregnetstillingsproCell == null))
                {
                    this.mUIBeregnetstillingsproCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBeregnetstillingsproCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]9[Column]co" +
                        "lDescription";
                    this.mUIBeregnetstillingsproCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBeregnetstillingsproCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBeregnetstillingsproCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIKravtilF1vaktiukeintCell;
        
        private DXCell mUIDenneA1vaktenskaperhCell;
        
        private DXCell mUIFormangejobbesøndageCell;
        
        private DXCell mUIKravtilF1vaktiukeintCell1;
        
        private DXCell mUIDenneDvaktenskaperhvCell;
        
        private DXCell mUIFormangejobbesøndageCell1;
        
        private DXCell mUIDenneDvaktenskaperhvCell1;
        
        private DXCell mUIDenneNvaktenskaperhvCell;
        
        private DXCell mUIKravtilF1vaktiukeintCell2;
        
        private DXCell mUIBeregnetstillingsproCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient11 : DXTestControl
    {
        
        public UIViewTabPageClient11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIValidationViewCustom4 UIValidationViewCustom
        {
            get
            {
                if ((this.mUIValidationViewCustom == null))
                {
                    this.mUIValidationViewCustom = new UIValidationViewCustom4(this);
                }
                return this.mUIValidationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationViewCustom4 mUIValidationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIValidationViewCustom4 : DXTestControl
    {
        
        public UIValidationViewCustom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ValidationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ValidationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGridValidationMessagTable5 UIGridValidationMessagTable
        {
            get
            {
                if ((this.mUIGridValidationMessagTable == null))
                {
                    this.mUIGridValidationMessagTable = new UIGridValidationMessagTable5(this);
                }
                return this.mUIGridValidationMessagTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridValidationMessagTable5 mUIGridValidationMessagTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridValidationMessagTable5 : DXGrid
    {
        
        public UIGridValidationMessagTable5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIDenneA1vaktenskaperhCell
        {
            get
            {
                if ((this.mUIDenneA1vaktenskaperhCell == null))
                {
                    this.mUIDenneA1vaktenskaperhCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneA1vaktenskaperhCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lDescription";
                    this.mUIDenneA1vaktenskaperhCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneA1vaktenskaperhCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneA1vaktenskaperhCell;
            }
        }
        
        public DXCell UIKravtilF1vaktiukeintCell
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell == null))
                {
                    this.mUIKravtilF1vaktiukeintCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell;
            }
        }
        
        public DXCell UISamletarbeidstiddettCell
        {
            get
            {
                if ((this.mUISamletarbeidstiddettCell == null))
                {
                    this.mUISamletarbeidstiddettCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISamletarbeidstiddettCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lDescription";
                    this.mUISamletarbeidstiddettCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISamletarbeidstiddettCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISamletarbeidstiddettCell;
            }
        }
        
        public DXCell UIDenneDvaktenskaperhvCell
        {
            get
            {
                if ((this.mUIDenneDvaktenskaperhvCell == null))
                {
                    this.mUIDenneDvaktenskaperhvCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneDvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]3[Column]co" +
                        "lDescription";
                    this.mUIDenneDvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneDvaktenskaperhvCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneDvaktenskaperhvCell;
            }
        }
        
        public DXCell UIDenneDvaktenskaperhvCell1
        {
            get
            {
                if ((this.mUIDenneDvaktenskaperhvCell1 == null))
                {
                    this.mUIDenneDvaktenskaperhvCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneDvaktenskaperhvCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]4[Column]co" +
                        "lDescription";
                    this.mUIDenneDvaktenskaperhvCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneDvaktenskaperhvCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneDvaktenskaperhvCell1;
            }
        }
        
        public DXCell UITotalarbeidstidfordeCell
        {
            get
            {
                if ((this.mUITotalarbeidstidfordeCell == null))
                {
                    this.mUITotalarbeidstidfordeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUITotalarbeidstidfordeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]5[Column]co" +
                        "lDescription";
                    this.mUITotalarbeidstidfordeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUITotalarbeidstidfordeCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUITotalarbeidstidfordeCell;
            }
        }
        
        public DXCell UIDenneNvaktenskaperhvCell
        {
            get
            {
                if ((this.mUIDenneNvaktenskaperhvCell == null))
                {
                    this.mUIDenneNvaktenskaperhvCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneNvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]6[Column]co" +
                        "lDescription";
                    this.mUIDenneNvaktenskaperhvCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneNvaktenskaperhvCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneNvaktenskaperhvCell;
            }
        }
        
        public DXCell UIDennevaktenavgir1timCell
        {
            get
            {
                if ((this.mUIDennevaktenavgir1timCell == null))
                {
                    this.mUIDennevaktenavgir1timCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDennevaktenavgir1timCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]7[Column]co" +
                        "lDescription";
                    this.mUIDennevaktenavgir1timCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDennevaktenavgir1timCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDennevaktenavgir1timCell;
            }
        }
        
        public DXCell UIKravtilF1vaktiukeintCell1
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell1 == null))
                {
                    this.mUIKravtilF1vaktiukeintCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]8[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell1;
            }
        }
        
        public DXCell UIFormangetimerforukenCell
        {
            get
            {
                if ((this.mUIFormangetimerforukenCell == null))
                {
                    this.mUIFormangetimerforukenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangetimerforukenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]9[Column]co" +
                        "lDescription";
                    this.mUIFormangetimerforukenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangetimerforukenCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangetimerforukenCell;
            }
        }
        
        public DXCell UIFormangejobbelørdageCell
        {
            get
            {
                if ((this.mUIFormangejobbelørdageCell == null))
                {
                    this.mUIFormangejobbelørdageCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangejobbelørdageCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]10[Column]c" +
                        "olDescription";
                    this.mUIFormangejobbelørdageCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangejobbelørdageCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangejobbelørdageCell;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell == null))
                {
                    this.mUIFormangevakterpåradmCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]11[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell1
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell1 == null))
                {
                    this.mUIFormangevakterpåradmCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]12[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell1;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell2
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell2 == null))
                {
                    this.mUIFormangevakterpåradmCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]13[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell2;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell3
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell3 == null))
                {
                    this.mUIFormangevakterpåradmCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]14[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell3;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell4
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell4 == null))
                {
                    this.mUIFormangevakterpåradmCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]15[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell4;
            }
        }
        
        public DXCell UIFormangevakterpåradmCell5
        {
            get
            {
                if ((this.mUIFormangevakterpåradmCell5 == null))
                {
                    this.mUIFormangevakterpåradmCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangevakterpåradmCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]16[Column]c" +
                        "olDescription";
                    this.mUIFormangevakterpåradmCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangevakterpåradmCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangevakterpåradmCell5;
            }
        }
        
        public DXCell UIFormangejobbelørdageCell1
        {
            get
            {
                if ((this.mUIFormangejobbelørdageCell1 == null))
                {
                    this.mUIFormangejobbelørdageCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFormangejobbelørdageCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]17[Column]c" +
                        "olDescription";
                    this.mUIFormangejobbelørdageCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFormangejobbelørdageCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFormangejobbelørdageCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIDenneA1vaktenskaperhCell;
        
        private DXCell mUIKravtilF1vaktiukeintCell;
        
        private DXCell mUISamletarbeidstiddettCell;
        
        private DXCell mUIDenneDvaktenskaperhvCell;
        
        private DXCell mUIDenneDvaktenskaperhvCell1;
        
        private DXCell mUITotalarbeidstidfordeCell;
        
        private DXCell mUIDenneNvaktenskaperhvCell;
        
        private DXCell mUIDennevaktenavgir1timCell;
        
        private DXCell mUIKravtilF1vaktiukeintCell1;
        
        private DXCell mUIFormangetimerforukenCell;
        
        private DXCell mUIFormangejobbelørdageCell;
        
        private DXCell mUIFormangevakterpåradmCell;
        
        private DXCell mUIFormangevakterpåradmCell1;
        
        private DXCell mUIFormangevakterpåradmCell2;
        
        private DXCell mUIFormangevakterpåradmCell3;
        
        private DXCell mUIFormangevakterpåradmCell4;
        
        private DXCell mUIFormangevakterpåradmCell5;
        
        private DXCell mUIFormangejobbelørdageCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient21 : DXTestControl
    {
        
        public UIViewTabPageClient21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            #endregion
        }
        
        #region Properties
        public UIValidationViewCustom5 UIValidationViewCustom
        {
            get
            {
                if ((this.mUIValidationViewCustom == null))
                {
                    this.mUIValidationViewCustom = new UIValidationViewCustom5(this);
                }
                return this.mUIValidationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationViewCustom5 mUIValidationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIValidationViewCustom5 : DXTestControl
    {
        
        public UIValidationViewCustom5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ValidationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ValidationView";
            #endregion
        }
        
        #region Properties
        public UIGridValidationMessagTable6 UIGridValidationMessagTable
        {
            get
            {
                if ((this.mUIGridValidationMessagTable == null))
                {
                    this.mUIGridValidationMessagTable = new UIGridValidationMessagTable6(this);
                }
                return this.mUIGridValidationMessagTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridValidationMessagTable6 mUIGridValidationMessagTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridValidationMessagTable6 : DXGrid
    {
        
        public UIGridValidationMessagTable6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            #endregion
        }
        
        #region Properties
        public DXCell UIDenneGV1vaktenskaperCell
        {
            get
            {
                if ((this.mUIDenneGV1vaktenskaperCell == null))
                {
                    this.mUIDenneGV1vaktenskaperCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneGV1vaktenskaperCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lDescription";
                    this.mUIDenneGV1vaktenskaperCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneGV1vaktenskaperCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneGV1vaktenskaperCell;
            }
        }
        
        public DXCell UIDenneKK2vaktenskaperCell
        {
            get
            {
                if ((this.mUIDenneKK2vaktenskaperCell == null))
                {
                    this.mUIDenneKK2vaktenskaperCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDenneKK2vaktenskaperCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lDescription";
                    this.mUIDenneKK2vaktenskaperCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDenneKK2vaktenskaperCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDenneKK2vaktenskaperCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIDenneGV1vaktenskaperCell;
        
        private DXCell mUIDenneKK2vaktenskaperCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient31 : DXTestControl
    {
        
        public UIViewTabPageClient31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIValidationViewCustom6 UIValidationViewCustom
        {
            get
            {
                if ((this.mUIValidationViewCustom == null))
                {
                    this.mUIValidationViewCustom = new UIValidationViewCustom6(this);
                }
                return this.mUIValidationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationViewCustom6 mUIValidationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIValidationViewCustom6 : DXTestControl
    {
        
        public UIValidationViewCustom6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ValidationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ValidationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGridValidationMessagTable7 UIGridValidationMessagTable
        {
            get
            {
                if ((this.mUIGridValidationMessagTable == null))
                {
                    this.mUIGridValidationMessagTable = new UIGridValidationMessagTable7(this);
                }
                return this.mUIGridValidationMessagTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridValidationMessagTable7 mUIGridValidationMessagTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridValidationMessagTable7 : DXGrid
    {
        
        public UIGridValidationMessagTable7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnsattEnCell
        {
            get
            {
                if ((this.mUIAnsattEnCell == null))
                {
                    this.mUIAnsattEnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lFullname";
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattEnCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattEnCell;
            }
        }
        
        public DXCell UIFeilCell
        {
            get
            {
                if ((this.mUIFeilCell == null))
                {
                    this.mUIFeilCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFeilCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lMessageType";
                    this.mUIFeilCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFeilCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFeilCell;
            }
        }
        
        public DXCell UIBeregnetstillingsproCell
        {
            get
            {
                if ((this.mUIBeregnetstillingsproCell == null))
                {
                    this.mUIBeregnetstillingsproCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBeregnetstillingsproCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lDescription";
                    this.mUIBeregnetstillingsproCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBeregnetstillingsproCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBeregnetstillingsproCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnsattEnCell;
        
        private DXCell mUIFeilCell;
        
        private DXCell mUIBeregnetstillingsproCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient4 : DXTestControl
    {
        
        public UIViewTabPageClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIValidationViewCustom7 UIValidationViewCustom
        {
            get
            {
                if ((this.mUIValidationViewCustom == null))
                {
                    this.mUIValidationViewCustom = new UIValidationViewCustom7(this);
                }
                return this.mUIValidationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationViewCustom7 mUIValidationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIValidationViewCustom7 : DXTestControl
    {
        
        public UIValidationViewCustom7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ValidationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ValidationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGridValidationMessagTable8 UIGridValidationMessagTable
        {
            get
            {
                if ((this.mUIGridValidationMessagTable == null))
                {
                    this.mUIGridValidationMessagTable = new UIGridValidationMessagTable8(this);
                }
                return this.mUIGridValidationMessagTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridValidationMessagTable8 mUIGridValidationMessagTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridValidationMessagTable8 : DXGrid
    {
        
        public UIGridValidationMessagTable8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIKravtilF1vaktiukeintCell
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell == null))
                {
                    this.mUIKravtilF1vaktiukeintCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell;
            }
        }
        
        public DXCell UIKravtilF1vaktiukeintCell1
        {
            get
            {
                if ((this.mUIKravtilF1vaktiukeintCell1 == null))
                {
                    this.mUIKravtilF1vaktiukeintCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIKravtilF1vaktiukeintCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lDescription";
                    this.mUIKravtilF1vaktiukeintCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKravtilF1vaktiukeintCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIKravtilF1vaktiukeintCell1;
            }
        }
        
        public DXCell UIUkehvileF1erforkortpCell
        {
            get
            {
                if ((this.mUIUkehvileF1erforkortpCell == null))
                {
                    this.mUIUkehvileF1erforkortpCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIUkehvileF1erforkortpCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lDescription";
                    this.mUIUkehvileF1erforkortpCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIUkehvileF1erforkortpCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIUkehvileF1erforkortpCell;
            }
        }
        
        public DXCell UIMandagCell
        {
            get
            {
                if ((this.mUIMandagCell == null))
                {
                    this.mUIMandagCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMandagCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]0[Column]co" +
                        "lWeekDay";
                    this.mUIMandagCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMandagCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIMandagCell;
            }
        }
        
        public DXCell UIMandagCell1
        {
            get
            {
                if ((this.mUIMandagCell1 == null))
                {
                    this.mUIMandagCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIMandagCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]1[Column]co" +
                        "lWeekDay";
                    this.mUIMandagCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMandagCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIMandagCell1;
            }
        }
        
        public DXCell UISøndagCell
        {
            get
            {
                if ((this.mUISøndagCell == null))
                {
                    this.mUISøndagCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISøndagCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessagesGridControlCell[View]viewValidationMessages[Row]2[Column]co" +
                        "lWeekDay";
                    this.mUISøndagCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISøndagCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISøndagCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIKravtilF1vaktiukeintCell;
        
        private DXCell mUIKravtilF1vaktiukeintCell1;
        
        private DXCell mUIUkehvileF1erforkortpCell;
        
        private DXCell mUIMandagCell;
        
        private DXCell mUIMandagCell1;
        
        private DXCell mUISøndagCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT4003InformasjonWindow : DXWindow
    {
        
        public UIGT4003InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4003 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4003 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4003 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIEndreansattinnstilliMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIEndreansattinnstilliMenuBaseButtonItem == null))
                {
                    this.mUIEndreansattinnstilliMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIEndreansattinnstilliMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIEndreansattinnstilliMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIEndreansattinnstilliMenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIEndreansattinnstilliMenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsattinnstillingerfWindow : DXWindow
    {
        
        public UIAnsattinnstillingerfWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansattinnstillinger for ansattlinje 3";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 3");
            #endregion
        }
        
        #region Properties
        public UIPaMainContentClient UIPaMainContentClient
        {
            get
            {
                if ((this.mUIPaMainContentClient == null))
                {
                    this.mUIPaMainContentClient = new UIPaMainContentClient(this);
                }
                return this.mUIPaMainContentClient;
            }
        }
        
        public UIPaMainContentClient1 UIPaMainContentClient1
        {
            get
            {
                if ((this.mUIPaMainContentClient1 == null))
                {
                    this.mUIPaMainContentClient1 = new UIPaMainContentClient1(this);
                }
                return this.mUIPaMainContentClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIPaMainContentClient mUIPaMainContentClient;
        
        private UIPaMainContentClient1 mUIPaMainContentClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaMainContentClient : DXTestControl
    {
        
        public UIPaMainContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paMainContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 3");
            #endregion
        }
        
        #region Properties
        public UIGsTabControl1TabList UIGsTabControl1TabList
        {
            get
            {
                if ((this.mUIGsTabControl1TabList == null))
                {
                    this.mUIGsTabControl1TabList = new UIGsTabControl1TabList(this);
                }
                return this.mUIGsTabControl1TabList;
            }
        }
        #endregion
        
        #region Fields
        private UIGsTabControl1TabList mUIGsTabControl1TabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsTabControl1TabList : DXTestControl
    {
        
        public UIGsTabControl1TabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsTabControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 3");
            #endregion
        }
        
        #region Properties
        public DXTestControl UIXtraTabControlHeaderTabPage
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage == null))
                {
                    this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "gsTabControl1PageHeader2";
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("Ansattinnstillinger for ansattlinje 3");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaMainContentClient1 : DXTestControl
    {
        
        public UIPaMainContentClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paMainContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 3");
            #endregion
        }
        
        #region Properties
        public UIGsTabControl1TabList1 UIGsTabControl1TabList
        {
            get
            {
                if ((this.mUIGsTabControl1TabList == null))
                {
                    this.mUIGsTabControl1TabList = new UIGsTabControl1TabList1(this);
                }
                return this.mUIGsTabControl1TabList;
            }
        }
        #endregion
        
        #region Fields
        private UIGsTabControl1TabList1 mUIGsTabControl1TabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsTabControl1TabList1 : DXTestControl
    {
        
        public UIGsTabControl1TabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsTabControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Ansattinnstillinger for ansattlinje 3");
            #endregion
        }
        
        #region Properties
        public DXTestControl UIXtraTabControlHeaderTabPage
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage == null))
                {
                    this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "gsTabControl1PageHeader2";
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("Ansattinnstillinger for ansattlinje 3");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGlobaltarbeidsplanopWindow : WinWindow
    {
        
        public UIGlobaltarbeidsplanopWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Globalt arbeidsplanoppsett";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UINbcRosterSetupNavBar2 UINbcRosterSetupNavBar
        {
            get
            {
                if ((this.mUINbcRosterSetupNavBar == null))
                {
                    this.mUINbcRosterSetupNavBar = new UINbcRosterSetupNavBar2(this);
                }
                return this.mUINbcRosterSetupNavBar;
            }
        }
        #endregion
        
        #region Fields
        private UINbcRosterSetupNavBar2 mUINbcRosterSetupNavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINbcRosterSetupNavBar2 : DXNavBar
    {
        
        public UINbcRosterSetupNavBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UINavBarGroupControlCoScrollableControl1 UINavBarGroupControlCoScrollableControl
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl = new UINavBarGroupControlCoScrollableControl1(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UINavBarGroupControlCoScrollableControl1 mUINavBarGroupControlCoScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl1 : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient1 UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient1(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient1 mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEditClient1 : DXTestControl
    {
        
        public UIPnlEditClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UILbLockWindow UILbLockWindow
        {
            get
            {
                if ((this.mUILbLockWindow == null))
                {
                    this.mUILbLockWindow = new UILbLockWindow(this);
                }
                return this.mUILbLockWindow;
            }
        }
        #endregion
        
        #region Fields
        private UILbLockWindow mUILbLockWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILbLockWindow : WinWindow
    {
        
        public UILbLockWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lbLock";
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public WinClient UILbLockClient
        {
            get
            {
                if ((this.mUILbLockClient == null))
                {
                    this.mUILbLockClient = new WinClient(this);
                    #region Search Criteria
                    this.mUILbLockClient.WindowTitles.Add("Globalt arbeidsplanoppsett");
                    #endregion
                }
                return this.mUILbLockClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUILbLockClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu1 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu1(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu1 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu1 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIEndreansattinnstilliMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIEndreansattinnstilliMenuBaseButtonItem == null))
                {
                    this.mUIEndreansattinnstilliMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIEndreansattinnstilliMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIEndreansattinnstilliMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIEndreansattinnstilliMenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIEndreansattinnstilliMenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu2 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu2(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu2 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu2 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink0MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink0MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink0MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink0MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIBarButtonItemLink0MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink0MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink0MenuBaseButtonItem;
        #endregion
    }
}
