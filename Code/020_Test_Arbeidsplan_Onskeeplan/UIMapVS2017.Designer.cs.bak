// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _020_Test_Arbeidsplan_Onskeeplan.UIMapVS2017Classes
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMapVS2017
    {
        
        /// <summary>
        /// CheckPlanIsOpened - Use 'CheckPlanIsOpenedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlanIsOpened()
        {
            #region Variable Declarations
            DXCell uIAnsattEnCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnsattEnCell;
            DXCell uIAnsattSeksCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnsattSeksCell;
            DXCell uIAnsattÅtteCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnsattÅtteCell;
            #endregion

            // Verify that the 'Text' property of 'Ansatt, En' cell equals 'Ansatt, En'
            Assert.AreEqual(this.CheckPlanIsOpenedExpectedValues.UIAnsattEnCellText, uIAnsattEnCell.Text);

            // Verify that the 'Text' property of 'Ansatt, Seks' cell equals 'Ansatt, Seks'
            Assert.AreEqual(this.CheckPlanIsOpenedExpectedValues.UIAnsattSeksCellText, uIAnsattSeksCell.Text);

            // Verify that the 'Text' property of 'Ansatt, Åtte' cell equals 'Ansatt, Åtte'
            Assert.AreEqual(this.CheckPlanIsOpenedExpectedValues.UIAnsattÅtteCellText, uIAnsattÅtteCell.Text);
        }
        
        /// <summary>
        /// SetAprovalsStep9 - Use 'SetAprovalsStep9Params' to pass parameters into this method.
        /// </summary>
        public void SetAprovalsStep9()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell;
            DXComboBox uIRow0ColumnreqColTillComboBox = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow0ColumnreqColTillComboBox;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell, new Point(42, 9));

            // Select 'System.Int32' in '[Row]0[Column]reqColTillitsvalgt' combo box
            //ValueTypeName
            uIRow0ColumnreqColTillComboBox.ValueTypeName = this.SetAprovalsStep9Params.UIRow0ColumnreqColTillComboBoxValueTypeName;

            // Select '2' in '[Row]0[Column]reqColTillitsvalgt' combo box
            //ValueAsString
            uIRow0ColumnreqColTillComboBox.ValueAsString = this.SetAprovalsStep9Params.UIRow0ColumnreqColTillComboBoxValueAsString;
        }
        
        /// <summary>
        /// SetAprovalsStep9_1
        /// </summary>
        public void SetAprovalsStep9_1()
        {
            #region Variable Declarations
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItemCell1;
            DXListBoxItem uIGodkjennListItem = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRow0ColumnreqColLedeComboBox.UIPopupImageComboBoxEdWindow.UIPopupImageComboBoxEdList.UIGodkjennListItem;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell1, new Point(42, 7));

            // Click 'Godkjenn' list item
            Mouse.Click(uIGodkjennListItem, new Point(45, 9));
        }
        
        /// <summary>
        /// SelectAprovalsStep10 - Use 'SelectAprovalsStep10Params' to pass parameters into this method.
        /// </summary>
        public void SelectAprovalsStep10()
        {
            #region Variable Declarations
            DXCell uIAnsattToCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIAnsattToCell;
            DXTestControl uILcMainCustom = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UIApprovalViewCustom.UILcMainCustom;
            #endregion

            // Click 'Ansatt, To' cell
            Mouse.Click(uIAnsattToCell, new Point(38, 7));

            // Type 'Shift + {Down}' in 'lcMain' custom control
            Keyboard.SendKeys(uILcMainCustom, this.SelectAprovalsStep10Params.UILcMainCustomSendKeys, ModifierKeys.Shift);
        }
        
        #region Properties
        public virtual CheckPlanIsOpenedExpectedValues CheckPlanIsOpenedExpectedValues
        {
            get
            {
                if ((this.mCheckPlanIsOpenedExpectedValues == null))
                {
                    this.mCheckPlanIsOpenedExpectedValues = new CheckPlanIsOpenedExpectedValues();
                }
                return this.mCheckPlanIsOpenedExpectedValues;
            }
        }
        
        public virtual SetAprovalsStep9Params SetAprovalsStep9Params
        {
            get
            {
                if ((this.mSetAprovalsStep9Params == null))
                {
                    this.mSetAprovalsStep9Params = new SetAprovalsStep9Params();
                }
                return this.mSetAprovalsStep9Params;
            }
        }
        
        public virtual SelectAprovalsStep10Params SelectAprovalsStep10Params
        {
            get
            {
                if ((this.mSelectAprovalsStep10Params == null))
                {
                    this.mSelectAprovalsStep10Params = new SelectAprovalsStep10Params();
                }
                return this.mSelectAprovalsStep10Params;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UISkrivenkommentartilaWindow UISkrivenkommentartilaWindow
        {
            get
            {
                if ((this.mUISkrivenkommentartilaWindow == null))
                {
                    this.mUISkrivenkommentartilaWindow = new UISkrivenkommentartilaWindow();
                }
                return this.mUISkrivenkommentartilaWindow;
            }
        }
        #endregion
        
        #region Fields
        private CheckPlanIsOpenedExpectedValues mCheckPlanIsOpenedExpectedValues;
        
        private SetAprovalsStep9Params mSetAprovalsStep9Params;
        
        private SelectAprovalsStep10Params mSelectAprovalsStep10Params;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UISkrivenkommentartilaWindow mUISkrivenkommentartilaWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlanIsOpened'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckPlanIsOpenedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ansatt, En' cell equals 'Ansatt, En'
        /// </summary>
        public string UIAnsattEnCellText = "Ansatt, En";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ansatt, Seks' cell equals 'Ansatt, Seks'
        /// </summary>
        public string UIAnsattSeksCellText = "Ansatt, Seks";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ansatt, Åtte' cell equals 'Ansatt, Åtte'
        /// </summary>
        public string UIAnsattÅtteCellText = "Ansatt, Åtte";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetAprovalsStep9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetAprovalsStep9Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'System.Int32' in '[Row]0[Column]reqColTillitsvalgt' combo box
        /// </summary>
        public string UIRow0ColumnreqColTillComboBoxValueTypeName = "System.Int32";
        
        /// <summary>
        /// Select '2' in '[Row]0[Column]reqColTillitsvalgt' combo box
        /// </summary>
        public string UIRow0ColumnreqColTillComboBoxValueAsString = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectAprovalsStep10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectAprovalsStep10Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Down}' in 'lcMain' custom control
        /// </summary>
        public string UILcMainCustomSendKeys = "{Down}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIDpnlVisualizationDockPanel UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        
        private UIDpnlVisualizationDockPanel mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnsattEnCell
        {
            get
            {
                if ((this.mUIAnsattEnCell == null))
                {
                    this.mUIAnsattEnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle1";
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattEnCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattEnCell;
            }
        }
        
        public DXCell UIAnsattSeksCell
        {
            get
            {
                if ((this.mUIAnsattSeksCell == null))
                {
                    this.mUIAnsattSeksCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]ColumnHandle1";
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattSeksCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattSeksCell;
            }
        }
        
        public DXCell UIAnsattÅtteCell
        {
            get
            {
                if ((this.mUIAnsattÅtteCell == null))
                {
                    this.mUIAnsattÅtteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattÅtteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]ColumnHandle1";
                    this.mUIAnsattÅtteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattÅtteCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattÅtteCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnsattEnCell;
        
        private DXCell mUIAnsattSeksCell;
        
        private DXCell mUIAnsattÅtteCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlVisualizationDockPanel : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel3_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        
        public UITcSubtabsTabList UITcSubtabsTabList
        {
            get
            {
                if ((this.mUITcSubtabsTabList == null))
                {
                    this.mUITcSubtabsTabList = new UITcSubtabsTabList(this);
                }
                return this.mUITcSubtabsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList mUITcVisualizationTabList;
        
        private UITcSubtabsTabList mUITcSubtabsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcVisualizationTabList : DXTestControl
    {
        
        public UITcVisualizationTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITpShiftDetailsClient UITpShiftDetailsClient
        {
            get
            {
                if ((this.mUITpShiftDetailsClient == null))
                {
                    this.mUITpShiftDetailsClient = new UITpShiftDetailsClient(this);
                }
                return this.mUITpShiftDetailsClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpShiftDetailsClient mUITpShiftDetailsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpShiftDetailsClient : DXTestControl
    {
        
        public UITpShiftDetailsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpShiftDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcShiftDetailsTable UIGcShiftDetailsTable
        {
            get
            {
                if ((this.mUIGcShiftDetailsTable == null))
                {
                    this.mUIGcShiftDetailsTable = new UIGcShiftDetailsTable(this);
                }
                return this.mUIGcShiftDetailsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcShiftDetailsTable mUIGcShiftDetailsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcShiftDetailsTable : DXGrid
    {
        
        public UIGcShiftDetailsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem0201202422300301Cell
        {
            get
            {
                if ((this.mUIItem0201202422300301Cell == null))
                {
                    this.mUIItem0201202422300301Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0201202422300301Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]1[Column]gridColumnValue";
                    this.mUIItem0201202422300301Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0201202422300301Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0201202422300301Cell;
            }
        }
        
        public DXCell UIN2Cell
        {
            get
            {
                if ((this.mUIN2Cell == null))
                {
                    this.mUIN2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]1[Column]gridColumnKey";
                    this.mUIN2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell;
            }
        }
        
        public DXCell UIVaktenerutvidetislutCell
        {
            get
            {
                if ((this.mUIVaktenerutvidetislutCell == null))
                {
                    this.mUIVaktenerutvidetislutCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVaktenerutvidetislutCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftDetailsGridControlCell[View]gvShiftDetails[Row]2[Column]gridColumnValue";
                    this.mUIVaktenerutvidetislutCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVaktenerutvidetislutCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIVaktenerutvidetislutCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem0201202422300301Cell;
        
        private DXCell mUIN2Cell;
        
        private DXCell mUIVaktenerutvidetislutCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcSubtabsTabList : DXTestControl
    {
        
        public UITcSubtabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabs";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabControlViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewTabPageClient UIViewTabPageClient
        {
            get
            {
                if ((this.mUIViewTabPageClient == null))
                {
                    this.mUIViewTabPageClient = new UIViewTabPageClient(this);
                }
                return this.mUIViewTabPageClient;
            }
        }
        #endregion
        
        #region Fields
        private UIViewTabPageClient mUIViewTabPageClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient : DXTestControl
    {
        
        public UIViewTabPageClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[8]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIApprovalViewCustom UIApprovalViewCustom
        {
            get
            {
                if ((this.mUIApprovalViewCustom == null))
                {
                    this.mUIApprovalViewCustom = new UIApprovalViewCustom(this);
                }
                return this.mUIApprovalViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIApprovalViewCustom mUIApprovalViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIApprovalViewCustom : DXTestControl
    {
        
        public UIApprovalViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ApprovalView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ApprovalView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcMainCustom UILcMainCustom
        {
            get
            {
                if ((this.mUILcMainCustom == null))
                {
                    this.mUILcMainCustom = new UILcMainCustom(this);
                }
                return this.mUILcMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainCustom mUILcMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainCustom : DXTestControl
    {
        
        public UILcMainCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroup1LayoutGroup UILayoutControlGroup1LayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroup1LayoutGroup == null))
                {
                    this.mUILayoutControlGroup1LayoutGroup = new UILayoutControlGroup1LayoutGroup(this);
                }
                return this.mUILayoutControlGroup1LayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroup1LayoutGroup mUILayoutControlGroup1LayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlGroup1LayoutGroup : DXBaseLayoutItem
    {
        
        public UILayoutControlGroup1LayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroup1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlItem2LayoutControlItem UILayoutControlItem2LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem2LayoutControlItem == null))
                {
                    this.mUILayoutControlItem2LayoutControlItem = new UILayoutControlItem2LayoutControlItem(this);
                }
                return this.mUILayoutControlItem2LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlItem2LayoutControlItem mUILayoutControlItem2LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlItem2LayoutControlItem : DXBaseLayoutItem
    {
        
        public UILayoutControlItem2LayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcApprovalTable UIGcApprovalTable
        {
            get
            {
                if ((this.mUIGcApprovalTable == null))
                {
                    this.mUIGcApprovalTable = new UIGcApprovalTable(this);
                }
                return this.mUIGcApprovalTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcApprovalTable mUIGcApprovalTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcApprovalTable : DXGrid
    {
        
        public UIGcApprovalTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColTillitsvalgt";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXComboBox UIRow0ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow0ColumnreqColTillComboBox == null))
                {
                    this.mUIRow0ColumnreqColTillComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUIRow0ColumnreqColTillComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgt";
                    this.mUIRow0ColumnreqColTillComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
                    this.mUIRow0ColumnreqColTillComboBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnreqColTillComboBox;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColLeder";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public UIRow0ColumnreqColLedeComboBox UIRow0ColumnreqColLedeComboBox
        {
            get
            {
                if ((this.mUIRow0ColumnreqColLedeComboBox == null))
                {
                    this.mUIRow0ColumnreqColLedeComboBox = new UIRow0ColumnreqColLedeComboBox(this);
                }
                return this.mUIRow0ColumnreqColLedeComboBox;
            }
        }
        
        public DXCell UIAnsattToCell
        {
            get
            {
                if ((this.mUIAnsattToCell == null))
                {
                    this.mUIAnsattToCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattToCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]colName";
                    this.mUIAnsattToCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattToCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattToCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXComboBox mUIRow0ColumnreqColTillComboBox;
        
        private DXCell mUIItemCell1;
        
        private UIRow0ColumnreqColLedeComboBox mUIRow0ColumnreqColLedeComboBox;
        
        private DXCell mUIAnsattToCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow0ColumnreqColLedeComboBox : DXComboBox
    {
        
        public UIRow0ColumnreqColLedeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLeder";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdWindow : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLederPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupImageComboBoxEdList : DXListBox
    {
        
        public UIPopupImageComboBoxEdList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLederPopupFormPopu" +
                "pImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLederPopupFormPopu" +
                        "pImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISkrivenkommentartilaWindow : DXWindow
    {
        
        public UISkrivenkommentartilaWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Skriv en kommentar til avvisningen...";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Skriv en kommentar til avvisningen...");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIMeCommentEdit
        {
            get
            {
                if ((this.mUIMeCommentEdit == null))
                {
                    this.mUIMeCommentEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIMeCommentEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "meComment";
                    this.mUIMeCommentEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSMemoEdit";
                    this.mUIMeCommentEdit.WindowTitles.Add("Skriv en kommentar til avvisningen...");
                    #endregion
                }
                return this.mUIMeCommentEdit;
            }
        }
        
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "_btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Skriv en kommentar til avvisningen...");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIMeCommentEdit;
        
        private DXButton mUIOKButton;
        #endregion
    }
}
