// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _020_Test_Arbeidsplan_Onskeeplan
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v19_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddBaseplanData - Use 'AddBaseplanDataParams' to pass parameters into this method.
        /// </summary>
        public void AddBaseplanData()
        {
            #region Variable Declarations
            DXTextEdit uIENameEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIENameEdit;
            DXLookUpEdit uILeRosterplanTypeLookUpEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UILeRosterplanTypeLookUpEdit;
            #endregion

            // Type 'Baseplan' in 'eName' text box
            //ValueAsString
            uIENameEdit.ValueAsString = this.AddBaseplanDataParams.UIENameEditValueAsString;

            // Type '{Tab}' in 'eName' text box
            Keyboard.SendKeys(uIENameEdit, this.AddBaseplanDataParams.UIENameEditSendKeys, ModifierKeys.None);

            // Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.Configuration.RosterplanConfigurationController+RosterplanTypeDefinition' in 'leRosterplanType' LookUpEdit
            //ValueTypeName
            uILeRosterplanTypeLookUpEdit.ValueTypeName = this.AddBaseplanDataParams.UILeRosterplanTypeLookUpEditValueTypeName;

            // Type 'Baseplan' in 'leRosterplanType' LookUpEdit
            //ValueAsString
            uILeRosterplanTypeLookUpEdit.ValueAsString = this.AddBaseplanDataParams.UILeRosterplanTypeLookUpEditValueAsString;

            // Type '{Tab}' in 'leRosterplanType' LookUpEdit
            Keyboard.SendKeys(uILeRosterplanTypeLookUpEdit, this.AddBaseplanDataParams.UILeRosterplanTypeLookUpEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddCalendarplanData - Use 'AddCalendarplanDataParams' to pass parameters into this method.
        /// </summary>
        public void AddCalendarplanData()
        {
            #region Variable Declarations
            DXTextEdit uIENameEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIENameEdit;
            DXLookUpEdit uILeRosterplanTypeLookUpEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UILeRosterplanTypeLookUpEdit;
            DXTextEdit uIENumber1Edit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIENumber1Edit;
            #endregion

            // Type '1 år gammel' in 'eName' text box
            //ValueAsString
            uIENameEdit.ValueAsString = this.AddCalendarplanDataParams.UIENameEditValueAsString;

            // Type '{Tab}' in 'eName' text box
            Keyboard.SendKeys(uIENameEdit, this.AddCalendarplanDataParams.UIENameEditSendKeys, ModifierKeys.None);

            // Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.Configuration.RosterplanConfigurationController+RosterplanTypeDefinition' in 'leRosterplanType' LookUpEdit
            //ValueTypeName
            uILeRosterplanTypeLookUpEdit.ValueTypeName = this.AddCalendarplanDataParams.UILeRosterplanTypeLookUpEditValueTypeName;

            // Type 'Kalenderplan' in 'leRosterplanType' LookUpEdit
            //ValueAsString
            uILeRosterplanTypeLookUpEdit.ValueAsString = this.AddCalendarplanDataParams.UILeRosterplanTypeLookUpEditValueAsString;

            // Type '{Tab}' in 'leRosterplanType' LookUpEdit
            Keyboard.SendKeys(uILeRosterplanTypeLookUpEdit, this.AddCalendarplanDataParams.UILeRosterplanTypeLookUpEditSendKeys, ModifierKeys.None);

            // Type '12 [SelectionStart]0[SelectionLength]2' in 'eNumber[1]' text box
            //ValueAsString
            uIENumber1Edit.ValueAsString = this.AddCalendarplanDataParams.UIENumber1EditValueAsString;
        }
        
        /// <summary>
        /// AddEmployeesFiveAndSevenToPlan
        /// </summary>
        public void AddEmployeesFiveAndSevenToPlan()
        {
            #region Variable Declarations
            DXButton uIAnsatteButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIAnsatteButton;
            DXCell uIAnsattFemCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattFemCell;
            DXCell uIAnsattSjuCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattSjuCell;
            DXButton uISimpleButtonButton = this.UILeggtilansatteWindow.UISimpleButtonButton;
            DXButton uISimpleButtonButton1 = this.UIAnsatteiarbeidsplanWindow.UISimpleButtonButton;
            #endregion

            // Click 'Ansatte...' button
            Mouse.Click(uIAnsatteButton, new Point(1, 1));

            // Click 'Ansatt, Fem' cell
            Mouse.Click(uIAnsattFemCell, new Point(72, 8));

            // Click 'Ansatt, Sju' cell while pressing Control
            Mouse.Click(uIAnsattSjuCell, MouseButtons.Left, ModifierKeys.Control, new Point(73, 9));

            // Click 'SimpleButton' button
            Mouse.Click(uISimpleButtonButton, new Point(1, 1));

            // Click 'SimpleButton' button
            Mouse.Click(uISimpleButtonButton1, new Point(1, 1));
        }
        
        /// <summary>
        /// AddEmployeesOneTwoAndFourToPlan
        /// </summary>
        public void AddEmployeesOneTwoAndFourToPlan()
        {
            #region Variable Declarations
            DXButton uIAnsatteButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIAnsatteButton;
            DXCell uIAnsattEnCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattEnCell;
            DXCell uIAnsattToCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattToCell;
            DXCell uIAnsattFireCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattFireCell;
            DXButton uISimpleButtonButton = this.UILeggtilansatteWindow.UISimpleButtonButton;
            DXButton uISimpleButtonButton1 = this.UIAnsatteiarbeidsplanWindow.UISimpleButtonButton;
            #endregion

            // Click 'Ansatte...' button
            Mouse.Click(uIAnsatteButton, new Point(1, 1));

            // Click 'Ansatt, En' cell
            Mouse.Click(uIAnsattEnCell, new Point(71, 7));

            // Click 'Ansatt, To' cell while pressing Control
            Mouse.Click(uIAnsattToCell, MouseButtons.Left, ModifierKeys.Control, new Point(62, 10));

            // Click 'Ansatt, Fire' cell while pressing Control
            Mouse.Click(uIAnsattFireCell, MouseButtons.Left, ModifierKeys.Control, new Point(70, 8));

            // Click 'SimpleButton' button
            Mouse.Click(uISimpleButtonButton, new Point(1, 1));

            // Click 'SimpleButton' button
            Mouse.Click(uISimpleButtonButton1, new Point(1, 1));
        }
        
        /// <summary>
        /// AddRosterplanData - Use 'AddRosterplanDataParams' to pass parameters into this method.
        /// </summary>
        public void AddRosterplanData()
        {
            #region Variable Declarations
            DXTextEdit uIENameEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIENameEdit;
            DXTextEdit uIENumber1Edit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIENumber1Edit;
            #endregion

            // Type 'Kladd' in 'eName' text box
            //ValueAsString
            uIENameEdit.ValueAsString = this.AddRosterplanDataParams.UIENameEditValueAsString;

            // Type '{Tab}' in 'eName' text box
            Keyboard.SendKeys(uIENameEdit, this.AddRosterplanDataParams.UIENameEditSendKeys, ModifierKeys.None);

            // Type '3 [SelectionStart]0[SelectionLength]1' in 'eNumber[1]' text box
            //ValueAsString
            uIENumber1Edit.ValueAsString = this.AddRosterplanDataParams.UIENumber1EditValueAsString;
        }
        
        /// <summary>
        /// AddShiftsToKladdKopi - Use 'AddShiftsToKladdKopiParams' to pass parameters into this method.
        /// </summary>
        public void AddShiftsToKladdKopi()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell11;
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            DXCell uIItemCell21 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell21;
            DXCell uIItemCell31 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell31;
            DXTextEdit uIRow0ColumnRosterCellEdit11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit11;
            DXCell uIItemCell41 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell41;
            DXCell uIItemCell52 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell52;
            DXTextEdit uIRow0ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit2;
            DXCell uIItemCell51 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell51;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXTextEdit uIRow1ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit1;
            DXCell uIItemCell71 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell71;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            DXTextEdit uIRow1ColumnRosterCellEdit11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit11;
            DXCell uIItemCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell9;
            DXCell uIItemCell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell10;
            DXTextEdit uIRow1ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit2;
            #endregion

            // Move cell to cell
            uIItemCell11.EnsureClickable(new Point(19, 7));
            Mouse.StartDragging(uIItemCell, new Point(27, 8));
            Mouse.StopDragging(uIItemCell11, new Point(19, 7));

            // Type 'd2{Enter}' in '[Row]0[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, this.AddShiftsToKladdKopiParams.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell31.EnsureClickable(new Point(12, 9));
            Mouse.StartDragging(uIItemCell21, new Point(30, 8));
            Mouse.StopDragging(uIItemCell31, new Point(12, 9));

            // Type 'd2{Enter}' in '[Row]0[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit11, this.AddShiftsToKladdKopiParams.UIRow0ColumnRosterCellEdit11SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell52.EnsureClickable(new Point(16, 5));
            Mouse.StartDragging(uIItemCell41, new Point(24, 7));
            Mouse.StopDragging(uIItemCell52, new Point(16, 5));

            // Type 'd2{Enter}' in '[Row]0[Column]RosterCell_14' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit2, this.AddShiftsToKladdKopiParams.UIRow0ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell5.EnsureClickable(new Point(16, 8));
            Mouse.StartDragging(uIItemCell51, new Point(28, 8));
            Mouse.StopDragging(uIItemCell5, new Point(16, 8));

            // Type 'a1{Enter}' in '[Row]1[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit1, this.AddShiftsToKladdKopiParams.UIRow1ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell8.EnsureClickable(new Point(14, 8));
            Mouse.StartDragging(uIItemCell71, new Point(22, 10));
            Mouse.StopDragging(uIItemCell8, new Point(14, 8));

            // Type 'a1{Enter}' in '[Row]1[Column]RosterCell_7' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit11, this.AddShiftsToKladdKopiParams.UIRow1ColumnRosterCellEdit11SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell10.EnsureClickable(new Point(17, 10));
            Mouse.StartDragging(uIItemCell9, new Point(17, 9));
            Mouse.StopDragging(uIItemCell10, new Point(17, 10));

            // Type 'a1{Enter}' in '[Row]1[Column]RosterCell_14' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit2, this.AddShiftsToKladdKopiParams.UIRow1ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// CheckBasePlanData - Use 'CheckBasePlanDataExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckBasePlanData()
        {
            #region Variable Declarations
            DXCell uIItem1årgammelCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem1årgammelCell;
            DXCell uIItem5110DiverseCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem5110DiverseCell;
            DXCell uIArbeidsplanCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIArbeidsplanCell;
            DXCell uIItem3Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem3Cell;
            DXCell uIItemCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItemCell;
            DXCell uIItem1Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem1Cell;
            DXCell uIItem200Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem200Cell;
            DXCell uIItemCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItemCell1;
            #endregion

            // Verify that the 'ValueAsString' property of '1 år gammel' cell equals 'Baseplan'
            Assert.AreEqual(this.CheckBasePlanDataExpectedValues.UIItem1årgammelCellValueAsString, uIItem1årgammelCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckBasePlanDataExpectedValues.UIItem5110DiverseCellValueAsString, uIItem5110DiverseCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Baseplan'
            Assert.AreEqual(this.CheckBasePlanDataExpectedValues.UIArbeidsplanCellValueAsString, uIArbeidsplanCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '3' cell equals '6'
            Assert.AreEqual(this.CheckBasePlanDataExpectedValues.UIItem3CellValueAsString, uIItem3Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckBasePlanDataExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1' cell equals '5'
            Assert.AreEqual(this.CheckBasePlanDataExpectedValues.UIItem1CellValueAsString, uIItem1Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2,00' cell equals '3.8'
            Assert.AreEqual(this.CheckBasePlanDataExpectedValues.UIItem200CellValueAsString, uIItem200Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckBasePlanDataExpectedValues.UIItemCell1ValueAsString, uIItemCell1.ValueAsString);
        }
        
        /// <summary>
        /// CheckDraftCopyPlanData - Use 'CheckDraftCopyPlanDataExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDraftCopyPlanData()
        {
            #region Variable Declarations
            DXCell uIKopiavKladdCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIKopiavKladdCell;
            DXCell uIItem5110DiverseCell2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem5110DiverseCell2;
            DXCell uIArbeidsplanCell2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIArbeidsplanCell2;
            DXCell uIItem3Cell2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem3Cell2;
            DXCell uIXCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIXCell;
            DXCell uIItem2Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem2Cell;
            DXCell uIItem130Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem130Cell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Kopi av Kladd.' cell equals 'Kopi av Kladd.'
            Assert.AreEqual(this.CheckDraftCopyPlanDataExpectedValues.UIKopiavKladdCellValueAsString, uIKopiavKladdCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckDraftCopyPlanDataExpectedValues.UIItem5110DiverseCell2ValueAsString, uIItem5110DiverseCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Arbeidsplan'
            Assert.AreEqual(this.CheckDraftCopyPlanDataExpectedValues.UIArbeidsplanCell2ValueAsString, uIArbeidsplanCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of '3' cell equals '3'
            Assert.AreEqual(this.CheckDraftCopyPlanDataExpectedValues.UIItem3Cell2ValueAsString, uIItem3Cell2.ValueAsString);

            // Verify that the 'ValueAsString' property of 'x' cell equals 'x'
            Assert.AreEqual(this.CheckDraftCopyPlanDataExpectedValues.UIXCellValueAsString, uIXCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2' cell equals '2'
            Assert.AreEqual(this.CheckDraftCopyPlanDataExpectedValues.UIItem2CellValueAsString, uIItem2Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1,30' cell equals '1.3'
            Assert.AreEqual(this.CheckDraftCopyPlanDataExpectedValues.UIItem130CellValueAsString, uIItem130Cell.ValueAsString);
        }
        
        /// <summary>
        /// CheckDraftPlanData - Use 'CheckDraftPlanDataExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDraftPlanData()
        {
            #region Variable Declarations
            DXCell uIItem1årgammelCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem1årgammelCell;
            DXCell uIItem5110DiverseCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem5110DiverseCell;
            DXCell uIArbeidsplanCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIArbeidsplanCell;
            DXCell uIItem3Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem3Cell;
            DXCell uIItemCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItemCell;
            DXCell uIItem1Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem1Cell;
            DXCell uIItem200Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem200Cell;
            #endregion

            // Verify that the 'ValueAsString' property of '1 år gammel' cell equals 'Kladd'
            Assert.AreEqual(this.CheckDraftPlanDataExpectedValues.UIItem1årgammelCellValueAsString, uIItem1årgammelCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckDraftPlanDataExpectedValues.UIItem5110DiverseCellValueAsString, uIItem5110DiverseCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Arbeidsplan'
            Assert.AreEqual(this.CheckDraftPlanDataExpectedValues.UIArbeidsplanCellValueAsString, uIArbeidsplanCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '3' cell equals '3'
            Assert.AreEqual(this.CheckDraftPlanDataExpectedValues.UIItem3CellValueAsString, uIItem3Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckDraftPlanDataExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1' cell equals '2'
            Assert.AreEqual(this.CheckDraftPlanDataExpectedValues.UIItem1CellValueAsString, uIItem1Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2,00' cell equals '1.3'
            Assert.AreEqual(this.CheckDraftPlanDataExpectedValues.UIItem200CellValueAsString, uIItem200Cell.ValueAsString);
        }
        
        /// <summary>
        /// CheckOneYearOldPlanData - Use 'CheckOneYearOldPlanDataExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOneYearOldPlanData()
        {
            #region Variable Declarations
            DXCell uIItem1årgammelCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem1årgammelCell;
            DXCell uIItem5110DiverseCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem5110DiverseCell;
            DXCell uIArbeidsplanCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIArbeidsplanCell;
            DXCell uIItem3Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem3Cell;
            DXCell uIItemCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItemCell;
            DXCell uIItem1Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem1Cell;
            DXCell uIItem200Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem200Cell;
            DXCell uIItemCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItemCell1;
            #endregion

            // Verify that the 'ValueAsString' property of '1 år gammel' cell equals '1 år gammel'
            Assert.AreEqual(this.CheckOneYearOldPlanDataExpectedValues.UIItem1årgammelCellValueAsString, uIItem1årgammelCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckOneYearOldPlanDataExpectedValues.UIItem5110DiverseCellValueAsString, uIItem5110DiverseCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Kalenderplan'
            Assert.AreEqual(this.CheckOneYearOldPlanDataExpectedValues.UIArbeidsplanCellValueAsString, uIArbeidsplanCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '3' cell equals '12'
            Assert.AreEqual(this.CheckOneYearOldPlanDataExpectedValues.UIItem3CellValueAsString, uIItem3Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckOneYearOldPlanDataExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1' cell equals '0'
            Assert.AreEqual(this.CheckOneYearOldPlanDataExpectedValues.UIItem1CellValueAsString, uIItem1Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2,00' cell equals ''
            Assert.AreEqual(this.CheckOneYearOldPlanDataExpectedValues.UIItem200CellValueAsString, uIItem200Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckOneYearOldPlanDataExpectedValues.UIItemCell1ValueAsString, uIItemCell1.ValueAsString);
        }
        
        /// <summary>
        /// CheckOnlyNewEnabled - Use 'CheckOnlyNewEnabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOnlyNewEnabled()
        {
            #region Variable Declarations
            DXRibbonButtonItem uINYRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIRibbonControlRibbon.UIRpHomeRibbonPage.UIRpgPlanRibbonPageGroup.UINYRibbonBaseButtonItem;
            DXRibbonButtonItem uIÅpneRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIRibbonControlRibbon.UIRpHomeRibbonPage.UIRpgPlanRibbonPageGroup.UIÅpneRibbonBaseButtonItem;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIRibbonControlRibbon.UIRpHomeRibbonPage.UIRpgPlanRibbonPageGroup.UISlettRibbonBaseButtonItem;
            DXRibbonButtonItem uIInnstillingerRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIRibbonControlRibbon.UIRpHomeRibbonPage.UIRpgPlanRibbonPageGroup.UIInnstillingerRibbonBaseButtonItem;
            #endregion

            // Verify that the 'Enabled' property of 'Ny' RibbonBaseButtonItem equals 'True'
            Assert.AreEqual(this.CheckOnlyNewEnabledExpectedValues.UINYRibbonBaseButtonItemEnabled, uINYRibbonBaseButtonItem.Enabled, "Nyknapp er ikke tilgjengelig");

            // Verify that the 'Enabled' property of 'Åpne' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckOnlyNewEnabledExpectedValues.UIÅpneRibbonBaseButtonItemEnabled, uIÅpneRibbonBaseButtonItem.Enabled, "Åpne er tilgjengelig");

            // Verify that the 'Enabled' property of 'Slett' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckOnlyNewEnabledExpectedValues.UISlettRibbonBaseButtonItemEnabled, uISlettRibbonBaseButtonItem.Enabled, "Slett er tilgjengelig");

            // Verify that the 'Enabled' property of 'Innstillinger' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckOnlyNewEnabledExpectedValues.UIInnstillingerRibbonBaseButtonItemEnabled, uIInnstillingerRibbonBaseButtonItem.Enabled, "Instillinger er tilgjengelig");
        }
        
        /// <summary>
        /// CheckPlanData_step_7 - Use 'CheckPlanData_step_7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlanData_step_7()
        {
            #region Variable Declarations
            DXCell uIItem1Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem1Cell;
            DXCell uIItem200Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem200Cell;
            DXCell uIItem1årgammelCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem1årgammelCell;
            #endregion

            // Verify that the 'ValueAsString' property of '1' cell equals '3'
            Assert.AreEqual(this.CheckPlanData_step_7ExpectedValues.UIItem1CellValueAsString, uIItem1Cell.ValueAsString, "Feil antall ansatte");

            // Verify that the 'ValueAsString' property of '2,00' cell equals '2.25'
            Assert.AreEqual(this.CheckPlanData_step_7ExpectedValues.UIItem200CellValueAsString, uIItem200Cell.ValueAsString, "Feil antall årsverk");

            // Verify that the 'ValueAsString' property of '1 år gammel' cell equals '1 år gammel'
            Assert.AreEqual(this.CheckPlanData_step_7ExpectedValues.UIItem1årgammelCellValueAsString, uIItem1årgammelCell.ValueAsString, "Feil plan");
        }
        
        /// <summary>
        /// CheckPlanEffectutated_Step_12 - Use 'CheckPlanEffectutated_Step_12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlanEffectutated_Step_12()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItemCell;
            #endregion

            // Verify that the 'ValueAsString' property of cell equals 'x'
            Assert.AreEqual(this.CheckPlanEffectutated_Step_12ExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString, "Iverksatt er ikke merket");
        }
        
        /// <summary>
        /// CheckPlanIsOpened - Use 'CheckPlanIsOpenedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlanIsOpened()
        {
            #region Variable Declarations
            DXCell uIAnsattEnCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIAnsattEnCell;
            DXCell uIAnsattÅtteCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIAnsattÅtteCell;
            DXCell uIAnsattSeksCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIAnsattSeksCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Ansatt, En' cell equals 'Ansatt, En'
            Assert.AreEqual(this.CheckPlanIsOpenedExpectedValues.UIAnsattEnCellValueAsString, uIAnsattEnCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Ansatt, Åtte' cell equals 'Ansatt, Åtte'
            Assert.AreEqual(this.CheckPlanIsOpenedExpectedValues.UIAnsattÅtteCellValueAsString, uIAnsattÅtteCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Ansatt, Seks' cell equals 'Ansatt, Seks'
            Assert.AreEqual(this.CheckPlanIsOpenedExpectedValues.UIAnsattSeksCellValueAsString, uIAnsattSeksCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckUTAplanData - Use 'CheckUTAplanDataExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckUTAplanData()
        {
            #region Variable Declarations
            DXCell uIItem5110DiverseCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem5110DiverseCell;
            DXCell uIArbeidsplanCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIArbeidsplanCell;
            DXCell uIItem31102011Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem31102011Cell;
            DXCell uIItem3Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem3Cell;
            DXCell uIItem09122012Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem09122012Cell;
            DXCell uIItemCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItemCell;
            DXCell uIItem1Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem1Cell;
            DXCell uIItem200Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem200Cell;
            DXCell uIItemCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItemCell1;
            #endregion

            // Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckUTAplanDataExpectedValues.UIItem5110DiverseCellValueAsString, uIItem5110DiverseCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Arbeidsplan'
            Assert.AreEqual(this.CheckUTAplanDataExpectedValues.UIArbeidsplanCellValueAsString, uIArbeidsplanCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '31.10.2011' cell equals '2011-10-31'
            Assert.AreEqual(this.CheckUTAplanDataExpectedValues.UIItem31102011CellValueAsString, uIItem31102011Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '3' cell equals '3'
            Assert.AreEqual(this.CheckUTAplanDataExpectedValues.UIItem3CellValueAsString, uIItem3Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '09.12.2012' cell equals '2012-12-09'
            Assert.AreEqual(this.CheckUTAplanDataExpectedValues.UIItem09122012CellValueAsString, uIItem09122012Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckUTAplanDataExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1' cell equals '1'
            Assert.AreEqual(this.CheckUTAplanDataExpectedValues.UIItem1CellValueAsString, uIItem1Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2,00' cell equals '2'
            Assert.AreEqual(this.CheckUTAplanDataExpectedValues.UIItem200CellValueAsString, uIItem200Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckUTAplanDataExpectedValues.UIItemCell1ValueAsString, uIItemCell1.ValueAsString);
        }
        
        /// <summary>
        /// CheckUTAPlanData_step_3 - Use 'CheckUTAPlanData_step_3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckUTAPlanData_step_3()
        {
            #region Variable Declarations
            DXCell uIUTAirullerendeplanCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIUTAirullerendeplanCell;
            DXCell uIItem5110DiverseCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem5110DiverseCell1;
            DXCell uIArbeidsplanCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIArbeidsplanCell1;
            DXCell uIItem31102011Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem31102011Cell1;
            DXCell uIItem3Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem3Cell1;
            DXCell uIItem09122012Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem09122012Cell1;
            DXCell uIItemCell2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItemCell2;
            DXCell uIItem1Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem1Cell1;
            DXCell uIItem200Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItem200Cell1;
            DXCell uIItemCell3 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIGcRosterPlansTable.UIItemCell3;
            #endregion

            // Verify that the 'ValueAsString' property of 'UTA i rullerende plan' cell equals 'UTA i rullerende plan'
            Assert.AreEqual(this.CheckUTAPlanData_step_3ExpectedValues.UIUTAirullerendeplanCellValueAsString, uIUTAirullerendeplanCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckUTAPlanData_step_3ExpectedValues.UIItem5110DiverseCell1ValueAsString, uIItem5110DiverseCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Arbeidsplan'
            Assert.AreEqual(this.CheckUTAPlanData_step_3ExpectedValues.UIArbeidsplanCell1ValueAsString, uIArbeidsplanCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of '31.10.2011' cell equals '2011-10-31'
            Assert.AreEqual(this.CheckUTAPlanData_step_3ExpectedValues.UIItem31102011Cell1ValueAsString, uIItem31102011Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of '3' cell equals '3'
            Assert.AreEqual(this.CheckUTAPlanData_step_3ExpectedValues.UIItem3Cell1ValueAsString, uIItem3Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of '09.12.2012' cell equals '2012-12-09'
            Assert.AreEqual(this.CheckUTAPlanData_step_3ExpectedValues.UIItem09122012Cell1ValueAsString, uIItem09122012Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckUTAPlanData_step_3ExpectedValues.UIItemCell2ValueAsString, uIItemCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of '1' cell equals '1'
            Assert.AreEqual(this.CheckUTAPlanData_step_3ExpectedValues.UIItem1Cell1ValueAsString, uIItem1Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of '2,00' cell equals '2'
            Assert.AreEqual(this.CheckUTAPlanData_step_3ExpectedValues.UIItem200Cell1ValueAsString, uIItem200Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckUTAPlanData_step_3ExpectedValues.UIItemCell3ValueAsString, uIItemCell3.ValueAsString);
        }
        
        /// <summary>
        /// CheckWishplan2Data - Use 'CheckWishplan2DataExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWishplan2Data()
        {
            #region Variable Declarations
            DXCell uIPeriode1Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIPeriode1Cell;
            DXCell uIItem5110DiverseCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem5110DiverseCell;
            DXCell uIItem6Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem6Cell;
            DXCell uIItem2Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem2Cell;
            DXCell uIAutomatiskCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIAutomatiskCell;
            DXCell uIItem0Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem0Cell;
            DXCell uINeiCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UINeiCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Periode 1' cell equals 'Periode 2'
            Assert.AreEqual(this.CheckWishplan2DataExpectedValues.UIPeriode1CellValueAsString, uIPeriode1Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckWishplan2DataExpectedValues.UIItem5110DiverseCellValueAsString, uIItem5110DiverseCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '6' cell equals '6'
            Assert.AreEqual(this.CheckWishplan2DataExpectedValues.UIItem6CellValueAsString, uIItem6Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2' cell equals '3'
            Assert.AreEqual(this.CheckWishplan2DataExpectedValues.UIItem2CellValueAsString, uIItem2Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Automatisk' cell equals 'Automatisk'
            Assert.AreEqual(this.CheckWishplan2DataExpectedValues.UIAutomatiskCellValueAsString, uIAutomatiskCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '0' cell equals '0'
            Assert.AreEqual(this.CheckWishplan2DataExpectedValues.UIItem0CellValueAsString, uIItem0Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Nei' cell equals 'Nei'
            Assert.AreEqual(this.CheckWishplan2DataExpectedValues.UINeiCellValueAsString, uINeiCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckWishplanButtonState_step_31 - Use 'CheckWishplanButtonState_step_31ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWishplanButtonState_step_31()
        {
            #region Variable Declarations
            DXRibbonButtonItem uINYRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UINYRibbonBaseButtonItem;
            DXRibbonButtonItem uIÅpneRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIÅpneRibbonBaseButtonItem;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UISlettRibbonBaseButtonItem;
            DXRibbonButtonItem uIDupliserRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIDupliserRibbonBaseButtonItem;
            DXRibbonButtonItem uIKobletilbaseplanRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIKobletilbaseplanRibbonBaseButtonItem;
            DXRibbonButtonItem uIEndretilfase1RibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIEndretilfase1RibbonBaseButtonItem;
            DXRibbonButtonItem uIEndretilfase2RibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIEndretilfase2RibbonBaseButtonItem;
            DXRibbonButtonItem uIEndretilfase3RibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIEndretilfase3RibbonBaseButtonItem;
            #endregion

            // Verify that the 'Enabled' property of 'Ny' RibbonBaseButtonItem equals 'True'
            Assert.AreEqual(this.CheckWishplanButtonState_step_31ExpectedValues.UINYRibbonBaseButtonItemEnabled, uINYRibbonBaseButtonItem.Enabled, "New button is disabled");

            // Verify that the 'Enabled' property of 'Åpne' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWishplanButtonState_step_31ExpectedValues.UIÅpneRibbonBaseButtonItemEnabled, uIÅpneRibbonBaseButtonItem.Enabled, "Open is enabled");

            // Verify that the 'Enabled' property of 'Slett' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWishplanButtonState_step_31ExpectedValues.UISlettRibbonBaseButtonItemEnabled, uISlettRibbonBaseButtonItem.Enabled, "Delete is enabled");

            // Verify that the 'Enabled' property of 'Dupliser' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWishplanButtonState_step_31ExpectedValues.UIDupliserRibbonBaseButtonItemEnabled, uIDupliserRibbonBaseButtonItem.Enabled, "Duplicate is enabled");

            // Verify that the 'Enabled' property of 'Koble til baseplan' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWishplanButtonState_step_31ExpectedValues.UIKobletilbaseplanRibbonBaseButtonItemEnabled, uIKobletilbaseplanRibbonBaseButtonItem.Enabled, "Connect to baseplan is enabled");

            // Verify that the 'Enabled' property of 'Endre til fase 1' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWishplanButtonState_step_31ExpectedValues.UIEndretilfase1RibbonBaseButtonItemEnabled, uIEndretilfase1RibbonBaseButtonItem.Enabled, "Phase 1 is enabled");

            // Verify that the 'Enabled' property of 'Endre til fase 2' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWishplanButtonState_step_31ExpectedValues.UIEndretilfase2RibbonBaseButtonItemEnabled, uIEndretilfase2RibbonBaseButtonItem.Enabled, "Phase 2 is enabled");

            // Verify that the 'Enabled' property of 'Endre til fase 3' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWishplanButtonState_step_31ExpectedValues.UIEndretilfase3RibbonBaseButtonItemEnabled, uIEndretilfase3RibbonBaseButtonItem.Enabled, "Phase 3 is enabled");
        }
        
        /// <summary>
        /// CheckWishplanData - Use 'CheckWishplanDataExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWishplanData()
        {
            #region Variable Declarations
            DXCell uIPeriode1Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIPeriode1Cell;
            DXCell uIItem5110DiverseCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem5110DiverseCell;
            DXCell uIItem6Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem6Cell;
            DXCell uIItem2Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem2Cell;
            DXCell uIItemCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItemCell;
            DXCell uIItemCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItemCell1;
            DXCell uIItemCell2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItemCell2;
            DXCell uIItem0Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem0Cell;
            DXCell uINeiCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UINeiCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Periode 1' cell equals 'Periode 1'
            Assert.AreEqual(this.CheckWishplanDataExpectedValues.UIPeriode1CellValueAsString, uIPeriode1Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckWishplanDataExpectedValues.UIItem5110DiverseCellValueAsString, uIItem5110DiverseCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '6' cell equals '6'
            Assert.AreEqual(this.CheckWishplanDataExpectedValues.UIItem6CellValueAsString, uIItem6Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2' cell equals '2'
            Assert.AreEqual(this.CheckWishplanDataExpectedValues.UIItem2CellValueAsString, uIItem2Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckWishplanDataExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckWishplanDataExpectedValues.UIItemCell1ValueAsString, uIItemCell1.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckWishplanDataExpectedValues.UIItemCell2ValueAsString, uIItemCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of '0' cell equals '0'
            Assert.AreEqual(this.CheckWishplanDataExpectedValues.UIItem0CellValueAsString, uIItem0Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Nei' cell equals 'Nei'
            Assert.AreEqual(this.CheckWishplanDataExpectedValues.UINeiCellValueAsString, uINeiCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckWishplanPhase - Use 'CheckWishplanPhaseExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWishplanPhase()
        {
            #region Variable Declarations
            DXCell uIItem0Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem0Cell;
            #endregion

            // Verify that the 'ValueAsString' property of '0' cell equals '1'
            Assert.AreEqual(this.CheckWishplanPhaseExpectedValues.UIItem0CellValueAsString, uIItem0Cell.ValueAsString, "Phase is not 1");
        }
        
        /// <summary>
        /// CheckWishplanPhase3 - Use 'CheckWishplanPhase3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWishplanPhase3()
        {
            #region Variable Declarations
            DXCell uIItem0Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem0Cell;
            DXRibbonButtonItem uIEndretilfase1RibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIEndretilfase1RibbonBaseButtonItem;
            DXRibbonButtonItem uIEndretilfase2RibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIEndretilfase2RibbonBaseButtonItem;
            DXRibbonButtonItem uIEndretilfase3RibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIEndretilfase3RibbonBaseButtonItem;
            DXRibbonButtonItem uIKobletilbaseplanRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIKobletilbaseplanRibbonBaseButtonItem;
            #endregion

            // Verify that the 'ValueAsString' property of '0' cell equals '3'
            Assert.AreEqual(this.CheckWishplanPhase3ExpectedValues.UIItem0CellValueAsString, uIItem0Cell.ValueAsString, "Phase is not 3");

            // Verify that the 'Enabled' property of 'Endre til fase 1' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWishplanPhase3ExpectedValues.UIEndretilfase1RibbonBaseButtonItemEnabled, uIEndretilfase1RibbonBaseButtonItem.Enabled);

            // Verify that the 'Enabled' property of 'Endre til fase 2' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWishplanPhase3ExpectedValues.UIEndretilfase2RibbonBaseButtonItemEnabled, uIEndretilfase2RibbonBaseButtonItem.Enabled);

            // Verify that the 'Enabled' property of 'Endre til fase 3' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWishplanPhase3ExpectedValues.UIEndretilfase3RibbonBaseButtonItemEnabled, uIEndretilfase3RibbonBaseButtonItem.Enabled);

            // Verify that the 'Enabled' property of 'Koble til baseplan' RibbonBaseButtonItem equals 'False'
            Assert.AreEqual(this.CheckWishplanPhase3ExpectedValues.UIKobletilbaseplanRibbonBaseButtonItemEnabled, uIKobletilbaseplanRibbonBaseButtonItem.Enabled);
        }
        
        /// <summary>
        /// ClickEffectuationDates
        /// </summary>
        public void ClickEffectuationDates()
        {
            #region Variable Declarations
            DXButton uIEditorButton0Button = this.UIItemWindow2.UISubMenuBarControlMenu.UIBtnEffectuateToRevolPopupEdit.UIEditorButton0Button;
            #endregion

            // Click 'EditorButton0' button
            Mouse.Click(uIEditorButton0Button, new Point(8, 9));
        }
        
        /// <summary>
        /// ClickOkCopyRosterplanSettings
        /// </summary>
        public void ClickOkCopyRosterplanSettings()
        {
            #region Variable Declarations
            DXButton uIGSSimpleButtonButton = this.UINyarbeidsplanWindow.UIGSPanelControlClient.UIGSSimpleButtonButton;
            DXButton uIOKButton = this.UIGT3999InformasjonWindow.UIOKButton;
            #endregion

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickOkGenerator
        /// </summary>
        public void ClickOkGenerator()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIGeneratorScoop1130Window.UIOKButton;
            #endregion

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickOkSaveWishplan
        /// </summary>
        public void ClickOkSaveWishplan()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIØnskeplanperiodeWindow.UIPnlButtonsClient.UIOKButton;
            #endregion

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ClickSettingsFromRosterplanTab
        /// </summary>
        public void ClickSettingsFromRosterplanTab()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIInnstillingerRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIRibbonControlRibbon.UIRpHomeRibbonPage.UIRpgPlanRibbonPageGroup.UIInnstillingerRibbonBaseButtonItem;
            #endregion

            // Click 'Innstillinger' RibbonBaseButtonItem
            Mouse.Click(uIInnstillingerRibbonBaseButtonItem, new Point(29, 23));
        }
        
        /// <summary>
        /// ConnectToBaseplan - Use 'ConnectToBaseplanParams' to pass parameters into this method.
        /// </summary>
        public void ConnectToBaseplan()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIKobletilbaseplanRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIKobletilbaseplanRibbonBaseButtonItem;
            DXLookUpEdit uIDrdBasePlanLookUpEdit = this.UIKobleønskeplanperiodWindow.UIPnlMainClient.UIGsLayoutControlMainCustom.UILayoutControlGroupNaLayoutGroup.UILayoutControlGroupNeLayoutGroup.UILcMainInfoLayoutControlItem.UIPnlMainInfoClient.UIDrdBasePlanLookUpEdit;
            DXWindow uIPopupLookUpEditFormWindow = this.UIKobleønskeplanperiodWindow.UIPnlMainClient.UIGsLayoutControlMainCustom.UILayoutControlGroupNaLayoutGroup.UILayoutControlGroupNeLayoutGroup.UILcMainInfoLayoutControlItem.UIPnlMainInfoClient.UIDrdBasePlanLookUpEdit.UIPopupLookUpEditFormWindow;
            DXButton uIGSSimpleButtonButton = this.UIKobleønskeplanperiodWindow.UIGSPanelControlClient.UIGSSimpleButtonButton;
            #endregion

            // Click 'Koble til baseplan' RibbonBaseButtonItem
            Mouse.Click(uIKobletilbaseplanRibbonBaseButtonItem, new Point(25, 28));

            // Type '' in 'drdBasePlan' LookUpEdit
            //ValueAsString
            uIDrdBasePlanLookUpEdit.ValueAsString = this.ConnectToBaseplanParams.UIDrdBasePlanLookUpEditValueAsString;

            // Click 'PopupLookUpEditForm' window
            Mouse.Click(uIPopupLookUpEditFormWindow, new Point(184, 30));

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ConnectToStaffingplan
        /// </summary>
        public void ConnectToStaffingplan()
        {
            #region Variable Declarations
            DXTestControl uIXtraTabControlHeaderTabPage = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UIXtraTabControlHeaderTabPage;
            DXCell uIValgtCell = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpStaffingPlanClient.UIGcStaffingPlansTable.UIValgtCell;
            DXTestControl uIXtraTabControlHeaderTabPage1 = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UIXtraTabControlHeaderTabPage1;
            #endregion

            // Click 'XtraTabControlHeader' tab
            Mouse.Click(uIXtraTabControlHeaderTabPage, new Point(47, 9));

            // Click 'Valgt' cell
            Mouse.Click(uIValgtCell, new Point(31, 8));

            // Click 'XtraTabControlHeader' tab
            Mouse.Click(uIXtraTabControlHeaderTabPage1, new Point(34, 6));
        }
        
        /// <summary>
        /// CreateNewWishplan_step_32 - Use 'CreateNewWishplan_step_32Params' to pass parameters into this method.
        /// </summary>
        public void CreateNewWishplan_step_32()
        {
            #region Variable Declarations
            DXRibbonButtonItem uINYRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UINYRibbonBaseButtonItem;
            DXTextEdit uITxtNameEdit = this.UIØnskeplanperiodeWindow.UIGrpPeriodClient.UITxtNameEdit;
            DXTextEdit uIENumberEdit = this.UIØnskeplanperiodeWindow.UIGrpPeriodClient.UIENumberEdit;
            DXRadioGroup uIRgrpPhaseCountRadioGroup = this.UIØnskeplanperiodeWindow.UIGrpPhaseCountClient.UIRgrpPhaseCountRadioGroup;
            DXRadioGroup uIRgrpPhaseControlRadioGroup = this.UIØnskeplanperiodeWindow.UIGrpPhaseControlClient.UIRgrpPhaseControlRadioGroup;
            #endregion

            // Click 'Ny' RibbonBaseButtonItem
            Mouse.Click(uINYRibbonBaseButtonItem, new Point(19, 22));

            // Type 'Periode 1' in 'txtName' text box
            //ValueAsString
            uITxtNameEdit.ValueAsString = this.CreateNewWishplan_step_32Params.UITxtNameEditValueAsString;

            // Type '{Tab}' in 'txtName' text box
            Keyboard.SendKeys(uITxtNameEdit, this.CreateNewWishplan_step_32Params.UITxtNameEditSendKeys, ModifierKeys.None);

            // Type '6 [SelectionStart]0[SelectionLength]1' in 'eNumber' text box
            //ValueAsString
            uIENumberEdit.ValueAsString = this.CreateNewWishplan_step_32Params.UIENumberEditValueAsString;

            // Type '0' in 'rgrpPhaseCount' RadioGroup
            //SelectedIndex
            uIRgrpPhaseCountRadioGroup.SelectedIndex = this.CreateNewWishplan_step_32Params.UIRgrpPhaseCountRadioGroupSelectedIndex;

            // Type '{Tab}' in 'rgrpPhaseCount' RadioGroup
            Keyboard.SendKeys(uIRgrpPhaseCountRadioGroup, this.CreateNewWishplan_step_32Params.UIRgrpPhaseCountRadioGroupSendKeys, ModifierKeys.None);

            // Type '0' in 'rgrpPhaseControl' RadioGroup
            //SelectedIndex
            uIRgrpPhaseControlRadioGroup.SelectedIndex = this.CreateNewWishplan_step_32Params.UIRgrpPhaseControlRadioGroupSelectedIndex;

            // Type '{Tab}' in 'rgrpPhaseControl' RadioGroup
            Keyboard.SendKeys(uIRgrpPhaseControlRadioGroup, this.CreateNewWishplan_step_32Params.UIRgrpPhaseControlRadioGroupSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// CreateNewWishplan_step_38 - Use 'CreateNewWishplan_step_38Params' to pass parameters into this method.
        /// </summary>
        public void CreateNewWishplan_step_38()
        {
            #region Variable Declarations
            DXRibbonButtonItem uINYRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UINYRibbonBaseButtonItem;
            DXTextEdit uITxtNameEdit = this.UIØnskeplanperiodeWindow.UIGrpPeriodClient.UITxtNameEdit;
            DXTextEdit uIENumberEdit = this.UIØnskeplanperiodeWindow.UIGrpPeriodClient.UIENumberEdit;
            #endregion

            // Click 'Ny' RibbonBaseButtonItem
            Mouse.Click(uINYRibbonBaseButtonItem, new Point(20, 27));

            // Type 'Periode 2' in 'txtName' text box
            //ValueAsString
            uITxtNameEdit.ValueAsString = this.CreateNewWishplan_step_38Params.UITxtNameEditValueAsString;

            // Type '{Tab}' in 'txtName' text box
            Keyboard.SendKeys(uITxtNameEdit, this.CreateNewWishplan_step_38Params.UITxtNameEditSendKeys, ModifierKeys.None);

            // Type '6 [SelectionStart]0[SelectionLength]1' in 'eNumber' text box
            //ValueAsString
            uIENumberEdit.ValueAsString = this.CreateNewWishplan_step_38Params.UIENumberEditValueAsString;
        }
        
        /// <summary>
        /// DeletePeriod2Plan
        /// </summary>
        public void DeletePeriod2Plan()
        {
            #region Variable Declarations
            DXCell uIPeriode1Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIPeriode1Cell;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UISlettRibbonBaseButtonItem;
            DXButton uIGSSimpleButtonButton = this.UIItemWindow.UIGSSimpleButtonButton;
            #endregion

            // Click 'Periode 1' cell
            Mouse.Click(uIPeriode1Cell, new Point(108, 7));

            // Click 'Slett' RibbonBaseButtonItem
            Mouse.Click(uISlettRibbonBaseButtonItem, new Point(21, 19));

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }
        
        /// <summary>
        /// EffectuationCheckStep_11 - Use 'EffectuationCheckStep_11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void EffectuationCheckStep_11()
        {
            #region Variable Declarations
            DXCell uIValgtCell = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIValgtCell;
            DXCell uIValgtCell1 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIValgtCell1;
            DXCell uIValgtCell2 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIValgtCell2;
            DXPopupEdit uILnkDetailPopupEdit = this.UIIverksetteWindow.UIPnlTopClient.UILnkDetailPopupEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'Valgt' cell equals 'True'
            Assert.AreEqual(this.EffectuationCheckStep_11ExpectedValues.UIValgtCellValueAsString, uIValgtCell.ValueAsString, "Linje 1 er ikke valgt");

            // Verify that the 'ValueAsString' property of 'Valgt' cell equals 'True'
            Assert.AreEqual(this.EffectuationCheckStep_11ExpectedValues.UIValgtCell1ValueAsString, uIValgtCell1.ValueAsString, "Linje 2 er ikke valgt");

            // Verify that the 'ValueAsString' property of 'Valgt' cell equals 'True'
            Assert.AreEqual(this.EffectuationCheckStep_11ExpectedValues.UIValgtCell2ValueAsString, uIValgtCell2.ValueAsString, "Linje 3 er ikke valgt");

            // Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals 'Ingen meldinger'
            Assert.AreEqual(this.EffectuationCheckStep_11ExpectedValues.UILnkDetailPopupEditValueAsString, uILnkDetailPopupEdit.ValueAsString, "Reg.status har meldinger");
        }
        
        /// <summary>
        /// OpenEffectuationMenu
        /// </summary>
        public void OpenEffectuationMenu()
        {
            #region Variable Declarations
            DXRibbonItem uIIverksettingRibbonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpPlanRibbonPage.UIGrpEffectuateRibbonPageGroup.UIIverksettingRibbonItem;
            #endregion

            // Click 'Iverksetting' RibbonItem
            Mouse.Click(uIIverksettingRibbonItem, new Point(88, 10));
        }
        
        /// <summary>
        /// OpenRosterplanSettingsFromRosterplanTab
        /// </summary>
        public void OpenRosterplanSettingsFromRosterplanTab()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIInnstillingerRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpRosterPlanListClient.UIRosterPlanListCustom.UIPnlGridClient.UIRibbonControlRibbon.UIRpHomeRibbonPage.UIRpgPlanRibbonPageGroup.UIInnstillingerRibbonBaseButtonItem;
            #endregion

            // Click 'Innstillinger' RibbonBaseButtonItem
            Mouse.Click(uIInnstillingerRibbonBaseButtonItem, new Point(29, 29));
        }
        
        /// <summary>
        /// OpenWishplanForBaseplan
        /// </summary>
        public void OpenWishplanForBaseplan()
        {
            #region Variable Declarations
            DXButton uIPeriode1Button = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIPeriode1Button;
            DXCell uIItem770850773Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem770850773Cell;
            #endregion

            // Click 'Periode 1' button
            Mouse.Click(uIPeriode1Button, new Point(4, 4));

            // Click '770850773' cell
            Mouse.Click(uIItem770850773Cell, new Point(25, 8));
        }
        
        /// <summary>
        /// OpenWishplanSettings
        /// </summary>
        public void OpenWishplanSettings()
        {
            #region Variable Declarations
            DXCell uIItem770850773Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem770850773Cell1;
            #endregion

            // Click '770850773' cell
            Mouse.Click(uIItem770850773Cell1, new Point(35, 9));
        }
        
        /// <summary>
        /// SelectEmployeesToBasePlan
        /// </summary>
        public void SelectEmployeesToBasePlan()
        {
            #region Variable Declarations
            DXButton uIAnsatteButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIAnsatteButton;
            DXCell uIAnsattEnCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattEnCell;
            DXCell uIAnsattNiCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattNiCell;
            DXCell uIAnsattSeksCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattSeksCell;
            DXCell uIAnsattToCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattToCell;
            DXCell uIAnsattÅtteCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAnsattÅtteCell;
            DXButton uISimpleButtonButton = this.UILeggtilansatteWindow.UISimpleButtonButton;
            DXButton uISimpleButtonButton1 = this.UIAnsatteiarbeidsplanWindow.UISimpleButtonButton;
            #endregion

            // Click 'Ansatte...' button
            Mouse.Click(uIAnsatteButton, new Point(1, 1));

            // Click 'Ansatt, En' cell
            Mouse.Click(uIAnsattEnCell, new Point(69, 6));

            // Click 'Ansatt, Ni' cell while pressing Control
            Mouse.Click(uIAnsattNiCell, MouseButtons.Left, ModifierKeys.Control, new Point(51, 8));

            // Click 'Ansatt, Seks' cell while pressing Control
            Mouse.Click(uIAnsattSeksCell, MouseButtons.Left, ModifierKeys.Control, new Point(50, 6));

            // Click 'Ansatt, To' cell while pressing Control
            Mouse.Click(uIAnsattToCell, MouseButtons.Left, ModifierKeys.Control, new Point(35, 7));

            // Click 'Ansatt, Åtte' cell while pressing Control
            Mouse.Click(uIAnsattÅtteCell, MouseButtons.Left, ModifierKeys.Control, new Point(35, 9));

            // Click 'SimpleButton' button
            Mouse.Click(uISimpleButtonButton, new Point(1, 1));

            // Click 'SimpleButton' button
            Mouse.Click(uISimpleButtonButton1, new Point(1, 1));
        }
        
        /// <summary>
        /// SelectRosterplansSubTab
        /// </summary>
        public void SelectRosterplansSubTab()
        {
            #region Variable Declarations
            DXTestControl uIXtraTabControlHeaderTabPage1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UIXtraTabControlHeaderTabPage1;
            #endregion

            // Click 'XtraTabControlHeader' tab
            Mouse.Click(uIXtraTabControlHeaderTabPage1, new Point(36, 9));
        }
        
        /// <summary>
        /// SelectWishplansSubTab
        /// </summary>
        public void SelectWishplansSubTab()
        {
            #region Variable Declarations
            DXTestControl uIXtraTabControlHeaderTabPage = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UIXtraTabControlHeaderTabPage;
            #endregion

            // Click 'XtraTabControlHeader' tab
            Mouse.Click(uIXtraTabControlHeaderTabPage, new Point(39, 9));
        }
        
        /// <summary>
        /// SetAproval - Use 'SetAprovalParams' to pass parameters into this method.
        /// </summary>
        public void SetAproval()
        {
            UICommon.UIMapVS2017.SelectRosterplanSubTab(CommonUIFunctions.UIMapVS2017Classes.UIMapVS2017.RosterplanTabs.Godkjenning);

            UIMapVS2017.SetAprovalsStep9();
            UICommon.UIMapVS2017.RejectApprovalInApprovalTab(true);
            UIMapVS2017.SetAprovalsStep9_1();
        }
        
        /// <summary>
        /// SetAproval_step_10
        /// </summary>
        public void SetAproval_step_10()
        {
            UICommon.SelectRosterplanPlanTab();
            UICommon.UIMapVS2017.SelectRosterplanSubTab(CommonUIFunctions.UIMapVS2017Classes.UIMapVS2017.RosterplanTabs.Godkjenning);

            UIMapVS2017.SelectAprovalsStep10();
            UICommon.UIMapVS2017.ApproveApprovalInApprovalTab();
        }
        
        /// <summary>
        /// SetDraft - Use 'SetDraftParams' to pass parameters into this method.
        /// </summary>
        public void SetDraft()
        {
            #region Variable Declarations
            DXCheckBox uIChkDraftCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkDraftCheckBox;
            #endregion

            // Select 'chkDraft' check box
            uIChkDraftCheckBox.Checked = this.SetDraftParams.UIChkDraftCheckBoxChecked;
        }
        
        /// <summary>
        /// SetPlanActive - Use 'SetPlanActiveParams' to pass parameters into this method.
        /// </summary>
        public void SetPlanActive()
        {
            #region Variable Declarations
            DXCheckBox uIChkInactiveCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkInactiveCheckBox;
            #endregion

            // Clear 'chkInactive' check box
            uIChkInactiveCheckBox.Checked = this.SetPlanActiveParams.UIChkInactiveCheckBoxChecked;
        }
        
        /// <summary>
        /// SetPlanInactive - Use 'SetPlanInactiveParams' to pass parameters into this method.
        /// </summary>
        public void SetPlanInactive()
        {
            #region Variable Declarations
            DXCheckBox uIChkInactiveCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkInactiveCheckBox;
            #endregion

            // Select 'chkInactive' check box
            uIChkInactiveCheckBox.Checked = this.SetPlanInactiveParams.UIChkInactiveCheckBoxChecked;
        }
        
        /// <summary>
        /// SetReadyForApproval - Use 'SetReadyForApprovalParams' to pass parameters into this method.
        /// </summary>
        public void SetReadyForApproval()
        {
            #region Variable Declarations
            DXCheckBox uIChkIsReadyForApprovaCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkIsReadyForApprovaCheckBox;
            DXButton uIGSSimpleButtonButton = this.UIArbeidsplanInnstilliWindow.UIGSPanelControlClient.UIGSSimpleButtonButton;
            #endregion

            // Select 'chkIsReadyForApproval' check box
            uIChkIsReadyForApprovaCheckBox.Checked = this.SetReadyForApprovalParams.UIChkIsReadyForApprovaCheckBoxChecked;

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }
        
        /// <summary>
        /// SetWishplanToPhase1
        /// </summary>
        public void SetWishplanToPhase1()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIEndretilfase1RibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIEndretilfase1RibbonBaseButtonItem;
            #endregion

            // Click 'Endre til fase 1' RibbonBaseButtonItem
            Mouse.Click(uIEndretilfase1RibbonBaseButtonItem, new Point(34, 9));
        }
        
        /// <summary>
        /// SetWishplanToPhase3
        /// </summary>
        public void SetWishplanToPhase3()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIEndretilfase3RibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UIEndretilfase3RibbonBaseButtonItem;
            #endregion

            // Click 'Endre til fase 3' RibbonBaseButtonItem
            Mouse.Click(uIEndretilfase3RibbonBaseButtonItem, new Point(35, 9));
        }
        
        /// <summary>
        /// StartGenerator
        /// </summary>
        public void StartGenerator()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIGeneratorRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRcMenuRibbon.UIRpPlanRibbonPage.UIRpgPlanRibbonPageGroup.UIGeneratorRibbonBaseButtonItem;
            DXButton uIStoppButton = this.UIGeneratorScoop1130Window.UIPcMainClient.UIGrpSolutionClient.UIStoppButton;
            #endregion

            // Click 'Generator' RibbonBaseButtonItem
            Mouse.Click(uIGeneratorRibbonBaseButtonItem, new Point(33, 25));

            // Click 'Stopp' button
            Mouse.Click(uIStoppButton, new Point(1, 1));

            // Wait for 5 seconds for user delay between actions; Click 'Stopp' button
            Playback.Wait(5000);
            Mouse.Click(uIStoppButton, new Point(1, 1));
        }
        
        /// <summary>
        /// UnCheckDraft - Use 'UnCheckDraftParams' to pass parameters into this method.
        /// </summary>
        public void UnCheckDraft()
        {
            #region Variable Declarations
            DXCheckBox uIChkKladdCheckBox = this.UINyarbeidsplanWindow.UIPnlMainClient.UIGsLayoutControlMainCustom.UILayoutControlGroupNaLayoutGroup.UILayoutControlGroupNeLayoutGroup.UILcMainInfoLayoutControlItem.UIPnlMainInfoClient.UIChkKladdCheckBox;
            #endregion

            // Clear 'chkKladd' check box
            uIChkKladdCheckBox.Checked = this.UnCheckDraftParams.UIChkKladdCheckBoxChecked;
        }
        
        /// <summary>
        /// DeletePeriod1Plan
        /// </summary>
        public void DeletePeriod1Plan()
        {
            #region Variable Declarations
            DXCell uIPeriode1Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIPeriode1Cell;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIRibbonControl1Ribbon.UIRpHomeRibbonPage.UIRpgPeriodRibbonPageGroup.UISlettRibbonBaseButtonItem;
            DXButton uIOKButton = this.UIGT3999InformasjonWindow.UIOKButton;
            #endregion

            // Click 'Periode 1' cell
            Mouse.Click(uIPeriode1Cell, new Point(104, 7));

            // Click 'Slett' RibbonBaseButtonItem
            Mouse.Click(uISlettRibbonBaseButtonItem, new Point(23, 24));

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DeletePeriod1
        /// </summary>
        public void DeletePeriod1()
        {
            #region Variable Declarations
            DXButton uIPeriode1Button = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIPeriode1Button;
            DXCell uIItem770850773Cell2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIPcMainPanelClient.UITcPanListsTabList.UITpWishPlanListClient.UIWishPlanListCustom.UIGsPanelControl2Client.UIGcWishPeriodsTable.UIItem770850773Cell2;
            DXButton uIGSSimpleButtonButton = this.UIItemWindow.UIGSSimpleButtonButton;
            #endregion

            // Click 'Periode 1' button
            Mouse.Click(uIPeriode1Button, new Point(3, 5));

            // Click '770850773' cell
            Mouse.Click(uIItem770850773Cell2, new Point(23, 9));

            // Click 'GSSimpleButton' button
            Mouse.Click(uIGSSimpleButtonButton, new Point(1, 1));
        }
        
        #region Properties
        public virtual AddBaseplanDataParams AddBaseplanDataParams
        {
            get
            {
                if ((this.mAddBaseplanDataParams == null))
                {
                    this.mAddBaseplanDataParams = new AddBaseplanDataParams();
                }
                return this.mAddBaseplanDataParams;
            }
        }
        
        public virtual AddCalendarplanDataParams AddCalendarplanDataParams
        {
            get
            {
                if ((this.mAddCalendarplanDataParams == null))
                {
                    this.mAddCalendarplanDataParams = new AddCalendarplanDataParams();
                }
                return this.mAddCalendarplanDataParams;
            }
        }
        
        public virtual AddRosterplanDataParams AddRosterplanDataParams
        {
            get
            {
                if ((this.mAddRosterplanDataParams == null))
                {
                    this.mAddRosterplanDataParams = new AddRosterplanDataParams();
                }
                return this.mAddRosterplanDataParams;
            }
        }
        
        public virtual AddShiftsToKladdKopiParams AddShiftsToKladdKopiParams
        {
            get
            {
                if ((this.mAddShiftsToKladdKopiParams == null))
                {
                    this.mAddShiftsToKladdKopiParams = new AddShiftsToKladdKopiParams();
                }
                return this.mAddShiftsToKladdKopiParams;
            }
        }
        
        public virtual CheckBasePlanDataExpectedValues CheckBasePlanDataExpectedValues
        {
            get
            {
                if ((this.mCheckBasePlanDataExpectedValues == null))
                {
                    this.mCheckBasePlanDataExpectedValues = new CheckBasePlanDataExpectedValues();
                }
                return this.mCheckBasePlanDataExpectedValues;
            }
        }
        
        public virtual CheckDraftCopyPlanDataExpectedValues CheckDraftCopyPlanDataExpectedValues
        {
            get
            {
                if ((this.mCheckDraftCopyPlanDataExpectedValues == null))
                {
                    this.mCheckDraftCopyPlanDataExpectedValues = new CheckDraftCopyPlanDataExpectedValues();
                }
                return this.mCheckDraftCopyPlanDataExpectedValues;
            }
        }
        
        public virtual CheckDraftPlanDataExpectedValues CheckDraftPlanDataExpectedValues
        {
            get
            {
                if ((this.mCheckDraftPlanDataExpectedValues == null))
                {
                    this.mCheckDraftPlanDataExpectedValues = new CheckDraftPlanDataExpectedValues();
                }
                return this.mCheckDraftPlanDataExpectedValues;
            }
        }
        
        public virtual CheckOneYearOldPlanDataExpectedValues CheckOneYearOldPlanDataExpectedValues
        {
            get
            {
                if ((this.mCheckOneYearOldPlanDataExpectedValues == null))
                {
                    this.mCheckOneYearOldPlanDataExpectedValues = new CheckOneYearOldPlanDataExpectedValues();
                }
                return this.mCheckOneYearOldPlanDataExpectedValues;
            }
        }
        
        public virtual CheckOnlyNewEnabledExpectedValues CheckOnlyNewEnabledExpectedValues
        {
            get
            {
                if ((this.mCheckOnlyNewEnabledExpectedValues == null))
                {
                    this.mCheckOnlyNewEnabledExpectedValues = new CheckOnlyNewEnabledExpectedValues();
                }
                return this.mCheckOnlyNewEnabledExpectedValues;
            }
        }
        
        public virtual CheckPlanData_step_7ExpectedValues CheckPlanData_step_7ExpectedValues
        {
            get
            {
                if ((this.mCheckPlanData_step_7ExpectedValues == null))
                {
                    this.mCheckPlanData_step_7ExpectedValues = new CheckPlanData_step_7ExpectedValues();
                }
                return this.mCheckPlanData_step_7ExpectedValues;
            }
        }
        
        public virtual CheckPlanEffectutated_Step_12ExpectedValues CheckPlanEffectutated_Step_12ExpectedValues
        {
            get
            {
                if ((this.mCheckPlanEffectutated_Step_12ExpectedValues == null))
                {
                    this.mCheckPlanEffectutated_Step_12ExpectedValues = new CheckPlanEffectutated_Step_12ExpectedValues();
                }
                return this.mCheckPlanEffectutated_Step_12ExpectedValues;
            }
        }
        
        public virtual CheckPlanIsOpenedExpectedValues CheckPlanIsOpenedExpectedValues
        {
            get
            {
                if ((this.mCheckPlanIsOpenedExpectedValues == null))
                {
                    this.mCheckPlanIsOpenedExpectedValues = new CheckPlanIsOpenedExpectedValues();
                }
                return this.mCheckPlanIsOpenedExpectedValues;
            }
        }
        
        public virtual CheckUTAplanDataExpectedValues CheckUTAplanDataExpectedValues
        {
            get
            {
                if ((this.mCheckUTAplanDataExpectedValues == null))
                {
                    this.mCheckUTAplanDataExpectedValues = new CheckUTAplanDataExpectedValues();
                }
                return this.mCheckUTAplanDataExpectedValues;
            }
        }
        
        public virtual CheckUTAPlanData_step_3ExpectedValues CheckUTAPlanData_step_3ExpectedValues
        {
            get
            {
                if ((this.mCheckUTAPlanData_step_3ExpectedValues == null))
                {
                    this.mCheckUTAPlanData_step_3ExpectedValues = new CheckUTAPlanData_step_3ExpectedValues();
                }
                return this.mCheckUTAPlanData_step_3ExpectedValues;
            }
        }
        
        public virtual CheckWishplan2DataExpectedValues CheckWishplan2DataExpectedValues
        {
            get
            {
                if ((this.mCheckWishplan2DataExpectedValues == null))
                {
                    this.mCheckWishplan2DataExpectedValues = new CheckWishplan2DataExpectedValues();
                }
                return this.mCheckWishplan2DataExpectedValues;
            }
        }
        
        public virtual CheckWishplanButtonState_step_31ExpectedValues CheckWishplanButtonState_step_31ExpectedValues
        {
            get
            {
                if ((this.mCheckWishplanButtonState_step_31ExpectedValues == null))
                {
                    this.mCheckWishplanButtonState_step_31ExpectedValues = new CheckWishplanButtonState_step_31ExpectedValues();
                }
                return this.mCheckWishplanButtonState_step_31ExpectedValues;
            }
        }
        
        public virtual CheckWishplanDataExpectedValues CheckWishplanDataExpectedValues
        {
            get
            {
                if ((this.mCheckWishplanDataExpectedValues == null))
                {
                    this.mCheckWishplanDataExpectedValues = new CheckWishplanDataExpectedValues();
                }
                return this.mCheckWishplanDataExpectedValues;
            }
        }
        
        public virtual CheckWishplanPhaseExpectedValues CheckWishplanPhaseExpectedValues
        {
            get
            {
                if ((this.mCheckWishplanPhaseExpectedValues == null))
                {
                    this.mCheckWishplanPhaseExpectedValues = new CheckWishplanPhaseExpectedValues();
                }
                return this.mCheckWishplanPhaseExpectedValues;
            }
        }
        
        public virtual CheckWishplanPhase3ExpectedValues CheckWishplanPhase3ExpectedValues
        {
            get
            {
                if ((this.mCheckWishplanPhase3ExpectedValues == null))
                {
                    this.mCheckWishplanPhase3ExpectedValues = new CheckWishplanPhase3ExpectedValues();
                }
                return this.mCheckWishplanPhase3ExpectedValues;
            }
        }
        
        public virtual ConnectToBaseplanParams ConnectToBaseplanParams
        {
            get
            {
                if ((this.mConnectToBaseplanParams == null))
                {
                    this.mConnectToBaseplanParams = new ConnectToBaseplanParams();
                }
                return this.mConnectToBaseplanParams;
            }
        }
        
        public virtual CreateNewWishplan_step_32Params CreateNewWishplan_step_32Params
        {
            get
            {
                if ((this.mCreateNewWishplan_step_32Params == null))
                {
                    this.mCreateNewWishplan_step_32Params = new CreateNewWishplan_step_32Params();
                }
                return this.mCreateNewWishplan_step_32Params;
            }
        }
        
        public virtual CreateNewWishplan_step_38Params CreateNewWishplan_step_38Params
        {
            get
            {
                if ((this.mCreateNewWishplan_step_38Params == null))
                {
                    this.mCreateNewWishplan_step_38Params = new CreateNewWishplan_step_38Params();
                }
                return this.mCreateNewWishplan_step_38Params;
            }
        }
        
        public virtual EffectuationCheckStep_11ExpectedValues EffectuationCheckStep_11ExpectedValues
        {
            get
            {
                if ((this.mEffectuationCheckStep_11ExpectedValues == null))
                {
                    this.mEffectuationCheckStep_11ExpectedValues = new EffectuationCheckStep_11ExpectedValues();
                }
                return this.mEffectuationCheckStep_11ExpectedValues;
            }
        }
        
        public virtual SetAprovalParams SetAprovalParams
        {
            get
            {
                if ((this.mSetAprovalParams == null))
                {
                    this.mSetAprovalParams = new SetAprovalParams();
                }
                return this.mSetAprovalParams;
            }
        }
        
        public virtual SetDraftParams SetDraftParams
        {
            get
            {
                if ((this.mSetDraftParams == null))
                {
                    this.mSetDraftParams = new SetDraftParams();
                }
                return this.mSetDraftParams;
            }
        }
        
        public virtual SetPlanActiveParams SetPlanActiveParams
        {
            get
            {
                if ((this.mSetPlanActiveParams == null))
                {
                    this.mSetPlanActiveParams = new SetPlanActiveParams();
                }
                return this.mSetPlanActiveParams;
            }
        }
        
        public virtual SetPlanInactiveParams SetPlanInactiveParams
        {
            get
            {
                if ((this.mSetPlanInactiveParams == null))
                {
                    this.mSetPlanInactiveParams = new SetPlanInactiveParams();
                }
                return this.mSetPlanInactiveParams;
            }
        }
        
        public virtual SetReadyForApprovalParams SetReadyForApprovalParams
        {
            get
            {
                if ((this.mSetReadyForApprovalParams == null))
                {
                    this.mSetReadyForApprovalParams = new SetReadyForApprovalParams();
                }
                return this.mSetReadyForApprovalParams;
            }
        }
        
        public virtual UnCheckDraftParams UnCheckDraftParams
        {
            get
            {
                if ((this.mUnCheckDraftParams == null))
                {
                    this.mUnCheckDraftParams = new UnCheckDraftParams();
                }
                return this.mUnCheckDraftParams;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        
        public UIArbeidsplanInnstilliWindow UIArbeidsplanInnstilliWindow
        {
            get
            {
                if ((this.mUIArbeidsplanInnstilliWindow == null))
                {
                    this.mUIArbeidsplanInnstilliWindow = new UIArbeidsplanInnstilliWindow();
                }
                return this.mUIArbeidsplanInnstilliWindow;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UIAnsatteiarbeidsplanWindow UIAnsatteiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIAnsatteiarbeidsplanWindow == null))
                {
                    this.mUIAnsatteiarbeidsplanWindow = new UIAnsatteiarbeidsplanWindow();
                }
                return this.mUIAnsatteiarbeidsplanWindow;
            }
        }
        
        public UILeggtilansatteWindow UILeggtilansatteWindow
        {
            get
            {
                if ((this.mUILeggtilansatteWindow == null))
                {
                    this.mUILeggtilansatteWindow = new UILeggtilansatteWindow();
                }
                return this.mUILeggtilansatteWindow;
            }
        }
        
        public UIGT4003InformasjonWindow UIGT4003InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4003InformasjonWindow == null))
                {
                    this.mUIGT4003InformasjonWindow = new UIGT4003InformasjonWindow();
                }
                return this.mUIGT4003InformasjonWindow;
            }
        }
        
        public UISkrivenkommentartilaWindow UISkrivenkommentartilaWindow
        {
            get
            {
                if ((this.mUISkrivenkommentartilaWindow == null))
                {
                    this.mUISkrivenkommentartilaWindow = new UISkrivenkommentartilaWindow();
                }
                return this.mUISkrivenkommentartilaWindow;
            }
        }
        
        public UIIverksetteWindow UIIverksetteWindow
        {
            get
            {
                if ((this.mUIIverksetteWindow == null))
                {
                    this.mUIIverksetteWindow = new UIIverksetteWindow();
                }
                return this.mUIIverksetteWindow;
            }
        }
        
        public UIGeneratorScoop1130Window UIGeneratorScoop1130Window
        {
            get
            {
                if ((this.mUIGeneratorScoop1130Window == null))
                {
                    this.mUIGeneratorScoop1130Window = new UIGeneratorScoop1130Window();
                }
                return this.mUIGeneratorScoop1130Window;
            }
        }
        
        public UINyarbeidsplanWindow UINyarbeidsplanWindow
        {
            get
            {
                if ((this.mUINyarbeidsplanWindow == null))
                {
                    this.mUINyarbeidsplanWindow = new UINyarbeidsplanWindow();
                }
                return this.mUINyarbeidsplanWindow;
            }
        }
        
        public UIGT3999InformasjonWindow UIGT3999InformasjonWindow
        {
            get
            {
                if ((this.mUIGT3999InformasjonWindow == null))
                {
                    this.mUIGT3999InformasjonWindow = new UIGT3999InformasjonWindow();
                }
                return this.mUIGT3999InformasjonWindow;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2();
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIØnskeplanperiodeWindow UIØnskeplanperiodeWindow
        {
            get
            {
                if ((this.mUIØnskeplanperiodeWindow == null))
                {
                    this.mUIØnskeplanperiodeWindow = new UIØnskeplanperiodeWindow();
                }
                return this.mUIØnskeplanperiodeWindow;
            }
        }
        
        public UIKobleønskeplanperiodWindow UIKobleønskeplanperiodWindow
        {
            get
            {
                if ((this.mUIKobleønskeplanperiodWindow == null))
                {
                    this.mUIKobleønskeplanperiodWindow = new UIKobleønskeplanperiodWindow();
                }
                return this.mUIKobleønskeplanperiodWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddBaseplanDataParams mAddBaseplanDataParams;
        
        private AddCalendarplanDataParams mAddCalendarplanDataParams;
        
        private AddRosterplanDataParams mAddRosterplanDataParams;
        
        private AddShiftsToKladdKopiParams mAddShiftsToKladdKopiParams;
        
        private CheckBasePlanDataExpectedValues mCheckBasePlanDataExpectedValues;
        
        private CheckDraftCopyPlanDataExpectedValues mCheckDraftCopyPlanDataExpectedValues;
        
        private CheckDraftPlanDataExpectedValues mCheckDraftPlanDataExpectedValues;
        
        private CheckOneYearOldPlanDataExpectedValues mCheckOneYearOldPlanDataExpectedValues;
        
        private CheckOnlyNewEnabledExpectedValues mCheckOnlyNewEnabledExpectedValues;
        
        private CheckPlanData_step_7ExpectedValues mCheckPlanData_step_7ExpectedValues;
        
        private CheckPlanEffectutated_Step_12ExpectedValues mCheckPlanEffectutated_Step_12ExpectedValues;
        
        private CheckPlanIsOpenedExpectedValues mCheckPlanIsOpenedExpectedValues;
        
        private CheckUTAplanDataExpectedValues mCheckUTAplanDataExpectedValues;
        
        private CheckUTAPlanData_step_3ExpectedValues mCheckUTAPlanData_step_3ExpectedValues;
        
        private CheckWishplan2DataExpectedValues mCheckWishplan2DataExpectedValues;
        
        private CheckWishplanButtonState_step_31ExpectedValues mCheckWishplanButtonState_step_31ExpectedValues;
        
        private CheckWishplanDataExpectedValues mCheckWishplanDataExpectedValues;
        
        private CheckWishplanPhaseExpectedValues mCheckWishplanPhaseExpectedValues;
        
        private CheckWishplanPhase3ExpectedValues mCheckWishplanPhase3ExpectedValues;
        
        private ConnectToBaseplanParams mConnectToBaseplanParams;
        
        private CreateNewWishplan_step_32Params mCreateNewWishplan_step_32Params;
        
        private CreateNewWishplan_step_38Params mCreateNewWishplan_step_38Params;
        
        private EffectuationCheckStep_11ExpectedValues mEffectuationCheckStep_11ExpectedValues;
        
        private SetAprovalParams mSetAprovalParams;
        
        private SetDraftParams mSetDraftParams;
        
        private SetPlanActiveParams mSetPlanActiveParams;
        
        private SetPlanInactiveParams mSetPlanInactiveParams;
        
        private SetReadyForApprovalParams mSetReadyForApprovalParams;
        
        private UnCheckDraftParams mUnCheckDraftParams;
        
        private UIGatWindow mUIGatWindow;
        
        private UIArbeidsplanInnstilliWindow mUIArbeidsplanInnstilliWindow;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UIAnsatteiarbeidsplanWindow mUIAnsatteiarbeidsplanWindow;
        
        private UILeggtilansatteWindow mUILeggtilansatteWindow;
        
        private UIGT4003InformasjonWindow mUIGT4003InformasjonWindow;
        
        private UISkrivenkommentartilaWindow mUISkrivenkommentartilaWindow;
        
        private UIIverksetteWindow mUIIverksetteWindow;
        
        private UIGeneratorScoop1130Window mUIGeneratorScoop1130Window;
        
        private UINyarbeidsplanWindow mUINyarbeidsplanWindow;
        
        private UIGT3999InformasjonWindow mUIGT3999InformasjonWindow;
        
        private UIWpfWindow mUIWpfWindow;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIØnskeplanperiodeWindow mUIØnskeplanperiodeWindow;
        
        private UIKobleønskeplanperiodWindow mUIKobleønskeplanperiodWindow;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddBaseplanData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddBaseplanDataParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Baseplan' in 'eName' text box
        /// </summary>
        public string UIENameEditValueAsString = "Baseplan";
        
        /// <summary>
        /// Type '{Tab}' in 'eName' text box
        /// </summary>
        public string UIENameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.Configuration.RosterplanConfigurationController+RosterplanTypeDefinition' in 'leRosterplanType' LookUpEdit
        /// </summary>
        public string UILeRosterplanTypeLookUpEditValueTypeName = "Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.Configuration.RosterplanConfigu" +
            "rationController+RosterplanTypeDefinition";
        
        /// <summary>
        /// Type 'Baseplan' in 'leRosterplanType' LookUpEdit
        /// </summary>
        public string UILeRosterplanTypeLookUpEditValueAsString = "Baseplan";
        
        /// <summary>
        /// Type '{Tab}' in 'leRosterplanType' LookUpEdit
        /// </summary>
        public string UILeRosterplanTypeLookUpEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddCalendarplanData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddCalendarplanDataParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1 år gammel' in 'eName' text box
        /// </summary>
        public string UIENameEditValueAsString = "1 år gammel";
        
        /// <summary>
        /// Type '{Tab}' in 'eName' text box
        /// </summary>
        public string UIENameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.Configuration.RosterplanConfigurationController+RosterplanTypeDefinition' in 'leRosterplanType' LookUpEdit
        /// </summary>
        public string UILeRosterplanTypeLookUpEditValueTypeName = "Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.Configuration.RosterplanConfigu" +
            "rationController+RosterplanTypeDefinition";
        
        /// <summary>
        /// Type 'Kalenderplan' in 'leRosterplanType' LookUpEdit
        /// </summary>
        public string UILeRosterplanTypeLookUpEditValueAsString = "Kalenderplan";
        
        /// <summary>
        /// Type '{Tab}' in 'leRosterplanType' LookUpEdit
        /// </summary>
        public string UILeRosterplanTypeLookUpEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '12 [SelectionStart]0[SelectionLength]2' in 'eNumber[1]' text box
        /// </summary>
        public string UIENumber1EditValueAsString = "12 [SelectionStart]0[SelectionLength]2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRosterplanData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddRosterplanDataParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Kladd' in 'eName' text box
        /// </summary>
        public string UIENameEditValueAsString = "Kladd";
        
        /// <summary>
        /// Type '{Tab}' in 'eName' text box
        /// </summary>
        public string UIENameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '3 [SelectionStart]0[SelectionLength]1' in 'eNumber[1]' text box
        /// </summary>
        public string UIENumber1EditValueAsString = "3 [SelectionStart]0[SelectionLength]1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddShiftsToKladdKopi'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddShiftsToKladdKopiParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'd2{Enter}' in '[Row]0[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "d2{Enter}";
        
        /// <summary>
        /// Type 'd2{Enter}' in '[Row]0[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit11SendKeys = "d2{Enter}";
        
        /// <summary>
        /// Type 'd2{Enter}' in '[Row]0[Column]RosterCell_14' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit2SendKeys = "d2{Enter}";
        
        /// <summary>
        /// Type 'a1{Enter}' in '[Row]1[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit1SendKeys = "a1{Enter}";
        
        /// <summary>
        /// Type 'a1{Enter}' in '[Row]1[Column]RosterCell_7' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit11SendKeys = "a1{Enter}";
        
        /// <summary>
        /// Type 'a1{Enter}' in '[Row]1[Column]RosterCell_14' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit2SendKeys = "a1{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckBasePlanData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckBasePlanDataExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1 år gammel' cell equals 'Baseplan'
        /// </summary>
        public string UIItem1årgammelCellValueAsString = "Baseplan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5110DiverseCellValueAsString = "5110 - Diverse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Baseplan'
        /// </summary>
        public string UIArbeidsplanCellValueAsString = "Baseplan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3' cell equals '6'
        /// </summary>
        public string UIItem3CellValueAsString = "6";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCellValueAsString = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1' cell equals '5'
        /// </summary>
        public string UIItem1CellValueAsString = "5";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2,00' cell equals '3.8'
        /// </summary>
        public string UIItem200CellValueAsString = "3.8";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell1ValueAsString = null;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDraftCopyPlanData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckDraftCopyPlanDataExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Kopi av Kladd.' cell equals 'Kopi av Kladd.'
        /// </summary>
        public string UIKopiavKladdCellValueAsString = "Kopi av Kladd.";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5110DiverseCell2ValueAsString = "5110 - Diverse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Arbeidsplan'
        /// </summary>
        public string UIArbeidsplanCell2ValueAsString = "Arbeidsplan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3' cell equals '3'
        /// </summary>
        public string UIItem3Cell2ValueAsString = "3";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'x' cell equals 'x'
        /// </summary>
        public string UIXCellValueAsString = "x";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2' cell equals '2'
        /// </summary>
        public string UIItem2CellValueAsString = "2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1,30' cell equals '1.3'
        /// </summary>
        public string UIItem130CellValueAsString = "1.3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDraftPlanData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckDraftPlanDataExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1 år gammel' cell equals 'Kladd'
        /// </summary>
        public string UIItem1årgammelCellValueAsString = "Kladd";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5110DiverseCellValueAsString = "5110 - Diverse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Arbeidsplan'
        /// </summary>
        public string UIArbeidsplanCellValueAsString = "Arbeidsplan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3' cell equals '3'
        /// </summary>
        public string UIItem3CellValueAsString = "3";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCellValueAsString = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1' cell equals '2'
        /// </summary>
        public string UIItem1CellValueAsString = "2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2,00' cell equals '1.3'
        /// </summary>
        public string UIItem200CellValueAsString = "1.3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOneYearOldPlanData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckOneYearOldPlanDataExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1 år gammel' cell equals '1 år gammel'
        /// </summary>
        public string UIItem1årgammelCellValueAsString = "1 år gammel";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5110DiverseCellValueAsString = "5110 - Diverse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Kalenderplan'
        /// </summary>
        public string UIArbeidsplanCellValueAsString = "Kalenderplan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3' cell equals '12'
        /// </summary>
        public string UIItem3CellValueAsString = "12";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCellValueAsString = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1' cell equals '0'
        /// </summary>
        public string UIItem1CellValueAsString = "0";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2,00' cell equals ''
        /// </summary>
        public string UIItem200CellValueAsString = null;
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell1ValueAsString = null;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOnlyNewEnabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckOnlyNewEnabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Ny' RibbonBaseButtonItem equals 'True'
        /// </summary>
        public bool UINYRibbonBaseButtonItemEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Åpne' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIÅpneRibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Slett' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UISlettRibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Innstillinger' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIInnstillingerRibbonBaseButtonItemEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlanData_step_7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckPlanData_step_7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1' cell equals '3'
        /// </summary>
        public string UIItem1CellValueAsString = "3";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2,00' cell equals '2.25'
        /// </summary>
        public string UIItem200CellValueAsString = "2.25";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1 år gammel' cell equals '1 år gammel'
        /// </summary>
        public string UIItem1årgammelCellValueAsString = "1 år gammel";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlanEffectutated_Step_12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckPlanEffectutated_Step_12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'x'
        /// </summary>
        public string UIItemCellValueAsString = "x";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlanIsOpened'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckPlanIsOpenedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ansatt, En' cell equals 'Ansatt, En'
        /// </summary>
        public string UIAnsattEnCellValueAsString = "Ansatt, En";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ansatt, Åtte' cell equals 'Ansatt, Åtte'
        /// </summary>
        public string UIAnsattÅtteCellValueAsString = "Ansatt, Åtte";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ansatt, Seks' cell equals 'Ansatt, Seks'
        /// </summary>
        public string UIAnsattSeksCellValueAsString = "Ansatt, Seks";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckUTAplanData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckUTAplanDataExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5110DiverseCellValueAsString = "5110 - Diverse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Arbeidsplan'
        /// </summary>
        public string UIArbeidsplanCellValueAsString = "Arbeidsplan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '31.10.2011' cell equals '2011-10-31'
        /// </summary>
        public string UIItem31102011CellValueAsString = "2011-10-31";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3' cell equals '3'
        /// </summary>
        public string UIItem3CellValueAsString = "3";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '09.12.2012' cell equals '2012-12-09'
        /// </summary>
        public string UIItem09122012CellValueAsString = "2012-12-09";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCellValueAsString = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1' cell equals '1'
        /// </summary>
        public string UIItem1CellValueAsString = "1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2,00' cell equals '2'
        /// </summary>
        public string UIItem200CellValueAsString = "2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell1ValueAsString = null;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckUTAPlanData_step_3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckUTAPlanData_step_3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'UTA i rullerende plan' cell equals 'UTA i rullerende plan'
        /// </summary>
        public string UIUTAirullerendeplanCellValueAsString = "UTA i rullerende plan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5110DiverseCell1ValueAsString = "5110 - Diverse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Arbeidsplan' cell equals 'Arbeidsplan'
        /// </summary>
        public string UIArbeidsplanCell1ValueAsString = "Arbeidsplan";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '31.10.2011' cell equals '2011-10-31'
        /// </summary>
        public string UIItem31102011Cell1ValueAsString = "2011-10-31";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3' cell equals '3'
        /// </summary>
        public string UIItem3Cell1ValueAsString = "3";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '09.12.2012' cell equals '2012-12-09'
        /// </summary>
        public string UIItem09122012Cell1ValueAsString = "2012-12-09";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell2ValueAsString = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1' cell equals '1'
        /// </summary>
        public string UIItem1Cell1ValueAsString = "1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2,00' cell equals '2'
        /// </summary>
        public string UIItem200Cell1ValueAsString = "2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell3ValueAsString = null;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWishplan2Data'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckWishplan2DataExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Periode 1' cell equals 'Periode 2'
        /// </summary>
        public string UIPeriode1CellValueAsString = "Periode 2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5110DiverseCellValueAsString = "5110 - Diverse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6' cell equals '6'
        /// </summary>
        public string UIItem6CellValueAsString = "6";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2' cell equals '3'
        /// </summary>
        public string UIItem2CellValueAsString = "3";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Automatisk' cell equals 'Automatisk'
        /// </summary>
        public string UIAutomatiskCellValueAsString = "Automatisk";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '0' cell equals '0'
        /// </summary>
        public string UIItem0CellValueAsString = "0";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Nei' cell equals 'Nei'
        /// </summary>
        public string UINeiCellValueAsString = "Nei";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWishplanButtonState_step_31'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckWishplanButtonState_step_31ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Ny' RibbonBaseButtonItem equals 'True'
        /// </summary>
        public bool UINYRibbonBaseButtonItemEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Åpne' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIÅpneRibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Slett' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UISlettRibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Dupliser' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIDupliserRibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Koble til baseplan' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIKobletilbaseplanRibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Endre til fase 1' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIEndretilfase1RibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Endre til fase 2' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIEndretilfase2RibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Endre til fase 3' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIEndretilfase3RibbonBaseButtonItemEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWishplanData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckWishplanDataExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Periode 1' cell equals 'Periode 1'
        /// </summary>
        public string UIPeriode1CellValueAsString = "Periode 1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5110 - Diverse' cell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5110DiverseCellValueAsString = "5110 - Diverse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6' cell equals '6'
        /// </summary>
        public string UIItem6CellValueAsString = "6";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2' cell equals '2'
        /// </summary>
        public string UIItem2CellValueAsString = "2";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCellValueAsString = null;
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell1ValueAsString = null;
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell2ValueAsString = null;
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '0' cell equals '0'
        /// </summary>
        public string UIItem0CellValueAsString = "0";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Nei' cell equals 'Nei'
        /// </summary>
        public string UINeiCellValueAsString = "Nei";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWishplanPhase'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckWishplanPhaseExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '0' cell equals '1'
        /// </summary>
        public string UIItem0CellValueAsString = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWishplanPhase3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckWishplanPhase3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '0' cell equals '3'
        /// </summary>
        public string UIItem0CellValueAsString = "3";
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Endre til fase 1' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIEndretilfase1RibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Endre til fase 2' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIEndretilfase2RibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Endre til fase 3' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIEndretilfase3RibbonBaseButtonItemEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Koble til baseplan' RibbonBaseButtonItem equals 'False'
        /// </summary>
        public bool UIKobletilbaseplanRibbonBaseButtonItemEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConnectToBaseplan'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConnectToBaseplanParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'drdBasePlan' LookUpEdit
        /// </summary>
        public string UIDrdBasePlanLookUpEditValueAsString = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateNewWishplan_step_32'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateNewWishplan_step_32Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Periode 1' in 'txtName' text box
        /// </summary>
        public string UITxtNameEditValueAsString = "Periode 1";
        
        /// <summary>
        /// Type '{Tab}' in 'txtName' text box
        /// </summary>
        public string UITxtNameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '6 [SelectionStart]0[SelectionLength]1' in 'eNumber' text box
        /// </summary>
        public string UIENumberEditValueAsString = "6 [SelectionStart]0[SelectionLength]1";
        
        /// <summary>
        /// Type '0' in 'rgrpPhaseCount' RadioGroup
        /// </summary>
        public int UIRgrpPhaseCountRadioGroupSelectedIndex = 0;
        
        /// <summary>
        /// Type '{Tab}' in 'rgrpPhaseCount' RadioGroup
        /// </summary>
        public string UIRgrpPhaseCountRadioGroupSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'rgrpPhaseControl' RadioGroup
        /// </summary>
        public int UIRgrpPhaseControlRadioGroupSelectedIndex = 0;
        
        /// <summary>
        /// Type '{Tab}' in 'rgrpPhaseControl' RadioGroup
        /// </summary>
        public string UIRgrpPhaseControlRadioGroupSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateNewWishplan_step_38'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateNewWishplan_step_38Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Periode 2' in 'txtName' text box
        /// </summary>
        public string UITxtNameEditValueAsString = "Periode 2";
        
        /// <summary>
        /// Type '{Tab}' in 'txtName' text box
        /// </summary>
        public string UITxtNameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '6 [SelectionStart]0[SelectionLength]1' in 'eNumber' text box
        /// </summary>
        public string UIENumberEditValueAsString = "6 [SelectionStart]0[SelectionLength]1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EffectuationCheckStep_11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EffectuationCheckStep_11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Valgt' cell equals 'True'
        /// </summary>
        public string UIValgtCellValueAsString = "True";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Valgt' cell equals 'True'
        /// </summary>
        public string UIValgtCell1ValueAsString = "True";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Valgt' cell equals 'True'
        /// </summary>
        public string UIValgtCell2ValueAsString = "True";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'lnkDetail' PopupEdit equals 'Ingen meldinger'
        /// </summary>
        public string UILnkDetailPopupEditValueAsString = "Ingen meldinger";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetAproval'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SetAprovalParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'System.Int32' in '[Row]0[Column]reqColTillitsvalgt' combo box
        /// </summary>
        public string UIRow0ColumnreqColTillComboBoxValueTypeName = "System.Int32";
        
        /// <summary>
        /// Select '2' in '[Row]0[Column]reqColTillitsvalgt' combo box
        /// </summary>
        public string UIRow0ColumnreqColTillComboBoxValueAsString = "2";
        
        /// <summary>
        /// Type 'Avvis' in 'meComment' text box
        /// </summary>
        public string UIMeCommentEditValueAsString = "Avvis";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetDraft'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SetDraftParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'chkDraft' check box
        /// </summary>
        public bool UIChkDraftCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetPlanActive'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SetPlanActiveParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'chkInactive' check box
        /// </summary>
        public bool UIChkInactiveCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetPlanInactive'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SetPlanInactiveParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'chkInactive' check box
        /// </summary>
        public bool UIChkInactiveCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetReadyForApproval'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SetReadyForApprovalParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'chkIsReadyForApproval' check box
        /// </summary>
        public bool UIChkIsReadyForApprovaCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UnCheckDraft'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnCheckDraftParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'chkKladd' check box
        /// </summary>
        public bool UIChkKladdCheckBoxChecked = false;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcMainPanelClient UIPcMainPanelClient
        {
            get
            {
                if ((this.mUIPcMainPanelClient == null))
                {
                    this.mUIPcMainPanelClient = new UIPcMainPanelClient(this);
                }
                return this.mUIPcMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcMainPanelClient mUIPcMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcMainPanelClient : DXTestControl
    {
        
        public UIPcMainPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UITcPanListsTabList UITcPanListsTabList
        {
            get
            {
                if ((this.mUITcPanListsTabList == null))
                {
                    this.mUITcPanListsTabList = new UITcPanListsTabList(this);
                }
                return this.mUITcPanListsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcPanListsTabList mUITcPanListsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcPanListsTabList : DXTestControl
    {
        
        public UITcPanListsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcPanLists";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UITpRosterPlanListClient UITpRosterPlanListClient
        {
            get
            {
                if ((this.mUITpRosterPlanListClient == null))
                {
                    this.mUITpRosterPlanListClient = new UITpRosterPlanListClient(this);
                }
                return this.mUITpRosterPlanListClient;
            }
        }
        
        public DXTestControl UIXtraTabControlHeaderTabPage
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage == null))
                {
                    this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "tcPanListsPageHeader1";
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage;
            }
        }
        
        public DXTestControl UIXtraTabControlHeaderTabPage1
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage1 == null))
                {
                    this.mUIXtraTabControlHeaderTabPage1 = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage1.SearchProperties[DXTestControl.PropertyNames.Name] = "tcPanListsPageHeader0";
                    this.mUIXtraTabControlHeaderTabPage1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage1;
            }
        }
        
        public UITpWishPlanListClient UITpWishPlanListClient
        {
            get
            {
                if ((this.mUITpWishPlanListClient == null))
                {
                    this.mUITpWishPlanListClient = new UITpWishPlanListClient(this);
                }
                return this.mUITpWishPlanListClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpRosterPlanListClient mUITpRosterPlanListClient;
        
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        
        private DXTestControl mUIXtraTabControlHeaderTabPage1;
        
        private UITpWishPlanListClient mUITpWishPlanListClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpRosterPlanListClient : DXTestControl
    {
        
        public UITpRosterPlanListClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpRosterPlanList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanListCustom UIRosterPlanListCustom
        {
            get
            {
                if ((this.mUIRosterPlanListCustom == null))
                {
                    this.mUIRosterPlanListCustom = new UIRosterPlanListCustom(this);
                }
                return this.mUIRosterPlanListCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanListCustom mUIRosterPlanListCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRosterPlanListCustom : DXTestControl
    {
        
        public UIRosterPlanListCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanList";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPnlGridClient UIPnlGridClient
        {
            get
            {
                if ((this.mUIPnlGridClient == null))
                {
                    this.mUIPnlGridClient = new UIPnlGridClient(this);
                }
                return this.mUIPnlGridClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlGridClient mUIPnlGridClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlGridClient : DXTestControl
    {
        
        public UIPnlGridClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRibbonControlRibbon UIRibbonControlRibbon
        {
            get
            {
                if ((this.mUIRibbonControlRibbon == null))
                {
                    this.mUIRibbonControlRibbon = new UIRibbonControlRibbon(this);
                }
                return this.mUIRibbonControlRibbon;
            }
        }
        
        public UIGcRosterPlansTable UIGcRosterPlansTable
        {
            get
            {
                if ((this.mUIGcRosterPlansTable == null))
                {
                    this.mUIGcRosterPlansTable = new UIGcRosterPlansTable(this);
                }
                return this.mUIGcRosterPlansTable;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonControlRibbon mUIRibbonControlRibbon;
        
        private UIGcRosterPlansTable mUIGcRosterPlansTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonControlRibbon : DXRibbon
    {
        
        public UIRibbonControlRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRpHomeRibbonPage UIRpHomeRibbonPage
        {
            get
            {
                if ((this.mUIRpHomeRibbonPage == null))
                {
                    this.mUIRpHomeRibbonPage = new UIRpHomeRibbonPage(this);
                }
                return this.mUIRpHomeRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpHomeRibbonPage mUIRpHomeRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpHomeRibbonPage : DXRibbonPage
    {
        
        public UIRpHomeRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpHome";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRpgPlanRibbonPageGroup UIRpgPlanRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPlanRibbonPageGroup == null))
                {
                    this.mUIRpgPlanRibbonPageGroup = new UIRpgPlanRibbonPageGroup(this);
                }
                return this.mUIRpgPlanRibbonPageGroup;
            }
        }
        
        public UIRpgFiltersRibbonPageGroup UIRpgFiltersRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgFiltersRibbonPageGroup == null))
                {
                    this.mUIRpgFiltersRibbonPageGroup = new UIRpgFiltersRibbonPageGroup(this);
                }
                return this.mUIRpgFiltersRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPlanRibbonPageGroup mUIRpgPlanRibbonPageGroup;
        
        private UIRpgFiltersRibbonPageGroup mUIRpgFiltersRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPlanRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgPlanRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UINYRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUINYRibbonBaseButtonItem == null))
                {
                    this.mUINYRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUINYRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiNewPlan";
                    this.mUINYRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUINYRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUINYRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIÅpneRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIÅpneRibbonBaseButtonItem == null))
                {
                    this.mUIÅpneRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIÅpneRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiOpenPlan";
                    this.mUIÅpneRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIÅpneRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIÅpneRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UISlettRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUISlettRibbonBaseButtonItem == null))
                {
                    this.mUISlettRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiDeletePlan";
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUISlettRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISlettRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIInnstillingerRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIInnstillingerRibbonBaseButtonItem == null))
                {
                    this.mUIInnstillingerRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIInnstillingerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiOpenConfiguration";
                    this.mUIInnstillingerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIInnstillingerRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIInnstillingerRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUINYRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIÅpneRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUISlettRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIInnstillingerRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgFiltersRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgFiltersRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgFilters";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIAktiveRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIAktiveRibbonBaseButtonItem == null))
                {
                    this.mUIAktiveRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIAktiveRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bciShowActivePlans";
                    this.mUIAktiveRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIAktiveRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAktiveRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIInaktiveRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIInaktiveRibbonBaseButtonItem == null))
                {
                    this.mUIInaktiveRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIInaktiveRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bciShowInactivePlans";
                    this.mUIInaktiveRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIInaktiveRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIInaktiveRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIKladdRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIKladdRibbonBaseButtonItem == null))
                {
                    this.mUIKladdRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIKladdRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bciShowDraftPlans";
                    this.mUIKladdRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIKladdRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIKladdRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIAktiveRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIInaktiveRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIKladdRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlansTable : DXGrid
    {
        
        public UIGcRosterPlansTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlans";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem5110DiverseCell
        {
            get
            {
                if ((this.mUIItem5110DiverseCell == null))
                {
                    this.mUIItem5110DiverseCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5110DiverseCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]0[Column]gcolDepartment";
                    this.mUIItem5110DiverseCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5110DiverseCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem5110DiverseCell;
            }
        }
        
        public DXCell UIArbeidsplanCell
        {
            get
            {
                if ((this.mUIArbeidsplanCell == null))
                {
                    this.mUIArbeidsplanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIArbeidsplanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]0[Column]gcolRosterPlanType";
                    this.mUIArbeidsplanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIArbeidsplanCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIArbeidsplanCell;
            }
        }
        
        public DXCell UIItem31102011Cell
        {
            get
            {
                if ((this.mUIItem31102011Cell == null))
                {
                    this.mUIItem31102011Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem31102011Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]0[Column]gcolValidFrom";
                    this.mUIItem31102011Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem31102011Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem31102011Cell;
            }
        }
        
        public DXCell UIItem3Cell
        {
            get
            {
                if ((this.mUIItem3Cell == null))
                {
                    this.mUIItem3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]0[Column]gcolLength";
                    this.mUIItem3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem3Cell;
            }
        }
        
        public DXCell UIItem09122012Cell
        {
            get
            {
                if ((this.mUIItem09122012Cell == null))
                {
                    this.mUIItem09122012Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem09122012Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]0[Column]gcolValidTo";
                    this.mUIItem09122012Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem09122012Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem09122012Cell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]0[Column]gcolEffectuated";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItem1Cell
        {
            get
            {
                if ((this.mUIItem1Cell == null))
                {
                    this.mUIItem1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]0[Column]gcolEmployeeCount";
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem1Cell;
            }
        }
        
        public DXCell UIItem200Cell
        {
            get
            {
                if ((this.mUIItem200Cell == null))
                {
                    this.mUIItem200Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]0[Column]gcolManYears";
                    this.mUIItem200Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem200Cell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]0[Column]gcolApprovalStatus";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIItem1årgammelCell
        {
            get
            {
                if ((this.mUIItem1årgammelCell == null))
                {
                    this.mUIItem1årgammelCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1årgammelCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]0[Column]gcolPlan";
                    this.mUIItem1årgammelCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1årgammelCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem1årgammelCell;
            }
        }
        
        public DXCell UIUTAirullerendeplanCell
        {
            get
            {
                if ((this.mUIUTAirullerendeplanCell == null))
                {
                    this.mUIUTAirullerendeplanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIUTAirullerendeplanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]1[Column]gcolPlan";
                    this.mUIUTAirullerendeplanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIUTAirullerendeplanCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIUTAirullerendeplanCell;
            }
        }
        
        public DXCell UIItem5110DiverseCell1
        {
            get
            {
                if ((this.mUIItem5110DiverseCell1 == null))
                {
                    this.mUIItem5110DiverseCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5110DiverseCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]1[Column]gcolDepartment";
                    this.mUIItem5110DiverseCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5110DiverseCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem5110DiverseCell1;
            }
        }
        
        public DXCell UIArbeidsplanCell1
        {
            get
            {
                if ((this.mUIArbeidsplanCell1 == null))
                {
                    this.mUIArbeidsplanCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIArbeidsplanCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]1[Column]gcolRosterPlanType";
                    this.mUIArbeidsplanCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIArbeidsplanCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIArbeidsplanCell1;
            }
        }
        
        public DXCell UIItem31102011Cell1
        {
            get
            {
                if ((this.mUIItem31102011Cell1 == null))
                {
                    this.mUIItem31102011Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem31102011Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]1[Column]gcolValidFrom";
                    this.mUIItem31102011Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem31102011Cell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem31102011Cell1;
            }
        }
        
        public DXCell UIItem3Cell1
        {
            get
            {
                if ((this.mUIItem3Cell1 == null))
                {
                    this.mUIItem3Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]1[Column]gcolLength";
                    this.mUIItem3Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3Cell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem3Cell1;
            }
        }
        
        public DXCell UIItem09122012Cell1
        {
            get
            {
                if ((this.mUIItem09122012Cell1 == null))
                {
                    this.mUIItem09122012Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem09122012Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]1[Column]gcolValidTo";
                    this.mUIItem09122012Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem09122012Cell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem09122012Cell1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]1[Column]gcolEffectuated";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItem1Cell1
        {
            get
            {
                if ((this.mUIItem1Cell1 == null))
                {
                    this.mUIItem1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]1[Column]gcolEmployeeCount";
                    this.mUIItem1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem1Cell1;
            }
        }
        
        public DXCell UIItem200Cell1
        {
            get
            {
                if ((this.mUIItem200Cell1 == null))
                {
                    this.mUIItem200Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem200Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]1[Column]gcolManYears";
                    this.mUIItem200Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem200Cell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem200Cell1;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]1[Column]gcolApprovalStatus";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXCell UIKopiavKladdCell
        {
            get
            {
                if ((this.mUIKopiavKladdCell == null))
                {
                    this.mUIKopiavKladdCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKopiavKladdCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]2[Column]gcolPlan";
                    this.mUIKopiavKladdCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKopiavKladdCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIKopiavKladdCell;
            }
        }
        
        public DXCell UIItem5110DiverseCell2
        {
            get
            {
                if ((this.mUIItem5110DiverseCell2 == null))
                {
                    this.mUIItem5110DiverseCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5110DiverseCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]2[Column]gcolDepartment";
                    this.mUIItem5110DiverseCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5110DiverseCell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem5110DiverseCell2;
            }
        }
        
        public DXCell UIArbeidsplanCell2
        {
            get
            {
                if ((this.mUIArbeidsplanCell2 == null))
                {
                    this.mUIArbeidsplanCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIArbeidsplanCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]2[Column]gcolRosterPlanType";
                    this.mUIArbeidsplanCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIArbeidsplanCell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIArbeidsplanCell2;
            }
        }
        
        public DXCell UIItem3Cell2
        {
            get
            {
                if ((this.mUIItem3Cell2 == null))
                {
                    this.mUIItem3Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]2[Column]gcolLength";
                    this.mUIItem3Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3Cell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem3Cell2;
            }
        }
        
        public DXCell UIXCell
        {
            get
            {
                if ((this.mUIXCell == null))
                {
                    this.mUIXCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIXCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]2[Column]gcolEffectuated";
                    this.mUIXCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIXCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIXCell;
            }
        }
        
        public DXCell UIItem2Cell
        {
            get
            {
                if ((this.mUIItem2Cell == null))
                {
                    this.mUIItem2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]2[Column]gcolEmployeeCount";
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem2Cell;
            }
        }
        
        public DXCell UIItem130Cell
        {
            get
            {
                if ((this.mUIItem130Cell == null))
                {
                    this.mUIItem130Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem130Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]2[Column]gcolManYears";
                    this.mUIItem130Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem130Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem130Cell;
            }
        }
        
        public DXCell UIItem05022018Cell
        {
            get
            {
                if ((this.mUIItem05022018Cell == null))
                {
                    this.mUIItem05022018Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem05022018Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]2[Column]gcolValidFrom";
                    this.mUIItem05022018Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem05022018Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem05022018Cell;
            }
        }
        
        public DXCell UIItem05082018Cell
        {
            get
            {
                if ((this.mUIItem05082018Cell == null))
                {
                    this.mUIItem05082018Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem05082018Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlansGridControlCell[View]gvRosterPlans[Row]2[Column]gcolValidTo";
                    this.mUIItem05082018Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem05082018Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem05082018Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem5110DiverseCell;
        
        private DXCell mUIArbeidsplanCell;
        
        private DXCell mUIItem31102011Cell;
        
        private DXCell mUIItem3Cell;
        
        private DXCell mUIItem09122012Cell;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIItem1Cell;
        
        private DXCell mUIItem200Cell;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIItem1årgammelCell;
        
        private DXCell mUIUTAirullerendeplanCell;
        
        private DXCell mUIItem5110DiverseCell1;
        
        private DXCell mUIArbeidsplanCell1;
        
        private DXCell mUIItem31102011Cell1;
        
        private DXCell mUIItem3Cell1;
        
        private DXCell mUIItem09122012Cell1;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItem1Cell1;
        
        private DXCell mUIItem200Cell1;
        
        private DXCell mUIItemCell3;
        
        private DXCell mUIKopiavKladdCell;
        
        private DXCell mUIItem5110DiverseCell2;
        
        private DXCell mUIArbeidsplanCell2;
        
        private DXCell mUIItem3Cell2;
        
        private DXCell mUIXCell;
        
        private DXCell mUIItem2Cell;
        
        private DXCell mUIItem130Cell;
        
        private DXCell mUIItem05022018Cell;
        
        private DXCell mUIItem05082018Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpWishPlanListClient : DXTestControl
    {
        
        public UITpWishPlanListClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpWishPlanList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIWishPlanListCustom UIWishPlanListCustom
        {
            get
            {
                if ((this.mUIWishPlanListCustom == null))
                {
                    this.mUIWishPlanListCustom = new UIWishPlanListCustom(this);
                }
                return this.mUIWishPlanListCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWishPlanListCustom mUIWishPlanListCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWishPlanListCustom : DXTestControl
    {
        
        public UIWishPlanListCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "wishPlanList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WishPlanList";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGsPanelControl2Client UIGsPanelControl2Client
        {
            get
            {
                if ((this.mUIGsPanelControl2Client == null))
                {
                    this.mUIGsPanelControl2Client = new UIGsPanelControl2Client(this);
                }
                return this.mUIGsPanelControl2Client;
            }
        }
        #endregion
        
        #region Fields
        private UIGsPanelControl2Client mUIGsPanelControl2Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsPanelControl2Client : DXTestControl
    {
        
        public UIGsPanelControl2Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsPanelControl2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRibbonControl1Ribbon UIRibbonControl1Ribbon
        {
            get
            {
                if ((this.mUIRibbonControl1Ribbon == null))
                {
                    this.mUIRibbonControl1Ribbon = new UIRibbonControl1Ribbon(this);
                }
                return this.mUIRibbonControl1Ribbon;
            }
        }
        
        public UIGcWishPeriodsTable UIGcWishPeriodsTable
        {
            get
            {
                if ((this.mUIGcWishPeriodsTable == null))
                {
                    this.mUIGcWishPeriodsTable = new UIGcWishPeriodsTable(this);
                }
                return this.mUIGcWishPeriodsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonControl1Ribbon mUIRibbonControl1Ribbon;
        
        private UIGcWishPeriodsTable mUIGcWishPeriodsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonControl1Ribbon : DXRibbon
    {
        
        public UIRibbonControl1Ribbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRpHomeRibbonPage1 UIRpHomeRibbonPage
        {
            get
            {
                if ((this.mUIRpHomeRibbonPage == null))
                {
                    this.mUIRpHomeRibbonPage = new UIRpHomeRibbonPage1(this);
                }
                return this.mUIRpHomeRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpHomeRibbonPage1 mUIRpHomeRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpHomeRibbonPage1 : DXRibbonPage
    {
        
        public UIRpHomeRibbonPage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpHome";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRpgPeriodRibbonPageGroup UIRpgPeriodRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPeriodRibbonPageGroup == null))
                {
                    this.mUIRpgPeriodRibbonPageGroup = new UIRpgPeriodRibbonPageGroup(this);
                }
                return this.mUIRpgPeriodRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgPeriodRibbonPageGroup mUIRpgPeriodRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPeriodRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgPeriodRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPeriod";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UINYRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUINYRibbonBaseButtonItem == null))
                {
                    this.mUINYRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUINYRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiNewPeriod";
                    this.mUINYRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUINYRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUINYRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIÅpneRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIÅpneRibbonBaseButtonItem == null))
                {
                    this.mUIÅpneRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIÅpneRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiOpenPeriod";
                    this.mUIÅpneRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIÅpneRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIÅpneRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UISlettRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUISlettRibbonBaseButtonItem == null))
                {
                    this.mUISlettRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiDeletePeriod";
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUISlettRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISlettRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIDupliserRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIDupliserRibbonBaseButtonItem == null))
                {
                    this.mUIDupliserRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIDupliserRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiDuplicatePeriod";
                    this.mUIDupliserRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIDupliserRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIDupliserRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIKobletilbaseplanRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIKobletilbaseplanRibbonBaseButtonItem == null))
                {
                    this.mUIKobletilbaseplanRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIKobletilbaseplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiConnectToBasePlan";
                    this.mUIKobletilbaseplanRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIKobletilbaseplanRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIKobletilbaseplanRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIEndretilfase1RibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIEndretilfase1RibbonBaseButtonItem == null))
                {
                    this.mUIEndretilfase1RibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIEndretilfase1RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiChangeToPhase1";
                    this.mUIEndretilfase1RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIEndretilfase1RibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIEndretilfase1RibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIEndretilfase2RibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIEndretilfase2RibbonBaseButtonItem == null))
                {
                    this.mUIEndretilfase2RibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIEndretilfase2RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiChangeToPhase2";
                    this.mUIEndretilfase2RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIEndretilfase2RibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIEndretilfase2RibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIEndretilfase3RibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIEndretilfase3RibbonBaseButtonItem == null))
                {
                    this.mUIEndretilfase3RibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIEndretilfase3RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiChangeToPhase3";
                    this.mUIEndretilfase3RibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIEndretilfase3RibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIEndretilfase3RibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUINYRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIÅpneRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUISlettRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIDupliserRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIKobletilbaseplanRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIEndretilfase1RibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIEndretilfase2RibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIEndretilfase3RibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcWishPeriodsTable : DXGrid
    {
        
        public UIGcWishPeriodsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriods";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIPeriode1Cell
        {
            get
            {
                if ((this.mUIPeriode1Cell == null))
                {
                    this.mUIPeriode1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIPeriode1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolName";
                    this.mUIPeriode1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIPeriode1Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIPeriode1Cell;
            }
        }
        
        public DXCell UIItem5110DiverseCell
        {
            get
            {
                if ((this.mUIItem5110DiverseCell == null))
                {
                    this.mUIItem5110DiverseCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5110DiverseCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolDepartment";
                    this.mUIItem5110DiverseCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5110DiverseCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem5110DiverseCell;
            }
        }
        
        public DXCell UIItem6Cell
        {
            get
            {
                if ((this.mUIItem6Cell == null))
                {
                    this.mUIItem6Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolWeekCount";
                    this.mUIItem6Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem6Cell;
            }
        }
        
        public DXCell UIItem2Cell
        {
            get
            {
                if ((this.mUIItem2Cell == null))
                {
                    this.mUIItem2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolPhaseCount";
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem2Cell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolPhase1Start";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolPhase2Start";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolPhase3Start";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolCurrentPhase";
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public DXCell UINeiCell
        {
            get
            {
                if ((this.mUINeiCell == null))
                {
                    this.mUINeiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINeiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolUseVeto";
                    this.mUINeiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINeiCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUINeiCell;
            }
        }
        
        public DXCell UIItem05022018Cell
        {
            get
            {
                if ((this.mUIItem05022018Cell == null))
                {
                    this.mUIItem05022018Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem05022018Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolFromDate";
                    this.mUIItem05022018Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem05022018Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem05022018Cell;
            }
        }
        
        public DXCell UIItem18032018Cell
        {
            get
            {
                if ((this.mUIItem18032018Cell == null))
                {
                    this.mUIItem18032018Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem18032018Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolToDate";
                    this.mUIItem18032018Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem18032018Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem18032018Cell;
            }
        }
        
        public DXButton UIPeriode1Button
        {
            get
            {
                if ((this.mUIPeriode1Button == null))
                {
                    this.mUIPeriode1Button = new DXButton(this);
                    #region Search Criteria
                    this.mUIPeriode1Button.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCellButton[View]gvMaster[Row]0[Column]gcolName";
                    this.mUIPeriode1Button.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCellButton";
                    this.mUIPeriode1Button.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIPeriode1Button;
            }
        }
        
        public DXCell UIItem770850773Cell
        {
            get
            {
                if ((this.mUIItem770850773Cell == null))
                {
                    this.mUIItem770850773Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem770850773Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvDetails[Row]0[Column]gcolOpen";
                    this.mUIItem770850773Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem770850773Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem770850773Cell;
            }
        }
        
        public DXCell UIItem770850773Cell1
        {
            get
            {
                if ((this.mUIItem770850773Cell1 == null))
                {
                    this.mUIItem770850773Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem770850773Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvDetails[Row]0[Column]gcolConfigure";
                    this.mUIItem770850773Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem770850773Cell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem770850773Cell1;
            }
        }
        
        public DXCell UIAutomatiskCell
        {
            get
            {
                if ((this.mUIAutomatiskCell == null))
                {
                    this.mUIAutomatiskCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAutomatiskCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvMaster[Row]0[Column]gcolPhaseControl";
                    this.mUIAutomatiskCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAutomatiskCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAutomatiskCell;
            }
        }
        
        public DXCell UIItem770850773Cell2
        {
            get
            {
                if ((this.mUIItem770850773Cell2 == null))
                {
                    this.mUIItem770850773Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem770850773Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcWishPeriodsGridControlCell[View]gvDetails[Row]0[Column]gcolDelete";
                    this.mUIItem770850773Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem770850773Cell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem770850773Cell2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIPeriode1Cell;
        
        private DXCell mUIItem5110DiverseCell;
        
        private DXCell mUIItem6Cell;
        
        private DXCell mUIItem2Cell;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItem0Cell;
        
        private DXCell mUINeiCell;
        
        private DXCell mUIItem05022018Cell;
        
        private DXCell mUIItem18032018Cell;
        
        private DXButton mUIPeriode1Button;
        
        private DXCell mUIItem770850773Cell;
        
        private DXCell mUIItem770850773Cell1;
        
        private DXCell mUIAutomatiskCell;
        
        private DXCell mUIItem770850773Cell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanInnstilliWindow : DXWindow
    {
        
        public UIArbeidsplanInnstilliWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan - Innstillinger";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public UITcDataTabList UITcDataTabList
        {
            get
            {
                if ((this.mUITcDataTabList == null))
                {
                    this.mUITcDataTabList = new UITcDataTabList(this);
                }
                return this.mUITcDataTabList;
            }
        }
        
        public UIGSPanelControlClient UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UITcDataTabList mUITcDataTabList;
        
        private UIGSPanelControlClient mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcDataTabList : DXTestControl
    {
        
        public UITcDataTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcData";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public UITpConfigurationClient UITpConfigurationClient
        {
            get
            {
                if ((this.mUITpConfigurationClient == null))
                {
                    this.mUITpConfigurationClient = new UITpConfigurationClient(this);
                }
                return this.mUITpConfigurationClient;
            }
        }
        
        public DXTestControl UIXtraTabControlHeaderTabPage
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage == null))
                {
                    this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "tcDataPageHeader1";
                    this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage;
            }
        }
        
        public UITpStaffingPlanClient UITpStaffingPlanClient
        {
            get
            {
                if ((this.mUITpStaffingPlanClient == null))
                {
                    this.mUITpStaffingPlanClient = new UITpStaffingPlanClient(this);
                }
                return this.mUITpStaffingPlanClient;
            }
        }
        
        public DXTestControl UIXtraTabControlHeaderTabPage1
        {
            get
            {
                if ((this.mUIXtraTabControlHeaderTabPage1 == null))
                {
                    this.mUIXtraTabControlHeaderTabPage1 = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIXtraTabControlHeaderTabPage1.SearchProperties[DXTestControl.PropertyNames.Name] = "tcDataPageHeader0";
                    this.mUIXtraTabControlHeaderTabPage1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
                    this.mUIXtraTabControlHeaderTabPage1.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIXtraTabControlHeaderTabPage1;
            }
        }
        #endregion
        
        #region Fields
        private UITpConfigurationClient mUITpConfigurationClient;
        
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        
        private UITpStaffingPlanClient mUITpStaffingPlanClient;
        
        private DXTestControl mUIXtraTabControlHeaderTabPage1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpConfigurationClient : DXTestControl
    {
        
        public UITpConfigurationClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpConfiguration";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public UIPaCenterClient UIPaCenterClient
        {
            get
            {
                if ((this.mUIPaCenterClient == null))
                {
                    this.mUIPaCenterClient = new UIPaCenterClient(this);
                }
                return this.mUIPaCenterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaCenterClient mUIPaCenterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaCenterClient : DXTestControl
    {
        
        public UIPaCenterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paCenter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIENameEdit
        {
            get
            {
                if ((this.mUIENameEdit == null))
                {
                    this.mUIENameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eName";
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENameEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIENameEdit;
            }
        }
        
        public DXLookUpEdit UILeRosterplanTypeLookUpEdit
        {
            get
            {
                if ((this.mUILeRosterplanTypeLookUpEdit == null))
                {
                    this.mUILeRosterplanTypeLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILeRosterplanTypeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leRosterplanType";
                    this.mUILeRosterplanTypeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    #endregion
                }
                return this.mUILeRosterplanTypeLookUpEdit;
            }
        }
        
        public DXTextEdit UIENumber1Edit
        {
            get
            {
                if ((this.mUIENumber1Edit == null))
                {
                    this.mUIENumber1Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[1]";
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber1Edit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIENumber1Edit;
            }
        }
        
        public DXCheckBox UIChkIsReadyForApprovaCheckBox
        {
            get
            {
                if ((this.mUIChkIsReadyForApprovaCheckBox == null))
                {
                    this.mUIChkIsReadyForApprovaCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkIsReadyForApprovaCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkIsReadyForApproval";
                    this.mUIChkIsReadyForApprovaCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkIsReadyForApprovaCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkIsReadyForApprovaCheckBox;
            }
        }
        
        public DXCheckBox UIChkDraftCheckBox
        {
            get
            {
                if ((this.mUIChkDraftCheckBox == null))
                {
                    this.mUIChkDraftCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkDraftCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkDraft";
                    this.mUIChkDraftCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkDraftCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkDraftCheckBox;
            }
        }
        
        public UIEValidToDateCustom UIEValidToDateCustom
        {
            get
            {
                if ((this.mUIEValidToDateCustom == null))
                {
                    this.mUIEValidToDateCustom = new UIEValidToDateCustom(this);
                }
                return this.mUIEValidToDateCustom;
            }
        }
        
        public DXCheckBox UIChkInactiveCheckBox
        {
            get
            {
                if ((this.mUIChkInactiveCheckBox == null))
                {
                    this.mUIChkInactiveCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkInactiveCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkInactive";
                    this.mUIChkInactiveCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkInactiveCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkInactiveCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIENameEdit;
        
        private DXLookUpEdit mUILeRosterplanTypeLookUpEdit;
        
        private DXTextEdit mUIENumber1Edit;
        
        private DXCheckBox mUIChkIsReadyForApprovaCheckBox;
        
        private DXCheckBox mUIChkDraftCheckBox;
        
        private UIEValidToDateCustom mUIEValidToDateCustom;
        
        private DXCheckBox mUIChkInactiveCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEValidToDateCustom : DXTestControl
    {
        
        public UIEValidToDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eValidToDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpStaffingPlanClient : DXTestControl
    {
        
        public UITpStaffingPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpStaffingPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public UIGcStaffingPlansTable UIGcStaffingPlansTable
        {
            get
            {
                if ((this.mUIGcStaffingPlansTable == null))
                {
                    this.mUIGcStaffingPlansTable = new UIGcStaffingPlansTable(this);
                }
                return this.mUIGcStaffingPlansTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcStaffingPlansTable mUIGcStaffingPlansTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcStaffingPlansTable : DXGrid
    {
        
        public UIGcStaffingPlansTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingPlans";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXCell UIValgtCell
        {
            get
            {
                if ((this.mUIValgtCell == null))
                {
                    this.mUIValgtCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIValgtCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcStaffingPlansGridControlCell[View]gvStaffingPlans[Row]0[Column]gcChecked";
                    this.mUIValgtCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIValgtCell.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIValgtCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIValgtCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient : DXTestControl
    {
        
        public UIGSPanelControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paBottom";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIRcMenuRibbon UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        
        public UIDpnlVisualizationDockPanel UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        
        private UIRcMenuRibbon mUIRcMenuRibbon;
        
        private UIDpnlVisualizationDockPanel mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_1";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit == null))
                {
                    this.mUIRow0ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_5";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_5";
                    this.mUIRow0ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_1";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_4";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit == null))
                {
                    this.mUIRow1ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_1";
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_4";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit == null))
                {
                    this.mUIRow2ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_4";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXCell UIItemCell21
        {
            get
            {
                if ((this.mUIItemCell21 == null))
                {
                    this.mUIItemCell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_7";
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell21.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell21;
            }
        }
        
        public DXCell UIItemCell31
        {
            get
            {
                if ((this.mUIItemCell31 == null))
                {
                    this.mUIItemCell31 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_11";
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell31.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell31;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit11
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit11 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit11 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_7";
                    this.mUIRow0ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit11;
            }
        }
        
        public DXCell UIItemCell41
        {
            get
            {
                if ((this.mUIItemCell41 == null))
                {
                    this.mUIItemCell41 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell41.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_14";
                    this.mUIItemCell41.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell41.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell41;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_14";
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell51
        {
            get
            {
                if ((this.mUIItemCell51 == null))
                {
                    this.mUIItemCell51 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell51.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIItemCell51.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell51.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell51;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell71
        {
            get
            {
                if ((this.mUIItemCell71 == null))
                {
                    this.mUIItemCell71 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell71.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIItemCell71.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell71.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell71;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_11";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit11
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit11 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit11 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIRow1ColumnRosterCellEdit11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit11;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_14";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXCell UIItemCell10
        {
            get
            {
                if ((this.mUIItemCell10 == null))
                {
                    this.mUIItemCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_18";
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell10;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_14";
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_19";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXCell UIItemCell52
        {
            get
            {
                if ((this.mUIItemCell52 == null))
                {
                    this.mUIItemCell52 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell52.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_18";
                    this.mUIItemCell52.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell52.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell52;
            }
        }
        
        public DXCell UIAnsattEnCell
        {
            get
            {
                if ((this.mUIAnsattEnCell == null))
                {
                    this.mUIAnsattEnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_EmployeeName";
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattEnCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattEnCell;
            }
        }
        
        public DXCell UIAnsattÅtteCell
        {
            get
            {
                if ((this.mUIAnsattÅtteCell == null))
                {
                    this.mUIAnsattÅtteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattÅtteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]Col_EmployeeName";
                    this.mUIAnsattÅtteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattÅtteCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattÅtteCell;
            }
        }
        
        public DXCell UIAnsattSeksCell
        {
            get
            {
                if ((this.mUIAnsattSeksCell == null))
                {
                    this.mUIAnsattSeksCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]Col_EmployeeName";
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattSeksCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsattSeksCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItemCell3;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell5;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell7;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit;
        
        private DXCell mUIItemCell11;
        
        private DXCell mUIItemCell21;
        
        private DXCell mUIItemCell31;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit11;
        
        private DXCell mUIItemCell41;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell51;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell71;
        
        private DXCell mUIItemCell8;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit11;
        
        private DXCell mUIItemCell9;
        
        private DXCell mUIItemCell10;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell12;
        
        private DXCell mUIItemCell52;
        
        private DXCell mUIAnsattEnCell;
        
        private DXCell mUIAnsattÅtteCell;
        
        private DXCell mUIAnsattSeksCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRcMenuRibbon : DXRibbon
    {
        
        public UIRcMenuRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpPlanRibbonPage UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpPlanRibbonPage mUIRpPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpPlanRibbonPage : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRibbonPageGroup9RibbonPageGroup UIRibbonPageGroup9RibbonPageGroup
        {
            get
            {
                if ((this.mUIRibbonPageGroup9RibbonPageGroup == null))
                {
                    this.mUIRibbonPageGroup9RibbonPageGroup = new UIRibbonPageGroup9RibbonPageGroup(this);
                }
                return this.mUIRibbonPageGroup9RibbonPageGroup;
            }
        }
        
        public UIRpgPlanRibbonPageGroup1 UIRpgPlanRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgPlanRibbonPageGroup == null))
                {
                    this.mUIRpgPlanRibbonPageGroup = new UIRpgPlanRibbonPageGroup1(this);
                }
                return this.mUIRpgPlanRibbonPageGroup;
            }
        }
        
        public UIGrpEffectuateRibbonPageGroup UIGrpEffectuateRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpEffectuateRibbonPageGroup == null))
                {
                    this.mUIGrpEffectuateRibbonPageGroup = new UIGrpEffectuateRibbonPageGroup(this);
                }
                return this.mUIGrpEffectuateRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonPageGroup9RibbonPageGroup mUIRibbonPageGroup9RibbonPageGroup;
        
        private UIRpgPlanRibbonPageGroup1 mUIRpgPlanRibbonPageGroup;
        
        private UIGrpEffectuateRibbonPageGroup mUIGrpEffectuateRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonPageGroup9RibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRibbonPageGroup9RibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonPageGroup9";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIRedigerRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIRedigerRibbonBaseButtonItem == null))
                {
                    this.mUIRedigerRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIRedigerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEditMode";
                    this.mUIRedigerRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIRedigerRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRedigerRibbonBaseButtonItem;
            }
        }
        
        public DXRibbonButtonItem UIBtnOkRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIBtnOkRibbonBaseButtonItem == null))
                {
                    this.mUIBtnOkRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIBtnOkRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIBtnOkRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIBtnOkRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBtnOkRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIRedigerRibbonBaseButtonItem;
        
        private DXRibbonButtonItem mUIBtnOkRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRpgPlanRibbonPageGroup1 : DXRibbonPageGroup
    {
        
        public UIRpgPlanRibbonPageGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIGeneratorRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIGeneratorRibbonBaseButtonItem == null))
                {
                    this.mUIGeneratorRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIGeneratorRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOpenGenerator";
                    this.mUIGeneratorRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIGeneratorRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGeneratorRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIGeneratorRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpEffectuateRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpEffectuateRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpEffectuate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonItem UIIverksettingRibbonItem
        {
            get
            {
                if ((this.mUIIverksettingRibbonItem == null))
                {
                    this.mUIIverksettingRibbonItem = new DXRibbonItem(this);
                    #region Search Criteria
                    this.mUIIverksettingRibbonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "mnuEffectuateRevolving";
                    this.mUIIverksettingRibbonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonItem";
                    this.mUIIverksettingRibbonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIIverksettingRibbonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonItem mUIIverksettingRibbonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDpnlVisualizationDockPanel : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDockPanel3_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITcVisualizationTabList UITcVisualizationTabList
        {
            get
            {
                if ((this.mUITcVisualizationTabList == null))
                {
                    this.mUITcVisualizationTabList = new UITcVisualizationTabList(this);
                }
                return this.mUITcVisualizationTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcVisualizationTabList mUITcVisualizationTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITcVisualizationTabList : DXTestControl
    {
        
        public UITcVisualizationTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
         public UITpApprovalClient UITpApprovalClient
        {
            get
            {
                if ((this.mUITpApprovalClient == null))
                {
                    this.mUITpApprovalClient = new UITpApprovalClient(this);
                }
                return this.mUITpApprovalClient;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIXtraTabControlHeaderTabPage;
        
        private UITpApprovalClient mUITpApprovalClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITpApprovalClient : DXTestControl
    {
        
        public UITpApprovalClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcMainCustom UILcMainCustom
        {
            get
            {
                if ((this.mUILcMainCustom == null))
                {
                    this.mUILcMainCustom = new UILcMainCustom(this);
                }
                return this.mUILcMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainCustom mUILcMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILcMainCustom : DXTestControl
    {
        
        public UILcMainCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroup1LayoutGroup UILayoutControlGroup1LayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroup1LayoutGroup == null))
                {
                    this.mUILayoutControlGroup1LayoutGroup = new UILayoutControlGroup1LayoutGroup(this);
                }
                return this.mUILayoutControlGroup1LayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroup1LayoutGroup mUILayoutControlGroup1LayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroup1LayoutGroup : DXBaseLayoutItem
    {
        
        public UILayoutControlGroup1LayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroup1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlItem2LayoutControlItem UILayoutControlItem2LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem2LayoutControlItem == null))
                {
                    this.mUILayoutControlItem2LayoutControlItem = new UILayoutControlItem2LayoutControlItem(this);
                }
                return this.mUILayoutControlItem2LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlItem2LayoutControlItem mUILayoutControlItem2LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlItem2LayoutControlItem : DXBaseLayoutItem
    {
        
        public UILayoutControlItem2LayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcApprovalTable UIGcApprovalTable
        {
            get
            {
                if ((this.mUIGcApprovalTable == null))
                {
                    this.mUIGcApprovalTable = new UIGcApprovalTable(this);
                }
                return this.mUIGcApprovalTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcApprovalTable mUIGcApprovalTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcApprovalTable : DXGrid
    {
        
        public UIGcApprovalTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColTillitsvalgt";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXComboBox UIRow0ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow0ColumnreqColTillComboBox == null))
                {
                    this.mUIRow0ColumnreqColTillComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUIRow0ColumnreqColTillComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColTillitsvalgt";
                    this.mUIRow0ColumnreqColTillComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
                    this.mUIRow0ColumnreqColTillComboBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnreqColTillComboBox;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]reqColLeder";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public UIRow1ColumnreqColLedeComboBox UIRow1ColumnreqColLedeComboBox
        {
            get
            {
                if ((this.mUIRow1ColumnreqColLedeComboBox == null))
                {
                    this.mUIRow1ColumnreqColLedeComboBox = new UIRow1ColumnreqColLedeComboBox(this);
                }
                return this.mUIRow1ColumnreqColLedeComboBox;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]reqColTillitsvalgt";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public UIRow1ColumnreqColTillComboBox UIRow1ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow1ColumnreqColTillComboBox == null))
                {
                    this.mUIRow1ColumnreqColTillComboBox = new UIRow1ColumnreqColTillComboBox(this);
                }
                return this.mUIRow1ColumnreqColTillComboBox;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]2[Column]reqColLeder";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public UIRow2ColumnreqColLedeComboBox UIRow2ColumnreqColLedeComboBox
        {
            get
            {
                if ((this.mUIRow2ColumnreqColLedeComboBox == null))
                {
                    this.mUIRow2ColumnreqColLedeComboBox = new UIRow2ColumnreqColLedeComboBox(this);
                }
                return this.mUIRow2ColumnreqColLedeComboBox;
            }
        }
        
        public DXCell UIItemCell21
        {
            get
            {
                if ((this.mUIItemCell21 == null))
                {
                    this.mUIItemCell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]2[Column]reqColTillitsvalgt";
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell21.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell21;
            }
        }
        
        public UIRow2ColumnreqColTillComboBox UIRow2ColumnreqColTillComboBox
        {
            get
            {
                if ((this.mUIRow2ColumnreqColTillComboBox == null))
                {
                    this.mUIRow2ColumnreqColTillComboBox = new UIRow2ColumnreqColTillComboBox(this);
                }
                return this.mUIRow2ColumnreqColTillComboBox;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]reqColLeder";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public UIRow0ColumnreqColLedeComboBox UIRow0ColumnreqColLedeComboBox
        {
            get
            {
                if ((this.mUIRow0ColumnreqColLedeComboBox == null))
                {
                    this.mUIRow0ColumnreqColLedeComboBox = new UIRow0ColumnreqColLedeComboBox(this);
                }
                return this.mUIRow0ColumnreqColLedeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXComboBox mUIRow0ColumnreqColTillComboBox;
        
        private DXCell mUIItemCell1;
        
        private UIRow1ColumnreqColLedeComboBox mUIRow1ColumnreqColLedeComboBox;
        
        private DXCell mUIItemCell2;
        
        private UIRow1ColumnreqColTillComboBox mUIRow1ColumnreqColTillComboBox;
        
        private DXCell mUIItemCell11;
        
        private UIRow2ColumnreqColLedeComboBox mUIRow2ColumnreqColLedeComboBox;
        
        private DXCell mUIItemCell21;
        
        private UIRow2ColumnreqColTillComboBox mUIRow2ColumnreqColTillComboBox;
        
        private DXCell mUIItemCell3;
        
        private UIRow0ColumnreqColLedeComboBox mUIRow0ColumnreqColLedeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow1ColumnreqColLedeComboBox : DXComboBox
    {
        
        public UIRow1ColumnreqColLedeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColLeder";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupImageComboBoxEdWindow : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColLederPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupImageComboBoxEdList : DXListBox
    {
        
        public UIPopupImageComboBoxEdList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColLederPopupFormPopu" +
                "pImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColLederPopupFormPopu" +
                        "pImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow1ColumnreqColTillComboBox : DXComboBox
    {
        
        public UIRow1ColumnreqColTillComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow1 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow1(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow1 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupImageComboBoxEdWindow1 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList1 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList1(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList1 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupImageComboBoxEdList1 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]1[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow2ColumnreqColLedeComboBox : DXComboBox
    {
        
        public UIRow2ColumnreqColLedeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColLeder";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow2 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow2(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow2 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupImageComboBoxEdWindow2 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColLederPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList2 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList2(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList2 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupImageComboBoxEdList2 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColLederPopupFormPopu" +
                "pImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColLederPopupFormPopu" +
                        "pImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow2ColumnreqColTillComboBox : DXComboBox
    {
        
        public UIRow2ColumnreqColTillComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgt";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow3 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow3(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow3 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupImageComboBoxEdWindow3 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgtPopupF" +
                "orm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList3 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList3(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList3 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupImageComboBoxEdList3 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgtPopupF" +
                "ormPopupImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]2[Column]reqColTillitsvalgtPopupF" +
                        "ormPopupImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow0ColumnreqColLedeComboBox : DXComboBox
    {
        
        public UIRow0ColumnreqColLedeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLeder";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdWindow4 UIPopupImageComboBoxEdWindow
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdWindow == null))
                {
                    this.mUIPopupImageComboBoxEdWindow = new UIPopupImageComboBoxEdWindow4(this);
                }
                return this.mUIPopupImageComboBoxEdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdWindow4 mUIPopupImageComboBoxEdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupImageComboBoxEdWindow4 : DXWindow
    {
        
        public UIPopupImageComboBoxEdWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLederPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupImageComboBoxEdList4 UIPopupImageComboBoxEdList
        {
            get
            {
                if ((this.mUIPopupImageComboBoxEdList == null))
                {
                    this.mUIPopupImageComboBoxEdList = new UIPopupImageComboBoxEdList4(this);
                }
                return this.mUIPopupImageComboBoxEdList;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupImageComboBoxEdList4 mUIPopupImageComboBoxEdList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPopupImageComboBoxEdList4 : DXListBox
    {
        
        public UIPopupImageComboBoxEdList4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLederPopupFormPopu" +
                "pImageComboBoxEditListBox[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBox";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGodkjennListItem
        {
            get
            {
                if ((this.mUIGodkjennListItem == null))
                {
                    this.mUIGodkjennListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalImageComboBoxEdit[View]gvApproval[Row]0[Column]reqColLederPopupFormPopu" +
                        "pImageComboBoxEditListBox[0]Item[1]";
                    this.mUIGodkjennListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupImageComboBoxEditListBoxItem";
                    this.mUIGodkjennListItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGodkjennListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGodkjennListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAnsatteiarbeidsplanWindow : DXWindow
    {
        
        public UIAnsatteiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlOuterClient UIPanelControlOuterClient
        {
            get
            {
                if ((this.mUIPanelControlOuterClient == null))
                {
                    this.mUIPanelControlOuterClient = new UIPanelControlOuterClient(this);
                }
                return this.mUIPanelControlOuterClient;
            }
        }
        
        public DXButton UISimpleButtonButton
        {
            get
            {
                if ((this.mUISimpleButtonButton == null))
                {
                    this.mUISimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonOk";
                    this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUISimpleButtonButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUISimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlOuterClient mUIPanelControlOuterClient;
        
        private DXButton mUISimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPanelControlOuterClient : DXTestControl
    {
        
        public UIPanelControlOuterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient mUIPanelControlLeftClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPanelControlLeftClient : DXTestControl
    {
        
        public UIPanelControlLeftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIAnsatteButton
        {
            get
            {
                if ((this.mUIAnsatteButton == null))
                {
                    this.mUIAnsatteButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAnsatteButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonAdd";
                    this.mUIAnsatteButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
                    this.mUIAnsatteButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIAnsatteButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIAnsatteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILeggtilansatteWindow : DXWindow
    {
        
        public UILeggtilansatteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Legg til ansatte";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom1 UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom1(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        
        public DXButton UISimpleButtonButton
        {
            get
            {
                if ((this.mUISimpleButtonButton == null))
                {
                    this.mUISimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonOk";
                    this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUISimpleButtonButton.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUISimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom1 mUIViewHostCustom;
        
        private DXButton mUISimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIViewHostCustom1 : DXTestControl
    {
        
        public UIViewHostCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient1 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient1(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient1 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcViewClient1 : DXTestControl
    {
        
        public UIPcViewClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UISelectDepartmentEmplCustom UISelectDepartmentEmplCustom
        {
            get
            {
                if ((this.mUISelectDepartmentEmplCustom == null))
                {
                    this.mUISelectDepartmentEmplCustom = new UISelectDepartmentEmplCustom(this);
                }
                return this.mUISelectDepartmentEmplCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISelectDepartmentEmplCustom mUISelectDepartmentEmplCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISelectDepartmentEmplCustom : DXTestControl
    {
        
        public UISelectDepartmentEmplCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SelectDepartmentEmployeesView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SelectDepartmentEmployeesView";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentContainerClient UIPcContentContainerClient
        {
            get
            {
                if ((this.mUIPcContentContainerClient == null))
                {
                    this.mUIPcContentContainerClient = new UIPcContentContainerClient(this);
                }
                return this.mUIPcContentContainerClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentContainerClient mUIPcContentContainerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcContentContainerClient : DXTestControl
    {
        
        public UIPcContentContainerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContentContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIGcDepartmentEmployeeTable UIGcDepartmentEmployeeTable
        {
            get
            {
                if ((this.mUIGcDepartmentEmployeeTable == null))
                {
                    this.mUIGcDepartmentEmployeeTable = new UIGcDepartmentEmployeeTable(this);
                }
                return this.mUIGcDepartmentEmployeeTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDepartmentEmployeeTable mUIGcDepartmentEmployeeTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcDepartmentEmployeeTable : DXGrid
    {
        
        public UIGcDepartmentEmployeeTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnsattEnCell
        {
            get
            {
                if ((this.mUIAnsattEnCell == null))
                {
                    this.mUIAnsattEnCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]0[Column]colE" +
                        "mployee";
                    this.mUIAnsattEnCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattEnCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattEnCell;
            }
        }
        
        public DXCell UIAnsattToCell
        {
            get
            {
                if ((this.mUIAnsattToCell == null))
                {
                    this.mUIAnsattToCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattToCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]7[Column]colE" +
                        "mployee";
                    this.mUIAnsattToCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattToCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattToCell;
            }
        }
        
        public DXCell UIAnsattFireCell
        {
            get
            {
                if ((this.mUIAnsattFireCell == null))
                {
                    this.mUIAnsattFireCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattFireCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]2[Column]colE" +
                        "mployee";
                    this.mUIAnsattFireCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattFireCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattFireCell;
            }
        }
        
        public DXCell UIAnsattFemCell
        {
            get
            {
                if ((this.mUIAnsattFemCell == null))
                {
                    this.mUIAnsattFemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattFemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]1[Column]colE" +
                        "mployee";
                    this.mUIAnsattFemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattFemCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattFemCell;
            }
        }
        
        public DXCell UIAnsattSjuCell
        {
            get
            {
                if ((this.mUIAnsattSjuCell == null))
                {
                    this.mUIAnsattSjuCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattSjuCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]5[Column]colE" +
                        "mployee";
                    this.mUIAnsattSjuCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattSjuCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattSjuCell;
            }
        }
        
        public DXCell UIAnsattNiCell
        {
            get
            {
                if ((this.mUIAnsattNiCell == null))
                {
                    this.mUIAnsattNiCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattNiCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]3[Column]colE" +
                        "mployee";
                    this.mUIAnsattNiCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattNiCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattNiCell;
            }
        }
        
        public DXCell UIAnsattSeksCell
        {
            get
            {
                if ((this.mUIAnsattSeksCell == null))
                {
                    this.mUIAnsattSeksCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]4[Column]colE" +
                        "mployee";
                    this.mUIAnsattSeksCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattSeksCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattSeksCell;
            }
        }
        
        public DXCell UIAnsattÅtteCell
        {
            get
            {
                if ((this.mUIAnsattÅtteCell == null))
                {
                    this.mUIAnsattÅtteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnsattÅtteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]9[Column]colE" +
                        "mployee";
                    this.mUIAnsattÅtteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnsattÅtteCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAnsattÅtteCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnsattEnCell;
        
        private DXCell mUIAnsattToCell;
        
        private DXCell mUIAnsattFireCell;
        
        private DXCell mUIAnsattFemCell;
        
        private DXCell mUIAnsattSjuCell;
        
        private DXCell mUIAnsattNiCell;
        
        private DXCell mUIAnsattSeksCell;
        
        private DXCell mUIAnsattÅtteCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGT4003InformasjonWindow : DXWindow
    {
        
        public UIGT4003InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4003 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4003 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4003 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISkrivenkommentartilaWindow : DXWindow
    {
        
        public UISkrivenkommentartilaWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Skriv en kommentar til avvisningen...";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Skriv en kommentar til avvisningen...");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIMeCommentEdit
        {
            get
            {
                if ((this.mUIMeCommentEdit == null))
                {
                    this.mUIMeCommentEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIMeCommentEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "meComment";
                    this.mUIMeCommentEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSMemoEdit";
                    this.mUIMeCommentEdit.WindowTitles.Add("Skriv en kommentar til avvisningen...");
                    #endregion
                }
                return this.mUIMeCommentEdit;
            }
        }
        
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "_btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Skriv en kommentar til avvisningen...");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIMeCommentEdit;
        
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIIverksetteWindow : DXWindow
    {
        
        public UIIverksetteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Iverksette";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Iverksette");
            #endregion
        }
        
        #region Properties
        public UIPnlResultClient UIPnlResultClient
        {
            get
            {
                if ((this.mUIPnlResultClient == null))
                {
                    this.mUIPnlResultClient = new UIPnlResultClient(this);
                }
                return this.mUIPnlResultClient;
            }
        }
        
        public UIPnlTopClient UIPnlTopClient
        {
            get
            {
                if ((this.mUIPnlTopClient == null))
                {
                    this.mUIPnlTopClient = new UIPnlTopClient(this);
                }
                return this.mUIPnlTopClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlResultClient mUIPnlResultClient;
        
        private UIPnlTopClient mUIPnlTopClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlResultClient : DXTestControl
    {
        
        public UIPnlResultClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlResult";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Iverksette");
            #endregion
        }
        
        #region Properties
        public UIGsGridControlLinesTable UIGsGridControlLinesTable
        {
            get
            {
                if ((this.mUIGsGridControlLinesTable == null))
                {
                    this.mUIGsGridControlLinesTable = new UIGsGridControlLinesTable(this);
                }
                return this.mUIGsGridControlLinesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGsGridControlLinesTable mUIGsGridControlLinesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsGridControlLinesTable : DXGrid
    {
        
        public UIGsGridControlLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Iverksette");
            #endregion
        }
        
        #region Properties
        public DXCell UIValgtCell
        {
            get
            {
                if ((this.mUIValgtCell == null))
                {
                    this.mUIValgtCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIValgtCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]0[Column]clmEffectuate";
                    this.mUIValgtCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIValgtCell.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIValgtCell;
            }
        }
        
        public DXCell UIValgtCell1
        {
            get
            {
                if ((this.mUIValgtCell1 == null))
                {
                    this.mUIValgtCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIValgtCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]1[Column]clmEffectuate";
                    this.mUIValgtCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIValgtCell1.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIValgtCell1;
            }
        }
        
        public DXCell UIValgtCell2
        {
            get
            {
                if ((this.mUIValgtCell2 == null))
                {
                    this.mUIValgtCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIValgtCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]2[Column]clmEffectuate";
                    this.mUIValgtCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIValgtCell2.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIValgtCell2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIValgtCell;
        
        private DXCell mUIValgtCell1;
        
        private DXCell mUIValgtCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlTopClient : DXTestControl
    {
        
        public UIPnlTopClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlTop";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Iverksette");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UILnkDetailPopupEdit
        {
            get
            {
                if ((this.mUILnkDetailPopupEdit == null))
                {
                    this.mUILnkDetailPopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "lnkDetail";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "5";
                    this.mUILnkDetailPopupEdit.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUILnkDetailPopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUILnkDetailPopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGeneratorScoop1130Window : DXWindow
    {
        
        public UIGeneratorScoop1130Window()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Generator - Scoop 1.1.3.0";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Generator - Scoop 1.1.3.0");
            #endregion
        }
        
        #region Properties
        public UIPcMainClient UIPcMainClient
        {
            get
            {
                if ((this.mUIPcMainClient == null))
                {
                    this.mUIPcMainClient = new UIPcMainClient(this);
                }
                return this.mUIPcMainClient;
            }
        }
        
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Generator - Scoop 1.1.3.0");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private UIPcMainClient mUIPcMainClient;
        
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPcMainClient : DXTestControl
    {
        
        public UIPcMainClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Generator - Scoop 1.1.3.0");
            #endregion
        }
        
        #region Properties
        public UIGrpSolutionClient UIGrpSolutionClient
        {
            get
            {
                if ((this.mUIGrpSolutionClient == null))
                {
                    this.mUIGrpSolutionClient = new UIGrpSolutionClient(this);
                }
                return this.mUIGrpSolutionClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpSolutionClient mUIGrpSolutionClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpSolutionClient : DXTestControl
    {
        
        public UIGrpSolutionClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpSolution";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Generator - Scoop 1.1.3.0");
            #endregion
        }
        
        #region Properties
        public DXButton UIStoppButton
        {
            get
            {
                if ((this.mUIStoppButton == null))
                {
                    this.mUIStoppButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnStartStop";
                    this.mUIStoppButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSDropDownButton";
                    this.mUIStoppButton.WindowTitles.Add("Generator - Scoop 1.1.3.0");
                    #endregion
                }
                return this.mUIStoppButton;
            }
        }
        
        public UIGcSolutionTable UIGcSolutionTable
        {
            get
            {
                if ((this.mUIGcSolutionTable == null))
                {
                    this.mUIGcSolutionTable = new UIGcSolutionTable(this);
                }
                return this.mUIGcSolutionTable;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIStoppButton;
        
        private UIGcSolutionTable mUIGcSolutionTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGcSolutionTable : DXGrid
    {
        
        public UIGcSolutionTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSolution";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Generator - Scoop 1.1.3.0");
            #endregion
        }
        
        #region Properties
        public DXCell UIA1Cell
        {
            get
            {
                if ((this.mUIA1Cell == null))
                {
                    this.mUIA1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIA1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSolutionGridControlCell[View]gvSolution[Row]0[Column]col4";
                    this.mUIA1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA1Cell.WindowTitles.Add("Generator - Scoop 1.1.3.0");
                    #endregion
                }
                return this.mUIA1Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIA1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINyarbeidsplanWindow : DXWindow
    {
        
        public UINyarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ny arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainClient UIPnlMainClient
        {
            get
            {
                if ((this.mUIPnlMainClient == null))
                {
                    this.mUIPnlMainClient = new UIPnlMainClient(this);
                }
                return this.mUIPnlMainClient;
            }
        }
        
        public UIGSPanelControlClient1 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient1(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainClient mUIPnlMainClient;
        
        private UIGSPanelControlClient1 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainClient : DXTestControl
    {
        
        public UIPnlMainClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGsLayoutControlMainCustom UIGsLayoutControlMainCustom
        {
            get
            {
                if ((this.mUIGsLayoutControlMainCustom == null))
                {
                    this.mUIGsLayoutControlMainCustom = new UIGsLayoutControlMainCustom(this);
                }
                return this.mUIGsLayoutControlMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGsLayoutControlMainCustom mUIGsLayoutControlMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsLayoutControlMainCustom : DXTestControl
    {
        
        public UIGsLayoutControlMainCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsLayoutControlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNaLayoutGroup UILayoutControlGroupNaLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNaLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNaLayoutGroup = new UILayoutControlGroupNaLayoutGroup(this);
                }
                return this.mUILayoutControlGroupNaLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNaLayoutGroup mUILayoutControlGroupNaLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNaLayoutGroup : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNaLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupName";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNeLayoutGroup UILayoutControlGroupNeLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNeLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNeLayoutGroup = new UILayoutControlGroupNeLayoutGroup(this);
                }
                return this.mUILayoutControlGroupNeLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNeLayoutGroup mUILayoutControlGroupNeLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNeLayoutGroup : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNeLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupNewValues";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcMainInfoLayoutControlItem UILcMainInfoLayoutControlItem
        {
            get
            {
                if ((this.mUILcMainInfoLayoutControlItem == null))
                {
                    this.mUILcMainInfoLayoutControlItem = new UILcMainInfoLayoutControlItem(this);
                }
                return this.mUILcMainInfoLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainInfoLayoutControlItem mUILcMainInfoLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILcMainInfoLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILcMainInfoLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainInfoClient UIPnlMainInfoClient
        {
            get
            {
                if ((this.mUIPnlMainInfoClient == null))
                {
                    this.mUIPnlMainInfoClient = new UIPnlMainInfoClient(this);
                }
                return this.mUIPnlMainInfoClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainInfoClient mUIPnlMainInfoClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainInfoClient : DXTestControl
    {
        
        public UIPnlMainInfoClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkKladdCheckBox
        {
            get
            {
                if ((this.mUIChkKladdCheckBox == null))
                {
                    this.mUIChkKladdCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkKladdCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkKladd";
                    this.mUIChkKladdCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkKladdCheckBox.WindowTitles.Add("Ny arbeidsplan");
                    #endregion
                }
                return this.mUIChkKladdCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkKladdCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient1 : DXTestControl
    {
        
        public UIGSPanelControlClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Ny arbeidsplan");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGT3999InformasjonWindow : DXWindow
    {
        
        public UIGT3999InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-3999 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-3999 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btOK";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("GT-3999 - Informasjon");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UISubMenuBarControlMenu UISubMenuBarControlMenu
        {
            get
            {
                if ((this.mUISubMenuBarControlMenu == null))
                {
                    this.mUISubMenuBarControlMenu = new UISubMenuBarControlMenu(this);
                }
                return this.mUISubMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UISubMenuBarControlMenu mUISubMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISubMenuBarControlMenu : DXMenu
    {
        
        public UISubMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SubMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SubMenuBarControl";
            #endregion
        }
        
        #region Properties
        public UIBtnEffectuateToRevolPopupEdit UIBtnEffectuateToRevolPopupEdit
        {
            get
            {
                if ((this.mUIBtnEffectuateToRevolPopupEdit == null))
                {
                    this.mUIBtnEffectuateToRevolPopupEdit = new UIBtnEffectuateToRevolPopupEdit(this);
                }
                return this.mUIBtnEffectuateToRevolPopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIBtnEffectuateToRevolPopupEdit mUIBtnEffectuateToRevolPopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBtnEffectuateToRevolPopupEdit : DXPopupEdit
    {
        
        public UIBtnEffectuateToRevolPopupEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEffectuateToRevolving";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerEdit";
            #endregion
        }
        
        #region Properties
        public DXButton UIEditorButton0Button
        {
            get
            {
                if ((this.mUIEditorButton0Button == null))
                {
                    this.mUIEditorButton0Button = new DXButton(this);
                    #region Search Criteria
                    this.mUIEditorButton0Button.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEffectuateToRevolvingButton[0]";
                    this.mUIEditorButton0Button.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EditorButton";
                    #endregion
                }
                return this.mUIEditorButton0Button;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIEditorButton0Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIØnskeplanperiodeWindow : DXWindow
    {
        
        public UIØnskeplanperiodeWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ønskeplanperiode";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public UIGrpPeriodClient UIGrpPeriodClient
        {
            get
            {
                if ((this.mUIGrpPeriodClient == null))
                {
                    this.mUIGrpPeriodClient = new UIGrpPeriodClient(this);
                }
                return this.mUIGrpPeriodClient;
            }
        }
        
        public UIGrpPhaseCountClient UIGrpPhaseCountClient
        {
            get
            {
                if ((this.mUIGrpPhaseCountClient == null))
                {
                    this.mUIGrpPhaseCountClient = new UIGrpPhaseCountClient(this);
                }
                return this.mUIGrpPhaseCountClient;
            }
        }
        
        public UIGrpPhaseControlClient UIGrpPhaseControlClient
        {
            get
            {
                if ((this.mUIGrpPhaseControlClient == null))
                {
                    this.mUIGrpPhaseControlClient = new UIGrpPhaseControlClient(this);
                }
                return this.mUIGrpPhaseControlClient;
            }
        }
        
        public UIPnlButtonsClient UIPnlButtonsClient
        {
            get
            {
                if ((this.mUIPnlButtonsClient == null))
                {
                    this.mUIPnlButtonsClient = new UIPnlButtonsClient(this);
                }
                return this.mUIPnlButtonsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpPeriodClient mUIGrpPeriodClient;
        
        private UIGrpPhaseCountClient mUIGrpPhaseCountClient;
        
        private UIGrpPhaseControlClient mUIGrpPhaseControlClient;
        
        private UIPnlButtonsClient mUIPnlButtonsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpPeriodClient : DXTestControl
    {
        
        public UIGrpPeriodClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpPeriod";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UITxtNameEdit
        {
            get
            {
                if ((this.mUITxtNameEdit == null))
                {
                    this.mUITxtNameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUITxtNameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "txtName";
                    this.mUITxtNameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUITxtNameEdit.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUITxtNameEdit;
            }
        }
        
        public DXTextEdit UIENumberEdit
        {
            get
            {
                if ((this.mUIENumberEdit == null))
                {
                    this.mUIENumberEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber";
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumberEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumberEdit.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIENumberEdit;
            }
        }
        
        public UIDeFromDateCustom UIDeFromDateCustom
        {
            get
            {
                if ((this.mUIDeFromDateCustom == null))
                {
                    this.mUIDeFromDateCustom = new UIDeFromDateCustom(this);
                }
                return this.mUIDeFromDateCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUITxtNameEdit;
        
        private DXTextEdit mUIENumberEdit;
        
        private UIDeFromDateCustom mUIDeFromDateCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDeFromDateCustom : DXTestControl
    {
        
        public UIDeFromDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "deFromDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpPhaseCountClient : DXTestControl
    {
        
        public UIGrpPhaseCountClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpPhaseCount";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXRadioGroup UIRgrpPhaseCountRadioGroup
        {
            get
            {
                if ((this.mUIRgrpPhaseCountRadioGroup == null))
                {
                    this.mUIRgrpPhaseCountRadioGroup = new DXRadioGroup(this);
                    #region Search Criteria
                    this.mUIRgrpPhaseCountRadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "rgrpPhaseCount";
                    this.mUIRgrpPhaseCountRadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSRadioGroup";
                    this.mUIRgrpPhaseCountRadioGroup.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIRgrpPhaseCountRadioGroup;
            }
        }
        #endregion
        
        #region Fields
        private DXRadioGroup mUIRgrpPhaseCountRadioGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrpPhaseControlClient : DXTestControl
    {
        
        public UIGrpPhaseControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpPhaseControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXRadioGroup UIRgrpPhaseControlRadioGroup
        {
            get
            {
                if ((this.mUIRgrpPhaseControlRadioGroup == null))
                {
                    this.mUIRgrpPhaseControlRadioGroup = new DXRadioGroup(this);
                    #region Search Criteria
                    this.mUIRgrpPhaseControlRadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "rgrpPhaseControl";
                    this.mUIRgrpPhaseControlRadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSRadioGroup";
                    this.mUIRgrpPhaseControlRadioGroup.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIRgrpPhaseControlRadioGroup;
            }
        }
        
        public UIDePhase1StartCustom UIDePhase1StartCustom
        {
            get
            {
                if ((this.mUIDePhase1StartCustom == null))
                {
                    this.mUIDePhase1StartCustom = new UIDePhase1StartCustom(this);
                }
                return this.mUIDePhase1StartCustom;
            }
        }
        
        public UIDePhase2StartCustom UIDePhase2StartCustom
        {
            get
            {
                if ((this.mUIDePhase2StartCustom == null))
                {
                    this.mUIDePhase2StartCustom = new UIDePhase2StartCustom(this);
                }
                return this.mUIDePhase2StartCustom;
            }
        }
        
        public UIDePhase3StartCustom UIDePhase3StartCustom
        {
            get
            {
                if ((this.mUIDePhase3StartCustom == null))
                {
                    this.mUIDePhase3StartCustom = new UIDePhase3StartCustom(this);
                }
                return this.mUIDePhase3StartCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXRadioGroup mUIRgrpPhaseControlRadioGroup;
        
        private UIDePhase1StartCustom mUIDePhase1StartCustom;
        
        private UIDePhase2StartCustom mUIDePhase2StartCustom;
        
        private UIDePhase3StartCustom mUIDePhase3StartCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDePhase1StartCustom : DXTestControl
    {
        
        public UIDePhase1StartCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dePhase1Start";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDePhase2StartCustom : DXTestControl
    {
        
        public UIDePhase2StartCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dePhase2Start";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDePhase3StartCustom : DXTestControl
    {
        
        public UIDePhase3StartCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dePhase3Start";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlButtonsClient : DXTestControl
    {
        
        public UIPnlButtonsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ønskeplanperiode");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Ønskeplanperiode");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIKobleønskeplanperiodWindow : DXWindow
    {
        
        public UIKobleønskeplanperiodWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Koble ønskeplan periode til baseplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainClient1 UIPnlMainClient
        {
            get
            {
                if ((this.mUIPnlMainClient == null))
                {
                    this.mUIPnlMainClient = new UIPnlMainClient1(this);
                }
                return this.mUIPnlMainClient;
            }
        }
        
        public UIGSPanelControlClient2 UIGSPanelControlClient
        {
            get
            {
                if ((this.mUIGSPanelControlClient == null))
                {
                    this.mUIGSPanelControlClient = new UIGSPanelControlClient2(this);
                }
                return this.mUIGSPanelControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainClient1 mUIPnlMainClient;
        
        private UIGSPanelControlClient2 mUIGSPanelControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainClient1 : DXTestControl
    {
        
        public UIPnlMainClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UIGsLayoutControlMainCustom1 UIGsLayoutControlMainCustom
        {
            get
            {
                if ((this.mUIGsLayoutControlMainCustom == null))
                {
                    this.mUIGsLayoutControlMainCustom = new UIGsLayoutControlMainCustom1(this);
                }
                return this.mUIGsLayoutControlMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGsLayoutControlMainCustom1 mUIGsLayoutControlMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGsLayoutControlMainCustom1 : DXTestControl
    {
        
        public UIGsLayoutControlMainCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsLayoutControlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNaLayoutGroup1 UILayoutControlGroupNaLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNaLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNaLayoutGroup = new UILayoutControlGroupNaLayoutGroup1(this);
                }
                return this.mUILayoutControlGroupNaLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNaLayoutGroup1 mUILayoutControlGroupNaLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNaLayoutGroup1 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNaLayoutGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupName";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNeLayoutGroup1 UILayoutControlGroupNeLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNeLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNeLayoutGroup = new UILayoutControlGroupNeLayoutGroup1(this);
                }
                return this.mUILayoutControlGroupNeLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNeLayoutGroup1 mUILayoutControlGroupNeLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILayoutControlGroupNeLayoutGroup1 : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNeLayoutGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupNewValues";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UILcMainInfoLayoutControlItem1 UILcMainInfoLayoutControlItem
        {
            get
            {
                if ((this.mUILcMainInfoLayoutControlItem == null))
                {
                    this.mUILcMainInfoLayoutControlItem = new UILcMainInfoLayoutControlItem1(this);
                }
                return this.mUILcMainInfoLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainInfoLayoutControlItem1 mUILcMainInfoLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILcMainInfoLayoutControlItem1 : DXBaseLayoutItem
    {
        
        public UILcMainInfoLayoutControlItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainInfoClient1 UIPnlMainInfoClient
        {
            get
            {
                if ((this.mUIPnlMainInfoClient == null))
                {
                    this.mUIPnlMainInfoClient = new UIPnlMainInfoClient1(this);
                }
                return this.mUIPnlMainInfoClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainInfoClient1 mUIPnlMainInfoClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPnlMainInfoClient1 : DXTestControl
    {
        
        public UIPnlMainInfoClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMainInfo";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public UIDrdBasePlanLookUpEdit UIDrdBasePlanLookUpEdit
        {
            get
            {
                if ((this.mUIDrdBasePlanLookUpEdit == null))
                {
                    this.mUIDrdBasePlanLookUpEdit = new UIDrdBasePlanLookUpEdit(this);
                }
                return this.mUIDrdBasePlanLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIDrdBasePlanLookUpEdit mUIDrdBasePlanLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDrdBasePlanLookUpEdit : DXLookUpEdit
    {
        
        public UIDrdBasePlanLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "drdBasePlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "drdBasePlanPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Koble ønskeplan periode til baseplan");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGSPanelControlClient2 : DXTestControl
    {
        
        public UIGSPanelControlClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Koble ønskeplan periode til baseplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("Koble ønskeplan periode til baseplan");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : DXWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4001 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4001 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIGSSimpleButtonButton
        {
            get
            {
                if ((this.mUIGSSimpleButtonButton == null))
                {
                    this.mUIGSSimpleButtonButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIGSSimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIGSSimpleButtonButton.WindowTitles.Add("GT-4001 - Informasjon");
                    #endregion
                }
                return this.mUIGSSimpleButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIGSSimpleButtonButton;
        #endregion
    }
}
