// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _020_Test_Arbeidsplan_Instillinger_Fane_Plan
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddEmployeeStep_5
        /// </summary>
        public void AddEmployeeStep_5()
        {
            #region Variable Declarations
            DXCell uIAndersenAstridCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAndersenAstridCell;
            #endregion

            // Click 'Andersen, Astrid' cell
            Mouse.Click(uIAndersenAstridCell, new Point(40, 8));
        }
        
        /// <summary>
        /// AddRosterplanShiftStep_6 - Use 'AddRosterplanShiftStep_6Params' to pass parameters into this method.
        /// </summary>
        public void AddRosterplanShiftStep_6()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell;
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell, new Point(22, 9));

            // Type 'n1{Tab}' in '[Row]0[Column]RosterCell_1' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, this.AddRosterplanShiftStep_6Params.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddSettingsStep25 - Use 'AddSettingsStep25Params' to pass parameters into this method.
        /// </summary>
        public void AddSettingsStep25()
        {
            #region Variable Declarations
            WinClient uIOppsettforavdeling50Client = this.UIOppsettforavdeling50Window.UIItemWindow.UIOppsettforavdeling50Client;
            WinComboBox uIItemComboBox = this.UIOppsettforavdeling50Window.UIItemWindow1.UIItemComboBox;
            WinEdit uIItemEdit = this.UIOppsettforavdeling50Window.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIOppsettforavdeling50Window.UIItemWindow3.UIItemEdit;
            WinCheckBox uINattevakterpåstartdaCheckBox = this.UIOppsettforavdeling50Window.UIArbeidsplanClient.UINattevakterpåstartdaCheckBox;
            WinButton uILagreoglukkButton = this.UIOppsettforavdeling50Window.UIItemClient.UILagreoglukkButton;
            #endregion

            // Click 'Oppsett for avdeling: 5010 - Arbeidsplan og hjelpe...' client
            Mouse.Click(uIOppsettforavdeling50Client, new Point(424, 9));

            // Select 'Kalenderplan' in combo box
            uIItemComboBox.SelectedItem = this.AddSettingsStep25Params.UIItemComboBoxSelectedItem;

            // Type '10' in text box
            uIItemEdit.Text = this.AddSettingsStep25Params.UIItemEditText;

            // Type '{Tab}' in text box
            Keyboard.SendKeys(uIItemEdit, this.AddSettingsStep25Params.UIItemEditSendKeys, ModifierKeys.None);

            // Type '5' in text box
            uIItemEdit1.Text = this.AddSettingsStep25Params.UIItemEditText1;

            // Type '{Tab}' in text box
            Keyboard.SendKeys(uIItemEdit1, this.AddSettingsStep25Params.UIItemEditSendKeys1, ModifierKeys.None);

            // Select 'Nattevakter på startdagen er standard' check box
            uINattevakterpåstartdaCheckBox.Checked = this.AddSettingsStep25Params.UINattevakterpåstartdaCheckBoxChecked;

            // Type '{Tab}' in 'Nattevakter på startdagen er standard' check box
            Keyboard.SendKeys(uINattevakterpåstartdaCheckBox, this.AddSettingsStep25Params.UINattevakterpåstartdaCheckBoxSendKeys, ModifierKeys.None);

            // Click 'Lagre og lukk' button
            Mouse.Click(uILagreoglukkButton, new Point(34, 17));
        }
        
        /// <summary>
        /// AddSettingsStep26 - Use 'AddSettingsStep26Params' to pass parameters into this method.
        /// </summary>
        public void AddSettingsStep26()
        {
            #region Variable Declarations
            DXTextEdit uITxtFilterEdit = this.UIGlobaltarbeidsplanopWindow.UIPnlFilterClient.UIGrpFilterClient.UITxtFilterEdit;
            DXNavBarGroupButton uIKravombemanningsplanNavBarGroupButton = this.UIGlobaltarbeidsplanopWindow.UINbcRosterSetupNavBar.UIKravombemanningsplanNavBarGroup.UIKravombemanningsplanNavBarGroupButton;
            DXCheckBox uIChkEditCheckBox = this.UIGlobaltarbeidsplanopWindow.UINbcRosterSetupNavBar.UINavBarGroupControlCoScrollableControl.UIPnlEditClient.UIChkEditCheckBox;
            DXButton uILagreLukkButton = this.UIGlobaltarbeidsplanopWindow.UIPnlButtonsClient.UILagreLukkButton;
            #endregion

            // Type 'krav om' in 'txtFilter' text box
            //ValueAsString
            uITxtFilterEdit.ValueAsString = this.AddSettingsStep26Params.UITxtFilterEditValueAsString;

            // Click 'Krav om bemanningsplan? - Nei' NavBarGroupButton
            Mouse.Click(uIKravombemanningsplanNavBarGroupButton, new Point(9, 9));

            // Select 'chkEdit' check box
            uIChkEditCheckBox.Checked = this.AddSettingsStep26Params.UIChkEditCheckBoxChecked;

            // Click '&Lagre Lukk' button
            Mouse.Click(uILagreLukkButton, new Point(1, 1));
        }
        
        /// <summary>
        /// CheckCheckboxesDisabledStep16 - Use 'CheckCheckboxesDisabledStep16ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCheckboxesDisabledStep16()
        {
            #region Variable Declarations
            DXCheckBox uIChkDoLoadWorkSchedulCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkDoLoadWorkSchedulCheckBox;
            DXCheckBox uIChkDoLoadOtherRosterCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkDoLoadOtherRosterCheckBox;
            #endregion

            // Verify that the 'Checked' property of 'chkDoLoadWorkScheduleData' check box equals 'False'
            Assert.AreEqual(this.CheckCheckboxesDisabledStep16ExpectedValues.UIChkDoLoadWorkSchedulCheckBoxChecked, uIChkDoLoadWorkSchedulCheckBox.Checked);

            // Verify that the 'Enabled' property of 'chkDoLoadWorkScheduleData' check box equals 'False'
            Assert.AreEqual(this.CheckCheckboxesDisabledStep16ExpectedValues.UIChkDoLoadWorkSchedulCheckBoxEnabled, uIChkDoLoadWorkSchedulCheckBox.Enabled);

            // Verify that the 'Checked' property of 'chkDoLoadOtherRosterplanData' check box equals 'False'
            Assert.AreEqual(this.CheckCheckboxesDisabledStep16ExpectedValues.UIChkDoLoadOtherRosterCheckBoxChecked, uIChkDoLoadOtherRosterCheckBox.Checked);

            // Verify that the 'Enabled' property of 'chkDoLoadOtherRosterplanData' check box equals 'False'
            Assert.AreEqual(this.CheckCheckboxesDisabledStep16ExpectedValues.UIChkDoLoadOtherRosterCheckBoxEnabled, uIChkDoLoadOtherRosterCheckBox.Enabled);
        }
        
        /// <summary>
        /// CheckInfoWindow - Use 'CheckInfoWindowExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckInfoWindow()
        {
            #region Variable Declarations
            DXTextEdit uIEMessageEdit = this.UIRPL23006InformasjonWindow.UIEMessageEdit;
            #endregion

            // Verify that the 'Text' property of 'eMessage' text box equals 'Innstillinger for planen relatert til regelsjekk og validering mot vaktbok og andre planer er endret. 
            //
            //Planen må lastes på nytt og lukkes nå derfor automatisk.'
            Assert.AreEqual(this.CheckInfoWindowExpectedValues.UIEMessageEditText, uIEMessageEdit.Text);
        }
        
        /// <summary>
        /// CheckNewPlanDefaultData - Use 'CheckNewPlanDefaultDataExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckNewPlanDefaultData()
        {
            #region Variable Declarations
            DXTextEdit uIENameEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIENameEdit;
            WinClient uIPbSymbolClient = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIPbSymbolWindow.UIPbSymbolClient;
            DXButton uIOKButton = this.UIArbeidsplanInnstilliWindow.UIPaBottomClient.UIOKButton;
            DXLookUpEdit uILeRosterplanTypeLookUpEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UILeRosterplanTypeLookUpEdit;
            DXTextEdit uIENumber1Edit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIENumber1Edit;
            DXLookUpEdit uILeHeadingDateFormattLookUpEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UILeHeadingDateFormattLookUpEdit;
            DXTextEdit uIENumber0Edit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIENumber0Edit;
            DXCheckBox uIChkDraftCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkDraftCheckBox;
            DXCheckBox uIChkIsReadyForApprovaCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkIsReadyForApprovaCheckBox;
            DXCheckBox uIChkPublishInMyGatCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkPublishInMyGatCheckBox;
            DXTextEdit uIERosterplanTypeInMyGEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIERosterplanTypeInMyGEdit;
            DXCheckBox uIChkNighShiftOnStartDCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkNighShiftOnStartDCheckBox;
            DXCheckBox uIChkDoUseWeek0AndNPluCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkDoUseWeek0AndNPluCheckBox;
            DXCheckBox uIChkInactiveCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkInactiveCheckBox;
            DXCheckBox uIChkUseLimitedScopeCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkUseLimitedScopeCheckBox;
            DXCheckBox uIChkDoLoadWorkSchedulCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkDoLoadWorkSchedulCheckBox;
            DXCheckBox uIChkDoLoadOtherRosterCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkDoLoadOtherRosterCheckBox;
            #endregion

            // Verify that the 'Text' property of 'eName' text box equals ''
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIENameEditText, uIENameEdit.Text);

            // Verify that the 'Enabled' property of 'pbSymbol' client equals 'True'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIPbSymbolClientEnabled, uIPbSymbolClient.Enabled);

            // Verify that the 'HasFocus' property of 'Ok' button equals 'False'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIOKButtonHasFocus, uIOKButton.HasFocus);

            // Verify that the 'Text' property of 'leRosterplanType' LookUpEdit equals 'Arbeidsplan'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UILeRosterplanTypeLookUpEditText, uILeRosterplanTypeLookUpEdit.Text);

            // Verify that the 'Text' property of 'eNumber[1]' text box equals '6'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIENumber1EditText, uIENumber1Edit.Text);

            // Verify that the 'Text' property of 'leHeadingDateFormatting' LookUpEdit equals 'Ma'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UILeHeadingDateFormattLookUpEditText, uILeHeadingDateFormattLookUpEdit.Text);

            // Verify that the 'Text' property of 'eNumber[0]' text box equals '3'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIENumber0EditText, uIENumber0Edit.Text);

            // Verify that the 'Checked' property of 'chkDraft' check box equals 'False'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIChkDraftCheckBoxChecked, uIChkDraftCheckBox.Checked);

            // Verify that the 'Checked' property of 'chkIsReadyForApproval' check box equals 'False'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIChkIsReadyForApprovaCheckBoxChecked, uIChkIsReadyForApprovaCheckBox.Checked);

            // Verify that the 'Checked' property of 'chkPublishInMyGat' check box equals 'False'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIChkPublishInMyGatCheckBoxChecked, uIChkPublishInMyGatCheckBox.Checked);

            // Verify that the 'Enabled' property of 'eRosterplanTypeInMyGat' text box equals 'False'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIERosterplanTypeInMyGEditEnabled, uIERosterplanTypeInMyGEdit.Enabled);

            // Verify that the 'Checked' property of 'chkNighShiftOnStartDay' check box equals 'False'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIChkNighShiftOnStartDCheckBoxChecked, uIChkNighShiftOnStartDCheckBox.Checked);

            // Verify that the 'Enabled' property of 'chkDoUseWeek0AndNPlus1' check box equals 'False'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIChkDoUseWeek0AndNPluCheckBoxEnabled, uIChkDoUseWeek0AndNPluCheckBox.Enabled);

            // Verify that the 'Enabled' property of 'chkInactive' check box equals 'False'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIChkInactiveCheckBoxEnabled, uIChkInactiveCheckBox.Enabled);

            // Verify that the 'Checked' property of 'chkUseLimitedScope' check box equals 'False'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIChkUseLimitedScopeCheckBoxChecked, uIChkUseLimitedScopeCheckBox.Checked);

            // Verify that the 'Checked' property of 'chkDoLoadWorkScheduleData' check box equals 'True'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIChkDoLoadWorkSchedulCheckBoxChecked, uIChkDoLoadWorkSchedulCheckBox.Checked);

            // Verify that the 'Checked' property of 'chkDoLoadOtherRosterplanData' check box equals 'True'
            Assert.AreEqual(this.CheckNewPlanDefaultDataExpectedValues.UIChkDoLoadOtherRosterCheckBoxChecked, uIChkDoLoadOtherRosterCheckBox.Checked);
        }
        
        /// <summary>
        /// CheckOKDisabledStep27 - Use 'CheckOKDisabledStep27ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOKDisabledStep27()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIArbeidsplanInnstilliWindow.UIPaBottomClient.UIOKButton;
            #endregion

            // Verify that the 'Enabled' property of 'Ok' button equals 'False'
            Assert.AreEqual(this.CheckOKDisabledStep27ExpectedValues.UIOKButtonEnabled, uIOKButton.Enabled);
        }
        
        /// <summary>
        /// CheckPlanSettingsStep30 - Use 'CheckPlanSettingsStep30ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlanSettingsStep30()
        {
            #region Variable Declarations
            WinClient uILeDepartmentClient = this.UIArbeidsplanInnstilliWindow1.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UILeDepartmentClient;
            DXLookUpEdit uILeRosterplanTypeLookUpEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UILeRosterplanTypeLookUpEdit;
            DXTestControl uIEStartDateCustom = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIEStartDateCustom;
            DXTestControl uIEStopDateCustom = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIEStopDateCustom;
            DXTestControl uIEValidToDateCustom = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIEValidToDateCustom;
            DXLookUpEdit uILeDisplayStartDateLookUpEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UILeDisplayStartDateLookUpEdit;
            DXCheckBox uIChkNighShiftOnStartDCheckBox = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIChkNighShiftOnStartDCheckBox;
            #endregion
            uILeDepartmentClient.DrawHighlight();
            // Verify that the 'Enabled' property of 'leDepartment' client equals 'False'
            Assert.AreEqual(this.CheckPlanSettingsStep30ExpectedValues.UILeDepartmentClientEnabled, uILeDepartmentClient.Enabled);

            // Verify that the 'Enabled' property of 'leRosterplanType' LookUpEdit equals 'False'
            Assert.AreEqual(this.CheckPlanSettingsStep30ExpectedValues.UILeRosterplanTypeLookUpEditEnabled, uILeRosterplanTypeLookUpEdit.Enabled);

            // Verify that the 'Enabled' property of 'eStartDate' custom control equals 'False'
            Assert.AreEqual(this.CheckPlanSettingsStep30ExpectedValues.UIEStartDateCustomEnabled, uIEStartDateCustom.Enabled);

            // Verify that the 'Enabled' property of 'eStopDate' custom control equals 'False'
            Assert.AreEqual(this.CheckPlanSettingsStep30ExpectedValues.UIEStopDateCustomEnabled, uIEStopDateCustom.Enabled);

            // Verify that the 'Enabled' property of 'eValidToDate' custom control equals 'False'
            Assert.AreEqual(this.CheckPlanSettingsStep30ExpectedValues.UIEValidToDateCustomEnabled, uIEValidToDateCustom.Enabled);

            // Verify that the 'Enabled' property of 'leDisplayStartDate' LookUpEdit equals 'False'
            Assert.AreEqual(this.CheckPlanSettingsStep30ExpectedValues.UILeDisplayStartDateLookUpEditEnabled, uILeDisplayStartDateLookUpEdit.Enabled);

            // Verify that the 'Enabled' property of 'chkNighShiftOnStartDay' check box equals 'False'
            Assert.AreEqual(this.CheckPlanSettingsStep30ExpectedValues.UIChkNighShiftOnStartDCheckBoxEnabled, uIChkNighShiftOnStartDCheckBox.Enabled);
        }
        
        /// <summary>
        /// CheckPlanStartWeekStep23 - Use 'CheckPlanStartWeekStep23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlanStartWeekStep23()
        {
            #region Variable Declarations
            DXGridBand uIBand_Week_1GridBand = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBand_Week_1GridBand;
            DXGridBand uIBand_Week_2GridBand = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBand_Week_2GridBand;
            DXGridBand uIBand_Week_3GridBand = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBand_Week_3GridBand;
            #endregion

            // Verify that the 'BandName' property of 'Band_Week_1' GridBand equals 'Band_Week_1'
            Assert.AreEqual(this.CheckPlanStartWeekStep23ExpectedValues.UIBand_Week_1GridBandBandName, uIBand_Week_1GridBand.BandName);

            // Verify that the 'BandName' property of 'Band_Week_2' GridBand equals 'Band_Week_2'
            Assert.AreEqual(this.CheckPlanStartWeekStep23ExpectedValues.UIBand_Week_2GridBandBandName, uIBand_Week_2GridBand.BandName);

            // Verify that the 'BandName' property of 'Band_Week_3' GridBand equals 'Band_Week_3'
            Assert.AreEqual(this.CheckPlanStartWeekStep23ExpectedValues.UIBand_Week_3GridBandBandName, uIBand_Week_3GridBand.BandName);
        }
        
        /// <summary>
        /// CheckPlanStartWeekVisualizationStep23 - Use 'CheckPlanStartWeekVisualizationStep23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlanStartWeekVisualizationStep23()
        {
            #region Variable Declarations
            DXTestControl uILblVizCapLabel = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UIVisualizationViewCustom.UIRosterPlanVisualizatCustom.UIViewHost1Custom.UIPcViewClient.UIContainerViewCustom.UIPanelControl1Client.UILblVizCapLabel;
            #endregion

            // Verify that the 'Text' property of 'lblVizCap' label equals 'Mandag 13.01.2025 (Uke 1/2025)'
            Assert.AreEqual(this.CheckPlanStartWeekVisualizationStep23ExpectedValues.UILblVizCapLabelText, uILblVizCapLabel.Text);
        }
        
        /// <summary>
        /// CheckRegStatus - Use 'CheckRegStatusExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRegStatus()
        {
            #region Variable Declarations
            DXCell uIArbeidsplanmanglernaCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UIArbeidsplanmanglernaCell;
            DXCell uIManglendebemanningspCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UIManglendebemanningspCell;
            #endregion

            // Verify that the 'Text' property of 'Arbeidsplan mangler navn.' cell equals 'Arbeidsplan mangler navn.'
            Assert.AreEqual(this.CheckRegStatusExpectedValues.UIArbeidsplanmanglernaCellText, uIArbeidsplanmanglernaCell.Text);

            // Verify that the 'Text' property of 'Manglende bemanningsplan(er).' cell equals 'Manglende bemanningsplan(er).'
            Assert.AreEqual(this.CheckRegStatusExpectedValues.UIManglendebemanningspCellText, uIManglendebemanningspCell.Text);
        }
        
        /// <summary>
        /// CheckRegStatusStep28 - Use 'CheckRegStatusStep28ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRegStatusStep28()
        {
            #region Variable Declarations
            DXCell uIArbeidsplanmanglernaCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UIArbeidsplanmanglernaCell;
            DXCell uIDeterikkevalgtbemannCell = this.UIRegistreringsstatusWindow.UILcMessagesCustom.UILcgMessagesLayoutGroup.UILciMessagesLayoutControlItem.UIGMessagesTable.UIDeterikkevalgtbemannCell;
            #endregion

            // Verify that the 'Text' property of 'Arbeidsplan mangler navn.' cell equals 'Manglende bemanningsplan(er).'
            Assert.AreEqual(this.CheckRegStatusStep28ExpectedValues.UIArbeidsplanmanglernaCellText, uIArbeidsplanmanglernaCell.Text);

            // Verify that the 'Text' property of 'Det er ikke valgt bemanningsplan(er) som er aktiv i hele gyldighetsperioden til arbeidsplan. I globalt oppsett er det satt krav til å ha bemanningsplan(er) som dekker hele gyldighetsperioden til arbeidsplan.' cell equals 'Det er ikke valgt bemanningsplan(er) som er aktiv i hele gyldighetsperioden til arbeidsplan. I globalt oppsett er det satt krav til å ha bemanningsplan(er) som dekker hele gyldighetsperioden til arbeidsplan.'
            Assert.AreEqual(this.CheckRegStatusStep28ExpectedValues.UIDeterikkevalgtbemannCellText, uIDeterikkevalgtbemannCell.Text);
        }
        
        /// <summary>
        /// CheckRosterCalculationsStep15 - Use 'CheckRosterCalculationsStep15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRosterCalculationsStep15()
        {
            #region Variable Declarations
            DXCell uIItem355Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem355Cell;
            DXCell uIItem3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem3Cell;
            DXCell uIItem325Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem325Cell;
            DXCell uIItem1065Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem1065Cell;
            DXCell uIItem9Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem9Cell;
            DXCell uIItem975Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem975Cell;
            DXCell uIItem845Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem845Cell;
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItemCell;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItemCell1;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItemCell2;
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItemCell3;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItemCell4;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItemCell5;
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItemCell6;
            #endregion

            // Verify that the 'Text' property of '35,5' cell equals '35,5'
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItem355CellText, uIItem355Cell.Text);

            // Verify that the 'Text' property of '3' cell equals '3'
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItem3CellText, uIItem3Cell.Text);

            // Verify that the 'Text' property of '-32,5' cell equals '-32,5'
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItem325CellText, uIItem325Cell.Text);

            // Verify that the 'Text' property of '106,5' cell equals '106,5'
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItem1065CellText, uIItem1065Cell.Text);

            // Verify that the 'Text' property of '9' cell equals '9'
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItem9CellText, uIItem9Cell.Text);

            // Verify that the 'Text' property of '-97,5' cell equals '-97,5'
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItem975CellText, uIItem975Cell.Text);

            // Verify that the 'Text' property of '8,45%' cell equals '8,45%'
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItem845CellText, uIItem845Cell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItemCellText, uIItemCell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItemCell1Text, uIItemCell1.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItemCell2Text, uIItemCell2.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItemCell3Text, uIItemCell3.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItemCell4Text, uIItemCell4.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItemCell5Text, uIItemCell5.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterCalculationsStep15ExpectedValues.UIItemCell6Text, uIItemCell6.Text);
        }
        
        /// <summary>
        /// CheckRosterCalculationsStep19 - Use 'CheckRosterCalculationsStep19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRosterCalculationsStep19()
        {
            #region Variable Declarations
            DXCell uIItem3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem3Cell;
            DXCell uIItem9Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem9Cell;
            #endregion

            // Verify that the 'Text' property of '3' cell equals '0'
            Assert.AreEqual(this.CheckRosterCalculationsStep19ExpectedValues.UIItem3CellText, uIItem3Cell.Text);

            // Verify that the 'Text' property of '9' cell equals '0'
            Assert.AreEqual(this.CheckRosterCalculationsStep19ExpectedValues.UIItem9CellText, uIItem9Cell.Text);
        }
        
        /// <summary>
        /// CheckRosterLinesStep19 - Use 'CheckRosterLinesStep19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRosterLinesStep19()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell;
            #endregion

            // Verify that the 'Text' property of cell equals 'N1'
            Assert.AreEqual(this.CheckRosterLinesStep19ExpectedValues.UIItemCellText, uIItemCell.Text);
        }
        
        /// <summary>
        /// CheckRosterLinesStep6 - Use 'CheckRosterLinesStep6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRosterLinesStep6()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell2;
            DXCell uIGV1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGV1Cell;
            DXCell uIA1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIA1Cell;
            #endregion

            // Verify that the 'Text' property of cell equals 'N1'
            Assert.AreEqual(this.CheckRosterLinesStep6ExpectedValues.UIItemCellText, uIItemCell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterLinesStep6ExpectedValues.UIItemCell2Text, uIItemCell2.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckRosterLinesStep6ExpectedValues.UIGV1CellText, uIGV1Cell.Text);

            // Verify that the 'Text' property of 'A1' cell equals 'A1'
            Assert.AreEqual(this.CheckRosterLinesStep6ExpectedValues.UIA1CellText, uIA1Cell.Text);
        }
        
        /// <summary>
        /// CheckRosterlineStep24 - Use 'CheckRosterlineStep24ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRosterlineStep24()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell2;
            DXCell uIGV1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGV1Cell;
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell3;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell5;
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell6;
            #endregion

            // Verify that the 'Text' property of cell equals 'N1'
            Assert.AreEqual(this.CheckRosterlineStep24ExpectedValues.UIItemCellText, uIItemCell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterlineStep24ExpectedValues.UIItemCell2Text, uIItemCell2.Text);

            // Verify that the 'Text' property of 'GV1' cell equals ''
            Assert.AreEqual(this.CheckRosterlineStep24ExpectedValues.UIGV1CellText, uIGV1Cell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterlineStep24ExpectedValues.UIItemCell3Text, uIItemCell3.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterlineStep24ExpectedValues.UIItemCell4Text, uIItemCell4.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterlineStep24ExpectedValues.UIItemCell5Text, uIItemCell5.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckRosterlineStep24ExpectedValues.UIItemCell6Text, uIItemCell6.Text);
        }
        
        /// <summary>
        /// CheckRosterlineStep7 - Use 'CheckRosterlineStep7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRosterlineStep7()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell;
            #endregion

            // Verify that the 'Text' property of cell equals 'N1'
            Assert.AreEqual(this.CheckRosterlineStep7ExpectedValues.UIItemCellText, uIItemCell.Text);
        }
        
        /// <summary>
        /// CheckRosterlineStep8 - Use 'CheckRosterlineStep8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRosterlineStep8()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell;
            DXCell uID3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UID3Cell;
            DXCell uIGV1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGV1Cell;
            #endregion

            // Verify that the 'Text' property of cell equals 'N1'
            Assert.AreEqual(this.CheckRosterlineStep8ExpectedValues.UIItemCellText, uIItemCell.Text);

            // Verify that the 'Text' property of 'D3' cell equals 'D3'
            Assert.AreEqual(this.CheckRosterlineStep8ExpectedValues.UID3CellText, uID3Cell.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckRosterlineStep8ExpectedValues.UIGV1CellText, uIGV1Cell.Text);
        }
        
        /// <summary>
        /// ClickFilterPrAvdShowPlanOtherDeps - Use 'ClickFilterPrAvdShowPlanOtherDepsParams' to pass parameters into this method.
        /// </summary>
        public void ClickFilterPrAvdShowPlanOtherDeps()
        {
            #region Variable Declarations
            DXRibbonEditItem uIDdlOtherDepFilterRibbonEditItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgFilterRibbonPageGroup.UIDdlOtherDepFilterRibbonEditItem;
            DXTreeListNode uINode1TreeListNode = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIPopupContainerEditPopupEdit.UIPopupContainerFormWindow.UIDdlOtherDepFilterPopClient.UIDdlOtherDepFilterTreTreeList.UINode1TreeListNode;
            #endregion

            // Click 'ddlOtherDepFilter' RibbonEditItem
            Mouse.Click(uIDdlOtherDepFilterRibbonEditItem, new Point(162, 12));

            // Type 'True' in 'Node1' TreeListNode
            //Checked
            uINode1TreeListNode.Checked = this.ClickFilterPrAvdShowPlanOtherDepsParams.UINode1TreeListNodeChecked;
        }
        
        /// <summary>
        /// ClickFilterPrAvdShowShiftBookLines - Use 'ClickFilterPrAvdShowShiftBookLinesParams' to pass parameters into this method.
        /// </summary>
        public void ClickFilterPrAvdShowShiftBookLines()
        {
            #region Variable Declarations
            DXRibbonEditItem uIDdlOtherDepFilterRibbonEditItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgFilterRibbonPageGroup.UIDdlOtherDepFilterRibbonEditItem;
            DXTreeListNode uINode0TreeListNode = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIPopupContainerEditPopupEdit.UIPopupContainerFormWindow.UIDdlOtherDepFilterPopClient.UIDdlOtherDepFilterTreTreeList.UINode0TreeListNode;
            #endregion

            // Click 'ddlOtherDepFilter' RibbonEditItem
            Mouse.Click(uIDdlOtherDepFilterRibbonEditItem, new Point(158, 9));

            // Type 'True' in 'Node0' TreeListNode
            //Checked
            uINode0TreeListNode.Checked = this.ClickFilterPrAvdShowShiftBookLinesParams.UINode0TreeListNodeChecked;
        }
        
        /// <summary>
        /// ExpandBottomDockPanel
        /// </summary>
        public void ExpandBottomDockPanel()
        {
            #region Variable Declarations
            DXTestControl uITopSeparator = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UITopSeparator;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable;
            #endregion

            // Move 'Top' separator to 'gcRosterPlan' table
            uIGcRosterPlanTable.EnsureClickable(new Point(796, 369));
            Mouse.StartDragging(uITopSeparator, new Point(799, 1));
            Mouse.StopDragging(uIGcRosterPlanTable, new Point(796, 369));
        }
        
        /// <summary>
        /// ExpandCalcCols
        /// </summary>
        public void ExpandCalcCols()
        {
            #region Variable Declarations
            DXTestControl uILeftSeparator = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UILeftSeparator;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable;
            #endregion

            // Move 'Left' separator to 'gcRosterPlan' table
            uIGcRosterPlanTable.EnsureClickable(new Point(1463, 518));
            Mouse.StartDragging(uILeftSeparator, new Point(2, 502));
            Mouse.StopDragging(uIGcRosterPlanTable, new Point(1463, 518));
        }
        
        /// <summary>
        /// SetRosterplanDisplayDateStep22 - Use 'SetRosterplanDisplayDateStep22Params' to pass parameters into this method.
        /// </summary>
        public void SetRosterplanDisplayDateStep22()
        {
            #region Variable Declarations
            DXLookUpEdit uILeDisplayStartDateLookUpEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UILeDisplayStartDateLookUpEdit;
            #endregion

            // Type 'System.DateTime' in 'leDisplayStartDate' LookUpEdit
            //ValueTypeName
            uILeDisplayStartDateLookUpEdit.ValueTypeName = this.SetRosterplanDisplayDateStep22Params.UILeDisplayStartDateLookUpEditValueTypeName;

            // Type '2025-01-13' in 'leDisplayStartDate' LookUpEdit
            //ValueAsString
            uILeDisplayStartDateLookUpEdit.ValueAsString = this.SetRosterplanDisplayDateStep22Params.UILeDisplayStartDateLookUpEditValueAsString;
        }
        
        /// <summary>
        /// ShowAllRosterlinesOnAllDepsFilter - Use 'ShowAllRosterlinesOnAllDepsFilterParams' to pass parameters into this method.
        /// </summary>
        public void ShowAllRosterlinesOnAllDepsFilter()
        {
            #region Variable Declarations
            DXRibbonEditItem uIDdlOtherDepFilterRibbonEditItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgFilterRibbonPageGroup.UIDdlOtherDepFilterRibbonEditItem;
            DXTreeListNode uINode0TreeListNode = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIPopupContainerEditPopupEdit.UIPopupContainerFormWindow.UIDdlOtherDepFilterPopClient.UIDdlOtherDepFilterTreTreeList.UINode0TreeListNode;
            DXTreeListNode uINode1TreeListNode = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIPopupContainerEditPopupEdit.UIPopupContainerFormWindow.UIDdlOtherDepFilterPopClient.UIDdlOtherDepFilterTreTreeList.UINode1TreeListNode;
            #endregion

            // Click 'ddlOtherDepFilter' RibbonEditItem
            Mouse.Click(uIDdlOtherDepFilterRibbonEditItem, new Point(157, 9));

            // Type 'True' in 'Node0' TreeListNode
            //Checked
            uINode0TreeListNode.Checked = this.ShowAllRosterlinesOnAllDepsFilterParams.UINode0TreeListNodeChecked;

            // Type 'True' in 'Node1' TreeListNode
            //Checked
            uINode1TreeListNode.Checked = this.ShowAllRosterlinesOnAllDepsFilterParams.UINode1TreeListNodeChecked;
        }
        
        /// <summary>
        /// CheckPlanSettingsStep30_2 - Use 'CheckPlanSettingsStep30_2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlanSettingsStep30_2()
        {
            #region Variable Declarations
            DXTextEdit uIENumber1Edit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UIENumber1Edit;
            #endregion

            // Verify that the 'Enabled' property of 'eNumber[1]' text box equals 'False'
            Assert.AreEqual(this.CheckPlanSettingsStep30_2ExpectedValues.UIENumber1EditEnabled, uIENumber1Edit.Enabled);
        }
        
        #region Properties
        public virtual AddRosterplanShiftStep_6Params AddRosterplanShiftStep_6Params
        {
            get
            {
                if ((this.mAddRosterplanShiftStep_6Params == null))
                {
                    this.mAddRosterplanShiftStep_6Params = new AddRosterplanShiftStep_6Params();
                }
                return this.mAddRosterplanShiftStep_6Params;
            }
        }
        
        public virtual AddSettingsStep25Params AddSettingsStep25Params
        {
            get
            {
                if ((this.mAddSettingsStep25Params == null))
                {
                    this.mAddSettingsStep25Params = new AddSettingsStep25Params();
                }
                return this.mAddSettingsStep25Params;
            }
        }
        
        public virtual AddSettingsStep26Params AddSettingsStep26Params
        {
            get
            {
                if ((this.mAddSettingsStep26Params == null))
                {
                    this.mAddSettingsStep26Params = new AddSettingsStep26Params();
                }
                return this.mAddSettingsStep26Params;
            }
        }
        
        public virtual CheckCheckboxesDisabledStep16ExpectedValues CheckCheckboxesDisabledStep16ExpectedValues
        {
            get
            {
                if ((this.mCheckCheckboxesDisabledStep16ExpectedValues == null))
                {
                    this.mCheckCheckboxesDisabledStep16ExpectedValues = new CheckCheckboxesDisabledStep16ExpectedValues();
                }
                return this.mCheckCheckboxesDisabledStep16ExpectedValues;
            }
        }
        
        public virtual CheckInfoWindowExpectedValues CheckInfoWindowExpectedValues
        {
            get
            {
                if ((this.mCheckInfoWindowExpectedValues == null))
                {
                    this.mCheckInfoWindowExpectedValues = new CheckInfoWindowExpectedValues();
                }
                return this.mCheckInfoWindowExpectedValues;
            }
        }
        
        public virtual CheckNewPlanDefaultDataExpectedValues CheckNewPlanDefaultDataExpectedValues
        {
            get
            {
                if ((this.mCheckNewPlanDefaultDataExpectedValues == null))
                {
                    this.mCheckNewPlanDefaultDataExpectedValues = new CheckNewPlanDefaultDataExpectedValues();
                }
                return this.mCheckNewPlanDefaultDataExpectedValues;
            }
        }
        
        public virtual CheckOKDisabledStep27ExpectedValues CheckOKDisabledStep27ExpectedValues
        {
            get
            {
                if ((this.mCheckOKDisabledStep27ExpectedValues == null))
                {
                    this.mCheckOKDisabledStep27ExpectedValues = new CheckOKDisabledStep27ExpectedValues();
                }
                return this.mCheckOKDisabledStep27ExpectedValues;
            }
        }
        
        public virtual CheckPlanSettingsStep30ExpectedValues CheckPlanSettingsStep30ExpectedValues
        {
            get
            {
                if ((this.mCheckPlanSettingsStep30ExpectedValues == null))
                {
                    this.mCheckPlanSettingsStep30ExpectedValues = new CheckPlanSettingsStep30ExpectedValues();
                }
                return this.mCheckPlanSettingsStep30ExpectedValues;
            }
        }
        
        public virtual CheckPlanStartWeekStep23ExpectedValues CheckPlanStartWeekStep23ExpectedValues
        {
            get
            {
                if ((this.mCheckPlanStartWeekStep23ExpectedValues == null))
                {
                    this.mCheckPlanStartWeekStep23ExpectedValues = new CheckPlanStartWeekStep23ExpectedValues();
                }
                return this.mCheckPlanStartWeekStep23ExpectedValues;
            }
        }
        
        public virtual CheckPlanStartWeekVisualizationStep23ExpectedValues CheckPlanStartWeekVisualizationStep23ExpectedValues
        {
            get
            {
                if ((this.mCheckPlanStartWeekVisualizationStep23ExpectedValues == null))
                {
                    this.mCheckPlanStartWeekVisualizationStep23ExpectedValues = new CheckPlanStartWeekVisualizationStep23ExpectedValues();
                }
                return this.mCheckPlanStartWeekVisualizationStep23ExpectedValues;
            }
        }
        
        public virtual CheckRegStatusExpectedValues CheckRegStatusExpectedValues
        {
            get
            {
                if ((this.mCheckRegStatusExpectedValues == null))
                {
                    this.mCheckRegStatusExpectedValues = new CheckRegStatusExpectedValues();
                }
                return this.mCheckRegStatusExpectedValues;
            }
        }
        
        public virtual CheckRegStatusStep28ExpectedValues CheckRegStatusStep28ExpectedValues
        {
            get
            {
                if ((this.mCheckRegStatusStep28ExpectedValues == null))
                {
                    this.mCheckRegStatusStep28ExpectedValues = new CheckRegStatusStep28ExpectedValues();
                }
                return this.mCheckRegStatusStep28ExpectedValues;
            }
        }
        
        public virtual CheckRosterCalculationsStep15ExpectedValues CheckRosterCalculationsStep15ExpectedValues
        {
            get
            {
                if ((this.mCheckRosterCalculationsStep15ExpectedValues == null))
                {
                    this.mCheckRosterCalculationsStep15ExpectedValues = new CheckRosterCalculationsStep15ExpectedValues();
                }
                return this.mCheckRosterCalculationsStep15ExpectedValues;
            }
        }
        
        public virtual CheckRosterCalculationsStep19ExpectedValues CheckRosterCalculationsStep19ExpectedValues
        {
            get
            {
                if ((this.mCheckRosterCalculationsStep19ExpectedValues == null))
                {
                    this.mCheckRosterCalculationsStep19ExpectedValues = new CheckRosterCalculationsStep19ExpectedValues();
                }
                return this.mCheckRosterCalculationsStep19ExpectedValues;
            }
        }
        
        public virtual CheckRosterLinesStep19ExpectedValues CheckRosterLinesStep19ExpectedValues
        {
            get
            {
                if ((this.mCheckRosterLinesStep19ExpectedValues == null))
                {
                    this.mCheckRosterLinesStep19ExpectedValues = new CheckRosterLinesStep19ExpectedValues();
                }
                return this.mCheckRosterLinesStep19ExpectedValues;
            }
        }
        
        public virtual CheckRosterLinesStep6ExpectedValues CheckRosterLinesStep6ExpectedValues
        {
            get
            {
                if ((this.mCheckRosterLinesStep6ExpectedValues == null))
                {
                    this.mCheckRosterLinesStep6ExpectedValues = new CheckRosterLinesStep6ExpectedValues();
                }
                return this.mCheckRosterLinesStep6ExpectedValues;
            }
        }
        
        public virtual CheckRosterlineStep24ExpectedValues CheckRosterlineStep24ExpectedValues
        {
            get
            {
                if ((this.mCheckRosterlineStep24ExpectedValues == null))
                {
                    this.mCheckRosterlineStep24ExpectedValues = new CheckRosterlineStep24ExpectedValues();
                }
                return this.mCheckRosterlineStep24ExpectedValues;
            }
        }
        
        public virtual CheckRosterlineStep7ExpectedValues CheckRosterlineStep7ExpectedValues
        {
            get
            {
                if ((this.mCheckRosterlineStep7ExpectedValues == null))
                {
                    this.mCheckRosterlineStep7ExpectedValues = new CheckRosterlineStep7ExpectedValues();
                }
                return this.mCheckRosterlineStep7ExpectedValues;
            }
        }
        
        public virtual CheckRosterlineStep8ExpectedValues CheckRosterlineStep8ExpectedValues
        {
            get
            {
                if ((this.mCheckRosterlineStep8ExpectedValues == null))
                {
                    this.mCheckRosterlineStep8ExpectedValues = new CheckRosterlineStep8ExpectedValues();
                }
                return this.mCheckRosterlineStep8ExpectedValues;
            }
        }
        
        public virtual ClickFilterPrAvdShowPlanOtherDepsParams ClickFilterPrAvdShowPlanOtherDepsParams
        {
            get
            {
                if ((this.mClickFilterPrAvdShowPlanOtherDepsParams == null))
                {
                    this.mClickFilterPrAvdShowPlanOtherDepsParams = new ClickFilterPrAvdShowPlanOtherDepsParams();
                }
                return this.mClickFilterPrAvdShowPlanOtherDepsParams;
            }
        }
        
        public virtual ClickFilterPrAvdShowShiftBookLinesParams ClickFilterPrAvdShowShiftBookLinesParams
        {
            get
            {
                if ((this.mClickFilterPrAvdShowShiftBookLinesParams == null))
                {
                    this.mClickFilterPrAvdShowShiftBookLinesParams = new ClickFilterPrAvdShowShiftBookLinesParams();
                }
                return this.mClickFilterPrAvdShowShiftBookLinesParams;
            }
        }
        
        public virtual SetRosterplanDisplayDateStep22Params SetRosterplanDisplayDateStep22Params
        {
            get
            {
                if ((this.mSetRosterplanDisplayDateStep22Params == null))
                {
                    this.mSetRosterplanDisplayDateStep22Params = new SetRosterplanDisplayDateStep22Params();
                }
                return this.mSetRosterplanDisplayDateStep22Params;
            }
        }
        
        public virtual ShowAllRosterlinesOnAllDepsFilterParams ShowAllRosterlinesOnAllDepsFilterParams
        {
            get
            {
                if ((this.mShowAllRosterlinesOnAllDepsFilterParams == null))
                {
                    this.mShowAllRosterlinesOnAllDepsFilterParams = new ShowAllRosterlinesOnAllDepsFilterParams();
                }
                return this.mShowAllRosterlinesOnAllDepsFilterParams;
            }
        }
        
        public virtual CheckPlanSettingsStep30_2ExpectedValues CheckPlanSettingsStep30_2ExpectedValues
        {
            get
            {
                if ((this.mCheckPlanSettingsStep30_2ExpectedValues == null))
                {
                    this.mCheckPlanSettingsStep30_2ExpectedValues = new CheckPlanSettingsStep30_2ExpectedValues();
                }
                return this.mCheckPlanSettingsStep30_2ExpectedValues;
            }
        }
        
        public UIArbeidsplanInnstilliWindow UIArbeidsplanInnstilliWindow
        {
            get
            {
                if ((this.mUIArbeidsplanInnstilliWindow == null))
                {
                    this.mUIArbeidsplanInnstilliWindow = new UIArbeidsplanInnstilliWindow();
                }
                return this.mUIArbeidsplanInnstilliWindow;
            }
        }
        
        public UIRegistreringsstatusWindow UIRegistreringsstatusWindow
        {
            get
            {
                if ((this.mUIRegistreringsstatusWindow == null))
                {
                    this.mUIRegistreringsstatusWindow = new UIRegistreringsstatusWindow();
                }
                return this.mUIRegistreringsstatusWindow;
            }
        }
        
        public UILeggtilansatteWindow UILeggtilansatteWindow
        {
            get
            {
                if ((this.mUILeggtilansatteWindow == null))
                {
                    this.mUILeggtilansatteWindow = new UILeggtilansatteWindow();
                }
                return this.mUILeggtilansatteWindow;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UIRPL23006InformasjonWindow UIRPL23006InformasjonWindow
        {
            get
            {
                if ((this.mUIRPL23006InformasjonWindow == null))
                {
                    this.mUIRPL23006InformasjonWindow = new UIRPL23006InformasjonWindow();
                }
                return this.mUIRPL23006InformasjonWindow;
            }
        }
        
        public UIOppsettforavdeling50Window UIOppsettforavdeling50Window
        {
            get
            {
                if ((this.mUIOppsettforavdeling50Window == null))
                {
                    this.mUIOppsettforavdeling50Window = new UIOppsettforavdeling50Window();
                }
                return this.mUIOppsettforavdeling50Window;
            }
        }
        
        public UIGlobaltarbeidsplanopWindow UIGlobaltarbeidsplanopWindow
        {
            get
            {
                if ((this.mUIGlobaltarbeidsplanopWindow == null))
                {
                    this.mUIGlobaltarbeidsplanopWindow = new UIGlobaltarbeidsplanopWindow();
                }
                return this.mUIGlobaltarbeidsplanopWindow;
            }
        }
        
        public UIArbeidsplanInnstilliWindow1 UIArbeidsplanInnstilliWindow1
        {
            get
            {
                if ((this.mUIArbeidsplanInnstilliWindow1 == null))
                {
                    this.mUIArbeidsplanInnstilliWindow1 = new UIArbeidsplanInnstilliWindow1();
                }
                return this.mUIArbeidsplanInnstilliWindow1;
            }
        }
        #endregion
        
        #region Fields
        private AddRosterplanShiftStep_6Params mAddRosterplanShiftStep_6Params;
        
        private AddSettingsStep25Params mAddSettingsStep25Params;
        
        private AddSettingsStep26Params mAddSettingsStep26Params;
        
        private CheckCheckboxesDisabledStep16ExpectedValues mCheckCheckboxesDisabledStep16ExpectedValues;
        
        private CheckInfoWindowExpectedValues mCheckInfoWindowExpectedValues;
        
        private CheckNewPlanDefaultDataExpectedValues mCheckNewPlanDefaultDataExpectedValues;
        
        private CheckOKDisabledStep27ExpectedValues mCheckOKDisabledStep27ExpectedValues;
        
        private CheckPlanSettingsStep30ExpectedValues mCheckPlanSettingsStep30ExpectedValues;
        
        private CheckPlanStartWeekStep23ExpectedValues mCheckPlanStartWeekStep23ExpectedValues;
        
        private CheckPlanStartWeekVisualizationStep23ExpectedValues mCheckPlanStartWeekVisualizationStep23ExpectedValues;
        
        private CheckRegStatusExpectedValues mCheckRegStatusExpectedValues;
        
        private CheckRegStatusStep28ExpectedValues mCheckRegStatusStep28ExpectedValues;
        
        private CheckRosterCalculationsStep15ExpectedValues mCheckRosterCalculationsStep15ExpectedValues;
        
        private CheckRosterCalculationsStep19ExpectedValues mCheckRosterCalculationsStep19ExpectedValues;
        
        private CheckRosterLinesStep19ExpectedValues mCheckRosterLinesStep19ExpectedValues;
        
        private CheckRosterLinesStep6ExpectedValues mCheckRosterLinesStep6ExpectedValues;
        
        private CheckRosterlineStep24ExpectedValues mCheckRosterlineStep24ExpectedValues;
        
        private CheckRosterlineStep7ExpectedValues mCheckRosterlineStep7ExpectedValues;
        
        private CheckRosterlineStep8ExpectedValues mCheckRosterlineStep8ExpectedValues;
        
        private ClickFilterPrAvdShowPlanOtherDepsParams mClickFilterPrAvdShowPlanOtherDepsParams;
        
        private ClickFilterPrAvdShowShiftBookLinesParams mClickFilterPrAvdShowShiftBookLinesParams;
        
        private SetRosterplanDisplayDateStep22Params mSetRosterplanDisplayDateStep22Params;
        
        private ShowAllRosterlinesOnAllDepsFilterParams mShowAllRosterlinesOnAllDepsFilterParams;
        
        private CheckPlanSettingsStep30_2ExpectedValues mCheckPlanSettingsStep30_2ExpectedValues;
        
        private UIArbeidsplanInnstilliWindow mUIArbeidsplanInnstilliWindow;
        
        private UIRegistreringsstatusWindow mUIRegistreringsstatusWindow;
        
        private UILeggtilansatteWindow mUILeggtilansatteWindow;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UIRPL23006InformasjonWindow mUIRPL23006InformasjonWindow;
        
        private UIOppsettforavdeling50Window mUIOppsettforavdeling50Window;
        
        private UIGlobaltarbeidsplanopWindow mUIGlobaltarbeidsplanopWindow;
        
        private UIArbeidsplanInnstilliWindow1 mUIArbeidsplanInnstilliWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRosterplanShiftStep_6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddRosterplanShiftStep_6Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'n1{Tab}' in '[Row]0[Column]RosterCell_1' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "n1{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddSettingsStep25'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddSettingsStep25Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Kalenderplan' in combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Kalenderplan";
        
        /// <summary>
        /// Type '10' in text box
        /// </summary>
        public string UIItemEditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '5' in text box
        /// </summary>
        public string UIItemEditText1 = "5";
        
        /// <summary>
        /// Type '{Tab}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Select 'Nattevakter på startdagen er standard' check box
        /// </summary>
        public bool UINattevakterpåstartdaCheckBoxChecked = true;
        
        /// <summary>
        /// Type '{Tab}' in 'Nattevakter på startdagen er standard' check box
        /// </summary>
        public string UINattevakterpåstartdaCheckBoxSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddSettingsStep26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddSettingsStep26Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'krav om' in 'txtFilter' text box
        /// </summary>
        public string UITxtFilterEditValueAsString = "krav om";
        
        /// <summary>
        /// Select 'chkEdit' check box
        /// </summary>
        public bool UIChkEditCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCheckboxesDisabledStep16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckCheckboxesDisabledStep16ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDoLoadWorkScheduleData' check box equals 'False'
        /// </summary>
        public bool UIChkDoLoadWorkSchedulCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'chkDoLoadWorkScheduleData' check box equals 'False'
        /// </summary>
        public bool UIChkDoLoadWorkSchedulCheckBoxEnabled = false;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDoLoadOtherRosterplanData' check box equals 'False'
        /// </summary>
        public bool UIChkDoLoadOtherRosterCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'chkDoLoadOtherRosterplanData' check box equals 'False'
        /// </summary>
        public bool UIChkDoLoadOtherRosterCheckBoxEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckInfoWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckInfoWindowExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'eMessage' text box equals 'Innstillinger for planen relatert til regelsjekk og validering mot vaktbok og andre planer er endret. 
        ///
        ///Planen må lastes på nytt og lukkes nå derfor automatisk.'
        /// </summary>
        public string UIEMessageEditText = "Innstillinger for planen relatert til regelsjekk og validering mot vaktbok og and" +
            "re planer er endret. \r\n\r\nPlanen må lastes på nytt og lukkes nå derfor automatisk" +
            ".";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckNewPlanDefaultData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckNewPlanDefaultDataExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'eName' text box equals ''
        /// </summary>
        public string UIENameEditText = "";
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'pbSymbol' client equals 'True'
        /// </summary>
        public bool UIPbSymbolClientEnabled = true;
        
        /// <summary>
        /// Verify that the 'HasFocus' property of 'Ok' button equals 'False'
        /// </summary>
        public bool UIOKButtonHasFocus = false;
        
        /// <summary>
        /// Verify that the 'Text' property of 'leRosterplanType' LookUpEdit equals 'Arbeidsplan'
        /// </summary>
        public string UILeRosterplanTypeLookUpEditText = "Arbeidsplan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'eNumber[1]' text box equals '6'
        /// </summary>
        public string UIENumber1EditText = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of 'leHeadingDateFormatting' LookUpEdit equals 'Ma'
        /// </summary>
        public string UILeHeadingDateFormattLookUpEditText = "Ma";
        
        /// <summary>
        /// Verify that the 'Text' property of 'eNumber[0]' text box equals '3'
        /// </summary>
        public string UIENumber0EditText = "3";
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDraft' check box equals 'False'
        /// </summary>
        public bool UIChkDraftCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkIsReadyForApproval' check box equals 'False'
        /// </summary>
        public bool UIChkIsReadyForApprovaCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkPublishInMyGat' check box equals 'False'
        /// </summary>
        public bool UIChkPublishInMyGatCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'eRosterplanTypeInMyGat' text box equals 'False'
        /// </summary>
        public bool UIERosterplanTypeInMyGEditEnabled = false;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkNighShiftOnStartDay' check box equals 'False'
        /// </summary>
        public bool UIChkNighShiftOnStartDCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'chkDoUseWeek0AndNPlus1' check box equals 'False'
        /// </summary>
        public bool UIChkDoUseWeek0AndNPluCheckBoxEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'chkInactive' check box equals 'False'
        /// </summary>
        public bool UIChkInactiveCheckBoxEnabled = false;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkUseLimitedScope' check box equals 'False'
        /// </summary>
        public bool UIChkUseLimitedScopeCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDoLoadWorkScheduleData' check box equals 'True'
        /// </summary>
        public bool UIChkDoLoadWorkSchedulCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'chkDoLoadOtherRosterplanData' check box equals 'True'
        /// </summary>
        public bool UIChkDoLoadOtherRosterCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOKDisabledStep27'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOKDisabledStep27ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Ok' button equals 'False'
        /// </summary>
        public bool UIOKButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlanSettingsStep30'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckPlanSettingsStep30ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'leDepartment' client equals 'False'
        /// </summary>
        public bool UILeDepartmentClientEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'leRosterplanType' LookUpEdit equals 'False'
        /// </summary>
        public bool UILeRosterplanTypeLookUpEditEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'eStartDate' custom control equals 'False'
        /// </summary>
        public bool UIEStartDateCustomEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'eStopDate' custom control equals 'False'
        /// </summary>
        public bool UIEStopDateCustomEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'eValidToDate' custom control equals 'False'
        /// </summary>
        public bool UIEValidToDateCustomEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'leDisplayStartDate' LookUpEdit equals 'False'
        /// </summary>
        public bool UILeDisplayStartDateLookUpEditEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'chkNighShiftOnStartDay' check box equals 'False'
        /// </summary>
        public bool UIChkNighShiftOnStartDCheckBoxEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlanStartWeekStep23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckPlanStartWeekStep23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'BandName' property of 'Band_Week_1' GridBand equals 'Band_Week_1'
        /// </summary>
        public string UIBand_Week_1GridBandBandName = "Band_Week_1";
        
        /// <summary>
        /// Verify that the 'BandName' property of 'Band_Week_2' GridBand equals 'Band_Week_2'
        /// </summary>
        public string UIBand_Week_2GridBandBandName = "Band_Week_2";
        
        /// <summary>
        /// Verify that the 'BandName' property of 'Band_Week_3' GridBand equals 'Band_Week_3'
        /// </summary>
        public string UIBand_Week_3GridBandBandName = "Band_Week_3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlanStartWeekVisualizationStep23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckPlanStartWeekVisualizationStep23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'lblVizCap' label equals 'Mandag 13.01.2025 (Uke 1/2025)'
        /// </summary>
        public string UILblVizCapLabelText = "Mandag 13.01.2025 (Uke 1/2025)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRegStatus'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRegStatusExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Arbeidsplan mangler navn.' cell equals 'Arbeidsplan mangler navn.'
        /// </summary>
        public string UIArbeidsplanmanglernaCellText = "Arbeidsplan mangler navn.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Manglende bemanningsplan(er).' cell equals 'Manglende bemanningsplan(er).'
        /// </summary>
        public string UIManglendebemanningspCellText = "Manglende bemanningsplan(er).";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRegStatusStep28'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRegStatusStep28ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Arbeidsplan mangler navn.' cell equals 'Manglende bemanningsplan(er).'
        /// </summary>
        public string UIArbeidsplanmanglernaCellText = "Manglende bemanningsplan(er).";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Det er ikke valgt bemanningsplan(er) som er aktiv i hele gyldighetsperioden til arbeidsplan. I globalt oppsett er det satt krav til å ha bemanningsplan(er) som dekker hele gyldighetsperioden til arbeidsplan.' cell equals 'Det er ikke valgt bemanningsplan(er) som er aktiv i hele gyldighetsperioden til arbeidsplan. I globalt oppsett er det satt krav til å ha bemanningsplan(er) som dekker hele gyldighetsperioden til arbeidsplan.'
        /// </summary>
        public string UIDeterikkevalgtbemannCellText = "Det er ikke valgt bemanningsplan(er) som er aktiv i hele gyldighetsperioden til a" +
            "rbeidsplan. I globalt oppsett er det satt krav til å ha bemanningsplan(er) som d" +
            "ekker hele gyldighetsperioden til arbeidsplan.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRosterCalculationsStep15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRosterCalculationsStep15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '35,5' cell equals '35,5'
        /// </summary>
        public string UIItem355CellText = "35,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '3' cell equals '3'
        /// </summary>
        public string UIItem3CellText = "3";
        
        /// <summary>
        /// Verify that the 'Text' property of '-32,5' cell equals '-32,5'
        /// </summary>
        public string UIItem325CellText = "-32,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '106,5' cell equals '106,5'
        /// </summary>
        public string UIItem1065CellText = "106,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '9' cell equals '9'
        /// </summary>
        public string UIItem9CellText = "9";
        
        /// <summary>
        /// Verify that the 'Text' property of '-97,5' cell equals '-97,5'
        /// </summary>
        public string UIItem975CellText = "-97,5";
        
        /// <summary>
        /// Verify that the 'Text' property of '8,45%' cell equals '8,45%'
        /// </summary>
        public string UIItem845CellText = "8,45%";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell3Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell4Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell5Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell6Text = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRosterCalculationsStep19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRosterCalculationsStep19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '3' cell equals '0'
        /// </summary>
        public string UIItem3CellText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of '9' cell equals '0'
        /// </summary>
        public string UIItem9CellText = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRosterLinesStep19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRosterLinesStep19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'N1'
        /// </summary>
        public string UIItemCellText = "N1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRosterLinesStep6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRosterLinesStep6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'N1'
        /// </summary>
        public string UIItemCellText = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1CellText = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A1' cell equals 'A1'
        /// </summary>
        public string UIA1CellText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRosterlineStep24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRosterlineStep24ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'N1'
        /// </summary>
        public string UIItemCellText = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell2Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals ''
        /// </summary>
        public string UIGV1CellText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell3Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell4Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell5Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell6Text = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRosterlineStep7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRosterlineStep7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'N1'
        /// </summary>
        public string UIItemCellText = "N1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRosterlineStep8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRosterlineStep8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of cell equals 'N1'
        /// </summary>
        public string UIItemCellText = "N1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D3' cell equals 'D3'
        /// </summary>
        public string UID3CellText = "D3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1CellText = "GV1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClickFilterPrAvdShowPlanOtherDeps'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ClickFilterPrAvdShowPlanOtherDepsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'True' in 'Node1' TreeListNode
        /// </summary>
        public bool UINode1TreeListNodeChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClickFilterPrAvdShowShiftBookLines'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ClickFilterPrAvdShowShiftBookLinesParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'True' in 'Node0' TreeListNode
        /// </summary>
        public bool UINode0TreeListNodeChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetRosterplanDisplayDateStep22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetRosterplanDisplayDateStep22Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'System.DateTime' in 'leDisplayStartDate' LookUpEdit
        /// </summary>
        public string UILeDisplayStartDateLookUpEditValueTypeName = "System.DateTime";
        
        /// <summary>
        /// Type '2025-01-13' in 'leDisplayStartDate' LookUpEdit
        /// </summary>
        public string UILeDisplayStartDateLookUpEditValueAsString = "2025-01-13";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ShowAllRosterlinesOnAllDepsFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ShowAllRosterlinesOnAllDepsFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'True' in 'Node0' TreeListNode
        /// </summary>
        public bool UINode0TreeListNodeChecked = true;
        
        /// <summary>
        /// Type 'True' in 'Node1' TreeListNode
        /// </summary>
        public bool UINode1TreeListNodeChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlanSettingsStep30_2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckPlanSettingsStep30_2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'eNumber[1]' text box equals 'False'
        /// </summary>
        public bool UIENumber1EditEnabled = false;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanInnstilliWindow : DXWindow
    {
        
        public UIArbeidsplanInnstilliWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan - Innstillinger";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public UIPaTopClient UIPaTopClient
        {
            get
            {
                if ((this.mUIPaTopClient == null))
                {
                    this.mUIPaTopClient = new UIPaTopClient(this);
                }
                return this.mUIPaTopClient;
            }
        }
        
        public UITcDataTabList UITcDataTabList
        {
            get
            {
                if ((this.mUITcDataTabList == null))
                {
                    this.mUITcDataTabList = new UITcDataTabList(this);
                }
                return this.mUITcDataTabList;
            }
        }
        
        public UIPaBottomClient UIPaBottomClient
        {
            get
            {
                if ((this.mUIPaBottomClient == null))
                {
                    this.mUIPaBottomClient = new UIPaBottomClient(this);
                }
                return this.mUIPaBottomClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaTopClient mUIPaTopClient;
        
        private UITcDataTabList mUITcDataTabList;
        
        private UIPaBottomClient mUIPaBottomClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaTopClient : DXTestControl
    {
        
        public UIPaTopClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paTop";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXPopupEdit UILnkDetailPopupEdit
        {
            get
            {
                if ((this.mUILnkDetailPopupEdit == null))
                {
                    this.mUILnkDetailPopupEdit = new DXPopupEdit(this);
                    #region Search Criteria
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "lnkDetail";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerEdit";
                    this.mUILnkDetailPopupEdit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "5";
                    this.mUILnkDetailPopupEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUILnkDetailPopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXPopupEdit mUILnkDetailPopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcDataTabList : DXTestControl
    {
        
        public UITcDataTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcData";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public UITpConfigurationClient UITpConfigurationClient
        {
            get
            {
                if ((this.mUITpConfigurationClient == null))
                {
                    this.mUITpConfigurationClient = new UITpConfigurationClient(this);
                }
                return this.mUITpConfigurationClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpConfigurationClient mUITpConfigurationClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpConfigurationClient : DXTestControl
    {
        
        public UITpConfigurationClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpConfiguration";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public UIPaCenterClient UIPaCenterClient
        {
            get
            {
                if ((this.mUIPaCenterClient == null))
                {
                    this.mUIPaCenterClient = new UIPaCenterClient(this);
                }
                return this.mUIPaCenterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaCenterClient mUIPaCenterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaCenterClient : DXTestControl
    {
        
        public UIPaCenterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paCenter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIENameEdit
        {
            get
            {
                if ((this.mUIENameEdit == null))
                {
                    this.mUIENameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eName";
                    this.mUIENameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENameEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIENameEdit;
            }
        }
        
        public UIPbSymbolWindow UIPbSymbolWindow
        {
            get
            {
                if ((this.mUIPbSymbolWindow == null))
                {
                    this.mUIPbSymbolWindow = new UIPbSymbolWindow(this);
                }
                return this.mUIPbSymbolWindow;
            }
        }
        
        public DXLookUpEdit UILeRosterplanTypeLookUpEdit
        {
            get
            {
                if ((this.mUILeRosterplanTypeLookUpEdit == null))
                {
                    this.mUILeRosterplanTypeLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILeRosterplanTypeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leRosterplanType";
                    this.mUILeRosterplanTypeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    this.mUILeRosterplanTypeLookUpEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUILeRosterplanTypeLookUpEdit;
            }
        }
        
        public UIEStartDateCustom UIEStartDateCustom
        {
            get
            {
                if ((this.mUIEStartDateCustom == null))
                {
                    this.mUIEStartDateCustom = new UIEStartDateCustom(this);
                }
                return this.mUIEStartDateCustom;
            }
        }
        
        public DXTextEdit UIENumber1Edit
        {
            get
            {
                if ((this.mUIENumber1Edit == null))
                {
                    this.mUIENumber1Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[1]";
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber1Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber1Edit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIENumber1Edit;
            }
        }
        
        public UIEStopDateCustom UIEStopDateCustom
        {
            get
            {
                if ((this.mUIEStopDateCustom == null))
                {
                    this.mUIEStopDateCustom = new UIEStopDateCustom(this);
                }
                return this.mUIEStopDateCustom;
            }
        }
        
        public UIEValidToDateCustom UIEValidToDateCustom
        {
            get
            {
                if ((this.mUIEValidToDateCustom == null))
                {
                    this.mUIEValidToDateCustom = new UIEValidToDateCustom(this);
                }
                return this.mUIEValidToDateCustom;
            }
        }
        
        public DXLookUpEdit UILeHeadingDateFormattLookUpEdit
        {
            get
            {
                if ((this.mUILeHeadingDateFormattLookUpEdit == null))
                {
                    this.mUILeHeadingDateFormattLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILeHeadingDateFormattLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leHeadingDateFormatting";
                    this.mUILeHeadingDateFormattLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    this.mUILeHeadingDateFormattLookUpEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUILeHeadingDateFormattLookUpEdit;
            }
        }
        
        public DXLookUpEdit UILeDisplayStartDateLookUpEdit
        {
            get
            {
                if ((this.mUILeDisplayStartDateLookUpEdit == null))
                {
                    this.mUILeDisplayStartDateLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILeDisplayStartDateLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leDisplayStartDate";
                    this.mUILeDisplayStartDateLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    this.mUILeDisplayStartDateLookUpEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUILeDisplayStartDateLookUpEdit;
            }
        }
        
        public DXTextEdit UIENumber0Edit
        {
            get
            {
                if ((this.mUIENumber0Edit == null))
                {
                    this.mUIENumber0Edit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENumber0Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNumber[0]";
                    this.mUIENumber0Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIENumber0Edit.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIENumber0Edit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIENumber0Edit;
            }
        }
        
        public DXCheckBox UIChkDraftCheckBox
        {
            get
            {
                if ((this.mUIChkDraftCheckBox == null))
                {
                    this.mUIChkDraftCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkDraftCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkDraft";
                    this.mUIChkDraftCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkDraftCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkDraftCheckBox;
            }
        }
        
        public DXCheckBox UIChkIsReadyForApprovaCheckBox
        {
            get
            {
                if ((this.mUIChkIsReadyForApprovaCheckBox == null))
                {
                    this.mUIChkIsReadyForApprovaCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkIsReadyForApprovaCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkIsReadyForApproval";
                    this.mUIChkIsReadyForApprovaCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkIsReadyForApprovaCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkIsReadyForApprovaCheckBox;
            }
        }
        
        public DXCheckBox UIChkPublishInMyGatCheckBox
        {
            get
            {
                if ((this.mUIChkPublishInMyGatCheckBox == null))
                {
                    this.mUIChkPublishInMyGatCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkPublishInMyGatCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkPublishInMyGat";
                    this.mUIChkPublishInMyGatCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkPublishInMyGatCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkPublishInMyGatCheckBox;
            }
        }
        
        public DXTextEdit UIERosterplanTypeInMyGEdit
        {
            get
            {
                if ((this.mUIERosterplanTypeInMyGEdit == null))
                {
                    this.mUIERosterplanTypeInMyGEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIERosterplanTypeInMyGEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eRosterplanTypeInMyGat";
                    this.mUIERosterplanTypeInMyGEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUIERosterplanTypeInMyGEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIERosterplanTypeInMyGEdit;
            }
        }
        
        public DXCheckBox UIChkNighShiftOnStartDCheckBox
        {
            get
            {
                if ((this.mUIChkNighShiftOnStartDCheckBox == null))
                {
                    this.mUIChkNighShiftOnStartDCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkNighShiftOnStartDCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkNighShiftOnStartDay";
                    this.mUIChkNighShiftOnStartDCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkNighShiftOnStartDCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkNighShiftOnStartDCheckBox;
            }
        }
        
        public DXCheckBox UIChkDoUseWeek0AndNPluCheckBox
        {
            get
            {
                if ((this.mUIChkDoUseWeek0AndNPluCheckBox == null))
                {
                    this.mUIChkDoUseWeek0AndNPluCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkDoUseWeek0AndNPluCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkDoUseWeek0AndNPlus1";
                    this.mUIChkDoUseWeek0AndNPluCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkDoUseWeek0AndNPluCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkDoUseWeek0AndNPluCheckBox;
            }
        }
        
        public DXCheckBox UIChkInactiveCheckBox
        {
            get
            {
                if ((this.mUIChkInactiveCheckBox == null))
                {
                    this.mUIChkInactiveCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkInactiveCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkInactive";
                    this.mUIChkInactiveCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkInactiveCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkInactiveCheckBox;
            }
        }
        
        public DXCheckBox UIChkUseLimitedScopeCheckBox
        {
            get
            {
                if ((this.mUIChkUseLimitedScopeCheckBox == null))
                {
                    this.mUIChkUseLimitedScopeCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkUseLimitedScopeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkUseLimitedScope";
                    this.mUIChkUseLimitedScopeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkUseLimitedScopeCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkUseLimitedScopeCheckBox;
            }
        }
        
        public DXCheckBox UIChkDoLoadWorkSchedulCheckBox
        {
            get
            {
                if ((this.mUIChkDoLoadWorkSchedulCheckBox == null))
                {
                    this.mUIChkDoLoadWorkSchedulCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkDoLoadWorkSchedulCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkDoLoadWorkScheduleData";
                    this.mUIChkDoLoadWorkSchedulCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkDoLoadWorkSchedulCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkDoLoadWorkSchedulCheckBox;
            }
        }
        
        public DXCheckBox UIChkDoLoadOtherRosterCheckBox
        {
            get
            {
                if ((this.mUIChkDoLoadOtherRosterCheckBox == null))
                {
                    this.mUIChkDoLoadOtherRosterCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkDoLoadOtherRosterCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkDoLoadOtherRosterplanData";
                    this.mUIChkDoLoadOtherRosterCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkDoLoadOtherRosterCheckBox.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIChkDoLoadOtherRosterCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIENameEdit;
        
        private UIPbSymbolWindow mUIPbSymbolWindow;
        
        private DXLookUpEdit mUILeRosterplanTypeLookUpEdit;
        
        private UIEStartDateCustom mUIEStartDateCustom;
        
        private DXTextEdit mUIENumber1Edit;
        
        private UIEStopDateCustom mUIEStopDateCustom;
        
        private UIEValidToDateCustom mUIEValidToDateCustom;
        
        private DXLookUpEdit mUILeHeadingDateFormattLookUpEdit;
        
        private DXLookUpEdit mUILeDisplayStartDateLookUpEdit;
        
        private DXTextEdit mUIENumber0Edit;
        
        private DXCheckBox mUIChkDraftCheckBox;
        
        private DXCheckBox mUIChkIsReadyForApprovaCheckBox;
        
        private DXCheckBox mUIChkPublishInMyGatCheckBox;
        
        private DXTextEdit mUIERosterplanTypeInMyGEdit;
        
        private DXCheckBox mUIChkNighShiftOnStartDCheckBox;
        
        private DXCheckBox mUIChkDoUseWeek0AndNPluCheckBox;
        
        private DXCheckBox mUIChkInactiveCheckBox;
        
        private DXCheckBox mUIChkUseLimitedScopeCheckBox;
        
        private DXCheckBox mUIChkDoLoadWorkSchedulCheckBox;
        
        private DXCheckBox mUIChkDoLoadOtherRosterCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPbSymbolWindow : WinWindow
    {
        
        public UIPbSymbolWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pbSymbol";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public WinClient UIPbSymbolClient
        {
            get
            {
                if ((this.mUIPbSymbolClient == null))
                {
                    this.mUIPbSymbolClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPbSymbolClient.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIPbSymbolClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPbSymbolClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEStartDateCustom : DXTestControl
    {
        
        public UIEStartDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eStartDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEStopDateCustom : DXTestControl
    {
        
        public UIEStopDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eStopDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEValidToDateCustom : DXTestControl
    {
        
        public UIEValidToDateCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eValidToDate";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSmartDateEdit";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIPceDateDateTimeEdit
        {
            get
            {
                if ((this.mUIPceDateDateTimeEdit == null))
                {
                    this.mUIPceDateDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "pceDate";
                    this.mUIPceDateDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIPceDateDateTimeEdit.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIPceDateDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIPceDateDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaBottomClient : DXTestControl
    {
        
        public UIPaBottomClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paBottom";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRegistreringsstatusWindow : DXWindow
    {
        
        public UIRegistreringsstatusWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Registreringsstatus";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILcMessagesCustom UILcMessagesCustom
        {
            get
            {
                if ((this.mUILcMessagesCustom == null))
                {
                    this.mUILcMessagesCustom = new UILcMessagesCustom(this);
                }
                return this.mUILcMessagesCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMessagesCustom mUILcMessagesCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMessagesCustom : DXTestControl
    {
        
        public UILcMessagesCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILcgMessagesLayoutGroup UILcgMessagesLayoutGroup
        {
            get
            {
                if ((this.mUILcgMessagesLayoutGroup == null))
                {
                    this.mUILcgMessagesLayoutGroup = new UILcgMessagesLayoutGroup(this);
                }
                return this.mUILcgMessagesLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILcgMessagesLayoutGroup mUILcgMessagesLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcgMessagesLayoutGroup : DXBaseLayoutItem
    {
        
        public UILcgMessagesLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcgMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UILciMessagesLayoutControlItem UILciMessagesLayoutControlItem
        {
            get
            {
                if ((this.mUILciMessagesLayoutControlItem == null))
                {
                    this.mUILciMessagesLayoutControlItem = new UILciMessagesLayoutControlItem(this);
                }
                return this.mUILciMessagesLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILciMessagesLayoutControlItem mUILciMessagesLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILciMessagesLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILciMessagesLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public UIGMessagesTable UIGMessagesTable
        {
            get
            {
                if ((this.mUIGMessagesTable == null))
                {
                    this.mUIGMessagesTable = new UIGMessagesTable(this);
                }
                return this.mUIGMessagesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGMessagesTable mUIGMessagesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGMessagesTable : DXGrid
    {
        
        public UIGMessagesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessages";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Registreringsstatus");
            #endregion
        }
        
        #region Properties
        public DXCell UIArbeidsplanmanglernaCell
        {
            get
            {
                if ((this.mUIArbeidsplanmanglernaCell == null))
                {
                    this.mUIArbeidsplanmanglernaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIArbeidsplanmanglernaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]0[Column]gvMessagesColumn_Text";
                    this.mUIArbeidsplanmanglernaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIArbeidsplanmanglernaCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUIArbeidsplanmanglernaCell;
            }
        }
        
        public DXCell UIManglendebemanningspCell
        {
            get
            {
                if ((this.mUIManglendebemanningspCell == null))
                {
                    this.mUIManglendebemanningspCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIManglendebemanningspCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]1[Column]gvMessagesColumn_Text";
                    this.mUIManglendebemanningspCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIManglendebemanningspCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUIManglendebemanningspCell;
            }
        }
        
        public DXCell UIDeterikkevalgtbemannCell
        {
            get
            {
                if ((this.mUIDeterikkevalgtbemannCell == null))
                {
                    this.mUIDeterikkevalgtbemannCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDeterikkevalgtbemannCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gMessagesGridControlCell[View]gvMessages[Row]0[Column]gvMessagesColumn_Info";
                    this.mUIDeterikkevalgtbemannCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDeterikkevalgtbemannCell.WindowTitles.Add("Registreringsstatus");
                    #endregion
                }
                return this.mUIDeterikkevalgtbemannCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIArbeidsplanmanglernaCell;
        
        private DXCell mUIManglendebemanningspCell;
        
        private DXCell mUIDeterikkevalgtbemannCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeggtilansatteWindow : DXWindow
    {
        
        public UILeggtilansatteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Legg til ansatte";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UISelectDepartmentEmplCustom UISelectDepartmentEmplCustom
        {
            get
            {
                if ((this.mUISelectDepartmentEmplCustom == null))
                {
                    this.mUISelectDepartmentEmplCustom = new UISelectDepartmentEmplCustom(this);
                }
                return this.mUISelectDepartmentEmplCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISelectDepartmentEmplCustom mUISelectDepartmentEmplCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectDepartmentEmplCustom : DXTestControl
    {
        
        public UISelectDepartmentEmplCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SelectDepartmentEmployeesView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SelectDepartmentEmployeesView";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentContainerClient UIPcContentContainerClient
        {
            get
            {
                if ((this.mUIPcContentContainerClient == null))
                {
                    this.mUIPcContentContainerClient = new UIPcContentContainerClient(this);
                }
                return this.mUIPcContentContainerClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentContainerClient mUIPcContentContainerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentContainerClient : DXTestControl
    {
        
        public UIPcContentContainerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContentContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIGcDepartmentEmployeeTable UIGcDepartmentEmployeeTable
        {
            get
            {
                if ((this.mUIGcDepartmentEmployeeTable == null))
                {
                    this.mUIGcDepartmentEmployeeTable = new UIGcDepartmentEmployeeTable(this);
                }
                return this.mUIGcDepartmentEmployeeTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDepartmentEmployeeTable mUIGcDepartmentEmployeeTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDepartmentEmployeeTable : DXGrid
    {
        
        public UIGcDepartmentEmployeeTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXCell UIAndersenAstridCell
        {
            get
            {
                if ((this.mUIAndersenAstridCell == null))
                {
                    this.mUIAndersenAstridCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]1[Column]colE" +
                        "mployee";
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAndersenAstridCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAndersenAstridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAndersenAstridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIRosterPlanGridMenu1Custom UIRosterPlanGridMenu1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGridMenu1Custom == null))
                {
                    this.mUIRosterPlanGridMenu1Custom = new UIRosterPlanGridMenu1Custom(this);
                }
                return this.mUIRosterPlanGridMenu1Custom;
            }
        }
        
        public UIDpnlVisualizationDockPanel UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        
        private UIRosterPlanGridMenu1Custom mUIRosterPlanGridMenu1Custom;
        
        private UIDpnlVisualizationDockPanel mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        
        public UIDpnlColumnsDockPanel UIDpnlColumnsDockPanel
        {
            get
            {
                if ((this.mUIDpnlColumnsDockPanel == null))
                {
                    this.mUIDpnlColumnsDockPanel = new UIDpnlColumnsDockPanel(this);
                }
                return this.mUIDpnlColumnsDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        
        private UIDpnlColumnsDockPanel mUIDpnlColumnsDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_1";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit == null))
                {
                    this.mUIRow0ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_1";
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_2";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_1";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIGV1Cell
        {
            get
            {
                if ((this.mUIGV1Cell == null))
                {
                    this.mUIGV1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_1";
                    this.mUIGV1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell;
            }
        }
        
        public DXCell UIA1Cell
        {
            get
            {
                if ((this.mUIA1Cell == null))
                {
                    this.mUIA1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIA1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_1";
                    this.mUIA1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA1Cell;
            }
        }
        
        public DXCell UID3Cell
        {
            get
            {
                if ((this.mUID3Cell == null))
                {
                    this.mUID3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUID3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_8";
                    this.mUID3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID3Cell;
            }
        }
        
        public DXGridBand UIBand_Week_1GridBand
        {
            get
            {
                if ((this.mUIBand_Week_1GridBand == null))
                {
                    this.mUIBand_Week_1GridBand = new DXGridBand(this);
                    #region Search Criteria
                    this.mUIBand_Week_1GridBand.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlBand[View]gvRosterPlan[BandName]Band_Week_1";
                    this.mUIBand_Week_1GridBand.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlBand";
                    this.mUIBand_Week_1GridBand.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBand_Week_1GridBand;
            }
        }
        
        public DXGridBand UIBand_Week_2GridBand
        {
            get
            {
                if ((this.mUIBand_Week_2GridBand == null))
                {
                    this.mUIBand_Week_2GridBand = new DXGridBand(this);
                    #region Search Criteria
                    this.mUIBand_Week_2GridBand.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlBand[View]gvRosterPlan[BandName]Band_Week_2";
                    this.mUIBand_Week_2GridBand.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlBand";
                    this.mUIBand_Week_2GridBand.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBand_Week_2GridBand;
            }
        }
        
        public DXGridBand UIBand_Week_3GridBand
        {
            get
            {
                if ((this.mUIBand_Week_3GridBand == null))
                {
                    this.mUIBand_Week_3GridBand = new DXGridBand(this);
                    #region Search Criteria
                    this.mUIBand_Week_3GridBand.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlBand[View]gvRosterPlan[BandName]Band_Week_3";
                    this.mUIBand_Week_3GridBand.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlBand";
                    this.mUIBand_Week_3GridBand.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBand_Week_3GridBand;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_7";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_14";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_14";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItemCell;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIGV1Cell;
        
        private DXCell mUIA1Cell;
        
        private DXCell mUID3Cell;
        
        private DXGridBand mUIBand_Week_1GridBand;
        
        private DXGridBand mUIBand_Week_2GridBand;
        
        private DXGridBand mUIBand_Week_3GridBand;
        
        private DXCell mUIItemCell3;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell5;
        
        private DXCell mUIItemCell6;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlColumnsDockPanel : DXDockPanel
    {
        
        public UIDpnlColumnsDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlColumns";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UILeftSeparator
        {
            get
            {
                if ((this.mUILeftSeparator == null))
                {
                    this.mUILeftSeparator = new DXTestControl(this);
                    #region Search Criteria
                    this.mUILeftSeparator.SearchProperties[DXTestControl.PropertyNames.Name] = "Left";
                    this.mUILeftSeparator.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanelResizeZone";
                    this.mUILeftSeparator.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILeftSeparator;
            }
        }
        
        public UIDockPanel1_ContainerCustom UIDockPanel1_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel1_ContainerCustom == null))
                {
                    this.mUIDockPanel1_ContainerCustom = new UIDockPanel1_ContainerCustom(this);
                }
                return this.mUIDockPanel1_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUILeftSeparator;
        
        private UIDockPanel1_ContainerCustom mUIDockPanel1_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel1_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel1_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel1_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcExtraGridTable UIGcExtraGridTable
        {
            get
            {
                if ((this.mUIGcExtraGridTable == null))
                {
                    this.mUIGcExtraGridTable = new UIGcExtraGridTable(this);
                }
                return this.mUIGcExtraGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcExtraGridTable mUIGcExtraGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcExtraGridTable : DXGrid
    {
        
        public UIGcExtraGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem355Cell
        {
            get
            {
                if ((this.mUIItem355Cell == null))
                {
                    this.mUIItem355Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem355Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]HoursPerWeekBasedOnPosit" +
                        "ion";
                    this.mUIItem355Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem355Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem355Cell;
            }
        }
        
        public DXCell UIItem3Cell
        {
            get
            {
                if ((this.mUIItem3Cell == null))
                {
                    this.mUIItem3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]HoursPerWeekAverage";
                    this.mUIItem3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3Cell;
            }
        }
        
        public DXCell UIItem325Cell
        {
            get
            {
                if ((this.mUIItem325Cell == null))
                {
                    this.mUIItem325Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem325Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ActualAverageDifferenceW" +
                        "orkingHours";
                    this.mUIItem325Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem325Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem325Cell;
            }
        }
        
        public DXCell UIItem1065Cell
        {
            get
            {
                if ((this.mUIItem1065Cell == null))
                {
                    this.mUIItem1065Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1065Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]TotalWorkingHoursBasedOn" +
                        "Position";
                    this.mUIItem1065Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1065Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1065Cell;
            }
        }
        
        public DXCell UIItem9Cell
        {
            get
            {
                if ((this.mUIItem9Cell == null))
                {
                    this.mUIItem9Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem9Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]TotalWorkingHoursForLine" +
                        "";
                    this.mUIItem9Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem9Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem9Cell;
            }
        }
        
        public DXCell UIItem975Cell
        {
            get
            {
                if ((this.mUIItem975Cell == null))
                {
                    this.mUIItem975Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem975Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ActualTotalDifferenceFor" +
                        "Line";
                    this.mUIItem975Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem975Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem975Cell;
            }
        }
        
        public DXCell UIItem845Cell
        {
            get
            {
                if ((this.mUIItem845Cell == null))
                {
                    this.mUIItem845Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem845Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ActualPositionDifference" +
                        "";
                    this.mUIItem845Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem845Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem845Cell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]HoursPerWeekBasedOnPosit" +
                        "ion";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]HoursPerWeekAverage";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]ActualAverageDifferenceW" +
                        "orkingHours";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]TotalWorkingHoursBasedOn" +
                        "Position";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]1[Column]TotalWorkingHoursForLine" +
                        "";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ActualTotalDifferenceFor" +
                        "Line";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]3[Column]ActualPositionDifference" +
                        "";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem355Cell;
        
        private DXCell mUIItem3Cell;
        
        private DXCell mUIItem325Cell;
        
        private DXCell mUIItem1065Cell;
        
        private DXCell mUIItem9Cell;
        
        private DXCell mUIItem975Cell;
        
        private DXCell mUIItem845Cell;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItemCell3;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell5;
        
        private DXCell mUIItemCell6;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGridMenu1Custom : DXTestControl
    {
        
        public UIRosterPlanGridMenu1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGridMenu1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGridMenu";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRcMenuRibbon UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        #endregion
        
        #region Fields
        private UIRcMenuRibbon mUIRcMenuRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRcMenuRibbon : DXRibbon
    {
        
        public UIRcMenuRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpFilterRibbonPage UIRpFilterRibbonPage
        {
            get
            {
                if ((this.mUIRpFilterRibbonPage == null))
                {
                    this.mUIRpFilterRibbonPage = new UIRpFilterRibbonPage(this);
                }
                return this.mUIRpFilterRibbonPage;
            }
        }
        
        public UIPopupContainerEditPopupEdit UIPopupContainerEditPopupEdit
        {
            get
            {
                if ((this.mUIPopupContainerEditPopupEdit == null))
                {
                    this.mUIPopupContainerEditPopupEdit = new UIPopupContainerEditPopupEdit(this);
                }
                return this.mUIPopupContainerEditPopupEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIRpFilterRibbonPage mUIRpFilterRibbonPage;
        
        private UIPopupContainerEditPopupEdit mUIPopupContainerEditPopupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpFilterRibbonPage : DXRibbonPage
    {
        
        public UIRpFilterRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpgFilterRibbonPageGroup UIRpgFilterRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgFilterRibbonPageGroup == null))
                {
                    this.mUIRpgFilterRibbonPageGroup = new UIRpgFilterRibbonPageGroup(this);
                }
                return this.mUIRpgFilterRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgFilterRibbonPageGroup mUIRpgFilterRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpgFilterRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgFilterRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonEditItem UIDdlOtherDepFilterRibbonEditItem
        {
            get
            {
                if ((this.mUIDdlOtherDepFilterRibbonEditItem == null))
                {
                    this.mUIDdlOtherDepFilterRibbonEditItem = new DXRibbonEditItem(this);
                    #region Search Criteria
                    this.mUIDdlOtherDepFilterRibbonEditItem.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlOtherDepFilter";
                    this.mUIDdlOtherDepFilterRibbonEditItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonEditItem";
                    this.mUIDdlOtherDepFilterRibbonEditItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDdlOtherDepFilterRibbonEditItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonEditItem mUIDdlOtherDepFilterRibbonEditItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerEditPopupEdit : DXPopupEdit
    {
        
        public UIPopupContainerEditPopupEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenuPopupContainerEdit[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupContainerFormWindow UIPopupContainerFormWindow
        {
            get
            {
                if ((this.mUIPopupContainerFormWindow == null))
                {
                    this.mUIPopupContainerFormWindow = new UIPopupContainerFormWindow(this);
                }
                return this.mUIPopupContainerFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupContainerFormWindow mUIPopupContainerFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerFormWindow : DXWindow
    {
        
        public UIPopupContainerFormWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenuPopupContainerEdit[0]PopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDdlOtherDepFilterPopClient UIDdlOtherDepFilterPopClient
        {
            get
            {
                if ((this.mUIDdlOtherDepFilterPopClient == null))
                {
                    this.mUIDdlOtherDepFilterPopClient = new UIDdlOtherDepFilterPopClient(this);
                }
                return this.mUIDdlOtherDepFilterPopClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDdlOtherDepFilterPopClient mUIDdlOtherDepFilterPopClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDdlOtherDepFilterPopClient : DXTestControl
    {
        
        public UIDdlOtherDepFilterPopClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlOtherDepFilterPopupContainerControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDdlOtherDepFilterTreTreeList UIDdlOtherDepFilterTreTreeList
        {
            get
            {
                if ((this.mUIDdlOtherDepFilterTreTreeList == null))
                {
                    this.mUIDdlOtherDepFilterTreTreeList = new UIDdlOtherDepFilterTreTreeList(this);
                }
                return this.mUIDdlOtherDepFilterTreTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UIDdlOtherDepFilterTreTreeList mUIDdlOtherDepFilterTreTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDdlOtherDepFilterTreTreeList : DXTreeList
    {
        
        public UIDdlOtherDepFilterTreTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlOtherDepFilterTreeList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTreeList";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListNode UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new DXTreeListNode(this);
                    #region Search Criteria
                    this.mUINode0TreeListNode.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
                    this.mUINode0TreeListNode.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
                    this.mUINode0TreeListNode.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public DXTreeListNode UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new DXTreeListNode(this);
                    #region Search Criteria
                    this.mUINode1TreeListNode.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
                    this.mUINode1TreeListNode.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
                    this.mUINode1TreeListNode.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode1TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListNode mUINode0TreeListNode;
        
        private DXTreeListNode mUINode1TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlVisualizationDockPanel : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UITopSeparator
        {
            get
            {
                if ((this.mUITopSeparator == null))
                {
                    this.mUITopSeparator = new DXTestControl(this);
                    #region Search Criteria
                    this.mUITopSeparator.SearchProperties[DXTestControl.PropertyNames.Name] = "Top";
                    this.mUITopSeparator.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanelResizeZone";
                    this.mUITopSeparator.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUITopSeparator;
            }
        }
        
        public UIDockPanel3_ContainerCustom UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUITopSeparator;
        
        private UIDockPanel3_ContainerCustom mUIDockPanel3_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel3_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITcSubtabsTabList UITcSubtabsTabList
        {
            get
            {
                if ((this.mUITcSubtabsTabList == null))
                {
                    this.mUITcSubtabsTabList = new UITcSubtabsTabList(this);
                }
                return this.mUITcSubtabsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcSubtabsTabList mUITcSubtabsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcSubtabsTabList : DXTestControl
    {
        
        public UITcSubtabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabs";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabControlViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewTabPageClient UIViewTabPageClient
        {
            get
            {
                if ((this.mUIViewTabPageClient == null))
                {
                    this.mUIViewTabPageClient = new UIViewTabPageClient(this);
                }
                return this.mUIViewTabPageClient;
            }
        }
        
        public UIViewTabPageClient1 UIViewTabPageClient1
        {
            get
            {
                if ((this.mUIViewTabPageClient1 == null))
                {
                    this.mUIViewTabPageClient1 = new UIViewTabPageClient1(this);
                }
                return this.mUIViewTabPageClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIViewTabPageClient mUIViewTabPageClient;
        
        private UIViewTabPageClient1 mUIViewTabPageClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient : DXTestControl
    {
        
        public UIViewTabPageClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIValidationViewCustom UIValidationViewCustom
        {
            get
            {
                if ((this.mUIValidationViewCustom == null))
                {
                    this.mUIValidationViewCustom = new UIValidationViewCustom(this);
                }
                return this.mUIValidationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationViewCustom mUIValidationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIValidationViewCustom : DXTestControl
    {
        
        public UIValidationViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ValidationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ValidationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXGrid UIGridValidationMessagTable
        {
            get
            {
                if ((this.mUIGridValidationMessagTable == null))
                {
                    this.mUIGridValidationMessagTable = new DXGrid(this);
                    #region Search Criteria
                    this.mUIGridValidationMessagTable.SearchProperties[DXTestControl.PropertyNames.Name] = "gridValidationMessages";
                    this.mUIGridValidationMessagTable.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
                    this.mUIGridValidationMessagTable.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGridValidationMessagTable;
            }
        }
        #endregion
        
        #region Fields
        private DXGrid mUIGridValidationMessagTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient1 : DXTestControl
    {
        
        public UIViewTabPageClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIVisualizationViewCustom UIVisualizationViewCustom
        {
            get
            {
                if ((this.mUIVisualizationViewCustom == null))
                {
                    this.mUIVisualizationViewCustom = new UIVisualizationViewCustom(this);
                }
                return this.mUIVisualizationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVisualizationViewCustom mUIVisualizationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVisualizationViewCustom : DXTestControl
    {
        
        public UIVisualizationViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "VisualizationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VisualizationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanVisualizatCustom UIRosterPlanVisualizatCustom
        {
            get
            {
                if ((this.mUIRosterPlanVisualizatCustom == null))
                {
                    this.mUIRosterPlanVisualizatCustom = new UIRosterPlanVisualizatCustom(this);
                }
                return this.mUIRosterPlanVisualizatCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanVisualizatCustom mUIRosterPlanVisualizatCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanVisualizatCustom : DXTestControl
    {
        
        public UIRosterPlanVisualizatCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanVisualizationControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHost1Custom : DXTestControl
    {
        
        public UIViewHost1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient1 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient1(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient1 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient1 : DXTestControl
    {
        
        public UIPcViewClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIContainerViewCustom UIContainerViewCustom
        {
            get
            {
                if ((this.mUIContainerViewCustom == null))
                {
                    this.mUIContainerViewCustom = new UIContainerViewCustom(this);
                }
                return this.mUIContainerViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIContainerViewCustom mUIContainerViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContainerViewCustom : DXTestControl
    {
        
        public UIContainerViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ContainerView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ContainerView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControl1Client UIPanelControl1Client
        {
            get
            {
                if ((this.mUIPanelControl1Client == null))
                {
                    this.mUIPanelControl1Client = new UIPanelControl1Client(this);
                }
                return this.mUIPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControl1Client mUIPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControl1Client : DXTestControl
    {
        
        public UIPanelControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UILblVizCapLabel
        {
            get
            {
                if ((this.mUILblVizCapLabel == null))
                {
                    this.mUILblVizCapLabel = new DXTestControl(this);
                    #region Search Criteria
                    this.mUILblVizCapLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "lblVizCap";
                    this.mUILblVizCapLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LabelControl";
                    this.mUILblVizCapLabel.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUILblVizCapLabel;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUILblVizCapLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRPL23006InformasjonWindow : DXWindow
    {
        
        public UIRPL23006InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RPL2-3006 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIEMessageEdit
        {
            get
            {
                if ((this.mUIEMessageEdit == null))
                {
                    this.mUIEMessageEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIEMessageEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eMessage";
                    this.mUIEMessageEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSMemoEdit";
                    this.mUIEMessageEdit.WindowTitles.Add("RPL2-3006 - Informasjon");
                    #endregion
                }
                return this.mUIEMessageEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIEMessageEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOppsettforavdeling50Window : WinWindow
    {
        
        public UIOppsettforavdeling50Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmDepSetup";
            this.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIArbeidsplanClient UIArbeidsplanClient
        {
            get
            {
                if ((this.mUIArbeidsplanClient == null))
                {
                    this.mUIArbeidsplanClient = new UIArbeidsplanClient(this);
                }
                return this.mUIArbeidsplanClient;
            }
        }
        
        public UIItemClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIArbeidsplanClient mUIArbeidsplanClient;
        
        private UIItemClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxPageControl";
            this.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
            #endregion
        }
        
        #region Properties
        public WinClient UIOppsettforavdeling50Client
        {
            get
            {
                if ((this.mUIOppsettforavdeling50Client == null))
                {
                    this.mUIOppsettforavdeling50Client = new WinClient(this);
                    #region Search Criteria
                    this.mUIOppsettforavdeling50Client.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
                    #endregion
                }
                return this.mUIOppsettforavdeling50Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIOppsettforavdeling50Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TMSComboBox";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TMSEdit";
            this.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TMSEdit";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanClient : WinClient
    {
        
        public UIArbeidsplanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Arbeidsplan";
            this.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UINattevakterpåstartdaCheckBox
        {
            get
            {
                if ((this.mUINattevakterpåstartdaCheckBox == null))
                {
                    this.mUINattevakterpåstartdaCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUINattevakterpåstartdaCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Nattevakter på startdagen er standard";
                    this.mUINattevakterpåstartdaCheckBox.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
                    #endregion
                }
                return this.mUINattevakterpåstartdaCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUINattevakterpåstartdaCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemClient : WinClient
    {
        
        public UIItemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
            #endregion
        }
        
        #region Properties
        public WinButton UILagreoglukkButton
        {
            get
            {
                if ((this.mUILagreoglukkButton == null))
                {
                    this.mUILagreoglukkButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILagreoglukkButton.SearchProperties[WinButton.PropertyNames.Name] = "Lagre og lukk";
                    this.mUILagreoglukkButton.WindowTitles.Add("Oppsett for avdeling: 5010 - Arbeidsplan og hjelpeplan");
                    #endregion
                }
                return this.mUILagreoglukkButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILagreoglukkButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGlobaltarbeidsplanopWindow : DXWindow
    {
        
        public UIGlobaltarbeidsplanopWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Globalt arbeidsplanoppsett";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIPnlFilterClient UIPnlFilterClient
        {
            get
            {
                if ((this.mUIPnlFilterClient == null))
                {
                    this.mUIPnlFilterClient = new UIPnlFilterClient(this);
                }
                return this.mUIPnlFilterClient;
            }
        }
        
        public UINbcRosterSetupNavBar UINbcRosterSetupNavBar
        {
            get
            {
                if ((this.mUINbcRosterSetupNavBar == null))
                {
                    this.mUINbcRosterSetupNavBar = new UINbcRosterSetupNavBar(this);
                }
                return this.mUINbcRosterSetupNavBar;
            }
        }
        
        public UIPnlButtonsClient UIPnlButtonsClient
        {
            get
            {
                if ((this.mUIPnlButtonsClient == null))
                {
                    this.mUIPnlButtonsClient = new UIPnlButtonsClient(this);
                }
                return this.mUIPnlButtonsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlFilterClient mUIPnlFilterClient;
        
        private UINbcRosterSetupNavBar mUINbcRosterSetupNavBar;
        
        private UIPnlButtonsClient mUIPnlButtonsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlFilterClient : DXTestControl
    {
        
        public UIPnlFilterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIGrpFilterClient UIGrpFilterClient
        {
            get
            {
                if ((this.mUIGrpFilterClient == null))
                {
                    this.mUIGrpFilterClient = new UIGrpFilterClient(this);
                }
                return this.mUIGrpFilterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpFilterClient mUIGrpFilterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpFilterClient : DXTestControl
    {
        
        public UIGrpFilterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UITxtFilterEdit
        {
            get
            {
                if ((this.mUITxtFilterEdit == null))
                {
                    this.mUITxtFilterEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUITxtFilterEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "txtFilter";
                    this.mUITxtFilterEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    this.mUITxtFilterEdit.WindowTitles.Add("Globalt arbeidsplanoppsett");
                    #endregion
                }
                return this.mUITxtFilterEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUITxtFilterEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINbcRosterSetupNavBar : DXNavBar
    {
        
        public UINbcRosterSetupNavBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIKravombemanningsplanNavBarGroup UIKravombemanningsplanNavBarGroup
        {
            get
            {
                if ((this.mUIKravombemanningsplanNavBarGroup == null))
                {
                    this.mUIKravombemanningsplanNavBarGroup = new UIKravombemanningsplanNavBarGroup(this);
                }
                return this.mUIKravombemanningsplanNavBarGroup;
            }
        }
        
        public UINavBarGroupControlCoScrollableControl UINavBarGroupControlCoScrollableControl
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl = new UINavBarGroupControlCoScrollableControl(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIKravombemanningsplanNavBarGroup mUIKravombemanningsplanNavBarGroup;
        
        private UINavBarGroupControlCoScrollableControl mUINavBarGroupControlCoScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIKravombemanningsplanNavBarGroup : DXNavBarGroup
    {
        
        public UIKravombemanningsplanNavBarGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Krav om bemanningsplan? - Nei";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXNavBarGroupButton UIKravombemanningsplanNavBarGroupButton
        {
            get
            {
                if ((this.mUIKravombemanningsplanNavBarGroupButton == null))
                {
                    this.mUIKravombemanningsplanNavBarGroupButton = new DXNavBarGroupButton(this);
                    #region Search Criteria
                    this.mUIKravombemanningsplanNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Krav om bemanningsplan? - Nei";
                    this.mUIKravombemanningsplanNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupButton";
                    this.mUIKravombemanningsplanNavBarGroupButton.WindowTitles.Add("Globalt arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIKravombemanningsplanNavBarGroupButton;
            }
        }
        #endregion
        
        #region Fields
        private DXNavBarGroupButton mUIKravombemanningsplanNavBarGroupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "nbcRosterSetupNavBarGroupControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public UIPnlEditClient UIPnlEditClient
        {
            get
            {
                if ((this.mUIPnlEditClient == null))
                {
                    this.mUIPnlEditClient = new UIPnlEditClient(this);
                }
                return this.mUIPnlEditClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEditClient mUIPnlEditClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEditClient : DXTestControl
    {
        
        public UIPnlEditClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEdit";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UIChkEditCheckBox
        {
            get
            {
                if ((this.mUIChkEditCheckBox == null))
                {
                    this.mUIChkEditCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckEdit";
                    this.mUIChkEditCheckBox.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIChkEditCheckBox.WindowTitles.Add("Globalt arbeidsplanoppsett");
                    #endregion
                }
                return this.mUIChkEditCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUIChkEditCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlButtonsClient : DXTestControl
    {
        
        public UIPnlButtonsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Globalt arbeidsplanoppsett");
            #endregion
        }
        
        #region Properties
        public DXButton UILagreLukkButton
        {
            get
            {
                if ((this.mUILagreLukkButton == null))
                {
                    this.mUILagreLukkButton = new DXButton(this);
                    #region Search Criteria
                    this.mUILagreLukkButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSaveClose";
                    this.mUILagreLukkButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUILagreLukkButton.WindowTitles.Add("Globalt arbeidsplanoppsett");
                    #endregion
                }
                return this.mUILagreLukkButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUILagreLukkButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanInnstilliWindow1 : WinWindow
    {
        
        public UIArbeidsplanInnstilliWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Arbeidsplan - Innstillinger";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public UITcDataTabList1 UITcDataTabList
        {
            get
            {
                if ((this.mUITcDataTabList == null))
                {
                    this.mUITcDataTabList = new UITcDataTabList1(this);
                }
                return this.mUITcDataTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcDataTabList1 mUITcDataTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcDataTabList1 : DXTestControl
    {
        
        public UITcDataTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcData";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpConfigurationClient1 UITpConfigurationClient
        {
            get
            {
                if ((this.mUITpConfigurationClient == null))
                {
                    this.mUITpConfigurationClient = new UITpConfigurationClient1(this);
                }
                return this.mUITpConfigurationClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpConfigurationClient1 mUITpConfigurationClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpConfigurationClient1 : DXTestControl
    {
        
        public UITpConfigurationClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpConfiguration";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIPaCenterClient1 UIPaCenterClient
        {
            get
            {
                if ((this.mUIPaCenterClient == null))
                {
                    this.mUIPaCenterClient = new UIPaCenterClient1(this);
                }
                return this.mUIPaCenterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaCenterClient1 mUIPaCenterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaCenterClient1 : DXTestControl
    {
        
        public UIPaCenterClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paCenter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan - Innstillinger");
            #endregion
        }
        
        #region Properties
        public WinClient UILeDepartmentClient
        {
            get
            {
                if ((this.mUILeDepartmentClient == null))
                {
                    this.mUILeDepartmentClient = new WinClient(this);
                    #region Search Criteria
                    this.mUILeDepartmentClient.WindowTitles.Add("Arbeidsplan - Innstillinger");
                    #endregion
                }
                return this.mUILeDepartmentClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUILeDepartmentClient;
        #endregion
    }
}
