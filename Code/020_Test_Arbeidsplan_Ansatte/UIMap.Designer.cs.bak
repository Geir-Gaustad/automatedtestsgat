// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _020_Test_Arbeidsplan_Ansatte
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v18_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Add2EmployeesStep_10 - Use 'Add2EmployeesStep_10Params' to pass parameters into this method.
        /// </summary>
        public void Add2EmployeesStep_10()
        {
            #region Variable Declarations
            DXCell uIDaleneDollyCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIDaleneDollyCell;
            DXGrid uIGcDepartmentEmployeeTable = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable;
            #endregion

            // Click 'Dalene, Dolly' cell
            Mouse.Click(uIDaleneDollyCell, new Point(96, 9));

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.Add2EmployeesStep_10Params.UIGcDepartmentEmployeeTableSendKeys, ModifierKeys.Shift);
        }
        
        /// <summary>
        /// Add4EmployeesStep_29 - Use 'Add4EmployeesStep_29Params' to pass parameters into this method.
        /// </summary>
        public void Add4EmployeesStep_29()
        {
            #region Variable Declarations
            DXCell uIOlsenBrorCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIOlsenBrorCell;
            DXGrid uIGcDepartmentEmployeeTable = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable;
            #endregion

            // Click 'Olsen, Bror' cell
            Mouse.Click(uIOlsenBrorCell, new Point(67, 10));

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.Add4EmployeesStep_29Params.UIGcDepartmentEmployeeTableSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.Add4EmployeesStep_29Params.UIGcDepartmentEmployeeTableSendKeys1, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
            Keyboard.SendKeys(uIGcDepartmentEmployeeTable, this.Add4EmployeesStep_29Params.UIGcDepartmentEmployeeTableSendKeys2, ModifierKeys.Shift);
        }
        
        /// <summary>
        /// Add4EmployeesStep_6
        /// </summary>
        public void Add4EmployeesStep_6()
        {
            #region Variable Declarations
            DXCell uIAndersenAstridCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAndersenAstridCell;
            DXCell uIBronsonCharlieCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIBronsonCharlieCell;
            #endregion

            // Click 'Andersen, Astrid' cell
            Mouse.Click(uIAndersenAstridCell, new Point(92, 8));

            // Click 'Bronson, Charlie' cell while pressing Shift
            Mouse.Click(uIBronsonCharlieCell, MouseButtons.Left, ModifierKeys.Shift, new Point(94, 7));
        }
        
        /// <summary>
        /// AddCalendarplanShifts - Use 'AddCalendarplanShiftsParams' to pass parameters into this method.
        /// </summary>
        public void AddCalendarplanShifts()
        {
            #region Variable Declarations
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXCell uIItemCell110 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell110;
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            #endregion

            // Move cell to cell
            uIItemCell110.EnsureClickable(new Point(24, 12));
            Mouse.StartDragging(uIItemCell6, new Point(933, 11));
            Mouse.StopDragging(uIItemCell110, new Point(24, 12));

            // Type 'd1{Tab}' in '[Row]0[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, this.AddCalendarplanShiftsParams.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddEmployeeFranzenStep_38
        /// </summary>
        public void AddEmployeeFranzenStep_38()
        {
            #region Variable Declarations
            DXCell uIOlsenBrorCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIOlsenBrorCell;
            #endregion

            // Click 'Olsen, Bror' cell
            Mouse.Click(uIOlsenBrorCell, new Point(29, 6));
        }
        
        /// <summary>
        /// AddEmployeeHansenStep_40
        /// </summary>
        public void AddEmployeeHansenStep_40()
        {
            #region Variable Declarations
            DXCell uIHansenHenrietteCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIHansenHenrietteCell;
            #endregion

            // Click 'Hansen, Henriette' cell
            Mouse.Click(uIHansenHenrietteCell, new Point(40, 9));
        }
        
        /// <summary>
        /// AddEmployeesStep_42
        /// </summary>
        public void AddEmployeesStep_42()
        {
            #region Variable Declarations
            DXCell uIAbrahamsenTrondCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAbrahamsenTrondCell;
            DXCell uICarlsenMagnusCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UICarlsenMagnusCell;
            #endregion

            // Click 'Abrahamsen, Trond' cell
            Mouse.Click(uIAbrahamsenTrondCell, new Point(46, 9));

            // Click 'Carlsen, Magnus' cell while pressing Control
            Mouse.Click(uICarlsenMagnusCell, MouseButtons.Left, ModifierKeys.Control, new Point(45, 8));
        }
        
        /// <summary>
        /// AddEmployeeUtneStep_20
        /// </summary>
        public void AddEmployeeUtneStep_20()
        {
            #region Variable Declarations
            DXCell uIUlneUlfCell1 = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIUlneUlfCell1;
            #endregion

            // Click 'Ulne, Ulf' cell
            Mouse.Click(uIUlneUlfCell1, new Point(57, 8));
        }
        
        /// <summary>
        /// AddF1ShiftStep_33 - Use 'AddF1ShiftStep_33Params' to pass parameters into this method.
        /// </summary>
        public void AddF1ShiftStep_33()
        {
            #region Variable Declarations
            DXCell uIItemCell40 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell40;
            DXTextEdit uIRow2ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit1;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell40, new Point(21, 10));

            // Type 'f1{Tab}' in '[Row]2[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit1, this.AddF1ShiftStep_33Params.UIRow2ColumnRosterCellEdit1SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddRosterplanShiftsStep_40 - Use 'AddRosterplanShiftsStep_40Params' to pass parameters into this method.
        /// </summary>
        public void AddRosterplanShiftsStep_40()
        {
            #region Variable Declarations
            DXCell uID1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell2;
            DXCell uID1Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell11;
            DXTextEdit uIRow13ColumnRosterCelEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow13ColumnRosterCelEdit;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            #endregion

            // Move 'D1' cell to 'D1' cell
            uID1Cell11.EnsureClickable(new Point(19, 8));
            Mouse.StartDragging(uID1Cell2, new Point(256, 6));
            Mouse.StopDragging(uID1Cell11, new Point(19, 8));

            // Type 'a1{Tab}' in '[Row]13[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow13ColumnRosterCelEdit, this.AddRosterplanShiftsStep_40Params.UIRow13ColumnRosterCelEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddRosterplanShiftsStep_42 - Use 'AddRosterplanShiftsStep_42Params' to pass parameters into this method.
        /// </summary>
        public void AddRosterplanShiftsStep_42()
        {
            #region Variable Declarations
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell6, new Point(18, 12));

            // Type 'Control + a' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.AddRosterplanShiftsStep_42Params.UIGcRosterPlanTableSendKeys, ModifierKeys.Control);

            // Type 'l4{Tab}' in '[Row]0[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, this.AddRosterplanShiftsStep_42Params.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddShiftsStep_33 - Use 'AddShiftsStep_33Params' to pass parameters into this method.
        /// </summary>
        public void AddShiftsStep_33()
        {
            #region Variable Declarations
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell1;
            DXTextEdit uIRow3ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell2;
            DXCell uIItemCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell3;
            DXTextEdit uIRow2ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit;
            DXCell uIItemCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell4;
            DXCell uIItemCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell5;
            DXTextEdit uIRow1ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit;
            DXCell uIItemCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell6;
            DXCell uIItemCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell7;
            DXTextEdit uIRow0ColumnRosterCellEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit;
            DXCell uIItemCell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell8;
            DXCell uIItemCell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell9;
            DXTextEdit uIRow2ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit1;
            #endregion

            // Move cell to cell
            uIItemCell1.EnsureClickable(new Point(18, 10));
            Mouse.StartDragging(uIItemCell, new Point(18, 10));
            Mouse.StopDragging(uIItemCell1, new Point(18, 10));

            // Type 'd1{Tab}' in '[Row]3[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit, this.AddShiftsStep_33Params.UIRow3ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell3.EnsureClickable(new Point(18, 9));
            Mouse.StartDragging(uIItemCell2, new Point(53, 9));
            Mouse.StopDragging(uIItemCell3, new Point(18, 9));

            // Type 'd2{Tab}' in '[Row]2[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit, this.AddShiftsStep_33Params.UIRow2ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell5.EnsureClickable(new Point(15, 7));
            Mouse.StartDragging(uIItemCell4, new Point(18, 5));
            Mouse.StopDragging(uIItemCell5, new Point(15, 7));

            // Type '1dag{Tab}' in '[Row]1[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit, this.AddShiftsStep_33Params.UIRow1ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell7.EnsureClickable(new Point(10, 8));
            Mouse.StartDragging(uIItemCell6, new Point(73, 11));
            Mouse.StopDragging(uIItemCell7, new Point(10, 8));

            // Type 'd{Tab}' in '[Row]0[Column]RosterCell_0' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit, this.AddShiftsStep_33Params.UIRow0ColumnRosterCellEditSendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell9.EnsureClickable(new Point(20, 9));
            Mouse.StartDragging(uIItemCell8, new Point(19, 10));
            Mouse.StopDragging(uIItemCell9, new Point(20, 9));

            // Type 'f1{Tab}' in '[Row]2[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit1, this.AddShiftsStep_33Params.UIRow2ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// AddShiftsStep_33_1 - Use 'AddShiftsStep_33_1Params' to pass parameters into this method.
        /// </summary>
        public void AddShiftsStep_33_1()
        {
            #region Variable Declarations
            DXCell uIItemCell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell10;
            DXTextEdit uIRow0ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit2;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell11;
            DXTextEdit uIRow1ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit1;
            DXCell uIItemCell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell12;
            DXCell uIItemCell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell13;
            DXTextEdit uIRow3ColumnRosterCellEdit1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit1;
            DXButton uIJAButton = this.UIGT4003InformasjonWindow.UIJAButton;
            DXCell uIItemCell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell14;
            DXCell uIItemCell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell15;
            DXTextEdit uIRow3ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit2;
            DXCell uIItemCell16 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell16;
            DXCell uIItemCell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell17;
            DXTextEdit uIRow3ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit3;
            DXCell uIItemCell18 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell18;
            DXTextEdit uIRow2ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit2;
            DXCell uIItemCell19 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell19;
            DXTextEdit uIRow1ColumnRosterCellEdit2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit2;
            DXCell uIItemCell20 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell20;
            DXTextEdit uIRow0ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit3;
            DXCell uIItemCell21 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell21;
            DXCell uIItemCell22 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell22;
            DXTextEdit uIRow0ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit4;
            DXCell uIItemCell23 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell23;
            DXCell uIItemCell24 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell24;
            DXTextEdit uIRow1ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit3;
            DXCell uIItemCell25 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell25;
            DXCell uIItemCell26 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell26;
            DXTextEdit uIRow2ColumnRosterCellEdit3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit3;
            DXCell uIItemCell27 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell27;
            DXCell uIItemCell28 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell28;
            DXTextEdit uIRow0ColumnRosterCellEdit5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit5;
            DXCell uIItemCell29 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell29;
            DXCell uIItemCell30 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell30;
            DXTextEdit uIRow1ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit4;
            DXCell uIItemCell31 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell31;
            DXCell uIItemCell32 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell32;
            DXTextEdit uIRow2ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit4;
            DXCell uIItemCell33 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell33;
            DXCell uIItemCell34 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell34;
            DXTextEdit uIRow3ColumnRosterCellEdit4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit4;
            DXCell uIItemCell35 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell35;
            DXTextEdit uIRow0ColumnRosterCellEdit6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow0ColumnRosterCellEdit6;
            DXCell uIItemCell36 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell36;
            DXTextEdit uIRow1ColumnRosterCellEdit8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow1ColumnRosterCellEdit8;
            DXCell uIItemCell37 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell37;
            DXTextEdit uIRow2ColumnRosterCellEdit5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow2ColumnRosterCellEdit5;
            DXCell uIItemCell38 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell38;
            DXCell uIItemCell39 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIItemCell39;
            DXTextEdit uIRow3ColumnRosterCellEdit5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIRow3ColumnRosterCellEdit5;
            #endregion

            // Click cell
            Mouse.Click(uIItemCell10, new Point(19, 12));

            // Type 'f1{Tab}' in '[Row]0[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit2, this.AddShiftsStep_33_1Params.UIRow0ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell11, new Point(15, 8));

            // Type 'f1{Tab}' in '[Row]1[Column]RosterCell_6' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit1, this.AddShiftsStep_33_1Params.UIRow1ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell13.EnsureClickable(new Point(24, 9));
            Mouse.StartDragging(uIItemCell12, new Point(7, 35));
            Mouse.StopDragging(uIItemCell13, new Point(24, 9));

            // Type 'a3{Tab}' in '[Row]3[Column]RosterCell_9' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit1, this.AddShiftsStep_33_1Params.UIRow3ColumnRosterCellEdit1SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell15.EnsureClickable(new Point(21, 12));
            Mouse.StartDragging(uIItemCell14, new Point(25, 89));
            Mouse.StopDragging(uIItemCell15, new Point(21, 12));

            // Type 'd1{Tab}' in '[Row]3[Column]RosterCell_10' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit2, this.AddShiftsStep_33_1Params.UIRow3ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell17.EnsureClickable(new Point(27, 5));
            Mouse.StartDragging(uIItemCell16, new Point(33, 161));
            Mouse.StopDragging(uIItemCell17, new Point(27, 5));

            // Type 'd1{Tab}' in '[Row]3[Column]RosterCell_11' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit3, this.AddShiftsStep_33_1Params.UIRow3ColumnRosterCellEdit3SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Click cell
            Mouse.Click(uIItemCell18, new Point(16, 10));

            // Type 'a2{Tab}' in '[Row]2[Column]RosterCell_9' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit2, this.AddShiftsStep_33_1Params.UIRow2ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell19, new Point(16, 10));

            // Type 'vakt1{Tab}' in '[Row]1[Column]RosterCell_9' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit2, this.AddShiftsStep_33_1Params.UIRow1ColumnRosterCellEdit2SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell20, new Point(20, 8));

            // Type 'a{Tab}' in '[Row]0[Column]RosterCell_9' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit3, this.AddShiftsStep_33_1Params.UIRow0ColumnRosterCellEdit3SendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell22.EnsureClickable(new Point(18, 10));
            Mouse.StartDragging(uIItemCell21, new Point(39, 10));
            Mouse.StopDragging(uIItemCell22, new Point(18, 10));

            // Type 'd{Tab}' in '[Row]0[Column]RosterCell_10' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit4, this.AddShiftsStep_33_1Params.UIRow0ColumnRosterCellEdit4SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell24.EnsureClickable(new Point(17, 4));
            Mouse.StartDragging(uIItemCell23, new Point(41, 4));
            Mouse.StopDragging(uIItemCell24, new Point(17, 4));

            // Type '1dag{Tab}' in '[Row]1[Column]RosterCell_10' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit3, this.AddShiftsStep_33_1Params.UIRow1ColumnRosterCellEdit3SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell26.EnsureClickable(new Point(12, 2));
            Mouse.StartDragging(uIItemCell25, new Point(35, 2));
            Mouse.StopDragging(uIItemCell26, new Point(12, 2));

            // Type 'd2{Tab}' in '[Row]2[Column]RosterCell_10' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit3, this.AddShiftsStep_33_1Params.UIRow2ColumnRosterCellEdit3SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell28.EnsureClickable(new Point(17, 13));
            Mouse.StartDragging(uIItemCell27, new Point(20, 6));
            Mouse.StopDragging(uIItemCell28, new Point(17, 13));

            // Type 'na{Tab}' in '[Row]0[Column]RosterCell_13' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit5, this.AddShiftsStep_33_1Params.UIRow0ColumnRosterCellEdit5SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell30.EnsureClickable(new Point(31, 10));
            Mouse.StartDragging(uIItemCell29, new Point(15, 10));
            Mouse.StopDragging(uIItemCell30, new Point(31, 10));

            // Type 'vakt1{Tab}' in '[Row]1[Column]RosterCell_13' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit4, this.AddShiftsStep_33_1Params.UIRow1ColumnRosterCellEdit4SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell32.EnsureClickable(new Point(20, 6));
            Mouse.StartDragging(uIItemCell31, new Point(57, 3));
            Mouse.StopDragging(uIItemCell32, new Point(20, 6));

            // Type 'n{Tab}' in '[Row]2[Column]RosterCell_13' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit4, this.AddShiftsStep_33_1Params.UIRow2ColumnRosterCellEdit4SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Move cell to cell
            uIItemCell34.EnsureClickable(new Point(19, 8));
            Mouse.StartDragging(uIItemCell33, new Point(36, 11));
            Mouse.StopDragging(uIItemCell34, new Point(19, 8));

            // Type 'n2{Tab}' in '[Row]3[Column]RosterCell_13' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit4, this.AddShiftsStep_33_1Params.UIRow3ColumnRosterCellEdit4SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));

            // Click cell
            Mouse.Click(uIItemCell35, new Point(21, 11));

            // Type 'ah{Tab}' in '[Row]0[Column]RosterCell_20' text box
            Keyboard.SendKeys(uIRow0ColumnRosterCellEdit6, this.AddShiftsStep_33_1Params.UIRow0ColumnRosterCellEdit6SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell36, new Point(12, 11));

            // Type 'vakt1{Tab}' in '[Row]1[Column]RosterCell_20' text box
            Keyboard.SendKeys(uIRow1ColumnRosterCellEdit8, this.AddShiftsStep_33_1Params.UIRow1ColumnRosterCellEdit8SendKeys, ModifierKeys.None);

            // Click cell
            Mouse.Click(uIItemCell37, new Point(15, 7));

            // Type 'a2{Tab}' in '[Row]2[Column]RosterCell_20' text box
            Keyboard.SendKeys(uIRow2ColumnRosterCellEdit5, this.AddShiftsStep_33_1Params.UIRow2ColumnRosterCellEdit5SendKeys, ModifierKeys.None);

            // Move cell to cell
            uIItemCell39.EnsureClickable(new Point(15, 5));
            Mouse.StartDragging(uIItemCell38, new Point(22, 7));
            Mouse.StopDragging(uIItemCell39, new Point(15, 5));

            // Type 'a3{Tab}' in '[Row]3[Column]RosterCell_20' text box
            Keyboard.SendKeys(uIRow3ColumnRosterCellEdit5, this.AddShiftsStep_33_1Params.UIRow3ColumnRosterCellEdit5SendKeys, ModifierKeys.None);

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// Check2AddedCorretlyToListStep_10 - Use 'Check2AddedCorretlyToListStep_10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Check2AddedCorretlyToListStep_10()
        {
            #region Variable Declarations
            DXTreeListCell uIItem5DaleneDollyTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode4TreeListNode.UIItem5DaleneDollyTreeListCell;
            DXTreeListCell uIItem6EriksrødErikaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UIItem6EriksrødErikaTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '5. Dalene, Dolly' TreeListCell equals '5. Dalene, Dolly'
            Assert.AreEqual(this.Check2AddedCorretlyToListStep_10ExpectedValues.UIItem5DaleneDollyTreeListCellValueAsString, uIItem5DaleneDollyTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '6. Eriksrød, Erika' TreeListCell equals '6. Eriksrød, Erika'
            Assert.AreEqual(this.Check2AddedCorretlyToListStep_10ExpectedValues.UIItem6EriksrødErikaTreeListCellValueAsString, uIItem6EriksrødErikaTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// Check4EmployeesAddedStep_8 - Use 'Check4EmployeesAddedStep_8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Check4EmployeesAddedStep_8()
        {
            #region Variable Declarations
            DXTreeListCell uIItem1AndersenAstridTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UIItem1AndersenAstridTreeListCell;
            DXTreeListCell uIItem2BarskeBrynjulfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UIItem2BarskeBrynjulfTreeListCell;
            DXTreeListCell uIItem3BetongBillyTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UIItem3BetongBillyTreeListCell;
            DXTreeListCell uIItem4BronsonCharlieTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode3TreeListNode.UIItem4BronsonCharlieTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '1. Andersen, Astrid' TreeListCell equals '1. Andersen, Astrid'
            Assert.AreEqual(this.Check4EmployeesAddedStep_8ExpectedValues.UIItem1AndersenAstridTreeListCellValueAsString, uIItem1AndersenAstridTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2. Barske, Brynjulf' TreeListCell equals '2. Barske, Brynjulf'
            Assert.AreEqual(this.Check4EmployeesAddedStep_8ExpectedValues.UIItem2BarskeBrynjulfTreeListCellValueAsString, uIItem2BarskeBrynjulfTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '3. Betong, Billy' TreeListCell equals '3. Betong, Billy'
            Assert.AreEqual(this.Check4EmployeesAddedStep_8ExpectedValues.UIItem3BetongBillyTreeListCellValueAsString, uIItem3BetongBillyTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '4. Bronson, Charlie' TreeListCell equals '4. Bronson, Charlie'
            Assert.AreEqual(this.Check4EmployeesAddedStep_8ExpectedValues.UIItem4BronsonCharlieTreeListCellValueAsString, uIItem4BronsonCharlieTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// Check4EmpsAddedStep_29 - Use 'Check4EmpsAddedStep_29ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Check4EmpsAddedStep_29()
        {
            #region Variable Declarations
            DXTreeListCell uIItem11OlsenBrorTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode10TreeListNode.UIItem11OlsenBrorTreeListCell;
            DXTreeListCell uIItem12RaserRoarTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode11TreeListNode.UIItem12RaserRoarTreeListCell;
            DXTreeListCell uIItem13SørensenSørenTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode12TreeListNode.UIItem13SørensenSørenTreeListCell;
            DXTreeListCell uIItem14TigerTanyaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode13TreeListNode.UIItem14TigerTanyaTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '11. Olsen, Bror' TreeListCell equals '11. Olsen, Bror'
            Assert.AreEqual(this.Check4EmpsAddedStep_29ExpectedValues.UIItem11OlsenBrorTreeListCellValueAsString, uIItem11OlsenBrorTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '12. Raser, Roar' TreeListCell equals '12. Raser, Roar'
            Assert.AreEqual(this.Check4EmpsAddedStep_29ExpectedValues.UIItem12RaserRoarTreeListCellValueAsString, uIItem12RaserRoarTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '13. Sørensen, Søren' TreeListCell equals '13. Sørensen, Søren'
            Assert.AreEqual(this.Check4EmpsAddedStep_29ExpectedValues.UIItem13SørensenSørenTreeListCellValueAsString, uIItem13SørensenSørenTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '14. Tiger, Tanya' TreeListCell equals '14. Tiger, Tanya'
            Assert.AreEqual(this.Check4EmpsAddedStep_29ExpectedValues.UIItem14TigerTanyaTreeListCellValueAsString, uIItem14TigerTanyaTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckAllEmpsIsInList - Use 'CheckAllEmpsIsInListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAllEmpsIsInList()
        {
            #region Variable Declarations
            DXTreeListCell uIItem1AndersenAstridTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UIItem1AndersenAstridTreeListCell;
            DXTreeListCell uIItem2BarskeBrynjulfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UIItem2BarskeBrynjulfTreeListCell;
            DXTreeListCell uIItem3BetongBillyTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UIItem3BetongBillyTreeListCell;
            DXTreeListCell uIItem4BronsonCharlieTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode3TreeListNode.UIItem4BronsonCharlieTreeListCell;
            DXTreeListCell uIItem5DaleneDollyTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode4TreeListNode.UIItem5DaleneDollyTreeListCell;
            DXTreeListCell uIItem6EriksrødErikaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UIItem6EriksrødErikaTreeListCell;
            DXTreeListCell uIItem7UlneUlfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode6TreeListNode.UIItem7UlneUlfTreeListCell;
            DXTreeListCell uIItem8VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode7TreeListNode.UIItem8VAKANTTreeListCell;
            DXTreeListCell uIItem9VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode8TreeListNode.UIItem9VAKANTTreeListCell;
            DXTreeListCell uIItem10VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode9TreeListNode.UIItem10VAKANTTreeListCell;
            DXTreeListCell uIItem11OlsenBrorTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode10TreeListNode.UIItem11OlsenBrorTreeListCell;
            DXTreeListCell uIItem12RaserRoarTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode11TreeListNode.UIItem12RaserRoarTreeListCell;
            DXTreeListCell uIItem13SørensenSørenTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode12TreeListNode.UIItem13SørensenSørenTreeListCell;
            DXTreeListCell uIItem14TigerTanyaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode13TreeListNode.UIItem14TigerTanyaTreeListCell;
            DXTreeListCell uIItem15AbrahamsenTronTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode14TreeListNode.UIItem15AbrahamsenTronTreeListCell;
            DXTreeListCell uIItem16BergMagnusTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode15TreeListNode.UIItem16BergMagnusTreeListCell;
            DXTreeListCell uIItem17FredheimFridTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode16TreeListNode.UIItem17FredheimFridTreeListCell;
            DXTreeListCell uIItem18HansenHenriettTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode17TreeListNode.UIItem18HansenHenriettTreeListCell;
            DXTreeListCell uIItem19HaugenHarryTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode18TreeListNode.UIItem19HaugenHarryTreeListCell;
            DXTreeListCell uIItem20JensenJosteinTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode19TreeListNode.UIItem20JensenJosteinTreeListCell;
            DXTreeListCell uIItem21KarslenKnutTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode20TreeListNode.UIItem21KarslenKnutTreeListCell;
            DXTreeListCell uIItem22KnutsenKasperTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode21TreeListNode.UIItem22KnutsenKasperTreeListCell;
            DXTreeListCell uIItem23KristoffersenKTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode22TreeListNode.UIItem23KristoffersenKTreeListCell;
            DXTreeListCell uIItem24KuldeKalleTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode23TreeListNode.UIItem24KuldeKalleTreeListCell;
            DXTreeListCell uIItem25LarsenLailaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode24TreeListNode.UIItem25LarsenLailaTreeListCell;
            DXTreeListCell uIItem26LekreLailaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode25TreeListNode.UIItem26LekreLailaTreeListCell;
            DXTreeListCell uIItem27MoenMeretheTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode26TreeListNode.UIItem27MoenMeretheTreeListCell;
            DXTreeListCell uIItem28NilssonNisseTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode27TreeListNode.UIItem28NilssonNisseTreeListCell;
            DXTreeListCell uIItem29NornesJensGustTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode28TreeListNode.UIItem29NornesJensGustTreeListCell;
            DXTreeListCell uIItem30OlsenBrorTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode29TreeListNode.UIItem30OlsenBrorTreeListCell;
            DXTreeListCell uIItem31OlsenKjetilTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode30TreeListNode.UIItem31OlsenKjetilTreeListCell;
            DXTreeListCell uIItem32PedersenMortenTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode31TreeListNode.UIItem32PedersenMortenTreeListCell;
            DXTreeListCell uIItem33RaserRoarTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode32TreeListNode.UIItem33RaserRoarTreeListCell;
            DXTreeListCell uIItem34StreisandBjarnTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode33TreeListNode.UIItem34StreisandBjarnTreeListCell;
            DXTreeListCell uIItem35SvendsenSvenTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode34TreeListNode.UIItem35SvendsenSvenTreeListCell;
            DXTreeListCell uIItem36SørensenSørenTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode35TreeListNode.UIItem36SørensenSørenTreeListCell;
            DXTreeListCell uIItem37TigerTanyaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode36TreeListNode.UIItem37TigerTanyaTreeListCell;
            DXTreeListCell uIItem38TrosterudTorstTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode37TreeListNode.UIItem38TrosterudTorstTreeListCell;
            DXTreeListCell uIItem39TrosterudTuridTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode38TreeListNode.UIItem39TrosterudTuridTreeListCell;
            DXTreeListCell uIItem40UlneUlfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode39TreeListNode.UIItem40UlneUlfTreeListCell;
            DXTreeListCell uIItem150TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode39TreeListNode.UINode0TreeListNode.UIItem150TreeListCell;
            DXTreeListCell uIItem225TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode39TreeListNode.UINode1TreeListNode.UIItem225TreeListCell;
            DXTreeListCell uIItem41WilsonPeterTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode40TreeListNode.UIItem41WilsonPeterTreeListCell;
            DXTreeListCell uIItem42ÅhlsenOleTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode41TreeListNode.UIItem42ÅhlsenOleTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '1. Andersen, Astrid' TreeListCell equals '1. Abrahamsen, Trond'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem1AndersenAstridTreeListCellValueAsString, uIItem1AndersenAstridTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2. Barske, Brynjulf' TreeListCell equals '2. Andersen, Anders'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem2BarskeBrynjulfTreeListCellValueAsString, uIItem2BarskeBrynjulfTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '3. Betong, Billy' TreeListCell equals '3. Andersen, Astrid'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem3BetongBillyTreeListCellValueAsString, uIItem3BetongBillyTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '4. Bronson, Charlie' TreeListCell equals '4. Aulie, Tina'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem4BronsonCharlieTreeListCellValueAsString, uIItem4BronsonCharlieTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5. Dalene, Dolly' TreeListCell equals '5. Barske, Brynjulf'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem5DaleneDollyTreeListCellValueAsString, uIItem5DaleneDollyTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '6. Eriksrød, Erika' TreeListCell equals '6. Berg, Magnus'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem6EriksrødErikaTreeListCellValueAsString, uIItem6EriksrødErikaTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '7. Ulne, Ulf' TreeListCell equals '7. Betong, Billy'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem7UlneUlfTreeListCellValueAsString, uIItem7UlneUlfTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '8. VAKANT' TreeListCell equals '8. Bronson, Charlie'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem8VAKANTTreeListCellValueAsString, uIItem8VAKANTTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '9. VAKANT' TreeListCell equals '9. Brøndbo, Bjartmar'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem9VAKANTTreeListCellValueAsString, uIItem9VAKANTTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '10. VAKANT' TreeListCell equals '10. Carlsen, Christina'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem10VAKANTTreeListCellValueAsString, uIItem10VAKANTTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '11. Olsen, Bror' TreeListCell equals '11. Carlsen, Magnus'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem11OlsenBrorTreeListCellValueAsString, uIItem11OlsenBrorTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '12. Raser, Roar' TreeListCell equals '12. Dalene, Dolly'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem12RaserRoarTreeListCellValueAsString, uIItem12RaserRoarTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '13. Sørensen, Søren' TreeListCell equals '13. Danielsen, James'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem13SørensenSørenTreeListCellValueAsString, uIItem13SørensenSørenTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '14. Tiger, Tanya' TreeListCell equals '14. Eriksen, Nils'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem14TigerTanyaTreeListCellValueAsString, uIItem14TigerTanyaTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '15. Abrahamsen, Trond' TreeListCell equals '15. Eriksrød, Erika'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem15AbrahamsenTronTreeListCellValueAsString, uIItem15AbrahamsenTronTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '16. Berg, Magnus' TreeListCell equals '16. Franzen, Finbeck'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem16BergMagnusTreeListCellValueAsString, uIItem16BergMagnusTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '17. Fredheim, Frid' TreeListCell equals '17. Fredheim, Frid'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem17FredheimFridTreeListCellValueAsString, uIItem17FredheimFridTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '18. Hansen, Henriette' TreeListCell equals '18. Hansen, Henriette'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem18HansenHenriettTreeListCellValueAsString, uIItem18HansenHenriettTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '19. Haugen, Harry' TreeListCell equals '19. Haugen, Harry'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem19HaugenHarryTreeListCellValueAsString, uIItem19HaugenHarryTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '20. Jensen, Jostein' TreeListCell equals '20. Jensen, Jostein'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem20JensenJosteinTreeListCellValueAsString, uIItem20JensenJosteinTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '21. Karslen, Knut' TreeListCell equals '21. Karslen, Knut'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem21KarslenKnutTreeListCellValueAsString, uIItem21KarslenKnutTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '22. Knutsen, Kasper' TreeListCell equals '22. Knutsen, Kasper'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem22KnutsenKasperTreeListCellValueAsString, uIItem22KnutsenKasperTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '23. Kristoffersen, Kåre' TreeListCell equals '23. Kristoffersen, Kåre'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem23KristoffersenKTreeListCellValueAsString, uIItem23KristoffersenKTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '24. Kulde, Kalle' TreeListCell equals '24. Kulde, Kalle'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem24KuldeKalleTreeListCellValueAsString, uIItem24KuldeKalleTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '25. Larsen, Laila' TreeListCell equals '25. Larsen, Laila'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem25LarsenLailaTreeListCellValueAsString, uIItem25LarsenLailaTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '26. Lekre, Laila' TreeListCell equals '26. Lekre, Laila'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem26LekreLailaTreeListCellValueAsString, uIItem26LekreLailaTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '27. Moen, Merethe' TreeListCell equals '27. Moen, Merethe'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem27MoenMeretheTreeListCellValueAsString, uIItem27MoenMeretheTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '28. Nilsson, Nisse' TreeListCell equals '28. Nilsson, Nisse'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem28NilssonNisseTreeListCellValueAsString, uIItem28NilssonNisseTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '29. Nornes, Jens Gustav' TreeListCell equals '29. Nornes, Jens Gustav'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem29NornesJensGustTreeListCellValueAsString, uIItem29NornesJensGustTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '30. Olsen, Bror' TreeListCell equals '30. Olsen, Bror'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem30OlsenBrorTreeListCellValueAsString, uIItem30OlsenBrorTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '31. Olsen, Kjetil' TreeListCell equals '31. Olsen, Kjetil'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem31OlsenKjetilTreeListCellValueAsString, uIItem31OlsenKjetilTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '32. Pedersen, Morten' TreeListCell equals '32. Pedersen, Morten'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem32PedersenMortenTreeListCellValueAsString, uIItem32PedersenMortenTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '33. Raser, Roar' TreeListCell equals '33. Raser, Roar'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem33RaserRoarTreeListCellValueAsString, uIItem33RaserRoarTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '34. Streisand, Bjarne' TreeListCell equals '34. Streisand, Bjarne'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem34StreisandBjarnTreeListCellValueAsString, uIItem34StreisandBjarnTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '35. Svendsen, Sven' TreeListCell equals '35. Svendsen, Sven'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem35SvendsenSvenTreeListCellValueAsString, uIItem35SvendsenSvenTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '36. Sørensen, Søren' TreeListCell equals '36. Sørensen, Søren'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem36SørensenSørenTreeListCellValueAsString, uIItem36SørensenSørenTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '37. Tiger, Tanya' TreeListCell equals '37. Tiger, Tanya'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem37TigerTanyaTreeListCellValueAsString, uIItem37TigerTanyaTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '38. Trosterud, Torstein' TreeListCell equals '38. Trosterud, Torstein'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem38TrosterudTorstTreeListCellValueAsString, uIItem38TrosterudTorstTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '39. Trosterud, Turid' TreeListCell equals '39. Trosterud, Turid'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem39TrosterudTuridTreeListCellValueAsString, uIItem39TrosterudTuridTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '40. Ulne, Ulf' TreeListCell equals '40. Ulne, Ulf'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem40UlneUlfTreeListCellValueAsString, uIItem40UlneUlfTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1. 50%' TreeListCell equals '1. 50%'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem150TreeListCellValueAsString, uIItem150TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2. 25%' TreeListCell equals '2. 25%'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem225TreeListCellValueAsString, uIItem225TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '41. Wilson, Peter' TreeListCell equals '41. Wilson, Peter'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem41WilsonPeterTreeListCellValueAsString, uIItem41WilsonPeterTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '42. Åhlsen, Ole' TreeListCell equals '42. Åhlsen, Ole'
            Assert.AreEqual(this.CheckAllEmpsIsInListExpectedValues.UIItem42ÅhlsenOleTreeListCellValueAsString, uIItem42ÅhlsenOleTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckBarskeRemoved_Step_11 - Use 'CheckBarskeRemoved_Step_11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckBarskeRemoved_Step_11()
        {
            #region Variable Declarations
            DXTreeList uITreeListEmployeeTreeList = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList;
            #endregion

            // Verify that the 'NodesCount' property of 'treeListEmployee' TreeList equals '5'
            Assert.AreEqual(this.CheckBarskeRemoved_Step_11ExpectedValues.UITreeListEmployeeTreeListNodesCount, uITreeListEmployeeTreeList.NodesCount, "Unexpected amount of employees");
        }
        
        /// <summary>
        /// CheckBetongPositionStep_17 - Use 'CheckBetongPositionStep_17ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckBetongPositionStep_17()
        {
            #region Variable Declarations
            DXLookUpEdit uIEPositionCategoryLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIEPositionCategoryLookUpEdit;
            DXLookUpEdit uIEUnionCodeLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIEUnionCodeLookUpEdit;
            DXLookUpEdit uIEOvertimeCodeLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerOvertCustom.UIEOvertimeCodeLookUpEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'ePositionCategory' LookUpEdit equals 'H - Hjelpepleier'
            Assert.AreEqual(this.CheckBetongPositionStep_17ExpectedValues.UIEPositionCategoryLookUpEditValueAsString, uIEPositionCategoryLookUpEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of 'eUnionCode' LookUpEdit equals 'FAG - Fagforbundet'
            Assert.AreEqual(this.CheckBetongPositionStep_17ExpectedValues.UIEUnionCodeLookUpEditValueAsString, uIEUnionCodeLookUpEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of 'eOvertimeCode' LookUpEdit equals 'V - Vakans'
            Assert.AreEqual(this.CheckBetongPositionStep_17ExpectedValues.UIEOvertimeCodeLookUpEditValueAsString, uIEOvertimeCodeLookUpEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckEmpBronsonInactive - Use 'CheckEmpBronsonInactiveExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpBronsonInactive()
        {
            #region Variable Declarations
            DXTreeListCell uIValgtTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UIValgtTreeListCell;
            DXTreeListCell uIValgtTreeListCell1 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UINode0TreeListNode.UIValgtTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Valgt' TreeListCell equals 'True'
            Assert.AreEqual(this.CheckEmpBronsonInactiveExpectedValues.UIValgtTreeListCellValueAsString, uIValgtTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Valgt' TreeListCell equals 'True'
            Assert.AreEqual(this.CheckEmpBronsonInactiveExpectedValues.UIValgtTreeListCellValueAsString1, uIValgtTreeListCell1.ValueAsString);
        }
        
        /// <summary>
        /// CheckEmployeeF3bCalculationsStep35 - Use 'CheckEmployeeF3bCalculationsStep35ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeeF3bCalculationsStep35()
        {
            #region Variable Declarations
            DXCell uIACell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell13;
            DXCell uIACell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell14;
            DXCell uIACell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell15;
            DXCell uIACell16 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell16;
            DXCell uIACell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell17;
            DXCell uIACell18 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell18;
            DXCell uIACell19 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell19;
            DXCell uIACell20 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell20;
            DXCell uIACell21 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell21;
            DXCell uIACell22 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell22;
            DXCell uIACell23 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell23;
            DXCell uIACell24 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell24;
            #endregion

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell13Text, uIACell13.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell14Text, uIACell14.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell15Text, uIACell15.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell16Text, uIACell16.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell17Text, uIACell17.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell18Text, uIACell18.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell19Text, uIACell19.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell20Text, uIACell20.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell21Text, uIACell21.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell22Text, uIACell22.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell23Text, uIACell23.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeF3bCalculationsStep35ExpectedValues.UIACell24Text, uIACell24.Text);
        }
        
        /// <summary>
        /// CheckEmployeesF3bCalculationsStep36 - Use 'CheckEmployeesF3bCalculationsStep36ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeesF3bCalculationsStep36()
        {
            #region Variable Declarations
            DXCell uIACell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell13;
            DXCell uIACell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell14;
            DXCell uIACell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell15;
            DXCell uIACell16 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell16;
            DXCell uIACell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell17;
            DXCell uIACell18 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell18;
            DXCell uIACell19 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell19;
            DXCell uIACell20 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell20;
            DXCell uIACell21 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell21;
            DXCell uIACell22 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell22;
            DXCell uIACell23 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell23;
            DXCell uIACell24 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIACell24;
            #endregion

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell13Text, uIACell13.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell14Text, uIACell14.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell15Text, uIACell15.Text);

            // Verify that the 'Text' property of 'A' cell equals 'G'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell16Text, uIACell16.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell17Text, uIACell17.Text);

            // Verify that the 'Text' property of 'A' cell equals 'G'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell18Text, uIACell18.Text);

            // Verify that the 'Text' property of 'A' cell equals 'G'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell19Text, uIACell19.Text);

            // Verify that the 'Text' property of 'A' cell equals 'G'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell20Text, uIACell20.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell21Text, uIACell21.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell22Text, uIACell22.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell23Text, uIACell23.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeesF3bCalculationsStep36ExpectedValues.UIACell24Text, uIACell24.Text);
        }
        
        /// <summary>
        /// CheckEmpPositionsInListAfterDeleteRaserPositionLine - Use 'CheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpPositionsInListAfterDeleteRaserPositionLine()
        {
            #region Variable Declarations
            DXTreeListCell uIItem12RaserRoarTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode11TreeListNode.UIItem12RaserRoarTreeListCell;
            DXTreeListCell uIItem13SørensenSørenTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode12TreeListNode.UIItem13SørensenSørenTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '12. Raser, Roar' TreeListCell equals '12. Sørensen, Søren'
            Assert.AreEqual(this.CheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues.UIItem12RaserRoarTreeListCellValueAsString, uIItem12RaserRoarTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '13. Sørensen, Søren' TreeListCell equals '13. Tiger, Tanya'
            Assert.AreEqual(this.CheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues.UIItem13SørensenSørenTreeListCellValueAsString, uIItem13SørensenSørenTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckEmpPositionsInListStep_29 - Use 'CheckEmpPositionsInListStep_29ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpPositionsInListStep_29()
        {
            #region Variable Declarations
            DXTreeListCell uIItem1AndersenAstridTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UIItem1AndersenAstridTreeListCell;
            DXTreeListCell uIItem2BarskeBrynjulfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UIItem2BarskeBrynjulfTreeListCell;
            DXTreeListCell uIItem3BetongBillyTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UIItem3BetongBillyTreeListCell;
            DXTreeListCell uIItem10VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode9TreeListNode.UIItem10VAKANTTreeListCell;
            DXTreeListCell uIItem10TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode9TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            DXTreeListCell uIItem225TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode9TreeListNode.UINode1TreeListNode.UIItem225TreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '1. Andersen, Astrid' TreeListCell equals '1. VAKANT'
            Assert.AreEqual(this.CheckEmpPositionsInListStep_29ExpectedValues.UIItem1AndersenAstridTreeListCellValueAsString, uIItem1AndersenAstridTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2. Barske, Brynjulf' TreeListCell equals '2. VAKANT'
            Assert.AreEqual(this.CheckEmpPositionsInListStep_29ExpectedValues.UIItem2BarskeBrynjulfTreeListCellValueAsString, uIItem2BarskeBrynjulfTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '3. Betong, Billy' TreeListCell equals '3. VAKANT'
            Assert.AreEqual(this.CheckEmpPositionsInListStep_29ExpectedValues.UIItem3BetongBillyTreeListCellValueAsString, uIItem3BetongBillyTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '10. VAKANT' TreeListCell equals '10. Ulne, Ulf'
            Assert.AreEqual(this.CheckEmpPositionsInListStep_29ExpectedValues.UIItem10VAKANTTreeListCellValueAsString, uIItem10VAKANTTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1. 0%' TreeListCell equals '1. 50%'
            Assert.AreEqual(this.CheckEmpPositionsInListStep_29ExpectedValues.UIItem10TreeListCellValueAsString, uIItem10TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2. 25%' TreeListCell equals '2. 25%'
            Assert.AreEqual(this.CheckEmpPositionsInListStep_29ExpectedValues.UIItem225TreeListCellValueAsString, uIItem225TreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckEmpsAddedCorretlyToPlantStep_14 - Use 'CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsAddedCorretlyToPlantStep_14()
        {
            #region Variable Declarations
            DXCell uIAndersenAstridCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAndersenAstridCell;
            DXCell uIVAKANTCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIVAKANTCell;
            DXCell uIBronsonCharlieCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBronsonCharlieCell;
            DXCell uIDaleneDollyCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDaleneDollyCell;
            DXCell uIEriksrødErikaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIEriksrødErikaCell;
            DXCell uIBetongBillyCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBetongBillyCell;
            #endregion

            // Verify that the 'Text' property of 'Andersen, Astrid' cell equals 'Andersen, Astrid'
            Assert.AreEqual(this.CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues.UIAndersenAstridCellText, uIAndersenAstridCell.Text);

            // Verify that the 'Text' property of 'VAKANT' cell equals 'VAKANT'
            Assert.AreEqual(this.CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues.UIVAKANTCellText, uIVAKANTCell.Text);

            // Verify that the 'Text' property of 'Bronson, Charlie' cell equals 'Bronson, Charlie'
            Assert.AreEqual(this.CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues.UIBronsonCharlieCellText, uIBronsonCharlieCell.Text);

            // Verify that the 'Text' property of 'Dalene, Dolly' cell equals 'Dalene, Dolly'
            Assert.AreEqual(this.CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues.UIDaleneDollyCellText, uIDaleneDollyCell.Text);

            // Verify that the 'Text' property of 'Eriksrød, Erika' cell equals 'Eriksrød, Erika'
            Assert.AreEqual(this.CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues.UIEriksrødErikaCellText, uIEriksrødErikaCell.Text);

            // Verify that the 'Text' property of 'Betong, Billy' cell equals 'Betong, Billy'
            Assert.AreEqual(this.CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues.UIBetongBillyCellText, uIBetongBillyCell.Text);
        }
        
        /// <summary>
        /// CheckEmpWindow_step_5 - Use 'CheckEmpWindow_step_5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpWindow_step_5()
        {
            #region Variable Declarations
            DXTreeList uITreeListEmployeeTreeList = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList;
            DXButton uIAnsatteButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIAnsatteButton;
            DXButton uIVakantButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIVakantButton;
            DXButton uISlettButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UISlettButton;
            #endregion

            // Verify that the 'NodesCount' property of 'treeListEmployee' TreeList equals '0'
            Assert.AreEqual(this.CheckEmpWindow_step_5ExpectedValues.UITreeListEmployeeTreeListNodesCount, uITreeListEmployeeTreeList.NodesCount, "Emplist not empty");

            // Verify that the 'Enabled' property of 'Ansatte...' button equals 'True'
            Assert.AreEqual(this.CheckEmpWindow_step_5ExpectedValues.UIAnsatteButtonEnabled, uIAnsatteButton.Enabled, "Button not enabled");

            // Verify that the 'Enabled' property of 'Vakant' button equals 'True'
            Assert.AreEqual(this.CheckEmpWindow_step_5ExpectedValues.UIVakantButtonEnabled, uIVakantButton.Enabled, "Button not enabled");

            // Verify that the 'Enabled' property of 'Slett' button equals 'False'
            Assert.AreEqual(this.CheckEmpWindow_step_5ExpectedValues.UISlettButtonEnabled, uISlettButton.Enabled, "Button enabled");
        }
        
        /// <summary>
        /// CheckEriksroedPositionStep_17 - Use 'CheckEriksroedPositionStep_17ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEriksroedPositionStep_17()
        {
            #region Variable Declarations
            DXLookUpEdit uIEPositionCategoryLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIEPositionCategoryLookUpEdit;
            DXLookUpEdit uIEOvertimeCodeLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerOvertCustom.UIEOvertimeCodeLookUpEdit;
            #endregion

            // Verify that the 'ValueAsString' property of 'ePositionCategory' LookUpEdit equals 'H - Hjelpepleier'
            Assert.AreEqual(this.CheckEriksroedPositionStep_17ExpectedValues.UIEPositionCategoryLookUpEditValueAsString, uIEPositionCategoryLookUpEdit.ValueAsString);

            // Verify that the 'ValueAsString' property of 'eOvertimeCode' LookUpEdit equals 'V - Vakans'
            Assert.AreEqual(this.CheckEriksroedPositionStep_17ExpectedValues.UIEOvertimeCodeLookUpEditValueAsString, uIEOvertimeCodeLookUpEdit.ValueAsString);
        }
        
        /// <summary>
        /// CheckF3Calculations - Use 'CheckF3CalculationsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckF3Calculations()
        {
            #region Variable Declarations
            DXCell uIItem0av2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell;
            DXCell uIItem0av2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell1;
            DXCell uIItem0av2Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell2;
            DXCell uIItem0av2Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell3;
            DXCell uIItem0av1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av1Cell;
            DXCell uIItem0av2Cell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell4;
            DXCell uIItem0av2Cell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell5;
            DXCell uIItem0av2Cell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell6;
            DXCell uIItem0av2Cell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell7;
            DXCell uIItem0av2Cell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell8;
            DXCell uIItem0av2Cell9 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell9;
            DXCell uIItem0av2Cell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem0av2Cell10;
            #endregion

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av2CellText, uIItem0av2Cell.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av2Cell1Text, uIItem0av2Cell1.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av2Cell2Text, uIItem0av2Cell2.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av2Cell3Text, uIItem0av2Cell3.Text);

            // Verify that the 'Text' property of '0 av 1' cell equals '0 av 1'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av1CellText, uIItem0av1Cell.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av2Cell4Text, uIItem0av2Cell4.Text);

            // Verify that the 'ClassName' property of '0 av 2' cell equals 'GridControlCell'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av2Cell5ClassName, uIItem0av2Cell5.ClassName);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av2Cell6Text, uIItem0av2Cell6.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av2Cell7Text, uIItem0av2Cell7.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av2Cell8Text, uIItem0av2Cell8.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av2Cell9Text, uIItem0av2Cell9.Text);

            // Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
            Assert.AreEqual(this.CheckF3CalculationsExpectedValues.UIItem0av2Cell10Text, uIItem0av2Cell10.Text);
        }
        
        /// <summary>
        /// CheckMovedEmployeesStep_14 - Use 'CheckMovedEmployeesStep_14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckMovedEmployeesStep_14()
        {
            #region Variable Declarations
            DXTreeListCell uIItem2BarskeBrynjulfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UIItem2BarskeBrynjulfTreeListCell;
            DXTreeListCell uIItem6EriksrødErikaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UIItem6EriksrødErikaTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '2. Barske, Brynjulf' TreeListCell equals '2. VAKANT'
            Assert.AreEqual(this.CheckMovedEmployeesStep_14ExpectedValues.UIItem2BarskeBrynjulfTreeListCellValueAsString, uIItem2BarskeBrynjulfTreeListCell.ValueAsString, "Wrong employee");

            // Verify that the 'ValueAsString' property of '6. Eriksrød, Erika' TreeListCell equals '6. Betong, Billy'
            Assert.AreEqual(this.CheckMovedEmployeesStep_14ExpectedValues.UIItem6EriksrødErikaTreeListCellValueAsString, uIItem6EriksrødErikaTreeListCell.ValueAsString, "Wrong employee");
        }
        
        /// <summary>
        /// CheckOnlyHansenInList - Use 'CheckOnlyHansenInListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOnlyHansenInList()
        {
            #region Variable Declarations
            DXCell uIHansenHenrietteCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectPlanEmployeesVCustom.UIPcContentContainerClient.UIPcContentClient.UIGcPlanEmployeesTable.UIHansenHenrietteCell;
            DXCell uIItem5010ArbeidsplanoCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectPlanEmployeesVCustom.UIPcContentContainerClient.UIPcContentClient.UIGcPlanEmployeesTable.UIItem5010ArbeidsplanoCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Hansen, Henriette' cell equals 'Hansen, Henriette'
            Assert.AreEqual(this.CheckOnlyHansenInListExpectedValues.UIHansenHenrietteCellValueAsString, uIHansenHenrietteCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5010 - Arbeidsplan og hjelpeplan' cell equals '5010 - Arbeidsplan og hjelpeplan'
            Assert.AreEqual(this.CheckOnlyHansenInListExpectedValues.UIItem5010ArbeidsplanoCellValueAsString, uIItem5010ArbeidsplanoCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckPlanHasCorrectEmployees_Step_12 - Use 'CheckPlanHasCorrectEmployees_Step_12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlanHasCorrectEmployees_Step_12()
        {
            #region Variable Declarations
            DXCell uIAndersenAstridCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAndersenAstridCell;
            DXCell uIBetongBillyCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBetongBillyCell;
            DXCell uIBronsonCharlieCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBronsonCharlieCell;
            DXCell uIDaleneDollyCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDaleneDollyCell;
            DXCell uIEriksrødErikaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient1.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIEriksrødErikaCell;
            #endregion

            // Wait for 3 seconds for user delay between actions; Verify that the 'Text' property of 'Andersen, Astrid' cell equals 'Andersen, Astrid'
            Playback.Wait(3000);
            Assert.AreEqual(this.CheckPlanHasCorrectEmployees_Step_12ExpectedValues.UIAndersenAstridCellText, uIAndersenAstridCell.Text);

            // Verify that the 'Text' property of 'Betong, Billy' cell equals 'Betong, Billy'
            Assert.AreEqual(this.CheckPlanHasCorrectEmployees_Step_12ExpectedValues.UIBetongBillyCellText, uIBetongBillyCell.Text);

            // Verify that the 'Text' property of 'Bronson, Charlie' cell equals 'Bronson, Charlie'
            Assert.AreEqual(this.CheckPlanHasCorrectEmployees_Step_12ExpectedValues.UIBronsonCharlieCellText, uIBronsonCharlieCell.Text);

            // Verify that the 'Text' property of 'Dalene, Dolly' cell equals 'Dalene, Dolly'
            Assert.AreEqual(this.CheckPlanHasCorrectEmployees_Step_12ExpectedValues.UIDaleneDollyCellText, uIDaleneDollyCell.Text);

            // Verify that the 'Text' property of 'Eriksrød, Erika' cell equals 'Eriksrød, Erika'
            Assert.AreEqual(this.CheckPlanHasCorrectEmployees_Step_12ExpectedValues.UIEriksrødErikaCellText, uIEriksrødErikaCell.Text);
        }
        
        /// <summary>
        /// CheckSHCalculations - Use 'CheckSHCalculationsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSHCalculations()
        {
            #region Variable Declarations
            DXCell uIItem5av6Cell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av6Cell11;
            DXCell uIItem5av6Cell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av6Cell12;
            DXCell uIItem5av6Cell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av6Cell13;
            DXCell uIItem5av6Cell14 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av6Cell14;
            DXCell uIItem2av6Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem2av6Cell1;
            DXCell uIItem5av6Cell15 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av6Cell15;
            DXCell uIItem5av6Cell16 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av6Cell16;
            DXCell uIItem5av6Cell17 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av6Cell17;
            DXCell uIItem5av6Cell18 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av6Cell18;
            DXCell uIItem5av6Cell19 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av6Cell19;
            DXCell uIItem5av6Cell20 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av6Cell20;
            DXCell uIItem5av6Cell21 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIDpnlColumnsDockPanel.UIDockPanel1_ContainerCustom.UIGcExtraGridTable.UIItem5av6Cell21;
            #endregion

            // Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem5av6Cell11Text, uIItem5av6Cell11.Text);

            // Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem5av6Cell12Text, uIItem5av6Cell12.Text);

            // Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem5av6Cell13Text, uIItem5av6Cell13.Text);

            // Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem5av6Cell14Text, uIItem5av6Cell14.Text);

            // Verify that the 'Text' property of '2 av 6' cell equals '2 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem2av6Cell1Text, uIItem2av6Cell1.Text);

            // Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem5av6Cell15Text, uIItem5av6Cell15.Text);

            // Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem5av6Cell16Text, uIItem5av6Cell16.Text);

            // Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem5av6Cell17Text, uIItem5av6Cell17.Text);

            // Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem5av6Cell18Text, uIItem5av6Cell18.Text);

            // Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem5av6Cell19Text, uIItem5av6Cell19.Text);

            // Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem5av6Cell20Text, uIItem5av6Cell20.Text);

            // Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
            Assert.AreEqual(this.CheckSHCalculationsExpectedValues.UIItem5av6Cell21Text, uIItem5av6Cell21.Text);
        }
        
        /// <summary>
        /// CheckUtneAddedStep_20 - Use 'CheckUtneAddedStep_20ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckUtneAddedStep_20()
        {
            #region Variable Declarations
            DXTreeListCell uIItem7UlneUlfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode6TreeListNode.UIItem7UlneUlfTreeListCell;
            DXTreeListCell uIItem150TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode6TreeListNode.UINode0TreeListNode.UIItem150TreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '7. Ulne, Ulf' TreeListCell equals '7. Ulne, Ulf'
            Assert.AreEqual(this.CheckUtneAddedStep_20ExpectedValues.UIItem7UlneUlfTreeListCellValueAsString, uIItem7UlneUlfTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1. 50%' TreeListCell equals '1. 50%'
            Assert.AreEqual(this.CheckUtneAddedStep_20ExpectedValues.UIItem150TreeListCellValueAsString, uIItem150TreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckUtneAddedStep_23 - Use 'CheckUtneAddedStep_23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckUtneAddedStep_23()
        {
            #region Variable Declarations
            DXTreeListCell uIItem7UlneUlfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode6TreeListNode.UIItem7UlneUlfTreeListCell;
            DXTreeListCell uIItem150TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode6TreeListNode.UINode0TreeListNode.UIItem150TreeListCell;
            DXTreeListCell uIItem225TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode6TreeListNode.UINode1TreeListNode.UIItem225TreeListCell;
            DXTreeListCell uITURNUSTurnus355tukeTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode6TreeListNode.UINode0TreeListNode.UITURNUSTurnus355tukeTreeListCell;
            DXTreeListCell uIDAGDagtidTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode6TreeListNode.UINode1TreeListNode.UIDAGDagtidTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '7. Ulne, Ulf' TreeListCell equals '7. Ulne, Ulf'
            Assert.AreEqual(this.CheckUtneAddedStep_23ExpectedValues.UIItem7UlneUlfTreeListCellValueAsString, uIItem7UlneUlfTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1. 50%' TreeListCell equals '1. 50%'
            Assert.AreEqual(this.CheckUtneAddedStep_23ExpectedValues.UIItem150TreeListCellValueAsString, uIItem150TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2. 25%' TreeListCell equals '2. 25%'
            Assert.AreEqual(this.CheckUtneAddedStep_23ExpectedValues.UIItem225TreeListCellValueAsString, uIItem225TreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'TURNUS - Turnus 35,5t/uke' TreeListCell equals 'TURNUS - Turnus 35,5t/uke'
            Assert.AreEqual(this.CheckUtneAddedStep_23ExpectedValues.UITURNUSTurnus355tukeTreeListCellValueAsString, uITURNUSTurnus355tukeTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'DAG - Dagtid' TreeListCell equals 'DAG - Dagtid'
            Assert.AreEqual(this.CheckUtneAddedStep_23ExpectedValues.UIDAGDagtidTreeListCellValueAsString, uIDAGDagtidTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckUtneIsInListStep_22 - Use 'CheckUtneIsInListStep_22ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckUtneIsInListStep_22()
        {
            #region Variable Declarations
            DXCell uIUlneUlfCell2 = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIUlneUlfCell2;
            DXCell uIAAssistentCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIAAssistentCell;
            DXCell uIUlneUlfCell3 = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIUlneUlfCell3;
            DXCell uIDDagtidspersonellCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIDDagtidspersonellCell;
            DXCell uIItem5000Cell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIItem5000Cell;
            DXCell uIItem2500Cell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIItem2500Cell;
            DXCell uIItem1Cell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIItem1Cell;
            DXCell uIItem2Cell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIItem2Cell;
            #endregion

            // Verify that the 'ValueAsString' property of 'Ulne, Ulf' cell equals 'Ulne, Ulf'
            Assert.AreEqual(this.CheckUtneIsInListStep_22ExpectedValues.UIUlneUlfCell2ValueAsString, uIUlneUlfCell2.ValueAsString);

            // Verify that the 'ValueAsString' property of 'A - Assistent' cell equals 'A - Assistent'
            Assert.AreEqual(this.CheckUtneIsInListStep_22ExpectedValues.UIAAssistentCellValueAsString, uIAAssistentCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Ulne, Ulf' cell equals 'Ulne, Ulf'
            Assert.AreEqual(this.CheckUtneIsInListStep_22ExpectedValues.UIUlneUlfCell3ValueAsString, uIUlneUlfCell3.ValueAsString);

            // Verify that the 'ValueAsString' property of 'D - Dagtidspersonell' cell equals 'D - Dagtidspersonell'
            Assert.AreEqual(this.CheckUtneIsInListStep_22ExpectedValues.UIDDagtidspersonellCellValueAsString, uIDDagtidspersonellCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '50,00' cell equals '50'
            Assert.AreEqual(this.CheckUtneIsInListStep_22ExpectedValues.UIItem5000CellValueAsString, uIItem5000Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '25,00' cell equals '25'
            Assert.AreEqual(this.CheckUtneIsInListStep_22ExpectedValues.UIItem2500CellValueAsString, uIItem2500Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '1' cell equals '1'
            Assert.AreEqual(this.CheckUtneIsInListStep_22ExpectedValues.UIItem1CellValueAsString, uIItem1Cell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2' cell equals '2'
            Assert.AreEqual(this.CheckUtneIsInListStep_22ExpectedValues.UIItem2CellValueAsString, uIItem2Cell.ValueAsString);
        }
        
        /// <summary>
        /// CheckVakant4010AddedStep_25 - Use 'CheckVakant4010AddedStep_25ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckVakant4010AddedStep_25()
        {
            #region Variable Declarations
            DXTreeListCell uIItem9VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode8TreeListNode.UIItem9VAKANTTreeListCell;
            DXTreeListCell uIItem4110LegeavdelingTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode8TreeListNode.UINode0TreeListNode.UIItem4110LegeavdelingTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '9. VAKANT' TreeListCell equals '9. VAKANT'
            Assert.AreEqual(this.CheckVakant4010AddedStep_25ExpectedValues.UIItem9VAKANTTreeListCellValueAsString, uIItem9VAKANTTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '4110 - Legeavdeling 1' TreeListCell equals '4010 - Legeavdeling 1'
            Assert.AreEqual(this.CheckVakant4010AddedStep_25ExpectedValues.UIItem4110LegeavdelingTreeListCellValueAsString, uIItem4110LegeavdelingTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckVakant5020AddedStep_24 - Use 'CheckVakant5020AddedStep_24ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckVakant5020AddedStep_24()
        {
            #region Variable Declarations
            DXTreeListCell uIItem8VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode7TreeListNode.UIItem8VAKANTTreeListCell;
            DXTreeListCell uIItem5020KalenderplanTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode7TreeListNode.UINode0TreeListNode.UIItem5020KalenderplanTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '8. VAKANT' TreeListCell equals '8. VAKANT'
            Assert.AreEqual(this.CheckVakant5020AddedStep_24ExpectedValues.UIItem8VAKANTTreeListCellValueAsString, uIItem8VAKANTTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5020 - Kalenderplan' TreeListCell equals '5020 - Kalenderplan'
            Assert.AreEqual(this.CheckVakant5020AddedStep_24ExpectedValues.UIItem5020KalenderplanTreeListCellValueAsString, uIItem5020KalenderplanTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckVakant5110AddedStep_26 - Use 'CheckVakant5110AddedStep_26ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckVakant5110AddedStep_26()
        {
            #region Variable Declarations
            DXTreeListCell uIItem10VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode9TreeListNode.UIItem10VAKANTTreeListCell;
            DXTreeListCell uIItem5010ArbeidsplanoTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode9TreeListNode.UINode0TreeListNode.UIItem5010ArbeidsplanoTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '10. VAKANT' TreeListCell equals '10. VAKANT'
            Assert.AreEqual(this.CheckVakant5110AddedStep_26ExpectedValues.UIItem10VAKANTTreeListCellValueAsString, uIItem10VAKANTTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '5010 - Arbeidsplan og hjelpeplan' TreeListCell equals '5110 - Diverse'
            Assert.AreEqual(this.CheckVakant5110AddedStep_26ExpectedValues.UIItem5010ArbeidsplanoTreeListCellValueAsString, uIItem5010ArbeidsplanoTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckVakantAddedStep_13 - Use 'CheckVakantAddedStep_13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckVakantAddedStep_13()
        {
            #region Variable Declarations
            DXTreeListCell uIItem6EriksrødErikaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UIItem6EriksrødErikaTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '6. Eriksrød, Erika' TreeListCell equals '6. VAKANT'
            Assert.AreEqual(this.CheckVakantAddedStep_13ExpectedValues.UIItem6EriksrødErikaTreeListCellValueAsString, uIItem6EriksrødErikaTreeListCell.ValueAsString, "Unexpected employee");
        }
        
        /// <summary>
        /// CheckVakantsMovedToTop - Use 'CheckVakantsMovedToTopExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckVakantsMovedToTop()
        {
            #region Variable Declarations
            DXTreeListCell uIItem1AndersenAstridTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode0TreeListNode.UIItem1AndersenAstridTreeListCell;
            DXTreeListCell uIItem2BarskeBrynjulfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UIItem2BarskeBrynjulfTreeListCell;
            DXTreeListCell uIItem3BetongBillyTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UIItem3BetongBillyTreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '1. Andersen, Astrid' TreeListCell equals '1. VAKANT'
            Assert.AreEqual(this.CheckVakantsMovedToTopExpectedValues.UIItem1AndersenAstridTreeListCellValueAsString, uIItem1AndersenAstridTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '2. Barske, Brynjulf' TreeListCell equals '2. VAKANT'
            Assert.AreEqual(this.CheckVakantsMovedToTopExpectedValues.UIItem2BarskeBrynjulfTreeListCellValueAsString, uIItem2BarskeBrynjulfTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of '3. Betong, Billy' TreeListCell equals '3. VAKANT'
            Assert.AreEqual(this.CheckVakantsMovedToTopExpectedValues.UIItem3BetongBillyTreeListCellValueAsString, uIItem3BetongBillyTreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// CheckWeekendpattern_18 - Use 'CheckWeekendpattern_18ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWeekendpattern_18()
        {
            #region Variable Declarations
            DXTreeListCell uIItem5DaleneDollyTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode4TreeListNode.UIItem5DaleneDollyTreeListCell;
            DXTreeListCell uIFast2TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode4TreeListNode.UIFast2TreeListCell;
            #endregion

            // Verify that the 'ValueAsString' property of '5. Dalene, Dolly' TreeListCell equals '5. Eriksrød, Erika'
            Assert.AreEqual(this.CheckWeekendpattern_18ExpectedValues.UIItem5DaleneDollyTreeListCellValueAsString, uIItem5DaleneDollyTreeListCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'Fast: 2' TreeListCell equals 'Fast: 2'
            Assert.AreEqual(this.CheckWeekendpattern_18ExpectedValues.UIFast2TreeListCellValueAsString, uIFast2TreeListCell.ValueAsString);
        }
        
        /// <summary>
        /// Delete1EmployeeStep_11
        /// </summary>
        public void Delete1EmployeeStep_11()
        {
            #region Variable Declarations
            DXTreeListCell uIItem2BarskeBrynjulfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UIItem2BarskeBrynjulfTreeListCell;
            DXButton uISlettButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UISlettButton;
            #endregion

            // Click '2. Barske, Brynjulf' TreeListCell
            Mouse.Click(uIItem2BarskeBrynjulfTreeListCell, new Point(68, 9));

            // Click 'Slett' button
            Mouse.Click(uISlettButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DeleteRaserPosition
        /// </summary>
        public void DeleteRaserPosition()
        {
            #region Variable Declarations
            DXTreeListCell uIItem150TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode11TreeListNode.UINode0TreeListNode.UIItem150TreeListCell;
            DXButton uISlettButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UISlettButton;
            #endregion

            // Click '1. 50%' TreeListCell
            Mouse.Click(uIItem150TreeListCell, new Point(25, 6));

            // Click 'Slett' button
            Mouse.Click(uISlettButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DeleteShifts - Use 'DeleteShiftsParams' to pass parameters into this method.
        /// </summary>
        public void DeleteShifts()
        {
            #region Variable Declarations
            DXCell uID1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable;
            DXCell uIN2Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell;
            DXCell uID1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UID1Cell1;
            DXCell uIN2Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIN2Cell1;
            DXCell uIA3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIGcRosterPlanTable.UIA3Cell;
            #endregion

            // Click 'D1' cell
            Mouse.Click(uID1Cell, new Point(11, 9));

            // Type '{Delete}' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.DeleteShiftsParams.UIGcRosterPlanTableSendKeys, ModifierKeys.None);

            // Click 'N2' cell
            Mouse.Click(uIN2Cell, new Point(12, 7));

            // Type '{Delete}' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.DeleteShiftsParams.UIGcRosterPlanTableSendKeys1, ModifierKeys.None);

            // Click 'D1' cell
            Mouse.Click(uID1Cell1, new Point(6, 11));

            // Type '{Delete}' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.DeleteShiftsParams.UIGcRosterPlanTableSendKeys2, ModifierKeys.None);

            // Click 'N2' cell
            Mouse.Click(uIN2Cell1, new Point(14, 10));

            // Type '{Delete}' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.DeleteShiftsParams.UIGcRosterPlanTableSendKeys3, ModifierKeys.None);

            // Click 'A3' cell
            Mouse.Click(uIA3Cell, new Point(9, 12));

            // Type '{Delete}' in 'gcRosterPlan' table
            Keyboard.SendKeys(uIGcRosterPlanTable, this.DeleteShiftsParams.UIGcRosterPlanTableSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// EditEmpsPositionsStep_17 - Use 'EditEmpsPositionsStep_17Params' to pass parameters into this method.
        /// </summary>
        public void EditEmpsPositionsStep_17()
        {
            #region Variable Declarations
            DXTestControl uINode0TreeListNodeSelectImage = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode4TreeListNode.UINode0TreeListNode.UINode0TreeListNodeSelectImage;
            DXTestControl uINode0TreeListNodeSelectImage1 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UINode0TreeListNode.UINode0TreeListNodeSelectImage;
            DXLookUpEdit uIEPositionCategoryLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIEPositionCategoryLookUpEdit;
            DXLookUpEdit uIEOvertimeCodeLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerOvertCustom.UIEOvertimeCodeLookUpEdit;
            DXLookUpEdit uIEUnionCodeLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIEUnionCodeLookUpEdit;
            #endregion

            // Click 'Node0' TreeListNodeSelectImage
            Mouse.Click(uINode0TreeListNodeSelectImage, new Point(6, 7));

            // Click 'Node0' TreeListNodeSelectImage while pressing Control
            Mouse.Click(uINode0TreeListNodeSelectImage1, MouseButtons.Left, ModifierKeys.Control, new Point(6, 9));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.PositionCategoryViewModel' in 'ePositionCategory' LookUpEdit
            //ValueTypeName
            uIEPositionCategoryLookUpEdit.ValueTypeName = this.EditEmpsPositionsStep_17Params.UIEPositionCategoryLookUpEditValueTypeName;

            // Type 'H - Hjelpepleier' in 'ePositionCategory' LookUpEdit
            //ValueAsString
            uIEPositionCategoryLookUpEdit.ValueAsString = this.EditEmpsPositionsStep_17Params.UIEPositionCategoryLookUpEditValueAsString;

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel' in 'eOvertimeCode' LookUpEdit
            //ValueTypeName
            uIEOvertimeCodeLookUpEdit.ValueTypeName = this.EditEmpsPositionsStep_17Params.UIEOvertimeCodeLookUpEditValueTypeName;

            // Type 'V - Vakans' in 'eOvertimeCode' LookUpEdit
            //ValueAsString
            uIEOvertimeCodeLookUpEdit.ValueAsString = this.EditEmpsPositionsStep_17Params.UIEOvertimeCodeLookUpEditValueAsString;

            // Click 'Node0' TreeListNodeSelectImage
            Mouse.Click(uINode0TreeListNodeSelectImage1, new Point(5, 6));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.UnionMembershipViewModel' in 'eUnionCode' LookUpEdit
            //ValueTypeName
            uIEUnionCodeLookUpEdit.ValueTypeName = this.EditEmpsPositionsStep_17Params.UIEUnionCodeLookUpEditValueTypeName;

            // Type 'FAG - Fagforbundet' in 'eUnionCode' LookUpEdit
            //ValueAsString
            uIEUnionCodeLookUpEdit.ValueAsString = this.EditEmpsPositionsStep_17Params.UIEUnionCodeLookUpEditValueAsString;
        }
        
        /// <summary>
        /// EditPositionsAndMoveToTopStep_27 - Use 'EditPositionsAndMoveToTopStep_27Params' to pass parameters into this method.
        /// </summary>
        public void EditPositionsAndMoveToTopStep_27()
        {
            #region Variable Declarations
            DXTreeListCell uIItem10TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode7TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            DXTreeListCell uIItem10TreeListCell1 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode8TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            DXTreeListCell uIItem10TreeListCell2 = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode9TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            DXLookUpEdit uIERuleSetLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIERuleSetLookUpEdit;
            DXLookUpEdit uIEPositionCategoryLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIEPositionCategoryLookUpEdit;
            DXTreeListCell uIItem8VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode7TreeListNode.UIItem8VAKANTTreeListCell;
            DXTreeListCell uIItem9VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode8TreeListNode.UIItem9VAKANTTreeListCell;
            DXTreeListCell uIItem10VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode9TreeListNode.UIItem10VAKANTTreeListCell;
            DXButton uIDropDownButtonArrowBButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIFlyttoppButton.UIDropDownButtonArrowBButton;
            DXMenuBaseButtonItem uIFlytttiltoppenMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIFlytttiltoppenMenuBaseButtonItem;
            #endregion

            // Click '1. 0%' TreeListCell
            Mouse.Click(uIItem10TreeListCell, new Point(16, 4));

            // Click '1. 0%' TreeListCell while pressing Control
            Mouse.Click(uIItem10TreeListCell1, MouseButtons.Left, ModifierKeys.Control, new Point(13, 11));

            // Click '1. 0%' TreeListCell while pressing Control
            Mouse.Click(uIItem10TreeListCell2, MouseButtons.Left, ModifierKeys.Control, new Point(16, 6));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.RuleSetViewModel' in 'eRuleSet' LookUpEdit
            //ValueTypeName
            uIERuleSetLookUpEdit.ValueTypeName = this.EditPositionsAndMoveToTopStep_27Params.UIERuleSetLookUpEditValueTypeName;

            // Type 'TURNUS - Turnus 35,5t/uke' in 'eRuleSet' LookUpEdit
            //ValueAsString
            uIERuleSetLookUpEdit.ValueAsString = this.EditPositionsAndMoveToTopStep_27Params.UIERuleSetLookUpEditValueAsString;

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.PositionCategoryViewModel' in 'ePositionCategory' LookUpEdit
            //ValueTypeName
            uIEPositionCategoryLookUpEdit.ValueTypeName = this.EditPositionsAndMoveToTopStep_27Params.UIEPositionCategoryLookUpEditValueTypeName;

            // Type 'A - Assistent' in 'ePositionCategory' LookUpEdit
            //ValueAsString
            uIEPositionCategoryLookUpEdit.ValueAsString = this.EditPositionsAndMoveToTopStep_27Params.UIEPositionCategoryLookUpEditValueAsString;

            // Click '8. VAKANT' TreeListCell
            Mouse.Click(uIItem8VAKANTTreeListCell, new Point(28, 8));

            // Click '9. VAKANT' TreeListCell while pressing Control
            Mouse.Click(uIItem9VAKANTTreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(18, 10));

            // Click '10. VAKANT' TreeListCell while pressing Control
            Mouse.Click(uIItem10VAKANTTreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(32, 6));

            // Click 'DropDownButtonArrowButton' button
            Mouse.Click(uIDropDownButtonArrowBButton, new Point(6, 8));

            // Click 'Flytt til toppen' MenuBaseButtonItem
            Mouse.Click(uIFlytttiltoppenMenuBaseButtonItem, new Point(67, 13));
        }
        
        /// <summary>
        /// EditVakantPositionStep_16 - Use 'EditVakantPositionStep_16Params' to pass parameters into this method.
        /// </summary>
        public void EditVakantPositionStep_16()
        {
            #region Variable Declarations
            DXTreeListCell uIItem10TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            DXLookUpEdit uIEPositionCategoryLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIEPositionCategoryLookUpEdit;
            DXTextEdit uIEPositionPercentEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIEPositionPercentEdit;
            DXLookUpEdit uIERuleSetLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIERuleSetLookUpEdit;
            DXLookUpEdit uIEGroupLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIEGroupLookUpEdit;
            DXDateTimePicker uIERevolveFromDateTimeEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient11.UIEmployeeManagerRevolCustom.UIERevolveFromDateTimeEdit;
            #endregion

            // Click '1. 0%' TreeListCell
            Mouse.Click(uIItem10TreeListCell, new Point(28, 8));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.PositionCategoryViewModel' in 'ePositionCategory' LookUpEdit
            //ValueTypeName
            uIEPositionCategoryLookUpEdit.ValueTypeName = this.EditVakantPositionStep_16Params.UIEPositionCategoryLookUpEditValueTypeName;

            // Type 'S - Sykepleier' in 'ePositionCategory' LookUpEdit
            //ValueAsString
            uIEPositionCategoryLookUpEdit.ValueAsString = this.EditVakantPositionStep_16Params.UIEPositionCategoryLookUpEditValueAsString;

            // Type 'System.Double' in 'ePositionPercent' text box
            //ValueTypeName
            uIEPositionPercentEdit.ValueTypeName = this.EditVakantPositionStep_16Params.UIEPositionPercentEditValueTypeName;

            // Type '50' in 'ePositionPercent' text box
            //ValueAsString
            uIEPositionPercentEdit.ValueAsString = this.EditVakantPositionStep_16Params.UIEPositionPercentEditValueAsString;

            // Type '{Tab}' in 'ePositionPercent' text box
            Keyboard.SendKeys(uIEPositionPercentEdit, this.EditVakantPositionStep_16Params.UIEPositionPercentEditSendKeys, ModifierKeys.None);

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.RuleSetViewModel' in 'eRuleSet' LookUpEdit
            //ValueTypeName
            uIERuleSetLookUpEdit.ValueTypeName = this.EditVakantPositionStep_16Params.UIERuleSetLookUpEditValueTypeName;

            // Type 'TURNUS - Turnus 35,5t/uke' in 'eRuleSet' LookUpEdit
            //ValueAsString
            uIERuleSetLookUpEdit.ValueAsString = this.EditVakantPositionStep_16Params.UIERuleSetLookUpEditValueAsString;

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.GroupViewModel' in 'eGroup' LookUpEdit
            //ValueTypeName
            uIEGroupLookUpEdit.ValueTypeName = this.EditVakantPositionStep_16Params.UIEGroupLookUpEditValueTypeName;

            // Type 'GR1 - Gruppe 1' in 'eGroup' LookUpEdit
            //ValueAsString
            uIEGroupLookUpEdit.ValueAsString = this.EditVakantPositionStep_16Params.UIEGroupLookUpEditValueAsString;

            // Type '16.01.2023{Tab}' in 'eRevolveFrom' DateTimeEdit
            Keyboard.SendKeys(uIERevolveFromDateTimeEdit, this.EditVakantPositionStep_16Params.UIERevolveFromDateTimeEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// EditVakantStep_15 - Use 'EditVakantStep_15Params' to pass parameters into this method.
        /// </summary>
        public void EditVakantStep_15()
        {
            #region Variable Declarations
            DXTreeListCell uIItem2BarskeBrynjulfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode1TreeListNode.UIItem2BarskeBrynjulfTreeListCell;
            DXTextEdit uIECustomNameEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerVacanCustom.UIECustomNameEdit;
            DXComboBox uIEWeekSeparatorComboBox = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerVacanCustom.UIEWeekSeparatorComboBox;
            DXListBox uIComboBoxPopupListBoxList = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerVacanCustom.UIEWeekSeparatorComboBox.UIComboBoxPopupListBoxWindow.UIComboBoxPopupListBoxList;
            DXDateTimePicker uIEDaySeparatorDateTimeEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerVacanCustom.UIEDaySeparatorDateTimeEdit;
            DXTextEdit uIENotesEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerEmploCustom.UIENotesEdit;
            #endregion

            // Click '2. Barske, Brynjulf' TreeListCell
            Mouse.Click(uIItem2BarskeBrynjulfTreeListCell, new Point(43, 12));

            // Type 'VAKANT, Vilde' in 'eCustomName' text box
            //ValueAsString
            uIECustomNameEdit.ValueAsString = this.EditVakantStep_15Params.UIECustomNameEditValueAsString;

            // Type '{Tab}' in 'eCustomName' text box
            Keyboard.SendKeys(uIECustomNameEdit, this.EditVakantStep_15Params.UIECustomNameEditSendKeys, ModifierKeys.None);

            // Select 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.WeekdayViewModel' in 'eWeekSeparator' combo box
            //ValueTypeName
            uIEWeekSeparatorComboBox.ValueTypeName = this.EditVakantStep_15Params.UIEWeekSeparatorComboBoxValueTypeName;

            // Select 'Onsdag [SelectionStart]0' in 'eWeekSeparator' combo box
            //ValueAsString
            uIEWeekSeparatorComboBox.ValueAsString = this.EditVakantStep_15Params.UIEWeekSeparatorComboBoxValueAsString;

            // Type '{Tab}' in 'ComboBoxPopupListBox' list box
            Keyboard.SendKeys(uIComboBoxPopupListBoxList, this.EditVakantStep_15Params.UIComboBoxPopupListBoxListSendKeys, ModifierKeys.None);

            // Type '07:00:00 [SelectionStart]0[SelectionLength]5' in 'eDaySeparator' DateTimeEdit
            //ValueAsString
            uIEDaySeparatorDateTimeEdit.ValueAsString = this.EditVakantStep_15Params.UIEDaySeparatorDateTimeEditValueAsString;

            // Type 'Skal ansettes ny sykepleier{Tab}' in 'eNotes' text box
            Keyboard.SendKeys(uIENotesEdit, this.EditVakantStep_15Params.UIENotesEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// MoveEmployeesStep_14
        /// </summary>
        public void MoveEmployeesStep_14()
        {
            #region Variable Declarations
            DXTreeListCell uIItem6EriksrødErikaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UIItem6EriksrødErikaTreeListCell;
            DXButton uIFlyttoppButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIFlyttoppButton;
            DXTreeListCell uIItem3BetongBillyTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode2TreeListNode.UIItem3BetongBillyTreeListCell;
            DXButton uIFlyttnedButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIFlyttnedButton;
            #endregion

            // Click '6. Eriksrød, Erika' TreeListCell
            Mouse.Click(uIItem6EriksrødErikaTreeListCell, new Point(40, 7));

            // Click 'Flytt opp' button
            Mouse.Click(uIFlyttoppButton, new Point(1, 1));

            // Click 'Flytt opp' button
            Mouse.Click(uIFlyttoppButton, new Point(1, 1));

            // Click 'Flytt opp' button
            Mouse.Click(uIFlyttoppButton, new Point(1, 1));

            // Click 'Flytt opp' button
            Mouse.Click(uIFlyttoppButton, new Point(1, 1));

            // Click '3. Betong, Billy' TreeListCell
            Mouse.Click(uIItem3BetongBillyTreeListCell, new Point(40, 8));

            // Click 'Flytt ned' button
            Mouse.Click(uIFlyttnedButton, new Point(1, 1));

            // Click 'Flytt ned' button
            Mouse.Click(uIFlyttnedButton, new Point(1, 1));

            // Click 'Flytt ned' button
            Mouse.Click(uIFlyttnedButton, new Point(1, 1));
        }
        
        /// <summary>
        /// OpenSelectionOptionsSelectAllPlans - Use 'OpenSelectionOptionsSelectAllPlansParams' to pass parameters into this method.
        /// </summary>
        public void OpenSelectionOptionsSelectAllPlans()
        {
            #region Variable Declarations
            DXButton uIUtvalgsalternativerButton = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectPlanEmployeesVCustom.UILeftAutoHideContaineClient.UIUtvalgsalternativerButton;
            DXCell uIFranzenCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectPlanEmployeesVCustom.UIAutoHideControlClient.UIDpPlanSelectorDockPanel.UIDpContainerCustom.UIGcAvailablePlansTable.UIFranzenCell;
            DXGrid uIGcAvailablePlansTable = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectPlanEmployeesVCustom.UIAutoHideControlClient.UIDpPlanSelectorDockPanel.UIDpContainerCustom.UIGcAvailablePlansTable;
            #endregion

            // Click 'Utvalgsalternativer' button
            Mouse.Click(uIUtvalgsalternativerButton, new Point(9, 49));

            // Click 'Franzen' cell
            Mouse.Click(uIFranzenCell, new Point(38, 17));

            // Type 'Control + a' in 'gcAvailablePlans' table
            Keyboard.SendKeys(uIGcAvailablePlansTable, this.OpenSelectionOptionsSelectAllPlansParams.UIGcAvailablePlansTableSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// SelectAllEmpsStep_45 - Use 'SelectAllEmpsStep_45Params' to pass parameters into this method.
        /// </summary>
        public void SelectAllEmpsStep_45()
        {
            #region Variable Declarations
            DXCell uIGcPlanEmployeesGridCCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectPlanEmployeesVCustom.UIPcContentContainerClient.UIPcContentClient.UIGcPlanEmployeesTable.UIGcPlanEmployeesGridCCell;
            DXGrid uIGcPlanEmployeesTable = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectPlanEmployeesVCustom.UIPcContentContainerClient.UIPcContentClient.UIGcPlanEmployeesTable;
            #endregion

            // Click 'gcPlanEmployeesGridControlCell[View]gvPlanEmployees[Row]0[Column]colToDate' cell
            Mouse.Click(uIGcPlanEmployeesGridCCell, new Point(66, 10));

            // Type 'Control + a' in 'gcPlanEmployees' table
            Keyboard.SendKeys(uIGcPlanEmployeesTable, this.SelectAllEmpsStep_45Params.UIGcPlanEmployeesTableSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// SelectBetongPosition
        /// </summary>
        public void SelectBetongPosition()
        {
            #region Variable Declarations
            DXTreeListCell uIItem10TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            #endregion

            // Click '1. 0%' TreeListCell
            Mouse.Click(uIItem10TreeListCell, new Point(24, 7));
        }
        
        /// <summary>
        /// SelectDep4010
        /// </summary>
        public void SelectDep4010()
        {
            #region Variable Declarations
            DXButton uIDropDownButtonArrowBButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIVakantButton.UIDropDownButtonArrowBButton;
            DXTreeListCell uIItem4010LegeavdelingTreeListCell = this.UIItemWindow3.UIPopupContainerBarConMenu.UIDepartmentPopupContrClient.UITreeListDepartmentsTreeList.UINode0TreeListNode.UINode6TreeListNode.UINode0TreeListNode.UIItem4010LegeavdelingTreeListCell;
            #endregion

            // Click 'DropDownButtonArrowButton' button
            Mouse.Click(uIDropDownButtonArrowBButton, new Point(9, 12));

            // Click '4010 - Legeavdeling 1' TreeListCell
            Mouse.Click(uIItem4010LegeavdelingTreeListCell, new Point(57, 7));
        }
        
        /// <summary>
        /// SelectDep5020
        /// </summary>
        public void SelectDep5020()
        {
            #region Variable Declarations
            DXButton uIDropDownButtonArrowBButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIVakantButton.UIDropDownButtonArrowBButton;
            DXTreeListCell uIItem5020KalenderplanTreeListCell = this.UIItemWindow3.UIPopupContainerBarConMenu.UIDepartmentPopupContrClient.UITreeListDepartmentsTreeList.UINode0TreeListNode.UINode12TreeListNode.UINode1TreeListNode.UIItem5020KalenderplanTreeListCell;
            #endregion

            // Click 'DropDownButtonArrowButton' button
            Mouse.Click(uIDropDownButtonArrowBButton, new Point(6, 11));

            // Click '5020 - Kalenderplan' TreeListCell
            Mouse.Click(uIItem5020KalenderplanTreeListCell, new Point(74, 8));
        }
        
        /// <summary>
        /// SelectDep5110
        /// </summary>
        public void SelectDep5110()
        {
            #region Variable Declarations
            DXButton uIDropDownButtonArrowBButton = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UIVakantButton.UIDropDownButtonArrowBButton;
            DXTreeListCell uIItem5110DiverseTreeListCell = this.UIItemWindow3.UIPopupContainerBarConMenu.UIDepartmentPopupContrClient.UITreeListDepartmentsTreeList.UINode0TreeListNode.UINode12TreeListNode.UINode9TreeListNode.UIItem5110DiverseTreeListCell;
            #endregion

            // Click 'DropDownButtonArrowButton' button
            Mouse.Click(uIDropDownButtonArrowBButton, new Point(6, 10));

            // Click '5110 - Diverse' TreeListCell
            Mouse.Click(uIItem5110DiverseTreeListCell, new Point(45, 7));
        }
        
        /// <summary>
        /// SelectEmployeeUtneStep_23
        /// </summary>
        public void SelectEmployeeUtneStep_23()
        {
            #region Variable Declarations
            DXCell uIDDagtidspersonellCell = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIPcContentContainerClient.UIPcContentClient.UIGcDepartmentEmployeeTable.UIDDagtidspersonellCell;
            #endregion

            // Click 'D - Dagtidspersonell' cell
            Mouse.Click(uIDDagtidspersonellCell, new Point(38, 9));
        }
        
        /// <summary>
        /// SelectEriksroed
        /// </summary>
        public void SelectEriksroed()
        {
            #region Variable Declarations
            DXTreeListCell uIItem5DaleneDollyTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode4TreeListNode.UIItem5DaleneDollyTreeListCell;
            #endregion

            // Click '5. Dalene, Dolly' TreeListCell
            Mouse.Click(uIItem5DaleneDollyTreeListCell, new Point(41, 7));
        }
        
        /// <summary>
        /// SelectEriksroedPosition
        /// </summary>
        public void SelectEriksroedPosition()
        {
            #region Variable Declarations
            DXTestControl uINode0TreeListNodeSelectImage = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode4TreeListNode.UINode0TreeListNode.UINode0TreeListNodeSelectImage;
            #endregion

            // Click 'Node0' TreeListNodeSelectImage
            Mouse.Click(uINode0TreeListNodeSelectImage, new Point(10, 4));
        }
        
        /// <summary>
        /// SelectIncludeExistingEmployees - Use 'SelectIncludeExistingEmployeesParams' to pass parameters into this method.
        /// </summary>
        public void SelectIncludeExistingEmployees()
        {
            #region Variable Declarations
            DXButton uIUtvalgsalternativerButton = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UILeftAutoHideContaineClient.UIUtvalgsalternativerButton;
            DXCheckBox uICeDoIncludeExistingECheckBox = this.UILeggtilansatteWindow.UIViewHostCustom.UIPcViewClient.UISelectDepartmentEmplCustom.UIAutoHideControlClient.UIDpDepartmentSelectorDockPanel.UIDepartmentSelectorCoCustom.UICeDoIncludeExistingECheckBox;
            #endregion

            // Click 'Utvalgsalternativer' button
            Mouse.Click(uIUtvalgsalternativerButton, new Point(8, 50));

            // Select 'ceDoIncludeExistingEmployees' check box
            uICeDoIncludeExistingECheckBox.Checked = this.SelectIncludeExistingEmployeesParams.UICeDoIncludeExistingECheckBoxChecked;
        }
        
        /// <summary>
        /// selectNewEmpsStep_46
        /// </summary>
        public void selectNewEmpsStep_46()
        {
            #region Variable Declarations
            DXTreeListCell uIItem190TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode12TreeListNode.UINode0TreeListNode.UIItem190TreeListCell;
            DXTreeListCell uIItem175TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode13TreeListNode.UINode0TreeListNode.UIItem175TreeListCell;
            DXTreeListCell uIItem1100TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode14TreeListNode.UINode0TreeListNode.UIItem1100TreeListCell;
            DXTreeListCell uIItem180TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode15TreeListNode.UINode0TreeListNode.UIItem180TreeListCell;
            #endregion

            // Click '1. 90%' TreeListCell
            Mouse.Click(uIItem190TreeListCell, new Point(31, 9));

            // Click '1. 75%' TreeListCell while pressing Control
            Mouse.Click(uIItem175TreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(38, 4));

            // Click '1. 100%' TreeListCell while pressing Control
            Mouse.Click(uIItem1100TreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(34, 9));

            // Click '1. 80%' TreeListCell while pressing Control
            Mouse.Click(uIItem180TreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(39, 7));
        }
        
        /// <summary>
        /// SelectUtne
        /// </summary>
        public void SelectUtne()
        {
            #region Variable Declarations
            WinClient uIAnsatteClient = this.UIGatWindow.UIItemWindow.UIAnsatteClient;
            #endregion

            // Click 'Ansatte' client
            Mouse.Click(uIAnsatteClient, new Point(35, 332));
        }
        
        /// <summary>
        /// SetBronsonInactive - Use 'SetBronsonInactiveParams' to pass parameters into this method.
        /// </summary>
        public void SetBronsonInactive()
        {
            #region Variable Declarations
            DXTreeListCell uIItem10TreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UINode0TreeListNode.UIItem10TreeListCell;
            DXCheckBox uIEIsInactiveCheckBox = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient1.UIEmployeeManagerLineVCustom.UIEIsInactiveCheckBox;
            #endregion

            // Click '1. 0%' TreeListCell
            Mouse.Click(uIItem10TreeListCell, new Point(83, 8));

            // Select 'eIsInactive' check box
            uIEIsInactiveCheckBox.Checked = this.SetBronsonInactiveParams.UIEIsInactiveCheckBoxChecked;
        }
        
        /// <summary>
        /// SetEmployeeF3Calculations - Use 'SetEmployeeF3CalculationsParams' to pass parameters into this method.
        /// </summary>
        public void SetEmployeeF3Calculations()
        {
            #region Variable Declarations
            DXCell uIVAKANTCell = this.UINyhjelpeplanWindow.UIPnlMainClient.UIGsLayoutControlMainCustom.UILayoutControlGroupNaLayoutGroup.UILayoutControlGroupNeLayoutGroup.UILayoutControlItem2LayoutControlItem.UIPnlGridSumClient.UIGsGridControlTable.UIVAKANTCell;
            DXTestControl uIGsLayoutControlMainCustom = this.UINyhjelpeplanWindow.UIPnlMainClient.UIGsLayoutControlMainCustom;
            DXButton uIAnnenhverberegningavButton = this.UINyhjelpeplanWindow.UIPnlMainClient.UIGsLayoutControlMainCustom.UILayoutControlGroupNaLayoutGroup.UILayoutControlGroupNeLayoutGroup.UILayoutControlItem4LayoutControlItem.UIPnlRuleButtonsClient.UIAnnenhverberegningavButton;
            #endregion

            // Click 'VAKANT' cell
            Mouse.Click(uIVAKANTCell, new Point(72, 10));

            // Type 'Control + a' in 'gsLayoutControlMain' custom control
            Keyboard.SendKeys(uIGsLayoutControlMainCustom, this.SetEmployeeF3CalculationsParams.UIGsLayoutControlMainCustomSendKeys, ModifierKeys.Control);

            // Click 'Annenhver beregning av F3' button
            Mouse.Click(uIAnnenhverberegningavButton, new Point(1, 1));
        }
        
        /// <summary>
        /// SetEmployeesNewF3Calculations - Use 'SetEmployeesNewF3CalculationsParams' to pass parameters into this method.
        /// </summary>
        public void SetEmployeesNewF3Calculations()
        {
            #region Variable Declarations
            DXTreeListCell uIItem4BronsonCharlieTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode3TreeListNode.UIItem4BronsonCharlieTreeListCell;
            DXTreeListCell uIItem6EriksrødErikaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode5TreeListNode.UIItem6EriksrødErikaTreeListCell;
            DXTreeListCell uIItem7UlneUlfTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode6TreeListNode.UIItem7UlneUlfTreeListCell;
            DXTreeListCell uIItem8VAKANTTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode7TreeListNode.UIItem8VAKANTTreeListCell;
            DXLookUpEdit uILueF3CalculationOptiLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerF3CalCustom.UILueF3CalculationOptiLookUpEdit;
            #endregion

            // Click '4. Bronson, Charlie' TreeListCell
            Mouse.Click(uIItem4BronsonCharlieTreeListCell, new Point(29, 10));

            // Click '6. Eriksrød, Erika' TreeListCell while pressing Control
            Mouse.Click(uIItem6EriksrødErikaTreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(34, 2));

            // Click '7. Ulne, Ulf' TreeListCell while pressing Control
            Mouse.Click(uIItem7UlneUlfTreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(23, 8));

            // Click '8. VAKANT' TreeListCell while pressing Control
            Mouse.Click(uIItem8VAKANTTreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(25, 6));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionViewModel' in 'lueF3CalculationOption' LookUpEdit
            //ValueTypeName
            uILueF3CalculationOptiLookUpEdit.ValueTypeName = this.SetEmployeesNewF3CalculationsParams.UILueF3CalculationOptiLookUpEditValueTypeName;

            // Type 'Gjennomsnitt' in 'lueF3CalculationOption' LookUpEdit
            //ValueAsString
            uILueF3CalculationOptiLookUpEdit.ValueAsString = this.SetEmployeesNewF3CalculationsParams.UILueF3CalculationOptiLookUpEditValueAsString;
        }
        
        /// <summary>
        /// SetF3ToNewEmpStep_45 - Use 'SetF3ToNewEmpStep_45Params' to pass parameters into this method.
        /// </summary>
        public void SetF3ToNewEmpStep_45()
        {
            #region Variable Declarations
            DXTreeListCell uIItem13SørensenSørenTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode12TreeListNode.UIItem13SørensenSørenTreeListCell;
            DXTreeListCell uIItem14TigerTanyaTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode13TreeListNode.UIItem14TigerTanyaTreeListCell;
            DXTreeListCell uIItem15AbrahamsenTronTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode14TreeListNode.UIItem15AbrahamsenTronTreeListCell;
            DXTreeListCell uIItem16BergMagnusTreeListCell = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlLeftClient.UITreeListEmployeeTreeList.UINode15TreeListNode.UIItem16BergMagnusTreeListCell;
            DXLookUpEdit uILueF3CalculationOptiLookUpEdit = this.UIAnsatteiarbeidsplanWindow.UIPanelControlOuterClient.UIPanelControlRightClient.UIViewHostCustom.UIPcViewClient.UIEmployeeEditorsViewCustom.UIPcContentClient.UIXscContentScrollableControl.UIGroupControlViewHostCustom.UIGroupControlClient.UIEmployeeManagerF3CalCustom.UILueF3CalculationOptiLookUpEdit;
            #endregion

            // Click '13. Sørensen, Søren' TreeListCell
            Mouse.Click(uIItem13SørensenSørenTreeListCell, new Point(93, 6));

            // Click '14. Tiger, Tanya' TreeListCell while pressing Control
            Mouse.Click(uIItem14TigerTanyaTreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(84, 10));

            // Click '15. Abrahamsen, Trond' TreeListCell while pressing Control
            Mouse.Click(uIItem15AbrahamsenTronTreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(73, 9));

            // Click '16. Berg, Magnus' TreeListCell while pressing Control
            Mouse.Click(uIItem16BergMagnusTreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(65, 8));

            // Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionViewModel' in 'lueF3CalculationOption' LookUpEdit
            //ValueTypeName
            uILueF3CalculationOptiLookUpEdit.ValueTypeName = this.SetF3ToNewEmpStep_45Params.UILueF3CalculationOptiLookUpEditValueTypeName;

            // Type 'Annenhver' in 'lueF3CalculationOption' LookUpEdit
            //ValueAsString
            uILueF3CalculationOptiLookUpEdit.ValueAsString = this.SetF3ToNewEmpStep_45Params.UILueF3CalculationOptiLookUpEditValueAsString;
        }
        
        /// <summary>
        /// SetTypeCalendarplan - Use 'SetTypeCalendarplanParams' to pass parameters into this method.
        /// </summary>
        public void SetTypeCalendarplan()
        {
            #region Variable Declarations
            DXLookUpEdit uILeRosterplanTypeLookUpEdit = this.UIArbeidsplanInnstilliWindow.UITcDataTabList.UITpConfigurationClient.UIPaCenterClient.UILeRosterplanTypeLookUpEdit;
            #endregion

            // Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.Configuration.RosterplanConfigurationController+RosterplanTypeDefinition' in 'leRosterplanType' LookUpEdit
            //ValueTypeName
            uILeRosterplanTypeLookUpEdit.ValueTypeName = this.SetTypeCalendarplanParams.UILeRosterplanTypeLookUpEditValueTypeName;

            // Type 'Kalenderplan' in 'leRosterplanType' LookUpEdit
            //ValueAsString
            uILeRosterplanTypeLookUpEdit.ValueAsString = this.SetTypeCalendarplanParams.UILeRosterplanTypeLookUpEditValueAsString;
        }
        
        #region Properties
        public virtual Add2EmployeesStep_10Params Add2EmployeesStep_10Params
        {
            get
            {
                if ((this.mAdd2EmployeesStep_10Params == null))
                {
                    this.mAdd2EmployeesStep_10Params = new Add2EmployeesStep_10Params();
                }
                return this.mAdd2EmployeesStep_10Params;
            }
        }
        
        public virtual Add4EmployeesStep_29Params Add4EmployeesStep_29Params
        {
            get
            {
                if ((this.mAdd4EmployeesStep_29Params == null))
                {
                    this.mAdd4EmployeesStep_29Params = new Add4EmployeesStep_29Params();
                }
                return this.mAdd4EmployeesStep_29Params;
            }
        }
        
        public virtual AddCalendarplanShiftsParams AddCalendarplanShiftsParams
        {
            get
            {
                if ((this.mAddCalendarplanShiftsParams == null))
                {
                    this.mAddCalendarplanShiftsParams = new AddCalendarplanShiftsParams();
                }
                return this.mAddCalendarplanShiftsParams;
            }
        }
        
        public virtual AddF1ShiftStep_33Params AddF1ShiftStep_33Params
        {
            get
            {
                if ((this.mAddF1ShiftStep_33Params == null))
                {
                    this.mAddF1ShiftStep_33Params = new AddF1ShiftStep_33Params();
                }
                return this.mAddF1ShiftStep_33Params;
            }
        }
        
        public virtual AddRosterplanShiftsStep_40Params AddRosterplanShiftsStep_40Params
        {
            get
            {
                if ((this.mAddRosterplanShiftsStep_40Params == null))
                {
                    this.mAddRosterplanShiftsStep_40Params = new AddRosterplanShiftsStep_40Params();
                }
                return this.mAddRosterplanShiftsStep_40Params;
            }
        }
        
        public virtual AddRosterplanShiftsStep_42Params AddRosterplanShiftsStep_42Params
        {
            get
            {
                if ((this.mAddRosterplanShiftsStep_42Params == null))
                {
                    this.mAddRosterplanShiftsStep_42Params = new AddRosterplanShiftsStep_42Params();
                }
                return this.mAddRosterplanShiftsStep_42Params;
            }
        }
        
        public virtual AddShiftsStep_33Params AddShiftsStep_33Params
        {
            get
            {
                if ((this.mAddShiftsStep_33Params == null))
                {
                    this.mAddShiftsStep_33Params = new AddShiftsStep_33Params();
                }
                return this.mAddShiftsStep_33Params;
            }
        }
        
        public virtual AddShiftsStep_33_1Params AddShiftsStep_33_1Params
        {
            get
            {
                if ((this.mAddShiftsStep_33_1Params == null))
                {
                    this.mAddShiftsStep_33_1Params = new AddShiftsStep_33_1Params();
                }
                return this.mAddShiftsStep_33_1Params;
            }
        }
        
        public virtual Check2AddedCorretlyToListStep_10ExpectedValues Check2AddedCorretlyToListStep_10ExpectedValues
        {
            get
            {
                if ((this.mCheck2AddedCorretlyToListStep_10ExpectedValues == null))
                {
                    this.mCheck2AddedCorretlyToListStep_10ExpectedValues = new Check2AddedCorretlyToListStep_10ExpectedValues();
                }
                return this.mCheck2AddedCorretlyToListStep_10ExpectedValues;
            }
        }
        
        public virtual Check4EmployeesAddedStep_8ExpectedValues Check4EmployeesAddedStep_8ExpectedValues
        {
            get
            {
                if ((this.mCheck4EmployeesAddedStep_8ExpectedValues == null))
                {
                    this.mCheck4EmployeesAddedStep_8ExpectedValues = new Check4EmployeesAddedStep_8ExpectedValues();
                }
                return this.mCheck4EmployeesAddedStep_8ExpectedValues;
            }
        }
        
        public virtual Check4EmpsAddedStep_29ExpectedValues Check4EmpsAddedStep_29ExpectedValues
        {
            get
            {
                if ((this.mCheck4EmpsAddedStep_29ExpectedValues == null))
                {
                    this.mCheck4EmpsAddedStep_29ExpectedValues = new Check4EmpsAddedStep_29ExpectedValues();
                }
                return this.mCheck4EmpsAddedStep_29ExpectedValues;
            }
        }
        
        public virtual CheckAllEmpsIsInListExpectedValues CheckAllEmpsIsInListExpectedValues
        {
            get
            {
                if ((this.mCheckAllEmpsIsInListExpectedValues == null))
                {
                    this.mCheckAllEmpsIsInListExpectedValues = new CheckAllEmpsIsInListExpectedValues();
                }
                return this.mCheckAllEmpsIsInListExpectedValues;
            }
        }
        
        public virtual CheckBarskeRemoved_Step_11ExpectedValues CheckBarskeRemoved_Step_11ExpectedValues
        {
            get
            {
                if ((this.mCheckBarskeRemoved_Step_11ExpectedValues == null))
                {
                    this.mCheckBarskeRemoved_Step_11ExpectedValues = new CheckBarskeRemoved_Step_11ExpectedValues();
                }
                return this.mCheckBarskeRemoved_Step_11ExpectedValues;
            }
        }
        
        public virtual CheckBetongPositionStep_17ExpectedValues CheckBetongPositionStep_17ExpectedValues
        {
            get
            {
                if ((this.mCheckBetongPositionStep_17ExpectedValues == null))
                {
                    this.mCheckBetongPositionStep_17ExpectedValues = new CheckBetongPositionStep_17ExpectedValues();
                }
                return this.mCheckBetongPositionStep_17ExpectedValues;
            }
        }
        
        public virtual CheckEmpBronsonInactiveExpectedValues CheckEmpBronsonInactiveExpectedValues
        {
            get
            {
                if ((this.mCheckEmpBronsonInactiveExpectedValues == null))
                {
                    this.mCheckEmpBronsonInactiveExpectedValues = new CheckEmpBronsonInactiveExpectedValues();
                }
                return this.mCheckEmpBronsonInactiveExpectedValues;
            }
        }
        
        public virtual CheckEmployeeF3bCalculationsStep35ExpectedValues CheckEmployeeF3bCalculationsStep35ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeeF3bCalculationsStep35ExpectedValues == null))
                {
                    this.mCheckEmployeeF3bCalculationsStep35ExpectedValues = new CheckEmployeeF3bCalculationsStep35ExpectedValues();
                }
                return this.mCheckEmployeeF3bCalculationsStep35ExpectedValues;
            }
        }
        
        public virtual CheckEmployeesF3bCalculationsStep36ExpectedValues CheckEmployeesF3bCalculationsStep36ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeesF3bCalculationsStep36ExpectedValues == null))
                {
                    this.mCheckEmployeesF3bCalculationsStep36ExpectedValues = new CheckEmployeesF3bCalculationsStep36ExpectedValues();
                }
                return this.mCheckEmployeesF3bCalculationsStep36ExpectedValues;
            }
        }
        
        public virtual CheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues CheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues
        {
            get
            {
                if ((this.mCheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues == null))
                {
                    this.mCheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues = new CheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues();
                }
                return this.mCheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues;
            }
        }
        
        public virtual CheckEmpPositionsInListStep_29ExpectedValues CheckEmpPositionsInListStep_29ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpPositionsInListStep_29ExpectedValues == null))
                {
                    this.mCheckEmpPositionsInListStep_29ExpectedValues = new CheckEmpPositionsInListStep_29ExpectedValues();
                }
                return this.mCheckEmpPositionsInListStep_29ExpectedValues;
            }
        }
        
        public virtual CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsAddedCorretlyToPlantStep_14ExpectedValues == null))
                {
                    this.mCheckEmpsAddedCorretlyToPlantStep_14ExpectedValues = new CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues();
                }
                return this.mCheckEmpsAddedCorretlyToPlantStep_14ExpectedValues;
            }
        }
        
        public virtual CheckEmpWindow_step_5ExpectedValues CheckEmpWindow_step_5ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpWindow_step_5ExpectedValues == null))
                {
                    this.mCheckEmpWindow_step_5ExpectedValues = new CheckEmpWindow_step_5ExpectedValues();
                }
                return this.mCheckEmpWindow_step_5ExpectedValues;
            }
        }
        
        public virtual CheckEriksroedPositionStep_17ExpectedValues CheckEriksroedPositionStep_17ExpectedValues
        {
            get
            {
                if ((this.mCheckEriksroedPositionStep_17ExpectedValues == null))
                {
                    this.mCheckEriksroedPositionStep_17ExpectedValues = new CheckEriksroedPositionStep_17ExpectedValues();
                }
                return this.mCheckEriksroedPositionStep_17ExpectedValues;
            }
        }
        
        public virtual CheckF3CalculationsExpectedValues CheckF3CalculationsExpectedValues
        {
            get
            {
                if ((this.mCheckF3CalculationsExpectedValues == null))
                {
                    this.mCheckF3CalculationsExpectedValues = new CheckF3CalculationsExpectedValues();
                }
                return this.mCheckF3CalculationsExpectedValues;
            }
        }
        
        public virtual CheckMovedEmployeesStep_14ExpectedValues CheckMovedEmployeesStep_14ExpectedValues
        {
            get
            {
                if ((this.mCheckMovedEmployeesStep_14ExpectedValues == null))
                {
                    this.mCheckMovedEmployeesStep_14ExpectedValues = new CheckMovedEmployeesStep_14ExpectedValues();
                }
                return this.mCheckMovedEmployeesStep_14ExpectedValues;
            }
        }
        
        public virtual CheckOnlyHansenInListExpectedValues CheckOnlyHansenInListExpectedValues
        {
            get
            {
                if ((this.mCheckOnlyHansenInListExpectedValues == null))
                {
                    this.mCheckOnlyHansenInListExpectedValues = new CheckOnlyHansenInListExpectedValues();
                }
                return this.mCheckOnlyHansenInListExpectedValues;
            }
        }
        
        public virtual CheckPlanHasCorrectEmployees_Step_12ExpectedValues CheckPlanHasCorrectEmployees_Step_12ExpectedValues
        {
            get
            {
                if ((this.mCheckPlanHasCorrectEmployees_Step_12ExpectedValues == null))
                {
                    this.mCheckPlanHasCorrectEmployees_Step_12ExpectedValues = new CheckPlanHasCorrectEmployees_Step_12ExpectedValues();
                }
                return this.mCheckPlanHasCorrectEmployees_Step_12ExpectedValues;
            }
        }
        
        public virtual CheckSHCalculationsExpectedValues CheckSHCalculationsExpectedValues
        {
            get
            {
                if ((this.mCheckSHCalculationsExpectedValues == null))
                {
                    this.mCheckSHCalculationsExpectedValues = new CheckSHCalculationsExpectedValues();
                }
                return this.mCheckSHCalculationsExpectedValues;
            }
        }
        
        public virtual CheckUtneAddedStep_20ExpectedValues CheckUtneAddedStep_20ExpectedValues
        {
            get
            {
                if ((this.mCheckUtneAddedStep_20ExpectedValues == null))
                {
                    this.mCheckUtneAddedStep_20ExpectedValues = new CheckUtneAddedStep_20ExpectedValues();
                }
                return this.mCheckUtneAddedStep_20ExpectedValues;
            }
        }
        
        public virtual CheckUtneAddedStep_23ExpectedValues CheckUtneAddedStep_23ExpectedValues
        {
            get
            {
                if ((this.mCheckUtneAddedStep_23ExpectedValues == null))
                {
                    this.mCheckUtneAddedStep_23ExpectedValues = new CheckUtneAddedStep_23ExpectedValues();
                }
                return this.mCheckUtneAddedStep_23ExpectedValues;
            }
        }
        
        public virtual CheckUtneIsInListStep_22ExpectedValues CheckUtneIsInListStep_22ExpectedValues
        {
            get
            {
                if ((this.mCheckUtneIsInListStep_22ExpectedValues == null))
                {
                    this.mCheckUtneIsInListStep_22ExpectedValues = new CheckUtneIsInListStep_22ExpectedValues();
                }
                return this.mCheckUtneIsInListStep_22ExpectedValues;
            }
        }
        
        public virtual CheckVakant4010AddedStep_25ExpectedValues CheckVakant4010AddedStep_25ExpectedValues
        {
            get
            {
                if ((this.mCheckVakant4010AddedStep_25ExpectedValues == null))
                {
                    this.mCheckVakant4010AddedStep_25ExpectedValues = new CheckVakant4010AddedStep_25ExpectedValues();
                }
                return this.mCheckVakant4010AddedStep_25ExpectedValues;
            }
        }
        
        public virtual CheckVakant5020AddedStep_24ExpectedValues CheckVakant5020AddedStep_24ExpectedValues
        {
            get
            {
                if ((this.mCheckVakant5020AddedStep_24ExpectedValues == null))
                {
                    this.mCheckVakant5020AddedStep_24ExpectedValues = new CheckVakant5020AddedStep_24ExpectedValues();
                }
                return this.mCheckVakant5020AddedStep_24ExpectedValues;
            }
        }
        
        public virtual CheckVakant5110AddedStep_26ExpectedValues CheckVakant5110AddedStep_26ExpectedValues
        {
            get
            {
                if ((this.mCheckVakant5110AddedStep_26ExpectedValues == null))
                {
                    this.mCheckVakant5110AddedStep_26ExpectedValues = new CheckVakant5110AddedStep_26ExpectedValues();
                }
                return this.mCheckVakant5110AddedStep_26ExpectedValues;
            }
        }
        
        public virtual CheckVakantAddedStep_13ExpectedValues CheckVakantAddedStep_13ExpectedValues
        {
            get
            {
                if ((this.mCheckVakantAddedStep_13ExpectedValues == null))
                {
                    this.mCheckVakantAddedStep_13ExpectedValues = new CheckVakantAddedStep_13ExpectedValues();
                }
                return this.mCheckVakantAddedStep_13ExpectedValues;
            }
        }
        
        public virtual CheckVakantsMovedToTopExpectedValues CheckVakantsMovedToTopExpectedValues
        {
            get
            {
                if ((this.mCheckVakantsMovedToTopExpectedValues == null))
                {
                    this.mCheckVakantsMovedToTopExpectedValues = new CheckVakantsMovedToTopExpectedValues();
                }
                return this.mCheckVakantsMovedToTopExpectedValues;
            }
        }
        
        public virtual CheckWeekendpattern_18ExpectedValues CheckWeekendpattern_18ExpectedValues
        {
            get
            {
                if ((this.mCheckWeekendpattern_18ExpectedValues == null))
                {
                    this.mCheckWeekendpattern_18ExpectedValues = new CheckWeekendpattern_18ExpectedValues();
                }
                return this.mCheckWeekendpattern_18ExpectedValues;
            }
        }
        
        public virtual DeleteShiftsParams DeleteShiftsParams
        {
            get
            {
                if ((this.mDeleteShiftsParams == null))
                {
                    this.mDeleteShiftsParams = new DeleteShiftsParams();
                }
                return this.mDeleteShiftsParams;
            }
        }
        
        public virtual EditEmpsPositionsStep_17Params EditEmpsPositionsStep_17Params
        {
            get
            {
                if ((this.mEditEmpsPositionsStep_17Params == null))
                {
                    this.mEditEmpsPositionsStep_17Params = new EditEmpsPositionsStep_17Params();
                }
                return this.mEditEmpsPositionsStep_17Params;
            }
        }
        
        public virtual EditPositionsAndMoveToTopStep_27Params EditPositionsAndMoveToTopStep_27Params
        {
            get
            {
                if ((this.mEditPositionsAndMoveToTopStep_27Params == null))
                {
                    this.mEditPositionsAndMoveToTopStep_27Params = new EditPositionsAndMoveToTopStep_27Params();
                }
                return this.mEditPositionsAndMoveToTopStep_27Params;
            }
        }
        
        public virtual EditVakantPositionStep_16Params EditVakantPositionStep_16Params
        {
            get
            {
                if ((this.mEditVakantPositionStep_16Params == null))
                {
                    this.mEditVakantPositionStep_16Params = new EditVakantPositionStep_16Params();
                }
                return this.mEditVakantPositionStep_16Params;
            }
        }
        
        public virtual EditVakantStep_15Params EditVakantStep_15Params
        {
            get
            {
                if ((this.mEditVakantStep_15Params == null))
                {
                    this.mEditVakantStep_15Params = new EditVakantStep_15Params();
                }
                return this.mEditVakantStep_15Params;
            }
        }
        
        public virtual OpenSelectionOptionsSelectAllPlansParams OpenSelectionOptionsSelectAllPlansParams
        {
            get
            {
                if ((this.mOpenSelectionOptionsSelectAllPlansParams == null))
                {
                    this.mOpenSelectionOptionsSelectAllPlansParams = new OpenSelectionOptionsSelectAllPlansParams();
                }
                return this.mOpenSelectionOptionsSelectAllPlansParams;
            }
        }
        
        public virtual SelectAllEmpsStep_45Params SelectAllEmpsStep_45Params
        {
            get
            {
                if ((this.mSelectAllEmpsStep_45Params == null))
                {
                    this.mSelectAllEmpsStep_45Params = new SelectAllEmpsStep_45Params();
                }
                return this.mSelectAllEmpsStep_45Params;
            }
        }
        
        public virtual SelectIncludeExistingEmployeesParams SelectIncludeExistingEmployeesParams
        {
            get
            {
                if ((this.mSelectIncludeExistingEmployeesParams == null))
                {
                    this.mSelectIncludeExistingEmployeesParams = new SelectIncludeExistingEmployeesParams();
                }
                return this.mSelectIncludeExistingEmployeesParams;
            }
        }
        
        public virtual SetBronsonInactiveParams SetBronsonInactiveParams
        {
            get
            {
                if ((this.mSetBronsonInactiveParams == null))
                {
                    this.mSetBronsonInactiveParams = new SetBronsonInactiveParams();
                }
                return this.mSetBronsonInactiveParams;
            }
        }
        
        public virtual SetEmployeeF3CalculationsParams SetEmployeeF3CalculationsParams
        {
            get
            {
                if ((this.mSetEmployeeF3CalculationsParams == null))
                {
                    this.mSetEmployeeF3CalculationsParams = new SetEmployeeF3CalculationsParams();
                }
                return this.mSetEmployeeF3CalculationsParams;
            }
        }
        
        public virtual SetEmployeesNewF3CalculationsParams SetEmployeesNewF3CalculationsParams
        {
            get
            {
                if ((this.mSetEmployeesNewF3CalculationsParams == null))
                {
                    this.mSetEmployeesNewF3CalculationsParams = new SetEmployeesNewF3CalculationsParams();
                }
                return this.mSetEmployeesNewF3CalculationsParams;
            }
        }
        
        public virtual SetF3ToNewEmpStep_45Params SetF3ToNewEmpStep_45Params
        {
            get
            {
                if ((this.mSetF3ToNewEmpStep_45Params == null))
                {
                    this.mSetF3ToNewEmpStep_45Params = new SetF3ToNewEmpStep_45Params();
                }
                return this.mSetF3ToNewEmpStep_45Params;
            }
        }
        
        public virtual SetTypeCalendarplanParams SetTypeCalendarplanParams
        {
            get
            {
                if ((this.mSetTypeCalendarplanParams == null))
                {
                    this.mSetTypeCalendarplanParams = new SetTypeCalendarplanParams();
                }
                return this.mSetTypeCalendarplanParams;
            }
        }
        
        public UIAnsatteiarbeidsplanWindow UIAnsatteiarbeidsplanWindow
        {
            get
            {
                if ((this.mUIAnsatteiarbeidsplanWindow == null))
                {
                    this.mUIAnsatteiarbeidsplanWindow = new UIAnsatteiarbeidsplanWindow();
                }
                return this.mUIAnsatteiarbeidsplanWindow;
            }
        }
        
        public UILeggtilansatteWindow UILeggtilansatteWindow
        {
            get
            {
                if ((this.mUILeggtilansatteWindow == null))
                {
                    this.mUILeggtilansatteWindow = new UILeggtilansatteWindow();
                }
                return this.mUILeggtilansatteWindow;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        
        public UIArbeidsplanWindow1 UIArbeidsplanWindow1
        {
            get
            {
                if ((this.mUIArbeidsplanWindow1 == null))
                {
                    this.mUIArbeidsplanWindow1 = new UIArbeidsplanWindow1();
                }
                return this.mUIArbeidsplanWindow1;
            }
        }
        
        public UIGT4003InformasjonWindow UIGT4003InformasjonWindow
        {
            get
            {
                if ((this.mUIGT4003InformasjonWindow == null))
                {
                    this.mUIGT4003InformasjonWindow = new UIGT4003InformasjonWindow();
                }
                return this.mUIGT4003InformasjonWindow;
            }
        }
        
        public UINyhjelpeplanWindow UINyhjelpeplanWindow
        {
            get
            {
                if ((this.mUINyhjelpeplanWindow == null))
                {
                    this.mUINyhjelpeplanWindow = new UINyhjelpeplanWindow();
                }
                return this.mUINyhjelpeplanWindow;
            }
        }
        
        public UIArbeidsplanInnstilliWindow UIArbeidsplanInnstilliWindow
        {
            get
            {
                if ((this.mUIArbeidsplanInnstilliWindow == null))
                {
                    this.mUIArbeidsplanInnstilliWindow = new UIArbeidsplanInnstilliWindow();
                }
                return this.mUIArbeidsplanInnstilliWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2();
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3();
                }
                return this.mUIItemWindow3;
            }
        }
        #endregion
        
        #region Fields
        private Add2EmployeesStep_10Params mAdd2EmployeesStep_10Params;
        
        private Add4EmployeesStep_29Params mAdd4EmployeesStep_29Params;
        
        private AddCalendarplanShiftsParams mAddCalendarplanShiftsParams;
        
        private AddF1ShiftStep_33Params mAddF1ShiftStep_33Params;
        
        private AddRosterplanShiftsStep_40Params mAddRosterplanShiftsStep_40Params;
        
        private AddRosterplanShiftsStep_42Params mAddRosterplanShiftsStep_42Params;
        
        private AddShiftsStep_33Params mAddShiftsStep_33Params;
        
        private AddShiftsStep_33_1Params mAddShiftsStep_33_1Params;
        
        private Check2AddedCorretlyToListStep_10ExpectedValues mCheck2AddedCorretlyToListStep_10ExpectedValues;
        
        private Check4EmployeesAddedStep_8ExpectedValues mCheck4EmployeesAddedStep_8ExpectedValues;
        
        private Check4EmpsAddedStep_29ExpectedValues mCheck4EmpsAddedStep_29ExpectedValues;
        
        private CheckAllEmpsIsInListExpectedValues mCheckAllEmpsIsInListExpectedValues;
        
        private CheckBarskeRemoved_Step_11ExpectedValues mCheckBarskeRemoved_Step_11ExpectedValues;
        
        private CheckBetongPositionStep_17ExpectedValues mCheckBetongPositionStep_17ExpectedValues;
        
        private CheckEmpBronsonInactiveExpectedValues mCheckEmpBronsonInactiveExpectedValues;
        
        private CheckEmployeeF3bCalculationsStep35ExpectedValues mCheckEmployeeF3bCalculationsStep35ExpectedValues;
        
        private CheckEmployeesF3bCalculationsStep36ExpectedValues mCheckEmployeesF3bCalculationsStep36ExpectedValues;
        
        private CheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues mCheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues;
        
        private CheckEmpPositionsInListStep_29ExpectedValues mCheckEmpPositionsInListStep_29ExpectedValues;
        
        private CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues mCheckEmpsAddedCorretlyToPlantStep_14ExpectedValues;
        
        private CheckEmpWindow_step_5ExpectedValues mCheckEmpWindow_step_5ExpectedValues;
        
        private CheckEriksroedPositionStep_17ExpectedValues mCheckEriksroedPositionStep_17ExpectedValues;
        
        private CheckF3CalculationsExpectedValues mCheckF3CalculationsExpectedValues;
        
        private CheckMovedEmployeesStep_14ExpectedValues mCheckMovedEmployeesStep_14ExpectedValues;
        
        private CheckOnlyHansenInListExpectedValues mCheckOnlyHansenInListExpectedValues;
        
        private CheckPlanHasCorrectEmployees_Step_12ExpectedValues mCheckPlanHasCorrectEmployees_Step_12ExpectedValues;
        
        private CheckSHCalculationsExpectedValues mCheckSHCalculationsExpectedValues;
        
        private CheckUtneAddedStep_20ExpectedValues mCheckUtneAddedStep_20ExpectedValues;
        
        private CheckUtneAddedStep_23ExpectedValues mCheckUtneAddedStep_23ExpectedValues;
        
        private CheckUtneIsInListStep_22ExpectedValues mCheckUtneIsInListStep_22ExpectedValues;
        
        private CheckVakant4010AddedStep_25ExpectedValues mCheckVakant4010AddedStep_25ExpectedValues;
        
        private CheckVakant5020AddedStep_24ExpectedValues mCheckVakant5020AddedStep_24ExpectedValues;
        
        private CheckVakant5110AddedStep_26ExpectedValues mCheckVakant5110AddedStep_26ExpectedValues;
        
        private CheckVakantAddedStep_13ExpectedValues mCheckVakantAddedStep_13ExpectedValues;
        
        private CheckVakantsMovedToTopExpectedValues mCheckVakantsMovedToTopExpectedValues;
        
        private CheckWeekendpattern_18ExpectedValues mCheckWeekendpattern_18ExpectedValues;
        
        private DeleteShiftsParams mDeleteShiftsParams;
        
        private EditEmpsPositionsStep_17Params mEditEmpsPositionsStep_17Params;
        
        private EditPositionsAndMoveToTopStep_27Params mEditPositionsAndMoveToTopStep_27Params;
        
        private EditVakantPositionStep_16Params mEditVakantPositionStep_16Params;
        
        private EditVakantStep_15Params mEditVakantStep_15Params;
        
        private OpenSelectionOptionsSelectAllPlansParams mOpenSelectionOptionsSelectAllPlansParams;
        
        private SelectAllEmpsStep_45Params mSelectAllEmpsStep_45Params;
        
        private SelectIncludeExistingEmployeesParams mSelectIncludeExistingEmployeesParams;
        
        private SetBronsonInactiveParams mSetBronsonInactiveParams;
        
        private SetEmployeeF3CalculationsParams mSetEmployeeF3CalculationsParams;
        
        private SetEmployeesNewF3CalculationsParams mSetEmployeesNewF3CalculationsParams;
        
        private SetF3ToNewEmpStep_45Params mSetF3ToNewEmpStep_45Params;
        
        private SetTypeCalendarplanParams mSetTypeCalendarplanParams;
        
        private UIAnsatteiarbeidsplanWindow mUIAnsatteiarbeidsplanWindow;
        
        private UILeggtilansatteWindow mUILeggtilansatteWindow;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIGatWindow mUIGatWindow;
        
        private UIArbeidsplanWindow1 mUIArbeidsplanWindow1;
        
        private UIGT4003InformasjonWindow mUIGT4003InformasjonWindow;
        
        private UINyhjelpeplanWindow mUINyhjelpeplanWindow;
        
        private UIArbeidsplanInnstilliWindow mUIArbeidsplanInnstilliWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Add2EmployeesStep_10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Add2EmployeesStep_10Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys = "{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Add4EmployeesStep_29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Add4EmployeesStep_29Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys1 = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcDepartmentEmployees' table
        /// </summary>
        public string UIGcDepartmentEmployeeTableSendKeys2 = "{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddCalendarplanShifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddCalendarplanShiftsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'd1{Tab}' in '[Row]0[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "d1{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddF1ShiftStep_33'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddF1ShiftStep_33Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]2[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit1SendKeys = "f1{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRosterplanShiftsStep_40'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddRosterplanShiftsStep_40Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'a1{Tab}' in '[Row]13[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow13ColumnRosterCelEditSendKeys = "a1{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddRosterplanShiftsStep_42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddRosterplanShiftsStep_42Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + a' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "a";
        
        /// <summary>
        /// Type 'l4{Tab}' in '[Row]0[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "l4{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddShiftsStep_33'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddShiftsStep_33Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'd1{Tab}' in '[Row]3[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEditSendKeys = "d1{Tab}";
        
        /// <summary>
        /// Type 'd2{Tab}' in '[Row]2[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEditSendKeys = "d2{Tab}";
        
        /// <summary>
        /// Type '1dag{Tab}' in '[Row]1[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEditSendKeys = "1dag{Tab}";
        
        /// <summary>
        /// Type 'd{Tab}' in '[Row]0[Column]RosterCell_0' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEditSendKeys = "d{Tab}";
        
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]2[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit1SendKeys = "f1{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddShiftsStep_33_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddShiftsStep_33_1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]0[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit2SendKeys = "f1{Tab}";
        
        /// <summary>
        /// Type 'f1{Tab}' in '[Row]1[Column]RosterCell_6' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit1SendKeys = "f1{Tab}";
        
        /// <summary>
        /// Type 'a3{Tab}' in '[Row]3[Column]RosterCell_9' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEdit1SendKeys = "a3{Tab}";
        
        /// <summary>
        /// Type 'd1{Tab}' in '[Row]3[Column]RosterCell_10' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEdit2SendKeys = "d1{Tab}";
        
        /// <summary>
        /// Type 'd1{Tab}' in '[Row]3[Column]RosterCell_11' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEdit3SendKeys = "d1{Tab}";
        
        /// <summary>
        /// Type 'a2{Tab}' in '[Row]2[Column]RosterCell_9' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit2SendKeys = "a2{Tab}";
        
        /// <summary>
        /// Type 'vakt1{Tab}' in '[Row]1[Column]RosterCell_9' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit2SendKeys = "vakt1{Tab}";
        
        /// <summary>
        /// Type 'a{Tab}' in '[Row]0[Column]RosterCell_9' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit3SendKeys = "a{Tab}";
        
        /// <summary>
        /// Type 'd{Tab}' in '[Row]0[Column]RosterCell_10' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit4SendKeys = "d{Tab}";
        
        /// <summary>
        /// Type '1dag{Tab}' in '[Row]1[Column]RosterCell_10' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit3SendKeys = "1dag{Tab}";
        
        /// <summary>
        /// Type 'd2{Tab}' in '[Row]2[Column]RosterCell_10' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit3SendKeys = "d2{Tab}";
        
        /// <summary>
        /// Type 'na{Tab}' in '[Row]0[Column]RosterCell_13' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit5SendKeys = "na{Tab}";
        
        /// <summary>
        /// Type 'vakt1{Tab}' in '[Row]1[Column]RosterCell_13' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit4SendKeys = "vakt1{Tab}";
        
        /// <summary>
        /// Type 'n{Tab}' in '[Row]2[Column]RosterCell_13' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit4SendKeys = "n{Tab}";
        
        /// <summary>
        /// Type 'n2{Tab}' in '[Row]3[Column]RosterCell_13' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEdit4SendKeys = "n2{Tab}";
        
        /// <summary>
        /// Type 'ah{Tab}' in '[Row]0[Column]RosterCell_20' text box
        /// </summary>
        public string UIRow0ColumnRosterCellEdit6SendKeys = "ah{Tab}";
        
        /// <summary>
        /// Type 'vakt1{Tab}' in '[Row]1[Column]RosterCell_20' text box
        /// </summary>
        public string UIRow1ColumnRosterCellEdit8SendKeys = "vakt1{Tab}";
        
        /// <summary>
        /// Type 'a2{Tab}' in '[Row]2[Column]RosterCell_20' text box
        /// </summary>
        public string UIRow2ColumnRosterCellEdit5SendKeys = "a2{Tab}";
        
        /// <summary>
        /// Type 'a3{Tab}' in '[Row]3[Column]RosterCell_20' text box
        /// </summary>
        public string UIRow3ColumnRosterCellEdit5SendKeys = "a3{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Check2AddedCorretlyToListStep_10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Check2AddedCorretlyToListStep_10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5. Dalene, Dolly' TreeListCell equals '5. Dalene, Dolly'
        /// </summary>
        public string UIItem5DaleneDollyTreeListCellValueAsString = "5. Dalene, Dolly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6. Eriksrød, Erika' TreeListCell equals '6. Eriksrød, Erika'
        /// </summary>
        public string UIItem6EriksrødErikaTreeListCellValueAsString = "6. Eriksrød, Erika";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Check4EmployeesAddedStep_8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Check4EmployeesAddedStep_8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. Andersen, Astrid' TreeListCell equals '1. Andersen, Astrid'
        /// </summary>
        public string UIItem1AndersenAstridTreeListCellValueAsString = "1. Andersen, Astrid";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2. Barske, Brynjulf' TreeListCell equals '2. Barske, Brynjulf'
        /// </summary>
        public string UIItem2BarskeBrynjulfTreeListCellValueAsString = "2. Barske, Brynjulf";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3. Betong, Billy' TreeListCell equals '3. Betong, Billy'
        /// </summary>
        public string UIItem3BetongBillyTreeListCellValueAsString = "3. Betong, Billy";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '4. Bronson, Charlie' TreeListCell equals '4. Bronson, Charlie'
        /// </summary>
        public string UIItem4BronsonCharlieTreeListCellValueAsString = "4. Bronson, Charlie";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Check4EmpsAddedStep_29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Check4EmpsAddedStep_29ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '11. Olsen, Bror' TreeListCell equals '11. Olsen, Bror'
        /// </summary>
        public string UIItem11OlsenBrorTreeListCellValueAsString = "11. Olsen, Bror";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '12. Raser, Roar' TreeListCell equals '12. Raser, Roar'
        /// </summary>
        public string UIItem12RaserRoarTreeListCellValueAsString = "12. Raser, Roar";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '13. Sørensen, Søren' TreeListCell equals '13. Sørensen, Søren'
        /// </summary>
        public string UIItem13SørensenSørenTreeListCellValueAsString = "13. Sørensen, Søren";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '14. Tiger, Tanya' TreeListCell equals '14. Tiger, Tanya'
        /// </summary>
        public string UIItem14TigerTanyaTreeListCellValueAsString = "14. Tiger, Tanya";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAllEmpsIsInList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAllEmpsIsInListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. Andersen, Astrid' TreeListCell equals '1. Abrahamsen, Trond'
        /// </summary>
        public string UIItem1AndersenAstridTreeListCellValueAsString = "1. Abrahamsen, Trond";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2. Barske, Brynjulf' TreeListCell equals '2. Andersen, Anders'
        /// </summary>
        public string UIItem2BarskeBrynjulfTreeListCellValueAsString = "2. Andersen, Anders";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3. Betong, Billy' TreeListCell equals '3. Andersen, Astrid'
        /// </summary>
        public string UIItem3BetongBillyTreeListCellValueAsString = "3. Andersen, Astrid";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '4. Bronson, Charlie' TreeListCell equals '4. Aulie, Tina'
        /// </summary>
        public string UIItem4BronsonCharlieTreeListCellValueAsString = "4. Aulie, Tina";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5. Dalene, Dolly' TreeListCell equals '5. Barske, Brynjulf'
        /// </summary>
        public string UIItem5DaleneDollyTreeListCellValueAsString = "5. Barske, Brynjulf";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6. Eriksrød, Erika' TreeListCell equals '6. Berg, Magnus'
        /// </summary>
        public string UIItem6EriksrødErikaTreeListCellValueAsString = "6. Berg, Magnus";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '7. Ulne, Ulf' TreeListCell equals '7. Betong, Billy'
        /// </summary>
        public string UIItem7UlneUlfTreeListCellValueAsString = "7. Betong, Billy";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8. VAKANT' TreeListCell equals '8. Bronson, Charlie'
        /// </summary>
        public string UIItem8VAKANTTreeListCellValueAsString = "8. Bronson, Charlie";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '9. VAKANT' TreeListCell equals '9. Brøndbo, Bjartmar'
        /// </summary>
        public string UIItem9VAKANTTreeListCellValueAsString = "9. Brøndbo, Bjartmar";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '10. VAKANT' TreeListCell equals '10. Carlsen, Christina'
        /// </summary>
        public string UIItem10VAKANTTreeListCellValueAsString = "10. Carlsen, Christina";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '11. Olsen, Bror' TreeListCell equals '11. Carlsen, Magnus'
        /// </summary>
        public string UIItem11OlsenBrorTreeListCellValueAsString = "11. Carlsen, Magnus";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '12. Raser, Roar' TreeListCell equals '12. Dalene, Dolly'
        /// </summary>
        public string UIItem12RaserRoarTreeListCellValueAsString = "12. Dalene, Dolly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '13. Sørensen, Søren' TreeListCell equals '13. Danielsen, James'
        /// </summary>
        public string UIItem13SørensenSørenTreeListCellValueAsString = "13. Danielsen, James";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '14. Tiger, Tanya' TreeListCell equals '14. Eriksen, Nils'
        /// </summary>
        public string UIItem14TigerTanyaTreeListCellValueAsString = "14. Eriksen, Nils";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '15. Abrahamsen, Trond' TreeListCell equals '15. Eriksrød, Erika'
        /// </summary>
        public string UIItem15AbrahamsenTronTreeListCellValueAsString = "15. Eriksrød, Erika";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '16. Berg, Magnus' TreeListCell equals '16. Franzen, Finbeck'
        /// </summary>
        public string UIItem16BergMagnusTreeListCellValueAsString = "16. Franzen, Finbeck";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '17. Fredheim, Frid' TreeListCell equals '17. Fredheim, Frid'
        /// </summary>
        public string UIItem17FredheimFridTreeListCellValueAsString = "17. Fredheim, Frid";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '18. Hansen, Henriette' TreeListCell equals '18. Hansen, Henriette'
        /// </summary>
        public string UIItem18HansenHenriettTreeListCellValueAsString = "18. Hansen, Henriette";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '19. Haugen, Harry' TreeListCell equals '19. Haugen, Harry'
        /// </summary>
        public string UIItem19HaugenHarryTreeListCellValueAsString = "19. Haugen, Harry";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '20. Jensen, Jostein' TreeListCell equals '20. Jensen, Jostein'
        /// </summary>
        public string UIItem20JensenJosteinTreeListCellValueAsString = "20. Jensen, Jostein";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '21. Karslen, Knut' TreeListCell equals '21. Karslen, Knut'
        /// </summary>
        public string UIItem21KarslenKnutTreeListCellValueAsString = "21. Karslen, Knut";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '22. Knutsen, Kasper' TreeListCell equals '22. Knutsen, Kasper'
        /// </summary>
        public string UIItem22KnutsenKasperTreeListCellValueAsString = "22. Knutsen, Kasper";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '23. Kristoffersen, Kåre' TreeListCell equals '23. Kristoffersen, Kåre'
        /// </summary>
        public string UIItem23KristoffersenKTreeListCellValueAsString = "23. Kristoffersen, Kåre";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '24. Kulde, Kalle' TreeListCell equals '24. Kulde, Kalle'
        /// </summary>
        public string UIItem24KuldeKalleTreeListCellValueAsString = "24. Kulde, Kalle";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '25. Larsen, Laila' TreeListCell equals '25. Larsen, Laila'
        /// </summary>
        public string UIItem25LarsenLailaTreeListCellValueAsString = "25. Larsen, Laila";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '26. Lekre, Laila' TreeListCell equals '26. Lekre, Laila'
        /// </summary>
        public string UIItem26LekreLailaTreeListCellValueAsString = "26. Lekre, Laila";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '27. Moen, Merethe' TreeListCell equals '27. Moen, Merethe'
        /// </summary>
        public string UIItem27MoenMeretheTreeListCellValueAsString = "27. Moen, Merethe";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '28. Nilsson, Nisse' TreeListCell equals '28. Nilsson, Nisse'
        /// </summary>
        public string UIItem28NilssonNisseTreeListCellValueAsString = "28. Nilsson, Nisse";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '29. Nornes, Jens Gustav' TreeListCell equals '29. Nornes, Jens Gustav'
        /// </summary>
        public string UIItem29NornesJensGustTreeListCellValueAsString = "29. Nornes, Jens Gustav";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '30. Olsen, Bror' TreeListCell equals '30. Olsen, Bror'
        /// </summary>
        public string UIItem30OlsenBrorTreeListCellValueAsString = "30. Olsen, Bror";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '31. Olsen, Kjetil' TreeListCell equals '31. Olsen, Kjetil'
        /// </summary>
        public string UIItem31OlsenKjetilTreeListCellValueAsString = "31. Olsen, Kjetil";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '32. Pedersen, Morten' TreeListCell equals '32. Pedersen, Morten'
        /// </summary>
        public string UIItem32PedersenMortenTreeListCellValueAsString = "32. Pedersen, Morten";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '33. Raser, Roar' TreeListCell equals '33. Raser, Roar'
        /// </summary>
        public string UIItem33RaserRoarTreeListCellValueAsString = "33. Raser, Roar";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '34. Streisand, Bjarne' TreeListCell equals '34. Streisand, Bjarne'
        /// </summary>
        public string UIItem34StreisandBjarnTreeListCellValueAsString = "34. Streisand, Bjarne";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '35. Svendsen, Sven' TreeListCell equals '35. Svendsen, Sven'
        /// </summary>
        public string UIItem35SvendsenSvenTreeListCellValueAsString = "35. Svendsen, Sven";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '36. Sørensen, Søren' TreeListCell equals '36. Sørensen, Søren'
        /// </summary>
        public string UIItem36SørensenSørenTreeListCellValueAsString = "36. Sørensen, Søren";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '37. Tiger, Tanya' TreeListCell equals '37. Tiger, Tanya'
        /// </summary>
        public string UIItem37TigerTanyaTreeListCellValueAsString = "37. Tiger, Tanya";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '38. Trosterud, Torstein' TreeListCell equals '38. Trosterud, Torstein'
        /// </summary>
        public string UIItem38TrosterudTorstTreeListCellValueAsString = "38. Trosterud, Torstein";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '39. Trosterud, Turid' TreeListCell equals '39. Trosterud, Turid'
        /// </summary>
        public string UIItem39TrosterudTuridTreeListCellValueAsString = "39. Trosterud, Turid";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '40. Ulne, Ulf' TreeListCell equals '40. Ulne, Ulf'
        /// </summary>
        public string UIItem40UlneUlfTreeListCellValueAsString = "40. Ulne, Ulf";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. 50%' TreeListCell equals '1. 50%'
        /// </summary>
        public string UIItem150TreeListCellValueAsString = "1. 50%";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2. 25%' TreeListCell equals '2. 25%'
        /// </summary>
        public string UIItem225TreeListCellValueAsString = "2. 25%";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '41. Wilson, Peter' TreeListCell equals '41. Wilson, Peter'
        /// </summary>
        public string UIItem41WilsonPeterTreeListCellValueAsString = "41. Wilson, Peter";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '42. Åhlsen, Ole' TreeListCell equals '42. Åhlsen, Ole'
        /// </summary>
        public string UIItem42ÅhlsenOleTreeListCellValueAsString = "42. Åhlsen, Ole";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckBarskeRemoved_Step_11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckBarskeRemoved_Step_11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'NodesCount' property of 'treeListEmployee' TreeList equals '5'
        /// </summary>
        public int UITreeListEmployeeTreeListNodesCount = 5;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckBetongPositionStep_17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckBetongPositionStep_17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'ePositionCategory' LookUpEdit equals 'H - Hjelpepleier'
        /// </summary>
        public string UIEPositionCategoryLookUpEditValueAsString = "H - Hjelpepleier";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'eUnionCode' LookUpEdit equals 'FAG - Fagforbundet'
        /// </summary>
        public string UIEUnionCodeLookUpEditValueAsString = "FAG - Fagforbundet";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'eOvertimeCode' LookUpEdit equals 'V - Vakans'
        /// </summary>
        public string UIEOvertimeCodeLookUpEditValueAsString = "V - Vakans";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpBronsonInactive'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpBronsonInactiveExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Valgt' TreeListCell equals 'True'
        /// </summary>
        public string UIValgtTreeListCellValueAsString = "True";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Valgt' TreeListCell equals 'True'
        /// </summary>
        public string UIValgtTreeListCellValueAsString1 = "True";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeeF3bCalculationsStep35'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeeF3bCalculationsStep35ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell13Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell14Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell15Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell16Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell17Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell18Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell19Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell20Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell21Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell22Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell23Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell24Text = "A";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeesF3bCalculationsStep36'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeesF3bCalculationsStep36ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell13Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell14Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell15Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'G'
        /// </summary>
        public string UIACell16Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell17Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'G'
        /// </summary>
        public string UIACell18Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'G'
        /// </summary>
        public string UIACell19Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'G'
        /// </summary>
        public string UIACell20Text = "G";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell21Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell22Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell23Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell24Text = "A";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpPositionsInListAfterDeleteRaserPositionLine'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpPositionsInListAfterDeleteRaserPositionLineExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '12. Raser, Roar' TreeListCell equals '12. Sørensen, Søren'
        /// </summary>
        public string UIItem12RaserRoarTreeListCellValueAsString = "12. Sørensen, Søren";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '13. Sørensen, Søren' TreeListCell equals '13. Tiger, Tanya'
        /// </summary>
        public string UIItem13SørensenSørenTreeListCellValueAsString = "13. Tiger, Tanya";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpPositionsInListStep_29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpPositionsInListStep_29ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. Andersen, Astrid' TreeListCell equals '1. VAKANT'
        /// </summary>
        public string UIItem1AndersenAstridTreeListCellValueAsString = "1. VAKANT";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2. Barske, Brynjulf' TreeListCell equals '2. VAKANT'
        /// </summary>
        public string UIItem2BarskeBrynjulfTreeListCellValueAsString = "2. VAKANT";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3. Betong, Billy' TreeListCell equals '3. VAKANT'
        /// </summary>
        public string UIItem3BetongBillyTreeListCellValueAsString = "3. VAKANT";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '10. VAKANT' TreeListCell equals '10. Ulne, Ulf'
        /// </summary>
        public string UIItem10VAKANTTreeListCellValueAsString = "10. Ulne, Ulf";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. 0%' TreeListCell equals '1. 50%'
        /// </summary>
        public string UIItem10TreeListCellValueAsString = "1. 50%";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2. 25%' TreeListCell equals '2. 25%'
        /// </summary>
        public string UIItem225TreeListCellValueAsString = "2. 25%";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsAddedCorretlyToPlantStep_14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsAddedCorretlyToPlantStep_14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersen, Astrid' cell equals 'Andersen, Astrid'
        /// </summary>
        public string UIAndersenAstridCellText = "Andersen, Astrid";
        
        /// <summary>
        /// Verify that the 'Text' property of 'VAKANT' cell equals 'VAKANT'
        /// </summary>
        public string UIVAKANTCellText = "VAKANT";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Bronson, Charlie' cell equals 'Bronson, Charlie'
        /// </summary>
        public string UIBronsonCharlieCellText = "Bronson, Charlie";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Dalene, Dolly' cell equals 'Dalene, Dolly'
        /// </summary>
        public string UIDaleneDollyCellText = "Dalene, Dolly";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Eriksrød, Erika' cell equals 'Eriksrød, Erika'
        /// </summary>
        public string UIEriksrødErikaCellText = "Eriksrød, Erika";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Betong, Billy' cell equals 'Betong, Billy'
        /// </summary>
        public string UIBetongBillyCellText = "Betong, Billy";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpWindow_step_5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpWindow_step_5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'NodesCount' property of 'treeListEmployee' TreeList equals '0'
        /// </summary>
        public int UITreeListEmployeeTreeListNodesCount = 0;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Ansatte...' button equals 'True'
        /// </summary>
        public bool UIAnsatteButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Vakant' button equals 'True'
        /// </summary>
        public bool UIVakantButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Slett' button equals 'False'
        /// </summary>
        public bool UISlettButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEriksroedPositionStep_17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEriksroedPositionStep_17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'ePositionCategory' LookUpEdit equals 'H - Hjelpepleier'
        /// </summary>
        public string UIEPositionCategoryLookUpEditValueAsString = "H - Hjelpepleier";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'eOvertimeCode' LookUpEdit equals 'V - Vakans'
        /// </summary>
        public string UIEOvertimeCodeLookUpEditValueAsString = "V - Vakans";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckF3Calculations'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckF3CalculationsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2CellText = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell1Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell2Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell3Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 1' cell equals '0 av 1'
        /// </summary>
        public string UIItem0av1CellText = "0 av 1";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell4Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'ClassName' property of '0 av 2' cell equals 'GridControlCell'
        /// </summary>
        public string UIItem0av2Cell5ClassName = "GridControlCell";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell6Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell7Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell8Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell9Text = "0 av 2";
        
        /// <summary>
        /// Verify that the 'Text' property of '0 av 2' cell equals '0 av 2'
        /// </summary>
        public string UIItem0av2Cell10Text = "0 av 2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckMovedEmployeesStep_14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckMovedEmployeesStep_14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2. Barske, Brynjulf' TreeListCell equals '2. VAKANT'
        /// </summary>
        public string UIItem2BarskeBrynjulfTreeListCellValueAsString = "2. VAKANT";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6. Eriksrød, Erika' TreeListCell equals '6. Betong, Billy'
        /// </summary>
        public string UIItem6EriksrødErikaTreeListCellValueAsString = "6. Betong, Billy";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOnlyHansenInList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOnlyHansenInListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Hansen, Henriette' cell equals 'Hansen, Henriette'
        /// </summary>
        public string UIHansenHenrietteCellValueAsString = "Hansen, Henriette";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5010 - Arbeidsplan og hjelpeplan' cell equals '5010 - Arbeidsplan og hjelpeplan'
        /// </summary>
        public string UIItem5010ArbeidsplanoCellValueAsString = "5010 - Arbeidsplan og hjelpeplan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlanHasCorrectEmployees_Step_12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckPlanHasCorrectEmployees_Step_12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 3 seconds for user delay between actions; Verify that the 'Text' property of 'Andersen, Astrid' cell equals 'Andersen, Astrid'
        /// </summary>
        public string UIAndersenAstridCellText = "Andersen, Astrid";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Betong, Billy' cell equals 'Betong, Billy'
        /// </summary>
        public string UIBetongBillyCellText = "Betong, Billy";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Bronson, Charlie' cell equals 'Bronson, Charlie'
        /// </summary>
        public string UIBronsonCharlieCellText = "Bronson, Charlie";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Dalene, Dolly' cell equals 'Dalene, Dolly'
        /// </summary>
        public string UIDaleneDollyCellText = "Dalene, Dolly";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Eriksrød, Erika' cell equals 'Eriksrød, Erika'
        /// </summary>
        public string UIEriksrødErikaCellText = "Eriksrød, Erika";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSHCalculations'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSHCalculationsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
        /// </summary>
        public string UIItem5av6Cell11Text = "5 av 6";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
        /// </summary>
        public string UIItem5av6Cell12Text = "5 av 6";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
        /// </summary>
        public string UIItem5av6Cell13Text = "5 av 6";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
        /// </summary>
        public string UIItem5av6Cell14Text = "5 av 6";
        
        /// <summary>
        /// Verify that the 'Text' property of '2 av 6' cell equals '2 av 6'
        /// </summary>
        public string UIItem2av6Cell1Text = "2 av 6";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
        /// </summary>
        public string UIItem5av6Cell15Text = "5 av 6";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
        /// </summary>
        public string UIItem5av6Cell16Text = "5 av 6";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
        /// </summary>
        public string UIItem5av6Cell17Text = "5 av 6";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
        /// </summary>
        public string UIItem5av6Cell18Text = "5 av 6";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
        /// </summary>
        public string UIItem5av6Cell19Text = "5 av 6";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
        /// </summary>
        public string UIItem5av6Cell20Text = "5 av 6";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 av 6' cell equals '5 av 6'
        /// </summary>
        public string UIItem5av6Cell21Text = "5 av 6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckUtneAddedStep_20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckUtneAddedStep_20ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '7. Ulne, Ulf' TreeListCell equals '7. Ulne, Ulf'
        /// </summary>
        public string UIItem7UlneUlfTreeListCellValueAsString = "7. Ulne, Ulf";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. 50%' TreeListCell equals '1. 50%'
        /// </summary>
        public string UIItem150TreeListCellValueAsString = "1. 50%";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckUtneAddedStep_23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckUtneAddedStep_23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '7. Ulne, Ulf' TreeListCell equals '7. Ulne, Ulf'
        /// </summary>
        public string UIItem7UlneUlfTreeListCellValueAsString = "7. Ulne, Ulf";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. 50%' TreeListCell equals '1. 50%'
        /// </summary>
        public string UIItem150TreeListCellValueAsString = "1. 50%";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2. 25%' TreeListCell equals '2. 25%'
        /// </summary>
        public string UIItem225TreeListCellValueAsString = "2. 25%";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'TURNUS - Turnus 35,5t/uke' TreeListCell equals 'TURNUS - Turnus 35,5t/uke'
        /// </summary>
        public string UITURNUSTurnus355tukeTreeListCellValueAsString = "TURNUS - Turnus 35,5t/uke";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'DAG - Dagtid' TreeListCell equals 'DAG - Dagtid'
        /// </summary>
        public string UIDAGDagtidTreeListCellValueAsString = "DAG - Dagtid";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckUtneIsInListStep_22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckUtneIsInListStep_22ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ulne, Ulf' cell equals 'Ulne, Ulf'
        /// </summary>
        public string UIUlneUlfCell2ValueAsString = "Ulne, Ulf";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'A - Assistent' cell equals 'A - Assistent'
        /// </summary>
        public string UIAAssistentCellValueAsString = "A - Assistent";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Ulne, Ulf' cell equals 'Ulne, Ulf'
        /// </summary>
        public string UIUlneUlfCell3ValueAsString = "Ulne, Ulf";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'D - Dagtidspersonell' cell equals 'D - Dagtidspersonell'
        /// </summary>
        public string UIDDagtidspersonellCellValueAsString = "D - Dagtidspersonell";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '50,00' cell equals '50'
        /// </summary>
        public string UIItem5000CellValueAsString = "50";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '25,00' cell equals '25'
        /// </summary>
        public string UIItem2500CellValueAsString = "25";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1' cell equals '1'
        /// </summary>
        public string UIItem1CellValueAsString = "1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2' cell equals '2'
        /// </summary>
        public string UIItem2CellValueAsString = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckVakant4010AddedStep_25'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckVakant4010AddedStep_25ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '9. VAKANT' TreeListCell equals '9. VAKANT'
        /// </summary>
        public string UIItem9VAKANTTreeListCellValueAsString = "9. VAKANT";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '4110 - Legeavdeling 1' TreeListCell equals '4010 - Legeavdeling 1'
        /// </summary>
        public string UIItem4110LegeavdelingTreeListCellValueAsString = "4010 - Legeavdeling 1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckVakant5020AddedStep_24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckVakant5020AddedStep_24ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '8. VAKANT' TreeListCell equals '8. VAKANT'
        /// </summary>
        public string UIItem8VAKANTTreeListCellValueAsString = "8. VAKANT";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5020 - Kalenderplan' TreeListCell equals '5020 - Kalenderplan'
        /// </summary>
        public string UIItem5020KalenderplanTreeListCellValueAsString = "5020 - Kalenderplan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckVakant5110AddedStep_26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckVakant5110AddedStep_26ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '10. VAKANT' TreeListCell equals '10. VAKANT'
        /// </summary>
        public string UIItem10VAKANTTreeListCellValueAsString = "10. VAKANT";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5010 - Arbeidsplan og hjelpeplan' TreeListCell equals '5110 - Diverse'
        /// </summary>
        public string UIItem5010ArbeidsplanoTreeListCellValueAsString = "5110 - Diverse";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckVakantAddedStep_13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckVakantAddedStep_13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '6. Eriksrød, Erika' TreeListCell equals '6. VAKANT'
        /// </summary>
        public string UIItem6EriksrødErikaTreeListCellValueAsString = "6. VAKANT";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckVakantsMovedToTop'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckVakantsMovedToTopExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '1. Andersen, Astrid' TreeListCell equals '1. VAKANT'
        /// </summary>
        public string UIItem1AndersenAstridTreeListCellValueAsString = "1. VAKANT";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '2. Barske, Brynjulf' TreeListCell equals '2. VAKANT'
        /// </summary>
        public string UIItem2BarskeBrynjulfTreeListCellValueAsString = "2. VAKANT";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of '3. Betong, Billy' TreeListCell equals '3. VAKANT'
        /// </summary>
        public string UIItem3BetongBillyTreeListCellValueAsString = "3. VAKANT";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWeekendpattern_18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckWeekendpattern_18ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of '5. Dalene, Dolly' TreeListCell equals '5. Eriksrød, Erika'
        /// </summary>
        public string UIItem5DaleneDollyTreeListCellValueAsString = "5. Eriksrød, Erika";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'Fast: 2' TreeListCell equals 'Fast: 2'
        /// </summary>
        public string UIFast2TreeListCellValueAsString = "Fast: 2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeleteShifts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DeleteShiftsParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Delete}' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys = "{Delete}";
        
        /// <summary>
        /// Type '{Delete}' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys1 = "{Delete}";
        
        /// <summary>
        /// Type '{Delete}' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys2 = "{Delete}";
        
        /// <summary>
        /// Type '{Delete}' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys3 = "{Delete}";
        
        /// <summary>
        /// Type '{Delete}' in 'gcRosterPlan' table
        /// </summary>
        public string UIGcRosterPlanTableSendKeys4 = "{Delete}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditEmpsPositionsStep_17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditEmpsPositionsStep_17Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.PositionCategoryViewModel' in 'ePositionCategory' LookUpEdit
        /// </summary>
        public string UIEPositionCategoryLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.PositionCategoryViewMod" +
            "el";
        
        /// <summary>
        /// Type 'H - Hjelpepleier' in 'ePositionCategory' LookUpEdit
        /// </summary>
        public string UIEPositionCategoryLookUpEditValueAsString = "H - Hjelpepleier";
        
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel' in 'eOvertimeCode' LookUpEdit
        /// </summary>
        public string UIEOvertimeCodeLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.OvertimeCodeViewModel";
        
        /// <summary>
        /// Type 'V - Vakans' in 'eOvertimeCode' LookUpEdit
        /// </summary>
        public string UIEOvertimeCodeLookUpEditValueAsString = "V - Vakans";
        
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.UnionMembershipViewModel' in 'eUnionCode' LookUpEdit
        /// </summary>
        public string UIEUnionCodeLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.UnionMembershipViewMode" +
            "l";
        
        /// <summary>
        /// Type 'FAG - Fagforbundet' in 'eUnionCode' LookUpEdit
        /// </summary>
        public string UIEUnionCodeLookUpEditValueAsString = "FAG - Fagforbundet";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditPositionsAndMoveToTopStep_27'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditPositionsAndMoveToTopStep_27Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.RuleSetViewModel' in 'eRuleSet' LookUpEdit
        /// </summary>
        public string UIERuleSetLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.RuleSetViewModel";
        
        /// <summary>
        /// Type 'TURNUS - Turnus 35,5t/uke' in 'eRuleSet' LookUpEdit
        /// </summary>
        public string UIERuleSetLookUpEditValueAsString = "TURNUS - Turnus 35,5t/uke";
        
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.PositionCategoryViewModel' in 'ePositionCategory' LookUpEdit
        /// </summary>
        public string UIEPositionCategoryLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.PositionCategoryViewMod" +
            "el";
        
        /// <summary>
        /// Type 'A - Assistent' in 'ePositionCategory' LookUpEdit
        /// </summary>
        public string UIEPositionCategoryLookUpEditValueAsString = "A - Assistent";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditVakantPositionStep_16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditVakantPositionStep_16Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.PositionCategoryViewModel' in 'ePositionCategory' LookUpEdit
        /// </summary>
        public string UIEPositionCategoryLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.PositionCategoryViewMod" +
            "el";
        
        /// <summary>
        /// Type 'S - Sykepleier' in 'ePositionCategory' LookUpEdit
        /// </summary>
        public string UIEPositionCategoryLookUpEditValueAsString = "S - Sykepleier";
        
        /// <summary>
        /// Type 'System.Double' in 'ePositionPercent' text box
        /// </summary>
        public string UIEPositionPercentEditValueTypeName = "System.Double";
        
        /// <summary>
        /// Type '50' in 'ePositionPercent' text box
        /// </summary>
        public string UIEPositionPercentEditValueAsString = "50";
        
        /// <summary>
        /// Type '{Tab}' in 'ePositionPercent' text box
        /// </summary>
        public string UIEPositionPercentEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.RuleSetViewModel' in 'eRuleSet' LookUpEdit
        /// </summary>
        public string UIERuleSetLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.RuleSetViewModel";
        
        /// <summary>
        /// Type 'TURNUS - Turnus 35,5t/uke' in 'eRuleSet' LookUpEdit
        /// </summary>
        public string UIERuleSetLookUpEditValueAsString = "TURNUS - Turnus 35,5t/uke";
        
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.GroupViewModel' in 'eGroup' LookUpEdit
        /// </summary>
        public string UIEGroupLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.GroupViewModel";
        
        /// <summary>
        /// Type 'GR1 - Gruppe 1' in 'eGroup' LookUpEdit
        /// </summary>
        public string UIEGroupLookUpEditValueAsString = "GR1 - Gruppe 1";
        
        /// <summary>
        /// Type '16.01.2023{Tab}' in 'eRevolveFrom' DateTimeEdit
        /// </summary>
        public string UIERevolveFromDateTimeEditSendKeys = "16.01.2023{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditVakantStep_15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditVakantStep_15Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'VAKANT, Vilde' in 'eCustomName' text box
        /// </summary>
        public string UIECustomNameEditValueAsString = "VAKANT, Vilde";
        
        /// <summary>
        /// Type '{Tab}' in 'eCustomName' text box
        /// </summary>
        public string UIECustomNameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.WeekdayViewModel' in 'eWeekSeparator' combo box
        /// </summary>
        public string UIEWeekSeparatorComboBoxValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.WeekdayViewModel";
        
        /// <summary>
        /// Select 'Onsdag [SelectionStart]0' in 'eWeekSeparator' combo box
        /// </summary>
        public string UIEWeekSeparatorComboBoxValueAsString = "Onsdag [SelectionStart]0";
        
        /// <summary>
        /// Type '{Tab}' in 'ComboBoxPopupListBox' list box
        /// </summary>
        public string UIComboBoxPopupListBoxListSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '07:00:00 [SelectionStart]0[SelectionLength]5' in 'eDaySeparator' DateTimeEdit
        /// </summary>
        public string UIEDaySeparatorDateTimeEditValueAsString = "07:00:00 [SelectionStart]0[SelectionLength]5";
        
        /// <summary>
        /// Type 'Skal ansettes ny sykepleier{Tab}' in 'eNotes' text box
        /// </summary>
        public string UIENotesEditSendKeys = "Skal ansettes ny sykepleier{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSelectionOptionsSelectAllPlans'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class OpenSelectionOptionsSelectAllPlansParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + a' in 'gcAvailablePlans' table
        /// </summary>
        public string UIGcAvailablePlansTableSendKeys = "a";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectAllEmpsStep_45'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectAllEmpsStep_45Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + a' in 'gcPlanEmployees' table
        /// </summary>
        public string UIGcPlanEmployeesTableSendKeys = "a";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectIncludeExistingEmployees'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectIncludeExistingEmployeesParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'ceDoIncludeExistingEmployees' check box
        /// </summary>
        public bool UICeDoIncludeExistingECheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetBronsonInactive'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetBronsonInactiveParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'eIsInactive' check box
        /// </summary>
        public bool UIEIsInactiveCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetEmployeeF3Calculations'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetEmployeeF3CalculationsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + a' in 'gsLayoutControlMain' custom control
        /// </summary>
        public string UIGsLayoutControlMainCustomSendKeys = "a";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetEmployeesNewF3Calculations'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetEmployeesNewF3CalculationsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionViewModel' in 'lueF3CalculationOption' LookUpEdit
        /// </summary>
        public string UILueF3CalculationOptiLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionView" +
            "Model";
        
        /// <summary>
        /// Type 'Gjennomsnitt' in 'lueF3CalculationOption' LookUpEdit
        /// </summary>
        public string UILueF3CalculationOptiLookUpEditValueAsString = "Gjennomsnitt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetF3ToNewEmpStep_45'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetF3ToNewEmpStep_45Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionViewModel' in 'lueF3CalculationOption' LookUpEdit
        /// </summary>
        public string UILueF3CalculationOptiLookUpEditValueTypeName = "Gatsoft.Gat.RosterPlan.EmployeeManager.UI.ViewModels.Data.F3CalculationOptionView" +
            "Model";
        
        /// <summary>
        /// Type 'Annenhver' in 'lueF3CalculationOption' LookUpEdit
        /// </summary>
        public string UILueF3CalculationOptiLookUpEditValueAsString = "Annenhver";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetTypeCalendarplan'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetTypeCalendarplanParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.Configuration.RosterplanConfigurationController+RosterplanTypeDefinition' in 'leRosterplanType' LookUpEdit
        /// </summary>
        public string UILeRosterplanTypeLookUpEditValueTypeName = "Gatsoft.Gat.BusinessLogic.Planning.RosterPlanning.Configuration.RosterplanConfigu" +
            "rationController+RosterplanTypeDefinition";
        
        /// <summary>
        /// Type 'Kalenderplan' in 'leRosterplanType' LookUpEdit
        /// </summary>
        public string UILeRosterplanTypeLookUpEditValueAsString = "Kalenderplan";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsatteiarbeidsplanWindow : DXWindow
    {
        
        public UIAnsatteiarbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte i arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlOuterClient UIPanelControlOuterClient
        {
            get
            {
                if ((this.mUIPanelControlOuterClient == null))
                {
                    this.mUIPanelControlOuterClient = new UIPanelControlOuterClient(this);
                }
                return this.mUIPanelControlOuterClient;
            }
        }
        
        public UIPanelControlOuterClient1 UIPanelControlOuterClient1
        {
            get
            {
                if ((this.mUIPanelControlOuterClient1 == null))
                {
                    this.mUIPanelControlOuterClient1 = new UIPanelControlOuterClient1(this);
                }
                return this.mUIPanelControlOuterClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlOuterClient mUIPanelControlOuterClient;
        
        private UIPanelControlOuterClient1 mUIPanelControlOuterClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlOuterClient : DXTestControl
    {
        
        public UIPanelControlOuterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        
        public UIPanelControlRightClient UIPanelControlRightClient
        {
            get
            {
                if ((this.mUIPanelControlRightClient == null))
                {
                    this.mUIPanelControlRightClient = new UIPanelControlRightClient(this);
                }
                return this.mUIPanelControlRightClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient mUIPanelControlLeftClient;
        
        private UIPanelControlRightClient mUIPanelControlRightClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlLeftClient : DXTestControl
    {
        
        public UIPanelControlLeftClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITreeListEmployeeTreeList UITreeListEmployeeTreeList
        {
            get
            {
                if ((this.mUITreeListEmployeeTreeList == null))
                {
                    this.mUITreeListEmployeeTreeList = new UITreeListEmployeeTreeList(this);
                }
                return this.mUITreeListEmployeeTreeList;
            }
        }
        
        public DXButton UIAnsatteButton
        {
            get
            {
                if ((this.mUIAnsatteButton == null))
                {
                    this.mUIAnsatteButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAnsatteButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonAdd";
                    this.mUIAnsatteButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
                    this.mUIAnsatteButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIAnsatteButton;
            }
        }
        
        public UIVakantButton UIVakantButton
        {
            get
            {
                if ((this.mUIVakantButton == null))
                {
                    this.mUIVakantButton = new UIVakantButton(this);
                }
                return this.mUIVakantButton;
            }
        }
        
        public DXButton UISlettButton
        {
            get
            {
                if ((this.mUISlettButton == null))
                {
                    this.mUISlettButton = new DXButton(this);
                    #region Search Criteria
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonRemove";
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUISlettButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUISlettButton;
            }
        }
        
        public UIFlyttoppButton UIFlyttoppButton
        {
            get
            {
                if ((this.mUIFlyttoppButton == null))
                {
                    this.mUIFlyttoppButton = new UIFlyttoppButton(this);
                }
                return this.mUIFlyttoppButton;
            }
        }
        
        public DXButton UIFlyttnedButton
        {
            get
            {
                if ((this.mUIFlyttnedButton == null))
                {
                    this.mUIFlyttnedButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIFlyttnedButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonMoveDownwards";
                    this.mUIFlyttnedButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
                    this.mUIFlyttnedButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIFlyttnedButton;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListEmployeeTreeList mUITreeListEmployeeTreeList;
        
        private DXButton mUIAnsatteButton;
        
        private UIVakantButton mUIVakantButton;
        
        private DXButton mUISlettButton;
        
        private UIFlyttoppButton mUIFlyttoppButton;
        
        private DXButton mUIFlyttnedButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListEmployeeTreeList : DXTreeList
    {
        
        public UITreeListEmployeeTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListEmployee";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode1TreeListNode UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public UINode2TreeListNode UINode2TreeListNode
        {
            get
            {
                if ((this.mUINode2TreeListNode == null))
                {
                    this.mUINode2TreeListNode = new UINode2TreeListNode(this);
                }
                return this.mUINode2TreeListNode;
            }
        }
        
        public UINode3TreeListNode UINode3TreeListNode
        {
            get
            {
                if ((this.mUINode3TreeListNode == null))
                {
                    this.mUINode3TreeListNode = new UINode3TreeListNode(this);
                }
                return this.mUINode3TreeListNode;
            }
        }
        
        public UINode4TreeListNode UINode4TreeListNode
        {
            get
            {
                if ((this.mUINode4TreeListNode == null))
                {
                    this.mUINode4TreeListNode = new UINode4TreeListNode(this);
                }
                return this.mUINode4TreeListNode;
            }
        }
        
        public UINode5TreeListNode UINode5TreeListNode
        {
            get
            {
                if ((this.mUINode5TreeListNode == null))
                {
                    this.mUINode5TreeListNode = new UINode5TreeListNode(this);
                }
                return this.mUINode5TreeListNode;
            }
        }
        
        public UINode6TreeListNode UINode6TreeListNode
        {
            get
            {
                if ((this.mUINode6TreeListNode == null))
                {
                    this.mUINode6TreeListNode = new UINode6TreeListNode(this);
                }
                return this.mUINode6TreeListNode;
            }
        }
        
        public UINode7TreeListNode UINode7TreeListNode
        {
            get
            {
                if ((this.mUINode7TreeListNode == null))
                {
                    this.mUINode7TreeListNode = new UINode7TreeListNode(this);
                }
                return this.mUINode7TreeListNode;
            }
        }
        
        public UINode8TreeListNode UINode8TreeListNode
        {
            get
            {
                if ((this.mUINode8TreeListNode == null))
                {
                    this.mUINode8TreeListNode = new UINode8TreeListNode(this);
                }
                return this.mUINode8TreeListNode;
            }
        }
        
        public UINode9TreeListNode UINode9TreeListNode
        {
            get
            {
                if ((this.mUINode9TreeListNode == null))
                {
                    this.mUINode9TreeListNode = new UINode9TreeListNode(this);
                }
                return this.mUINode9TreeListNode;
            }
        }
        
        public UINode10TreeListNode UINode10TreeListNode
        {
            get
            {
                if ((this.mUINode10TreeListNode == null))
                {
                    this.mUINode10TreeListNode = new UINode10TreeListNode(this);
                }
                return this.mUINode10TreeListNode;
            }
        }
        
        public UINode11TreeListNode UINode11TreeListNode
        {
            get
            {
                if ((this.mUINode11TreeListNode == null))
                {
                    this.mUINode11TreeListNode = new UINode11TreeListNode(this);
                }
                return this.mUINode11TreeListNode;
            }
        }
        
        public UINode12TreeListNode UINode12TreeListNode
        {
            get
            {
                if ((this.mUINode12TreeListNode == null))
                {
                    this.mUINode12TreeListNode = new UINode12TreeListNode(this);
                }
                return this.mUINode12TreeListNode;
            }
        }
        
        public UINode13TreeListNode UINode13TreeListNode
        {
            get
            {
                if ((this.mUINode13TreeListNode == null))
                {
                    this.mUINode13TreeListNode = new UINode13TreeListNode(this);
                }
                return this.mUINode13TreeListNode;
            }
        }
        
        public UINode14TreeListNode UINode14TreeListNode
        {
            get
            {
                if ((this.mUINode14TreeListNode == null))
                {
                    this.mUINode14TreeListNode = new UINode14TreeListNode(this);
                }
                return this.mUINode14TreeListNode;
            }
        }
        
        public UINode15TreeListNode UINode15TreeListNode
        {
            get
            {
                if ((this.mUINode15TreeListNode == null))
                {
                    this.mUINode15TreeListNode = new UINode15TreeListNode(this);
                }
                return this.mUINode15TreeListNode;
            }
        }
        
        public UINode16TreeListNode UINode16TreeListNode
        {
            get
            {
                if ((this.mUINode16TreeListNode == null))
                {
                    this.mUINode16TreeListNode = new UINode16TreeListNode(this);
                }
                return this.mUINode16TreeListNode;
            }
        }
        
        public UINode17TreeListNode UINode17TreeListNode
        {
            get
            {
                if ((this.mUINode17TreeListNode == null))
                {
                    this.mUINode17TreeListNode = new UINode17TreeListNode(this);
                }
                return this.mUINode17TreeListNode;
            }
        }
        
        public UINode18TreeListNode UINode18TreeListNode
        {
            get
            {
                if ((this.mUINode18TreeListNode == null))
                {
                    this.mUINode18TreeListNode = new UINode18TreeListNode(this);
                }
                return this.mUINode18TreeListNode;
            }
        }
        
        public UINode19TreeListNode UINode19TreeListNode
        {
            get
            {
                if ((this.mUINode19TreeListNode == null))
                {
                    this.mUINode19TreeListNode = new UINode19TreeListNode(this);
                }
                return this.mUINode19TreeListNode;
            }
        }
        
        public UINode20TreeListNode UINode20TreeListNode
        {
            get
            {
                if ((this.mUINode20TreeListNode == null))
                {
                    this.mUINode20TreeListNode = new UINode20TreeListNode(this);
                }
                return this.mUINode20TreeListNode;
            }
        }
        
        public UINode21TreeListNode UINode21TreeListNode
        {
            get
            {
                if ((this.mUINode21TreeListNode == null))
                {
                    this.mUINode21TreeListNode = new UINode21TreeListNode(this);
                }
                return this.mUINode21TreeListNode;
            }
        }
        
        public UINode22TreeListNode UINode22TreeListNode
        {
            get
            {
                if ((this.mUINode22TreeListNode == null))
                {
                    this.mUINode22TreeListNode = new UINode22TreeListNode(this);
                }
                return this.mUINode22TreeListNode;
            }
        }
        
        public UINode23TreeListNode UINode23TreeListNode
        {
            get
            {
                if ((this.mUINode23TreeListNode == null))
                {
                    this.mUINode23TreeListNode = new UINode23TreeListNode(this);
                }
                return this.mUINode23TreeListNode;
            }
        }
        
        public UINode24TreeListNode UINode24TreeListNode
        {
            get
            {
                if ((this.mUINode24TreeListNode == null))
                {
                    this.mUINode24TreeListNode = new UINode24TreeListNode(this);
                }
                return this.mUINode24TreeListNode;
            }
        }
        
        public UINode25TreeListNode UINode25TreeListNode
        {
            get
            {
                if ((this.mUINode25TreeListNode == null))
                {
                    this.mUINode25TreeListNode = new UINode25TreeListNode(this);
                }
                return this.mUINode25TreeListNode;
            }
        }
        
        public UINode26TreeListNode UINode26TreeListNode
        {
            get
            {
                if ((this.mUINode26TreeListNode == null))
                {
                    this.mUINode26TreeListNode = new UINode26TreeListNode(this);
                }
                return this.mUINode26TreeListNode;
            }
        }
        
        public UINode27TreeListNode UINode27TreeListNode
        {
            get
            {
                if ((this.mUINode27TreeListNode == null))
                {
                    this.mUINode27TreeListNode = new UINode27TreeListNode(this);
                }
                return this.mUINode27TreeListNode;
            }
        }
        
        public UINode28TreeListNode UINode28TreeListNode
        {
            get
            {
                if ((this.mUINode28TreeListNode == null))
                {
                    this.mUINode28TreeListNode = new UINode28TreeListNode(this);
                }
                return this.mUINode28TreeListNode;
            }
        }
        
        public UINode29TreeListNode UINode29TreeListNode
        {
            get
            {
                if ((this.mUINode29TreeListNode == null))
                {
                    this.mUINode29TreeListNode = new UINode29TreeListNode(this);
                }
                return this.mUINode29TreeListNode;
            }
        }
        
        public UINode30TreeListNode UINode30TreeListNode
        {
            get
            {
                if ((this.mUINode30TreeListNode == null))
                {
                    this.mUINode30TreeListNode = new UINode30TreeListNode(this);
                }
                return this.mUINode30TreeListNode;
            }
        }
        
        public UINode31TreeListNode UINode31TreeListNode
        {
            get
            {
                if ((this.mUINode31TreeListNode == null))
                {
                    this.mUINode31TreeListNode = new UINode31TreeListNode(this);
                }
                return this.mUINode31TreeListNode;
            }
        }
        
        public UINode32TreeListNode UINode32TreeListNode
        {
            get
            {
                if ((this.mUINode32TreeListNode == null))
                {
                    this.mUINode32TreeListNode = new UINode32TreeListNode(this);
                }
                return this.mUINode32TreeListNode;
            }
        }
        
        public UINode33TreeListNode UINode33TreeListNode
        {
            get
            {
                if ((this.mUINode33TreeListNode == null))
                {
                    this.mUINode33TreeListNode = new UINode33TreeListNode(this);
                }
                return this.mUINode33TreeListNode;
            }
        }
        
        public UINode34TreeListNode UINode34TreeListNode
        {
            get
            {
                if ((this.mUINode34TreeListNode == null))
                {
                    this.mUINode34TreeListNode = new UINode34TreeListNode(this);
                }
                return this.mUINode34TreeListNode;
            }
        }
        
        public UINode35TreeListNode UINode35TreeListNode
        {
            get
            {
                if ((this.mUINode35TreeListNode == null))
                {
                    this.mUINode35TreeListNode = new UINode35TreeListNode(this);
                }
                return this.mUINode35TreeListNode;
            }
        }
        
        public UINode36TreeListNode UINode36TreeListNode
        {
            get
            {
                if ((this.mUINode36TreeListNode == null))
                {
                    this.mUINode36TreeListNode = new UINode36TreeListNode(this);
                }
                return this.mUINode36TreeListNode;
            }
        }
        
        public UINode37TreeListNode UINode37TreeListNode
        {
            get
            {
                if ((this.mUINode37TreeListNode == null))
                {
                    this.mUINode37TreeListNode = new UINode37TreeListNode(this);
                }
                return this.mUINode37TreeListNode;
            }
        }
        
        public UINode38TreeListNode UINode38TreeListNode
        {
            get
            {
                if ((this.mUINode38TreeListNode == null))
                {
                    this.mUINode38TreeListNode = new UINode38TreeListNode(this);
                }
                return this.mUINode38TreeListNode;
            }
        }
        
        public UINode39TreeListNode UINode39TreeListNode
        {
            get
            {
                if ((this.mUINode39TreeListNode == null))
                {
                    this.mUINode39TreeListNode = new UINode39TreeListNode(this);
                }
                return this.mUINode39TreeListNode;
            }
        }
        
        public UINode40TreeListNode UINode40TreeListNode
        {
            get
            {
                if ((this.mUINode40TreeListNode == null))
                {
                    this.mUINode40TreeListNode = new UINode40TreeListNode(this);
                }
                return this.mUINode40TreeListNode;
            }
        }
        
        public UINode41TreeListNode UINode41TreeListNode
        {
            get
            {
                if ((this.mUINode41TreeListNode == null))
                {
                    this.mUINode41TreeListNode = new UINode41TreeListNode(this);
                }
                return this.mUINode41TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode mUINode0TreeListNode;
        
        private UINode1TreeListNode mUINode1TreeListNode;
        
        private UINode2TreeListNode mUINode2TreeListNode;
        
        private UINode3TreeListNode mUINode3TreeListNode;
        
        private UINode4TreeListNode mUINode4TreeListNode;
        
        private UINode5TreeListNode mUINode5TreeListNode;
        
        private UINode6TreeListNode mUINode6TreeListNode;
        
        private UINode7TreeListNode mUINode7TreeListNode;
        
        private UINode8TreeListNode mUINode8TreeListNode;
        
        private UINode9TreeListNode mUINode9TreeListNode;
        
        private UINode10TreeListNode mUINode10TreeListNode;
        
        private UINode11TreeListNode mUINode11TreeListNode;
        
        private UINode12TreeListNode mUINode12TreeListNode;
        
        private UINode13TreeListNode mUINode13TreeListNode;
        
        private UINode14TreeListNode mUINode14TreeListNode;
        
        private UINode15TreeListNode mUINode15TreeListNode;
        
        private UINode16TreeListNode mUINode16TreeListNode;
        
        private UINode17TreeListNode mUINode17TreeListNode;
        
        private UINode18TreeListNode mUINode18TreeListNode;
        
        private UINode19TreeListNode mUINode19TreeListNode;
        
        private UINode20TreeListNode mUINode20TreeListNode;
        
        private UINode21TreeListNode mUINode21TreeListNode;
        
        private UINode22TreeListNode mUINode22TreeListNode;
        
        private UINode23TreeListNode mUINode23TreeListNode;
        
        private UINode24TreeListNode mUINode24TreeListNode;
        
        private UINode25TreeListNode mUINode25TreeListNode;
        
        private UINode26TreeListNode mUINode26TreeListNode;
        
        private UINode27TreeListNode mUINode27TreeListNode;
        
        private UINode28TreeListNode mUINode28TreeListNode;
        
        private UINode29TreeListNode mUINode29TreeListNode;
        
        private UINode30TreeListNode mUINode30TreeListNode;
        
        private UINode31TreeListNode mUINode31TreeListNode;
        
        private UINode32TreeListNode mUINode32TreeListNode;
        
        private UINode33TreeListNode mUINode33TreeListNode;
        
        private UINode34TreeListNode mUINode34TreeListNode;
        
        private UINode35TreeListNode mUINode35TreeListNode;
        
        private UINode36TreeListNode mUINode36TreeListNode;
        
        private UINode37TreeListNode mUINode37TreeListNode;
        
        private UINode38TreeListNode mUINode38TreeListNode;
        
        private UINode39TreeListNode mUINode39TreeListNode;
        
        private UINode40TreeListNode mUINode40TreeListNode;
        
        private UINode41TreeListNode mUINode41TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode : DXTreeListNode
    {
        
        public UINode0TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem1AndersenAstridTreeListCell
        {
            get
            {
                if ((this.mUIItem1AndersenAstridTreeListCell == null))
                {
                    this.mUIItem1AndersenAstridTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem1AndersenAstridTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem1AndersenAstridTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem1AndersenAstridTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem1AndersenAstridTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem1AndersenAstridTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode : DXTreeListNode
    {
        
        public UINode1TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem2BarskeBrynjulfTreeListCell
        {
            get
            {
                if ((this.mUIItem2BarskeBrynjulfTreeListCell == null))
                {
                    this.mUIItem2BarskeBrynjulfTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem2BarskeBrynjulfTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem2BarskeBrynjulfTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem2BarskeBrynjulfTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem2BarskeBrynjulfTreeListCell;
            }
        }
        
        public UINode0TreeListNode1 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode1(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem2BarskeBrynjulfTreeListCell;
        
        private UINode0TreeListNode1 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode1 : DXTreeListNode
    {
        
        public UINode0TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem10TreeListCell
        {
            get
            {
                if ((this.mUIItem10TreeListCell == null))
                {
                    this.mUIItem10TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem10TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode2TreeListNode : DXTreeListNode
    {
        
        public UINode2TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem3BetongBillyTreeListCell
        {
            get
            {
                if ((this.mUIItem3BetongBillyTreeListCell == null))
                {
                    this.mUIItem3BetongBillyTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem3BetongBillyTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem3BetongBillyTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem3BetongBillyTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem3BetongBillyTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem3BetongBillyTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode3TreeListNode : DXTreeListNode
    {
        
        public UINode3TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem4BronsonCharlieTreeListCell
        {
            get
            {
                if ((this.mUIItem4BronsonCharlieTreeListCell == null))
                {
                    this.mUIItem4BronsonCharlieTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem4BronsonCharlieTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem4BronsonCharlieTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem4BronsonCharlieTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem4BronsonCharlieTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem4BronsonCharlieTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode4TreeListNode : DXTreeListNode
    {
        
        public UINode4TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node4";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5DaleneDollyTreeListCell
        {
            get
            {
                if ((this.mUIItem5DaleneDollyTreeListCell == null))
                {
                    this.mUIItem5DaleneDollyTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5DaleneDollyTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem5DaleneDollyTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem5DaleneDollyTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem5DaleneDollyTreeListCell;
            }
        }
        
        public UINode0TreeListNode2 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode2(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public DXTreeListCell UIFast2TreeListCell
        {
            get
            {
                if ((this.mUIFast2TreeListCell == null))
                {
                    this.mUIFast2TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIFast2TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colWeekendPatternStringMain";
                    this.mUIFast2TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIFast2TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIFast2TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5DaleneDollyTreeListCell;
        
        private UINode0TreeListNode2 mUINode0TreeListNode;
        
        private DXTreeListCell mUIFast2TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode2 : DXTreeListNode
    {
        
        public UINode0TreeListNode2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode0TreeListNodeSelectImage
        {
            get
            {
                if ((this.mUINode0TreeListNodeSelectImage == null))
                {
                    this.mUINode0TreeListNodeSelectImage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
                    this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
                    this.mUINode0TreeListNodeSelectImage.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUINode0TreeListNodeSelectImage;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode0TreeListNodeSelectImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode5TreeListNode : DXTreeListNode
    {
        
        public UINode5TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node5";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem6EriksrødErikaTreeListCell
        {
            get
            {
                if ((this.mUIItem6EriksrødErikaTreeListCell == null))
                {
                    this.mUIItem6EriksrødErikaTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem6EriksrødErikaTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem6EriksrødErikaTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem6EriksrødErikaTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem6EriksrødErikaTreeListCell;
            }
        }
        
        public UINode0TreeListNode3 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode3(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public DXTreeListCell UIValgtTreeListCell
        {
            get
            {
                if ((this.mUIValgtTreeListCell == null))
                {
                    this.mUIValgtTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIValgtTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colIsInactiveMain";
                    this.mUIValgtTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIValgtTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIValgtTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem6EriksrødErikaTreeListCell;
        
        private UINode0TreeListNode3 mUINode0TreeListNode;
        
        private DXTreeListCell mUIValgtTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode3 : DXTreeListNode
    {
        
        public UINode0TreeListNode3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode0TreeListNodeSelectImage
        {
            get
            {
                if ((this.mUINode0TreeListNodeSelectImage == null))
                {
                    this.mUINode0TreeListNodeSelectImage = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
                    this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
                    this.mUINode0TreeListNodeSelectImage.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUINode0TreeListNodeSelectImage;
            }
        }
        
        public DXTreeListCell UIItem10TreeListCell
        {
            get
            {
                if ((this.mUIItem10TreeListCell == null))
                {
                    this.mUIItem10TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10TreeListCell;
            }
        }
        
        public DXTreeListCell UIValgtTreeListCell
        {
            get
            {
                if ((this.mUIValgtTreeListCell == null))
                {
                    this.mUIValgtTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIValgtTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colIsInactiveMain";
                    this.mUIValgtTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIValgtTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIValgtTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode0TreeListNodeSelectImage;
        
        private DXTreeListCell mUIItem10TreeListCell;
        
        private DXTreeListCell mUIValgtTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode6TreeListNode : DXTreeListNode
    {
        
        public UINode6TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node6";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem7UlneUlfTreeListCell
        {
            get
            {
                if ((this.mUIItem7UlneUlfTreeListCell == null))
                {
                    this.mUIItem7UlneUlfTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem7UlneUlfTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem7UlneUlfTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem7UlneUlfTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem7UlneUlfTreeListCell;
            }
        }
        
        public UINode0TreeListNode4 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode4(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode1TreeListNode1 UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode1(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem7UlneUlfTreeListCell;
        
        private UINode0TreeListNode4 mUINode0TreeListNode;
        
        private UINode1TreeListNode1 mUINode1TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode4 : DXTreeListNode
    {
        
        public UINode0TreeListNode4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem150TreeListCell
        {
            get
            {
                if ((this.mUIItem150TreeListCell == null))
                {
                    this.mUIItem150TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem150TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem150TreeListCell;
            }
        }
        
        public DXTreeListCell UITURNUSTurnus355tukeTreeListCell
        {
            get
            {
                if ((this.mUITURNUSTurnus355tukeTreeListCell == null))
                {
                    this.mUITURNUSTurnus355tukeTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUITURNUSTurnus355tukeTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colRuleSetDisplayNameMain";
                    this.mUITURNUSTurnus355tukeTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUITURNUSTurnus355tukeTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUITURNUSTurnus355tukeTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem150TreeListCell;
        
        private DXTreeListCell mUITURNUSTurnus355tukeTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode1 : DXTreeListNode
    {
        
        public UINode1TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem225TreeListCell
        {
            get
            {
                if ((this.mUIItem225TreeListCell == null))
                {
                    this.mUIItem225TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem225TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem225TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem225TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem225TreeListCell;
            }
        }
        
        public DXTreeListCell UIDAGDagtidTreeListCell
        {
            get
            {
                if ((this.mUIDAGDagtidTreeListCell == null))
                {
                    this.mUIDAGDagtidTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIDAGDagtidTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colRuleSetDisplayNameMain";
                    this.mUIDAGDagtidTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIDAGDagtidTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIDAGDagtidTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem225TreeListCell;
        
        private DXTreeListCell mUIDAGDagtidTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode7TreeListNode : DXTreeListNode
    {
        
        public UINode7TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node7";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem8VAKANTTreeListCell
        {
            get
            {
                if ((this.mUIItem8VAKANTTreeListCell == null))
                {
                    this.mUIItem8VAKANTTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem8VAKANTTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem8VAKANTTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem8VAKANTTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem8VAKANTTreeListCell;
            }
        }
        
        public UINode0TreeListNode5 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode5(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem8VAKANTTreeListCell;
        
        private UINode0TreeListNode5 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode5 : DXTreeListNode
    {
        
        public UINode0TreeListNode5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5020KalenderplanTreeListCell
        {
            get
            {
                if ((this.mUIItem5020KalenderplanTreeListCell == null))
                {
                    this.mUIItem5020KalenderplanTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5020KalenderplanTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentDisplayNameMain";
                    this.mUIItem5020KalenderplanTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem5020KalenderplanTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem5020KalenderplanTreeListCell;
            }
        }
        
        public DXTreeListCell UIItem10TreeListCell
        {
            get
            {
                if ((this.mUIItem10TreeListCell == null))
                {
                    this.mUIItem10TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5020KalenderplanTreeListCell;
        
        private DXTreeListCell mUIItem10TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode8TreeListNode : DXTreeListNode
    {
        
        public UINode8TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node8";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem9VAKANTTreeListCell
        {
            get
            {
                if ((this.mUIItem9VAKANTTreeListCell == null))
                {
                    this.mUIItem9VAKANTTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem9VAKANTTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem9VAKANTTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem9VAKANTTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem9VAKANTTreeListCell;
            }
        }
        
        public UINode0TreeListNode6 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode6(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem9VAKANTTreeListCell;
        
        private UINode0TreeListNode6 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode6 : DXTreeListNode
    {
        
        public UINode0TreeListNode6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem4110LegeavdelingTreeListCell
        {
            get
            {
                if ((this.mUIItem4110LegeavdelingTreeListCell == null))
                {
                    this.mUIItem4110LegeavdelingTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem4110LegeavdelingTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentDisplayNameMain";
                    this.mUIItem4110LegeavdelingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem4110LegeavdelingTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem4110LegeavdelingTreeListCell;
            }
        }
        
        public DXTreeListCell UIItem10TreeListCell
        {
            get
            {
                if ((this.mUIItem10TreeListCell == null))
                {
                    this.mUIItem10TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem4110LegeavdelingTreeListCell;
        
        private DXTreeListCell mUIItem10TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode9TreeListNode : DXTreeListNode
    {
        
        public UINode9TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node9";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem10VAKANTTreeListCell
        {
            get
            {
                if ((this.mUIItem10VAKANTTreeListCell == null))
                {
                    this.mUIItem10VAKANTTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10VAKANTTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10VAKANTTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10VAKANTTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10VAKANTTreeListCell;
            }
        }
        
        public UINode0TreeListNode7 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode7(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode1TreeListNode2 UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode2(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem10VAKANTTreeListCell;
        
        private UINode0TreeListNode7 mUINode0TreeListNode;
        
        private UINode1TreeListNode2 mUINode1TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode7 : DXTreeListNode
    {
        
        public UINode0TreeListNode7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5010ArbeidsplanoTreeListCell
        {
            get
            {
                if ((this.mUIItem5010ArbeidsplanoTreeListCell == null))
                {
                    this.mUIItem5010ArbeidsplanoTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5010ArbeidsplanoTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentDisplayNameMain";
                    this.mUIItem5010ArbeidsplanoTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem5010ArbeidsplanoTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem5010ArbeidsplanoTreeListCell;
            }
        }
        
        public DXTreeListCell UIItem10TreeListCell
        {
            get
            {
                if ((this.mUIItem10TreeListCell == null))
                {
                    this.mUIItem10TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem10TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem10TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem10TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5010ArbeidsplanoTreeListCell;
        
        private DXTreeListCell mUIItem10TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode2 : DXTreeListNode
    {
        
        public UINode1TreeListNode2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem225TreeListCell
        {
            get
            {
                if ((this.mUIItem225TreeListCell == null))
                {
                    this.mUIItem225TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem225TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem225TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem225TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem225TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem225TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode10TreeListNode : DXTreeListNode
    {
        
        public UINode10TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node10";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem11OlsenBrorTreeListCell
        {
            get
            {
                if ((this.mUIItem11OlsenBrorTreeListCell == null))
                {
                    this.mUIItem11OlsenBrorTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem11OlsenBrorTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem11OlsenBrorTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem11OlsenBrorTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem11OlsenBrorTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem11OlsenBrorTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode11TreeListNode : DXTreeListNode
    {
        
        public UINode11TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node11";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem12RaserRoarTreeListCell
        {
            get
            {
                if ((this.mUIItem12RaserRoarTreeListCell == null))
                {
                    this.mUIItem12RaserRoarTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem12RaserRoarTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem12RaserRoarTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem12RaserRoarTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem12RaserRoarTreeListCell;
            }
        }
        
        public UINode0TreeListNode8 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode8(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem12RaserRoarTreeListCell;
        
        private UINode0TreeListNode8 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode8 : DXTreeListNode
    {
        
        public UINode0TreeListNode8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem150TreeListCell
        {
            get
            {
                if ((this.mUIItem150TreeListCell == null))
                {
                    this.mUIItem150TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem150TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem150TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem150TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode12TreeListNode : DXTreeListNode
    {
        
        public UINode12TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node12";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem13SørensenSørenTreeListCell
        {
            get
            {
                if ((this.mUIItem13SørensenSørenTreeListCell == null))
                {
                    this.mUIItem13SørensenSørenTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem13SørensenSørenTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem13SørensenSørenTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem13SørensenSørenTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem13SørensenSørenTreeListCell;
            }
        }
        
        public UINode0TreeListNode9 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode9(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem13SørensenSørenTreeListCell;
        
        private UINode0TreeListNode9 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode9 : DXTreeListNode
    {
        
        public UINode0TreeListNode9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem190TreeListCell
        {
            get
            {
                if ((this.mUIItem190TreeListCell == null))
                {
                    this.mUIItem190TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem190TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem190TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem190TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem190TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem190TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode13TreeListNode : DXTreeListNode
    {
        
        public UINode13TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node13";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem14TigerTanyaTreeListCell
        {
            get
            {
                if ((this.mUIItem14TigerTanyaTreeListCell == null))
                {
                    this.mUIItem14TigerTanyaTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem14TigerTanyaTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem14TigerTanyaTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem14TigerTanyaTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem14TigerTanyaTreeListCell;
            }
        }
        
        public UINode0TreeListNode10 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode10(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem14TigerTanyaTreeListCell;
        
        private UINode0TreeListNode10 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode10 : DXTreeListNode
    {
        
        public UINode0TreeListNode10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem175TreeListCell
        {
            get
            {
                if ((this.mUIItem175TreeListCell == null))
                {
                    this.mUIItem175TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem175TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem175TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem175TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem175TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem175TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode14TreeListNode : DXTreeListNode
    {
        
        public UINode14TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node14";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem15AbrahamsenTronTreeListCell
        {
            get
            {
                if ((this.mUIItem15AbrahamsenTronTreeListCell == null))
                {
                    this.mUIItem15AbrahamsenTronTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem15AbrahamsenTronTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem15AbrahamsenTronTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem15AbrahamsenTronTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem15AbrahamsenTronTreeListCell;
            }
        }
        
        public UINode0TreeListNode11 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode11(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem15AbrahamsenTronTreeListCell;
        
        private UINode0TreeListNode11 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode11 : DXTreeListNode
    {
        
        public UINode0TreeListNode11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem1100TreeListCell
        {
            get
            {
                if ((this.mUIItem1100TreeListCell == null))
                {
                    this.mUIItem1100TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem1100TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem1100TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem1100TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem1100TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode15TreeListNode : DXTreeListNode
    {
        
        public UINode15TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node15";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem16BergMagnusTreeListCell
        {
            get
            {
                if ((this.mUIItem16BergMagnusTreeListCell == null))
                {
                    this.mUIItem16BergMagnusTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem16BergMagnusTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem16BergMagnusTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem16BergMagnusTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem16BergMagnusTreeListCell;
            }
        }
        
        public UINode0TreeListNode12 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode12(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem16BergMagnusTreeListCell;
        
        private UINode0TreeListNode12 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode12 : DXTreeListNode
    {
        
        public UINode0TreeListNode12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem180TreeListCell
        {
            get
            {
                if ((this.mUIItem180TreeListCell == null))
                {
                    this.mUIItem180TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem180TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem180TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem180TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem180TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem180TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode16TreeListNode : DXTreeListNode
    {
        
        public UINode16TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node16";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem17FredheimFridTreeListCell
        {
            get
            {
                if ((this.mUIItem17FredheimFridTreeListCell == null))
                {
                    this.mUIItem17FredheimFridTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem17FredheimFridTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem17FredheimFridTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem17FredheimFridTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem17FredheimFridTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem17FredheimFridTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode17TreeListNode : DXTreeListNode
    {
        
        public UINode17TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node17";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem18HansenHenriettTreeListCell
        {
            get
            {
                if ((this.mUIItem18HansenHenriettTreeListCell == null))
                {
                    this.mUIItem18HansenHenriettTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem18HansenHenriettTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem18HansenHenriettTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem18HansenHenriettTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem18HansenHenriettTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem18HansenHenriettTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode18TreeListNode : DXTreeListNode
    {
        
        public UINode18TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node18";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem19HaugenHarryTreeListCell
        {
            get
            {
                if ((this.mUIItem19HaugenHarryTreeListCell == null))
                {
                    this.mUIItem19HaugenHarryTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem19HaugenHarryTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem19HaugenHarryTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem19HaugenHarryTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem19HaugenHarryTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem19HaugenHarryTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode19TreeListNode : DXTreeListNode
    {
        
        public UINode19TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node19";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem20JensenJosteinTreeListCell
        {
            get
            {
                if ((this.mUIItem20JensenJosteinTreeListCell == null))
                {
                    this.mUIItem20JensenJosteinTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem20JensenJosteinTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem20JensenJosteinTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem20JensenJosteinTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem20JensenJosteinTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem20JensenJosteinTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode20TreeListNode : DXTreeListNode
    {
        
        public UINode20TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node20";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem21KarslenKnutTreeListCell
        {
            get
            {
                if ((this.mUIItem21KarslenKnutTreeListCell == null))
                {
                    this.mUIItem21KarslenKnutTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem21KarslenKnutTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem21KarslenKnutTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem21KarslenKnutTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem21KarslenKnutTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem21KarslenKnutTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode21TreeListNode : DXTreeListNode
    {
        
        public UINode21TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node21";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem22KnutsenKasperTreeListCell
        {
            get
            {
                if ((this.mUIItem22KnutsenKasperTreeListCell == null))
                {
                    this.mUIItem22KnutsenKasperTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem22KnutsenKasperTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem22KnutsenKasperTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem22KnutsenKasperTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem22KnutsenKasperTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem22KnutsenKasperTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode22TreeListNode : DXTreeListNode
    {
        
        public UINode22TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node22";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem23KristoffersenKTreeListCell
        {
            get
            {
                if ((this.mUIItem23KristoffersenKTreeListCell == null))
                {
                    this.mUIItem23KristoffersenKTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem23KristoffersenKTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem23KristoffersenKTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem23KristoffersenKTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem23KristoffersenKTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem23KristoffersenKTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode23TreeListNode : DXTreeListNode
    {
        
        public UINode23TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node23";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem24KuldeKalleTreeListCell
        {
            get
            {
                if ((this.mUIItem24KuldeKalleTreeListCell == null))
                {
                    this.mUIItem24KuldeKalleTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem24KuldeKalleTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem24KuldeKalleTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem24KuldeKalleTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem24KuldeKalleTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem24KuldeKalleTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode24TreeListNode : DXTreeListNode
    {
        
        public UINode24TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node24";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem25LarsenLailaTreeListCell
        {
            get
            {
                if ((this.mUIItem25LarsenLailaTreeListCell == null))
                {
                    this.mUIItem25LarsenLailaTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem25LarsenLailaTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem25LarsenLailaTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem25LarsenLailaTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem25LarsenLailaTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem25LarsenLailaTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode25TreeListNode : DXTreeListNode
    {
        
        public UINode25TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node25";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem26LekreLailaTreeListCell
        {
            get
            {
                if ((this.mUIItem26LekreLailaTreeListCell == null))
                {
                    this.mUIItem26LekreLailaTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem26LekreLailaTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem26LekreLailaTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem26LekreLailaTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem26LekreLailaTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem26LekreLailaTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode26TreeListNode : DXTreeListNode
    {
        
        public UINode26TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node26";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem27MoenMeretheTreeListCell
        {
            get
            {
                if ((this.mUIItem27MoenMeretheTreeListCell == null))
                {
                    this.mUIItem27MoenMeretheTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem27MoenMeretheTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem27MoenMeretheTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem27MoenMeretheTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem27MoenMeretheTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem27MoenMeretheTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode27TreeListNode : DXTreeListNode
    {
        
        public UINode27TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node27";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem28NilssonNisseTreeListCell
        {
            get
            {
                if ((this.mUIItem28NilssonNisseTreeListCell == null))
                {
                    this.mUIItem28NilssonNisseTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem28NilssonNisseTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem28NilssonNisseTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem28NilssonNisseTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem28NilssonNisseTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem28NilssonNisseTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode28TreeListNode : DXTreeListNode
    {
        
        public UINode28TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node28";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem29NornesJensGustTreeListCell
        {
            get
            {
                if ((this.mUIItem29NornesJensGustTreeListCell == null))
                {
                    this.mUIItem29NornesJensGustTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem29NornesJensGustTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem29NornesJensGustTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem29NornesJensGustTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem29NornesJensGustTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem29NornesJensGustTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode29TreeListNode : DXTreeListNode
    {
        
        public UINode29TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node29";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem30OlsenBrorTreeListCell
        {
            get
            {
                if ((this.mUIItem30OlsenBrorTreeListCell == null))
                {
                    this.mUIItem30OlsenBrorTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem30OlsenBrorTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem30OlsenBrorTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem30OlsenBrorTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem30OlsenBrorTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem30OlsenBrorTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode30TreeListNode : DXTreeListNode
    {
        
        public UINode30TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node30";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem31OlsenKjetilTreeListCell
        {
            get
            {
                if ((this.mUIItem31OlsenKjetilTreeListCell == null))
                {
                    this.mUIItem31OlsenKjetilTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem31OlsenKjetilTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem31OlsenKjetilTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem31OlsenKjetilTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem31OlsenKjetilTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem31OlsenKjetilTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode31TreeListNode : DXTreeListNode
    {
        
        public UINode31TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node31";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem32PedersenMortenTreeListCell
        {
            get
            {
                if ((this.mUIItem32PedersenMortenTreeListCell == null))
                {
                    this.mUIItem32PedersenMortenTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem32PedersenMortenTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem32PedersenMortenTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem32PedersenMortenTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem32PedersenMortenTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem32PedersenMortenTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode32TreeListNode : DXTreeListNode
    {
        
        public UINode32TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node32";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem33RaserRoarTreeListCell
        {
            get
            {
                if ((this.mUIItem33RaserRoarTreeListCell == null))
                {
                    this.mUIItem33RaserRoarTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem33RaserRoarTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem33RaserRoarTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem33RaserRoarTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem33RaserRoarTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem33RaserRoarTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode33TreeListNode : DXTreeListNode
    {
        
        public UINode33TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node33";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem34StreisandBjarnTreeListCell
        {
            get
            {
                if ((this.mUIItem34StreisandBjarnTreeListCell == null))
                {
                    this.mUIItem34StreisandBjarnTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem34StreisandBjarnTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem34StreisandBjarnTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem34StreisandBjarnTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem34StreisandBjarnTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem34StreisandBjarnTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode34TreeListNode : DXTreeListNode
    {
        
        public UINode34TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node34";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem35SvendsenSvenTreeListCell
        {
            get
            {
                if ((this.mUIItem35SvendsenSvenTreeListCell == null))
                {
                    this.mUIItem35SvendsenSvenTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem35SvendsenSvenTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem35SvendsenSvenTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem35SvendsenSvenTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem35SvendsenSvenTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem35SvendsenSvenTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode35TreeListNode : DXTreeListNode
    {
        
        public UINode35TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node35";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem36SørensenSørenTreeListCell
        {
            get
            {
                if ((this.mUIItem36SørensenSørenTreeListCell == null))
                {
                    this.mUIItem36SørensenSørenTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem36SørensenSørenTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem36SørensenSørenTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem36SørensenSørenTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem36SørensenSørenTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem36SørensenSørenTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode36TreeListNode : DXTreeListNode
    {
        
        public UINode36TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node36";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem37TigerTanyaTreeListCell
        {
            get
            {
                if ((this.mUIItem37TigerTanyaTreeListCell == null))
                {
                    this.mUIItem37TigerTanyaTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem37TigerTanyaTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem37TigerTanyaTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem37TigerTanyaTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem37TigerTanyaTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem37TigerTanyaTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode37TreeListNode : DXTreeListNode
    {
        
        public UINode37TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node37";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem38TrosterudTorstTreeListCell
        {
            get
            {
                if ((this.mUIItem38TrosterudTorstTreeListCell == null))
                {
                    this.mUIItem38TrosterudTorstTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem38TrosterudTorstTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem38TrosterudTorstTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem38TrosterudTorstTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem38TrosterudTorstTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem38TrosterudTorstTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode38TreeListNode : DXTreeListNode
    {
        
        public UINode38TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node38";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem39TrosterudTuridTreeListCell
        {
            get
            {
                if ((this.mUIItem39TrosterudTuridTreeListCell == null))
                {
                    this.mUIItem39TrosterudTuridTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem39TrosterudTuridTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem39TrosterudTuridTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem39TrosterudTuridTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem39TrosterudTuridTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem39TrosterudTuridTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode39TreeListNode : DXTreeListNode
    {
        
        public UINode39TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node39";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem40UlneUlfTreeListCell
        {
            get
            {
                if ((this.mUIItem40UlneUlfTreeListCell == null))
                {
                    this.mUIItem40UlneUlfTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem40UlneUlfTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem40UlneUlfTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem40UlneUlfTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem40UlneUlfTreeListCell;
            }
        }
        
        public UINode0TreeListNode13 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode13(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode1TreeListNode3 UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode3(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem40UlneUlfTreeListCell;
        
        private UINode0TreeListNode13 mUINode0TreeListNode;
        
        private UINode1TreeListNode3 mUINode1TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode13 : DXTreeListNode
    {
        
        public UINode0TreeListNode13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem150TreeListCell
        {
            get
            {
                if ((this.mUIItem150TreeListCell == null))
                {
                    this.mUIItem150TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem150TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem150TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem150TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem150TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode3 : DXTreeListNode
    {
        
        public UINode1TreeListNode3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem225TreeListCell
        {
            get
            {
                if ((this.mUIItem225TreeListCell == null))
                {
                    this.mUIItem225TreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem225TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem225TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem225TreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem225TreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem225TreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode40TreeListNode : DXTreeListNode
    {
        
        public UINode40TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node40";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem41WilsonPeterTreeListCell
        {
            get
            {
                if ((this.mUIItem41WilsonPeterTreeListCell == null))
                {
                    this.mUIItem41WilsonPeterTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem41WilsonPeterTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem41WilsonPeterTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem41WilsonPeterTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem41WilsonPeterTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem41WilsonPeterTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode41TreeListNode : DXTreeListNode
    {
        
        public UINode41TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node41";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem42ÅhlsenOleTreeListCell
        {
            get
            {
                if ((this.mUIItem42ÅhlsenOleTreeListCell == null))
                {
                    this.mUIItem42ÅhlsenOleTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem42ÅhlsenOleTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colNameMain";
                    this.mUIItem42ÅhlsenOleTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    this.mUIItem42ÅhlsenOleTreeListCell.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIItem42ÅhlsenOleTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem42ÅhlsenOleTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVakantButton : DXButton
    {
        
        public UIVakantButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonAddVacant";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIDropDownButtonArrowBButton
        {
            get
            {
                if ((this.mUIDropDownButtonArrowBButton == null))
                {
                    this.mUIDropDownButtonArrowBButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIDropDownButtonArrowBButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonAddVacantArrowButton";
                    this.mUIDropDownButtonArrowBButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButtonArrowButton";
                    this.mUIDropDownButtonArrowBButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIDropDownButtonArrowBButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIDropDownButtonArrowBButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFlyttoppButton : DXButton
    {
        
        public UIFlyttoppButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonMoveUpwards";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIDropDownButtonArrowBButton
        {
            get
            {
                if ((this.mUIDropDownButtonArrowBButton == null))
                {
                    this.mUIDropDownButtonArrowBButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIDropDownButtonArrowBButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonMoveUpwardsArrowButton";
                    this.mUIDropDownButtonArrowBButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButtonArrowButton";
                    this.mUIDropDownButtonArrowBButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIDropDownButtonArrowBButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIDropDownButtonArrowBButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlRightClient : DXTestControl
    {
        
        public UIPanelControlRightClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlRight";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIEmployeeEditorsViewCustom UIEmployeeEditorsViewCustom
        {
            get
            {
                if ((this.mUIEmployeeEditorsViewCustom == null))
                {
                    this.mUIEmployeeEditorsViewCustom = new UIEmployeeEditorsViewCustom(this);
                }
                return this.mUIEmployeeEditorsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeEditorsViewCustom mUIEmployeeEditorsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeEditorsViewCustom : DXTestControl
    {
        
        public UIEmployeeEditorsViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeEditorsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeEditorsView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient : DXTestControl
    {
        
        public UIPcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIXscContentScrollableControl UIXscContentScrollableControl
        {
            get
            {
                if ((this.mUIXscContentScrollableControl == null))
                {
                    this.mUIXscContentScrollableControl = new UIXscContentScrollableControl(this);
                }
                return this.mUIXscContentScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXscContentScrollableControl mUIXscContentScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXscContentScrollableControl : DXScrollableControl
    {
        
        public UIXscContentScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xscContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGroupControlViewHostCustom UIGroupControlViewHostCustom
        {
            get
            {
                if ((this.mUIGroupControlViewHostCustom == null))
                {
                    this.mUIGroupControlViewHostCustom = new UIGroupControlViewHostCustom(this);
                }
                return this.mUIGroupControlViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlViewHostCustom mUIGroupControlViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlViewHostCustom : DXTestControl
    {
        
        public UIGroupControlViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControlViewHost";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGroupControlClient UIGroupControlClient
        {
            get
            {
                if ((this.mUIGroupControlClient == null))
                {
                    this.mUIGroupControlClient = new UIGroupControlClient(this);
                }
                return this.mUIGroupControlClient;
            }
        }
        
        public UIGroupControlClient1 UIGroupControlClient1
        {
            get
            {
                if ((this.mUIGroupControlClient1 == null))
                {
                    this.mUIGroupControlClient1 = new UIGroupControlClient1(this);
                }
                return this.mUIGroupControlClient1;
            }
        }
        
        public UIGroupControlClient11 UIGroupControlClient11
        {
            get
            {
                if ((this.mUIGroupControlClient11 == null))
                {
                    this.mUIGroupControlClient11 = new UIGroupControlClient11(this);
                }
                return this.mUIGroupControlClient11;
            }
        }
        #endregion
        
        #region Fields
        private UIGroupControlClient mUIGroupControlClient;
        
        private UIGroupControlClient1 mUIGroupControlClient1;
        
        private UIGroupControlClient11 mUIGroupControlClient11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlClient : DXTestControl
    {
        
        public UIGroupControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerVacanCustom UIEmployeeManagerVacanCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerVacanCustom == null))
                {
                    this.mUIEmployeeManagerVacanCustom = new UIEmployeeManagerVacanCustom(this);
                }
                return this.mUIEmployeeManagerVacanCustom;
            }
        }
        
        public UIEmployeeManagerOvertCustom UIEmployeeManagerOvertCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerOvertCustom == null))
                {
                    this.mUIEmployeeManagerOvertCustom = new UIEmployeeManagerOvertCustom(this);
                }
                return this.mUIEmployeeManagerOvertCustom;
            }
        }
        
        public UIEmployeeManagerF3CalCustom UIEmployeeManagerF3CalCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerF3CalCustom == null))
                {
                    this.mUIEmployeeManagerF3CalCustom = new UIEmployeeManagerF3CalCustom(this);
                }
                return this.mUIEmployeeManagerF3CalCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerVacanCustom mUIEmployeeManagerVacanCustom;
        
        private UIEmployeeManagerOvertCustom mUIEmployeeManagerOvertCustom;
        
        private UIEmployeeManagerF3CalCustom mUIEmployeeManagerF3CalCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerVacanCustom : DXTestControl
    {
        
        public UIEmployeeManagerVacanCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerVacantView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerVacantView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIECustomNameEdit
        {
            get
            {
                if ((this.mUIECustomNameEdit == null))
                {
                    this.mUIECustomNameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIECustomNameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eCustomName";
                    this.mUIECustomNameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIECustomNameEdit.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIECustomNameEdit;
            }
        }
        
        public UIEWeekSeparatorComboBox UIEWeekSeparatorComboBox
        {
            get
            {
                if ((this.mUIEWeekSeparatorComboBox == null))
                {
                    this.mUIEWeekSeparatorComboBox = new UIEWeekSeparatorComboBox(this);
                }
                return this.mUIEWeekSeparatorComboBox;
            }
        }
        
        public DXDateTimePicker UIEDaySeparatorDateTimeEdit
        {
            get
            {
                if ((this.mUIEDaySeparatorDateTimeEdit == null))
                {
                    this.mUIEDaySeparatorDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIEDaySeparatorDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eDaySeparator";
                    this.mUIEDaySeparatorDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TimeEdit";
                    this.mUIEDaySeparatorDateTimeEdit.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIEDaySeparatorDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIECustomNameEdit;
        
        private UIEWeekSeparatorComboBox mUIEWeekSeparatorComboBox;
        
        private DXDateTimePicker mUIEDaySeparatorDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEWeekSeparatorComboBox : DXComboBox
    {
        
        public UIEWeekSeparatorComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eWeekSeparator";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxEdit";
            #endregion
        }
        
        #region Properties
        public UIComboBoxPopupListBoxWindow UIComboBoxPopupListBoxWindow
        {
            get
            {
                if ((this.mUIComboBoxPopupListBoxWindow == null))
                {
                    this.mUIComboBoxPopupListBoxWindow = new UIComboBoxPopupListBoxWindow(this);
                }
                return this.mUIComboBoxPopupListBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIComboBoxPopupListBoxWindow mUIComboBoxPopupListBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIComboBoxPopupListBoxWindow : DXWindow
    {
        
        public UIComboBoxPopupListBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "eWeekSeparatorPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxPopupListBoxForm";
            #endregion
        }
        
        #region Properties
        public DXListBox UIComboBoxPopupListBoxList
        {
            get
            {
                if ((this.mUIComboBoxPopupListBoxList == null))
                {
                    this.mUIComboBoxPopupListBoxList = new DXListBox(this);
                    #region Search Criteria
                    this.mUIComboBoxPopupListBoxList.SearchProperties[DXTestControl.PropertyNames.Name] = "eWeekSeparatorPopupFormComboBoxPopupListBox[0]";
                    this.mUIComboBoxPopupListBoxList.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxPopupListBox";
                    this.mUIComboBoxPopupListBoxList.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIComboBoxPopupListBoxList;
            }
        }
        #endregion
        
        #region Fields
        private DXListBox mUIComboBoxPopupListBoxList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerOvertCustom : DXTestControl
    {
        
        public UIEmployeeManagerOvertCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerOvertimeCodeView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerOvertimeCodeView";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UIEOvertimeCodeLookUpEdit
        {
            get
            {
                if ((this.mUIEOvertimeCodeLookUpEdit == null))
                {
                    this.mUIEOvertimeCodeLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIEOvertimeCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eOvertimeCode";
                    this.mUIEOvertimeCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchLookUpEdit";
                    #endregion
                }
                return this.mUIEOvertimeCodeLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUIEOvertimeCodeLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerF3CalCustom : DXTestControl
    {
        
        public UIEmployeeManagerF3CalCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerF3CalculationOptionView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerF3CalculationOptionView";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UILueF3CalculationOptiLookUpEdit
        {
            get
            {
                if ((this.mUILueF3CalculationOptiLookUpEdit == null))
                {
                    this.mUILueF3CalculationOptiLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILueF3CalculationOptiLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "lueF3CalculationOption";
                    this.mUILueF3CalculationOptiLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
                    #endregion
                }
                return this.mUILueF3CalculationOptiLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUILueF3CalculationOptiLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlClient1 : DXTestControl
    {
        
        public UIGroupControlClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerEmploCustom UIEmployeeManagerEmploCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerEmploCustom == null))
                {
                    this.mUIEmployeeManagerEmploCustom = new UIEmployeeManagerEmploCustom(this);
                }
                return this.mUIEmployeeManagerEmploCustom;
            }
        }
        
        public UIEmployeeManagerLineVCustom UIEmployeeManagerLineVCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerLineVCustom == null))
                {
                    this.mUIEmployeeManagerLineVCustom = new UIEmployeeManagerLineVCustom(this);
                }
                return this.mUIEmployeeManagerLineVCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerEmploCustom mUIEmployeeManagerEmploCustom;
        
        private UIEmployeeManagerLineVCustom mUIEmployeeManagerLineVCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerEmploCustom : DXTestControl
    {
        
        public UIEmployeeManagerEmploCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerEmployeeView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerEmployeeView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIENotesEdit
        {
            get
            {
                if ((this.mUIENotesEdit == null))
                {
                    this.mUIENotesEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIENotesEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eNotes";
                    this.mUIENotesEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MemoEdit";
                    this.mUIENotesEdit.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIENotesEdit;
            }
        }
        
        public DXButton UILaghelgemønsterButton
        {
            get
            {
                if ((this.mUILaghelgemønsterButton == null))
                {
                    this.mUILaghelgemønsterButton = new DXButton(this);
                    #region Search Criteria
                    this.mUILaghelgemønsterButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonCreateWeekendPattern";
                    this.mUILaghelgemønsterButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
                    this.mUILaghelgemønsterButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUILaghelgemønsterButton;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIENotesEdit;
        
        private DXButton mUILaghelgemønsterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerLineVCustom : DXTestControl
    {
        
        public UIEmployeeManagerLineVCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerLineView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerLineView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UIEPositionCategoryLookUpEdit
        {
            get
            {
                if ((this.mUIEPositionCategoryLookUpEdit == null))
                {
                    this.mUIEPositionCategoryLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIEPositionCategoryLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "ePositionCategory";
                    this.mUIEPositionCategoryLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchLookUpEdit";
                    #endregion
                }
                return this.mUIEPositionCategoryLookUpEdit;
            }
        }
        
        public DXTextEdit UIEPositionPercentEdit
        {
            get
            {
                if ((this.mUIEPositionPercentEdit == null))
                {
                    this.mUIEPositionPercentEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIEPositionPercentEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "ePositionPercent";
                    this.mUIEPositionPercentEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDoubleEdit";
                    this.mUIEPositionPercentEdit.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIEPositionPercentEdit;
            }
        }
        
        public DXLookUpEdit UIERuleSetLookUpEdit
        {
            get
            {
                if ((this.mUIERuleSetLookUpEdit == null))
                {
                    this.mUIERuleSetLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIERuleSetLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eRuleSet";
                    this.mUIERuleSetLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchLookUpEdit";
                    #endregion
                }
                return this.mUIERuleSetLookUpEdit;
            }
        }
        
        public DXLookUpEdit UIEGroupLookUpEdit
        {
            get
            {
                if ((this.mUIEGroupLookUpEdit == null))
                {
                    this.mUIEGroupLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIEGroupLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eGroup";
                    this.mUIEGroupLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchLookUpEdit";
                    #endregion
                }
                return this.mUIEGroupLookUpEdit;
            }
        }
        
        public DXTextEdit UIEFlexibleHoursEdit
        {
            get
            {
                if ((this.mUIEFlexibleHoursEdit == null))
                {
                    this.mUIEFlexibleHoursEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIEFlexibleHoursEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eFlexibleHours";
                    this.mUIEFlexibleHoursEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDoubleEdit";
                    this.mUIEFlexibleHoursEdit.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIEFlexibleHoursEdit;
            }
        }
        
        public DXLookUpEdit UIEUnionCodeLookUpEdit
        {
            get
            {
                if ((this.mUIEUnionCodeLookUpEdit == null))
                {
                    this.mUIEUnionCodeLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIEUnionCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eUnionCode";
                    this.mUIEUnionCodeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchLookUpEdit";
                    #endregion
                }
                return this.mUIEUnionCodeLookUpEdit;
            }
        }
        
        public DXCheckBox UIEIsInactiveCheckBox
        {
            get
            {
                if ((this.mUIEIsInactiveCheckBox == null))
                {
                    this.mUIEIsInactiveCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUIEIsInactiveCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "eIsInactive";
                    this.mUIEIsInactiveCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
                    this.mUIEIsInactiveCheckBox.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIEIsInactiveCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUIEPositionCategoryLookUpEdit;
        
        private DXTextEdit mUIEPositionPercentEdit;
        
        private DXLookUpEdit mUIERuleSetLookUpEdit;
        
        private DXLookUpEdit mUIEGroupLookUpEdit;
        
        private DXTextEdit mUIEFlexibleHoursEdit;
        
        private DXLookUpEdit mUIEUnionCodeLookUpEdit;
        
        private DXCheckBox mUIEIsInactiveCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGroupControlClient11 : DXTestControl
    {
        
        public UIGroupControlClient11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupControlViewHostGroupControl[2]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerRevolCustom UIEmployeeManagerRevolCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerRevolCustom == null))
                {
                    this.mUIEmployeeManagerRevolCustom = new UIEmployeeManagerRevolCustom(this);
                }
                return this.mUIEmployeeManagerRevolCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerRevolCustom mUIEmployeeManagerRevolCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerRevolCustom : DXTestControl
    {
        
        public UIEmployeeManagerRevolCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerRevolvingDatesView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerRevolvingDatesView";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXDateTimePicker UIERevolveFromDateTimeEdit
        {
            get
            {
                if ((this.mUIERevolveFromDateTimeEdit == null))
                {
                    this.mUIERevolveFromDateTimeEdit = new DXDateTimePicker(this);
                    #region Search Criteria
                    this.mUIERevolveFromDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eRevolveFrom";
                    this.mUIERevolveFromDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartDateEdit";
                    this.mUIERevolveFromDateTimeEdit.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIERevolveFromDateTimeEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXDateTimePicker mUIERevolveFromDateTimeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlOuterClient1 : DXTestControl
    {
        
        public UIPanelControlOuterClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlOuter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPanelControlLeftClient1 UIPanelControlLeftClient
        {
            get
            {
                if ((this.mUIPanelControlLeftClient == null))
                {
                    this.mUIPanelControlLeftClient = new UIPanelControlLeftClient1(this);
                }
                return this.mUIPanelControlLeftClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControlLeftClient1 mUIPanelControlLeftClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControlLeftClient1 : DXTestControl
    {
        
        public UIPanelControlLeftClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControlLeft";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIVakantButton1 UIVakantButton
        {
            get
            {
                if ((this.mUIVakantButton == null))
                {
                    this.mUIVakantButton = new UIVakantButton1(this);
                }
                return this.mUIVakantButton;
            }
        }
        #endregion
        
        #region Fields
        private UIVakantButton1 mUIVakantButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVakantButton1 : DXButton
    {
        
        public UIVakantButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonAddVacant";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
            this.WindowTitles.Add("Ansatte i arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIDropDownButtonArrowBButton
        {
            get
            {
                if ((this.mUIDropDownButtonArrowBButton == null))
                {
                    this.mUIDropDownButtonArrowBButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIDropDownButtonArrowBButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonAddVacantArrowButton";
                    this.mUIDropDownButtonArrowBButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButtonArrowButton";
                    this.mUIDropDownButtonArrowBButton.WindowTitles.Add("Ansatte i arbeidsplan");
                    #endregion
                }
                return this.mUIDropDownButtonArrowBButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIDropDownButtonArrowBButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeggtilansatteWindow : DXWindow
    {
        
        public UILeggtilansatteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Legg til ansatte";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom1 UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom1(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom1 mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom1 : DXTestControl
    {
        
        public UIViewHostCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient1 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient1(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient1 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient1 : DXTestControl
    {
        
        public UIPcViewClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UISelectDepartmentEmplCustom UISelectDepartmentEmplCustom
        {
            get
            {
                if ((this.mUISelectDepartmentEmplCustom == null))
                {
                    this.mUISelectDepartmentEmplCustom = new UISelectDepartmentEmplCustom(this);
                }
                return this.mUISelectDepartmentEmplCustom;
            }
        }
        
        public UISelectPlanEmployeesVCustom UISelectPlanEmployeesVCustom
        {
            get
            {
                if ((this.mUISelectPlanEmployeesVCustom == null))
                {
                    this.mUISelectPlanEmployeesVCustom = new UISelectPlanEmployeesVCustom(this);
                }
                return this.mUISelectPlanEmployeesVCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISelectDepartmentEmplCustom mUISelectDepartmentEmplCustom;
        
        private UISelectPlanEmployeesVCustom mUISelectPlanEmployeesVCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectDepartmentEmplCustom : DXTestControl
    {
        
        public UISelectDepartmentEmplCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SelectDepartmentEmployeesView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SelectDepartmentEmployeesView";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentContainerClient UIPcContentContainerClient
        {
            get
            {
                if ((this.mUIPcContentContainerClient == null))
                {
                    this.mUIPcContentContainerClient = new UIPcContentContainerClient(this);
                }
                return this.mUIPcContentContainerClient;
            }
        }
        
        public UILeftAutoHideContaineClient UILeftAutoHideContaineClient
        {
            get
            {
                if ((this.mUILeftAutoHideContaineClient == null))
                {
                    this.mUILeftAutoHideContaineClient = new UILeftAutoHideContaineClient(this);
                }
                return this.mUILeftAutoHideContaineClient;
            }
        }
        
        public UIAutoHideControlClient UIAutoHideControlClient
        {
            get
            {
                if ((this.mUIAutoHideControlClient == null))
                {
                    this.mUIAutoHideControlClient = new UIAutoHideControlClient(this);
                }
                return this.mUIAutoHideControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentContainerClient mUIPcContentContainerClient;
        
        private UILeftAutoHideContaineClient mUILeftAutoHideContaineClient;
        
        private UIAutoHideControlClient mUIAutoHideControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentContainerClient : DXTestControl
    {
        
        public UIPcContentContainerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContentContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient1 UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient1(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient1 mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient1 : DXTestControl
    {
        
        public UIPcContentClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIGcDepartmentEmployeeTable UIGcDepartmentEmployeeTable
        {
            get
            {
                if ((this.mUIGcDepartmentEmployeeTable == null))
                {
                    this.mUIGcDepartmentEmployeeTable = new UIGcDepartmentEmployeeTable(this);
                }
                return this.mUIGcDepartmentEmployeeTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDepartmentEmployeeTable mUIGcDepartmentEmployeeTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDepartmentEmployeeTable : DXGrid
    {
        
        public UIGcDepartmentEmployeeTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXCell UIAndersenAstridCell
        {
            get
            {
                if ((this.mUIAndersenAstridCell == null))
                {
                    this.mUIAndersenAstridCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]1[Column]colE" +
                        "mployee";
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAndersenAstridCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAndersenAstridCell;
            }
        }
        
        public DXCell UIBronsonCharlieCell
        {
            get
            {
                if ((this.mUIBronsonCharlieCell == null))
                {
                    this.mUIBronsonCharlieCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBronsonCharlieCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]4[Column]colE" +
                        "mployee";
                    this.mUIBronsonCharlieCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBronsonCharlieCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIBronsonCharlieCell;
            }
        }
        
        public DXCell UIUlneUlfCell
        {
            get
            {
                if ((this.mUIUlneUlfCell == null))
                {
                    this.mUIUlneUlfCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIUlneUlfCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]14[Column]col" +
                        "Employee";
                    this.mUIUlneUlfCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIUlneUlfCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIUlneUlfCell;
            }
        }
        
        public DXCell UIDaleneDollyCell
        {
            get
            {
                if ((this.mUIDaleneDollyCell == null))
                {
                    this.mUIDaleneDollyCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDaleneDollyCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]3[Column]colE" +
                        "mployee";
                    this.mUIDaleneDollyCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDaleneDollyCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIDaleneDollyCell;
            }
        }
        
        public DXCell UICarlsenMagnusCell
        {
            get
            {
                if ((this.mUICarlsenMagnusCell == null))
                {
                    this.mUICarlsenMagnusCell = new DXCell(this);
                    #region Search Criteria
                    this.mUICarlsenMagnusCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]2[Column]colE" +
                        "mployee";
                    this.mUICarlsenMagnusCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUICarlsenMagnusCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUICarlsenMagnusCell;
            }
        }
        
        public DXCell UIUlneUlfCell1
        {
            get
            {
                if ((this.mUIUlneUlfCell1 == null))
                {
                    this.mUIUlneUlfCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIUlneUlfCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]13[Column]col" +
                        "Employee";
                    this.mUIUlneUlfCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIUlneUlfCell1.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIUlneUlfCell1;
            }
        }
        
        public DXCell UIUlneUlfCell2
        {
            get
            {
                if ((this.mUIUlneUlfCell2 == null))
                {
                    this.mUIUlneUlfCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIUlneUlfCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]18[Column]col" +
                        "Employee";
                    this.mUIUlneUlfCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIUlneUlfCell2.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIUlneUlfCell2;
            }
        }
        
        public DXCell UIAAssistentCell
        {
            get
            {
                if ((this.mUIAAssistentCell == null))
                {
                    this.mUIAAssistentCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAAssistentCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]18[Column]col" +
                        "PositionCategory";
                    this.mUIAAssistentCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAAssistentCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAAssistentCell;
            }
        }
        
        public DXCell UIUlneUlfCell3
        {
            get
            {
                if ((this.mUIUlneUlfCell3 == null))
                {
                    this.mUIUlneUlfCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIUlneUlfCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]19[Column]col" +
                        "Employee";
                    this.mUIUlneUlfCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIUlneUlfCell3.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIUlneUlfCell3;
            }
        }
        
        public DXCell UIDDagtidspersonellCell
        {
            get
            {
                if ((this.mUIDDagtidspersonellCell == null))
                {
                    this.mUIDDagtidspersonellCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDDagtidspersonellCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]19[Column]col" +
                        "PositionCategory";
                    this.mUIDDagtidspersonellCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDDagtidspersonellCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIDDagtidspersonellCell;
            }
        }
        
        public DXCell UIItem5000Cell
        {
            get
            {
                if ((this.mUIItem5000Cell == null))
                {
                    this.mUIItem5000Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5000Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]18[Column]col" +
                        "PositionPercent";
                    this.mUIItem5000Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5000Cell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIItem5000Cell;
            }
        }
        
        public DXCell UIItem2500Cell
        {
            get
            {
                if ((this.mUIItem2500Cell == null))
                {
                    this.mUIItem2500Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2500Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]19[Column]col" +
                        "PositionPercent";
                    this.mUIItem2500Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2500Cell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIItem2500Cell;
            }
        }
        
        public DXCell UIItem1Cell
        {
            get
            {
                if ((this.mUIItem1Cell == null))
                {
                    this.mUIItem1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]18[Column]col" +
                        "InternalPositionNumber";
                    this.mUIItem1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1Cell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIItem1Cell;
            }
        }
        
        public DXCell UIItem2Cell
        {
            get
            {
                if ((this.mUIItem2Cell == null))
                {
                    this.mUIItem2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]19[Column]col" +
                        "InternalPositionNumber";
                    this.mUIItem2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2Cell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIItem2Cell;
            }
        }
        
        public DXCell UIOlsenBrorCell
        {
            get
            {
                if ((this.mUIOlsenBrorCell == null))
                {
                    this.mUIOlsenBrorCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOlsenBrorCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]9[Column]colE" +
                        "mployee";
                    this.mUIOlsenBrorCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOlsenBrorCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIOlsenBrorCell;
            }
        }
        
        public DXCell UIHansenHenrietteCell
        {
            get
            {
                if ((this.mUIHansenHenrietteCell == null))
                {
                    this.mUIHansenHenrietteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHansenHenrietteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]5[Column]colE" +
                        "mployee";
                    this.mUIHansenHenrietteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHansenHenrietteCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIHansenHenrietteCell;
            }
        }
        
        public DXCell UIAbrahamsenTrondCell
        {
            get
            {
                if ((this.mUIAbrahamsenTrondCell == null))
                {
                    this.mUIAbrahamsenTrondCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAbrahamsenTrondCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDepartmentEmployeesGridControlCell[View]gvDepartmentEmployees[Row]0[Column]colE" +
                        "mployee";
                    this.mUIAbrahamsenTrondCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAbrahamsenTrondCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAbrahamsenTrondCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAndersenAstridCell;
        
        private DXCell mUIBronsonCharlieCell;
        
        private DXCell mUIUlneUlfCell;
        
        private DXCell mUIDaleneDollyCell;
        
        private DXCell mUICarlsenMagnusCell;
        
        private DXCell mUIUlneUlfCell1;
        
        private DXCell mUIUlneUlfCell2;
        
        private DXCell mUIAAssistentCell;
        
        private DXCell mUIUlneUlfCell3;
        
        private DXCell mUIDDagtidspersonellCell;
        
        private DXCell mUIItem5000Cell;
        
        private DXCell mUIItem2500Cell;
        
        private DXCell mUIItem1Cell;
        
        private DXCell mUIItem2Cell;
        
        private DXCell mUIOlsenBrorCell;
        
        private DXCell mUIHansenHenrietteCell;
        
        private DXCell mUIAbrahamsenTrondCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeftAutoHideContaineClient : DXTestControl
    {
        
        public UILeftAutoHideContaineClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "LeftAutoHideContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AutoHideContainer";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXButton UIUtvalgsalternativerButton
        {
            get
            {
                if ((this.mUIUtvalgsalternativerButton == null))
                {
                    this.mUIUtvalgsalternativerButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIUtvalgsalternativerButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Utvalgsalternativer";
                    this.mUIUtvalgsalternativerButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AutoHideContainerButton";
                    this.mUIUtvalgsalternativerButton.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIUtvalgsalternativerButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIUtvalgsalternativerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAutoHideControlClient : DXTestControl
    {
        
        public UIAutoHideControlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "LeftAutoHideControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AutoHideControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIDpDepartmentSelectorDockPanel UIDpDepartmentSelectorDockPanel
        {
            get
            {
                if ((this.mUIDpDepartmentSelectorDockPanel == null))
                {
                    this.mUIDpDepartmentSelectorDockPanel = new UIDpDepartmentSelectorDockPanel(this);
                }
                return this.mUIDpDepartmentSelectorDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpDepartmentSelectorDockPanel mUIDpDepartmentSelectorDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpDepartmentSelectorDockPanel : DXDockPanel
    {
        
        public UIDpDepartmentSelectorDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpDepartmentSelector";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIDepartmentSelectorCoCustom UIDepartmentSelectorCoCustom
        {
            get
            {
                if ((this.mUIDepartmentSelectorCoCustom == null))
                {
                    this.mUIDepartmentSelectorCoCustom = new UIDepartmentSelectorCoCustom(this);
                }
                return this.mUIDepartmentSelectorCoCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDepartmentSelectorCoCustom mUIDepartmentSelectorCoCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentSelectorCoCustom : DXTestControl
    {
        
        public UIDepartmentSelectorCoCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "departmentSelectorContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UICeDoIncludeExistingECheckBox
        {
            get
            {
                if ((this.mUICeDoIncludeExistingECheckBox == null))
                {
                    this.mUICeDoIncludeExistingECheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUICeDoIncludeExistingECheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ceDoIncludeExistingEmployees";
                    this.mUICeDoIncludeExistingECheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
                    this.mUICeDoIncludeExistingECheckBox.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUICeDoIncludeExistingECheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUICeDoIncludeExistingECheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISelectPlanEmployeesVCustom : DXTestControl
    {
        
        public UISelectPlanEmployeesVCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SelectPlanEmployeesView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SelectPlanEmployeesView";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentContainerClient1 UIPcContentContainerClient
        {
            get
            {
                if ((this.mUIPcContentContainerClient == null))
                {
                    this.mUIPcContentContainerClient = new UIPcContentContainerClient1(this);
                }
                return this.mUIPcContentContainerClient;
            }
        }
        
        public UILeftAutoHideContaineClient1 UILeftAutoHideContaineClient
        {
            get
            {
                if ((this.mUILeftAutoHideContaineClient == null))
                {
                    this.mUILeftAutoHideContaineClient = new UILeftAutoHideContaineClient1(this);
                }
                return this.mUILeftAutoHideContaineClient;
            }
        }
        
        public UIAutoHideControlClient1 UIAutoHideControlClient
        {
            get
            {
                if ((this.mUIAutoHideControlClient == null))
                {
                    this.mUIAutoHideControlClient = new UIAutoHideControlClient1(this);
                }
                return this.mUIAutoHideControlClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentContainerClient1 mUIPcContentContainerClient;
        
        private UILeftAutoHideContaineClient1 mUILeftAutoHideContaineClient;
        
        private UIAutoHideControlClient1 mUIAutoHideControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentContainerClient1 : DXTestControl
    {
        
        public UIPcContentContainerClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContentContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIPcContentClient2 UIPcContentClient
        {
            get
            {
                if ((this.mUIPcContentClient == null))
                {
                    this.mUIPcContentClient = new UIPcContentClient2(this);
                }
                return this.mUIPcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcContentClient2 mUIPcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcContentClient2 : DXTestControl
    {
        
        public UIPcContentClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIGcPlanEmployeesTable UIGcPlanEmployeesTable
        {
            get
            {
                if ((this.mUIGcPlanEmployeesTable == null))
                {
                    this.mUIGcPlanEmployeesTable = new UIGcPlanEmployeesTable(this);
                }
                return this.mUIGcPlanEmployeesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcPlanEmployeesTable mUIGcPlanEmployeesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcPlanEmployeesTable : DXGrid
    {
        
        public UIGcPlanEmployeesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXCell UIHansenHenrietteCell
        {
            get
            {
                if ((this.mUIHansenHenrietteCell == null))
                {
                    this.mUIHansenHenrietteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHansenHenrietteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanEmployeesGridControlCell[View]gvPlanEmployees[Row]0[Column]colEmployee";
                    this.mUIHansenHenrietteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHansenHenrietteCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIHansenHenrietteCell;
            }
        }
        
        public DXCell UIItem5010ArbeidsplanoCell
        {
            get
            {
                if ((this.mUIItem5010ArbeidsplanoCell == null))
                {
                    this.mUIItem5010ArbeidsplanoCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5010ArbeidsplanoCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanEmployeesGridControlCell[View]gvPlanEmployees[Row]0[Column]colDepartment";
                    this.mUIItem5010ArbeidsplanoCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5010ArbeidsplanoCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIItem5010ArbeidsplanoCell;
            }
        }
        
        public DXCell UIHansenHenrietteCell1
        {
            get
            {
                if ((this.mUIHansenHenrietteCell1 == null))
                {
                    this.mUIHansenHenrietteCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIHansenHenrietteCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanEmployeesGridControlCell[View]gvPlanEmployees[Row]1[Column]colEmployee";
                    this.mUIHansenHenrietteCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHansenHenrietteCell1.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIHansenHenrietteCell1;
            }
        }
        
        public DXCell UIItem5010ArbeidsplanoCell1
        {
            get
            {
                if ((this.mUIItem5010ArbeidsplanoCell1 == null))
                {
                    this.mUIItem5010ArbeidsplanoCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5010ArbeidsplanoCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanEmployeesGridControlCell[View]gvPlanEmployees[Row]1[Column]colDepartment";
                    this.mUIItem5010ArbeidsplanoCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5010ArbeidsplanoCell1.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIItem5010ArbeidsplanoCell1;
            }
        }
        
        public DXCell UIAbrahamsenTrondCell
        {
            get
            {
                if ((this.mUIAbrahamsenTrondCell == null))
                {
                    this.mUIAbrahamsenTrondCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAbrahamsenTrondCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanEmployeesGridControlCell[View]gvPlanEmployees[Row]2[Column]colEmployee";
                    this.mUIAbrahamsenTrondCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAbrahamsenTrondCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIAbrahamsenTrondCell;
            }
        }
        
        public DXCell UIItem5040MasterplanmaCell
        {
            get
            {
                if ((this.mUIItem5040MasterplanmaCell == null))
                {
                    this.mUIItem5040MasterplanmaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5040MasterplanmaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanEmployeesGridControlCell[View]gvPlanEmployees[Row]2[Column]colDepartment";
                    this.mUIItem5040MasterplanmaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5040MasterplanmaCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIItem5040MasterplanmaCell;
            }
        }
        
        public DXCell UIBergMagnusCell
        {
            get
            {
                if ((this.mUIBergMagnusCell == null))
                {
                    this.mUIBergMagnusCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBergMagnusCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanEmployeesGridControlCell[View]gvPlanEmployees[Row]3[Column]colEmployee";
                    this.mUIBergMagnusCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBergMagnusCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIBergMagnusCell;
            }
        }
        
        public DXCell UIItem5040MasterplanmaCell1
        {
            get
            {
                if ((this.mUIItem5040MasterplanmaCell1 == null))
                {
                    this.mUIItem5040MasterplanmaCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5040MasterplanmaCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanEmployeesGridControlCell[View]gvPlanEmployees[Row]3[Column]colDepartment";
                    this.mUIItem5040MasterplanmaCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5040MasterplanmaCell1.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIItem5040MasterplanmaCell1;
            }
        }
        
        public DXCell UIGcPlanEmployeesGridCCell
        {
            get
            {
                if ((this.mUIGcPlanEmployeesGridCCell == null))
                {
                    this.mUIGcPlanEmployeesGridCCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGcPlanEmployeesGridCCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlanEmployeesGridControlCell[View]gvPlanEmployees[Row]0[Column]colToDate";
                    this.mUIGcPlanEmployeesGridCCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGcPlanEmployeesGridCCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIGcPlanEmployeesGridCCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIHansenHenrietteCell;
        
        private DXCell mUIItem5010ArbeidsplanoCell;
        
        private DXCell mUIHansenHenrietteCell1;
        
        private DXCell mUIItem5010ArbeidsplanoCell1;
        
        private DXCell mUIAbrahamsenTrondCell;
        
        private DXCell mUIItem5040MasterplanmaCell;
        
        private DXCell mUIBergMagnusCell;
        
        private DXCell mUIItem5040MasterplanmaCell1;
        
        private DXCell mUIGcPlanEmployeesGridCCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeftAutoHideContaineClient1 : DXTestControl
    {
        
        public UILeftAutoHideContaineClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "LeftAutoHideContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AutoHideContainer";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXButton UIUtvalgsalternativerButton
        {
            get
            {
                if ((this.mUIUtvalgsalternativerButton == null))
                {
                    this.mUIUtvalgsalternativerButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIUtvalgsalternativerButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Utvalgsalternativer";
                    this.mUIUtvalgsalternativerButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AutoHideContainerButton";
                    this.mUIUtvalgsalternativerButton.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIUtvalgsalternativerButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIUtvalgsalternativerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAutoHideControlClient1 : DXTestControl
    {
        
        public UIAutoHideControlClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "LeftAutoHideControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AutoHideControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIDpPlanSelectorDockPanel UIDpPlanSelectorDockPanel
        {
            get
            {
                if ((this.mUIDpPlanSelectorDockPanel == null))
                {
                    this.mUIDpPlanSelectorDockPanel = new UIDpPlanSelectorDockPanel(this);
                }
                return this.mUIDpPlanSelectorDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDpPlanSelectorDockPanel mUIDpPlanSelectorDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpPlanSelectorDockPanel : DXDockPanel
    {
        
        public UIDpPlanSelectorDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpPlanSelector";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIDpContainerCustom UIDpContainerCustom
        {
            get
            {
                if ((this.mUIDpContainerCustom == null))
                {
                    this.mUIDpContainerCustom = new UIDpContainerCustom(this);
                }
                return this.mUIDpContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDpContainerCustom mUIDpContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpContainerCustom : DXTestControl
    {
        
        public UIDpContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public UIGcAvailablePlansTable UIGcAvailablePlansTable
        {
            get
            {
                if ((this.mUIGcAvailablePlansTable == null))
                {
                    this.mUIGcAvailablePlansTable = new UIGcAvailablePlansTable(this);
                }
                return this.mUIGcAvailablePlansTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAvailablePlansTable mUIGcAvailablePlansTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAvailablePlansTable : DXGrid
    {
        
        public UIGcAvailablePlansTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAvailablePlans";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Legg til ansatte");
            #endregion
        }
        
        #region Properties
        public DXCell UIFranzenCell
        {
            get
            {
                if ((this.mUIFranzenCell == null))
                {
                    this.mUIFranzenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFranzenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAvailablePlansGridControlCell[View]gvAvailablePlans[Row]0[Column]colName";
                    this.mUIFranzenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFranzenCell.WindowTitles.Add("Legg til ansatte");
                    #endregion
                }
                return this.mUIFranzenCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIFranzenCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIPnlRosterPlanClient1 UIPnlRosterPlanClient1
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient1 == null))
                {
                    this.mUIPnlRosterPlanClient1 = new UIPnlRosterPlanClient1(this);
                }
                return this.mUIPnlRosterPlanClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        
        private UIPnlRosterPlanClient1 mUIPnlRosterPlanClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        
        public UIDpnlColumnsDockPanel UIDpnlColumnsDockPanel
        {
            get
            {
                if ((this.mUIDpnlColumnsDockPanel == null))
                {
                    this.mUIDpnlColumnsDockPanel = new UIDpnlColumnsDockPanel(this);
                }
                return this.mUIDpnlColumnsDockPanel;
            }
        }
        
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        
        private UIDpnlColumnsDockPanel mUIDpnlColumnsDockPanel;
        
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAndersenAstridCell
        {
            get
            {
                if ((this.mUIAndersenAstridCell == null))
                {
                    this.mUIAndersenAstridCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_EmployeeName";
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAndersenAstridCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAndersenAstridCell;
            }
        }
        
        public DXCell UIBetongBillyCell
        {
            get
            {
                if ((this.mUIBetongBillyCell == null))
                {
                    this.mUIBetongBillyCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBetongBillyCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]Col_EmployeeName";
                    this.mUIBetongBillyCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBetongBillyCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBetongBillyCell;
            }
        }
        
        public DXCell UIBronsonCharlieCell
        {
            get
            {
                if ((this.mUIBronsonCharlieCell == null))
                {
                    this.mUIBronsonCharlieCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBronsonCharlieCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]Col_EmployeeName";
                    this.mUIBronsonCharlieCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBronsonCharlieCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBronsonCharlieCell;
            }
        }
        
        public DXCell UIDaleneDollyCell
        {
            get
            {
                if ((this.mUIDaleneDollyCell == null))
                {
                    this.mUIDaleneDollyCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDaleneDollyCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]Col_EmployeeName";
                    this.mUIDaleneDollyCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDaleneDollyCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDaleneDollyCell;
            }
        }
        
        public DXCell UIEriksrødErikaCell
        {
            get
            {
                if ((this.mUIEriksrødErikaCell == null))
                {
                    this.mUIEriksrødErikaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIEriksrødErikaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]Col_EmployeeName";
                    this.mUIEriksrødErikaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIEriksrødErikaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIEriksrødErikaCell;
            }
        }
        
        public DXCell UIBetongBillyCell1
        {
            get
            {
                if ((this.mUIBetongBillyCell1 == null))
                {
                    this.mUIBetongBillyCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIBetongBillyCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]Col_EmployeeName";
                    this.mUIBetongBillyCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBetongBillyCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBetongBillyCell1;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_0";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]RosterCell_4";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit == null))
                {
                    this.mUIRow3ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_0";
                    this.mUIRow3ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_4";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit == null))
                {
                    this.mUIRow2ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIRow2ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_4";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit == null))
                {
                    this.mUIRow1ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIRow1ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_4";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit == null))
                {
                    this.mUIRow0ColumnRosterCellEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIRow0ColumnRosterCellEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_6";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]RosterCell_6";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_6";
                    this.mUIRow2ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell10
        {
            get
            {
                if ((this.mUIItemCell10 == null))
                {
                    this.mUIItemCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell10;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_6";
                    this.mUIRow0ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_6";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_6";
                    this.mUIRow1ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_9";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXCell UIItemCell13
        {
            get
            {
                if ((this.mUIItemCell13 == null))
                {
                    this.mUIItemCell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]RosterCell_9";
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell13;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit1
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit1 == null))
                {
                    this.mUIRow3ColumnRosterCellEdit1 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_9";
                    this.mUIRow3ColumnRosterCellEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit1;
            }
        }
        
        public DXCell UIItemCell14
        {
            get
            {
                if ((this.mUIItemCell14 == null))
                {
                    this.mUIItemCell14 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_10";
                    this.mUIItemCell14.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell14.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell14;
            }
        }
        
        public DXCell UIItemCell15
        {
            get
            {
                if ((this.mUIItemCell15 == null))
                {
                    this.mUIItemCell15 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]RosterCell_10";
                    this.mUIItemCell15.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell15.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell15;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow3ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_10";
                    this.mUIRow3ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell16
        {
            get
            {
                if ((this.mUIItemCell16 == null))
                {
                    this.mUIItemCell16 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_11";
                    this.mUIItemCell16.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell16.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell16;
            }
        }
        
        public DXCell UIItemCell17
        {
            get
            {
                if ((this.mUIItemCell17 == null))
                {
                    this.mUIItemCell17 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]RosterCell_11";
                    this.mUIItemCell17.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell17.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell17;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow3ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_11";
                    this.mUIRow3ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIItemCell18
        {
            get
            {
                if ((this.mUIItemCell18 == null))
                {
                    this.mUIItemCell18 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell18.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_9";
                    this.mUIItemCell18.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell18.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell18;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_9";
                    this.mUIRow2ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell19
        {
            get
            {
                if ((this.mUIItemCell19 == null))
                {
                    this.mUIItemCell19 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell19.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_9";
                    this.mUIItemCell19.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell19.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell19;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit2
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit2 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit2 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_9";
                    this.mUIRow1ColumnRosterCellEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit2;
            }
        }
        
        public DXCell UIItemCell20
        {
            get
            {
                if ((this.mUIItemCell20 == null))
                {
                    this.mUIItemCell20 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell20.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_9";
                    this.mUIItemCell20.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell20.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell20;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_9";
                    this.mUIRow0ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIItemCell21
        {
            get
            {
                if ((this.mUIItemCell21 == null))
                {
                    this.mUIItemCell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_10";
                    this.mUIItemCell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell21.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell21;
            }
        }
        
        public DXCell UIItemCell22
        {
            get
            {
                if ((this.mUIItemCell22 == null))
                {
                    this.mUIItemCell22 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_11";
                    this.mUIItemCell22.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell22.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell22;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_10";
                    this.mUIRow0ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit4;
            }
        }
        
        public DXCell UIItemCell23
        {
            get
            {
                if ((this.mUIItemCell23 == null))
                {
                    this.mUIItemCell23 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell23.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_10";
                    this.mUIItemCell23.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell23.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell23;
            }
        }
        
        public DXCell UIItemCell24
        {
            get
            {
                if ((this.mUIItemCell24 == null))
                {
                    this.mUIItemCell24 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell24.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_11";
                    this.mUIItemCell24.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell24.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell24;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_10";
                    this.mUIRow1ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIItemCell25
        {
            get
            {
                if ((this.mUIItemCell25 == null))
                {
                    this.mUIItemCell25 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell25.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_10";
                    this.mUIItemCell25.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell25.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell25;
            }
        }
        
        public DXCell UIItemCell26
        {
            get
            {
                if ((this.mUIItemCell26 == null))
                {
                    this.mUIItemCell26 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell26.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_11";
                    this.mUIItemCell26.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell26.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell26;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit3
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit3 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit3 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_10";
                    this.mUIRow2ColumnRosterCellEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit3;
            }
        }
        
        public DXCell UIItemCell27
        {
            get
            {
                if ((this.mUIItemCell27 == null))
                {
                    this.mUIItemCell27 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell27.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_13";
                    this.mUIItemCell27.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell27.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell27;
            }
        }
        
        public DXCell UIItemCell28
        {
            get
            {
                if ((this.mUIItemCell28 == null))
                {
                    this.mUIItemCell28 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell28.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_14";
                    this.mUIItemCell28.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell28.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell28;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit5
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit5 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit5 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_13";
                    this.mUIRow0ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit5;
            }
        }
        
        public DXCell UIItemCell29
        {
            get
            {
                if ((this.mUIItemCell29 == null))
                {
                    this.mUIItemCell29 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell29.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_13";
                    this.mUIItemCell29.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell29.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell29;
            }
        }
        
        public DXCell UIItemCell30
        {
            get
            {
                if ((this.mUIItemCell30 == null))
                {
                    this.mUIItemCell30 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell30.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_14";
                    this.mUIItemCell30.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell30.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell30;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_13";
                    this.mUIRow1ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit4;
            }
        }
        
        public DXCell UIItemCell31
        {
            get
            {
                if ((this.mUIItemCell31 == null))
                {
                    this.mUIItemCell31 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_13";
                    this.mUIItemCell31.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell31.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell31;
            }
        }
        
        public DXCell UIItemCell32
        {
            get
            {
                if ((this.mUIItemCell32 == null))
                {
                    this.mUIItemCell32 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell32.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_14";
                    this.mUIItemCell32.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell32.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell32;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_13";
                    this.mUIRow2ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit4;
            }
        }
        
        public DXCell UIItemCell33
        {
            get
            {
                if ((this.mUIItemCell33 == null))
                {
                    this.mUIItemCell33 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell33.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_13";
                    this.mUIItemCell33.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell33.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell33;
            }
        }
        
        public DXCell UIItemCell34
        {
            get
            {
                if ((this.mUIItemCell34 == null))
                {
                    this.mUIItemCell34 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell34.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]RosterCell_14";
                    this.mUIItemCell34.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell34.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell34;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit4
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit4 == null))
                {
                    this.mUIRow3ColumnRosterCellEdit4 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_13";
                    this.mUIRow3ColumnRosterCellEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit4;
            }
        }
        
        public DXCell UIItemCell35
        {
            get
            {
                if ((this.mUIItemCell35 == null))
                {
                    this.mUIItemCell35 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell35.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_20";
                    this.mUIItemCell35.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell35.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell35;
            }
        }
        
        public DXTextEdit UIRow0ColumnRosterCellEdit6
        {
            get
            {
                if ((this.mUIRow0ColumnRosterCellEdit6 == null))
                {
                    this.mUIRow0ColumnRosterCellEdit6 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow0ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]0[Column]RosterCell_20";
                    this.mUIRow0ColumnRosterCellEdit6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow0ColumnRosterCellEdit6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow0ColumnRosterCellEdit6;
            }
        }
        
        public DXCell UIItemCell36
        {
            get
            {
                if ((this.mUIItemCell36 == null))
                {
                    this.mUIItemCell36 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell36.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_20";
                    this.mUIItemCell36.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell36.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell36;
            }
        }
        
        public DXTextEdit UIRow1ColumnRosterCellEdit8
        {
            get
            {
                if ((this.mUIRow1ColumnRosterCellEdit8 == null))
                {
                    this.mUIRow1ColumnRosterCellEdit8 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow1ColumnRosterCellEdit8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]1[Column]RosterCell_20";
                    this.mUIRow1ColumnRosterCellEdit8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow1ColumnRosterCellEdit8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow1ColumnRosterCellEdit8;
            }
        }
        
        public DXCell UIItemCell37
        {
            get
            {
                if ((this.mUIItemCell37 == null))
                {
                    this.mUIItemCell37 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell37.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_20";
                    this.mUIItemCell37.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell37.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell37;
            }
        }
        
        public DXTextEdit UIRow2ColumnRosterCellEdit5
        {
            get
            {
                if ((this.mUIRow2ColumnRosterCellEdit5 == null))
                {
                    this.mUIRow2ColumnRosterCellEdit5 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow2ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]2[Column]RosterCell_20";
                    this.mUIRow2ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow2ColumnRosterCellEdit5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow2ColumnRosterCellEdit5;
            }
        }
        
        public DXCell UIItemCell38
        {
            get
            {
                if ((this.mUIItemCell38 == null))
                {
                    this.mUIItemCell38 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell38.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_20";
                    this.mUIItemCell38.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell38.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell38;
            }
        }
        
        public DXCell UIItemCell39
        {
            get
            {
                if ((this.mUIItemCell39 == null))
                {
                    this.mUIItemCell39 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell39.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]RosterCell_20";
                    this.mUIItemCell39.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell39.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell39;
            }
        }
        
        public DXTextEdit UIRow3ColumnRosterCellEdit5
        {
            get
            {
                if ((this.mUIRow3ColumnRosterCellEdit5 == null))
                {
                    this.mUIRow3ColumnRosterCellEdit5 = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow3ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]3[Column]RosterCell_20";
                    this.mUIRow3ColumnRosterCellEdit5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow3ColumnRosterCellEdit5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow3ColumnRosterCellEdit5;
            }
        }
        
        public DXCell UIItemCell40
        {
            get
            {
                if ((this.mUIItemCell40 == null))
                {
                    this.mUIItemCell40 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell40.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_6";
                    this.mUIItemCell40.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell40.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell40;
            }
        }
        
        public DXCell UID1Cell
        {
            get
            {
                if ((this.mUID1Cell == null))
                {
                    this.mUID1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUID1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]RosterCell_10";
                    this.mUID1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID1Cell;
            }
        }
        
        public DXCell UIN2Cell
        {
            get
            {
                if ((this.mUIN2Cell == null))
                {
                    this.mUIN2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]RosterCell_14";
                    this.mUIN2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell;
            }
        }
        
        public DXCell UID1Cell1
        {
            get
            {
                if ((this.mUID1Cell1 == null))
                {
                    this.mUID1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUID1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]9[Column]RosterCell_11";
                    this.mUID1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID1Cell1;
            }
        }
        
        public DXCell UIN2Cell1
        {
            get
            {
                if ((this.mUIN2Cell1 == null))
                {
                    this.mUIN2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIN2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]9[Column]RosterCell_13";
                    this.mUIN2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIN2Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIN2Cell1;
            }
        }
        
        public DXCell UIA3Cell
        {
            get
            {
                if ((this.mUIA3Cell == null))
                {
                    this.mUIA3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIA3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]9[Column]RosterCell_20";
                    this.mUIA3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIA3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIA3Cell;
            }
        }
        
        public DXCell UIItemCell110
        {
            get
            {
                if ((this.mUIItemCell110 == null))
                {
                    this.mUIItemCell110 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell110.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_27";
                    this.mUIItemCell110.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell110.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell110;
            }
        }
        
        public DXCell UID1Cell2
        {
            get
            {
                if ((this.mUID1Cell2 == null))
                {
                    this.mUID1Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUID1Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]13[Column]RosterCell_0";
                    this.mUID1Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID1Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID1Cell2;
            }
        }
        
        public DXCell UID1Cell11
        {
            get
            {
                if ((this.mUID1Cell11 == null))
                {
                    this.mUID1Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUID1Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]13[Column]RosterCell_20";
                    this.mUID1Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUID1Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUID1Cell11;
            }
        }
        
        public DXTextEdit UIRow13ColumnRosterCelEdit
        {
            get
            {
                if ((this.mUIRow13ColumnRosterCelEdit == null))
                {
                    this.mUIRow13ColumnRosterCelEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIRow13ColumnRosterCelEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanTextEdit[View]gvRosterPlan[Row]13[Column]RosterCell_0";
                    this.mUIRow13ColumnRosterCelEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    this.mUIRow13ColumnRosterCelEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRow13ColumnRosterCelEdit;
            }
        }
        
        public DXCell UIItemCell111
        {
            get
            {
                if ((this.mUIItemCell111 == null))
                {
                    this.mUIItemCell111 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell111.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_41";
                    this.mUIItemCell111.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell111.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell111;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAndersenAstridCell;
        
        private DXCell mUIBetongBillyCell;
        
        private DXCell mUIBronsonCharlieCell;
        
        private DXCell mUIDaleneDollyCell;
        
        private DXCell mUIEriksrødErikaCell;
        
        private DXCell mUIBetongBillyCell1;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItemCell3;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell5;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIItemCell7;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit;
        
        private DXCell mUIItemCell8;
        
        private DXCell mUIItemCell9;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell10;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell11;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell12;
        
        private DXCell mUIItemCell13;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit1;
        
        private DXCell mUIItemCell14;
        
        private DXCell mUIItemCell15;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell16;
        
        private DXCell mUIItemCell17;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit3;
        
        private DXCell mUIItemCell18;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell19;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit2;
        
        private DXCell mUIItemCell20;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit3;
        
        private DXCell mUIItemCell21;
        
        private DXCell mUIItemCell22;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit4;
        
        private DXCell mUIItemCell23;
        
        private DXCell mUIItemCell24;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit3;
        
        private DXCell mUIItemCell25;
        
        private DXCell mUIItemCell26;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit3;
        
        private DXCell mUIItemCell27;
        
        private DXCell mUIItemCell28;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit5;
        
        private DXCell mUIItemCell29;
        
        private DXCell mUIItemCell30;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit4;
        
        private DXCell mUIItemCell31;
        
        private DXCell mUIItemCell32;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit4;
        
        private DXCell mUIItemCell33;
        
        private DXCell mUIItemCell34;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit4;
        
        private DXCell mUIItemCell35;
        
        private DXTextEdit mUIRow0ColumnRosterCellEdit6;
        
        private DXCell mUIItemCell36;
        
        private DXTextEdit mUIRow1ColumnRosterCellEdit8;
        
        private DXCell mUIItemCell37;
        
        private DXTextEdit mUIRow2ColumnRosterCellEdit5;
        
        private DXCell mUIItemCell38;
        
        private DXCell mUIItemCell39;
        
        private DXTextEdit mUIRow3ColumnRosterCellEdit5;
        
        private DXCell mUIItemCell40;
        
        private DXCell mUID1Cell;
        
        private DXCell mUIN2Cell;
        
        private DXCell mUID1Cell1;
        
        private DXCell mUIN2Cell1;
        
        private DXCell mUIA3Cell;
        
        private DXCell mUIItemCell110;
        
        private DXCell mUID1Cell2;
        
        private DXCell mUID1Cell11;
        
        private DXTextEdit mUIRow13ColumnRosterCelEdit;
        
        private DXCell mUIItemCell111;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlColumnsDockPanel : DXDockPanel
    {
        
        public UIDpnlColumnsDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlColumns";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            #endregion
        }
        
        #region Properties
        public UIDockPanel1_ContainerCustom UIDockPanel1_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel1_ContainerCustom == null))
                {
                    this.mUIDockPanel1_ContainerCustom = new UIDockPanel1_ContainerCustom(this);
                }
                return this.mUIDockPanel1_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel1_ContainerCustom mUIDockPanel1_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel1_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel1_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel1_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            #endregion
        }
        
        #region Properties
        public UIGcExtraGridTable UIGcExtraGridTable
        {
            get
            {
                if ((this.mUIGcExtraGridTable == null))
                {
                    this.mUIGcExtraGridTable = new UIGcExtraGridTable(this);
                }
                return this.mUIGcExtraGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcExtraGridTable mUIGcExtraGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcExtraGridTable : DXGrid
    {
        
        public UIGcExtraGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            #endregion
        }
        
        #region Properties
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]Col_F3Calc";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        
        public DXCell UIACell1
        {
            get
            {
                if ((this.mUIACell1 == null))
                {
                    this.mUIACell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]Col_F3Calc";
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell1;
            }
        }
        
        public DXCell UIACell2
        {
            get
            {
                if ((this.mUIACell2 == null))
                {
                    this.mUIACell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]Col_F3Calc";
                    this.mUIACell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell2;
            }
        }
        
        public DXCell UIGCell
        {
            get
            {
                if ((this.mUIGCell == null))
                {
                    this.mUIGCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]Col_F3Calc";
                    this.mUIGCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell;
            }
        }
        
        public DXCell UIACell3
        {
            get
            {
                if ((this.mUIACell3 == null))
                {
                    this.mUIACell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]Col_F3Calc";
                    this.mUIACell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell3;
            }
        }
        
        public DXCell UIGCell1
        {
            get
            {
                if ((this.mUIGCell1 == null))
                {
                    this.mUIGCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]Col_F3Calc";
                    this.mUIGCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell1;
            }
        }
        
        public DXCell UIGCell2
        {
            get
            {
                if ((this.mUIGCell2 == null))
                {
                    this.mUIGCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]Col_F3Calc";
                    this.mUIGCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell2;
            }
        }
        
        public DXCell UIGCell3
        {
            get
            {
                if ((this.mUIGCell3 == null))
                {
                    this.mUIGCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]Col_F3Calc";
                    this.mUIGCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGCell3;
            }
        }
        
        public DXCell UIACell4
        {
            get
            {
                if ((this.mUIACell4 == null))
                {
                    this.mUIACell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]17[Column]Col_F3Calc";
                    this.mUIACell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell4;
            }
        }
        
        public DXCell UIACell5
        {
            get
            {
                if ((this.mUIACell5 == null))
                {
                    this.mUIACell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]18[Column]Col_F3Calc";
                    this.mUIACell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell5;
            }
        }
        
        public DXCell UIACell6
        {
            get
            {
                if ((this.mUIACell6 == null))
                {
                    this.mUIACell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]20[Column]Col_F3Calc";
                    this.mUIACell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell6;
            }
        }
        
        public DXCell UIACell7
        {
            get
            {
                if ((this.mUIACell7 == null))
                {
                    this.mUIACell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]22[Column]Col_F3Calc";
                    this.mUIACell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell7;
            }
        }
        
        public DXCell UIACell8
        {
            get
            {
                if ((this.mUIACell8 == null))
                {
                    this.mUIACell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]24[Column]Col_F3Calc";
                    this.mUIACell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell8;
            }
        }
        
        public DXCell UIItem5av6Cell
        {
            get
            {
                if ((this.mUIItem5av6Cell == null))
                {
                    this.mUIItem5av6Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]Col_SH";
                    this.mUIItem5av6Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell;
            }
        }
        
        public DXCell UIItem5av6Cell1
        {
            get
            {
                if ((this.mUIItem5av6Cell1 == null))
                {
                    this.mUIItem5av6Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]Col_SH";
                    this.mUIItem5av6Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell1;
            }
        }
        
        public DXCell UIItem5av6Cell2
        {
            get
            {
                if ((this.mUIItem5av6Cell2 == null))
                {
                    this.mUIItem5av6Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]Col_SH";
                    this.mUIItem5av6Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell2;
            }
        }
        
        public DXCell UIItem5av6Cell3
        {
            get
            {
                if ((this.mUIItem5av6Cell3 == null))
                {
                    this.mUIItem5av6Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]Col_SH";
                    this.mUIItem5av6Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell3;
            }
        }
        
        public DXCell UIItem2av6Cell
        {
            get
            {
                if ((this.mUIItem2av6Cell == null))
                {
                    this.mUIItem2av6Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2av6Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]Col_SH";
                    this.mUIItem2av6Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2av6Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2av6Cell;
            }
        }
        
        public DXCell UIItem5av6Cell4
        {
            get
            {
                if ((this.mUIItem5av6Cell4 == null))
                {
                    this.mUIItem5av6Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]Col_SH";
                    this.mUIItem5av6Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell4;
            }
        }
        
        public DXCell UIItem5av6Cell5
        {
            get
            {
                if ((this.mUIItem5av6Cell5 == null))
                {
                    this.mUIItem5av6Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]Col_SH";
                    this.mUIItem5av6Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell5;
            }
        }
        
        public DXCell UIItem5av6Cell6
        {
            get
            {
                if ((this.mUIItem5av6Cell6 == null))
                {
                    this.mUIItem5av6Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]Col_SH";
                    this.mUIItem5av6Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell6;
            }
        }
        
        public DXCell UIItem5av6Cell7
        {
            get
            {
                if ((this.mUIItem5av6Cell7 == null))
                {
                    this.mUIItem5av6Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]17[Column]Col_SH";
                    this.mUIItem5av6Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell7;
            }
        }
        
        public DXCell UIItem5av6Cell8
        {
            get
            {
                if ((this.mUIItem5av6Cell8 == null))
                {
                    this.mUIItem5av6Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]Col_SH";
                    this.mUIItem5av6Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell8;
            }
        }
        
        public DXCell UIItem5av6Cell9
        {
            get
            {
                if ((this.mUIItem5av6Cell9 == null))
                {
                    this.mUIItem5av6Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]18[Column]Col_SH";
                    this.mUIItem5av6Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell9;
            }
        }
        
        public DXCell UIItem5av6Cell10
        {
            get
            {
                if ((this.mUIItem5av6Cell10 == null))
                {
                    this.mUIItem5av6Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]20[Column]Col_SH";
                    this.mUIItem5av6Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell10;
            }
        }
        
        public DXCell UIItem5av6Cell11
        {
            get
            {
                if ((this.mUIItem5av6Cell11 == null))
                {
                    this.mUIItem5av6Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]22[Column]Col_SH";
                    this.mUIItem5av6Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell11;
            }
        }
        
        public DXCell UIItem5av6Cell12
        {
            get
            {
                if ((this.mUIItem5av6Cell12 == null))
                {
                    this.mUIItem5av6Cell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]24[Column]Col_SH";
                    this.mUIItem5av6Cell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell12;
            }
        }
        
        public DXCell UIACell9
        {
            get
            {
                if ((this.mUIACell9 == null))
                {
                    this.mUIACell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]Col_F3Calc";
                    this.mUIACell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell9;
            }
        }
        
        public DXCell UIItem0av2Cell
        {
            get
            {
                if ((this.mUIItem0av2Cell == null))
                {
                    this.mUIItem0av2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]Col_F3";
                    this.mUIItem0av2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell;
            }
        }
        
        public DXCell UIItem0av2Cell1
        {
            get
            {
                if ((this.mUIItem0av2Cell1 == null))
                {
                    this.mUIItem0av2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]Col_F3";
                    this.mUIItem0av2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell1;
            }
        }
        
        public DXCell UIItem0av2Cell2
        {
            get
            {
                if ((this.mUIItem0av2Cell2 == null))
                {
                    this.mUIItem0av2Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]Col_F3";
                    this.mUIItem0av2Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell2;
            }
        }
        
        public DXCell UIItem0av2Cell3
        {
            get
            {
                if ((this.mUIItem0av2Cell3 == null))
                {
                    this.mUIItem0av2Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]Col_F3";
                    this.mUIItem0av2Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell3;
            }
        }
        
        public DXCell UIItem0av1Cell
        {
            get
            {
                if ((this.mUIItem0av1Cell == null))
                {
                    this.mUIItem0av1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]Col_F3";
                    this.mUIItem0av1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av1Cell;
            }
        }
        
        public DXCell UIItem0av2Cell4
        {
            get
            {
                if ((this.mUIItem0av2Cell4 == null))
                {
                    this.mUIItem0av2Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]Col_F3";
                    this.mUIItem0av2Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell4;
            }
        }
        
        public DXCell UIItem0av2Cell5
        {
            get
            {
                if ((this.mUIItem0av2Cell5 == null))
                {
                    this.mUIItem0av2Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]Col_F3";
                    this.mUIItem0av2Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell5;
            }
        }
        
        public DXCell UIItem0av2Cell6
        {
            get
            {
                if ((this.mUIItem0av2Cell6 == null))
                {
                    this.mUIItem0av2Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]Col_F3";
                    this.mUIItem0av2Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell6;
            }
        }
        
        public DXCell UIItem0av2Cell7
        {
            get
            {
                if ((this.mUIItem0av2Cell7 == null))
                {
                    this.mUIItem0av2Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]Col_F3";
                    this.mUIItem0av2Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell7;
            }
        }
        
        public DXCell UIItem0av2Cell8
        {
            get
            {
                if ((this.mUIItem0av2Cell8 == null))
                {
                    this.mUIItem0av2Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]18[Column]Col_F3";
                    this.mUIItem0av2Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell8;
            }
        }
        
        public DXCell UIItem0av2Cell9
        {
            get
            {
                if ((this.mUIItem0av2Cell9 == null))
                {
                    this.mUIItem0av2Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]20[Column]Col_F3";
                    this.mUIItem0av2Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell9;
            }
        }
        
        public DXCell UIItem0av2Cell10
        {
            get
            {
                if ((this.mUIItem0av2Cell10 == null))
                {
                    this.mUIItem0av2Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]22[Column]Col_F3";
                    this.mUIItem0av2Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell10;
            }
        }
        
        public DXCell UIItem0av2Cell11
        {
            get
            {
                if ((this.mUIItem0av2Cell11 == null))
                {
                    this.mUIItem0av2Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]24[Column]Col_F3";
                    this.mUIItem0av2Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell11;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIACell;
        
        private DXCell mUIACell1;
        
        private DXCell mUIACell2;
        
        private DXCell mUIGCell;
        
        private DXCell mUIACell3;
        
        private DXCell mUIGCell1;
        
        private DXCell mUIGCell2;
        
        private DXCell mUIGCell3;
        
        private DXCell mUIACell4;
        
        private DXCell mUIACell5;
        
        private DXCell mUIACell6;
        
        private DXCell mUIACell7;
        
        private DXCell mUIACell8;
        
        private DXCell mUIItem5av6Cell;
        
        private DXCell mUIItem5av6Cell1;
        
        private DXCell mUIItem5av6Cell2;
        
        private DXCell mUIItem5av6Cell3;
        
        private DXCell mUIItem2av6Cell;
        
        private DXCell mUIItem5av6Cell4;
        
        private DXCell mUIItem5av6Cell5;
        
        private DXCell mUIItem5av6Cell6;
        
        private DXCell mUIItem5av6Cell7;
        
        private DXCell mUIItem5av6Cell8;
        
        private DXCell mUIItem5av6Cell9;
        
        private DXCell mUIItem5av6Cell10;
        
        private DXCell mUIItem5av6Cell11;
        
        private DXCell mUIItem5av6Cell12;
        
        private DXCell mUIACell9;
        
        private DXCell mUIItem0av2Cell;
        
        private DXCell mUIItem0av2Cell1;
        
        private DXCell mUIItem0av2Cell2;
        
        private DXCell mUIItem0av2Cell3;
        
        private DXCell mUIItem0av1Cell;
        
        private DXCell mUIItem0av2Cell4;
        
        private DXCell mUIItem0av2Cell5;
        
        private DXCell mUIItem0av2Cell6;
        
        private DXCell mUIItem0av2Cell7;
        
        private DXCell mUIItem0av2Cell8;
        
        private DXCell mUIItem0av2Cell9;
        
        private DXCell mUIItem0av2Cell10;
        
        private DXCell mUIItem0av2Cell11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDpnlColumnsDockPanel1 UIDpnlColumnsDockPanel
        {
            get
            {
                if ((this.mUIDpnlColumnsDockPanel == null))
                {
                    this.mUIDpnlColumnsDockPanel = new UIDpnlColumnsDockPanel1(this);
                }
                return this.mUIDpnlColumnsDockPanel;
            }
        }
        
        public UIGcRosterPlanTable1 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable1(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDpnlColumnsDockPanel1 mUIDpnlColumnsDockPanel;
        
        private UIGcRosterPlanTable1 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlColumnsDockPanel1 : DXDockPanel
    {
        
        public UIDpnlColumnsDockPanel1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlColumns";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel1_ContainerCustom1 UIDockPanel1_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel1_ContainerCustom == null))
                {
                    this.mUIDockPanel1_ContainerCustom = new UIDockPanel1_ContainerCustom1(this);
                }
                return this.mUIDockPanel1_ContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel1_ContainerCustom1 mUIDockPanel1_ContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel1_ContainerCustom1 : DXTestControl
    {
        
        public UIDockPanel1_ContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel1_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcExtraGridTable1 UIGcExtraGridTable
        {
            get
            {
                if ((this.mUIGcExtraGridTable == null))
                {
                    this.mUIGcExtraGridTable = new UIGcExtraGridTable1(this);
                }
                return this.mUIGcExtraGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcExtraGridTable1 mUIGcExtraGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcExtraGridTable1 : DXGrid
    {
        
        public UIGcExtraGridTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle42";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        
        public DXCell UIACell1
        {
            get
            {
                if ((this.mUIACell1 == null))
                {
                    this.mUIACell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle42";
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell1;
            }
        }
        
        public DXCell UIACell2
        {
            get
            {
                if ((this.mUIACell2 == null))
                {
                    this.mUIACell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle42";
                    this.mUIACell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell2;
            }
        }
        
        public DXCell UIACell3
        {
            get
            {
                if ((this.mUIACell3 == null))
                {
                    this.mUIACell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]ColumnHandle42";
                    this.mUIACell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell3;
            }
        }
        
        public DXCell UIACell4
        {
            get
            {
                if ((this.mUIACell4 == null))
                {
                    this.mUIACell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle42";
                    this.mUIACell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell4;
            }
        }
        
        public DXCell UIACell5
        {
            get
            {
                if ((this.mUIACell5 == null))
                {
                    this.mUIACell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle42";
                    this.mUIACell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell5;
            }
        }
        
        public DXCell UIACell6
        {
            get
            {
                if ((this.mUIACell6 == null))
                {
                    this.mUIACell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle42";
                    this.mUIACell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell6;
            }
        }
        
        public DXCell UIACell7
        {
            get
            {
                if ((this.mUIACell7 == null))
                {
                    this.mUIACell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle42";
                    this.mUIACell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell7;
            }
        }
        
        public DXCell UIACell8
        {
            get
            {
                if ((this.mUIACell8 == null))
                {
                    this.mUIACell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle42";
                    this.mUIACell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell8;
            }
        }
        
        public DXCell UIACell9
        {
            get
            {
                if ((this.mUIACell9 == null))
                {
                    this.mUIACell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]20[Column]ColumnHandle42";
                    this.mUIACell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell9;
            }
        }
        
        public DXCell UIACell10
        {
            get
            {
                if ((this.mUIACell10 == null))
                {
                    this.mUIACell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]22[Column]ColumnHandle42";
                    this.mUIACell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell10;
            }
        }
        
        public DXCell UIACell11
        {
            get
            {
                if ((this.mUIACell11 == null))
                {
                    this.mUIACell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]24[Column]ColumnHandle42";
                    this.mUIACell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell11;
            }
        }
        
        public DXCell UIItem5av6Cell
        {
            get
            {
                if ((this.mUIItem5av6Cell == null))
                {
                    this.mUIItem5av6Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle43";
                    this.mUIItem5av6Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell;
            }
        }
        
        public DXCell UIItem5av6Cell1
        {
            get
            {
                if ((this.mUIItem5av6Cell1 == null))
                {
                    this.mUIItem5av6Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle43";
                    this.mUIItem5av6Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell1;
            }
        }
        
        public DXCell UIItem5av6Cell2
        {
            get
            {
                if ((this.mUIItem5av6Cell2 == null))
                {
                    this.mUIItem5av6Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle43";
                    this.mUIItem5av6Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell2;
            }
        }
        
        public DXCell UIItem5av6Cell3
        {
            get
            {
                if ((this.mUIItem5av6Cell3 == null))
                {
                    this.mUIItem5av6Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]ColumnHandle43";
                    this.mUIItem5av6Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell3;
            }
        }
        
        public DXCell UIItem2av6Cell
        {
            get
            {
                if ((this.mUIItem2av6Cell == null))
                {
                    this.mUIItem2av6Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2av6Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle43";
                    this.mUIItem2av6Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2av6Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2av6Cell;
            }
        }
        
        public DXCell UIItem5av6Cell4
        {
            get
            {
                if ((this.mUIItem5av6Cell4 == null))
                {
                    this.mUIItem5av6Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle43";
                    this.mUIItem5av6Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell4;
            }
        }
        
        public DXCell UIItem5av6Cell5
        {
            get
            {
                if ((this.mUIItem5av6Cell5 == null))
                {
                    this.mUIItem5av6Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle43";
                    this.mUIItem5av6Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell5;
            }
        }
        
        public DXCell UIItem5av6Cell6
        {
            get
            {
                if ((this.mUIItem5av6Cell6 == null))
                {
                    this.mUIItem5av6Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle43";
                    this.mUIItem5av6Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell6;
            }
        }
        
        public DXCell UIItem5av6Cell7
        {
            get
            {
                if ((this.mUIItem5av6Cell7 == null))
                {
                    this.mUIItem5av6Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle43";
                    this.mUIItem5av6Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell7;
            }
        }
        
        public DXCell UIItem5av6Cell8
        {
            get
            {
                if ((this.mUIItem5av6Cell8 == null))
                {
                    this.mUIItem5av6Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]20[Column]ColumnHandle43";
                    this.mUIItem5av6Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell8;
            }
        }
        
        public DXCell UIItem5av6Cell9
        {
            get
            {
                if ((this.mUIItem5av6Cell9 == null))
                {
                    this.mUIItem5av6Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]22[Column]ColumnHandle43";
                    this.mUIItem5av6Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell9;
            }
        }
        
        public DXCell UIItem5av6Cell10
        {
            get
            {
                if ((this.mUIItem5av6Cell10 == null))
                {
                    this.mUIItem5av6Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]24[Column]ColumnHandle43";
                    this.mUIItem5av6Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell10;
            }
        }
        
        public DXCell UIACell12
        {
            get
            {
                if ((this.mUIACell12 == null))
                {
                    this.mUIACell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]19[Column]ColumnHandle42";
                    this.mUIACell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell12;
            }
        }
        
        public DXCell UIACell13
        {
            get
            {
                if ((this.mUIACell13 == null))
                {
                    this.mUIACell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle40";
                    this.mUIACell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell13;
            }
        }
        
        public DXCell UIACell14
        {
            get
            {
                if ((this.mUIACell14 == null))
                {
                    this.mUIACell14 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell14.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle40";
                    this.mUIACell14.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell14.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell14;
            }
        }
        
        public DXCell UIACell15
        {
            get
            {
                if ((this.mUIACell15 == null))
                {
                    this.mUIACell15 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell15.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle40";
                    this.mUIACell15.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell15.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell15;
            }
        }
        
        public DXCell UIACell16
        {
            get
            {
                if ((this.mUIACell16 == null))
                {
                    this.mUIACell16 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell16.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]ColumnHandle40";
                    this.mUIACell16.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell16.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell16;
            }
        }
        
        public DXCell UIACell17
        {
            get
            {
                if ((this.mUIACell17 == null))
                {
                    this.mUIACell17 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell17.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle40";
                    this.mUIACell17.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell17.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell17;
            }
        }
        
        public DXCell UIACell18
        {
            get
            {
                if ((this.mUIACell18 == null))
                {
                    this.mUIACell18 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell18.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle40";
                    this.mUIACell18.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell18.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell18;
            }
        }
        
        public DXCell UIACell19
        {
            get
            {
                if ((this.mUIACell19 == null))
                {
                    this.mUIACell19 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell19.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle40";
                    this.mUIACell19.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell19.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell19;
            }
        }
        
        public DXCell UIACell20
        {
            get
            {
                if ((this.mUIACell20 == null))
                {
                    this.mUIACell20 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell20.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle40";
                    this.mUIACell20.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell20.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell20;
            }
        }
        
        public DXCell UIACell21
        {
            get
            {
                if ((this.mUIACell21 == null))
                {
                    this.mUIACell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle40";
                    this.mUIACell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell21.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell21;
            }
        }
        
        public DXCell UIACell22
        {
            get
            {
                if ((this.mUIACell22 == null))
                {
                    this.mUIACell22 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell22.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]20[Column]ColumnHandle40";
                    this.mUIACell22.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell22.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell22;
            }
        }
        
        public DXCell UIACell23
        {
            get
            {
                if ((this.mUIACell23 == null))
                {
                    this.mUIACell23 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell23.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]22[Column]ColumnHandle40";
                    this.mUIACell23.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell23.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell23;
            }
        }
        
        public DXCell UIACell24
        {
            get
            {
                if ((this.mUIACell24 == null))
                {
                    this.mUIACell24 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell24.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]24[Column]ColumnHandle40";
                    this.mUIACell24.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell24.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell24;
            }
        }
        
        public DXCell UIItem5av6Cell11
        {
            get
            {
                if ((this.mUIItem5av6Cell11 == null))
                {
                    this.mUIItem5av6Cell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle41";
                    this.mUIItem5av6Cell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell11;
            }
        }
        
        public DXCell UIItem5av6Cell12
        {
            get
            {
                if ((this.mUIItem5av6Cell12 == null))
                {
                    this.mUIItem5av6Cell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle41";
                    this.mUIItem5av6Cell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell12;
            }
        }
        
        public DXCell UIItem5av6Cell13
        {
            get
            {
                if ((this.mUIItem5av6Cell13 == null))
                {
                    this.mUIItem5av6Cell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle41";
                    this.mUIItem5av6Cell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell13;
            }
        }
        
        public DXCell UIItem5av6Cell14
        {
            get
            {
                if ((this.mUIItem5av6Cell14 == null))
                {
                    this.mUIItem5av6Cell14 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell14.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]ColumnHandle41";
                    this.mUIItem5av6Cell14.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell14.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell14;
            }
        }
        
        public DXCell UIItem2av6Cell1
        {
            get
            {
                if ((this.mUIItem2av6Cell1 == null))
                {
                    this.mUIItem2av6Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2av6Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle41";
                    this.mUIItem2av6Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2av6Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2av6Cell1;
            }
        }
        
        public DXCell UIItem5av6Cell15
        {
            get
            {
                if ((this.mUIItem5av6Cell15 == null))
                {
                    this.mUIItem5av6Cell15 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell15.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle41";
                    this.mUIItem5av6Cell15.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell15.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell15;
            }
        }
        
        public DXCell UIItem5av6Cell16
        {
            get
            {
                if ((this.mUIItem5av6Cell16 == null))
                {
                    this.mUIItem5av6Cell16 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell16.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle41";
                    this.mUIItem5av6Cell16.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell16.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell16;
            }
        }
        
        public DXCell UIItem5av6Cell17
        {
            get
            {
                if ((this.mUIItem5av6Cell17 == null))
                {
                    this.mUIItem5av6Cell17 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell17.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle41";
                    this.mUIItem5av6Cell17.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell17.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell17;
            }
        }
        
        public DXCell UIItem5av6Cell18
        {
            get
            {
                if ((this.mUIItem5av6Cell18 == null))
                {
                    this.mUIItem5av6Cell18 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell18.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle41";
                    this.mUIItem5av6Cell18.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell18.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell18;
            }
        }
        
        public DXCell UIItem5av6Cell19
        {
            get
            {
                if ((this.mUIItem5av6Cell19 == null))
                {
                    this.mUIItem5av6Cell19 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell19.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]20[Column]ColumnHandle41";
                    this.mUIItem5av6Cell19.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell19.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell19;
            }
        }
        
        public DXCell UIItem5av6Cell20
        {
            get
            {
                if ((this.mUIItem5av6Cell20 == null))
                {
                    this.mUIItem5av6Cell20 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell20.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]22[Column]ColumnHandle41";
                    this.mUIItem5av6Cell20.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell20.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell20;
            }
        }
        
        public DXCell UIItem5av6Cell21
        {
            get
            {
                if ((this.mUIItem5av6Cell21 == null))
                {
                    this.mUIItem5av6Cell21 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5av6Cell21.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]24[Column]ColumnHandle41";
                    this.mUIItem5av6Cell21.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5av6Cell21.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5av6Cell21;
            }
        }
        
        public DXCell UIItem0av2Cell
        {
            get
            {
                if ((this.mUIItem0av2Cell == null))
                {
                    this.mUIItem0av2Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]0[Column]ColumnHandle46";
                    this.mUIItem0av2Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell;
            }
        }
        
        public DXCell UIItem0av2Cell1
        {
            get
            {
                if ((this.mUIItem0av2Cell1 == null))
                {
                    this.mUIItem0av2Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]2[Column]ColumnHandle46";
                    this.mUIItem0av2Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell1;
            }
        }
        
        public DXCell UIItem0av2Cell2
        {
            get
            {
                if ((this.mUIItem0av2Cell2 == null))
                {
                    this.mUIItem0av2Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]4[Column]ColumnHandle46";
                    this.mUIItem0av2Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell2;
            }
        }
        
        public DXCell UIItem0av2Cell3
        {
            get
            {
                if ((this.mUIItem0av2Cell3 == null))
                {
                    this.mUIItem0av2Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]6[Column]ColumnHandle46";
                    this.mUIItem0av2Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell3;
            }
        }
        
        public DXCell UIItem0av1Cell
        {
            get
            {
                if ((this.mUIItem0av1Cell == null))
                {
                    this.mUIItem0av1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle46";
                    this.mUIItem0av1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av1Cell;
            }
        }
        
        public DXCell UIItem0av2Cell4
        {
            get
            {
                if ((this.mUIItem0av2Cell4 == null))
                {
                    this.mUIItem0av2Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]10[Column]ColumnHandle46";
                    this.mUIItem0av2Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell4;
            }
        }
        
        public DXCell UIItem0av2Cell5
        {
            get
            {
                if ((this.mUIItem0av2Cell5 == null))
                {
                    this.mUIItem0av2Cell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]12[Column]ColumnHandle46";
                    this.mUIItem0av2Cell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell5;
            }
        }
        
        public DXCell UIItem0av2Cell6
        {
            get
            {
                if ((this.mUIItem0av2Cell6 == null))
                {
                    this.mUIItem0av2Cell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]14[Column]ColumnHandle46";
                    this.mUIItem0av2Cell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell6;
            }
        }
        
        public DXCell UIItem0av2Cell7
        {
            get
            {
                if ((this.mUIItem0av2Cell7 == null))
                {
                    this.mUIItem0av2Cell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]16[Column]ColumnHandle46";
                    this.mUIItem0av2Cell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell7;
            }
        }
        
        public DXCell UIItem0av2Cell8
        {
            get
            {
                if ((this.mUIItem0av2Cell8 == null))
                {
                    this.mUIItem0av2Cell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]20[Column]ColumnHandle46";
                    this.mUIItem0av2Cell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell8;
            }
        }
        
        public DXCell UIItem0av2Cell9
        {
            get
            {
                if ((this.mUIItem0av2Cell9 == null))
                {
                    this.mUIItem0av2Cell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]22[Column]ColumnHandle46";
                    this.mUIItem0av2Cell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell9;
            }
        }
        
        public DXCell UIItem0av2Cell10
        {
            get
            {
                if ((this.mUIItem0av2Cell10 == null))
                {
                    this.mUIItem0av2Cell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0av2Cell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]24[Column]ColumnHandle46";
                    this.mUIItem0av2Cell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0av2Cell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0av2Cell10;
            }
        }
        
        public DXCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle44";
                    this.mUIItem0Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle45";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle47";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExtraGridGridControlCell[View]gvExtraGrid[Row]8[Column]ColumnHandle48";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIACell;
        
        private DXCell mUIACell1;
        
        private DXCell mUIACell2;
        
        private DXCell mUIACell3;
        
        private DXCell mUIACell4;
        
        private DXCell mUIACell5;
        
        private DXCell mUIACell6;
        
        private DXCell mUIACell7;
        
        private DXCell mUIACell8;
        
        private DXCell mUIACell9;
        
        private DXCell mUIACell10;
        
        private DXCell mUIACell11;
        
        private DXCell mUIItem5av6Cell;
        
        private DXCell mUIItem5av6Cell1;
        
        private DXCell mUIItem5av6Cell2;
        
        private DXCell mUIItem5av6Cell3;
        
        private DXCell mUIItem2av6Cell;
        
        private DXCell mUIItem5av6Cell4;
        
        private DXCell mUIItem5av6Cell5;
        
        private DXCell mUIItem5av6Cell6;
        
        private DXCell mUIItem5av6Cell7;
        
        private DXCell mUIItem5av6Cell8;
        
        private DXCell mUIItem5av6Cell9;
        
        private DXCell mUIItem5av6Cell10;
        
        private DXCell mUIACell12;
        
        private DXCell mUIACell13;
        
        private DXCell mUIACell14;
        
        private DXCell mUIACell15;
        
        private DXCell mUIACell16;
        
        private DXCell mUIACell17;
        
        private DXCell mUIACell18;
        
        private DXCell mUIACell19;
        
        private DXCell mUIACell20;
        
        private DXCell mUIACell21;
        
        private DXCell mUIACell22;
        
        private DXCell mUIACell23;
        
        private DXCell mUIACell24;
        
        private DXCell mUIItem5av6Cell11;
        
        private DXCell mUIItem5av6Cell12;
        
        private DXCell mUIItem5av6Cell13;
        
        private DXCell mUIItem5av6Cell14;
        
        private DXCell mUIItem2av6Cell1;
        
        private DXCell mUIItem5av6Cell15;
        
        private DXCell mUIItem5av6Cell16;
        
        private DXCell mUIItem5av6Cell17;
        
        private DXCell mUIItem5av6Cell18;
        
        private DXCell mUIItem5av6Cell19;
        
        private DXCell mUIItem5av6Cell20;
        
        private DXCell mUIItem5av6Cell21;
        
        private DXCell mUIItem0av2Cell;
        
        private DXCell mUIItem0av2Cell1;
        
        private DXCell mUIItem0av2Cell2;
        
        private DXCell mUIItem0av2Cell3;
        
        private DXCell mUIItem0av1Cell;
        
        private DXCell mUIItem0av2Cell4;
        
        private DXCell mUIItem0av2Cell5;
        
        private DXCell mUIItem0av2Cell6;
        
        private DXCell mUIItem0av2Cell7;
        
        private DXCell mUIItem0av2Cell8;
        
        private DXCell mUIItem0av2Cell9;
        
        private DXCell mUIItem0av2Cell10;
        
        private DXCell mUIItem0Cell;
        
        private DXCell mUIItemCell;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIItemCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable1 : DXGrid
    {
        
        public UIGcRosterPlanTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAndersenAstridCell
        {
            get
            {
                if ((this.mUIAndersenAstridCell == null))
                {
                    this.mUIAndersenAstridCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle1";
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAndersenAstridCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAndersenAstridCell;
            }
        }
        
        public DXCell UIVAKANTCell
        {
            get
            {
                if ((this.mUIVAKANTCell == null))
                {
                    this.mUIVAKANTCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVAKANTCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]ColumnHandle1";
                    this.mUIVAKANTCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVAKANTCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIVAKANTCell;
            }
        }
        
        public DXCell UIBronsonCharlieCell
        {
            get
            {
                if ((this.mUIBronsonCharlieCell == null))
                {
                    this.mUIBronsonCharlieCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBronsonCharlieCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]ColumnHandle1";
                    this.mUIBronsonCharlieCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBronsonCharlieCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBronsonCharlieCell;
            }
        }
        
        public DXCell UIDaleneDollyCell
        {
            get
            {
                if ((this.mUIDaleneDollyCell == null))
                {
                    this.mUIDaleneDollyCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDaleneDollyCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]ColumnHandle1";
                    this.mUIDaleneDollyCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDaleneDollyCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDaleneDollyCell;
            }
        }
        
        public DXCell UIEriksrødErikaCell
        {
            get
            {
                if ((this.mUIEriksrødErikaCell == null))
                {
                    this.mUIEriksrødErikaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIEriksrødErikaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]ColumnHandle1";
                    this.mUIEriksrødErikaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIEriksrødErikaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIEriksrødErikaCell;
            }
        }
        
        public DXCell UIBetongBillyCell
        {
            get
            {
                if ((this.mUIBetongBillyCell == null))
                {
                    this.mUIBetongBillyCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBetongBillyCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]ColumnHandle1";
                    this.mUIBetongBillyCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBetongBillyCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBetongBillyCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAndersenAstridCell;
        
        private DXCell mUIVAKANTCell;
        
        private DXCell mUIBronsonCharlieCell;
        
        private DXCell mUIDaleneDollyCell;
        
        private DXCell mUIEriksrødErikaCell;
        
        private DXCell mUIBetongBillyCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient1 : DXTestControl
    {
        
        public UIPnlRosterPlanClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanGrid1Custom1 UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom1(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanGrid1Custom1 mUIRosterPlanGrid1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom1 : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable2 UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable2(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable2 mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable2 : DXGrid
    {
        
        public UIGcRosterPlanTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAndersenAstridCell
        {
            get
            {
                if ((this.mUIAndersenAstridCell == null))
                {
                    this.mUIAndersenAstridCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle1";
                    this.mUIAndersenAstridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAndersenAstridCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAndersenAstridCell;
            }
        }
        
        public DXCell UIBetongBillyCell
        {
            get
            {
                if ((this.mUIBetongBillyCell == null))
                {
                    this.mUIBetongBillyCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBetongBillyCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]ColumnHandle1";
                    this.mUIBetongBillyCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBetongBillyCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBetongBillyCell;
            }
        }
        
        public DXCell UIBronsonCharlieCell
        {
            get
            {
                if ((this.mUIBronsonCharlieCell == null))
                {
                    this.mUIBronsonCharlieCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBronsonCharlieCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]ColumnHandle1";
                    this.mUIBronsonCharlieCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBronsonCharlieCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBronsonCharlieCell;
            }
        }
        
        public DXCell UIDaleneDollyCell
        {
            get
            {
                if ((this.mUIDaleneDollyCell == null))
                {
                    this.mUIDaleneDollyCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDaleneDollyCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]ColumnHandle1";
                    this.mUIDaleneDollyCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDaleneDollyCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDaleneDollyCell;
            }
        }
        
        public DXCell UIEriksrødErikaCell
        {
            get
            {
                if ((this.mUIEriksrødErikaCell == null))
                {
                    this.mUIEriksrødErikaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIEriksrødErikaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]ColumnHandle1";
                    this.mUIEriksrødErikaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIEriksrødErikaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIEriksrødErikaCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAndersenAstridCell;
        
        private DXCell mUIBetongBillyCell;
        
        private DXCell mUIBronsonCharlieCell;
        
        private DXCell mUIDaleneDollyCell;
        
        private DXCell mUIEriksrødErikaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupContainerBarConMenu UIPopupContainerBarConMenu
        {
            get
            {
                if ((this.mUIPopupContainerBarConMenu == null))
                {
                    this.mUIPopupContainerBarConMenu = new UIPopupContainerBarConMenu(this);
                }
                return this.mUIPopupContainerBarConMenu;
            }
        }
        
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupContainerBarConMenu mUIPopupContainerBarConMenu;
        
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerBarConMenu : DXMenu
    {
        
        public UIPopupContainerBarConMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupContainerBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerBarControl";
            #endregion
        }
        
        #region Properties
        public UIPopupControlContaineClient UIPopupControlContaineClient
        {
            get
            {
                if ((this.mUIPopupControlContaineClient == null))
                {
                    this.mUIPopupControlContaineClient = new UIPopupControlContaineClient(this);
                }
                return this.mUIPopupControlContaineClient;
            }
        }
        
        public UIDepartmentPopupContrClient UIDepartmentPopupContrClient
        {
            get
            {
                if ((this.mUIDepartmentPopupContrClient == null))
                {
                    this.mUIDepartmentPopupContrClient = new UIDepartmentPopupContrClient(this);
                }
                return this.mUIDepartmentPopupContrClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupControlContaineClient mUIPopupControlContaineClient;
        
        private UIDepartmentPopupContrClient mUIDepartmentPopupContrClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupControlContaineClient : DXTestControl
    {
        
        public UIPopupControlContaineClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "popupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupControlContainer";
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom2 UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom2(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom2 mUIViewHostCustom;
        
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom2 : DXTestControl
    {
        
        public UIViewHostCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            #endregion
        }
        
        #region Properties
        public UIPcViewClient2 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient2(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient2 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient2 : DXTestControl
    {
        
        public UIPcViewClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public UIEmployeeManagerWeekeCustom UIEmployeeManagerWeekeCustom
        {
            get
            {
                if ((this.mUIEmployeeManagerWeekeCustom == null))
                {
                    this.mUIEmployeeManagerWeekeCustom = new UIEmployeeManagerWeekeCustom(this);
                }
                return this.mUIEmployeeManagerWeekeCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeManagerWeekeCustom mUIEmployeeManagerWeekeCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeManagerWeekeCustom : DXTestControl
    {
        
        public UIEmployeeManagerWeekeCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeManagerWeekendPatternView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeManagerWeekendPatternView";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UILueStandardWeekendPaLookUpEdit
        {
            get
            {
                if ((this.mUILueStandardWeekendPaLookUpEdit == null))
                {
                    this.mUILueStandardWeekendPaLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILueStandardWeekendPaLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "lueStandardWeekendPatterns";
                    this.mUILueStandardWeekendPaLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LookUpEdit";
                    #endregion
                }
                return this.mUILueStandardWeekendPaLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUILueStandardWeekendPaLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentPopupContrClient : DXTestControl
    {
        
        public UIDepartmentPopupContrClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "DepartmentPopupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupControlContainer";
            #endregion
        }
        
        #region Properties
        public UITreeListDepartmentsTreeList UITreeListDepartmentsTreeList
        {
            get
            {
                if ((this.mUITreeListDepartmentsTreeList == null))
                {
                    this.mUITreeListDepartmentsTreeList = new UITreeListDepartmentsTreeList(this);
                }
                return this.mUITreeListDepartmentsTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListDepartmentsTreeList mUITreeListDepartmentsTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListDepartmentsTreeList : DXTreeList
    {
        
        public UITreeListDepartmentsTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListDepartments";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode14 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode14(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode14 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode14 : DXTreeListNode
    {
        
        public UINode0TreeListNode14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode8TreeListNode1 UINode8TreeListNode
        {
            get
            {
                if ((this.mUINode8TreeListNode == null))
                {
                    this.mUINode8TreeListNode = new UINode8TreeListNode1(this);
                }
                return this.mUINode8TreeListNode;
            }
        }
        
        public UINode7TreeListNode1 UINode7TreeListNode
        {
            get
            {
                if ((this.mUINode7TreeListNode == null))
                {
                    this.mUINode7TreeListNode = new UINode7TreeListNode1(this);
                }
                return this.mUINode7TreeListNode;
            }
        }
        
        public UINode6TreeListNode1 UINode6TreeListNode
        {
            get
            {
                if ((this.mUINode6TreeListNode == null))
                {
                    this.mUINode6TreeListNode = new UINode6TreeListNode1(this);
                }
                return this.mUINode6TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode8TreeListNode1 mUINode8TreeListNode;
        
        private UINode7TreeListNode1 mUINode7TreeListNode;
        
        private UINode6TreeListNode1 mUINode6TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode8TreeListNode1 : DXTreeListNode
    {
        
        public UINode8TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node8";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode1TreeListNode4 UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode4(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public UINode0TreeListNode15 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode15(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode9TreeListNode1 UINode9TreeListNode
        {
            get
            {
                if ((this.mUINode9TreeListNode == null))
                {
                    this.mUINode9TreeListNode = new UINode9TreeListNode1(this);
                }
                return this.mUINode9TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode1TreeListNode4 mUINode1TreeListNode;
        
        private UINode0TreeListNode15 mUINode0TreeListNode;
        
        private UINode9TreeListNode1 mUINode9TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode4 : DXTreeListNode
    {
        
        public UINode1TreeListNode4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5020KalenderplanTreeListCell
        {
            get
            {
                if ((this.mUIItem5020KalenderplanTreeListCell == null))
                {
                    this.mUIItem5020KalenderplanTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5020KalenderplanTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem5020KalenderplanTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem5020KalenderplanTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5020KalenderplanTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode15 : DXTreeListNode
    {
        
        public UINode0TreeListNode15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5010ArbeidsplanoTreeListCell
        {
            get
            {
                if ((this.mUIItem5010ArbeidsplanoTreeListCell == null))
                {
                    this.mUIItem5010ArbeidsplanoTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5010ArbeidsplanoTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem5010ArbeidsplanoTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem5010ArbeidsplanoTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5010ArbeidsplanoTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode9TreeListNode1 : DXTreeListNode
    {
        
        public UINode9TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node9";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5110DiverseTreeListCell
        {
            get
            {
                if ((this.mUIItem5110DiverseTreeListCell == null))
                {
                    this.mUIItem5110DiverseTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem5110DiverseTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5110DiverseTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode7TreeListNode1 : DXTreeListNode
    {
        
        public UINode7TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node7";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode16 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode16(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode16 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode16 : DXTreeListNode
    {
        
        public UINode0TreeListNode16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem4110LegeavdelingTreeListCell
        {
            get
            {
                if ((this.mUIItem4110LegeavdelingTreeListCell == null))
                {
                    this.mUIItem4110LegeavdelingTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem4110LegeavdelingTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem4110LegeavdelingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem4110LegeavdelingTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem4110LegeavdelingTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode6TreeListNode1 : DXTreeListNode
    {
        
        public UINode6TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node6";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode17 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode17(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode17 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode17 : DXTreeListNode
    {
        
        public UINode0TreeListNode17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem4010LegeavdelingTreeListCell
        {
            get
            {
                if ((this.mUIItem4010LegeavdelingTreeListCell == null))
                {
                    this.mUIItem4010LegeavdelingTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem4010LegeavdelingTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem4010LegeavdelingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem4010LegeavdelingTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem4010LegeavdelingTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIFlytttiltoppenMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIFlytttiltoppenMenuBaseButtonItem == null))
                {
                    this.mUIFlytttiltoppenMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIFlytttiltoppenMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bbiMoveToTop";
                    this.mUIFlytttiltoppenMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIFlytttiltoppenMenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIFlytttiltoppenMenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TcxGridSite";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinClient UIAnsatteClient
        {
            get
            {
                if ((this.mUIAnsatteClient == null))
                {
                    this.mUIAnsatteClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAnsatteClient.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAnsatteClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAnsatteClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow1 : WinWindow
    {
        
        public UIArbeidsplanWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGT4003InformasjonWindow : DXWindow
    {
        
        public UIGT4003InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GT-4003 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GT-4003 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("GT-4003 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINyhjelpeplanWindow : DXWindow
    {
        
        public UINyhjelpeplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ny hjelpeplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ny hjelpeplan");
            #endregion
        }
        
        #region Properties
        public UIPnlMainClient UIPnlMainClient
        {
            get
            {
                if ((this.mUIPnlMainClient == null))
                {
                    this.mUIPnlMainClient = new UIPnlMainClient(this);
                }
                return this.mUIPnlMainClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlMainClient mUIPnlMainClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlMainClient : DXTestControl
    {
        
        public UIPnlMainClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny hjelpeplan");
            #endregion
        }
        
        #region Properties
        public UIGsLayoutControlMainCustom UIGsLayoutControlMainCustom
        {
            get
            {
                if ((this.mUIGsLayoutControlMainCustom == null))
                {
                    this.mUIGsLayoutControlMainCustom = new UIGsLayoutControlMainCustom(this);
                }
                return this.mUIGsLayoutControlMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIGsLayoutControlMainCustom mUIGsLayoutControlMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsLayoutControlMainCustom : DXTestControl
    {
        
        public UIGsLayoutControlMainCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsLayoutControlMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.WindowTitles.Add("Ny hjelpeplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNaLayoutGroup UILayoutControlGroupNaLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNaLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNaLayoutGroup = new UILayoutControlGroupNaLayoutGroup(this);
                }
                return this.mUILayoutControlGroupNaLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNaLayoutGroup mUILayoutControlGroupNaLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlGroupNaLayoutGroup : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNaLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupName";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Ny hjelpeplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroupNeLayoutGroup UILayoutControlGroupNeLayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroupNeLayoutGroup == null))
                {
                    this.mUILayoutControlGroupNeLayoutGroup = new UILayoutControlGroupNeLayoutGroup(this);
                }
                return this.mUILayoutControlGroupNeLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroupNeLayoutGroup mUILayoutControlGroupNeLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlGroupNeLayoutGroup : DXBaseLayoutItem
    {
        
        public UILayoutControlGroupNeLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroupNewValues";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Ny hjelpeplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlItem2LayoutControlItem UILayoutControlItem2LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem2LayoutControlItem == null))
                {
                    this.mUILayoutControlItem2LayoutControlItem = new UILayoutControlItem2LayoutControlItem(this);
                }
                return this.mUILayoutControlItem2LayoutControlItem;
            }
        }
        
        public UILayoutControlItem4LayoutControlItem UILayoutControlItem4LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem4LayoutControlItem == null))
                {
                    this.mUILayoutControlItem4LayoutControlItem = new UILayoutControlItem4LayoutControlItem(this);
                }
                return this.mUILayoutControlItem4LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlItem2LayoutControlItem mUILayoutControlItem2LayoutControlItem;
        
        private UILayoutControlItem4LayoutControlItem mUILayoutControlItem4LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlItem2LayoutControlItem : DXBaseLayoutItem
    {
        
        public UILayoutControlItem2LayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Ny hjelpeplan");
            #endregion
        }
        
        #region Properties
        public UIPnlGridSumClient UIPnlGridSumClient
        {
            get
            {
                if ((this.mUIPnlGridSumClient == null))
                {
                    this.mUIPnlGridSumClient = new UIPnlGridSumClient(this);
                }
                return this.mUIPnlGridSumClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlGridSumClient mUIPnlGridSumClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlGridSumClient : DXTestControl
    {
        
        public UIPnlGridSumClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlGridSum";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny hjelpeplan");
            #endregion
        }
        
        #region Properties
        public UIGsGridControlTable UIGsGridControlTable
        {
            get
            {
                if ((this.mUIGsGridControlTable == null))
                {
                    this.mUIGsGridControlTable = new UIGsGridControlTable(this);
                }
                return this.mUIGsGridControlTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGsGridControlTable mUIGsGridControlTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsGridControlTable : DXGrid
    {
        
        public UIGsGridControlTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Ny hjelpeplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIVAKANTCell
        {
            get
            {
                if ((this.mUIVAKANTCell == null))
                {
                    this.mUIVAKANTCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVAKANTCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlGridControlCell[View]gvRosterLines[Row]0[Column]clmName";
                    this.mUIVAKANTCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVAKANTCell.WindowTitles.Add("Ny hjelpeplan");
                    #endregion
                }
                return this.mUIVAKANTCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIVAKANTCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlItem4LayoutControlItem : DXBaseLayoutItem
    {
        
        public UILayoutControlItem4LayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem4";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Ny hjelpeplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRuleButtonsClient UIPnlRuleButtonsClient
        {
            get
            {
                if ((this.mUIPnlRuleButtonsClient == null))
                {
                    this.mUIPnlRuleButtonsClient = new UIPnlRuleButtonsClient(this);
                }
                return this.mUIPnlRuleButtonsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRuleButtonsClient mUIPnlRuleButtonsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRuleButtonsClient : DXTestControl
    {
        
        public UIPnlRuleButtonsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRuleButtons";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Ny hjelpeplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIAnnenhverberegningavButton
        {
            get
            {
                if ((this.mUIAnnenhverberegningavButton == null))
                {
                    this.mUIAnnenhverberegningavButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAnnenhverberegningavButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnEveryOther";
                    this.mUIAnnenhverberegningavButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIAnnenhverberegningavButton.WindowTitles.Add("Ny hjelpeplan");
                    #endregion
                }
                return this.mUIAnnenhverberegningavButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIAnnenhverberegningavButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanInnstilliWindow : DXWindow
    {
        
        public UIArbeidsplanInnstilliWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan - Innstillinger";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UITcDataTabList UITcDataTabList
        {
            get
            {
                if ((this.mUITcDataTabList == null))
                {
                    this.mUITcDataTabList = new UITcDataTabList(this);
                }
                return this.mUITcDataTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcDataTabList mUITcDataTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcDataTabList : DXTestControl
    {
        
        public UITcDataTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcData";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            #endregion
        }
        
        #region Properties
        public UITpConfigurationClient UITpConfigurationClient
        {
            get
            {
                if ((this.mUITpConfigurationClient == null))
                {
                    this.mUITpConfigurationClient = new UITpConfigurationClient(this);
                }
                return this.mUITpConfigurationClient;
            }
        }
        #endregion
        
        #region Fields
        private UITpConfigurationClient mUITpConfigurationClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITpConfigurationClient : DXTestControl
    {
        
        public UITpConfigurationClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpConfiguration";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            #endregion
        }
        
        #region Properties
        public UIPaCenterClient UIPaCenterClient
        {
            get
            {
                if ((this.mUIPaCenterClient == null))
                {
                    this.mUIPaCenterClient = new UIPaCenterClient(this);
                }
                return this.mUIPaCenterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPaCenterClient mUIPaCenterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaCenterClient : DXTestControl
    {
        
        public UIPaCenterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paCenter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UILeRosterplanTypeLookUpEdit
        {
            get
            {
                if ((this.mUILeRosterplanTypeLookUpEdit == null))
                {
                    this.mUILeRosterplanTypeLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILeRosterplanTypeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leRosterplanType";
                    this.mUILeRosterplanTypeLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    #endregion
                }
                return this.mUILeRosterplanTypeLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUILeRosterplanTypeLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupContainerBarConMenu1 UIPopupContainerBarConMenu
        {
            get
            {
                if ((this.mUIPopupContainerBarConMenu == null))
                {
                    this.mUIPopupContainerBarConMenu = new UIPopupContainerBarConMenu1(this);
                }
                return this.mUIPopupContainerBarConMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupContainerBarConMenu1 mUIPopupContainerBarConMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerBarConMenu1 : DXMenu
    {
        
        public UIPopupContainerBarConMenu1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupContainerBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerBarControl";
            #endregion
        }
        
        #region Properties
        public UIDepartmentPopupContrClient1 UIDepartmentPopupContrClient
        {
            get
            {
                if ((this.mUIDepartmentPopupContrClient == null))
                {
                    this.mUIDepartmentPopupContrClient = new UIDepartmentPopupContrClient1(this);
                }
                return this.mUIDepartmentPopupContrClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDepartmentPopupContrClient1 mUIDepartmentPopupContrClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentPopupContrClient1 : DXTestControl
    {
        
        public UIDepartmentPopupContrClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "DepartmentPopupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupControlContainer";
            #endregion
        }
        
        #region Properties
        public UITreeListDepartmentsTreeList1 UITreeListDepartmentsTreeList
        {
            get
            {
                if ((this.mUITreeListDepartmentsTreeList == null))
                {
                    this.mUITreeListDepartmentsTreeList = new UITreeListDepartmentsTreeList1(this);
                }
                return this.mUITreeListDepartmentsTreeList;
            }
        }
        
        public DXButton UIVelgButton
        {
            get
            {
                if ((this.mUIVelgButton == null))
                {
                    this.mUIVelgButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIVelgButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonOkDepartment";
                    this.mUIVelgButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    #endregion
                }
                return this.mUIVelgButton;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListDepartmentsTreeList1 mUITreeListDepartmentsTreeList;
        
        private DXButton mUIVelgButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListDepartmentsTreeList1 : DXTreeList
    {
        
        public UITreeListDepartmentsTreeList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListDepartments";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode18 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode18(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode18 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode18 : DXTreeListNode
    {
        
        public UINode0TreeListNode18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode9TreeListNode2 UINode9TreeListNode
        {
            get
            {
                if ((this.mUINode9TreeListNode == null))
                {
                    this.mUINode9TreeListNode = new UINode9TreeListNode2(this);
                }
                return this.mUINode9TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode9TreeListNode2 mUINode9TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode9TreeListNode2 : DXTreeListNode
    {
        
        public UINode9TreeListNode2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node9";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode9TreeListNode11 UINode9TreeListNode1
        {
            get
            {
                if ((this.mUINode9TreeListNode1 == null))
                {
                    this.mUINode9TreeListNode1 = new UINode9TreeListNode11(this);
                }
                return this.mUINode9TreeListNode1;
            }
        }
        #endregion
        
        #region Fields
        private UINode9TreeListNode11 mUINode9TreeListNode1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode9TreeListNode11 : DXTreeListNode
    {
        
        public UINode9TreeListNode11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node9";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5110DiverseTreeListCell
        {
            get
            {
                if ((this.mUIItem5110DiverseTreeListCell == null))
                {
                    this.mUIItem5110DiverseTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem5110DiverseTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5110DiverseTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPopupContainerBarConMenu2 UIPopupContainerBarConMenu
        {
            get
            {
                if ((this.mUIPopupContainerBarConMenu == null))
                {
                    this.mUIPopupContainerBarConMenu = new UIPopupContainerBarConMenu2(this);
                }
                return this.mUIPopupContainerBarConMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupContainerBarConMenu2 mUIPopupContainerBarConMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerBarConMenu2 : DXMenu
    {
        
        public UIPopupContainerBarConMenu2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupContainerBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerBarControl";
            #endregion
        }
        
        #region Properties
        public UIDepartmentPopupContrClient2 UIDepartmentPopupContrClient
        {
            get
            {
                if ((this.mUIDepartmentPopupContrClient == null))
                {
                    this.mUIDepartmentPopupContrClient = new UIDepartmentPopupContrClient2(this);
                }
                return this.mUIDepartmentPopupContrClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDepartmentPopupContrClient2 mUIDepartmentPopupContrClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentPopupContrClient2 : DXTestControl
    {
        
        public UIDepartmentPopupContrClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "DepartmentPopupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupControlContainer";
            #endregion
        }
        
        #region Properties
        public UITreeListDepartmentsTreeList2 UITreeListDepartmentsTreeList
        {
            get
            {
                if ((this.mUITreeListDepartmentsTreeList == null))
                {
                    this.mUITreeListDepartmentsTreeList = new UITreeListDepartmentsTreeList2(this);
                }
                return this.mUITreeListDepartmentsTreeList;
            }
        }
        
        public DXButton UIVelgButton
        {
            get
            {
                if ((this.mUIVelgButton == null))
                {
                    this.mUIVelgButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIVelgButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonOkDepartment";
                    this.mUIVelgButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    #endregion
                }
                return this.mUIVelgButton;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListDepartmentsTreeList2 mUITreeListDepartmentsTreeList;
        
        private DXButton mUIVelgButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListDepartmentsTreeList2 : DXTreeList
    {
        
        public UITreeListDepartmentsTreeList2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListDepartments";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode19 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode19(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode19 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode19 : DXTreeListNode
    {
        
        public UINode0TreeListNode19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode9TreeListNode3 UINode9TreeListNode
        {
            get
            {
                if ((this.mUINode9TreeListNode == null))
                {
                    this.mUINode9TreeListNode = new UINode9TreeListNode3(this);
                }
                return this.mUINode9TreeListNode;
            }
        }
        
        public UINode6TreeListNode2 UINode6TreeListNode
        {
            get
            {
                if ((this.mUINode6TreeListNode == null))
                {
                    this.mUINode6TreeListNode = new UINode6TreeListNode2(this);
                }
                return this.mUINode6TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode9TreeListNode3 mUINode9TreeListNode;
        
        private UINode6TreeListNode2 mUINode6TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode9TreeListNode3 : DXTreeListNode
    {
        
        public UINode9TreeListNode3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node9";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode1TreeListNode5 UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode5(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public UINode9TreeListNode12 UINode9TreeListNode1
        {
            get
            {
                if ((this.mUINode9TreeListNode1 == null))
                {
                    this.mUINode9TreeListNode1 = new UINode9TreeListNode12(this);
                }
                return this.mUINode9TreeListNode1;
            }
        }
        #endregion
        
        #region Fields
        private UINode1TreeListNode5 mUINode1TreeListNode;
        
        private UINode9TreeListNode12 mUINode9TreeListNode1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode5 : DXTreeListNode
    {
        
        public UINode1TreeListNode5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5020KalenderplanTreeListCell
        {
            get
            {
                if ((this.mUIItem5020KalenderplanTreeListCell == null))
                {
                    this.mUIItem5020KalenderplanTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5020KalenderplanTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem5020KalenderplanTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem5020KalenderplanTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5020KalenderplanTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode9TreeListNode12 : DXTreeListNode
    {
        
        public UINode9TreeListNode12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node9";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5110DiverseTreeListCell
        {
            get
            {
                if ((this.mUIItem5110DiverseTreeListCell == null))
                {
                    this.mUIItem5110DiverseTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem5110DiverseTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5110DiverseTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode6TreeListNode2 : DXTreeListNode
    {
        
        public UINode6TreeListNode2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node6";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode20 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode20(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode20 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode20 : DXTreeListNode
    {
        
        public UINode0TreeListNode20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem4010LegeavdelingTreeListCell
        {
            get
            {
                if ((this.mUIItem4010LegeavdelingTreeListCell == null))
                {
                    this.mUIItem4010LegeavdelingTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem4010LegeavdelingTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem4010LegeavdelingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem4010LegeavdelingTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem4010LegeavdelingTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIPopupContainerBarConMenu3 UIPopupContainerBarConMenu
        {
            get
            {
                if ((this.mUIPopupContainerBarConMenu == null))
                {
                    this.mUIPopupContainerBarConMenu = new UIPopupContainerBarConMenu3(this);
                }
                return this.mUIPopupContainerBarConMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupContainerBarConMenu3 mUIPopupContainerBarConMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerBarConMenu3 : DXMenu
    {
        
        public UIPopupContainerBarConMenu3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupContainerBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerBarControl";
            #endregion
        }
        
        #region Properties
        public UIDepartmentPopupContrClient3 UIDepartmentPopupContrClient
        {
            get
            {
                if ((this.mUIDepartmentPopupContrClient == null))
                {
                    this.mUIDepartmentPopupContrClient = new UIDepartmentPopupContrClient3(this);
                }
                return this.mUIDepartmentPopupContrClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDepartmentPopupContrClient3 mUIDepartmentPopupContrClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDepartmentPopupContrClient3 : DXTestControl
    {
        
        public UIDepartmentPopupContrClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "DepartmentPopupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupControlContainer";
            #endregion
        }
        
        #region Properties
        public UITreeListDepartmentsTreeList3 UITreeListDepartmentsTreeList
        {
            get
            {
                if ((this.mUITreeListDepartmentsTreeList == null))
                {
                    this.mUITreeListDepartmentsTreeList = new UITreeListDepartmentsTreeList3(this);
                }
                return this.mUITreeListDepartmentsTreeList;
            }
        }
        
        public DXButton UIVelgButton
        {
            get
            {
                if ((this.mUIVelgButton == null))
                {
                    this.mUIVelgButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIVelgButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonOkDepartment";
                    this.mUIVelgButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    #endregion
                }
                return this.mUIVelgButton;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListDepartmentsTreeList3 mUITreeListDepartmentsTreeList;
        
        private DXButton mUIVelgButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListDepartmentsTreeList3 : DXTreeList
    {
        
        public UITreeListDepartmentsTreeList3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListDepartments";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode21 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode21(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode21 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode21 : DXTreeListNode
    {
        
        public UINode0TreeListNode21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode12TreeListNode1 UINode12TreeListNode
        {
            get
            {
                if ((this.mUINode12TreeListNode == null))
                {
                    this.mUINode12TreeListNode = new UINode12TreeListNode1(this);
                }
                return this.mUINode12TreeListNode;
            }
        }
        
        public UINode6TreeListNode3 UINode6TreeListNode
        {
            get
            {
                if ((this.mUINode6TreeListNode == null))
                {
                    this.mUINode6TreeListNode = new UINode6TreeListNode3(this);
                }
                return this.mUINode6TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode12TreeListNode1 mUINode12TreeListNode;
        
        private UINode6TreeListNode3 mUINode6TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode12TreeListNode1 : DXTreeListNode
    {
        
        public UINode12TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node12";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode1TreeListNode6 UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode6(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public UINode9TreeListNode4 UINode9TreeListNode
        {
            get
            {
                if ((this.mUINode9TreeListNode == null))
                {
                    this.mUINode9TreeListNode = new UINode9TreeListNode4(this);
                }
                return this.mUINode9TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode1TreeListNode6 mUINode1TreeListNode;
        
        private UINode9TreeListNode4 mUINode9TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode6 : DXTreeListNode
    {
        
        public UINode1TreeListNode6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5020KalenderplanTreeListCell
        {
            get
            {
                if ((this.mUIItem5020KalenderplanTreeListCell == null))
                {
                    this.mUIItem5020KalenderplanTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5020KalenderplanTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem5020KalenderplanTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem5020KalenderplanTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5020KalenderplanTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode9TreeListNode4 : DXTreeListNode
    {
        
        public UINode9TreeListNode4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node9";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem5110DiverseTreeListCell
        {
            get
            {
                if ((this.mUIItem5110DiverseTreeListCell == null))
                {
                    this.mUIItem5110DiverseTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem5110DiverseTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem5110DiverseTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem5110DiverseTreeListCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode6TreeListNode3 : DXTreeListNode
    {
        
        public UINode6TreeListNode3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node6";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode22 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode22(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode22 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode22 : DXTreeListNode
    {
        
        public UINode0TreeListNode22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            #endregion
        }
        
        #region Properties
        public DXTreeListCell UIItem4010LegeavdelingTreeListCell
        {
            get
            {
                if ((this.mUIItem4010LegeavdelingTreeListCell == null))
                {
                    this.mUIItem4010LegeavdelingTreeListCell = new DXTreeListCell(this);
                    #region Search Criteria
                    this.mUIItem4010LegeavdelingTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartmentName";
                    this.mUIItem4010LegeavdelingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
                    #endregion
                }
                return this.mUIItem4010LegeavdelingTreeListCell;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeListCell mUIItem4010LegeavdelingTreeListCell;
        #endregion
    }
}
