// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _010_Test_Oppgavetildeling_Vaktbok_GATP_1680
{
    using System.CodeDom.Compiler;
    using System.Drawing;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v19_2;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddCommentStep37 - Use 'AddCommentStep37Params' to pass parameters into this method.
        /// </summary>
        public void AddCommentStep37()
        {
            #region Variable Declarations
            DXTextEdit uITxtCommentEdit = this.UIOppgavetildelingWindow1.UIGcContentClient.UIGcDetailsClient.UIVhDetailsCustom.UIPcViewClient.UIRoleDetailsViewCustom.UIPanelControl1Client.UITxtCommentEdit;
            #endregion

            // Type 'Husk at du skal være alene!' in 'txtComment' text box
            //ValueAsString
            uITxtCommentEdit.ValueAsString = this.AddCommentStep37Params.UITxtCommentEditValueAsString;

            // Type '{Tab}' in 'txtComment' text box
            Keyboard.SendKeys(uITxtCommentEdit, this.AddCommentStep37Params.UITxtCommentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddRoleInPlannerStep35
        /// </summary>
        public void AddRoleInPlannerStep35()
        {
            #region Variable Declarations
            WinList uISchedulerControlList1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UIRoleSchedulerControlWindow.UISchedulerControlList.UISchedulerControlList1;
            DXMenuItem uITildelingavoppgaveMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem;
            DXMenuBaseButtonItem uID4520AndersonMrMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UID4520AndersonMrMenuBaseButtonItem;
            #endregion

            // Move using Right button 'schedulerControl' list box
            Mouse.StartDragging(uISchedulerControlList1, new Point(114, 146), MouseButtons.Right, ModifierKeys.None);
            Mouse.StopDragging(uISchedulerControlList1, 2, 152);

            // Click 'Tildeling av oppgave' menu item
            Mouse.Click(uITildelingavoppgaveMenuItem, new Point(45, 12));

            // Click 'D (4520) - Anderson, Mr' MenuBaseButtonItem
            Mouse.Click(uID4520AndersonMrMenuBaseButtonItem, new Point(171, 13));
        }
        
        /// <summary>
        /// AddRoleInPlannerStep36
        /// </summary>
        public void AddRoleInPlannerStep36()
        {
            #region Variable Declarations
            DXCell uIMAKSANTALLSPERREMaksCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIMAKSANTALLSPERREMaksCell;
            WinList uISchedulerControlList11 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UIRoleSchedulerControlWindow.UISchedulerControlList.UISchedulerControlList11;
            #endregion

            // Move 'MAKS ANTALL SPERRE - Maks antall personer som kan tildeles. Sperre ved overskridelse.' cell to 'schedulerControl' list box
            uISchedulerControlList11.EnsureClickable(new Point(245, 149));
            Mouse.StartDragging(uIMAKSANTALLSPERREMaksCell, new Point(83, 6));
            Mouse.StopDragging(uISchedulerControlList11, new Point(245, 149));
        }
        
        /// <summary>
        /// AddRolesToEldersonStep11
        /// </summary>
        public void AddRolesToEldersonStep11()
        {
            #region Variable Declarations
            DXCell uIEldersonAllanCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIBakvakt00167770770FaDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIEldersonAllanCell;
            DXMenuItem uITildelingavoppgaveMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem;
            DXMenuBaseButtonItem uIItem1622Vakthavende4MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIItem1622Vakthavende4MenuBaseButtonItem;
            DXMenuBaseButtonItem uIItem2208Bakvakt4520MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIItem2208Bakvakt4520MenuBaseButtonItem;
            #endregion

            // Right-Click 'Elderson, Allan' cell
            Mouse.Click(uIEldersonAllanCell, MouseButtons.Right, ModifierKeys.None, new Point(20, 4));

            // Click 'Tildeling av oppgave' menu item
            Mouse.Click(uITildelingavoppgaveMenuItem, new Point(67, 11));

            // Click '16-22 - Vakthavende (4520)' MenuBaseButtonItem
            Mouse.Click(uIItem1622Vakthavende4MenuBaseButtonItem, new Point(84, 12));

            // Right-Click 'Elderson, Allan' cell
            Mouse.Click(uIEldersonAllanCell, MouseButtons.Right, ModifierKeys.None, new Point(36, 8));

            // Click 'Tildeling av oppgave' menu item
            Mouse.Click(uITildelingavoppgaveMenuItem, new Point(70, 13));

            // Click '22-08 - Bakvakt (4520)' MenuBaseButtonItem
            Mouse.Click(uIItem2208Bakvakt4520MenuBaseButtonItem, new Point(76, 11));
        }
        
        /// <summary>
        /// AddRoleToAhlgrenStep24
        /// </summary>
        public void AddRoleToAhlgrenStep24()
        {
            #region Variable Declarations
            DXListBoxItem uID08001600ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UIBottomPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList1.UID08001600ListItem;
            DXListBox uIPeriodScheduleListBoList = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList;
            #endregion

            // Wait for 2 seconds for user delay between actions; Move 'D - (08:00 - 16:00)' list item to 'PeriodScheduleListBoxControl`1' list box
            Playback.Wait(2000);
            uIPeriodScheduleListBoList.EnsureClickable(new Point(40, 16));
            Mouse.StartDragging(uID08001600ListItem, new Point(25, 7));
            Mouse.StopDragging(uIPeriodScheduleListBoList, new Point(40, 16));
        }
        
        /// <summary>
        /// AddRoleToAndersonStep2
        /// </summary>
        public void AddRoleToAndersonStep2()
        {
            #region Variable Declarations
            DXCell uIAndersonMrCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIAndersonMrCell;
            DXMenuItem uITildelingavoppgaveMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem;
            DXMenuBaseButtonItem uIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem;
            #endregion

            // Right-Click 'Anderson, Mr' cell
            Mouse.Click(uIAndersonMrCell, MouseButtons.Right, ModifierKeys.None, new Point(22, 7));

            // Click 'Tildeling av oppgave' menu item
            Mouse.Click(uITildelingavoppgaveMenuItem, new Point(124, 10));

            // Click 'KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke (4520)' MenuBaseButtonItem
            Mouse.Click(uIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem, new Point(174, 14));
        }
        
        /// <summary>
        /// AddRoleToAndersonStep25
        /// </summary>
        public void AddRoleToAndersonStep25()
        {
            #region Variable Declarations
            DXListBoxItem uID08001600ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UIBottomPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList2.UID08001600ListItem;
            DXMenuItem uITildelingavoppgaveMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem;
            DXMenuBaseButtonItem uIOVEROverliggendeoppgMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIOVEROverliggendeoppgMenuBaseButtonItem;
            #endregion

            // Wait for 1 seconds for user delay between actions; Right-Click 'D - (08:00 - 16:00)' list item
            Playback.Wait(1000);
            Mouse.Click(uID08001600ListItem, MouseButtons.Right, ModifierKeys.None, new Point(48, 6));

            // Click 'Tildeling av oppgave' menu item
            Mouse.Click(uITildelingavoppgaveMenuItem, new Point(69, 8));

            // Click 'OVER - Overliggende oppgave avd 4500 (4500)' MenuBaseButtonItem
            Mouse.Click(uIOVEROverliggendeoppgMenuBaseButtonItem, new Point(214, 17));
        }
        
        /// <summary>
        /// AddRoleToAndresonStep29
        /// </summary>
        public void AddRoleToAndresonStep29()
        {
            #region Variable Declarations
            DXListBoxItem uID08001600ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UIBottomPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList4.UID08001600ListItem;
            DXListBox uIPeriodScheduleListBoList4 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList4;
            #endregion

            // Move 'D - (08:00 - 16:00)' list item to 'PeriodScheduleListBoxControl`1' list box
            uIPeriodScheduleListBoList4.EnsureClickable(new Point(43, 12));
            Mouse.StartDragging(uID08001600ListItem, new Point(32, 4));
            Mouse.StopDragging(uIPeriodScheduleListBoList4, new Point(43, 12));
        }
        
        /// <summary>
        /// AddRoleToBerreStep19
        /// </summary>
        public void AddRoleToBerreStep19()
        {
            #region Variable Declarations
            DXCell uIItem0816DagtidCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIItem0816DagtidCell;
            DXListBoxItem uID08001600ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList1.UID08001600ListItem;
            #endregion

            // Move '08-16 - Dagtid' cell to 'D - (08:00 - 16:00)' list item
            uID08001600ListItem.EnsureClickable(new Point(43, 5));
            Mouse.StartDragging(uIItem0816DagtidCell, new Point(65, 6));
            Mouse.StopDragging(uID08001600ListItem, new Point(43, 5));
        }
        
        /// <summary>
        /// AddRoleToBruskStep8
        /// </summary>
        public void AddRoleToBruskStep8()
        {
            #region Variable Declarations
            DXCell uIMAKSANTALLADVARSELMaCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIMAKSANTALLADVARSELMaCell;
            DXCell uIBruskBennyCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIBruskBennyCell;
            #endregion

            // Move 'MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved overskridelse.' cell to 'Brusk, Benny' cell
            uIBruskBennyCell.EnsureClickable(new Point(37, 7));
            Mouse.StartDragging(uIMAKSANTALLADVARSELMaCell, new Point(223, 6));
            Mouse.StopDragging(uIBruskBennyCell, new Point(37, 7));
        }
        
        /// <summary>
        /// AddRoleToCockerStep16
        /// </summary>
        public void AddRoleToCockerStep16()
        {
            #region Variable Declarations
            DXCell uIItem1218OppgaveutenfCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIItem1218OppgaveutenfCell;
            DXListBoxItem uIA15002300ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList.UIA15002300ListItem;
            #endregion

            // Move '12-18 - Oppgave utenfor arbeidstid' cell to 'A - (15:00 - 23:00)' list item
            uIA15002300ListItem.EnsureClickable(new Point(42, 6));
            Mouse.StartDragging(uIItem1218OppgaveutenfCell, new Point(53, 6));
            Mouse.StopDragging(uIA15002300ListItem, new Point(42, 6));
        }
        
        /// <summary>
        /// AddRoleToCockerStep7
        /// </summary>
        public void AddRoleToCockerStep7()
        {
            #region Variable Declarations
            DXCell uICockerJamesCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIAften00167770770FalsDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UICockerJamesCell;
            DXMenuItem uITildelingavoppgaveMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem;
            DXMenuBaseButtonItem uIBarButtonItemLink4MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIBarButtonItemLink4MenuBaseButtonItem;
            #endregion

            // Right-Click 'Cocker, James' cell
            Mouse.Click(uICockerJamesCell, MouseButtons.Right, ModifierKeys.None, new Point(19, 7));

            // Click 'Tildeling av oppgave' menu item
            Mouse.Click(uITildelingavoppgaveMenuItem, new Point(128, 10));

            // Click 'BarButtonItemLink[4]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink4MenuBaseButtonItem, new Point(144, 10));
        }
        
        /// <summary>
        /// AddRoleToDroppStep27
        /// </summary>
        public void AddRoleToDroppStep27()
        {
            #region Variable Declarations
            DXListBox uIPeriodScheduleListBoList3 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList3;
            DXMenuItem uITildelefraDispMenuItem = this.UIItemWindow12.UIPopupMenuBarControlMenu.UITildelefraDispMenuItem;
            DXMenuBaseButtonItem uIBarButtonItemLink0MenuBaseButtonItem = this.UIItemWindow12.UIPopupMenuBarControlMenu.UITildelefraDispMenuItem.UIBarButtonItemLink0MenuBaseButtonItem;
            #endregion

            // Right-Click 'PeriodScheduleListBoxControl`1' list box
            Mouse.Click(uIPeriodScheduleListBoList3, MouseButtons.Right, ModifierKeys.None, new Point(39, 11));

            // Click 'Tildele fra Disp' menu item
            Mouse.Click(uITildelefraDispMenuItem, new Point(74, 13));

            // Click 'BarButtonItemLink[0]' MenuBaseButtonItem
            Mouse.Click(uIBarButtonItemLink0MenuBaseButtonItem, new Point(112, 9));
        }
        
        /// <summary>
        /// AddRoleToDroppStep41
        /// </summary>
        public void AddRoleToDroppStep41()
        {
            #region Variable Declarations
            DXCell uIOVEROverliggendeoppgCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIOVEROverliggendeoppgCell;
            WinList uISchedulerControlList17 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UIRoleSchedulerControlWindow.UISchedulerControlList.UISchedulerControlList17;
            #endregion

            // Move 'OVER - Overliggende oppgave avd 4500' cell to 'schedulerControl' list box
            uISchedulerControlList17.EnsureClickable(new Point(1130, 278));
            Mouse.StartDragging(uIOVEROverliggendeoppgCell, new Point(179, 8));
            Mouse.StopDragging(uISchedulerControlList17, new Point(1130, 278));
        }
        
        /// <summary>
        /// AddRoleToEldersonStep28
        /// </summary>
        public void AddRoleToEldersonStep28()
        {
            #region Variable Declarations
            DXListBoxItem uIBV116000800ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UIBottomPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList3.UIBV116000800ListItem;
            DXMenuItem uITildelingavoppgaveMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem;
            DXMenuBaseButtonItem uIItem1622Vakthavende4MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIItem1622Vakthavende4MenuBaseButtonItem;
            #endregion

            // Right-Click 'BV1 - (16:00 - 08:00)' list item
            Mouse.Click(uIBV116000800ListItem, MouseButtons.Right, ModifierKeys.None, new Point(39, 7));

            // Click 'Tildeling av oppgave' menu item
            Mouse.Click(uITildelingavoppgaveMenuItem, new Point(104, 11));

            // Click '16-22 - Vakthavende (4520)' MenuBaseButtonItem
            Mouse.Click(uIItem1622Vakthavende4MenuBaseButtonItem, new Point(99, 9));
        }
        
        /// <summary>
        /// AddRoleToEvenstadStep23
        /// </summary>
        public void AddRoleToEvenstadStep23()
        {
            #region Variable Declarations
            DXListBoxItem uIPeriodScheduleListBoListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UIBottomPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList.UIPeriodScheduleListBoListItem;
            DXListBox uIPeriodScheduleListBoList2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList2;
            #endregion

            // Move 'PeriodScheduleListBoxControl`1Item8' list item to 'PeriodScheduleListBoxControl`1' list box
            uIPeriodScheduleListBoList2.EnsureClickable(new Point(66, 14));
            Mouse.StartDragging(uIPeriodScheduleListBoListItem, new Point(41, 4));
            Mouse.StopDragging(uIPeriodScheduleListBoList2, new Point(66, 14));
        }
        
        /// <summary>
        /// CheckAGulliShiftStep15 - Use 'CheckAGulliShiftStep15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAGulliShiftStep15()
        {
            #region Variable Declarations
            DXCell uIOCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIOCell;
            DXCell uILEDIGVAKTCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UILEDIGVAKTCell;
            DXCell uIMAKSANTALLADVARSELCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIMAKSANTALLADVARSELCell1;
            DXTestControl uILabelControl1Label = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UISpesifikasjonDockPanel.UIControlContainerCustom.UIVhSpecificationCustom.UIPcViewClient.UISpecificationViewCustom.UIFcvwDetailsCustom.UITextDetailsView4Custom.UILabelControl1Label;
            DXCell uIItem22000800Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UISpesifikasjonDockPanel.UIControlContainerCustom.UIVhSpecificationCustom.UIPcViewClient.UISpecificationViewCustom.UIFcvwDetailsCustom.UISpecificationRoleTabCustom.UIGcRolesTable.UIItem22000800Cell1;
            DXCell uIItem2208BakvaktCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UISpesifikasjonDockPanel.UIControlContainerCustom.UIVhSpecificationCustom.UIPcViewClient.UISpecificationViewCustom.UIFcvwDetailsCustom.UISpecificationRoleTabCustom.UIGcRolesTable.UIItem2208BakvaktCell1;
            #endregion

            // Verify that the 'ValueAsString' property of 'O' cell equals 'O'
            Assert.AreEqual(this.CheckAGulliShiftStep15ExpectedValues.UIOCellValueAsString, uIOCell.ValueAsString);

            // Verify that the 'Text' property of 'LEDIG VAKT' cell equals 'Gulli, Andreas'
            Assert.AreEqual(this.CheckAGulliShiftStep15ExpectedValues.UILEDIGVAKTCellText, uILEDIGVAKTCell.Text);

            // Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals 'MAKS ANTALL ADVARSEL'
            Assert.AreEqual(this.CheckAGulliShiftStep15ExpectedValues.UIMAKSANTALLADVARSELCell1Text, uIMAKSANTALLADVARSELCell1.Text);

            // Verify that the 'Text' property of 'labelControl1' label equals 'Opprinnelig ansatt: Anderson, Mr'
            Assert.AreEqual(this.CheckAGulliShiftStep15ExpectedValues.UILabelControl1LabelText, uILabelControl1Label.Text);

            // Verify that the 'Text' property of '22:00 - 08:00' cell equals '08:00 - 16:00'
            Assert.AreEqual(this.CheckAGulliShiftStep15ExpectedValues.UIItem22000800Cell1Text, uIItem22000800Cell1.Text);

            // Verify that the 'Text' property of '22-08 - Bakvakt' cell equals 'MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved overskridelse.'
            Assert.AreEqual(this.CheckAGulliShiftStep15ExpectedValues.UIItem2208BakvaktCell1Text, uIItem2208BakvaktCell1.Text);
        }
        
        /// <summary>
        /// CheckAndersonDispRoleStep31 - Use 'CheckAndersonDispRoleStep31ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAndersonDispRoleStep31()
        {
            #region Variable Declarations
            DXListBoxItem uIAndersonMr10001400ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList5.UIAndersonMr10001400ListItem;
            DXListBoxItem uID08001600ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UIBottomPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList4.UID08001600ListItem;
            #endregion

            // Verify that the 'Text' property of 'Anderson, Mr - 1000-1400' list item equals 'Anderson, Mr - 1000-1400'
            Assert.AreEqual(this.CheckAndersonDispRoleStep31ExpectedValues.UIAndersonMr10001400ListItemText, uIAndersonMr10001400ListItem.Text);

            // Verify that the 'Text' property of 'D - (08:00 - 16:00)' list item equals 'D - Anderson, Mr - DISPONIBEL'
            Assert.AreEqual(this.CheckAndersonDispRoleStep31ExpectedValues.UID08001600ListItemText, uID08001600ListItem.Text);
        }
        
        /// <summary>
        /// CheckAndersonFreeShiftStep14 - Use 'CheckAndersonFreeShiftStep14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAndersonFreeShiftStep14()
        {
            #region Variable Declarations
            DXCell uILEDIGVAKTCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UILEDIGVAKTCell;
            DXCell uIMAKSANTALLADVARSELCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIMAKSANTALLADVARSELCell1;
            DXTestControl uILabelControl1Label = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UISpesifikasjonDockPanel.UIControlContainerCustom.UIVhSpecificationCustom.UIPcViewClient.UISpecificationViewCustom.UIFcvwDetailsCustom.UITextDetailsView3Custom.UILabelControl1Label;
            DXCell uIItem22000800Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UISpesifikasjonDockPanel.UIControlContainerCustom.UIVhSpecificationCustom.UIPcViewClient.UISpecificationViewCustom.UIFcvwDetailsCustom.UISpecificationRoleTabCustom.UIGcRolesTable.UIItem22000800Cell1;
            DXCell uIItem2208BakvaktCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UISpesifikasjonDockPanel.UIControlContainerCustom.UIVhSpecificationCustom.UIPcViewClient.UISpecificationViewCustom.UIFcvwDetailsCustom.UISpecificationRoleTabCustom.UIGcRolesTable.UIItem2208BakvaktCell1;
            #endregion

            // Verify that the 'Text' property of 'LEDIG VAKT' cell equals 'LEDIG VAKT'
            Assert.AreEqual(this.CheckAndersonFreeShiftStep14ExpectedValues.UILEDIGVAKTCellText, uILEDIGVAKTCell.Text);

            // Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals 'MAKS ANTALL ADVARSEL'
            Assert.AreEqual(this.CheckAndersonFreeShiftStep14ExpectedValues.UIMAKSANTALLADVARSELCell1Text, uIMAKSANTALLADVARSELCell1.Text);

            // Verify that the 'Text' property of 'labelControl1' label equals 'Opprinnelig ansatt: Anderson, Mr'
            Assert.AreEqual(this.CheckAndersonFreeShiftStep14ExpectedValues.UILabelControl1LabelText, uILabelControl1Label.Text);

            // Verify that the 'Text' property of '22:00 - 08:00' cell equals '08:00 - 16:00'
            Assert.AreEqual(this.CheckAndersonFreeShiftStep14ExpectedValues.UIItem22000800Cell1Text, uIItem22000800Cell1.Text);

            // Verify that the 'Text' property of '22-08 - Bakvakt' cell equals 'MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved overskridelse.'
            Assert.AreEqual(this.CheckAndersonFreeShiftStep14ExpectedValues.UIItem2208BakvaktCell1Text, uIItem2208BakvaktCell1.Text);
        }
        
        /// <summary>
        /// CheckCommentStep39 - Use 'CheckCommentStep39ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCommentStep39()
        {
            #region Variable Declarations
            DXTextEdit uITxtCommentEdit = this.UIOppgavetildelingWindow1.UIGcContentClient.UIGcDetailsClient.UIVhDetailsCustom.UIPcViewClient.UIRoleDetailsViewCustom.UIPanelControl1Client.UITxtCommentEdit;
            #endregion

            // Verify that the 'Text' property of 'txtComment' text box equals 'Husk at du skal være alene!'
            Assert.AreEqual(this.CheckCommentStep39ExpectedValues.UITxtCommentEditText, uITxtCommentEdit.Text);
        }
        
        /// <summary>
        /// CheckCompStep2 - Use 'CheckCompStep2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCompStep2()
        {
            #region Variable Declarations
            DXCell uISPESLEGSpesialistlegCell = this.UIOppgavetildelingWindow.UIGcContentClient.UIGcDetailsClient.UIVhDetailsCustom.UIPcViewClient.UIRoleDetailsViewCustom.UIPanelControl1Client.UITabControlViewHost1TabList.UIViewTabPageClient.UIHostedCompetenceCompCustom.UIVhCompetenceCustom.UIPcViewClient.UICompetenceComparisonCustom.UIGcCompetenceComparisTable.UISPESLEGSpesialistlegCell;
            #endregion

            // Verify that the 'ErrorText' property of 'SPESLEG - Spesialistlege' cell equals 'Mangler påkrevd kompetanse'
            Assert.AreEqual(this.CheckCompStep2ExpectedValues.UISPESLEGSpesialistlegCellErrorText, uISPESLEGSpesialistlegCell.ErrorText);
        }
        
        /// <summary>
        /// CheckCompStep29 - Use 'CheckCompStep29ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckCompStep29()
        {
            #region Variable Declarations
            DXCell uISPESLEGSpesialistlegCell = this.UIOppgavetildelingWindow1.UIGcContentClient.UIGcDetailsClient.UIVhDetailsCustom.UIPcViewClient.UIRoleDetailsViewCustom.UIPanelControl1Client.UITabControlViewHost1TabList.UIViewTabPageClient.UIHostedCompetenceCompCustom.UIVhCompetenceCustom.UIPcViewClient.UICompetenceComparisonCustom.UIGcCompetenceComparisTable.UISPESLEGSpesialistlegCell;
            #endregion

            // Verify that the 'Text' property of 'SPESLEG - Spesialistlege' cell equals 'SPESLEG - Spesialistlege'
            Assert.AreEqual(this.CheckCompStep29ExpectedValues.UISPESLEGSpesialistlegCellText, uISPESLEGSpesialistlegCell.Text);
        }
        
        /// <summary>
        /// CheckContDispRoleStep32 - Use 'CheckContDispRoleStep32ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckContDispRoleStep32()
        {
            #region Variable Declarations
            DXListBox uIPeriodScheduleListBoList6 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList6;
            DXListBoxItem uIAndersonMr10001400ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList4.UIAndersonMr10001400ListItem;
            #endregion

            // Verify that the 'SelectedIndicesAsString' property of 'PeriodScheduleListBoxControl`1' list box equals ''
            Assert.AreEqual(this.CheckContDispRoleStep32ExpectedValues.UIPeriodScheduleListBoList6SelectedIndicesAsString, uIPeriodScheduleListBoList6.SelectedIndicesAsString);

            // Verify that the 'SelectedItemsAsString' property of 'PeriodScheduleListBoxControl`1' list box equals ''
            Assert.AreEqual(this.CheckContDispRoleStep32ExpectedValues.UIPeriodScheduleListBoList6SelectedItemsAsString, uIPeriodScheduleListBoList6.GetProperty(DXTestControl.PropertyNames.SelectedItemsAsString).ToString());

            // Verify that the 'Text' property of 'Anderson, Mr - 1000-1400' list item equals 'Anderson, Mr - 1000-1400'
            Assert.AreEqual(this.CheckContDispRoleStep32ExpectedValues.UIAndersonMr10001400ListItemText, uIAndersonMr10001400ListItem.Text);
        }
        
        /// <summary>
        /// CheckContStep39 - Use 'CheckContStep39ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckContStep39()
        {
            #region Variable Declarations
            DXLookUpEdit uILeCostPlaceLookUpEdit = this.UIOppgavetildelingWindow1.UIGcContentClient.UIGcDetailsClient.UIVhDetailsCustom.UIPcViewClient.UIRoleDetailsViewCustom.UIPanelControl1Client.UITabControlViewHost1TabList.UIViewTabPageClient1.UIRoleAccountingViewCustom.UILeCostPlaceLookUpEdit;
            DXLookUpEdit uILeProjectLookUpEdit = this.UIOppgavetildelingWindow1.UIGcContentClient.UIGcDetailsClient.UIVhDetailsCustom.UIPcViewClient.UIRoleDetailsViewCustom.UIPanelControl1Client.UITabControlViewHost1TabList.UIViewTabPageClient1.UIRoleAccountingViewCustom.UILeProjectLookUpEdit;
            #endregion

            // Verify that the 'Text' property of 'leCostPlace' LookUpEdit equals '4520 - Operasjon'
            Assert.AreEqual(this.CheckContStep39ExpectedValues.UILeCostPlaceLookUpEditText, uILeCostPlaceLookUpEdit.Text);

            // Verify that the 'Text' property of 'leProject' LookUpEdit equals 'P3 - Prosjekt 3'
            Assert.AreEqual(this.CheckContStep39ExpectedValues.UILeProjectLookUpEditText, uILeProjectLookUpEdit.Text);
        }
        
        /// <summary>
        /// CheckDateStep1 - Use 'CheckDateStep1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDateStep1()
        {
            #region Variable Declarations
            DXMenuItem uIMandag02092024Uke36BarItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIStandaloneBarDockConCustom.UIMainmenuMenuBar.UIMandag02092024Uke36BarItem;
            #endregion

            // Verify that the 'Text' property of 'Mandag 02.09.2024 - Uke 36' BarItem equals 'Mandag 02.09.2024 - Uke 36'
            Assert.AreEqual(this.CheckDateStep1ExpectedValues.UIMandag02092024Uke36BarItemText, uIMandag02092024Uke36BarItem.Text);
        }
        
        /// <summary>
        /// CheckEvenstadRoleAddedStep23 - Use 'CheckEvenstadRoleAddedStep23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEvenstadRoleAddedStep23()
        {
            #region Variable Declarations
            DXListBoxItem uIGatsoftGatBusinessLoListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList2.UIGatsoftGatBusinessLoListItem;
            #endregion

            // Verify that the 'Text' property of 'Gatsoft.Gat.BusinessLogic.WorkSchedule.DataStructures.WorkScheduleRole' list item equals 'Evenstad, Ronny - 0800-1600'
            Assert.AreEqual(this.CheckEvenstadRoleAddedStep23ExpectedValues.UIGatsoftGatBusinessLoListItemText, uIGatsoftGatBusinessLoListItem.Text);
        }
        
        /// <summary>
        /// CheckEvenstadRoleDeletedStep23 - Use 'CheckEvenstadRoleDeletedStep23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEvenstadRoleDeletedStep23()
        {
            #region Variable Declarations
            DXListBox uIPeriodScheduleListBoList2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList2;
            #endregion

            // Verify that the 'SelectedIndicesAsString' property of 'PeriodScheduleListBoxControl`1' list box equals ''
            Assert.AreEqual(this.CheckEvenstadRoleDeletedStep23ExpectedValues.UIPeriodScheduleListBoList2SelectedIndicesAsString, uIPeriodScheduleListBoList2.SelectedIndicesAsString);

            // Verify that the 'SelectedItemsAsString' property of 'PeriodScheduleListBoxControl`1' list box equals ''
            Assert.AreEqual(this.CheckEvenstadRoleDeletedStep23ExpectedValues.UIPeriodScheduleListBoList2SelectedItemsAsString, uIPeriodScheduleListBoList2.GetProperty(DXTestControl.PropertyNames.SelectedItemsAsString).ToString());
        }
        
        /// <summary>
        /// CheckExcangedStep13 - Use 'CheckExcangedStep13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckExcangedStep13()
        {
            #region Variable Declarations
            DXCell uIFnattGuroCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIBakvakt00167770770FaDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIFnattGuroCell;
            DXCell uIItem2208Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIBakvakt00167770770FaDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIItem2208Cell;
            DXCell uIFnattGuroCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UIFnattGuroCell;
            #endregion

            // Verify that the 'Text' property of 'Fnatt, Guro' cell equals 'Fnatt, Guro'
            Assert.AreEqual(this.CheckExcangedStep13ExpectedValues.UIFnattGuroCellText, uIFnattGuroCell.Text);

            // Verify that the 'Text' property of '22-08' cell equals '22-08'
            Assert.AreEqual(this.CheckExcangedStep13ExpectedValues.UIItem2208CellText, uIItem2208Cell.Text);

            // Verify that the 'Text' property of 'Fnatt, Guro' cell equals 'Elderson, Allan'
            Assert.AreEqual(this.CheckExcangedStep13ExpectedValues.UIFnattGuroCellText1, uIFnattGuroCell1.Text);
        }
        
        /// <summary>
        /// CheckFreeShiftInAbsWin
        /// </summary>
        public void CheckFreeShiftInAbsWin()
        {
            #region Variable Declarations
            DXCell uIValgtCell = this.UIFraværsregistreringWindow.UIPnlShiftManagementClient.UISccShiftManagementSplitContainerControl.UISplitGroupPanelClient.UIGrcShiftsClient.UITcShiftsTabList.UIXtpShiftsGridClient.UIGcShiftsTable.UIValgtCell;
            #endregion

            // Click 'Valgt' cell
            Mouse.Click(uIValgtCell, new Point(17, 9));
        }
        
        /// <summary>
        /// CheckHintStep16 - Use 'CheckHintStep16ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckHintStep16()
        {
            #region Variable Declarations
            WinToolTip uIDumåjoværepåjobbforåToolTip = this.UIItemWindow3.UIDumåjoværepåjobbforåToolTip;
            #endregion

            // Verify that the 'Name' property of 'Du må jo være på jobb for å gjennomføre oppgaven!!...' tooltip equals 'Du må jo være på jobb for å gjennomføre oppgaven!!!. '
            Assert.AreEqual(this.CheckHintStep16ExpectedValues.UIDumåjoværepåjobbforåToolTipName, uIDumåjoværepåjobbforåToolTip.Name);
        }
        
        /// <summary>
        /// CheckHintStep2 - Use 'CheckHintStep2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckHintStep2()
        {
            #region Variable Declarations
            WinToolTip uIHeiErduvirkeligspesiToolTip = this.UIItemWindow1.UIHeiErduvirkeligspesiToolTip;
            #endregion

            // Verify that the 'Name' property of 'Hei! Er du virkelig spesialist eller??.' tooltip equals 'Hei! Er du virkelig spesialist eller??. '
            Assert.AreEqual(this.CheckHintStep2ExpectedValues.UIHeiErduvirkeligspesiToolTipName, uIHeiErduvirkeligspesiToolTip.Name);
        }
        
        /// <summary>
        /// CheckHintStep36 - Use 'CheckHintStep36ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckHintStep36()
        {
            #region Variable Declarations
            WinToolTip uIKunenkanhadenneoppgaToolTip = this.UIItemWindow4.UIKunenkanhadenneoppgaToolTip;
            #endregion

            // Verify that the 'Name' property of 'Kun en kan ha denne oppgaven!!.' tooltip equals 'Kun en kan ha denne oppgaven!!. '
            Assert.AreEqual(this.CheckHintStep36ExpectedValues.UIKunenkanhadenneoppgaToolTipName, uIKunenkanhadenneoppgaToolTip.Name);
        }
        
        /// <summary>
        /// CheckHintStep8 - Use 'CheckHintStep8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckHintStep8()
        {
            #region Variable Declarations
            WinToolTip uIHEIDetburdeikkeværefToolTip = this.UIItemWindow2.UIHEIDetburdeikkeværefToolTip;
            #endregion

            // Wait for 1 seconds for user delay between actions; Verify that the 'Name' property of 'HEI!! Det burde ikke være fler enn 1 person på den...' tooltip equals 'HEI!! Det burde ikke være fler enn 1 person på denne oppgaven!!. '
            Playback.Wait(1000);
            Assert.AreEqual(this.CheckHintStep8ExpectedValues.UIHEIDetburdeikkeværefToolTipName, uIHEIDetburdeikkeværefToolTip.Name);
        }
        
        /// <summary>
        /// CheckInactiveNotInAddShiftList - Use 'CheckInactiveNotInAddShiftListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckInactiveNotInAddShiftList()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIOVEROverliggendeoppgMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIOVEROverliggendeoppgMenuBaseButtonItem;
            DXMenuBaseButtonItem uIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem;
            DXMenuBaseButtonItem uID4520AndersonMrMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UID4520AndersonMrMenuBaseButtonItem;
            DXMenuBaseButtonItem uID4520BerreJennyMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UID4520BerreJennyMenuBaseButtonItem;
            DXMenuBaseButtonItem uIBarButtonItemLink4MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIBarButtonItemLink4MenuBaseButtonItem;
            DXMenuBaseButtonItem uIGV14520CelestonSiggeMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIGV14520CelestonSiggeMenuBaseButtonItem;
            DXMenuBaseButtonItem uIItem1622Vakthavende4MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIItem1622Vakthavende4MenuBaseButtonItem;
            DXMenuBaseButtonItem uIItem2208Bakvakt4520MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIItem2208Bakvakt4520MenuBaseButtonItem;
            DXMenuBaseButtonItem uID4520EvenstadRonnyMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UID4520EvenstadRonnyMenuBaseButtonItem;
            DXMenuBaseButtonItem uIItem1012Røntgen4520MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIItem1012Røntgen4520MenuBaseButtonItem;
            DXMenuBaseButtonItem uIItem0810Morgenmøte45MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIItem0810Morgenmøte45MenuBaseButtonItem;
            #endregion

            // Verify that the 'Text' property of 'OVER - Overliggende oppgave avd 4500 (4500)' MenuBaseButtonItem equals 'OVER - Overliggende oppgave avd 4500 (4500)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UIOVEROverliggendeoppgMenuBaseButtonItemText, uIOVEROverliggendeoppgMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke (4520)' MenuBaseButtonItem equals 'KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UIKOMPKREVDEKSKLKANIKKMenuBaseButtonItemText, uIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'D (4520) - Anderson, Mr' MenuBaseButtonItem equals 'MAKS ANTALL SPERRE - Maks antall personer som kan tildeles. Sperre ved… (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UID4520AndersonMrMenuBaseButtonItemText, uID4520AndersonMrMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'D (4520) - Berre, Jenny' MenuBaseButtonItem equals 'KOMP ØNSKET/EKSKL BØR IKKE - Kompetanse ønsket + Eksklusiv bør ikke (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UID4520BerreJennyMenuBaseButtonItemText, uID4520BerreJennyMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'BarButtonItemLink[4]' MenuBaseButtonItem equals 'MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel v… (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UIBarButtonItemLink4MenuBaseButtonItemText, uIBarButtonItemLink4MenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'GV1 (4520) - Celeston, Sigge' MenuBaseButtonItem equals '08-16 - Dagtid (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UIGV14520CelestonSiggeMenuBaseButtonItemText, uIGV14520CelestonSiggeMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of '16-22 - Vakthavende (4520)' MenuBaseButtonItem equals '16-22 - Vakthavende (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UIItem1622Vakthavende4MenuBaseButtonItemText, uIItem1622Vakthavende4MenuBaseButtonItem.Text);

            // Verify that the 'Text' property of '22-08 - Bakvakt (4520)' MenuBaseButtonItem equals '22-08 - Bakvakt (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UIItem2208Bakvakt4520MenuBaseButtonItemText, uIItem2208Bakvakt4520MenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'D (4520) - Evenstad, Ronny' MenuBaseButtonItem equals '12-18 - Oppgave utenfor arbeidstid (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UID4520EvenstadRonnyMenuBaseButtonItemText, uID4520EvenstadRonnyMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'D (4520) - Evenstad, Ronny' MenuBaseButtonItem equals '12-18 - Oppgave utenfor arbeidstid (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UID4520EvenstadRonnyMenuBaseButtonItemText1, uID4520EvenstadRonnyMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of '10-12 - Røntgen (4520)' MenuBaseButtonItem equals '10-12 - Røntgen (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UIItem1012Røntgen4520MenuBaseButtonItemText, uIItem1012Røntgen4520MenuBaseButtonItem.Text);

            // Verify that the 'Text' property of '08-10 - Morgenmøte (4520)' MenuBaseButtonItem equals '08-10 - Morgenmøte (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftListExpectedValues.UIItem0810Morgenmøte45MenuBaseButtonItemText, uIItem0810Morgenmøte45MenuBaseButtonItem.Text);
        }
        
        /// <summary>
        /// CheckInactiveNotInAddShiftList2 - Use 'CheckInactiveNotInAddShiftList2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckInactiveNotInAddShiftList2()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIItem1216AdministrasjMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIItem1216AdministrasjMenuBaseButtonItem;
            DXMenuBaseButtonItem uIKONTERINGKonteringpåMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIKONTERINGKonteringpåMenuBaseButtonItem;
            DXMenuBaseButtonItem uIDISPONIBELBeholdsomdMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIDISPONIBELBeholdsomdMenuBaseButtonItem;
            #endregion

            // Verify that the 'Text' property of '12-16 - Administrasjon (4520)' MenuBaseButtonItem equals '12-16 - Administrasjon (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftList2ExpectedValues.UIItem1216AdministrasjMenuBaseButtonItemText, uIItem1216AdministrasjMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'KONTERING - Kontering på oppgaven (4520)' MenuBaseButtonItem equals 'KONTERING - Kontering på oppgaven (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftList2ExpectedValues.UIKONTERINGKonteringpåMenuBaseButtonItemText, uIKONTERINGKonteringpåMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'DISPONIBEL - Behold som disponibel (4520)' MenuBaseButtonItem equals 'DISPONIBEL - Behold som disponibel (4520)'
            Assert.AreEqual(this.CheckInactiveNotInAddShiftList2ExpectedValues.UIDISPONIBELBeholdsomdMenuBaseButtonItemText, uIDISPONIBELBeholdsomdMenuBaseButtonItem.Text);
        }
        
        /// <summary>
        /// CheckInactiveNotInDashboardList - Use 'CheckInactiveNotInDashboardListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckInactiveNotInDashboardList()
        {
            #region Variable Declarations
            DXCell uIKOMPKREVDEKSKLKANIKKCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIKOMPKREVDEKSKLKANIKKCell;
            DXCell uIMAKSANTALLSPERREMaksCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIMAKSANTALLSPERREMaksCell;
            DXCell uIKOMPØNSKETEKSKLBØRIKCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIKOMPØNSKETEKSKLBØRIKCell;
            DXCell uIMAKSANTALLADVARSELMaCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIMAKSANTALLADVARSELMaCell;
            DXCell uIItem0816DagtidCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIItem0816DagtidCell;
            DXCell uIItem1622VakthavendeCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIItem1622VakthavendeCell;
            DXCell uIItem2208BakvaktCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIItem2208BakvaktCell;
            DXCell uIItem1218OppgaveutenfCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIItem1218OppgaveutenfCell;
            DXCell uIItem1012RøntgenCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIItem1012RøntgenCell;
            DXCell uIItem0810MorgenmøteCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIItem0810MorgenmøteCell;
            DXCell uIItem1216AdministrasjCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIItem1216AdministrasjCell;
            DXCell uIKONTERINGKonteringpåCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIKONTERINGKonteringpåCell;
            DXCell uIDISPONIBELBeholdsomdCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIDISPONIBELBeholdsomdCell;
            DXCell uIOVEROverliggendeoppgCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UILeftPanelDockPanel.UIOppgavetildelingDockPanel.UIControlContainerCustom.UIGAvailableRolesTable.UIOVEROverliggendeoppgCell;
            #endregion

            // Verify that the 'Text' property of 'KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke' cell equals 'KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIKOMPKREVDEKSKLKANIKKCellText, uIKOMPKREVDEKSKLKANIKKCell.Text);

            // Verify that the 'Text' property of 'MAKS ANTALL SPERRE - Maks antall personer som kan tildeles. Sperre ved overskridelse.' cell equals 'MAKS ANTALL SPERRE - Maks antall personer som kan tildeles. Sperre ved overskridelse.'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIMAKSANTALLSPERREMaksCellText, uIMAKSANTALLSPERREMaksCell.Text);

            // Verify that the 'Text' property of 'KOMP ØNSKET/EKSKL BØR IKKE - Kompetanse ønsket + Eksklusiv bør ikke' cell equals 'KOMP ØNSKET/EKSKL BØR IKKE - Kompetanse ønsket + Eksklusiv bør ikke'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIKOMPØNSKETEKSKLBØRIKCellText, uIKOMPØNSKETEKSKLBØRIKCell.Text);

            // Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved overskridelse.' cell equals 'MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved overskridelse.'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIMAKSANTALLADVARSELMaCellText, uIMAKSANTALLADVARSELMaCell.Text);

            // Verify that the 'Text' property of '08-16 - Dagtid' cell equals '08-16 - Dagtid'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIItem0816DagtidCellText, uIItem0816DagtidCell.Text);

            // Verify that the 'Text' property of '16-22 - Vakthavende' cell equals '16-22 - Vakthavende'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIItem1622VakthavendeCellText, uIItem1622VakthavendeCell.Text);

            // Verify that the 'Text' property of '22-08 - Bakvakt' cell equals '22-08 - Bakvakt'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIItem2208BakvaktCellText, uIItem2208BakvaktCell.Text);

            // Verify that the 'Text' property of '12-18 - Oppgave utenfor arbeidstid' cell equals '12-18 - Oppgave utenfor arbeidstid'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIItem1218OppgaveutenfCellText, uIItem1218OppgaveutenfCell.Text);

            // Verify that the 'Text' property of '10-12 - Røntgen' cell equals '10-12 - Røntgen'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIItem1012RøntgenCellText, uIItem1012RøntgenCell.Text);

            // Verify that the 'Text' property of '08-10 - Morgenmøte' cell equals '08-10 - Morgenmøte'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIItem0810MorgenmøteCellText, uIItem0810MorgenmøteCell.Text);

            // Verify that the 'Text' property of '12-16 - Administrasjon' cell equals '12-16 - Administrasjon'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIItem1216AdministrasjCellText, uIItem1216AdministrasjCell.Text);

            // Verify that the 'Text' property of 'KONTERING - Kontering på oppgaven' cell equals 'KONTERING - Kontering på oppgaven'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIKONTERINGKonteringpåCellText, uIKONTERINGKonteringpåCell.Text);

            // Verify that the 'Text' property of 'DISPONIBEL - Behold som disponibel' cell equals 'DISPONIBEL - Behold som disponibel'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIDISPONIBELBeholdsomdCellText, uIDISPONIBELBeholdsomdCell.Text);

            // Verify that the 'Text' property of 'OVER - Overliggende oppgave avd 4500' cell equals 'OVER - Overliggende oppgave avd 4500'
            Assert.AreEqual(this.CheckInactiveNotInDashboardListExpectedValues.UIOVEROverliggendeoppgCellText, uIOVEROverliggendeoppgCell.Text);
        }
        
        /// <summary>
        /// CheckKompRoleStep5 - Use 'CheckKompRoleStep5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckKompRoleStep5()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell3 = this.UIOppgavetildelingWindow.UISchedulerControl1List1.UIAppointmentCell3;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '12:00 p.m.  to 2:00 p.m.  mandag, september 2, 2024, Subject KOMP ØNSKET/EKSKL BØR IKKE, Time Ledig, 3 of 3'
            Assert.AreEqual(this.CheckKompRoleStep5ExpectedValues.UIAppointmentCell3Name, uIAppointmentCell3.Name);
        }
        
        /// <summary>
        /// CheckListStep26 - Use 'CheckListStep26ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckListStep26()
        {
            #region Variable Declarations
            DXMenuBaseButtonItem uIOVEROverliggendeoppgMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIOVEROverliggendeoppgMenuBaseButtonItem;
            DXMenuBaseButtonItem uIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem;
            DXMenuBaseButtonItem uID4520AndersonMrMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UID4520AndersonMrMenuBaseButtonItem;
            DXMenuBaseButtonItem uID4520BerreJennyMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UID4520BerreJennyMenuBaseButtonItem;
            DXMenuBaseButtonItem uIBarButtonItemLink4MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIBarButtonItemLink4MenuBaseButtonItem;
            DXMenuBaseButtonItem uIGV14520CelestonSiggeMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIGV14520CelestonSiggeMenuBaseButtonItem;
            DXMenuBaseButtonItem uIItem1622Vakthavende4MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIItem1622Vakthavende4MenuBaseButtonItem;
            DXMenuBaseButtonItem uIItem2208Bakvakt4520MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UIItem2208Bakvakt4520MenuBaseButtonItem;
            DXMenuBaseButtonItem uID4520EvenstadRonnyMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem.UID4520EvenstadRonnyMenuBaseButtonItem;
            #endregion

            // Wait for 1 seconds for user delay between actions; Verify that the 'Text' property of 'OVER - Overliggende oppgave avd 4500 (4500)' MenuBaseButtonItem equals 'N (4520) - Dropp, Danny'
            Playback.Wait(1000);
            Assert.AreEqual(this.CheckListStep26ExpectedValues.UIOVEROverliggendeoppgMenuBaseButtonItemText, uIOVEROverliggendeoppgMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke (4520)' MenuBaseButtonItem equals 'D (4520) - Ahlgren, Klas'
            Assert.AreEqual(this.CheckListStep26ExpectedValues.UIKOMPKREVDEKSKLKANIKKMenuBaseButtonItemText, uIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'D (4520) - Anderson, Mr' MenuBaseButtonItem equals 'D (4520) - Anderson, Mr'
            Assert.AreEqual(this.CheckListStep26ExpectedValues.UID4520AndersonMrMenuBaseButtonItemText, uID4520AndersonMrMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'D (4520) - Berre, Jenny' MenuBaseButtonItem equals 'D (4520) - Berre, Jenny'
            Assert.AreEqual(this.CheckListStep26ExpectedValues.UID4520BerreJennyMenuBaseButtonItemText, uID4520BerreJennyMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'BarButtonItemLink[4]' MenuBaseButtonItem equals 'D (4520) - Brusk, Benny'
            Assert.AreEqual(this.CheckListStep26ExpectedValues.UIBarButtonItemLink4MenuBaseButtonItemText, uIBarButtonItemLink4MenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'GV1 (4520) - Celeston, Sigge' MenuBaseButtonItem equals 'GV1 (4520) - Celeston, Sigge'
            Assert.AreEqual(this.CheckListStep26ExpectedValues.UIGV14520CelestonSiggeMenuBaseButtonItemText, uIGV14520CelestonSiggeMenuBaseButtonItem.Text);

            // Verify that the 'Text' property of '16-22 - Vakthavende (4520)' MenuBaseButtonItem equals 'A (4520) - Cocker, James'
            Assert.AreEqual(this.CheckListStep26ExpectedValues.UIItem1622Vakthavende4MenuBaseButtonItemText, uIItem1622Vakthavende4MenuBaseButtonItem.Text);

            // Verify that the 'Text' property of '22-08 - Bakvakt (4520)' MenuBaseButtonItem equals 'A (4520) - Danderyd, Paul'
            Assert.AreEqual(this.CheckListStep26ExpectedValues.UIItem2208Bakvakt4520MenuBaseButtonItemText, uIItem2208Bakvakt4520MenuBaseButtonItem.Text);

            // Verify that the 'Text' property of 'D (4520) - Evenstad, Ronny' MenuBaseButtonItem equals 'D (4520) - Evenstad, Ronny'
            Assert.AreEqual(this.CheckListStep26ExpectedValues.UID4520EvenstadRonnyMenuBaseButtonItemText, uID4520EvenstadRonnyMenuBaseButtonItem.Text);
        }
        
        /// <summary>
        /// CheckOkDisabled - Use 'CheckOkDisabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOkDisabled()
        {
            #region Variable Declarations
            DXButton uIOKButton = this.UIOppgavetildelingWindow.UIOKButton;
            #endregion

            // Verify that the 'Enabled' property of 'OK' button equals 'False'
            Assert.AreEqual(this.CheckOkDisabledExpectedValues.UIOKButtonEnabled, uIOKButton.Enabled);
        }
        
        /// <summary>
        /// CheckOverRoleStep5 - Use 'CheckOverRoleStep5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOverRoleStep5()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell2 = this.UIOppgavetildelingWindow.UISchedulerControl1List1.UIAppointmentCell2;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject OVER, Time Ledig, 2 of 3'
            Assert.AreEqual(this.CheckOverRoleStep5ExpectedValues.UIAppointmentCell2Name, uIAppointmentCell2.Name);
        }
        
        /// <summary>
        /// CheckPlannerOpenStep34 - Use 'CheckPlannerOpenStep34ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPlannerOpenStep34()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList.UIAppointmentCell;
            #endregion

            // Verify that the 'Value' property of 'Appointment' cell equals 'Appointment'
            Assert.AreEqual(this.CheckPlannerOpenStep34ExpectedValues.UIAppointmentCellValue, uIAppointmentCell.Value);
        }
        
        /// <summary>
        /// CheckRole1AddedStep20 - Use 'CheckRole1AddedStep20ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole1AddedStep20()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell = this.UIOppgavetildelingWindow.UISchedulerControl1List4.UIAppointmentCell;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals 'Dagvisning, 5 total events 8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, Subject 08-10, Time Ledig, 3 of 5'
            Assert.AreEqual(this.CheckRole1AddedStep20ExpectedValues.UIAppointmentCellName, uIAppointmentCell.Name);
        }
        
        /// <summary>
        /// CheckRole1RoleStep42 - Use 'CheckRole1RoleStep42ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole1RoleStep42()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList4.UIAppointmentCell2;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '8:00 a.m.  to 12:00 p.m.  mandag, september 2, 2024, Subject , , 1 of 9'
            Assert.AreEqual(this.CheckRole1RoleStep42ExpectedValues.UIAppointmentCell2Name, uIAppointmentCell2.Name);
        }
        
        /// <summary>
        /// CheckRole1RoleStep47 - Use 'CheckRole1RoleStep47ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole1RoleStep47()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList12.UIAppointmentCell;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 2 of 7'
            Assert.AreEqual(this.CheckRole1RoleStep47ExpectedValues.UIAppointmentCellName, uIAppointmentCell.Name);
        }
        
        /// <summary>
        /// CheckRole2AddedStep20 - Use 'CheckRole2AddedStep20ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole2AddedStep20()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell1 = this.UIOppgavetildelingWindow.UISchedulerControl1List4.UIAppointmentCell1;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals 'Dagvisning, 5 total events 10:00 a.m.  to 12:00 p.m.  tirsdag, september 3, 2024, Subject 10-12, Time Ledig, 4 of 5'
            Assert.AreEqual(this.CheckRole2AddedStep20ExpectedValues.UIAppointmentCell1Name, uIAppointmentCell1.Name);
        }
        
        /// <summary>
        /// CheckRole2RoleStep42 - Use 'CheckRole2RoleStep42ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole2RoleStep42()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell3 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList4.UIAppointmentCell3;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '12:00 p.m.  to 4:00 p.m.  mandag, september 2, 2024, Subject , , 2 of 9'
            Assert.AreEqual(this.CheckRole2RoleStep42ExpectedValues.UIAppointmentCell3Name, uIAppointmentCell3.Name);
        }
        
        /// <summary>
        /// CheckRole2RoleStep47 - Use 'CheckRole2RoleStep47ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole2RoleStep47()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList12.UIAppointmentCell1;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 3 of 7'
            Assert.AreEqual(this.CheckRole2RoleStep47ExpectedValues.UIAppointmentCell1Name, uIAppointmentCell1.Name);
        }
        
        /// <summary>
        /// CheckRole3AddedStep20 - Use 'CheckRole3AddedStep20ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole3AddedStep20()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell2 = this.UIOppgavetildelingWindow.UISchedulerControl1List4.UIAppointmentCell2;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals 'Dagvisning, 5 total events 12:00 p.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject 12-16, Time Ledig, 5 of 5'
            Assert.AreEqual(this.CheckRole3AddedStep20ExpectedValues.UIAppointmentCell2Name, uIAppointmentCell2.Name);
        }
        
        /// <summary>
        /// CheckRole3RoleStep42 - Use 'CheckRole3RoleStep42ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole3RoleStep42()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell4 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList4.UIAppointmentCell4;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject , , 3 of 9'
            Assert.AreEqual(this.CheckRole3RoleStep42ExpectedValues.UIAppointmentCell4Name, uIAppointmentCell4.Name);
        }
        
        /// <summary>
        /// CheckRole3RoleStep47 - Use 'CheckRole3RoleStep47ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole3RoleStep47()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell2 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList12.UIAppointmentCell2;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '10:00 a.m.  to 12:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 4 of 7'
            Assert.AreEqual(this.CheckRole3RoleStep47ExpectedValues.UIAppointmentCell2Name, uIAppointmentCell2.Name);
        }
        
        /// <summary>
        /// CheckRole4RoleStep42 - Use 'CheckRole4RoleStep42ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole4RoleStep42()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell5 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList4.UIAppointmentCell5;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '12:00 p.m.  to 2:00 p.m.  mandag, september 2, 2024, Subject , , 4 of 9'
            Assert.AreEqual(this.CheckRole4RoleStep42ExpectedValues.UIAppointmentCell5Name, uIAppointmentCell5.Name);
        }
        
        /// <summary>
        /// CheckRole4RoleStep47 - Use 'CheckRole4RoleStep47ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole4RoleStep47()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell3 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList12.UIAppointmentCell3;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '12:00 p.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 5 of 7'
            Assert.AreEqual(this.CheckRole4RoleStep47ExpectedValues.UIAppointmentCell3Name, uIAppointmentCell3.Name);
        }
        
        /// <summary>
        /// CheckRole5RoleStep42 - Use 'CheckRole5RoleStep42ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole5RoleStep42()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell6 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList4.UIAppointmentCell6;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject , , 5 of 9'
            Assert.AreEqual(this.CheckRole5RoleStep42ExpectedValues.UIAppointmentCell6Name, uIAppointmentCell6.Name);
        }
        
        /// <summary>
        /// CheckRole6RoleStep42 - Use 'CheckRole6RoleStep42ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole6RoleStep42()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell7 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList4.UIAppointmentCell7;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 8 of 9'
            Assert.AreEqual(this.CheckRole6RoleStep42ExpectedValues.UIAppointmentCell7Name, uIAppointmentCell7.Name);
        }
        
        /// <summary>
        /// CheckRole7RoleStep42 - Use 'CheckRole7RoleStep42ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRole7RoleStep42()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell8 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList4.UIAppointmentCell8;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals '6:00 a.m.  to 8:00 a.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 9 of 9'
            Assert.AreEqual(this.CheckRole7RoleStep42ExpectedValues.UIAppointmentCell8Name, uIAppointmentCell8.Name);
        }
        
        /// <summary>
        /// CheckRoleAddedStep18 - Use 'CheckRoleAddedStep18ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleAddedStep18()
        {
            #region Variable Declarations
            DXCell uICockerJamesCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIAften00167770770FalsDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UICockerJamesCell;
            DXCell uIMAKSANTALLADVARSELCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIAften00167770770FalsDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIMAKSANTALLADVARSELCell;
            DXCell uIItem22000800Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UISpesifikasjonDockPanel.UIControlContainerCustom.UIVhSpecificationCustom.UIPcViewClient.UISpecificationViewCustom.UIFcvwDetailsCustom.UISpecificationRoleTabCustom.UIGcRolesTable.UIItem22000800Cell1;
            DXCell uIItem2208BakvaktCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UISpesifikasjonDockPanel.UIControlContainerCustom.UIVhSpecificationCustom.UIPcViewClient.UISpecificationViewCustom.UIFcvwDetailsCustom.UISpecificationRoleTabCustom.UIGcRolesTable.UIItem2208BakvaktCell1;
            #endregion

            // Verify that the 'Text' property of 'Cocker, James' cell equals 'Cocker, James'
            Assert.AreEqual(this.CheckRoleAddedStep18ExpectedValues.UICockerJamesCellText, uICockerJamesCell.Text);

            // Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals '12-18'
            Assert.AreEqual(this.CheckRoleAddedStep18ExpectedValues.UIMAKSANTALLADVARSELCellText, uIMAKSANTALLADVARSELCell.Text);

            // Verify that the 'Text' property of '22:00 - 08:00' cell equals '15:00 - 21:00'
            Assert.AreEqual(this.CheckRoleAddedStep18ExpectedValues.UIItem22000800Cell1Text, uIItem22000800Cell1.Text);

            // Verify that the 'Text' property of '22-08 - Bakvakt' cell equals '12-18 - Oppgave utenfor arbeidstid'
            Assert.AreEqual(this.CheckRoleAddedStep18ExpectedValues.UIItem2208BakvaktCell1Text, uIItem2208BakvaktCell1.Text);
        }
        
        /// <summary>
        /// CheckRoleAddedStep19 - Use 'CheckRoleAddedStep19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleAddedStep19()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell3 = this.UIOppgavetildelingWindow.UISchedulerControl1List3.UIAppointmentCell3;
            #endregion

            // Verify that the 'Name' property of 'Appointment' cell equals 'Dagvisning, 2 total events 8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject 08-16, Time Ledig, 2 of 2'
            Assert.AreEqual(this.CheckRoleAddedStep19ExpectedValues.UIAppointmentCell3Name, uIAppointmentCell3.Name);
        }
        
        /// <summary>
        /// CheckRoleAddedStep35 - Use 'CheckRoleAddedStep35ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleAddedStep35()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList1.UIAppointmentCell;
            #endregion

            // Verify that the 'Value' property of 'Appointment' cell equals 'Appointment'
            Assert.AreEqual(this.CheckRoleAddedStep35ExpectedValues.UIAppointmentCellValue, uIAppointmentCell.Value);
        }
        
        /// <summary>
        /// CheckRoleAddedStep7 - Use 'CheckRoleAddedStep7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleAddedStep7()
        {
            #region Variable Declarations
            DXCell uIMAKSANTALLADVARSELCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIAften00167770770FalsDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIMAKSANTALLADVARSELCell;
            #endregion

            // Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals 'MAKS ANTALL ADVARSEL'
            Assert.AreEqual(this.CheckRoleAddedStep7ExpectedValues.UIMAKSANTALLADVARSELCellText, uIMAKSANTALLADVARSELCell.Text);
        }
        
        /// <summary>
        /// CheckRoleDeletedStep12 - Use 'CheckRoleDeletedStep12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleDeletedStep12()
        {
            #region Variable Declarations
            DXCell uIEldersonAllanCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIBakvakt00167770770FaDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIEldersonAllanCell;
            DXCell uIItem16222208Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIBakvakt00167770770FaDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIItem16222208Cell;
            #endregion

            // Verify that the 'Text' property of 'Elderson, Allan' cell equals 'Elderson, Allan'
            Assert.AreEqual(this.CheckRoleDeletedStep12ExpectedValues.UIEldersonAllanCellText, uIEldersonAllanCell.Text);

            // Verify that the 'Text' property of '16-22, 22-08' cell equals '22-08'
            Assert.AreEqual(this.CheckRoleDeletedStep12ExpectedValues.UIItem16222208CellText, uIItem16222208Cell.Text);
        }
        
        /// <summary>
        /// CheckRoleError1Step44 - Use 'CheckRoleError1Step44ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleError1Step44()
        {
            #region Variable Declarations
            WinToolTip uIHeiErduvirkeligspesiToolTip = this.UIItemWindow5.UIHeiErduvirkeligspesiToolTip;
            #endregion

            // Verify that the 'Name' property of 'Hei! Er du virkelig spesialist eller??. Ingen andr...' tooltip equals 'Hei! Er du virkelig spesialist eller??. Ingen andre oppgaver samtidig med denne!!. '
            Assert.AreEqual(this.CheckRoleError1Step44ExpectedValues.UIHeiErduvirkeligspesiToolTipName, uIHeiErduvirkeligspesiToolTip.Name);
        }
        
        /// <summary>
        /// CheckRoleError2Step44 - Use 'CheckRoleError2Step44ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleError2Step44()
        {
            #region Variable Declarations
            WinToolTip uIOppgave0810overlappeToolTip = this.UIItemWindow5.UIOppgave0810overlappeToolTip;
            #endregion

            // Verify that the 'Name' property of 'Oppgave 08-10 overlapper med allerede tildelt eksk...' tooltip equals 'Oppgave 08-10 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL KAN IKKE. '
            Assert.AreEqual(this.CheckRoleError2Step44ExpectedValues.UIOppgave0810overlappeToolTipName, uIOppgave0810overlappeToolTip.Name);
        }
        
        /// <summary>
        /// CheckRoleError3Step44 - Use 'CheckRoleError3Step44ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleError3Step44()
        {
            #region Variable Declarations
            WinToolTip uIOppgave1012overlappeToolTip = this.UIItemWindow6.UIOppgave1012overlappeToolTip;
            #endregion

            // Verify that the 'Name' property of 'Oppgave 10-12 overlapper med allerede tildelt eksk...' tooltip equals 'Oppgave 10-12 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL KAN IKKE. '
            Assert.AreEqual(this.CheckRoleError3Step44ExpectedValues.UIOppgave1012overlappeToolTipName, uIOppgave1012overlappeToolTip.Name);
        }
        
        /// <summary>
        /// CheckRoleError4Step44 - Use 'CheckRoleError4Step44ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleError4Step44()
        {
            #region Variable Declarations
            WinToolTip uIOppgave1216overlappeToolTip = this.UIItemWindow7.UIOppgave1216overlappeToolTip;
            #endregion

            // Verify that the 'Name' property of 'Oppgave 12-16 overlapper med allerede tildelt eksk...' tooltip equals 'Oppgave 12-16 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL KAN IKKE. '
            Assert.AreEqual(this.CheckRoleError4Step44ExpectedValues.UIOppgave1216overlappeToolTipName, uIOppgave1216overlappeToolTip.Name);
        }
        
        /// <summary>
        /// CheckRolePeriodStep17 - Use 'CheckRolePeriodStep17ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRolePeriodStep17()
        {
            #region Variable Declarations
            DXTextEdit uISteFromTimeEdit = this.UIOppgavetildelingWindow1.UIGcContentClient.UIGcDetailsClient.UIVhDetailsCustom.UIPcViewClient.UIRoleDetailsViewCustom.UIPanelControl1Client.UISteFromTimeEdit;
            DXTextEdit uISteToTimeEdit = this.UIOppgavetildelingWindow1.UIGcContentClient.UIGcDetailsClient.UIVhDetailsCustom.UIPcViewClient.UIRoleDetailsViewCustom.UIPanelControl1Client.UISteToTimeEdit;
            #endregion

            // Verify that the 'Text' property of 'steFromTime' text box equals '15:00'
            Assert.AreEqual(this.CheckRolePeriodStep17ExpectedValues.UISteFromTimeEditText, uISteFromTimeEdit.Text);

            // Verify that the 'Text' property of 'steToTime' text box equals '21:00'
            Assert.AreEqual(this.CheckRolePeriodStep17ExpectedValues.UISteToTimeEditText, uISteToTimeEdit.Text);
        }
        
        /// <summary>
        /// CheckRolePeriodStep37 - Use 'CheckRolePeriodStep37ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRolePeriodStep37()
        {
            #region Variable Declarations
            DXTextEdit uISteFromTimeEdit = this.UIOppgavetildelingWindow1.UIGcContentClient.UIGcDetailsClient.UIVhDetailsCustom.UIPcViewClient.UIRoleDetailsViewCustom.UIPanelControl1Client.UISteFromTimeEdit;
            DXTextEdit uISteToTimeEdit = this.UIOppgavetildelingWindow1.UIGcContentClient.UIGcDetailsClient.UIVhDetailsCustom.UIPcViewClient.UIRoleDetailsViewCustom.UIPanelControl1Client.UISteToTimeEdit;
            #endregion

            // Verify that the 'Text' property of 'steFromTime' text box equals '12:00'
            Assert.AreEqual(this.CheckRolePeriodStep37ExpectedValues.UISteFromTimeEditText, uISteFromTimeEdit.Text);

            // Verify that the 'Text' property of 'steToTime' text box equals '16:00'
            Assert.AreEqual(this.CheckRolePeriodStep37ExpectedValues.UISteToTimeEditText, uISteToTimeEdit.Text);
        }
        
        /// <summary>
        /// CheckRolesAddedStep11 - Use 'CheckRolesAddedStep11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRolesAddedStep11()
        {
            #region Variable Declarations
            DXCell uIEldersonAllanCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIBakvakt00167770770FaDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIEldersonAllanCell;
            DXCell uIItem16222208Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIBakvakt00167770770FaDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIItem16222208Cell;
            #endregion

            // Verify that the 'Text' property of 'Elderson, Allan' cell equals 'Elderson, Allan'
            Assert.AreEqual(this.CheckRolesAddedStep11ExpectedValues.UIEldersonAllanCellText, uIEldersonAllanCell.Text);

            // Verify that the 'Text' property of '16-22, 22-08' cell equals '16-22, 22-08'
            Assert.AreEqual(this.CheckRolesAddedStep11ExpectedValues.UIItem16222208CellText, uIItem16222208Cell.Text);
        }
        
        /// <summary>
        /// CheckRolesAddedStep6 - Use 'CheckRolesAddedStep6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRolesAddedStep6()
        {
            #region Variable Declarations
            DXCell uIOVERKOMPØNSKETEKSKLBCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIOVERKOMPØNSKETEKSKLBCell;
            #endregion

            // Verify that the 'Text' property of 'OVER, KOMP ØNSKET/EKSKL BØR IKKE' cell equals 'OVER, KOMP ØNSKET/EKSKL BØR IKKE'
            Assert.AreEqual(this.CheckRolesAddedStep6ExpectedValues.UIOVERKOMPØNSKETEKSKLBCellText, uIOVERKOMPØNSKETEKSKLBCell.Text);
        }
        
        /// <summary>
        /// CheckRolesAddedStep9 - Use 'CheckRolesAddedStep9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRolesAddedStep9()
        {
            #region Variable Declarations
            DXCell uIMAKSANTALLADVARSELCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIMAKSANTALLADVARSELCell;
            #endregion

            // Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals 'MAKS ANTALL ADVARSEL'
            Assert.AreEqual(this.CheckRolesAddedStep9ExpectedValues.UIMAKSANTALLADVARSELCellText, uIMAKSANTALLADVARSELCell.Text);
        }
        
        /// <summary>
        /// CheckRolesExcangedStep10 - Use 'CheckRolesExcangedStep10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRolesExcangedStep10()
        {
            #region Variable Declarations
            DXCell uIAndersonMrCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIAndersonMrCell;
            DXCell uIOVERKOMPØNSKETEKSKLBCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIOVERKOMPØNSKETEKSKLBCell;
            DXCell uIBruskBennyCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIBruskBennyCell;
            DXCell uIMAKSANTALLADVARSELCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIMAKSANTALLADVARSELCell;
            #endregion

            // Verify that the 'Text' property of 'Anderson, Mr' cell equals 'Anderson, Mr'
            Assert.AreEqual(this.CheckRolesExcangedStep10ExpectedValues.UIAndersonMrCellText, uIAndersonMrCell.Text);

            // Verify that the 'Text' property of 'OVER, KOMP ØNSKET/EKSKL BØR IKKE' cell equals 'MAKS ANTALL ADVARSEL'
            Assert.AreEqual(this.CheckRolesExcangedStep10ExpectedValues.UIOVERKOMPØNSKETEKSKLBCellText, uIOVERKOMPØNSKETEKSKLBCell.Text);

            // Verify that the 'Text' property of 'Brusk, Benny' cell equals 'Brusk, Benny'
            Assert.AreEqual(this.CheckRolesExcangedStep10ExpectedValues.UIBruskBennyCellText, uIBruskBennyCell.Text);

            // Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals 'OVER, KOMP ØNSKET/EKSKL BØR IKKE'
            Assert.AreEqual(this.CheckRolesExcangedStep10ExpectedValues.UIMAKSANTALLADVARSELCellText, uIMAKSANTALLADVARSELCell.Text);
        }
        
        /// <summary>
        /// CheckRoleWarnings1Step46 - Use 'CheckRoleWarnings1Step46ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleWarnings1Step46()
        {
            #region Variable Declarations
            WinToolTip uIAnsattmanglerfølgendToolTip = this.UIItemWindow8.UIAnsattmanglerfølgendToolTip;
            #endregion

            // Verify that the 'Name' property of 'Ansatt mangler følgende ønsket kompetanse for å de...' tooltip equals 'Ansatt mangler følgende ønsket kompetanse for å dekke oppgave KOMP ØNSKET/EKSKL BØR IKKE: STLEG. Ikke lurt å ha flere oppgaver sammen med denne!!. '
            Assert.AreEqual(this.CheckRoleWarnings1Step46ExpectedValues.UIAnsattmanglerfølgendToolTipName, uIAnsattmanglerfølgendToolTip.Name);
        }
        
        /// <summary>
        /// CheckRoleWarnings2Step46 - Use 'CheckRoleWarnings2Step46ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleWarnings2Step46()
        {
            #region Variable Declarations
            WinToolTip uIOppgave0810overlappeToolTip = this.UIItemWindow9.UIOppgave0810overlappeToolTip;
            #endregion

            // Verify that the 'Name' property of 'Oppgave 08-10 overlapper med allerede tildelt delv...' tooltip equals 'Oppgave 08-10 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKET/EKSKL BØR IKKE. '
            Assert.AreEqual(this.CheckRoleWarnings2Step46ExpectedValues.UIOppgave0810overlappeToolTipName, uIOppgave0810overlappeToolTip.Name);
        }
        
        /// <summary>
        /// CheckRoleWarnings3Step46 - Use 'CheckRoleWarnings3Step46ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleWarnings3Step46()
        {
            #region Variable Declarations
            WinToolTip uIOppgave1012overlappeToolTip = this.UIItemWindow10.UIOppgave1012overlappeToolTip;
            #endregion

            // Verify that the 'Name' property of 'Oppgave 10-12 overlapper med allerede tildelt delv...' tooltip equals 'Oppgave 10-12 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKET/EKSKL BØR IKKE. '
            Assert.AreEqual(this.CheckRoleWarnings3Step46ExpectedValues.UIOppgave1012overlappeToolTipName, uIOppgave1012overlappeToolTip.Name);
        }
        
        /// <summary>
        /// CheckRoleWarnings4Step46 - Use 'CheckRoleWarnings4Step46ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRoleWarnings4Step46()
        {
            #region Variable Declarations
            WinToolTip uIOppgave1216overlappeToolTip = this.UIItemWindow11.UIOppgave1216overlappeToolTip;
            #endregion

            // Verify that the 'Name' property of 'Oppgave 12-16 overlapper med allerede tildelt delv...' tooltip equals 'Oppgave 12-16 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKET/EKSKL BØR IKKE. '
            Assert.AreEqual(this.CheckRoleWarnings4Step46ExpectedValues.UIOppgave1216overlappeToolTipName, uIOppgave1216overlappeToolTip.Name);
        }
        
        /// <summary>
        /// CheckSpecRoleStep13 - Use 'CheckSpecRoleStep13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSpecRoleStep13()
        {
            #region Variable Declarations
            DXCell uIItem22000800Cell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UISpesifikasjonDockPanel.UIControlContainerCustom.UIVhSpecificationCustom.UIPcViewClient.UISpecificationViewCustom.UIFcvwDetailsCustom.UISpecificationRoleTabCustom.UIGcRolesTable.UIItem22000800Cell1;
            DXCell uIItem2208BakvaktCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIBottomPanelDockPanel.UISpesifikasjonDockPanel.UIControlContainerCustom.UIVhSpecificationCustom.UIPcViewClient.UISpecificationViewCustom.UIFcvwDetailsCustom.UISpecificationRoleTabCustom.UIGcRolesTable.UIItem2208BakvaktCell1;
            #endregion

            // Verify that the 'Text' property of '22:00 - 08:00' cell equals '22:00 - 08:00'
            Assert.AreEqual(this.CheckSpecRoleStep13ExpectedValues.UIItem22000800Cell1Text, uIItem22000800Cell1.Text);

            // Verify that the 'Text' property of '22-08 - Bakvakt' cell equals '22-08 - Bakvakt'
            Assert.AreEqual(this.CheckSpecRoleStep13ExpectedValues.UIItem2208BakvaktCell1Text, uIItem2208BakvaktCell1.Text);
        }
        
        /// <summary>
        /// ClickOkInfoWinStep14
        /// </summary>
        public void ClickOkInfoWinStep14()
        {
            #region Variable Declarations
            DXButton uIJAButton = this.UIABS3008InformasjonWindow.UIJAButton;
            #endregion

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ConstructBlueFilterStep32 - Use 'ConstructBlueFilterStep32Params' to pass parameters into this method.
        /// </summary>
        public void ConstructBlueFilterStep32()
        {
            #region Variable Declarations
            DXCheckedListBox uIClbColorFilterCheckedListBox = this.UIOppgavevaktbokvisninWindow.UIPcRowSelectionClient.UIGcColorFilterClient.UIClbColorFilterCheckedListBox;
            DXButton uILagresomButton = this.UIOppgavevaktbokvisninWindow.UIGcSavedViewsClient.UILagresomButton;
            DXTextEdit uITxtFilterNameEdit = this.UIItemWindow.UIPopupContainerBarConMenu.UIPccFilterNameClient.UIPnlFilterNameClient.UITxtFilterNameEdit;
            DXButton uIOKLagreButton = this.UIItemWindow.UIPopupContainerBarConMenu.UIPccFilterNameClient.UIPnlFilterNameClient.UIOKLagreButton;
            #endregion

            // Type '4' in 'clbColorFilter' CheckedListBox
            //CheckedIndicesAsString
            uIClbColorFilterCheckedListBox.CheckedIndicesAsString = this.ConstructBlueFilterStep32Params.UIClbColorFilterCheckedListBoxCheckedIndicesAsString;

            // Click 'Lagre som...' button
            Mouse.Click(uILagresomButton, new Point(1, 1));

            // Type 'BLÅ' in 'txtFilterName' text box
            //ValueAsString
            uITxtFilterNameEdit.ValueAsString = this.ConstructBlueFilterStep32Params.UITxtFilterNameEditValueAsString;

            // Click 'OK - Lagre' button
            Mouse.Click(uIOKLagreButton, new Point(1, 1));
        }
        
        /// <summary>
        /// CoverVacantShiftStep15
        /// </summary>
        public void CoverVacantShiftStep15()
        {
            #region Variable Declarations
            DXCell uIGulliAndreasCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UIGulliAndreasCell;
            DXCell uILEDIGVAKTCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UILEDIGVAKTCell;
            #endregion

            // Move 'Gulli, Andreas' cell to 'LEDIG VAKT' cell
            uILEDIGVAKTCell.EnsureClickable(new Point(38, 6));
            Mouse.StartDragging(uIGulliAndreasCell, new Point(30, 9));
            Mouse.StopDragging(uILEDIGVAKTCell, new Point(38, 6));
        }
        
        /// <summary>
        /// DeleteBerreRoleStep21
        /// </summary>
        public void DeleteBerreRoleStep21()
        {
            #region Variable Declarations
            DXListBoxItem uID08001600ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList1.UID08001600ListItem;
            DXMenuItem uISletttildelingavoppgMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UISletttildelingavoppgMenuItem;
            DXMenuBaseButtonItem uIItem0816Dagtid4520MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UISletttildelingavoppgMenuItem.UIItem0816Dagtid4520MenuBaseButtonItem;
            DXButton uIJAButton = this.UIROL3005InformasjonWindow.UIJAButton;
            #endregion

            // Right-Click 'D - (08:00 - 16:00)' list item
            Mouse.Click(uID08001600ListItem, MouseButtons.Right, ModifierKeys.None, new Point(65, 6));

            // Click 'Slett tildeling av oppgave' menu item
            Mouse.Click(uISletttildelingavoppgMenuItem, new Point(107, 10));

            // Click '08-16 - Dagtid (4520)' MenuBaseButtonItem
            Mouse.Click(uIItem0816Dagtid4520MenuBaseButtonItem, new Point(90, 11));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DeleteBlueFilterStep32 - Use 'DeleteBlueFilterStep32Params' to pass parameters into this method.
        /// </summary>
        public void DeleteBlueFilterStep32()
        {
            #region Variable Declarations
            DXComboBox uICbSavedViewsComboBox = this.UIOppgavevaktbokvisninWindow.UIGcSavedViewsClient.UICbSavedViewsComboBox;
            DXButton uISlettButton = this.UIOppgavevaktbokvisninWindow.UIGcSavedViewsClient.UISlettButton;
            DXButton uIJAButton = this.UIDAY4011InformasjonWindow.UIJAButton;
            #endregion

            // Select '0' in 'cbSavedViews' combo box
            //SelectedIndex
            uICbSavedViewsComboBox.SelectedIndex = this.DeleteBlueFilterStep32Params.UICbSavedViewsComboBoxSelectedIndex;

            // Click 'Slett' button
            Mouse.Click(uISlettButton, new Point(1, 1));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DeleteRole1622EldersonStep12
        /// </summary>
        public void DeleteRole1622EldersonStep12()
        {
            #region Variable Declarations
            DXCell uIItem16222208Cell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIBakvakt00167770770FaDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIItem16222208Cell;
            DXMenuItem uISletttildelingavoppgMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UISletttildelingavoppgMenuItem;
            DXMenuBaseButtonItem uIItem1622Vakthavende4MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UISletttildelingavoppgMenuItem.UIItem1622Vakthavende4MenuBaseButtonItem;
            DXButton uIJAButton = this.UIROL3005InformasjonWindow.UIJAButton;
            #endregion

            // Right-Click '16-22, 22-08' cell
            Mouse.Click(uIItem16222208Cell, MouseButtons.Right, ModifierKeys.None, new Point(19, 3));

            // Click 'Slett tildeling av oppgave' menu item
            Mouse.Click(uISletttildelingavoppgMenuItem, new Point(48, 10));

            // Click '16-22 - Vakthavende (4520)' MenuBaseButtonItem
            Mouse.Click(uIItem1622Vakthavende4MenuBaseButtonItem, new Point(86, 10));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DeleteRoleEvenstadStep23
        /// </summary>
        public void DeleteRoleEvenstadStep23()
        {
            #region Variable Declarations
            DXListBoxItem uIGatsoftGatBusinessLoListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList2.UIGatsoftGatBusinessLoListItem;
            DXRibbonButtonItem uISlettRibbonBaseButtonItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIGrpMiscRibbonPageGroup.UISlettRibbonBaseButtonItem;
            DXButton uIJAButton = this.UIROL3005InformasjonWindow.UIJAButton;
            #endregion

            // Move 'Gatsoft.Gat.BusinessLogic.WorkSchedule.DataStructures.WorkScheduleRole' list item to 'Slett' RibbonBaseButtonItem
            uISlettRibbonBaseButtonItem.EnsureClickable(new Point(20, 14));
            Mouse.StartDragging(uIGatsoftGatBusinessLoListItem, new Point(36, 5));
            Mouse.StopDragging(uISlettRibbonBaseButtonItem, new Point(20, 14));

            // Click '&Ja' button
            Mouse.Click(uIJAButton, new Point(1, 1));
        }
        
        /// <summary>
        /// DragRoleToCelestonStep40
        /// </summary>
        public void DragRoleToCelestonStep40()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell1 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList2.UIAppointmentCell1;
            WinList uISchedulerControlList12 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UIRoleSchedulerControlWindow.UISchedulerControlList.UISchedulerControlList12;
            #endregion

            // Move 'Appointment' cell to 'schedulerControl' list box
            uISchedulerControlList12.EnsureClickable(new Point(507, 193));
            Mouse.StartDragging(uIAppointmentCell1, new Point(33, 18));
            Mouse.StopDragging(uISchedulerControlList12, new Point(507, 193));
        }
        
        /// <summary>
        /// ExchangeFnattDroppRolesStep42
        /// </summary>
        public void ExchangeFnattDroppRolesStep42()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList9.UIAppointmentCell;
            DXMenuItem uIByttoppgavermedMenuItem1 = this.UIItemWindow.UIPopupMenuBarControlMenu.UIByttoppgavermedMenuItem1;
            DXMenuBaseButtonItem uIDroppDannyMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIByttoppgavermedMenuItem1.UIDroppDannyMenuBaseButtonItem;
            #endregion

            // Right-Click 'Appointment' cell
            Mouse.Click(uIAppointmentCell, MouseButtons.Right, ModifierKeys.None, new Point(56, 21));

            // Click 'Bytt oppgave(r) med' menu item
            Mouse.Click(uIByttoppgavermedMenuItem1, new Point(128, 11));

            // Click 'Dropp, Danny' MenuBaseButtonItem
            Mouse.Click(uIDroppDannyMenuBaseButtonItem, new Point(83, 10));
        }
        
        /// <summary>
        /// ExchangeFnattEldersonStep13
        /// </summary>
        public void ExchangeFnattEldersonStep13()
        {
            #region Variable Declarations
            DXCell uIFnattGuroCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIFriVikar00167770770FDockPanel.UIControlContainerCustom.UIGcFreeColumnTable.UIFnattGuroCell;
            DXCell uIEldersonAllanCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIBakvakt00167770770FaDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIEldersonAllanCell;
            DXButton uICloseButton = this.UISammenligningavkompeWindow.UICloseButton;
            #endregion

            // Move 'Fnatt, Guro' cell to 'Elderson, Allan' cell
            uIEldersonAllanCell.EnsureClickable(new Point(17, 6));
            Mouse.StartDragging(uIFnattGuroCell, new Point(21, 4));
            Mouse.StopDragging(uIEldersonAllanCell, new Point(17, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(7, 7));
        }
        
        /// <summary>
        /// ExchangeRolesStep10
        /// </summary>
        public void ExchangeRolesStep10()
        {
            #region Variable Declarations
            DXCell uIOVERKOMPØNSKETEKSKLBCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIOVERKOMPØNSKETEKSKLBCell;
            DXMenuItem uIByttoppgavermedMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIByttoppgavermedMenuItem;
            DXMenuBaseButtonItem uIBruskBennyMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIByttoppgavermedMenuItem.UIBruskBennyMenuBaseButtonItem;
            #endregion

            // Right-Click 'OVER, KOMP ØNSKET/EKSKL BØR IKKE' cell
            Mouse.Click(uIOVERKOMPØNSKETEKSKLBCell, MouseButtons.Right, ModifierKeys.None, new Point(24, 5));

            // Click 'Bytt oppgave(r) med' menu item
            Mouse.Click(uIByttoppgavermedMenuItem, new Point(138, 10));

            // Click 'Brusk, Benny' MenuBaseButtonItem
            Mouse.Click(uIBruskBennyMenuBaseButtonItem, new Point(73, 11));
        }
        
        /// <summary>
        /// MoveSliderToSeDisp - Use 'MoveSliderToSeDispParams' to pass parameters into this method.
        /// </summary>
        public void MoveSliderToSeDisp()
        {
            #region Variable Declarations
            DXSplitContainerControl uILayoutPanelSplitContainerControl = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl;
            #endregion

            // Type '622' in 'layoutPanel' SplitContainerControl
            //SplitterPosition
            uILayoutPanelSplitContainerControl.SplitterPosition = this.MoveSliderToSeDispParams.UILayoutPanelSplitContainerControlSplitterPosition;
        }
        
        /// <summary>
        /// OpenAddRoleList
        /// </summary>
        public void OpenAddRoleList()
        {
            #region Variable Declarations
            WinList uISchedulerControlList16 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UIRoleSchedulerControlWindow.UISchedulerControlList.UISchedulerControlList16;
            DXMenuItem uITildelingavoppgaveMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem;
            #endregion

            // Right-Click 'schedulerControl' list box
            Mouse.Click(uISchedulerControlList16, MouseButtons.Right, ModifierKeys.None, new Point(789, 147));

            // Click 'Tildeling av oppgave' menu item
            Mouse.Click(uITildelingavoppgaveMenuItem, new Point(73, 12));
        }
        
        /// <summary>
        /// OpenEmpListStep26
        /// </summary>
        public void OpenEmpListStep26()
        {
            #region Variable Declarations
            DXListBox uIPeriodScheduleListBoList3 = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList3;
            DXMenuItem uITildelingavoppgaveMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UITildelingavoppgaveMenuItem;
            #endregion

            // Wait for 1 seconds for user delay between actions; Right-Click 'PeriodScheduleListBoxControl`1' list box
            Playback.Wait(1000);
            Mouse.Click(uIPeriodScheduleListBoList3, MouseButtons.Right, ModifierKeys.None, new Point(29, 10));

            // Click 'Tildeling av oppgave' menu item
            Mouse.Click(uITildelingavoppgaveMenuItem, new Point(53, 12));
        }
        
        /// <summary>
        /// OpenForEditBerreRoleStep43
        /// </summary>
        public void OpenForEditBerreRoleStep43()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList7.UIAppointmentCell;
            DXMenuItem uIRedigeroppgaveMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIRedigeroppgaveMenuItem;
            DXMenuBaseButtonItem uIItem0810Morgenmøte45MenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIRedigeroppgaveMenuItem.UIItem0810Morgenmøte45MenuBaseButtonItem;
            #endregion

            // Right-Click 'Appointment' cell
            Mouse.Click(uIAppointmentCell, MouseButtons.Right, ModifierKeys.None, new Point(40, 54));

            // Click 'Rediger oppgave' menu item
            Mouse.Click(uIRedigeroppgaveMenuItem, new Point(97, 16));

            // Click '08-10 - Morgenmøte (4520)' MenuBaseButtonItem
            Mouse.Click(uIItem0810Morgenmøte45MenuBaseButtonItem, new Point(85, 14));
        }
        
        /// <summary>
        /// OpenHintStep36
        /// </summary>
        public void OpenHintStep36()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell1 = this.UIOppgavetildelingWindow.UISchedulerControl1List2.UIAppointmentCell1;
            #endregion

            // Mouse hover 'Appointment' cell at (28, 14)
            Mouse.Hover(uIAppointmentCell1, new Point(28, 14));
        }
        
        /// <summary>
        /// OpenRoleStep39
        /// </summary>
        public void OpenRoleStep39()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelRoleSchedDockPanel.UIControlContainerCustom.UISchedulerControlWindow.UISchedulerControlList2.UIAppointmentCell;
            #endregion

            // Double-Click 'Appointment' cell
            Mouse.DoubleClick(uIAppointmentCell, new Point(45, 78));
        }
        
        /// <summary>
        /// SelectAndersonShiftStep14
        /// </summary>
        public void SelectAndersonShiftStep14()
        {
            #region Variable Declarations
            DXCell uIAndersonMrCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIAndersonMrCell;
            #endregion

            // Click 'Anderson, Mr' cell
            Mouse.Click(uIAndersonMrCell, new Point(46, 8));
        }
        
        /// <summary>
        /// SelectCockerAShiftStep18
        /// </summary>
        public void SelectCockerAShiftStep18()
        {
            #region Variable Declarations
            DXCell uICockerJamesCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIAften00167770770FalsDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UICockerJamesCell;
            #endregion

            // Click 'Cocker, James' cell
            Mouse.Click(uICockerJamesCell, new Point(32, 6));
        }
        
        /// <summary>
        /// SelectFnattShiftStep13
        /// </summary>
        public void SelectFnattShiftStep13()
        {
            #region Variable Declarations
            DXCell uIFnattGuroCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIBakvakt00167770770FaDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIFnattGuroCell;
            #endregion

            // Click 'Fnatt, Guro' cell
            Mouse.Click(uIFnattGuroCell, new Point(14, 7));
        }
        
        /// <summary>
        /// SelectFreeShiftStep14
        /// </summary>
        public void SelectFreeShiftStep14()
        {
            #region Variable Declarations
            DXCell uILEDIGVAKTCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UILEDIGVAKTCell;
            #endregion

            // Click 'LEDIG VAKT' cell
            Mouse.Click(uILEDIGVAKTCell, new Point(32, 6));
        }
        
        /// <summary>
        /// SelectGulliShiftStep15
        /// </summary>
        public void SelectGulliShiftStep15()
        {
            #region Variable Declarations
            DXCell uILEDIGVAKTCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UILEDIGVAKTCell;
            #endregion

            // Click 'LEDIG VAKT' cell
            Mouse.Click(uILEDIGVAKTCell, new Point(41, 7));
        }
        
        /// <summary>
        /// SelectRole1Step44
        /// </summary>
        public void SelectRole1Step44()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell3 = this.UIOppgavetildelingWindow.UISchedulerControl1List4.UIAppointmentCell3;
            #endregion

            // Mouse hover 'Appointment' cell at (15, 11)
            Mouse.Hover(uIAppointmentCell3, new Point(15, 11));
        }
        
        /// <summary>
        /// SelectRole2Step44
        /// </summary>
        public void SelectRole2Step44()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell4 = this.UIOppgavetildelingWindow.UISchedulerControl1List4.UIAppointmentCell4;
            #endregion

            // Mouse hover 'Appointment' cell at (12, 13)
            Mouse.Hover(uIAppointmentCell4, new Point(12, 13));
        }
        
        /// <summary>
        /// SelectRole3Step44
        /// </summary>
        public void SelectRole3Step44()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell5 = this.UIOppgavetildelingWindow.UISchedulerControl1List4.UIAppointmentCell5;
            #endregion

            // Mouse hover 'Appointment' cell at (14, 9)
            Mouse.Hover(uIAppointmentCell5, new Point(14, 9));
        }
        
        /// <summary>
        /// SelectRole4Step44
        /// </summary>
        public void SelectRole4Step44()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell6 = this.UIOppgavetildelingWindow.UISchedulerControl1List4.UIAppointmentCell6;
            #endregion

            // Mouse hover 'Appointment' cell at (21, 23)
            Mouse.Hover(uIAppointmentCell6, new Point(21, 23));
        }
        
        /// <summary>
        /// SelectRolesStep16
        /// </summary>
        public void SelectRolesStep16()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell = this.UIOppgavetildelingWindow.UISchedulerControl1List3.UIAppointmentCell;
            #endregion

            // Mouse hover 'Appointment' cell at (14, 12)
            Mouse.Hover(uIAppointmentCell, new Point(14, 12));
        }
        
        /// <summary>
        /// SelectRolesStep20
        /// </summary>
        public void SelectRolesStep20()
        {
            #region Variable Declarations
            DXCell uIItem0810Cell = this.UIVelgoppgaverWindow.UIGcRolesTable.UIItem0810Cell;
            DXCell uIItem1012Cell = this.UIVelgoppgaverWindow.UIGcRolesTable.UIItem1012Cell;
            DXCell uIItem1216Cell = this.UIVelgoppgaverWindow.UIGcRolesTable.UIItem1216Cell;
            #endregion

            // Click '08-10' cell
            Mouse.Click(uIItem0810Cell, new Point(59, 5));

            // Click '10-12' cell while pressing Control
            Mouse.Click(uIItem1012Cell, MouseButtons.Left, ModifierKeys.Control, new Point(43, 6));

            // Click '12-16' cell while pressing Control
            Mouse.Click(uIItem1216Cell, MouseButtons.Left, ModifierKeys.Control, new Point(47, 10));
        }
        
        /// <summary>
        /// SelectRolesStep38
        /// </summary>
        public void SelectRolesStep38()
        {
            #region Variable Declarations
            DXCell uIKONTERINGCell = this.UIVelgoppgaverWindow.UIGcRolesTable.UIKONTERINGCell;
            #endregion

            // Click 'KONTERING' cell
            Mouse.Click(uIKONTERINGCell, new Point(39, 9));
        }
        
        /// <summary>
        /// SelectRolesStep4
        /// </summary>
        public void SelectRolesStep4()
        {
            #region Variable Declarations
            DXCell uIKOMPØNSKETEKSKLBØRIKCell = this.UIVelgoppgaverWindow.UIGcRolesTable.UIKOMPØNSKETEKSKLBØRIKCell;
            DXCell uIOVERCell = this.UIVelgoppgaverWindow.UIGcRolesTable.UIOVERCell;
            #endregion

            // Click 'KOMP ØNSKET/EKSKL BØR IKKE' cell
            Mouse.Click(uIKOMPØNSKETEKSKLBØRIKCell, new Point(107, 7));

            // Click 'OVER' cell while pressing Control
            Mouse.Click(uIOVERCell, MouseButtons.Left, ModifierKeys.Control, new Point(110, 8));
        }
        
        /// <summary>
        /// SelectRolesStep44
        /// </summary>
        public void SelectRolesStep44()
        {
            #region Variable Declarations
            DXCell uIKOMPKREVDEKSKLKANIKKCell = this.UIVelgoppgaverWindow.UIGcRolesTable.UIKOMPKREVDEKSKLKANIKKCell;
            #endregion

            // Click 'KOMP KREVD/EKSKL KAN IKKE' cell
            Mouse.Click(uIKOMPKREVDEKSKLKANIKKCell, new Point(84, 7));
        }
        
        /// <summary>
        /// SelectRolesStep46
        /// </summary>
        public void SelectRolesStep46()
        {
            #region Variable Declarations
            DXCell uIKOMPØNSKETEKSKLBØRIKCell = this.UIVelgoppgaverWindow.UIGcRolesTable.UIKOMPØNSKETEKSKLBØRIKCell;
            #endregion

            // Click 'KOMP ØNSKET/EKSKL BØR IKKE' cell
            Mouse.Click(uIKOMPØNSKETEKSKLBØRIKCell, new Point(67, 8));
        }
        
        /// <summary>
        /// SelectRolesStep8
        /// </summary>
        public void SelectRolesStep8()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell = this.UIOppgavetildelingWindow.UISchedulerControl1List2.UIAppointmentCell;
            #endregion

            // Wait for 1 seconds for user delay between actions; Mouse hover 'Appointment' cell at (11, 13)
            Playback.Wait(1000);
            Mouse.Hover(uIAppointmentCell, new Point(11, 13));
        }
        
        /// <summary>
        /// SelectRoleStep30
        /// </summary>
        public void SelectRoleStep30()
        {
            #region Variable Declarations
            WinCell uIAppointmentCell = this.UIOppgavetildelingWindow.UISchedulerControl1List5.UIAppointmentCell;
            #endregion

            // Click 'Appointment' cell
            Mouse.Click(uIAppointmentCell, new Point(39, 51));
        }
        
        /// <summary>
        /// SelectRoleStep31
        /// </summary>
        public void SelectRoleStep31()
        {
            #region Variable Declarations
            DXCell uIDISPONIBELCell = this.UIVelgoppgaverWindow.UIGcRolesTable.UIDISPONIBELCell;
            #endregion

            // Click 'DISPONIBEL' cell
            Mouse.Click(uIDISPONIBELCell, new Point(65, 8));
        }
        
        /// <summary>
        /// ShowRolesStep21
        /// </summary>
        public void ShowRolesStep21()
        {
            #region Variable Declarations
            DXListBoxItem uID08001600ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList1.UID08001600ListItem;
            DXMenuItem uIRedigeroppgaveMenuItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIRedigeroppgaveMenuItem;
            #endregion

            // Right-Click 'D - (08:00 - 16:00)' list item
            Mouse.Click(uID08001600ListItem, MouseButtons.Right, ModifierKeys.None, new Point(57, 5));

            // Click 'Rediger oppgave' menu item
            Mouse.Click(uIRedigeroppgaveMenuItem, new Point(103, 12));
        }
        
        /// <summary>
        /// CheckInfoWinStep14 - Use 'CheckInfoWinStep14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckInfoWinStep14()
        {
            #region Variable Declarations
            DXTextEdit uIEMessageEdit = this.UIABS3008InformasjonWindow.UIEMessageEdit;
            #endregion

            // Verify that the 'Text' property of 'eMessage' text box equals 'Det finnes oppgaver knyttet til noen av fraværsvaktene. Oppgavene vil slettes når fraværet lagres for fraværende vakter, samt alle vakter ved aktiv sykmelding og tjenestefravær. Dersom det genereres ledige vakter vil oppgavene bli overført til disse vaktene.
            //NB! Den ansatte beholder oppgaver på vakter som skal gåes delvis eller helt.
            //Ønsker du fortsatt å registrere fraværet?'
            Assert.AreEqual(this.CheckInfoWinStep14ExpectedValues.UIEMessageEditText, uIEMessageEdit.Text);
        }
        
        /// <summary>
        /// CheckDroppRoleStep27 - Use 'CheckDroppRoleStep27ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDroppRoleStep27()
        {
            #region Variable Declarations
            DXListBoxItem uIDroppDanny22000800ListItem = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelPeriodDockPanel.UIControlContainerCustom.UIPeriodScheduleControCustom.UILayoutPanelSplitContainerControl.UITopPanelClient.UIXtraScrollableControScrollableControl.UIPeriodScheduleListBoList3.UIDroppDanny22000800ListItem;
            #endregion

            // Verify that the 'Text' property of 'Dropp, Danny - 2200-0800' list item equals 'Dropp, Danny - 2200-0800'
            Assert.AreEqual(this.CheckDroppRoleStep27ExpectedValues.UIDroppDanny22000800ListItemText, uIDroppDanny22000800ListItem.Text);
        }
        
        #region Properties
        public virtual AddCommentStep37Params AddCommentStep37Params
        {
            get
            {
                if ((this.mAddCommentStep37Params == null))
                {
                    this.mAddCommentStep37Params = new AddCommentStep37Params();
                }
                return this.mAddCommentStep37Params;
            }
        }
        
        public virtual CheckAGulliShiftStep15ExpectedValues CheckAGulliShiftStep15ExpectedValues
        {
            get
            {
                if ((this.mCheckAGulliShiftStep15ExpectedValues == null))
                {
                    this.mCheckAGulliShiftStep15ExpectedValues = new CheckAGulliShiftStep15ExpectedValues();
                }
                return this.mCheckAGulliShiftStep15ExpectedValues;
            }
        }
        
        public virtual CheckAndersonDispRoleStep31ExpectedValues CheckAndersonDispRoleStep31ExpectedValues
        {
            get
            {
                if ((this.mCheckAndersonDispRoleStep31ExpectedValues == null))
                {
                    this.mCheckAndersonDispRoleStep31ExpectedValues = new CheckAndersonDispRoleStep31ExpectedValues();
                }
                return this.mCheckAndersonDispRoleStep31ExpectedValues;
            }
        }
        
        public virtual CheckAndersonFreeShiftStep14ExpectedValues CheckAndersonFreeShiftStep14ExpectedValues
        {
            get
            {
                if ((this.mCheckAndersonFreeShiftStep14ExpectedValues == null))
                {
                    this.mCheckAndersonFreeShiftStep14ExpectedValues = new CheckAndersonFreeShiftStep14ExpectedValues();
                }
                return this.mCheckAndersonFreeShiftStep14ExpectedValues;
            }
        }
        
        public virtual CheckCommentStep39ExpectedValues CheckCommentStep39ExpectedValues
        {
            get
            {
                if ((this.mCheckCommentStep39ExpectedValues == null))
                {
                    this.mCheckCommentStep39ExpectedValues = new CheckCommentStep39ExpectedValues();
                }
                return this.mCheckCommentStep39ExpectedValues;
            }
        }
        
        public virtual CheckCompStep2ExpectedValues CheckCompStep2ExpectedValues
        {
            get
            {
                if ((this.mCheckCompStep2ExpectedValues == null))
                {
                    this.mCheckCompStep2ExpectedValues = new CheckCompStep2ExpectedValues();
                }
                return this.mCheckCompStep2ExpectedValues;
            }
        }
        
        public virtual CheckCompStep29ExpectedValues CheckCompStep29ExpectedValues
        {
            get
            {
                if ((this.mCheckCompStep29ExpectedValues == null))
                {
                    this.mCheckCompStep29ExpectedValues = new CheckCompStep29ExpectedValues();
                }
                return this.mCheckCompStep29ExpectedValues;
            }
        }
        
        public virtual CheckContDispRoleStep32ExpectedValues CheckContDispRoleStep32ExpectedValues
        {
            get
            {
                if ((this.mCheckContDispRoleStep32ExpectedValues == null))
                {
                    this.mCheckContDispRoleStep32ExpectedValues = new CheckContDispRoleStep32ExpectedValues();
                }
                return this.mCheckContDispRoleStep32ExpectedValues;
            }
        }
        
        public virtual CheckContStep39ExpectedValues CheckContStep39ExpectedValues
        {
            get
            {
                if ((this.mCheckContStep39ExpectedValues == null))
                {
                    this.mCheckContStep39ExpectedValues = new CheckContStep39ExpectedValues();
                }
                return this.mCheckContStep39ExpectedValues;
            }
        }
        
        public virtual CheckDateStep1ExpectedValues CheckDateStep1ExpectedValues
        {
            get
            {
                if ((this.mCheckDateStep1ExpectedValues == null))
                {
                    this.mCheckDateStep1ExpectedValues = new CheckDateStep1ExpectedValues();
                }
                return this.mCheckDateStep1ExpectedValues;
            }
        }
        
        public virtual CheckEvenstadRoleAddedStep23ExpectedValues CheckEvenstadRoleAddedStep23ExpectedValues
        {
            get
            {
                if ((this.mCheckEvenstadRoleAddedStep23ExpectedValues == null))
                {
                    this.mCheckEvenstadRoleAddedStep23ExpectedValues = new CheckEvenstadRoleAddedStep23ExpectedValues();
                }
                return this.mCheckEvenstadRoleAddedStep23ExpectedValues;
            }
        }
        
        public virtual CheckEvenstadRoleDeletedStep23ExpectedValues CheckEvenstadRoleDeletedStep23ExpectedValues
        {
            get
            {
                if ((this.mCheckEvenstadRoleDeletedStep23ExpectedValues == null))
                {
                    this.mCheckEvenstadRoleDeletedStep23ExpectedValues = new CheckEvenstadRoleDeletedStep23ExpectedValues();
                }
                return this.mCheckEvenstadRoleDeletedStep23ExpectedValues;
            }
        }
        
        public virtual CheckExcangedStep13ExpectedValues CheckExcangedStep13ExpectedValues
        {
            get
            {
                if ((this.mCheckExcangedStep13ExpectedValues == null))
                {
                    this.mCheckExcangedStep13ExpectedValues = new CheckExcangedStep13ExpectedValues();
                }
                return this.mCheckExcangedStep13ExpectedValues;
            }
        }
        
        public virtual CheckHintStep16ExpectedValues CheckHintStep16ExpectedValues
        {
            get
            {
                if ((this.mCheckHintStep16ExpectedValues == null))
                {
                    this.mCheckHintStep16ExpectedValues = new CheckHintStep16ExpectedValues();
                }
                return this.mCheckHintStep16ExpectedValues;
            }
        }
        
        public virtual CheckHintStep2ExpectedValues CheckHintStep2ExpectedValues
        {
            get
            {
                if ((this.mCheckHintStep2ExpectedValues == null))
                {
                    this.mCheckHintStep2ExpectedValues = new CheckHintStep2ExpectedValues();
                }
                return this.mCheckHintStep2ExpectedValues;
            }
        }
        
        public virtual CheckHintStep36ExpectedValues CheckHintStep36ExpectedValues
        {
            get
            {
                if ((this.mCheckHintStep36ExpectedValues == null))
                {
                    this.mCheckHintStep36ExpectedValues = new CheckHintStep36ExpectedValues();
                }
                return this.mCheckHintStep36ExpectedValues;
            }
        }
        
        public virtual CheckHintStep8ExpectedValues CheckHintStep8ExpectedValues
        {
            get
            {
                if ((this.mCheckHintStep8ExpectedValues == null))
                {
                    this.mCheckHintStep8ExpectedValues = new CheckHintStep8ExpectedValues();
                }
                return this.mCheckHintStep8ExpectedValues;
            }
        }
        
        public virtual CheckInactiveNotInAddShiftListExpectedValues CheckInactiveNotInAddShiftListExpectedValues
        {
            get
            {
                if ((this.mCheckInactiveNotInAddShiftListExpectedValues == null))
                {
                    this.mCheckInactiveNotInAddShiftListExpectedValues = new CheckInactiveNotInAddShiftListExpectedValues();
                }
                return this.mCheckInactiveNotInAddShiftListExpectedValues;
            }
        }
        
        public virtual CheckInactiveNotInAddShiftList2ExpectedValues CheckInactiveNotInAddShiftList2ExpectedValues
        {
            get
            {
                if ((this.mCheckInactiveNotInAddShiftList2ExpectedValues == null))
                {
                    this.mCheckInactiveNotInAddShiftList2ExpectedValues = new CheckInactiveNotInAddShiftList2ExpectedValues();
                }
                return this.mCheckInactiveNotInAddShiftList2ExpectedValues;
            }
        }
        
        public virtual CheckInactiveNotInDashboardListExpectedValues CheckInactiveNotInDashboardListExpectedValues
        {
            get
            {
                if ((this.mCheckInactiveNotInDashboardListExpectedValues == null))
                {
                    this.mCheckInactiveNotInDashboardListExpectedValues = new CheckInactiveNotInDashboardListExpectedValues();
                }
                return this.mCheckInactiveNotInDashboardListExpectedValues;
            }
        }
        
        public virtual CheckKompRoleStep5ExpectedValues CheckKompRoleStep5ExpectedValues
        {
            get
            {
                if ((this.mCheckKompRoleStep5ExpectedValues == null))
                {
                    this.mCheckKompRoleStep5ExpectedValues = new CheckKompRoleStep5ExpectedValues();
                }
                return this.mCheckKompRoleStep5ExpectedValues;
            }
        }
        
        public virtual CheckListStep26ExpectedValues CheckListStep26ExpectedValues
        {
            get
            {
                if ((this.mCheckListStep26ExpectedValues == null))
                {
                    this.mCheckListStep26ExpectedValues = new CheckListStep26ExpectedValues();
                }
                return this.mCheckListStep26ExpectedValues;
            }
        }
        
        public virtual CheckOkDisabledExpectedValues CheckOkDisabledExpectedValues
        {
            get
            {
                if ((this.mCheckOkDisabledExpectedValues == null))
                {
                    this.mCheckOkDisabledExpectedValues = new CheckOkDisabledExpectedValues();
                }
                return this.mCheckOkDisabledExpectedValues;
            }
        }
        
        public virtual CheckOverRoleStep5ExpectedValues CheckOverRoleStep5ExpectedValues
        {
            get
            {
                if ((this.mCheckOverRoleStep5ExpectedValues == null))
                {
                    this.mCheckOverRoleStep5ExpectedValues = new CheckOverRoleStep5ExpectedValues();
                }
                return this.mCheckOverRoleStep5ExpectedValues;
            }
        }
        
        public virtual CheckPlannerOpenStep34ExpectedValues CheckPlannerOpenStep34ExpectedValues
        {
            get
            {
                if ((this.mCheckPlannerOpenStep34ExpectedValues == null))
                {
                    this.mCheckPlannerOpenStep34ExpectedValues = new CheckPlannerOpenStep34ExpectedValues();
                }
                return this.mCheckPlannerOpenStep34ExpectedValues;
            }
        }
        
        public virtual CheckRole1AddedStep20ExpectedValues CheckRole1AddedStep20ExpectedValues
        {
            get
            {
                if ((this.mCheckRole1AddedStep20ExpectedValues == null))
                {
                    this.mCheckRole1AddedStep20ExpectedValues = new CheckRole1AddedStep20ExpectedValues();
                }
                return this.mCheckRole1AddedStep20ExpectedValues;
            }
        }
        
        public virtual CheckRole1RoleStep42ExpectedValues CheckRole1RoleStep42ExpectedValues
        {
            get
            {
                if ((this.mCheckRole1RoleStep42ExpectedValues == null))
                {
                    this.mCheckRole1RoleStep42ExpectedValues = new CheckRole1RoleStep42ExpectedValues();
                }
                return this.mCheckRole1RoleStep42ExpectedValues;
            }
        }
        
        public virtual CheckRole1RoleStep47ExpectedValues CheckRole1RoleStep47ExpectedValues
        {
            get
            {
                if ((this.mCheckRole1RoleStep47ExpectedValues == null))
                {
                    this.mCheckRole1RoleStep47ExpectedValues = new CheckRole1RoleStep47ExpectedValues();
                }
                return this.mCheckRole1RoleStep47ExpectedValues;
            }
        }
        
        public virtual CheckRole2AddedStep20ExpectedValues CheckRole2AddedStep20ExpectedValues
        {
            get
            {
                if ((this.mCheckRole2AddedStep20ExpectedValues == null))
                {
                    this.mCheckRole2AddedStep20ExpectedValues = new CheckRole2AddedStep20ExpectedValues();
                }
                return this.mCheckRole2AddedStep20ExpectedValues;
            }
        }
        
        public virtual CheckRole2RoleStep42ExpectedValues CheckRole2RoleStep42ExpectedValues
        {
            get
            {
                if ((this.mCheckRole2RoleStep42ExpectedValues == null))
                {
                    this.mCheckRole2RoleStep42ExpectedValues = new CheckRole2RoleStep42ExpectedValues();
                }
                return this.mCheckRole2RoleStep42ExpectedValues;
            }
        }
        
        public virtual CheckRole2RoleStep47ExpectedValues CheckRole2RoleStep47ExpectedValues
        {
            get
            {
                if ((this.mCheckRole2RoleStep47ExpectedValues == null))
                {
                    this.mCheckRole2RoleStep47ExpectedValues = new CheckRole2RoleStep47ExpectedValues();
                }
                return this.mCheckRole2RoleStep47ExpectedValues;
            }
        }
        
        public virtual CheckRole3AddedStep20ExpectedValues CheckRole3AddedStep20ExpectedValues
        {
            get
            {
                if ((this.mCheckRole3AddedStep20ExpectedValues == null))
                {
                    this.mCheckRole3AddedStep20ExpectedValues = new CheckRole3AddedStep20ExpectedValues();
                }
                return this.mCheckRole3AddedStep20ExpectedValues;
            }
        }
        
        public virtual CheckRole3RoleStep42ExpectedValues CheckRole3RoleStep42ExpectedValues
        {
            get
            {
                if ((this.mCheckRole3RoleStep42ExpectedValues == null))
                {
                    this.mCheckRole3RoleStep42ExpectedValues = new CheckRole3RoleStep42ExpectedValues();
                }
                return this.mCheckRole3RoleStep42ExpectedValues;
            }
        }
        
        public virtual CheckRole3RoleStep47ExpectedValues CheckRole3RoleStep47ExpectedValues
        {
            get
            {
                if ((this.mCheckRole3RoleStep47ExpectedValues == null))
                {
                    this.mCheckRole3RoleStep47ExpectedValues = new CheckRole3RoleStep47ExpectedValues();
                }
                return this.mCheckRole3RoleStep47ExpectedValues;
            }
        }
        
        public virtual CheckRole4RoleStep42ExpectedValues CheckRole4RoleStep42ExpectedValues
        {
            get
            {
                if ((this.mCheckRole4RoleStep42ExpectedValues == null))
                {
                    this.mCheckRole4RoleStep42ExpectedValues = new CheckRole4RoleStep42ExpectedValues();
                }
                return this.mCheckRole4RoleStep42ExpectedValues;
            }
        }
        
        public virtual CheckRole4RoleStep47ExpectedValues CheckRole4RoleStep47ExpectedValues
        {
            get
            {
                if ((this.mCheckRole4RoleStep47ExpectedValues == null))
                {
                    this.mCheckRole4RoleStep47ExpectedValues = new CheckRole4RoleStep47ExpectedValues();
                }
                return this.mCheckRole4RoleStep47ExpectedValues;
            }
        }
        
        public virtual CheckRole5RoleStep42ExpectedValues CheckRole5RoleStep42ExpectedValues
        {
            get
            {
                if ((this.mCheckRole5RoleStep42ExpectedValues == null))
                {
                    this.mCheckRole5RoleStep42ExpectedValues = new CheckRole5RoleStep42ExpectedValues();
                }
                return this.mCheckRole5RoleStep42ExpectedValues;
            }
        }
        
        public virtual CheckRole6RoleStep42ExpectedValues CheckRole6RoleStep42ExpectedValues
        {
            get
            {
                if ((this.mCheckRole6RoleStep42ExpectedValues == null))
                {
                    this.mCheckRole6RoleStep42ExpectedValues = new CheckRole6RoleStep42ExpectedValues();
                }
                return this.mCheckRole6RoleStep42ExpectedValues;
            }
        }
        
        public virtual CheckRole7RoleStep42ExpectedValues CheckRole7RoleStep42ExpectedValues
        {
            get
            {
                if ((this.mCheckRole7RoleStep42ExpectedValues == null))
                {
                    this.mCheckRole7RoleStep42ExpectedValues = new CheckRole7RoleStep42ExpectedValues();
                }
                return this.mCheckRole7RoleStep42ExpectedValues;
            }
        }
        
        public virtual CheckRoleAddedStep18ExpectedValues CheckRoleAddedStep18ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleAddedStep18ExpectedValues == null))
                {
                    this.mCheckRoleAddedStep18ExpectedValues = new CheckRoleAddedStep18ExpectedValues();
                }
                return this.mCheckRoleAddedStep18ExpectedValues;
            }
        }
        
        public virtual CheckRoleAddedStep19ExpectedValues CheckRoleAddedStep19ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleAddedStep19ExpectedValues == null))
                {
                    this.mCheckRoleAddedStep19ExpectedValues = new CheckRoleAddedStep19ExpectedValues();
                }
                return this.mCheckRoleAddedStep19ExpectedValues;
            }
        }
        
        public virtual CheckRoleAddedStep35ExpectedValues CheckRoleAddedStep35ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleAddedStep35ExpectedValues == null))
                {
                    this.mCheckRoleAddedStep35ExpectedValues = new CheckRoleAddedStep35ExpectedValues();
                }
                return this.mCheckRoleAddedStep35ExpectedValues;
            }
        }
        
        public virtual CheckRoleAddedStep7ExpectedValues CheckRoleAddedStep7ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleAddedStep7ExpectedValues == null))
                {
                    this.mCheckRoleAddedStep7ExpectedValues = new CheckRoleAddedStep7ExpectedValues();
                }
                return this.mCheckRoleAddedStep7ExpectedValues;
            }
        }
        
        public virtual CheckRoleDeletedStep12ExpectedValues CheckRoleDeletedStep12ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleDeletedStep12ExpectedValues == null))
                {
                    this.mCheckRoleDeletedStep12ExpectedValues = new CheckRoleDeletedStep12ExpectedValues();
                }
                return this.mCheckRoleDeletedStep12ExpectedValues;
            }
        }
        
        public virtual CheckRoleError1Step44ExpectedValues CheckRoleError1Step44ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleError1Step44ExpectedValues == null))
                {
                    this.mCheckRoleError1Step44ExpectedValues = new CheckRoleError1Step44ExpectedValues();
                }
                return this.mCheckRoleError1Step44ExpectedValues;
            }
        }
        
        public virtual CheckRoleError2Step44ExpectedValues CheckRoleError2Step44ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleError2Step44ExpectedValues == null))
                {
                    this.mCheckRoleError2Step44ExpectedValues = new CheckRoleError2Step44ExpectedValues();
                }
                return this.mCheckRoleError2Step44ExpectedValues;
            }
        }
        
        public virtual CheckRoleError3Step44ExpectedValues CheckRoleError3Step44ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleError3Step44ExpectedValues == null))
                {
                    this.mCheckRoleError3Step44ExpectedValues = new CheckRoleError3Step44ExpectedValues();
                }
                return this.mCheckRoleError3Step44ExpectedValues;
            }
        }
        
        public virtual CheckRoleError4Step44ExpectedValues CheckRoleError4Step44ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleError4Step44ExpectedValues == null))
                {
                    this.mCheckRoleError4Step44ExpectedValues = new CheckRoleError4Step44ExpectedValues();
                }
                return this.mCheckRoleError4Step44ExpectedValues;
            }
        }
        
        public virtual CheckRolePeriodStep17ExpectedValues CheckRolePeriodStep17ExpectedValues
        {
            get
            {
                if ((this.mCheckRolePeriodStep17ExpectedValues == null))
                {
                    this.mCheckRolePeriodStep17ExpectedValues = new CheckRolePeriodStep17ExpectedValues();
                }
                return this.mCheckRolePeriodStep17ExpectedValues;
            }
        }
        
        public virtual CheckRolePeriodStep37ExpectedValues CheckRolePeriodStep37ExpectedValues
        {
            get
            {
                if ((this.mCheckRolePeriodStep37ExpectedValues == null))
                {
                    this.mCheckRolePeriodStep37ExpectedValues = new CheckRolePeriodStep37ExpectedValues();
                }
                return this.mCheckRolePeriodStep37ExpectedValues;
            }
        }
        
        public virtual CheckRolesAddedStep11ExpectedValues CheckRolesAddedStep11ExpectedValues
        {
            get
            {
                if ((this.mCheckRolesAddedStep11ExpectedValues == null))
                {
                    this.mCheckRolesAddedStep11ExpectedValues = new CheckRolesAddedStep11ExpectedValues();
                }
                return this.mCheckRolesAddedStep11ExpectedValues;
            }
        }
        
        public virtual CheckRolesAddedStep6ExpectedValues CheckRolesAddedStep6ExpectedValues
        {
            get
            {
                if ((this.mCheckRolesAddedStep6ExpectedValues == null))
                {
                    this.mCheckRolesAddedStep6ExpectedValues = new CheckRolesAddedStep6ExpectedValues();
                }
                return this.mCheckRolesAddedStep6ExpectedValues;
            }
        }
        
        public virtual CheckRolesAddedStep9ExpectedValues CheckRolesAddedStep9ExpectedValues
        {
            get
            {
                if ((this.mCheckRolesAddedStep9ExpectedValues == null))
                {
                    this.mCheckRolesAddedStep9ExpectedValues = new CheckRolesAddedStep9ExpectedValues();
                }
                return this.mCheckRolesAddedStep9ExpectedValues;
            }
        }
        
        public virtual CheckRolesExcangedStep10ExpectedValues CheckRolesExcangedStep10ExpectedValues
        {
            get
            {
                if ((this.mCheckRolesExcangedStep10ExpectedValues == null))
                {
                    this.mCheckRolesExcangedStep10ExpectedValues = new CheckRolesExcangedStep10ExpectedValues();
                }
                return this.mCheckRolesExcangedStep10ExpectedValues;
            }
        }
        
        public virtual CheckRoleWarnings1Step46ExpectedValues CheckRoleWarnings1Step46ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleWarnings1Step46ExpectedValues == null))
                {
                    this.mCheckRoleWarnings1Step46ExpectedValues = new CheckRoleWarnings1Step46ExpectedValues();
                }
                return this.mCheckRoleWarnings1Step46ExpectedValues;
            }
        }
        
        public virtual CheckRoleWarnings2Step46ExpectedValues CheckRoleWarnings2Step46ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleWarnings2Step46ExpectedValues == null))
                {
                    this.mCheckRoleWarnings2Step46ExpectedValues = new CheckRoleWarnings2Step46ExpectedValues();
                }
                return this.mCheckRoleWarnings2Step46ExpectedValues;
            }
        }
        
        public virtual CheckRoleWarnings3Step46ExpectedValues CheckRoleWarnings3Step46ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleWarnings3Step46ExpectedValues == null))
                {
                    this.mCheckRoleWarnings3Step46ExpectedValues = new CheckRoleWarnings3Step46ExpectedValues();
                }
                return this.mCheckRoleWarnings3Step46ExpectedValues;
            }
        }
        
        public virtual CheckRoleWarnings4Step46ExpectedValues CheckRoleWarnings4Step46ExpectedValues
        {
            get
            {
                if ((this.mCheckRoleWarnings4Step46ExpectedValues == null))
                {
                    this.mCheckRoleWarnings4Step46ExpectedValues = new CheckRoleWarnings4Step46ExpectedValues();
                }
                return this.mCheckRoleWarnings4Step46ExpectedValues;
            }
        }
        
        public virtual CheckSpecRoleStep13ExpectedValues CheckSpecRoleStep13ExpectedValues
        {
            get
            {
                if ((this.mCheckSpecRoleStep13ExpectedValues == null))
                {
                    this.mCheckSpecRoleStep13ExpectedValues = new CheckSpecRoleStep13ExpectedValues();
                }
                return this.mCheckSpecRoleStep13ExpectedValues;
            }
        }
        
        public virtual ConstructBlueFilterStep32Params ConstructBlueFilterStep32Params
        {
            get
            {
                if ((this.mConstructBlueFilterStep32Params == null))
                {
                    this.mConstructBlueFilterStep32Params = new ConstructBlueFilterStep32Params();
                }
                return this.mConstructBlueFilterStep32Params;
            }
        }
        
        public virtual DeleteBlueFilterStep32Params DeleteBlueFilterStep32Params
        {
            get
            {
                if ((this.mDeleteBlueFilterStep32Params == null))
                {
                    this.mDeleteBlueFilterStep32Params = new DeleteBlueFilterStep32Params();
                }
                return this.mDeleteBlueFilterStep32Params;
            }
        }
        
        public virtual MoveSliderToSeDispParams MoveSliderToSeDispParams
        {
            get
            {
                if ((this.mMoveSliderToSeDispParams == null))
                {
                    this.mMoveSliderToSeDispParams = new MoveSliderToSeDispParams();
                }
                return this.mMoveSliderToSeDispParams;
            }
        }
        
        public virtual CheckInfoWinStep14ExpectedValues CheckInfoWinStep14ExpectedValues
        {
            get
            {
                if ((this.mCheckInfoWinStep14ExpectedValues == null))
                {
                    this.mCheckInfoWinStep14ExpectedValues = new CheckInfoWinStep14ExpectedValues();
                }
                return this.mCheckInfoWinStep14ExpectedValues;
            }
        }
        
        public virtual CheckDroppRoleStep27ExpectedValues CheckDroppRoleStep27ExpectedValues
        {
            get
            {
                if ((this.mCheckDroppRoleStep27ExpectedValues == null))
                {
                    this.mCheckDroppRoleStep27ExpectedValues = new CheckDroppRoleStep27ExpectedValues();
                }
                return this.mCheckDroppRoleStep27ExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIOppgavetildelingWindow UIOppgavetildelingWindow
        {
            get
            {
                if ((this.mUIOppgavetildelingWindow == null))
                {
                    this.mUIOppgavetildelingWindow = new UIOppgavetildelingWindow();
                }
                return this.mUIOppgavetildelingWindow;
            }
        }
        
        public UIVelgoppgaverWindow UIVelgoppgaverWindow
        {
            get
            {
                if ((this.mUIVelgoppgaverWindow == null))
                {
                    this.mUIVelgoppgaverWindow = new UIVelgoppgaverWindow();
                }
                return this.mUIVelgoppgaverWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2();
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIROL3005InformasjonWindow UIROL3005InformasjonWindow
        {
            get
            {
                if ((this.mUIROL3005InformasjonWindow == null))
                {
                    this.mUIROL3005InformasjonWindow = new UIROL3005InformasjonWindow();
                }
                return this.mUIROL3005InformasjonWindow;
            }
        }
        
        public UISammenligningavkompeWindow UISammenligningavkompeWindow
        {
            get
            {
                if ((this.mUISammenligningavkompeWindow == null))
                {
                    this.mUISammenligningavkompeWindow = new UISammenligningavkompeWindow();
                }
                return this.mUISammenligningavkompeWindow;
            }
        }
        
        public UIBytteWindow UIBytteWindow
        {
            get
            {
                if ((this.mUIBytteWindow == null))
                {
                    this.mUIBytteWindow = new UIBytteWindow();
                }
                return this.mUIBytteWindow;
            }
        }
        
        public UIFraværsregistreringWindow UIFraværsregistreringWindow
        {
            get
            {
                if ((this.mUIFraværsregistreringWindow == null))
                {
                    this.mUIFraværsregistreringWindow = new UIFraværsregistreringWindow();
                }
                return this.mUIFraværsregistreringWindow;
            }
        }
        
        public UIABS3008InformasjonWindow UIABS3008InformasjonWindow
        {
            get
            {
                if ((this.mUIABS3008InformasjonWindow == null))
                {
                    this.mUIABS3008InformasjonWindow = new UIABS3008InformasjonWindow();
                }
                return this.mUIABS3008InformasjonWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3();
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIOppgavetildelingWindow1 UIOppgavetildelingWindow1
        {
            get
            {
                if ((this.mUIOppgavetildelingWindow1 == null))
                {
                    this.mUIOppgavetildelingWindow1 = new UIOppgavetildelingWindow1();
                }
                return this.mUIOppgavetildelingWindow1;
            }
        }
        
        public UIOppgavevaktbokvisninWindow UIOppgavevaktbokvisninWindow
        {
            get
            {
                if ((this.mUIOppgavevaktbokvisninWindow == null))
                {
                    this.mUIOppgavevaktbokvisninWindow = new UIOppgavevaktbokvisninWindow();
                }
                return this.mUIOppgavevaktbokvisninWindow;
            }
        }
        
        public UIDAY4011InformasjonWindow UIDAY4011InformasjonWindow
        {
            get
            {
                if ((this.mUIDAY4011InformasjonWindow == null))
                {
                    this.mUIDAY4011InformasjonWindow = new UIDAY4011InformasjonWindow();
                }
                return this.mUIDAY4011InformasjonWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4();
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5();
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIItemWindow6 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow6();
                }
                return this.mUIItemWindow6;
            }
        }
        
        public UIItemWindow7 UIItemWindow7
        {
            get
            {
                if ((this.mUIItemWindow7 == null))
                {
                    this.mUIItemWindow7 = new UIItemWindow7();
                }
                return this.mUIItemWindow7;
            }
        }
        
        public UIItemWindow8 UIItemWindow8
        {
            get
            {
                if ((this.mUIItemWindow8 == null))
                {
                    this.mUIItemWindow8 = new UIItemWindow8();
                }
                return this.mUIItemWindow8;
            }
        }
        
        public UIItemWindow9 UIItemWindow9
        {
            get
            {
                if ((this.mUIItemWindow9 == null))
                {
                    this.mUIItemWindow9 = new UIItemWindow9();
                }
                return this.mUIItemWindow9;
            }
        }
        
        public UIItemWindow10 UIItemWindow10
        {
            get
            {
                if ((this.mUIItemWindow10 == null))
                {
                    this.mUIItemWindow10 = new UIItemWindow10();
                }
                return this.mUIItemWindow10;
            }
        }
        
        public UIItemWindow11 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow11();
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow12 UIItemWindow12
        {
            get
            {
                if ((this.mUIItemWindow12 == null))
                {
                    this.mUIItemWindow12 = new UIItemWindow12();
                }
                return this.mUIItemWindow12;
            }
        }
        #endregion
        
        #region Fields
        private AddCommentStep37Params mAddCommentStep37Params;
        
        private CheckAGulliShiftStep15ExpectedValues mCheckAGulliShiftStep15ExpectedValues;
        
        private CheckAndersonDispRoleStep31ExpectedValues mCheckAndersonDispRoleStep31ExpectedValues;
        
        private CheckAndersonFreeShiftStep14ExpectedValues mCheckAndersonFreeShiftStep14ExpectedValues;
        
        private CheckCommentStep39ExpectedValues mCheckCommentStep39ExpectedValues;
        
        private CheckCompStep2ExpectedValues mCheckCompStep2ExpectedValues;
        
        private CheckCompStep29ExpectedValues mCheckCompStep29ExpectedValues;
        
        private CheckContDispRoleStep32ExpectedValues mCheckContDispRoleStep32ExpectedValues;
        
        private CheckContStep39ExpectedValues mCheckContStep39ExpectedValues;
        
        private CheckDateStep1ExpectedValues mCheckDateStep1ExpectedValues;
        
        private CheckEvenstadRoleAddedStep23ExpectedValues mCheckEvenstadRoleAddedStep23ExpectedValues;
        
        private CheckEvenstadRoleDeletedStep23ExpectedValues mCheckEvenstadRoleDeletedStep23ExpectedValues;
        
        private CheckExcangedStep13ExpectedValues mCheckExcangedStep13ExpectedValues;
        
        private CheckHintStep16ExpectedValues mCheckHintStep16ExpectedValues;
        
        private CheckHintStep2ExpectedValues mCheckHintStep2ExpectedValues;
        
        private CheckHintStep36ExpectedValues mCheckHintStep36ExpectedValues;
        
        private CheckHintStep8ExpectedValues mCheckHintStep8ExpectedValues;
        
        private CheckInactiveNotInAddShiftListExpectedValues mCheckInactiveNotInAddShiftListExpectedValues;
        
        private CheckInactiveNotInAddShiftList2ExpectedValues mCheckInactiveNotInAddShiftList2ExpectedValues;
        
        private CheckInactiveNotInDashboardListExpectedValues mCheckInactiveNotInDashboardListExpectedValues;
        
        private CheckKompRoleStep5ExpectedValues mCheckKompRoleStep5ExpectedValues;
        
        private CheckListStep26ExpectedValues mCheckListStep26ExpectedValues;
        
        private CheckOkDisabledExpectedValues mCheckOkDisabledExpectedValues;
        
        private CheckOverRoleStep5ExpectedValues mCheckOverRoleStep5ExpectedValues;
        
        private CheckPlannerOpenStep34ExpectedValues mCheckPlannerOpenStep34ExpectedValues;
        
        private CheckRole1AddedStep20ExpectedValues mCheckRole1AddedStep20ExpectedValues;
        
        private CheckRole1RoleStep42ExpectedValues mCheckRole1RoleStep42ExpectedValues;
        
        private CheckRole1RoleStep47ExpectedValues mCheckRole1RoleStep47ExpectedValues;
        
        private CheckRole2AddedStep20ExpectedValues mCheckRole2AddedStep20ExpectedValues;
        
        private CheckRole2RoleStep42ExpectedValues mCheckRole2RoleStep42ExpectedValues;
        
        private CheckRole2RoleStep47ExpectedValues mCheckRole2RoleStep47ExpectedValues;
        
        private CheckRole3AddedStep20ExpectedValues mCheckRole3AddedStep20ExpectedValues;
        
        private CheckRole3RoleStep42ExpectedValues mCheckRole3RoleStep42ExpectedValues;
        
        private CheckRole3RoleStep47ExpectedValues mCheckRole3RoleStep47ExpectedValues;
        
        private CheckRole4RoleStep42ExpectedValues mCheckRole4RoleStep42ExpectedValues;
        
        private CheckRole4RoleStep47ExpectedValues mCheckRole4RoleStep47ExpectedValues;
        
        private CheckRole5RoleStep42ExpectedValues mCheckRole5RoleStep42ExpectedValues;
        
        private CheckRole6RoleStep42ExpectedValues mCheckRole6RoleStep42ExpectedValues;
        
        private CheckRole7RoleStep42ExpectedValues mCheckRole7RoleStep42ExpectedValues;
        
        private CheckRoleAddedStep18ExpectedValues mCheckRoleAddedStep18ExpectedValues;
        
        private CheckRoleAddedStep19ExpectedValues mCheckRoleAddedStep19ExpectedValues;
        
        private CheckRoleAddedStep35ExpectedValues mCheckRoleAddedStep35ExpectedValues;
        
        private CheckRoleAddedStep7ExpectedValues mCheckRoleAddedStep7ExpectedValues;
        
        private CheckRoleDeletedStep12ExpectedValues mCheckRoleDeletedStep12ExpectedValues;
        
        private CheckRoleError1Step44ExpectedValues mCheckRoleError1Step44ExpectedValues;
        
        private CheckRoleError2Step44ExpectedValues mCheckRoleError2Step44ExpectedValues;
        
        private CheckRoleError3Step44ExpectedValues mCheckRoleError3Step44ExpectedValues;
        
        private CheckRoleError4Step44ExpectedValues mCheckRoleError4Step44ExpectedValues;
        
        private CheckRolePeriodStep17ExpectedValues mCheckRolePeriodStep17ExpectedValues;
        
        private CheckRolePeriodStep37ExpectedValues mCheckRolePeriodStep37ExpectedValues;
        
        private CheckRolesAddedStep11ExpectedValues mCheckRolesAddedStep11ExpectedValues;
        
        private CheckRolesAddedStep6ExpectedValues mCheckRolesAddedStep6ExpectedValues;
        
        private CheckRolesAddedStep9ExpectedValues mCheckRolesAddedStep9ExpectedValues;
        
        private CheckRolesExcangedStep10ExpectedValues mCheckRolesExcangedStep10ExpectedValues;
        
        private CheckRoleWarnings1Step46ExpectedValues mCheckRoleWarnings1Step46ExpectedValues;
        
        private CheckRoleWarnings2Step46ExpectedValues mCheckRoleWarnings2Step46ExpectedValues;
        
        private CheckRoleWarnings3Step46ExpectedValues mCheckRoleWarnings3Step46ExpectedValues;
        
        private CheckRoleWarnings4Step46ExpectedValues mCheckRoleWarnings4Step46ExpectedValues;
        
        private CheckSpecRoleStep13ExpectedValues mCheckSpecRoleStep13ExpectedValues;
        
        private ConstructBlueFilterStep32Params mConstructBlueFilterStep32Params;
        
        private DeleteBlueFilterStep32Params mDeleteBlueFilterStep32Params;
        
        private MoveSliderToSeDispParams mMoveSliderToSeDispParams;
        
        private CheckInfoWinStep14ExpectedValues mCheckInfoWinStep14ExpectedValues;
        
        private CheckDroppRoleStep27ExpectedValues mCheckDroppRoleStep27ExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIGatWindow mUIGatWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIOppgavetildelingWindow mUIOppgavetildelingWindow;
        
        private UIVelgoppgaverWindow mUIVelgoppgaverWindow;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIROL3005InformasjonWindow mUIROL3005InformasjonWindow;
        
        private UISammenligningavkompeWindow mUISammenligningavkompeWindow;
        
        private UIBytteWindow mUIBytteWindow;
        
        private UIFraværsregistreringWindow mUIFraværsregistreringWindow;
        
        private UIABS3008InformasjonWindow mUIABS3008InformasjonWindow;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIOppgavetildelingWindow1 mUIOppgavetildelingWindow1;
        
        private UIOppgavevaktbokvisninWindow mUIOppgavevaktbokvisninWindow;
        
        private UIDAY4011InformasjonWindow mUIDAY4011InformasjonWindow;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIItemWindow6 mUIItemWindow6;
        
        private UIItemWindow7 mUIItemWindow7;
        
        private UIItemWindow8 mUIItemWindow8;
        
        private UIItemWindow9 mUIItemWindow9;
        
        private UIItemWindow10 mUIItemWindow10;
        
        private UIItemWindow11 mUIItemWindow11;
        
        private UIItemWindow12 mUIItemWindow12;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddCommentStep37'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddCommentStep37Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Husk at du skal være alene!' in 'txtComment' text box
        /// </summary>
        public string UITxtCommentEditValueAsString = "Husk at du skal være alene!";
        
        /// <summary>
        /// Type '{Tab}' in 'txtComment' text box
        /// </summary>
        public string UITxtCommentEditSendKeys = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAGulliShiftStep15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAGulliShiftStep15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'O' cell equals 'O'
        /// </summary>
        public string UIOCellValueAsString = "O";
        
        /// <summary>
        /// Verify that the 'Text' property of 'LEDIG VAKT' cell equals 'Gulli, Andreas'
        /// </summary>
        public string UILEDIGVAKTCellText = "Gulli, Andreas";
        
        /// <summary>
        /// Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals 'MAKS ANTALL ADVARSEL'
        /// </summary>
        public string UIMAKSANTALLADVARSELCell1Text = "MAKS ANTALL ADVARSEL";
        
        /// <summary>
        /// Verify that the 'Text' property of 'labelControl1' label equals 'Opprinnelig ansatt: Anderson, Mr'
        /// </summary>
        public string UILabelControl1LabelText = "Opprinnelig ansatt: Anderson, Mr";
        
        /// <summary>
        /// Verify that the 'Text' property of '22:00 - 08:00' cell equals '08:00 - 16:00'
        /// </summary>
        public string UIItem22000800Cell1Text = "08:00 - 16:00";
        
        /// <summary>
        /// Verify that the 'Text' property of '22-08 - Bakvakt' cell equals 'MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved overskridelse.'
        /// </summary>
        public string UIItem2208BakvaktCell1Text = "MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved oversk" +
            "ridelse.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAndersonDispRoleStep31'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAndersonDispRoleStep31ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Anderson, Mr - 1000-1400' list item equals 'Anderson, Mr - 1000-1400'
        /// </summary>
        public string UIAndersonMr10001400ListItemText = "Anderson, Mr - 1000-1400";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D - (08:00 - 16:00)' list item equals 'D - Anderson, Mr - DISPONIBEL'
        /// </summary>
        public string UID08001600ListItemText = "D - Anderson, Mr - DISPONIBEL";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAndersonFreeShiftStep14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAndersonFreeShiftStep14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'LEDIG VAKT' cell equals 'LEDIG VAKT'
        /// </summary>
        public string UILEDIGVAKTCellText = "LEDIG VAKT";
        
        /// <summary>
        /// Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals 'MAKS ANTALL ADVARSEL'
        /// </summary>
        public string UIMAKSANTALLADVARSELCell1Text = "MAKS ANTALL ADVARSEL";
        
        /// <summary>
        /// Verify that the 'Text' property of 'labelControl1' label equals 'Opprinnelig ansatt: Anderson, Mr'
        /// </summary>
        public string UILabelControl1LabelText = "Opprinnelig ansatt: Anderson, Mr";
        
        /// <summary>
        /// Verify that the 'Text' property of '22:00 - 08:00' cell equals '08:00 - 16:00'
        /// </summary>
        public string UIItem22000800Cell1Text = "08:00 - 16:00";
        
        /// <summary>
        /// Verify that the 'Text' property of '22-08 - Bakvakt' cell equals 'MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved overskridelse.'
        /// </summary>
        public string UIItem2208BakvaktCell1Text = "MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved oversk" +
            "ridelse.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCommentStep39'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckCommentStep39ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'txtComment' text box equals 'Husk at du skal være alene!'
        /// </summary>
        public string UITxtCommentEditText = "Husk at du skal være alene!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCompStep2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckCompStep2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ErrorText' property of 'SPESLEG - Spesialistlege' cell equals 'Mangler påkrevd kompetanse'
        /// </summary>
        public string UISPESLEGSpesialistlegCellErrorText = "Mangler påkrevd kompetanse";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCompStep29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckCompStep29ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'SPESLEG - Spesialistlege' cell equals 'SPESLEG - Spesialistlege'
        /// </summary>
        public string UISPESLEGSpesialistlegCellText = "SPESLEG - Spesialistlege";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckContDispRoleStep32'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckContDispRoleStep32ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedIndicesAsString' property of 'PeriodScheduleListBoxControl`1' list box equals ''
        /// </summary>
        public string UIPeriodScheduleListBoList6SelectedIndicesAsString = "";
        
        /// <summary>
        /// Verify that the 'SelectedItemsAsString' property of 'PeriodScheduleListBoxControl`1' list box equals ''
        /// </summary>
        public string UIPeriodScheduleListBoList6SelectedItemsAsString = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Anderson, Mr - 1000-1400' list item equals 'Anderson, Mr - 1000-1400'
        /// </summary>
        public string UIAndersonMr10001400ListItemText = "Anderson, Mr - 1000-1400";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckContStep39'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckContStep39ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'leCostPlace' LookUpEdit equals '4520 - Operasjon'
        /// </summary>
        public string UILeCostPlaceLookUpEditText = "4520 - Operasjon";
        
        /// <summary>
        /// Verify that the 'Text' property of 'leProject' LookUpEdit equals 'P3 - Prosjekt 3'
        /// </summary>
        public string UILeProjectLookUpEditText = "P3 - Prosjekt 3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDateStep1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckDateStep1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Mandag 02.09.2024 - Uke 36' BarItem equals 'Mandag 02.09.2024 - Uke 36'
        /// </summary>
        public string UIMandag02092024Uke36BarItemText = "Mandag 02.09.2024 - Uke 36";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEvenstadRoleAddedStep23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEvenstadRoleAddedStep23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Gatsoft.Gat.BusinessLogic.WorkSchedule.DataStructures.WorkScheduleRole' list item equals 'Evenstad, Ronny - 0800-1600'
        /// </summary>
        public string UIGatsoftGatBusinessLoListItemText = "Evenstad, Ronny - 0800-1600";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEvenstadRoleDeletedStep23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEvenstadRoleDeletedStep23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedIndicesAsString' property of 'PeriodScheduleListBoxControl`1' list box equals ''
        /// </summary>
        public string UIPeriodScheduleListBoList2SelectedIndicesAsString = "";
        
        /// <summary>
        /// Verify that the 'SelectedItemsAsString' property of 'PeriodScheduleListBoxControl`1' list box equals ''
        /// </summary>
        public string UIPeriodScheduleListBoList2SelectedItemsAsString = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckExcangedStep13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckExcangedStep13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Fnatt, Guro' cell equals 'Fnatt, Guro'
        /// </summary>
        public string UIFnattGuroCellText = "Fnatt, Guro";
        
        /// <summary>
        /// Verify that the 'Text' property of '22-08' cell equals '22-08'
        /// </summary>
        public string UIItem2208CellText = "22-08";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fnatt, Guro' cell equals 'Elderson, Allan'
        /// </summary>
        public string UIFnattGuroCellText1 = "Elderson, Allan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckHintStep16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckHintStep16ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Du må jo være på jobb for å gjennomføre oppgaven!!...' tooltip equals 'Du må jo være på jobb for å gjennomføre oppgaven!!!. '
        /// </summary>
        public string UIDumåjoværepåjobbforåToolTipName = "Du må jo være på jobb for å gjennomføre oppgaven!!!. ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckHintStep2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckHintStep2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Hei! Er du virkelig spesialist eller??.' tooltip equals 'Hei! Er du virkelig spesialist eller??. '
        /// </summary>
        public string UIHeiErduvirkeligspesiToolTipName = "Hei! Er du virkelig spesialist eller??. ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckHintStep36'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckHintStep36ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Kun en kan ha denne oppgaven!!.' tooltip equals 'Kun en kan ha denne oppgaven!!. '
        /// </summary>
        public string UIKunenkanhadenneoppgaToolTipName = "Kun en kan ha denne oppgaven!!. ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckHintStep8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckHintStep8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Verify that the 'Name' property of 'HEI!! Det burde ikke være fler enn 1 person på den...' tooltip equals 'HEI!! Det burde ikke være fler enn 1 person på denne oppgaven!!. '
        /// </summary>
        public string UIHEIDetburdeikkeværefToolTipName = "HEI!! Det burde ikke være fler enn 1 person på denne oppgaven!!. ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckInactiveNotInAddShiftList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckInactiveNotInAddShiftListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'OVER - Overliggende oppgave avd 4500 (4500)' MenuBaseButtonItem equals 'OVER - Overliggende oppgave avd 4500 (4500)'
        /// </summary>
        public string UIOVEROverliggendeoppgMenuBaseButtonItemText = "OVER - Overliggende oppgave avd 4500 (4500)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke (4520)' MenuBaseButtonItem equals 'KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke (4520)'
        /// </summary>
        public string UIKOMPKREVDEKSKLKANIKKMenuBaseButtonItemText = "KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D (4520) - Anderson, Mr' MenuBaseButtonItem equals 'MAKS ANTALL SPERRE - Maks antall personer som kan tildeles. Sperre ved… (4520)'
        /// </summary>
        public string UID4520AndersonMrMenuBaseButtonItemText = "MAKS ANTALL SPERRE - Maks antall personer som kan tildeles. Sperre ved… (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D (4520) - Berre, Jenny' MenuBaseButtonItem equals 'KOMP ØNSKET/EKSKL BØR IKKE - Kompetanse ønsket + Eksklusiv bør ikke (4520)'
        /// </summary>
        public string UID4520BerreJennyMenuBaseButtonItemText = "KOMP ØNSKET/EKSKL BØR IKKE - Kompetanse ønsket + Eksklusiv bør ikke (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BarButtonItemLink[4]' MenuBaseButtonItem equals 'MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel v… (4520)'
        /// </summary>
        public string UIBarButtonItemLink4MenuBaseButtonItemText = "MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel v… (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1 (4520) - Celeston, Sigge' MenuBaseButtonItem equals '08-16 - Dagtid (4520)'
        /// </summary>
        public string UIGV14520CelestonSiggeMenuBaseButtonItemText = "08-16 - Dagtid (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of '16-22 - Vakthavende (4520)' MenuBaseButtonItem equals '16-22 - Vakthavende (4520)'
        /// </summary>
        public string UIItem1622Vakthavende4MenuBaseButtonItemText = "16-22 - Vakthavende (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of '22-08 - Bakvakt (4520)' MenuBaseButtonItem equals '22-08 - Bakvakt (4520)'
        /// </summary>
        public string UIItem2208Bakvakt4520MenuBaseButtonItemText = "22-08 - Bakvakt (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D (4520) - Evenstad, Ronny' MenuBaseButtonItem equals '12-18 - Oppgave utenfor arbeidstid (4520)'
        /// </summary>
        public string UID4520EvenstadRonnyMenuBaseButtonItemText = "12-18 - Oppgave utenfor arbeidstid (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D (4520) - Evenstad, Ronny' MenuBaseButtonItem equals '12-18 - Oppgave utenfor arbeidstid (4520)'
        /// </summary>
        public string UID4520EvenstadRonnyMenuBaseButtonItemText1 = "12-18 - Oppgave utenfor arbeidstid (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of '10-12 - Røntgen (4520)' MenuBaseButtonItem equals '10-12 - Røntgen (4520)'
        /// </summary>
        public string UIItem1012Røntgen4520MenuBaseButtonItemText = "10-12 - Røntgen (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of '08-10 - Morgenmøte (4520)' MenuBaseButtonItem equals '08-10 - Morgenmøte (4520)'
        /// </summary>
        public string UIItem0810Morgenmøte45MenuBaseButtonItemText = "08-10 - Morgenmøte (4520)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckInactiveNotInAddShiftList2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckInactiveNotInAddShiftList2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '12-16 - Administrasjon (4520)' MenuBaseButtonItem equals '12-16 - Administrasjon (4520)'
        /// </summary>
        public string UIItem1216AdministrasjMenuBaseButtonItemText = "12-16 - Administrasjon (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KONTERING - Kontering på oppgaven (4520)' MenuBaseButtonItem equals 'KONTERING - Kontering på oppgaven (4520)'
        /// </summary>
        public string UIKONTERINGKonteringpåMenuBaseButtonItemText = "KONTERING - Kontering på oppgaven (4520)";
        
        /// <summary>
        /// Verify that the 'Text' property of 'DISPONIBEL - Behold som disponibel (4520)' MenuBaseButtonItem equals 'DISPONIBEL - Behold som disponibel (4520)'
        /// </summary>
        public string UIDISPONIBELBeholdsomdMenuBaseButtonItemText = "DISPONIBEL - Behold som disponibel (4520)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckInactiveNotInDashboardList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckInactiveNotInDashboardListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke' cell equals 'KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke'
        /// </summary>
        public string UIKOMPKREVDEKSKLKANIKKCellText = "KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke";
        
        /// <summary>
        /// Verify that the 'Text' property of 'MAKS ANTALL SPERRE - Maks antall personer som kan tildeles. Sperre ved overskridelse.' cell equals 'MAKS ANTALL SPERRE - Maks antall personer som kan tildeles. Sperre ved overskridelse.'
        /// </summary>
        public string UIMAKSANTALLSPERREMaksCellText = "MAKS ANTALL SPERRE - Maks antall personer som kan tildeles. Sperre ved overskride" +
            "lse.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KOMP ØNSKET/EKSKL BØR IKKE - Kompetanse ønsket + Eksklusiv bør ikke' cell equals 'KOMP ØNSKET/EKSKL BØR IKKE - Kompetanse ønsket + Eksklusiv bør ikke'
        /// </summary>
        public string UIKOMPØNSKETEKSKLBØRIKCellText = "KOMP ØNSKET/EKSKL BØR IKKE - Kompetanse ønsket + Eksklusiv bør ikke";
        
        /// <summary>
        /// Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved overskridelse.' cell equals 'MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved overskridelse.'
        /// </summary>
        public string UIMAKSANTALLADVARSELMaCellText = "MAKS ANTALL ADVARSEL - Maks antall personer som kan tildeles. Advarsel ved oversk" +
            "ridelse.";
        
        /// <summary>
        /// Verify that the 'Text' property of '08-16 - Dagtid' cell equals '08-16 - Dagtid'
        /// </summary>
        public string UIItem0816DagtidCellText = "08-16 - Dagtid";
        
        /// <summary>
        /// Verify that the 'Text' property of '16-22 - Vakthavende' cell equals '16-22 - Vakthavende'
        /// </summary>
        public string UIItem1622VakthavendeCellText = "16-22 - Vakthavende";
        
        /// <summary>
        /// Verify that the 'Text' property of '22-08 - Bakvakt' cell equals '22-08 - Bakvakt'
        /// </summary>
        public string UIItem2208BakvaktCellText = "22-08 - Bakvakt";
        
        /// <summary>
        /// Verify that the 'Text' property of '12-18 - Oppgave utenfor arbeidstid' cell equals '12-18 - Oppgave utenfor arbeidstid'
        /// </summary>
        public string UIItem1218OppgaveutenfCellText = "12-18 - Oppgave utenfor arbeidstid";
        
        /// <summary>
        /// Verify that the 'Text' property of '10-12 - Røntgen' cell equals '10-12 - Røntgen'
        /// </summary>
        public string UIItem1012RøntgenCellText = "10-12 - Røntgen";
        
        /// <summary>
        /// Verify that the 'Text' property of '08-10 - Morgenmøte' cell equals '08-10 - Morgenmøte'
        /// </summary>
        public string UIItem0810MorgenmøteCellText = "08-10 - Morgenmøte";
        
        /// <summary>
        /// Verify that the 'Text' property of '12-16 - Administrasjon' cell equals '12-16 - Administrasjon'
        /// </summary>
        public string UIItem1216AdministrasjCellText = "12-16 - Administrasjon";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KONTERING - Kontering på oppgaven' cell equals 'KONTERING - Kontering på oppgaven'
        /// </summary>
        public string UIKONTERINGKonteringpåCellText = "KONTERING - Kontering på oppgaven";
        
        /// <summary>
        /// Verify that the 'Text' property of 'DISPONIBEL - Behold som disponibel' cell equals 'DISPONIBEL - Behold som disponibel'
        /// </summary>
        public string UIDISPONIBELBeholdsomdCellText = "DISPONIBEL - Behold som disponibel";
        
        /// <summary>
        /// Verify that the 'Text' property of 'OVER - Overliggende oppgave avd 4500' cell equals 'OVER - Overliggende oppgave avd 4500'
        /// </summary>
        public string UIOVEROverliggendeoppgCellText = "OVER - Overliggende oppgave avd 4500";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckKompRoleStep5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckKompRoleStep5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '12:00 p.m.  to 2:00 p.m.  mandag, september 2, 2024, Subject KOMP ØNSKET/EKSKL BØR IKKE, Time Ledig, 3 of 3'
        /// </summary>
        public string UIAppointmentCell3Name = "12:00 p.m.  to 2:00 p.m.  mandag, september 2, 2024, Subject KOMP ØNSKET/EKSKL BØ" +
            "R IKKE, Time Ledig, 3 of 3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckListStep26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckListStep26ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Verify that the 'Text' property of 'OVER - Overliggende oppgave avd 4500 (4500)' MenuBaseButtonItem equals 'N (4520) - Dropp, Danny'
        /// </summary>
        public string UIOVEROverliggendeoppgMenuBaseButtonItemText = "N (4520) - Dropp, Danny";
        
        /// <summary>
        /// Verify that the 'Text' property of 'KOMP KREVD/EKSKL KAN IKKE - Kompetanse påkrevd + Eksklusiv kan ikke (4520)' MenuBaseButtonItem equals 'D (4520) - Ahlgren, Klas'
        /// </summary>
        public string UIKOMPKREVDEKSKLKANIKKMenuBaseButtonItemText = "D (4520) - Ahlgren, Klas";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D (4520) - Anderson, Mr' MenuBaseButtonItem equals 'D (4520) - Anderson, Mr'
        /// </summary>
        public string UID4520AndersonMrMenuBaseButtonItemText = "D (4520) - Anderson, Mr";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D (4520) - Berre, Jenny' MenuBaseButtonItem equals 'D (4520) - Berre, Jenny'
        /// </summary>
        public string UID4520BerreJennyMenuBaseButtonItemText = "D (4520) - Berre, Jenny";
        
        /// <summary>
        /// Verify that the 'Text' property of 'BarButtonItemLink[4]' MenuBaseButtonItem equals 'D (4520) - Brusk, Benny'
        /// </summary>
        public string UIBarButtonItemLink4MenuBaseButtonItemText = "D (4520) - Brusk, Benny";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1 (4520) - Celeston, Sigge' MenuBaseButtonItem equals 'GV1 (4520) - Celeston, Sigge'
        /// </summary>
        public string UIGV14520CelestonSiggeMenuBaseButtonItemText = "GV1 (4520) - Celeston, Sigge";
        
        /// <summary>
        /// Verify that the 'Text' property of '16-22 - Vakthavende (4520)' MenuBaseButtonItem equals 'A (4520) - Cocker, James'
        /// </summary>
        public string UIItem1622Vakthavende4MenuBaseButtonItemText = "A (4520) - Cocker, James";
        
        /// <summary>
        /// Verify that the 'Text' property of '22-08 - Bakvakt (4520)' MenuBaseButtonItem equals 'A (4520) - Danderyd, Paul'
        /// </summary>
        public string UIItem2208Bakvakt4520MenuBaseButtonItemText = "A (4520) - Danderyd, Paul";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D (4520) - Evenstad, Ronny' MenuBaseButtonItem equals 'D (4520) - Evenstad, Ronny'
        /// </summary>
        public string UID4520EvenstadRonnyMenuBaseButtonItemText = "D (4520) - Evenstad, Ronny";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOkDisabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOkDisabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'OK' button equals 'False'
        /// </summary>
        public bool UIOKButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOverRoleStep5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOverRoleStep5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject OVER, Time Ledig, 2 of 3'
        /// </summary>
        public string UIAppointmentCell2Name = "9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject OVER, Time Ledig, 2 " +
            "of 3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPlannerOpenStep34'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckPlannerOpenStep34ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Value' property of 'Appointment' cell equals 'Appointment'
        /// </summary>
        public string UIAppointmentCellValue = "Appointment";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole1AddedStep20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole1AddedStep20ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals 'Dagvisning, 5 total events 8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, Subject 08-10, Time Ledig, 3 of 5'
        /// </summary>
        public string UIAppointmentCellName = "Dagvisning, 5 total events 8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, " +
            "Subject 08-10, Time Ledig, 3 of 5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole1RoleStep42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole1RoleStep42ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '8:00 a.m.  to 12:00 p.m.  mandag, september 2, 2024, Subject , , 1 of 9'
        /// </summary>
        public string UIAppointmentCell2Name = "8:00 a.m.  to 12:00 p.m.  mandag, september 2, 2024, Subject , , 1 of 9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole1RoleStep47'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole1RoleStep47ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 2 of 7'
        /// </summary>
        public string UIAppointmentCellName = "8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 2 of 7" +
            "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole2AddedStep20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole2AddedStep20ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals 'Dagvisning, 5 total events 10:00 a.m.  to 12:00 p.m.  tirsdag, september 3, 2024, Subject 10-12, Time Ledig, 4 of 5'
        /// </summary>
        public string UIAppointmentCell1Name = "Dagvisning, 5 total events 10:00 a.m.  to 12:00 p.m.  tirsdag, september 3, 2024," +
            " Subject 10-12, Time Ledig, 4 of 5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole2RoleStep42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole2RoleStep42ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '12:00 p.m.  to 4:00 p.m.  mandag, september 2, 2024, Subject , , 2 of 9'
        /// </summary>
        public string UIAppointmentCell3Name = "12:00 p.m.  to 4:00 p.m.  mandag, september 2, 2024, Subject , , 2 of 9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole2RoleStep47'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole2RoleStep47ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 3 of 7'
        /// </summary>
        public string UIAppointmentCell1Name = "8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 3 of " +
            "7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole3AddedStep20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole3AddedStep20ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals 'Dagvisning, 5 total events 12:00 p.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject 12-16, Time Ledig, 5 of 5'
        /// </summary>
        public string UIAppointmentCell2Name = "Dagvisning, 5 total events 12:00 p.m.  to 4:00 p.m.  tirsdag, september 3, 2024, " +
            "Subject 12-16, Time Ledig, 5 of 5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole3RoleStep42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole3RoleStep42ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject , , 3 of 9'
        /// </summary>
        public string UIAppointmentCell4Name = "9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject , , 3 of 9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole3RoleStep47'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole3RoleStep47ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '10:00 a.m.  to 12:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 4 of 7'
        /// </summary>
        public string UIAppointmentCell2Name = "10:00 a.m.  to 12:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 4 of" +
            " 7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole4RoleStep42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole4RoleStep42ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '12:00 p.m.  to 2:00 p.m.  mandag, september 2, 2024, Subject , , 4 of 9'
        /// </summary>
        public string UIAppointmentCell5Name = "12:00 p.m.  to 2:00 p.m.  mandag, september 2, 2024, Subject , , 4 of 9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole4RoleStep47'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole4RoleStep47ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '12:00 p.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 5 of 7'
        /// </summary>
        public string UIAppointmentCell3Name = "12:00 p.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 5 of " +
            "7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole5RoleStep42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole5RoleStep42ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject , , 5 of 9'
        /// </summary>
        public string UIAppointmentCell6Name = "9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject , , 5 of 9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole6RoleStep42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole6RoleStep42ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 8 of 9'
        /// </summary>
        public string UIAppointmentCell7Name = "10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024, S" +
            "ubject , Time Ledig, 8 of 9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRole7RoleStep42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRole7RoleStep42ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals '6:00 a.m.  to 8:00 a.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 9 of 9'
        /// </summary>
        public string UIAppointmentCell8Name = "6:00 a.m.  to 8:00 a.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 9 of 9" +
            "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleAddedStep18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleAddedStep18ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Cocker, James' cell equals 'Cocker, James'
        /// </summary>
        public string UICockerJamesCellText = "Cocker, James";
        
        /// <summary>
        /// Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals '12-18'
        /// </summary>
        public string UIMAKSANTALLADVARSELCellText = "12-18";
        
        /// <summary>
        /// Verify that the 'Text' property of '22:00 - 08:00' cell equals '15:00 - 21:00'
        /// </summary>
        public string UIItem22000800Cell1Text = "15:00 - 21:00";
        
        /// <summary>
        /// Verify that the 'Text' property of '22-08 - Bakvakt' cell equals '12-18 - Oppgave utenfor arbeidstid'
        /// </summary>
        public string UIItem2208BakvaktCell1Text = "12-18 - Oppgave utenfor arbeidstid";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleAddedStep19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleAddedStep19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Appointment' cell equals 'Dagvisning, 2 total events 8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject 08-16, Time Ledig, 2 of 2'
        /// </summary>
        public string UIAppointmentCell3Name = "Dagvisning, 2 total events 8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, S" +
            "ubject 08-16, Time Ledig, 2 of 2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleAddedStep35'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleAddedStep35ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Value' property of 'Appointment' cell equals 'Appointment'
        /// </summary>
        public string UIAppointmentCellValue = "Appointment";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleAddedStep7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleAddedStep7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals 'MAKS ANTALL ADVARSEL'
        /// </summary>
        public string UIMAKSANTALLADVARSELCellText = "MAKS ANTALL ADVARSEL";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleDeletedStep12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleDeletedStep12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Elderson, Allan' cell equals 'Elderson, Allan'
        /// </summary>
        public string UIEldersonAllanCellText = "Elderson, Allan";
        
        /// <summary>
        /// Verify that the 'Text' property of '16-22, 22-08' cell equals '22-08'
        /// </summary>
        public string UIItem16222208CellText = "22-08";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleError1Step44'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleError1Step44ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Hei! Er du virkelig spesialist eller??. Ingen andr...' tooltip equals 'Hei! Er du virkelig spesialist eller??. Ingen andre oppgaver samtidig med denne!!. '
        /// </summary>
        public string UIHeiErduvirkeligspesiToolTipName = "Hei! Er du virkelig spesialist eller??. Ingen andre oppgaver samtidig med denne!!" +
            ". ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleError2Step44'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleError2Step44ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Oppgave 08-10 overlapper med allerede tildelt eksk...' tooltip equals 'Oppgave 08-10 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL KAN IKKE. '
        /// </summary>
        public string UIOppgave0810overlappeToolTipName = "Oppgave 08-10 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL " +
            "KAN IKKE. ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleError3Step44'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleError3Step44ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Oppgave 10-12 overlapper med allerede tildelt eksk...' tooltip equals 'Oppgave 10-12 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL KAN IKKE. '
        /// </summary>
        public string UIOppgave1012overlappeToolTipName = "Oppgave 10-12 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL " +
            "KAN IKKE. ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleError4Step44'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleError4Step44ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Oppgave 12-16 overlapper med allerede tildelt eksk...' tooltip equals 'Oppgave 12-16 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL KAN IKKE. '
        /// </summary>
        public string UIOppgave1216overlappeToolTipName = "Oppgave 12-16 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL " +
            "KAN IKKE. ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRolePeriodStep17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRolePeriodStep17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'steFromTime' text box equals '15:00'
        /// </summary>
        public string UISteFromTimeEditText = "15:00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'steToTime' text box equals '21:00'
        /// </summary>
        public string UISteToTimeEditText = "21:00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRolePeriodStep37'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRolePeriodStep37ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'steFromTime' text box equals '12:00'
        /// </summary>
        public string UISteFromTimeEditText = "12:00";
        
        /// <summary>
        /// Verify that the 'Text' property of 'steToTime' text box equals '16:00'
        /// </summary>
        public string UISteToTimeEditText = "16:00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRolesAddedStep11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRolesAddedStep11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Elderson, Allan' cell equals 'Elderson, Allan'
        /// </summary>
        public string UIEldersonAllanCellText = "Elderson, Allan";
        
        /// <summary>
        /// Verify that the 'Text' property of '16-22, 22-08' cell equals '16-22, 22-08'
        /// </summary>
        public string UIItem16222208CellText = "16-22, 22-08";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRolesAddedStep6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRolesAddedStep6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'OVER, KOMP ØNSKET/EKSKL BØR IKKE' cell equals 'OVER, KOMP ØNSKET/EKSKL BØR IKKE'
        /// </summary>
        public string UIOVERKOMPØNSKETEKSKLBCellText = "OVER, KOMP ØNSKET/EKSKL BØR IKKE";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRolesAddedStep9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRolesAddedStep9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals 'MAKS ANTALL ADVARSEL'
        /// </summary>
        public string UIMAKSANTALLADVARSELCellText = "MAKS ANTALL ADVARSEL";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRolesExcangedStep10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRolesExcangedStep10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Anderson, Mr' cell equals 'Anderson, Mr'
        /// </summary>
        public string UIAndersonMrCellText = "Anderson, Mr";
        
        /// <summary>
        /// Verify that the 'Text' property of 'OVER, KOMP ØNSKET/EKSKL BØR IKKE' cell equals 'MAKS ANTALL ADVARSEL'
        /// </summary>
        public string UIOVERKOMPØNSKETEKSKLBCellText = "MAKS ANTALL ADVARSEL";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brusk, Benny' cell equals 'Brusk, Benny'
        /// </summary>
        public string UIBruskBennyCellText = "Brusk, Benny";
        
        /// <summary>
        /// Verify that the 'Text' property of 'MAKS ANTALL ADVARSEL' cell equals 'OVER, KOMP ØNSKET/EKSKL BØR IKKE'
        /// </summary>
        public string UIMAKSANTALLADVARSELCellText = "OVER, KOMP ØNSKET/EKSKL BØR IKKE";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleWarnings1Step46'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleWarnings1Step46ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Ansatt mangler følgende ønsket kompetanse for å de...' tooltip equals 'Ansatt mangler følgende ønsket kompetanse for å dekke oppgave KOMP ØNSKET/EKSKL BØR IKKE: STLEG. Ikke lurt å ha flere oppgaver sammen med denne!!. '
        /// </summary>
        public string UIAnsattmanglerfølgendToolTipName = "Ansatt mangler følgende ønsket kompetanse for å dekke oppgave KOMP ØNSKET/EKSKL B" +
            "ØR IKKE: STLEG. Ikke lurt å ha flere oppgaver sammen med denne!!. ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleWarnings2Step46'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleWarnings2Step46ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Oppgave 08-10 overlapper med allerede tildelt delv...' tooltip equals 'Oppgave 08-10 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKET/EKSKL BØR IKKE. '
        /// </summary>
        public string UIOppgave0810overlappeToolTipName = "Oppgave 08-10 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKE" +
            "T/EKSKL BØR IKKE. ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleWarnings3Step46'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleWarnings3Step46ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Oppgave 10-12 overlapper med allerede tildelt delv...' tooltip equals 'Oppgave 10-12 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKET/EKSKL BØR IKKE. '
        /// </summary>
        public string UIOppgave1012overlappeToolTipName = "Oppgave 10-12 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKE" +
            "T/EKSKL BØR IKKE. ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRoleWarnings4Step46'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRoleWarnings4Step46ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Oppgave 12-16 overlapper med allerede tildelt delv...' tooltip equals 'Oppgave 12-16 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKET/EKSKL BØR IKKE. '
        /// </summary>
        public string UIOppgave1216overlappeToolTipName = "Oppgave 12-16 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKE" +
            "T/EKSKL BØR IKKE. ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSpecRoleStep13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSpecRoleStep13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '22:00 - 08:00' cell equals '22:00 - 08:00'
        /// </summary>
        public string UIItem22000800Cell1Text = "22:00 - 08:00";
        
        /// <summary>
        /// Verify that the 'Text' property of '22-08 - Bakvakt' cell equals '22-08 - Bakvakt'
        /// </summary>
        public string UIItem2208BakvaktCell1Text = "22-08 - Bakvakt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConstructBlueFilterStep32'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ConstructBlueFilterStep32Params
    {
        
        #region Fields
        /// <summary>
        /// Type '4' in 'clbColorFilter' CheckedListBox
        /// </summary>
        public string UIClbColorFilterCheckedListBoxCheckedIndicesAsString = "4";
        
        /// <summary>
        /// Type 'BLÅ' in 'txtFilterName' text box
        /// </summary>
        public string UITxtFilterNameEditValueAsString = "BLÅ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeleteBlueFilterStep32'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DeleteBlueFilterStep32Params
    {
        
        #region Fields
        /// <summary>
        /// Select '0' in 'cbSavedViews' combo box
        /// </summary>
        public int UICbSavedViewsComboBoxSelectedIndex = 0;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MoveSliderToSeDisp'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MoveSliderToSeDispParams
    {
        
        #region Fields
        /// <summary>
        /// Type '622' in 'layoutPanel' SplitContainerControl
        /// </summary>
        public int UILayoutPanelSplitContainerControlSplitterPosition = 622;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckInfoWinStep14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckInfoWinStep14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'eMessage' text box equals 'Det finnes oppgaver knyttet til noen av fraværsvaktene. Oppgavene vil slettes når fraværet lagres for fraværende vakter, samt alle vakter ved aktiv sykmelding og tjenestefravær. Dersom det genereres ledige vakter vil oppgavene bli overført til disse vaktene.
        ///NB! Den ansatte beholder oppgaver på vakter som skal gåes delvis eller helt.
        ///Ønsker du fortsatt å registrere fraværet?'
        /// </summary>
        public string UIEMessageEditText = @"Det finnes oppgaver knyttet til noen av fraværsvaktene. Oppgavene vil slettes når fraværet lagres for fraværende vakter, samt alle vakter ved aktiv sykmelding og tjenestefravær. Dersom det genereres ledige vakter vil oppgavene bli overført til disse vaktene.
NB! Den ansatte beholder oppgaver på vakter som skal gåes delvis eller helt.
Ønsker du fortsatt å registrere fraværet?";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDroppRoleStep27'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckDroppRoleStep27ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Dropp, Danny - 2200-0800' list item equals 'Dropp, Danny - 2200-0800'
        /// </summary>
        public string UIDroppDanny22000800ListItemText = "Dropp, Danny - 2200-0800";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UIGATRunDFORelease2019ListItem
        {
            get
            {
                if ((this.mUIGATRunDFORelease2019ListItem == null))
                {
                    this.mUIGATRunDFORelease2019ListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIGATRunDFORelease2019ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "GATRun DFO - Release 2019.1.9x";
                    this.mUIGATRunDFORelease2019ListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIGATRunDFORelease2019ListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIGATRunDFORelease2019ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIStandaloneBarDockConCustom UIStandaloneBarDockConCustom
        {
            get
            {
                if ((this.mUIStandaloneBarDockConCustom == null))
                {
                    this.mUIStandaloneBarDockConCustom = new UIStandaloneBarDockConCustom(this);
                }
                return this.mUIStandaloneBarDockConCustom;
            }
        }
        
        public UICenterPanelDayDockPanel UICenterPanelDayDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayDockPanel == null))
                {
                    this.mUICenterPanelDayDockPanel = new UICenterPanelDayDockPanel(this);
                }
                return this.mUICenterPanelDayDockPanel;
            }
        }
        
        public UILeftPanelDockPanel UILeftPanelDockPanel
        {
            get
            {
                if ((this.mUILeftPanelDockPanel == null))
                {
                    this.mUILeftPanelDockPanel = new UILeftPanelDockPanel(this);
                }
                return this.mUILeftPanelDockPanel;
            }
        }
        
        public UIBottomPanelDockPanel UIBottomPanelDockPanel
        {
            get
            {
                if ((this.mUIBottomPanelDockPanel == null))
                {
                    this.mUIBottomPanelDockPanel = new UIBottomPanelDockPanel(this);
                }
                return this.mUIBottomPanelDockPanel;
            }
        }
        
        public UICenterPanelPeriodDockPanel UICenterPanelPeriodDockPanel
        {
            get
            {
                if ((this.mUICenterPanelPeriodDockPanel == null))
                {
                    this.mUICenterPanelPeriodDockPanel = new UICenterPanelPeriodDockPanel(this);
                }
                return this.mUICenterPanelPeriodDockPanel;
            }
        }
        
        public UIRibbonControlRibbon UIRibbonControlRibbon
        {
            get
            {
                if ((this.mUIRibbonControlRibbon == null))
                {
                    this.mUIRibbonControlRibbon = new UIRibbonControlRibbon(this);
                }
                return this.mUIRibbonControlRibbon;
            }
        }
        
        public UICenterPanelRoleSchedDockPanel UICenterPanelRoleSchedDockPanel
        {
            get
            {
                if ((this.mUICenterPanelRoleSchedDockPanel == null))
                {
                    this.mUICenterPanelRoleSchedDockPanel = new UICenterPanelRoleSchedDockPanel(this);
                }
                return this.mUICenterPanelRoleSchedDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIStandaloneBarDockConCustom mUIStandaloneBarDockConCustom;
        
        private UICenterPanelDayDockPanel mUICenterPanelDayDockPanel;
        
        private UILeftPanelDockPanel mUILeftPanelDockPanel;
        
        private UIBottomPanelDockPanel mUIBottomPanelDockPanel;
        
        private UICenterPanelPeriodDockPanel mUICenterPanelPeriodDockPanel;
        
        private UIRibbonControlRibbon mUIRibbonControlRibbon;
        
        private UICenterPanelRoleSchedDockPanel mUICenterPanelRoleSchedDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStandaloneBarDockConCustom : DXTestControl
    {
        
        public UIStandaloneBarDockConCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "standaloneBarDockControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "StandaloneBarDockControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIMainmenuMenuBar UIMainmenuMenuBar
        {
            get
            {
                if ((this.mUIMainmenuMenuBar == null))
                {
                    this.mUIMainmenuMenuBar = new UIMainmenuMenuBar(this);
                }
                return this.mUIMainmenuMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMainmenuMenuBar mUIMainmenuMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainmenuMenuBar : DXMenu
    {
        
        public UIMainmenuMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Main menu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockedBarControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXMenuItem UIMandag02092024Uke36BarItem
        {
            get
            {
                if ((this.mUIMandag02092024Uke36BarItem == null))
                {
                    this.mUIMandag02092024Uke36BarItem = new DXMenuItem(this);
                    #region Search Criteria
                    this.mUIMandag02092024Uke36BarItem.SearchProperties[DXTestControl.PropertyNames.Name] = "lblSelectedDate";
                    this.mUIMandag02092024Uke36BarItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "BarItem";
                    this.mUIMandag02092024Uke36BarItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIMandag02092024Uke36BarItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuItem mUIMandag02092024Uke36BarItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDay";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom : DXTestControl
    {
        
        public UIControlContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UICenterPanelDayWrappeDockPanel UICenterPanelDayWrappeDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayWrappeDockPanel == null))
                {
                    this.mUICenterPanelDayWrappeDockPanel = new UICenterPanelDayWrappeDockPanel(this);
                }
                return this.mUICenterPanelDayWrappeDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UICenterPanelDayWrappeDockPanel mUICenterPanelDayWrappeDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayWrappeDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayWrappeDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayWrapper";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIDag00167770770FalseDockPanel UIDag00167770770FalseDockPanel
        {
            get
            {
                if ((this.mUIDag00167770770FalseDockPanel == null))
                {
                    this.mUIDag00167770770FalseDockPanel = new UIDag00167770770FalseDockPanel(this);
                }
                return this.mUIDag00167770770FalseDockPanel;
            }
        }
        
        public UIAften00167770770FalsDockPanel UIAften00167770770FalsDockPanel
        {
            get
            {
                if ((this.mUIAften00167770770FalsDockPanel == null))
                {
                    this.mUIAften00167770770FalsDockPanel = new UIAften00167770770FalsDockPanel(this);
                }
                return this.mUIAften00167770770FalsDockPanel;
            }
        }
        
        public UIBakvakt00167770770FaDockPanel UIBakvakt00167770770FaDockPanel
        {
            get
            {
                if ((this.mUIBakvakt00167770770FaDockPanel == null))
                {
                    this.mUIBakvakt00167770770FaDockPanel = new UIBakvakt00167770770FaDockPanel(this);
                }
                return this.mUIBakvakt00167770770FaDockPanel;
            }
        }
        
        public UIFriVikar00167770770FDockPanel UIFriVikar00167770770FDockPanel
        {
            get
            {
                if ((this.mUIFriVikar00167770770FDockPanel == null))
                {
                    this.mUIFriVikar00167770770FDockPanel = new UIFriVikar00167770770FDockPanel(this);
                }
                return this.mUIFriVikar00167770770FDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDag00167770770FalseDockPanel mUIDag00167770770FalseDockPanel;
        
        private UIAften00167770770FalsDockPanel mUIAften00167770770FalsDockPanel;
        
        private UIBakvakt00167770770FaDockPanel mUIBakvakt00167770770FaDockPanel;
        
        private UIFriVikar00167770770FDockPanel mUIFriVikar00167770770FDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDag00167770770FalseDockPanel : DXDockPanel
    {
        
        public UIDag00167770770FalseDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom1 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom1(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom1 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom1 : DXTestControl
    {
        
        public UIControlContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcDayColumnTable UIGcDayColumnTable
        {
            get
            {
                if ((this.mUIGcDayColumnTable == null))
                {
                    this.mUIGcDayColumnTable = new UIGcDayColumnTable(this);
                }
                return this.mUIGcDayColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDayColumnTable mUIGcDayColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDayColumnTable : DXGrid
    {
        
        public UIGcDayColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIAndersonMrCell
        {
            get
            {
                if ((this.mUIAndersonMrCell == null))
                {
                    this.mUIAndersonMrCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAndersonMrCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]1[Column]colEmployeeName";
                    this.mUIAndersonMrCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAndersonMrCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAndersonMrCell;
            }
        }
        
        public DXCell UIOVERKOMPØNSKETEKSKLBCell
        {
            get
            {
                if ((this.mUIOVERKOMPØNSKETEKSKLBCell == null))
                {
                    this.mUIOVERKOMPØNSKETEKSKLBCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOVERKOMPØNSKETEKSKLBCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]1[Column]colRoles";
                    this.mUIOVERKOMPØNSKETEKSKLBCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOVERKOMPØNSKETEKSKLBCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIOVERKOMPØNSKETEKSKLBCell;
            }
        }
        
        public DXCell UIBruskBennyCell
        {
            get
            {
                if ((this.mUIBruskBennyCell == null))
                {
                    this.mUIBruskBennyCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBruskBennyCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]3[Column]colEmployeeName";
                    this.mUIBruskBennyCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBruskBennyCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIBruskBennyCell;
            }
        }
        
        public DXCell UIMAKSANTALLADVARSELCell
        {
            get
            {
                if ((this.mUIMAKSANTALLADVARSELCell == null))
                {
                    this.mUIMAKSANTALLADVARSELCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMAKSANTALLADVARSELCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]3[Column]colRoles";
                    this.mUIMAKSANTALLADVARSELCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMAKSANTALLADVARSELCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIMAKSANTALLADVARSELCell;
            }
        }
        
        public DXCell UILEDIGVAKTCell
        {
            get
            {
                if ((this.mUILEDIGVAKTCell == null))
                {
                    this.mUILEDIGVAKTCell = new DXCell(this);
                    #region Search Criteria
                    this.mUILEDIGVAKTCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]5[Column]colEmployeeName";
                    this.mUILEDIGVAKTCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUILEDIGVAKTCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUILEDIGVAKTCell;
            }
        }
        
        public DXCell UIMAKSANTALLADVARSELCell1
        {
            get
            {
                if ((this.mUIMAKSANTALLADVARSELCell1 == null))
                {
                    this.mUIMAKSANTALLADVARSELCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIMAKSANTALLADVARSELCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]5[Column]colRoles";
                    this.mUIMAKSANTALLADVARSELCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMAKSANTALLADVARSELCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIMAKSANTALLADVARSELCell1;
            }
        }
        
        public DXCell UIBerreJennyCell
        {
            get
            {
                if ((this.mUIBerreJennyCell == null))
                {
                    this.mUIBerreJennyCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBerreJennyCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]2[Column]colEmployeeName";
                    this.mUIBerreJennyCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBerreJennyCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIBerreJennyCell;
            }
        }
        
        public DXCell UIItem081010121216Cell
        {
            get
            {
                if ((this.mUIItem081010121216Cell == null))
                {
                    this.mUIItem081010121216Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem081010121216Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]2[Column]colRoles";
                    this.mUIItem081010121216Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem081010121216Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem081010121216Cell;
            }
        }
        
        public DXCell UIOCell
        {
            get
            {
                if ((this.mUIOCell == null))
                {
                    this.mUIOCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]5[Column]colStatusCode";
                    this.mUIOCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIOCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAndersonMrCell;
        
        private DXCell mUIOVERKOMPØNSKETEKSKLBCell;
        
        private DXCell mUIBruskBennyCell;
        
        private DXCell mUIMAKSANTALLADVARSELCell;
        
        private DXCell mUILEDIGVAKTCell;
        
        private DXCell mUIMAKSANTALLADVARSELCell1;
        
        private DXCell mUIBerreJennyCell;
        
        private DXCell mUIItem081010121216Cell;
        
        private DXCell mUIOCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAften00167770770FalsDockPanel : DXDockPanel
    {
        
        public UIAften00167770770FalsDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Aften;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom2 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom2(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom2 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom2 : DXTestControl
    {
        
        public UIControlContainerCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Aften;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcDayColumnTable1 UIGcDayColumnTable
        {
            get
            {
                if ((this.mUIGcDayColumnTable == null))
                {
                    this.mUIGcDayColumnTable = new UIGcDayColumnTable1(this);
                }
                return this.mUIGcDayColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDayColumnTable1 mUIGcDayColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDayColumnTable1 : DXGrid
    {
        
        public UIGcDayColumnTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UICockerJamesCell
        {
            get
            {
                if ((this.mUICockerJamesCell == null))
                {
                    this.mUICockerJamesCell = new DXCell(this);
                    #region Search Criteria
                    this.mUICockerJamesCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]0[Column]colEmployeeName";
                    this.mUICockerJamesCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUICockerJamesCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUICockerJamesCell;
            }
        }
        
        public DXCell UIMAKSANTALLADVARSELCell
        {
            get
            {
                if ((this.mUIMAKSANTALLADVARSELCell == null))
                {
                    this.mUIMAKSANTALLADVARSELCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMAKSANTALLADVARSELCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]0[Column]colRoles";
                    this.mUIMAKSANTALLADVARSELCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMAKSANTALLADVARSELCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIMAKSANTALLADVARSELCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUICockerJamesCell;
        
        private DXCell mUIMAKSANTALLADVARSELCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBakvakt00167770770FaDockPanel : DXDockPanel
    {
        
        public UIBakvakt00167770770FaDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Bakvakt;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom3 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom3(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom3 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom3 : DXTestControl
    {
        
        public UIControlContainerCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Bakvakt;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcDayColumnTable2 UIGcDayColumnTable
        {
            get
            {
                if ((this.mUIGcDayColumnTable == null))
                {
                    this.mUIGcDayColumnTable = new UIGcDayColumnTable2(this);
                }
                return this.mUIGcDayColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDayColumnTable2 mUIGcDayColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDayColumnTable2 : DXGrid
    {
        
        public UIGcDayColumnTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIEldersonAllanCell
        {
            get
            {
                if ((this.mUIEldersonAllanCell == null))
                {
                    this.mUIEldersonAllanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIEldersonAllanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]0[Column]colEmployeeName";
                    this.mUIEldersonAllanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIEldersonAllanCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIEldersonAllanCell;
            }
        }
        
        public DXCell UIItem16222208Cell
        {
            get
            {
                if ((this.mUIItem16222208Cell == null))
                {
                    this.mUIItem16222208Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem16222208Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]0[Column]colRoles";
                    this.mUIItem16222208Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem16222208Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem16222208Cell;
            }
        }
        
        public DXCell UIFnattGuroCell
        {
            get
            {
                if ((this.mUIFnattGuroCell == null))
                {
                    this.mUIFnattGuroCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFnattGuroCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]1[Column]colEmployeeName";
                    this.mUIFnattGuroCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFnattGuroCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIFnattGuroCell;
            }
        }
        
        public DXCell UIItem2208Cell
        {
            get
            {
                if ((this.mUIItem2208Cell == null))
                {
                    this.mUIItem2208Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2208Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]1[Column]colRoles";
                    this.mUIItem2208Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2208Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem2208Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIEldersonAllanCell;
        
        private DXCell mUIItem16222208Cell;
        
        private DXCell mUIFnattGuroCell;
        
        private DXCell mUIItem2208Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFriVikar00167770770FDockPanel : DXDockPanel
    {
        
        public UIFriVikar00167770770FDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Fri / Vikar;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom4 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom4(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom4 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom4 : DXTestControl
    {
        
        public UIControlContainerCustom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Fri / Vikar;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcFreeColumnTable UIGcFreeColumnTable
        {
            get
            {
                if ((this.mUIGcFreeColumnTable == null))
                {
                    this.mUIGcFreeColumnTable = new UIGcFreeColumnTable(this);
                }
                return this.mUIGcFreeColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcFreeColumnTable mUIGcFreeColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcFreeColumnTable : DXGrid
    {
        
        public UIGcFreeColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIFnattGuroCell
        {
            get
            {
                if ((this.mUIFnattGuroCell == null))
                {
                    this.mUIFnattGuroCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFnattGuroCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumnGridControlCell[View]gvFreeColumn[Row]0[Column]colEmployeeName";
                    this.mUIFnattGuroCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFnattGuroCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIFnattGuroCell;
            }
        }
        
        public DXCell UIGulliAndreasCell
        {
            get
            {
                if ((this.mUIGulliAndreasCell == null))
                {
                    this.mUIGulliAndreasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGulliAndreasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcFreeColumnGridControlCell[View]gvFreeColumn[Row]3[Column]colEmployeeName";
                    this.mUIGulliAndreasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGulliAndreasCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIGulliAndreasCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIFnattGuroCell;
        
        private DXCell mUIGulliAndreasCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeftPanelDockPanel : DXDockPanel
    {
        
        public UILeftPanelDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "LeftPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIOppgavetildelingDockPanel UIOppgavetildelingDockPanel
        {
            get
            {
                if ((this.mUIOppgavetildelingDockPanel == null))
                {
                    this.mUIOppgavetildelingDockPanel = new UIOppgavetildelingDockPanel(this);
                }
                return this.mUIOppgavetildelingDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIOppgavetildelingDockPanel mUIOppgavetildelingDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOppgavetildelingDockPanel : DXDockPanel
    {
        
        public UIOppgavetildelingDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Oppgavetildeling";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom5 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom5(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom5 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom5 : DXTestControl
    {
        
        public UIControlContainerCustom5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "OppgavetildelingControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGAvailableRolesTable UIGAvailableRolesTable
        {
            get
            {
                if ((this.mUIGAvailableRolesTable == null))
                {
                    this.mUIGAvailableRolesTable = new UIGAvailableRolesTable(this);
                }
                return this.mUIGAvailableRolesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGAvailableRolesTable mUIGAvailableRolesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGAvailableRolesTable : DXGrid
    {
        
        public UIGAvailableRolesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRoles";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIMAKSANTALLADVARSELMaCell
        {
            get
            {
                if ((this.mUIMAKSANTALLADVARSELMaCell == null))
                {
                    this.mUIMAKSANTALLADVARSELMaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMAKSANTALLADVARSELMaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]3[Column]gcRoleNameAndDe" +
                        "scription";
                    this.mUIMAKSANTALLADVARSELMaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMAKSANTALLADVARSELMaCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIMAKSANTALLADVARSELMaCell;
            }
        }
        
        public DXCell UIItem1218OppgaveutenfCell
        {
            get
            {
                if ((this.mUIItem1218OppgaveutenfCell == null))
                {
                    this.mUIItem1218OppgaveutenfCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1218OppgaveutenfCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]7[Column]gcRoleNameAndDe" +
                        "scription";
                    this.mUIItem1218OppgaveutenfCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1218OppgaveutenfCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem1218OppgaveutenfCell;
            }
        }
        
        public DXCell UIItem0816DagtidCell
        {
            get
            {
                if ((this.mUIItem0816DagtidCell == null))
                {
                    this.mUIItem0816DagtidCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0816DagtidCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]4[Column]gcRoleNameAndDe" +
                        "scription";
                    this.mUIItem0816DagtidCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0816DagtidCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem0816DagtidCell;
            }
        }
        
        public DXCell UIMAKSANTALLSPERREMaksCell
        {
            get
            {
                if ((this.mUIMAKSANTALLSPERREMaksCell == null))
                {
                    this.mUIMAKSANTALLSPERREMaksCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIMAKSANTALLSPERREMaksCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]1[Column]gcRoleNameAndDe" +
                        "scription";
                    this.mUIMAKSANTALLSPERREMaksCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIMAKSANTALLSPERREMaksCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIMAKSANTALLSPERREMaksCell;
            }
        }
        
        public DXCell UIOVEROverliggendeoppgCell
        {
            get
            {
                if ((this.mUIOVEROverliggendeoppgCell == null))
                {
                    this.mUIOVEROverliggendeoppgCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOVEROverliggendeoppgCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]13[Column]gcRoleNameAndD" +
                        "escription";
                    this.mUIOVEROverliggendeoppgCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOVEROverliggendeoppgCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIOVEROverliggendeoppgCell;
            }
        }
        
        public DXCell UIKOMPKREVDEKSKLKANIKKCell
        {
            get
            {
                if ((this.mUIKOMPKREVDEKSKLKANIKKCell == null))
                {
                    this.mUIKOMPKREVDEKSKLKANIKKCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKOMPKREVDEKSKLKANIKKCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]0[Column]gcRoleNameAndDe" +
                        "scription";
                    this.mUIKOMPKREVDEKSKLKANIKKCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKOMPKREVDEKSKLKANIKKCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIKOMPKREVDEKSKLKANIKKCell;
            }
        }
        
        public DXCell UIKOMPØNSKETEKSKLBØRIKCell
        {
            get
            {
                if ((this.mUIKOMPØNSKETEKSKLBØRIKCell == null))
                {
                    this.mUIKOMPØNSKETEKSKLBØRIKCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKOMPØNSKETEKSKLBØRIKCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]2[Column]gcRoleNameAndDe" +
                        "scription";
                    this.mUIKOMPØNSKETEKSKLBØRIKCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKOMPØNSKETEKSKLBØRIKCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIKOMPØNSKETEKSKLBØRIKCell;
            }
        }
        
        public DXCell UIItem1622VakthavendeCell
        {
            get
            {
                if ((this.mUIItem1622VakthavendeCell == null))
                {
                    this.mUIItem1622VakthavendeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1622VakthavendeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]5[Column]gcRoleNameAndDe" +
                        "scription";
                    this.mUIItem1622VakthavendeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1622VakthavendeCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem1622VakthavendeCell;
            }
        }
        
        public DXCell UIItem2208BakvaktCell
        {
            get
            {
                if ((this.mUIItem2208BakvaktCell == null))
                {
                    this.mUIItem2208BakvaktCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2208BakvaktCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]6[Column]gcRoleNameAndDe" +
                        "scription";
                    this.mUIItem2208BakvaktCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2208BakvaktCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem2208BakvaktCell;
            }
        }
        
        public DXCell UIItem1012RøntgenCell
        {
            get
            {
                if ((this.mUIItem1012RøntgenCell == null))
                {
                    this.mUIItem1012RøntgenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1012RøntgenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]8[Column]gcRoleNameAndDe" +
                        "scription";
                    this.mUIItem1012RøntgenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1012RøntgenCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem1012RøntgenCell;
            }
        }
        
        public DXCell UIItem0810MorgenmøteCell
        {
            get
            {
                if ((this.mUIItem0810MorgenmøteCell == null))
                {
                    this.mUIItem0810MorgenmøteCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0810MorgenmøteCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]9[Column]gcRoleNameAndDe" +
                        "scription";
                    this.mUIItem0810MorgenmøteCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0810MorgenmøteCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem0810MorgenmøteCell;
            }
        }
        
        public DXCell UIItem1216AdministrasjCell
        {
            get
            {
                if ((this.mUIItem1216AdministrasjCell == null))
                {
                    this.mUIItem1216AdministrasjCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1216AdministrasjCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]10[Column]gcRoleNameAndD" +
                        "escription";
                    this.mUIItem1216AdministrasjCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1216AdministrasjCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem1216AdministrasjCell;
            }
        }
        
        public DXCell UIKONTERINGKonteringpåCell
        {
            get
            {
                if ((this.mUIKONTERINGKonteringpåCell == null))
                {
                    this.mUIKONTERINGKonteringpåCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKONTERINGKonteringpåCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]11[Column]gcRoleNameAndD" +
                        "escription";
                    this.mUIKONTERINGKonteringpåCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKONTERINGKonteringpåCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIKONTERINGKonteringpåCell;
            }
        }
        
        public DXCell UIDISPONIBELBeholdsomdCell
        {
            get
            {
                if ((this.mUIDISPONIBELBeholdsomdCell == null))
                {
                    this.mUIDISPONIBELBeholdsomdCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDISPONIBELBeholdsomdCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gAvailableRolesGridControlCell[View]gvAvailableRoles[Row]12[Column]gcRoleNameAndD" +
                        "escription";
                    this.mUIDISPONIBELBeholdsomdCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDISPONIBELBeholdsomdCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIDISPONIBELBeholdsomdCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIMAKSANTALLADVARSELMaCell;
        
        private DXCell mUIItem1218OppgaveutenfCell;
        
        private DXCell mUIItem0816DagtidCell;
        
        private DXCell mUIMAKSANTALLSPERREMaksCell;
        
        private DXCell mUIOVEROverliggendeoppgCell;
        
        private DXCell mUIKOMPKREVDEKSKLKANIKKCell;
        
        private DXCell mUIKOMPØNSKETEKSKLBØRIKCell;
        
        private DXCell mUIItem1622VakthavendeCell;
        
        private DXCell mUIItem2208BakvaktCell;
        
        private DXCell mUIItem1012RøntgenCell;
        
        private DXCell mUIItem0810MorgenmøteCell;
        
        private DXCell mUIItem1216AdministrasjCell;
        
        private DXCell mUIKONTERINGKonteringpåCell;
        
        private DXCell mUIDISPONIBELBeholdsomdCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBottomPanelDockPanel : DXDockPanel
    {
        
        public UIBottomPanelDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BottomPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UISpesifikasjonDockPanel UISpesifikasjonDockPanel
        {
            get
            {
                if ((this.mUISpesifikasjonDockPanel == null))
                {
                    this.mUISpesifikasjonDockPanel = new UISpesifikasjonDockPanel(this);
                }
                return this.mUISpesifikasjonDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UISpesifikasjonDockPanel mUISpesifikasjonDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISpesifikasjonDockPanel : DXDockPanel
    {
        
        public UISpesifikasjonDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Spesifikasjon";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom6 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom6(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom6 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom6 : DXTestControl
    {
        
        public UIControlContainerCustom6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SpesifikasjonControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIVhSpecificationCustom UIVhSpecificationCustom
        {
            get
            {
                if ((this.mUIVhSpecificationCustom == null))
                {
                    this.mUIVhSpecificationCustom = new UIVhSpecificationCustom(this);
                }
                return this.mUIVhSpecificationCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVhSpecificationCustom mUIVhSpecificationCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVhSpecificationCustom : DXTestControl
    {
        
        public UIVhSpecificationCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "vhSpecification";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient1 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient1(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient1 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient1 : DXTestControl
    {
        
        public UIPcViewClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UISpecificationViewCustom UISpecificationViewCustom
        {
            get
            {
                if ((this.mUISpecificationViewCustom == null))
                {
                    this.mUISpecificationViewCustom = new UISpecificationViewCustom(this);
                }
                return this.mUISpecificationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISpecificationViewCustom mUISpecificationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISpecificationViewCustom : DXTestControl
    {
        
        public UISpecificationViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SpecificationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpecificationView";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIFcvwDetailsCustom UIFcvwDetailsCustom
        {
            get
            {
                if ((this.mUIFcvwDetailsCustom == null))
                {
                    this.mUIFcvwDetailsCustom = new UIFcvwDetailsCustom(this);
                }
                return this.mUIFcvwDetailsCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFcvwDetailsCustom mUIFcvwDetailsCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFcvwDetailsCustom : DXTestControl
    {
        
        public UIFcvwDetailsCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fcvwDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FlowControlViewHost";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UISpecificationRoleTabCustom UISpecificationRoleTabCustom
        {
            get
            {
                if ((this.mUISpecificationRoleTabCustom == null))
                {
                    this.mUISpecificationRoleTabCustom = new UISpecificationRoleTabCustom(this);
                }
                return this.mUISpecificationRoleTabCustom;
            }
        }
        
        public UITextDetailsView3Custom UITextDetailsView3Custom
        {
            get
            {
                if ((this.mUITextDetailsView3Custom == null))
                {
                    this.mUITextDetailsView3Custom = new UITextDetailsView3Custom(this);
                }
                return this.mUITextDetailsView3Custom;
            }
        }
        
        public UITextDetailsView4Custom UITextDetailsView4Custom
        {
            get
            {
                if ((this.mUITextDetailsView4Custom == null))
                {
                    this.mUITextDetailsView4Custom = new UITextDetailsView4Custom(this);
                }
                return this.mUITextDetailsView4Custom;
            }
        }
        #endregion
        
        #region Fields
        private UISpecificationRoleTabCustom mUISpecificationRoleTabCustom;
        
        private UITextDetailsView3Custom mUITextDetailsView3Custom;
        
        private UITextDetailsView4Custom mUITextDetailsView4Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISpecificationRoleTabCustom : DXTestControl
    {
        
        public UISpecificationRoleTabCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SpecificationRoleTableView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpecificationRoleTableView";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcRolesTable UIGcRolesTable
        {
            get
            {
                if ((this.mUIGcRolesTable == null))
                {
                    this.mUIGcRolesTable = new UIGcRolesTable(this);
                }
                return this.mUIGcRolesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRolesTable mUIGcRolesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRolesTable : DXGrid
    {
        
        public UIGcRolesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRoles";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem22000800Cell
        {
            get
            {
                if ((this.mUIItem22000800Cell == null))
                {
                    this.mUIItem22000800Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem22000800Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]bandedGridView1[Row]0[Column]gcTime";
                    this.mUIItem22000800Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem22000800Cell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem22000800Cell;
            }
        }
        
        public DXCell UIItem2208BakvaktCell
        {
            get
            {
                if ((this.mUIItem2208BakvaktCell == null))
                {
                    this.mUIItem2208BakvaktCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2208BakvaktCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]bandedGridView1[Row]0[Column]gcCodeAndName";
                    this.mUIItem2208BakvaktCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2208BakvaktCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem2208BakvaktCell;
            }
        }
        
        public DXCell UIItem22000800Cell1
        {
            get
            {
                if ((this.mUIItem22000800Cell1 == null))
                {
                    this.mUIItem22000800Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem22000800Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]advBandedGridView1[Row]0[Column]gcTime";
                    this.mUIItem22000800Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem22000800Cell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem22000800Cell1;
            }
        }
        
        public DXCell UIItem2208BakvaktCell1
        {
            get
            {
                if ((this.mUIItem2208BakvaktCell1 == null))
                {
                    this.mUIItem2208BakvaktCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2208BakvaktCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]advBandedGridView1[Row]0[Column]gcCodeAndName";
                    this.mUIItem2208BakvaktCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2208BakvaktCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIItem2208BakvaktCell1;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem22000800Cell;
        
        private DXCell mUIItem2208BakvaktCell;
        
        private DXCell mUIItem22000800Cell1;
        
        private DXCell mUIItem2208BakvaktCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITextDetailsView3Custom : DXTestControl
    {
        
        public UITextDetailsView3Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "TextDetailsView[3]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextDetailsView";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXTestControl UILabelControl1Label
        {
            get
            {
                if ((this.mUILabelControl1Label == null))
                {
                    this.mUILabelControl1Label = new DXTestControl(this);
                    #region Search Criteria
                    this.mUILabelControl1Label.SearchProperties[DXTestControl.PropertyNames.Name] = "labelControl1";
                    this.mUILabelControl1Label.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LabelControl";
                    this.mUILabelControl1Label.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUILabelControl1Label;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUILabelControl1Label;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITextDetailsView4Custom : DXTestControl
    {
        
        public UITextDetailsView4Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "TextDetailsView[4]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextDetailsView";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXTestControl UILabelControl1Label
        {
            get
            {
                if ((this.mUILabelControl1Label == null))
                {
                    this.mUILabelControl1Label = new DXTestControl(this);
                    #region Search Criteria
                    this.mUILabelControl1Label.SearchProperties[DXTestControl.PropertyNames.Name] = "labelControl1";
                    this.mUILabelControl1Label.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LabelControl";
                    this.mUILabelControl1Label.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUILabelControl1Label;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUILabelControl1Label;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelPeriodDockPanel : DXDockPanel
    {
        
        public UICenterPanelPeriodDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelPeriod";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom7 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom7(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom7 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom7 : DXTestControl
    {
        
        public UIControlContainerCustom7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelPeriodControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPeriodScheduleControCustom UIPeriodScheduleControCustom
        {
            get
            {
                if ((this.mUIPeriodScheduleControCustom == null))
                {
                    this.mUIPeriodScheduleControCustom = new UIPeriodScheduleControCustom(this);
                }
                return this.mUIPeriodScheduleControCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIPeriodScheduleControCustom mUIPeriodScheduleControCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleControCustom : DXTestControl
    {
        
        public UIPeriodScheduleControCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PeriodScheduleControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UILayoutPanelSplitContainerControl UILayoutPanelSplitContainerControl
        {
            get
            {
                if ((this.mUILayoutPanelSplitContainerControl == null))
                {
                    this.mUILayoutPanelSplitContainerControl = new UILayoutPanelSplitContainerControl(this);
                }
                return this.mUILayoutPanelSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutPanelSplitContainerControl mUILayoutPanelSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutPanelSplitContainerControl : DXSplitContainerControl
    {
        
        public UILayoutPanelSplitContainerControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitLayoutPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UITopPanelClient UITopPanelClient
        {
            get
            {
                if ((this.mUITopPanelClient == null))
                {
                    this.mUITopPanelClient = new UITopPanelClient(this);
                }
                return this.mUITopPanelClient;
            }
        }
        
        public UIBottomPanelClient UIBottomPanelClient
        {
            get
            {
                if ((this.mUIBottomPanelClient == null))
                {
                    this.mUIBottomPanelClient = new UIBottomPanelClient(this);
                }
                return this.mUIBottomPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UITopPanelClient mUITopPanelClient;
        
        private UIBottomPanelClient mUIBottomPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITopPanelClient : DXTestControl
    {
        
        public UITopPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CustomSplitGroupPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIXtraScrollableControScrollableControl UIXtraScrollableControScrollableControl
        {
            get
            {
                if ((this.mUIXtraScrollableControScrollableControl == null))
                {
                    this.mUIXtraScrollableControScrollableControl = new UIXtraScrollableControScrollableControl(this);
                }
                return this.mUIXtraScrollableControScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXtraScrollableControScrollableControl mUIXtraScrollableControScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXtraScrollableControScrollableControl : DXScrollableControl
    {
        
        public UIXtraScrollableControScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPeriodScheduleListBoList UIPeriodScheduleListBoList
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList == null))
                {
                    this.mUIPeriodScheduleListBoList = new UIPeriodScheduleListBoList(this);
                }
                return this.mUIPeriodScheduleListBoList;
            }
        }
        
        public UIPeriodScheduleListBoList1 UIPeriodScheduleListBoList1
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList1 == null))
                {
                    this.mUIPeriodScheduleListBoList1 = new UIPeriodScheduleListBoList1(this);
                }
                return this.mUIPeriodScheduleListBoList1;
            }
        }
        
        public UIPeriodScheduleListBoList2 UIPeriodScheduleListBoList2
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList2 == null))
                {
                    this.mUIPeriodScheduleListBoList2 = new UIPeriodScheduleListBoList2(this);
                }
                return this.mUIPeriodScheduleListBoList2;
            }
        }
        
        public UIPeriodScheduleListBoList3 UIPeriodScheduleListBoList3
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList3 == null))
                {
                    this.mUIPeriodScheduleListBoList3 = new UIPeriodScheduleListBoList3(this);
                }
                return this.mUIPeriodScheduleListBoList3;
            }
        }
        
        public UIPeriodScheduleListBoList4 UIPeriodScheduleListBoList4
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList4 == null))
                {
                    this.mUIPeriodScheduleListBoList4 = new UIPeriodScheduleListBoList4(this);
                }
                return this.mUIPeriodScheduleListBoList4;
            }
        }
        
        public UIPeriodScheduleListBoList5 UIPeriodScheduleListBoList5
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList5 == null))
                {
                    this.mUIPeriodScheduleListBoList5 = new UIPeriodScheduleListBoList5(this);
                }
                return this.mUIPeriodScheduleListBoList5;
            }
        }
        
        public DXListBox UIPeriodScheduleListBoList6
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList6 == null))
                {
                    this.mUIPeriodScheduleListBoList6 = new DXListBox(this);
                    #region Search Criteria
                    this.mUIPeriodScheduleListBoList6.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[3]";
                    this.mUIPeriodScheduleListBoList6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
                    this.mUIPeriodScheduleListBoList6.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIPeriodScheduleListBoList6;
            }
        }
        #endregion
        
        #region Fields
        private UIPeriodScheduleListBoList mUIPeriodScheduleListBoList;
        
        private UIPeriodScheduleListBoList1 mUIPeriodScheduleListBoList1;
        
        private UIPeriodScheduleListBoList2 mUIPeriodScheduleListBoList2;
        
        private UIPeriodScheduleListBoList3 mUIPeriodScheduleListBoList3;
        
        private UIPeriodScheduleListBoList4 mUIPeriodScheduleListBoList4;
        
        private UIPeriodScheduleListBoList5 mUIPeriodScheduleListBoList5;
        
        private DXListBox mUIPeriodScheduleListBoList6;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleListBoList : DXListBox
    {
        
        public UIPeriodScheduleListBoList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[8]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIA15002300ListItem
        {
            get
            {
                if ((this.mUIA15002300ListItem == null))
                {
                    this.mUIA15002300ListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIA15002300ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[8]Item[0]";
                    this.mUIA15002300ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1Item";
                    this.mUIA15002300ListItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIA15002300ListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIA15002300ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleListBoList1 : DXListBox
    {
        
        public UIPeriodScheduleListBoList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UID08001600ListItem
        {
            get
            {
                if ((this.mUID08001600ListItem == null))
                {
                    this.mUID08001600ListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUID08001600ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[1]Item[2]";
                    this.mUID08001600ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1Item";
                    this.mUID08001600ListItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUID08001600ListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUID08001600ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleListBoList2 : DXListBox
    {
        
        public UIPeriodScheduleListBoList2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[41]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIGatsoftGatBusinessLoListItem
        {
            get
            {
                if ((this.mUIGatsoftGatBusinessLoListItem == null))
                {
                    this.mUIGatsoftGatBusinessLoListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIGatsoftGatBusinessLoListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[41]Item[0]";
                    this.mUIGatsoftGatBusinessLoListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1Item";
                    this.mUIGatsoftGatBusinessLoListItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIGatsoftGatBusinessLoListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIGatsoftGatBusinessLoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleListBoList3 : DXListBox
    {
        
        public UIPeriodScheduleListBoList3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[52]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIDroppDanny22000800ListItem
        {
            get
            {
                if ((this.mUIDroppDanny22000800ListItem == null))
                {
                    this.mUIDroppDanny22000800ListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIDroppDanny22000800ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[52]Item[0]";
                    this.mUIDroppDanny22000800ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1Item";
                    this.mUIDroppDanny22000800ListItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIDroppDanny22000800ListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIDroppDanny22000800ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleListBoList4 : DXListBox
    {
        
        public UIPeriodScheduleListBoList4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[10]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIAndersonMr10001400ListItem
        {
            get
            {
                if ((this.mUIAndersonMr10001400ListItem == null))
                {
                    this.mUIAndersonMr10001400ListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIAndersonMr10001400ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[10]Item[0]";
                    this.mUIAndersonMr10001400ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1Item";
                    this.mUIAndersonMr10001400ListItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAndersonMr10001400ListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIAndersonMr10001400ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleListBoList5 : DXListBox
    {
        
        public UIPeriodScheduleListBoList5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[94]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIAndersonMr10001400ListItem
        {
            get
            {
                if ((this.mUIAndersonMr10001400ListItem == null))
                {
                    this.mUIAndersonMr10001400ListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIAndersonMr10001400ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "topPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[94]Item[0]";
                    this.mUIAndersonMr10001400ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1Item";
                    this.mUIAndersonMr10001400ListItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAndersonMr10001400ListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIAndersonMr10001400ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBottomPanelClient : DXTestControl
    {
        
        public UIBottomPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CustomSplitGroupPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIXtraScrollableControScrollableControl1 UIXtraScrollableControScrollableControl
        {
            get
            {
                if ((this.mUIXtraScrollableControScrollableControl == null))
                {
                    this.mUIXtraScrollableControScrollableControl = new UIXtraScrollableControScrollableControl1(this);
                }
                return this.mUIXtraScrollableControScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UIXtraScrollableControScrollableControl1 mUIXtraScrollableControScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXtraScrollableControScrollableControl1 : DXScrollableControl
    {
        
        public UIXtraScrollableControScrollableControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanelXtraScrollableControl[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraScrollableControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPeriodScheduleListBoList6 UIPeriodScheduleListBoList
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList == null))
                {
                    this.mUIPeriodScheduleListBoList = new UIPeriodScheduleListBoList6(this);
                }
                return this.mUIPeriodScheduleListBoList;
            }
        }
        
        public UIPeriodScheduleListBoList11 UIPeriodScheduleListBoList1
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList1 == null))
                {
                    this.mUIPeriodScheduleListBoList1 = new UIPeriodScheduleListBoList11(this);
                }
                return this.mUIPeriodScheduleListBoList1;
            }
        }
        
        public UIPeriodScheduleListBoList21 UIPeriodScheduleListBoList2
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList2 == null))
                {
                    this.mUIPeriodScheduleListBoList2 = new UIPeriodScheduleListBoList21(this);
                }
                return this.mUIPeriodScheduleListBoList2;
            }
        }
        
        public UIPeriodScheduleListBoList31 UIPeriodScheduleListBoList3
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList3 == null))
                {
                    this.mUIPeriodScheduleListBoList3 = new UIPeriodScheduleListBoList31(this);
                }
                return this.mUIPeriodScheduleListBoList3;
            }
        }
        
        public UIPeriodScheduleListBoList41 UIPeriodScheduleListBoList4
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoList4 == null))
                {
                    this.mUIPeriodScheduleListBoList4 = new UIPeriodScheduleListBoList41(this);
                }
                return this.mUIPeriodScheduleListBoList4;
            }
        }
        #endregion
        
        #region Fields
        private UIPeriodScheduleListBoList6 mUIPeriodScheduleListBoList;
        
        private UIPeriodScheduleListBoList11 mUIPeriodScheduleListBoList1;
        
        private UIPeriodScheduleListBoList21 mUIPeriodScheduleListBoList2;
        
        private UIPeriodScheduleListBoList31 mUIPeriodScheduleListBoList3;
        
        private UIPeriodScheduleListBoList41 mUIPeriodScheduleListBoList4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleListBoList6 : DXListBox
    {
        
        public UIPeriodScheduleListBoList6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[6]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIPeriodScheduleListBoListItem
        {
            get
            {
                if ((this.mUIPeriodScheduleListBoListItem == null))
                {
                    this.mUIPeriodScheduleListBoListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIPeriodScheduleListBoListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[6]Item[8]";
                    this.mUIPeriodScheduleListBoListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1Item";
                    this.mUIPeriodScheduleListBoListItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIPeriodScheduleListBoListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIPeriodScheduleListBoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleListBoList11 : DXListBox
    {
        
        public UIPeriodScheduleListBoList11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UID08001600ListItem
        {
            get
            {
                if ((this.mUID08001600ListItem == null))
                {
                    this.mUID08001600ListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUID08001600ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[1]Item[0]";
                    this.mUID08001600ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1Item";
                    this.mUID08001600ListItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUID08001600ListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUID08001600ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleListBoList21 : DXListBox
    {
        
        public UIPeriodScheduleListBoList21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[2]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UID08001600ListItem
        {
            get
            {
                if ((this.mUID08001600ListItem == null))
                {
                    this.mUID08001600ListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUID08001600ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[2]Item[1]";
                    this.mUID08001600ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1Item";
                    this.mUID08001600ListItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUID08001600ListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUID08001600ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleListBoList31 : DXListBox
    {
        
        public UIPeriodScheduleListBoList31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[11]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UIBV116000800ListItem
        {
            get
            {
                if ((this.mUIBV116000800ListItem == null))
                {
                    this.mUIBV116000800ListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUIBV116000800ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[11]Item[0]";
                    this.mUIBV116000800ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1Item";
                    this.mUIBV116000800ListItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIBV116000800ListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUIBV116000800ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPeriodScheduleListBoList41 : DXListBox
    {
        
        public UIPeriodScheduleListBoList41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[3]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXListBoxItem UID08001600ListItem
        {
            get
            {
                if ((this.mUID08001600ListItem == null))
                {
                    this.mUID08001600ListItem = new DXListBoxItem(this);
                    #region Search Criteria
                    this.mUID08001600ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "bottomPanelXtraScrollableControl[0]PeriodScheduleListBoxControl`1[3]Item[1]";
                    this.mUID08001600ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PeriodScheduleListBoxControl`1Item";
                    this.mUID08001600ListItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUID08001600ListItem;
            }
        }
        #endregion
        
        #region Fields
        private DXListBoxItem mUID08001600ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonControlRibbon : DXRibbon
    {
        
        public UIRibbonControlRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRpMainMenuRibbonPage UIRpMainMenuRibbonPage
        {
            get
            {
                if ((this.mUIRpMainMenuRibbonPage == null))
                {
                    this.mUIRpMainMenuRibbonPage = new UIRpMainMenuRibbonPage(this);
                }
                return this.mUIRpMainMenuRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpMainMenuRibbonPage mUIRpMainMenuRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpMainMenuRibbonPage : DXRibbonPage
    {
        
        public UIRpMainMenuRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpMainMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGrpMiscRibbonPageGroup UIGrpMiscRibbonPageGroup
        {
            get
            {
                if ((this.mUIGrpMiscRibbonPageGroup == null))
                {
                    this.mUIGrpMiscRibbonPageGroup = new UIGrpMiscRibbonPageGroup(this);
                }
                return this.mUIGrpMiscRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIGrpMiscRibbonPageGroup mUIGrpMiscRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrpMiscRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIGrpMiscRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grpMisc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UISlettRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUISlettRibbonBaseButtonItem == null))
                {
                    this.mUISlettRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "btnDelete";
                    this.mUISlettRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUISlettRibbonBaseButtonItem.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISlettRibbonBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUISlettRibbonBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelRoleSchedDockPanel : DXDockPanel
    {
        
        public UICenterPanelRoleSchedDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelRoleScheduler";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom8 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom8(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom8 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom8 : DXTestControl
    {
        
        public UIControlContainerCustom8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelRoleSchedulerControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UISchedulerControlWindow UISchedulerControlWindow
        {
            get
            {
                if ((this.mUISchedulerControlWindow == null))
                {
                    this.mUISchedulerControlWindow = new UISchedulerControlWindow(this);
                }
                return this.mUISchedulerControlWindow;
            }
        }
        
        public UIRoleSchedulerControlWindow UIRoleSchedulerControlWindow
        {
            get
            {
                if ((this.mUIRoleSchedulerControlWindow == null))
                {
                    this.mUIRoleSchedulerControlWindow = new UIRoleSchedulerControlWindow(this);
                }
                return this.mUIRoleSchedulerControlWindow;
            }
        }
        
        public DXScrollBar UIVScrollBarScrollBarControl
        {
            get
            {
                if ((this.mUIVScrollBarScrollBarControl == null))
                {
                    this.mUIVScrollBarScrollBarControl = new DXScrollBar(this);
                    #region Search Criteria
                    this.mUIVScrollBarScrollBarControl.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelRoleSchedulerControlContainer[0]VScrollBar";
                    this.mUIVScrollBarScrollBarControl.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VScrollBar";
                    this.mUIVScrollBarScrollBarControl.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "3";
                    this.mUIVScrollBarScrollBarControl.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIVScrollBarScrollBarControl;
            }
        }
        #endregion
        
        #region Fields
        private UISchedulerControlWindow mUISchedulerControlWindow;
        
        private UIRoleSchedulerControlWindow mUIRoleSchedulerControlWindow;
        
        private DXScrollBar mUIVScrollBarScrollBarControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlWindow : WinWindow
    {
        
        public UISchedulerControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "schedulerControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UISchedulerControlList UISchedulerControlList
        {
            get
            {
                if ((this.mUISchedulerControlList == null))
                {
                    this.mUISchedulerControlList = new UISchedulerControlList(this);
                }
                return this.mUISchedulerControlList;
            }
        }
        
        public UISchedulerControlList1 UISchedulerControlList1
        {
            get
            {
                if ((this.mUISchedulerControlList1 == null))
                {
                    this.mUISchedulerControlList1 = new UISchedulerControlList1(this);
                }
                return this.mUISchedulerControlList1;
            }
        }
        
        public UISchedulerControlList2 UISchedulerControlList2
        {
            get
            {
                if ((this.mUISchedulerControlList2 == null))
                {
                    this.mUISchedulerControlList2 = new UISchedulerControlList2(this);
                }
                return this.mUISchedulerControlList2;
            }
        }
        
        public UISchedulerControlList3 UISchedulerControlList3
        {
            get
            {
                if ((this.mUISchedulerControlList3 == null))
                {
                    this.mUISchedulerControlList3 = new UISchedulerControlList3(this);
                }
                return this.mUISchedulerControlList3;
            }
        }
        
        public UISchedulerControlList4 UISchedulerControlList4
        {
            get
            {
                if ((this.mUISchedulerControlList4 == null))
                {
                    this.mUISchedulerControlList4 = new UISchedulerControlList4(this);
                }
                return this.mUISchedulerControlList4;
            }
        }
        
        public UISchedulerControlList5 UISchedulerControlList5
        {
            get
            {
                if ((this.mUISchedulerControlList5 == null))
                {
                    this.mUISchedulerControlList5 = new UISchedulerControlList5(this);
                }
                return this.mUISchedulerControlList5;
            }
        }
        
        public UISchedulerControlList6 UISchedulerControlList6
        {
            get
            {
                if ((this.mUISchedulerControlList6 == null))
                {
                    this.mUISchedulerControlList6 = new UISchedulerControlList6(this);
                }
                return this.mUISchedulerControlList6;
            }
        }
        
        public UISchedulerControlList7 UISchedulerControlList7
        {
            get
            {
                if ((this.mUISchedulerControlList7 == null))
                {
                    this.mUISchedulerControlList7 = new UISchedulerControlList7(this);
                }
                return this.mUISchedulerControlList7;
            }
        }
        
        public UISchedulerControlList8 UISchedulerControlList8
        {
            get
            {
                if ((this.mUISchedulerControlList8 == null))
                {
                    this.mUISchedulerControlList8 = new UISchedulerControlList8(this);
                }
                return this.mUISchedulerControlList8;
            }
        }
        
        public UISchedulerControlList9 UISchedulerControlList9
        {
            get
            {
                if ((this.mUISchedulerControlList9 == null))
                {
                    this.mUISchedulerControlList9 = new UISchedulerControlList9(this);
                }
                return this.mUISchedulerControlList9;
            }
        }
        
        public UISchedulerControlList10 UISchedulerControlList10
        {
            get
            {
                if ((this.mUISchedulerControlList10 == null))
                {
                    this.mUISchedulerControlList10 = new UISchedulerControlList10(this);
                }
                return this.mUISchedulerControlList10;
            }
        }
        
        public UISchedulerControlList11 UISchedulerControlList11
        {
            get
            {
                if ((this.mUISchedulerControlList11 == null))
                {
                    this.mUISchedulerControlList11 = new UISchedulerControlList11(this);
                }
                return this.mUISchedulerControlList11;
            }
        }
        
        public UISchedulerControlList12 UISchedulerControlList12
        {
            get
            {
                if ((this.mUISchedulerControlList12 == null))
                {
                    this.mUISchedulerControlList12 = new UISchedulerControlList12(this);
                }
                return this.mUISchedulerControlList12;
            }
        }
        #endregion
        
        #region Fields
        private UISchedulerControlList mUISchedulerControlList;
        
        private UISchedulerControlList1 mUISchedulerControlList1;
        
        private UISchedulerControlList2 mUISchedulerControlList2;
        
        private UISchedulerControlList3 mUISchedulerControlList3;
        
        private UISchedulerControlList4 mUISchedulerControlList4;
        
        private UISchedulerControlList5 mUISchedulerControlList5;
        
        private UISchedulerControlList6 mUISchedulerControlList6;
        
        private UISchedulerControlList7 mUISchedulerControlList7;
        
        private UISchedulerControlList8 mUISchedulerControlList8;
        
        private UISchedulerControlList9 mUISchedulerControlList9;
        
        private UISchedulerControlList10 mUISchedulerControlList10;
        
        private UISchedulerControlList11 mUISchedulerControlList11;
        
        private UISchedulerControlList12 mUISchedulerControlList12;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList : WinList
    {
        
        public UISchedulerControlList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  mandag, september 2, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList1 : WinList
    {
        
        public UISchedulerControlList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 12:00 p.m.  mandag, september 2, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList2 : WinList
    {
        
        public UISchedulerControlList2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "12:00 p.m.  to 4:00 p.m.  mandag, september 2, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        
        public WinCell UIAppointmentCell1
        {
            get
            {
                if ((this.mUIAppointmentCell1 == null))
                {
                    this.mUIAppointmentCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell1.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell1.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 a.m.  to 12:00 p.m.  mandag, september 2, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell1;
            }
        }
        
        public WinCell UIAppointmentCell2
        {
            get
            {
                if ((this.mUIAppointmentCell2 == null))
                {
                    this.mUIAppointmentCell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell2.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell2.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        
        private WinCell mUIAppointmentCell1;
        
        private WinCell mUIAppointmentCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList3 : WinList
    {
        
        public UISchedulerControlList3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024, S" +
                                "ubject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        
        public WinCell UIAppointmentCell1
        {
            get
            {
                if ((this.mUIAppointmentCell1 == null))
                {
                    this.mUIAppointmentCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell1.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell1.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024, S" +
                                "ubject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell1;
            }
        }
        
        public WinCell UIAppointmentCell2
        {
            get
            {
                if ((this.mUIAppointmentCell2 == null))
                {
                    this.mUIAppointmentCell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell2.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell2.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024, S" +
                                "ubject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        
        private WinCell mUIAppointmentCell1;
        
        private WinCell mUIAppointmentCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList4 : WinList
    {
        
        public UISchedulerControlList4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024, S" +
                                "ubject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        
        public WinCell UIAppointmentCell1
        {
            get
            {
                if ((this.mUIAppointmentCell1 == null))
                {
                    this.mUIAppointmentCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell1.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell1.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024, S" +
                                "ubject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell1;
            }
        }
        
        public WinCell UIAppointmentCell2
        {
            get
            {
                if ((this.mUIAppointmentCell2 == null))
                {
                    this.mUIAppointmentCell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell2.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell2.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 12:00 p.m.  mandag, september 2, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell2;
            }
        }
        
        public WinCell UIAppointmentCell3
        {
            get
            {
                if ((this.mUIAppointmentCell3 == null))
                {
                    this.mUIAppointmentCell3 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell3.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell3.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "12:00 p.m.  to 4:00 p.m.  mandag, september 2, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell3.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell3;
            }
        }
        
        public WinCell UIAppointmentCell4
        {
            get
            {
                if ((this.mUIAppointmentCell4 == null))
                {
                    this.mUIAppointmentCell4 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell4.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell4.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject , , 3 of 9", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell4.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell4;
            }
        }
        
        public WinCell UIAppointmentCell5
        {
            get
            {
                if ((this.mUIAppointmentCell5 == null))
                {
                    this.mUIAppointmentCell5 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell5.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell5.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "12:00 p.m.  to 2:00 p.m.  mandag, september 2, 2024, Subject ", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell5.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell5;
            }
        }
        
        public WinCell UIAppointmentCell6
        {
            get
            {
                if ((this.mUIAppointmentCell6 == null))
                {
                    this.mUIAppointmentCell6 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell6.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell6.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject , , 5 of 9", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell6.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell6;
            }
        }
        
        public WinCell UIAppointmentCell7
        {
            get
            {
                if ((this.mUIAppointmentCell7 == null))
                {
                    this.mUIAppointmentCell7 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell7.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell7.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell7.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell7;
            }
        }
        
        public WinCell UIAppointmentCell8
        {
            get
            {
                if ((this.mUIAppointmentCell8 == null))
                {
                    this.mUIAppointmentCell8 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell8.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell8.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "6:00 a.m.  to 8:00 a.m.  tirsdag, september 3, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell8.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell8;
            }
        }
        
        public WinCell UIAppointmentCell9
        {
            get
            {
                if ((this.mUIAppointmentCell9 == null))
                {
                    this.mUIAppointmentCell9 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell9.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell9.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024, S" +
                                "ubject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell9.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell9;
            }
        }
        
        public WinCell UIAppointmentCell10
        {
            get
            {
                if ((this.mUIAppointmentCell10 == null))
                {
                    this.mUIAppointmentCell10 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell10.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell10.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "6:00 a.m.  to 8:00 a.m.  tirsdag, september 3, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell10.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell10;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        
        private WinCell mUIAppointmentCell1;
        
        private WinCell mUIAppointmentCell2;
        
        private WinCell mUIAppointmentCell3;
        
        private WinCell mUIAppointmentCell4;
        
        private WinCell mUIAppointmentCell5;
        
        private WinCell mUIAppointmentCell6;
        
        private WinCell mUIAppointmentCell7;
        
        private WinCell mUIAppointmentCell8;
        
        private WinCell mUIAppointmentCell9;
        
        private WinCell mUIAppointmentCell10;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList5 : WinList
    {
        
        public UISchedulerControlList5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  mandag, september 2, 2024 to 12:00 a.m.  tirsdag, september 3, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList6 : WinList
    {
        
        public UISchedulerControlList6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  mandag, september 2, 2024 to 12:00 a.m.  tirsdag, september 3, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        
        public WinCell UIAppointmentCell1
        {
            get
            {
                if ((this.mUIAppointmentCell1 == null))
                {
                    this.mUIAppointmentCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell1.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell1.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell1;
            }
        }
        
        public WinCell UIAppointmentCell2
        {
            get
            {
                if ((this.mUIAppointmentCell2 == null))
                {
                    this.mUIAppointmentCell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell2.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell2.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 a.m.  to 12:00 p.m.  tirsdag, september 3, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell2;
            }
        }
        
        public WinCell UIAppointmentCell3
        {
            get
            {
                if ((this.mUIAppointmentCell3 == null))
                {
                    this.mUIAppointmentCell3 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell3.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell3.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "12:00 p.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell3.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell3;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        
        private WinCell mUIAppointmentCell1;
        
        private WinCell mUIAppointmentCell2;
        
        private WinCell mUIAppointmentCell3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList7 : WinList
    {
        
        public UISchedulerControlList7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  mandag, september 2, 2024 to 12:00 a.m.  tirsdag, september 3, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, Subject", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList8 : WinList
    {
        
        public UISchedulerControlList8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList9 : WinList
    {
        
        public UISchedulerControlList9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 p.m.  mandag, september 2, 2024 to 8:00 a.m.  tirsdag, september 3, 2024, S" +
                                "ubject , Time Ledig, 9 of 9", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList10 : WinList
    {
        
        public UISchedulerControlList10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  mandag, september 2, 2024 to 12:00 a.m.  tirsdag, september 3, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 2 of 7" +
                                "", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList11 : WinList
    {
        
        public UISchedulerControlList11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Dagvisning, 9 total events, 12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  " +
                "mandag, september 2, 2024";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList12 : WinList
    {
        
        public UISchedulerControlList12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Dagvisning, 7 total events, 12:00 a.m.  mandag, september 2, 2024 to 12:00 a.m.  " +
                "tirsdag, september 3, 2024";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 2 of 7" +
                                "", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        
        public WinCell UIAppointmentCell1
        {
            get
            {
                if ((this.mUIAppointmentCell1 == null))
                {
                    this.mUIAppointmentCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell1.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell1.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 3 of " +
                                "7", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell1;
            }
        }
        
        public WinCell UIAppointmentCell2
        {
            get
            {
                if ((this.mUIAppointmentCell2 == null))
                {
                    this.mUIAppointmentCell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell2.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell2.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 a.m.  to 12:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 4 of" +
                                " 7", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell2.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell2;
            }
        }
        
        public WinCell UIAppointmentCell3
        {
            get
            {
                if ((this.mUIAppointmentCell3 == null))
                {
                    this.mUIAppointmentCell3 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell3.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell3.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "12:00 p.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject , Time Ledig, 5 of " +
                                "7", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell3.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIAppointmentCell3;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        
        private WinCell mUIAppointmentCell1;
        
        private WinCell mUIAppointmentCell2;
        
        private WinCell mUIAppointmentCell3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRoleSchedulerControlWindow : WinWindow
    {
        
        public UIRoleSchedulerControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "RoleSchedulerControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UISchedulerControlList18 UISchedulerControlList
        {
            get
            {
                if ((this.mUISchedulerControlList == null))
                {
                    this.mUISchedulerControlList = new UISchedulerControlList18(this);
                }
                return this.mUISchedulerControlList;
            }
        }
        #endregion
        
        #region Fields
        private UISchedulerControlList18 mUISchedulerControlList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControlList18 : WinList
    {
        
        public UISchedulerControlList18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "schedulerControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public WinList UISchedulerControlList1
        {
            get
            {
                if ((this.mUISchedulerControlList1 == null))
                {
                    this.mUISchedulerControlList1 = new WinList(this);
                    #region Search Criteria
                    this.mUISchedulerControlList1.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
                    this.mUISchedulerControlList1.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISchedulerControlList1;
            }
        }
        
        public WinList UISchedulerControlList11
        {
            get
            {
                if ((this.mUISchedulerControlList11 == null))
                {
                    this.mUISchedulerControlList11 = new WinList(this);
                    #region Search Criteria
                    this.mUISchedulerControlList11.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
                    this.mUISchedulerControlList11.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISchedulerControlList11;
            }
        }
        
        public WinList UISchedulerControlList12
        {
            get
            {
                if ((this.mUISchedulerControlList12 == null))
                {
                    this.mUISchedulerControlList12 = new WinList(this);
                    #region Search Criteria
                    this.mUISchedulerControlList12.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
                    this.mUISchedulerControlList12.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISchedulerControlList12;
            }
        }
        
        public WinList UISchedulerControlList13
        {
            get
            {
                if ((this.mUISchedulerControlList13 == null))
                {
                    this.mUISchedulerControlList13 = new WinList(this);
                    #region Search Criteria
                    this.mUISchedulerControlList13.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
                    this.mUISchedulerControlList13.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISchedulerControlList13;
            }
        }
        
        public WinList UISchedulerControlList14
        {
            get
            {
                if ((this.mUISchedulerControlList14 == null))
                {
                    this.mUISchedulerControlList14 = new WinList(this);
                    #region Search Criteria
                    this.mUISchedulerControlList14.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  mandag, september 2, 2024", PropertyExpressionOperator.Contains));
                    this.mUISchedulerControlList14.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISchedulerControlList14;
            }
        }
        
        public WinList UISchedulerControlList15
        {
            get
            {
                if ((this.mUISchedulerControlList15 == null))
                {
                    this.mUISchedulerControlList15 = new WinList(this);
                    #region Search Criteria
                    this.mUISchedulerControlList15.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  mandag, september 2, 2024 to 12:00 a.m.  tirsdag, september 3, 2024", PropertyExpressionOperator.Contains));
                    this.mUISchedulerControlList15.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISchedulerControlList15;
            }
        }
        
        public WinList UISchedulerControlList16
        {
            get
            {
                if ((this.mUISchedulerControlList16 == null))
                {
                    this.mUISchedulerControlList16 = new WinList(this);
                    #region Search Criteria
                    this.mUISchedulerControlList16.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "12:00 a.m.  mandag, september 2, 2024 to 12:00 a.m.  tirsdag, september 3, 2024", PropertyExpressionOperator.Contains));
                    this.mUISchedulerControlList16.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISchedulerControlList16;
            }
        }
        
        public WinList UISchedulerControlList17
        {
            get
            {
                if ((this.mUISchedulerControlList17 == null))
                {
                    this.mUISchedulerControlList17 = new WinList(this);
                    #region Search Criteria
                    this.mUISchedulerControlList17.SearchProperties[WinList.PropertyNames.Name] = "Dagvisning, 8 total events, 12:00 a.m.  søndag, september 1, 2024 to 12:00 a.m.  " +
                        "mandag, september 2, 2024";
                    this.mUISchedulerControlList17.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUISchedulerControlList17;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUISchedulerControlList1;
        
        private WinList mUISchedulerControlList11;
        
        private WinList mUISchedulerControlList12;
        
        private WinList mUISchedulerControlList13;
        
        private WinList mUISchedulerControlList14;
        
        private WinList mUISchedulerControlList15;
        
        private WinList mUISchedulerControlList16;
        
        private WinList mUISchedulerControlList17;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        
        public UIPopupContainerBarConMenu UIPopupContainerBarConMenu
        {
            get
            {
                if ((this.mUIPopupContainerBarConMenu == null))
                {
                    this.mUIPopupContainerBarConMenu = new UIPopupContainerBarConMenu(this);
                }
                return this.mUIPopupContainerBarConMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        
        private UIPopupContainerBarConMenu mUIPopupContainerBarConMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public UITildelingavoppgaveMenuItem UITildelingavoppgaveMenuItem
        {
            get
            {
                if ((this.mUITildelingavoppgaveMenuItem == null))
                {
                    this.mUITildelingavoppgaveMenuItem = new UITildelingavoppgaveMenuItem(this);
                }
                return this.mUITildelingavoppgaveMenuItem;
            }
        }
        
        public UIByttoppgavermedMenuItem UIByttoppgavermedMenuItem
        {
            get
            {
                if ((this.mUIByttoppgavermedMenuItem == null))
                {
                    this.mUIByttoppgavermedMenuItem = new UIByttoppgavermedMenuItem(this);
                }
                return this.mUIByttoppgavermedMenuItem;
            }
        }
        
        public UISletttildelingavoppgMenuItem UISletttildelingavoppgMenuItem
        {
            get
            {
                if ((this.mUISletttildelingavoppgMenuItem == null))
                {
                    this.mUISletttildelingavoppgMenuItem = new UISletttildelingavoppgMenuItem(this);
                }
                return this.mUISletttildelingavoppgMenuItem;
            }
        }
        
        public UIRedigeroppgaveMenuItem UIRedigeroppgaveMenuItem
        {
            get
            {
                if ((this.mUIRedigeroppgaveMenuItem == null))
                {
                    this.mUIRedigeroppgaveMenuItem = new UIRedigeroppgaveMenuItem(this);
                }
                return this.mUIRedigeroppgaveMenuItem;
            }
        }
        
        public UIByttoppgavermedMenuItem1 UIByttoppgavermedMenuItem1
        {
            get
            {
                if ((this.mUIByttoppgavermedMenuItem1 == null))
                {
                    this.mUIByttoppgavermedMenuItem1 = new UIByttoppgavermedMenuItem1(this);
                }
                return this.mUIByttoppgavermedMenuItem1;
            }
        }
        #endregion
        
        #region Fields
        private UITildelingavoppgaveMenuItem mUITildelingavoppgaveMenuItem;
        
        private UIByttoppgavermedMenuItem mUIByttoppgavermedMenuItem;
        
        private UISletttildelingavoppgMenuItem mUISletttildelingavoppgMenuItem;
        
        private UIRedigeroppgaveMenuItem mUIRedigeroppgaveMenuItem;
        
        private UIByttoppgavermedMenuItem1 mUIByttoppgavermedMenuItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITildelingavoppgaveMenuItem : DXMenuItem
    {
        
        public UITildelingavoppgaveMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem == null))
                {
                    this.mUIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIBarButtonItemLink4MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink4MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink4MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink4MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[4]";
                    this.mUIBarButtonItemLink4MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink4MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIItem1622Vakthavende4MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIItem1622Vakthavende4MenuBaseButtonItem == null))
                {
                    this.mUIItem1622Vakthavende4MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIItem1622Vakthavende4MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[6]";
                    this.mUIItem1622Vakthavende4MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIItem1622Vakthavende4MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIItem2208Bakvakt4520MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIItem2208Bakvakt4520MenuBaseButtonItem == null))
                {
                    this.mUIItem2208Bakvakt4520MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIItem2208Bakvakt4520MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[7]";
                    this.mUIItem2208Bakvakt4520MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIItem2208Bakvakt4520MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIOVEROverliggendeoppgMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIOVEROverliggendeoppgMenuBaseButtonItem == null))
                {
                    this.mUIOVEROverliggendeoppgMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIOVEROverliggendeoppgMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIOVEROverliggendeoppgMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIOVEROverliggendeoppgMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UID4520AndersonMrMenuBaseButtonItem
        {
            get
            {
                if ((this.mUID4520AndersonMrMenuBaseButtonItem == null))
                {
                    this.mUID4520AndersonMrMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUID4520AndersonMrMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[2]";
                    this.mUID4520AndersonMrMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUID4520AndersonMrMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UID4520BerreJennyMenuBaseButtonItem
        {
            get
            {
                if ((this.mUID4520BerreJennyMenuBaseButtonItem == null))
                {
                    this.mUID4520BerreJennyMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUID4520BerreJennyMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[3]";
                    this.mUID4520BerreJennyMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUID4520BerreJennyMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIGV14520CelestonSiggeMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIGV14520CelestonSiggeMenuBaseButtonItem == null))
                {
                    this.mUIGV14520CelestonSiggeMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIGV14520CelestonSiggeMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[5]";
                    this.mUIGV14520CelestonSiggeMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIGV14520CelestonSiggeMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UID4520EvenstadRonnyMenuBaseButtonItem
        {
            get
            {
                if ((this.mUID4520EvenstadRonnyMenuBaseButtonItem == null))
                {
                    this.mUID4520EvenstadRonnyMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUID4520EvenstadRonnyMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[8]";
                    this.mUID4520EvenstadRonnyMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUID4520EvenstadRonnyMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIItem1012Røntgen4520MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIItem1012Røntgen4520MenuBaseButtonItem == null))
                {
                    this.mUIItem1012Røntgen4520MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIItem1012Røntgen4520MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[9]";
                    this.mUIItem1012Røntgen4520MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIItem1012Røntgen4520MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIItem0810Morgenmøte45MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIItem0810Morgenmøte45MenuBaseButtonItem == null))
                {
                    this.mUIItem0810Morgenmøte45MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIItem0810Morgenmøte45MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[10]";
                    this.mUIItem0810Morgenmøte45MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIItem0810Morgenmøte45MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIItem1216AdministrasjMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIItem1216AdministrasjMenuBaseButtonItem == null))
                {
                    this.mUIItem1216AdministrasjMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIItem1216AdministrasjMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[11]";
                    this.mUIItem1216AdministrasjMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIItem1216AdministrasjMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIKONTERINGKonteringpåMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIKONTERINGKonteringpåMenuBaseButtonItem == null))
                {
                    this.mUIKONTERINGKonteringpåMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIKONTERINGKonteringpåMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[12]";
                    this.mUIKONTERINGKonteringpåMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIKONTERINGKonteringpåMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIDISPONIBELBeholdsomdMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIDISPONIBELBeholdsomdMenuBaseButtonItem == null))
                {
                    this.mUIDISPONIBELBeholdsomdMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIDISPONIBELBeholdsomdMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[13]";
                    this.mUIDISPONIBELBeholdsomdMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIDISPONIBELBeholdsomdMenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIKOMPKREVDEKSKLKANIKKMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIBarButtonItemLink4MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIItem1622Vakthavende4MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIItem2208Bakvakt4520MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIOVEROverliggendeoppgMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUID4520AndersonMrMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUID4520BerreJennyMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIGV14520CelestonSiggeMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUID4520EvenstadRonnyMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIItem1012Røntgen4520MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIItem0810Morgenmøte45MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIItem1216AdministrasjMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIKONTERINGKonteringpåMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIDISPONIBELBeholdsomdMenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIByttoppgavermedMenuItem : DXMenuItem
    {
        
        public UIByttoppgavermedMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[3]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBruskBennyMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBruskBennyMenuBaseButtonItem == null))
                {
                    this.mUIBruskBennyMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBruskBennyMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[2]";
                    this.mUIBruskBennyMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBruskBennyMenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBruskBennyMenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISletttildelingavoppgMenuItem : DXMenuItem
    {
        
        public UISletttildelingavoppgMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIItem1622Vakthavende4MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIItem1622Vakthavende4MenuBaseButtonItem == null))
                {
                    this.mUIItem1622Vakthavende4MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIItem1622Vakthavende4MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIItem1622Vakthavende4MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIItem1622Vakthavende4MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIItem0816Dagtid4520MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIItem0816Dagtid4520MenuBaseButtonItem == null))
                {
                    this.mUIItem0816Dagtid4520MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIItem0816Dagtid4520MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[2]";
                    this.mUIItem0816Dagtid4520MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIItem0816Dagtid4520MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIItem1622Vakthavende4MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIItem0816Dagtid4520MenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRedigeroppgaveMenuItem : DXMenuItem
    {
        
        public UIRedigeroppgaveMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[4]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIItem0810Morgenmøte45MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIItem0810Morgenmøte45MenuBaseButtonItem == null))
                {
                    this.mUIItem0810Morgenmøte45MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIItem0810Morgenmøte45MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIItem0810Morgenmøte45MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIItem0810Morgenmøte45MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIItem1012Røntgen4520MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIItem1012Røntgen4520MenuBaseButtonItem == null))
                {
                    this.mUIItem1012Røntgen4520MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIItem1012Røntgen4520MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[1]";
                    this.mUIItem1012Røntgen4520MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIItem1012Røntgen4520MenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIItem1216AdministrasjMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIItem1216AdministrasjMenuBaseButtonItem == null))
                {
                    this.mUIItem1216AdministrasjMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIItem1216AdministrasjMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[2]";
                    this.mUIItem1216AdministrasjMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIItem1216AdministrasjMenuBaseButtonItem;
            }
        }
        
        public DXMenuBaseButtonItem UIItem1216AdministrasjMenuBaseButtonItem1
        {
            get
            {
                if ((this.mUIItem1216AdministrasjMenuBaseButtonItem1 == null))
                {
                    this.mUIItem1216AdministrasjMenuBaseButtonItem1 = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIItem1216AdministrasjMenuBaseButtonItem1.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[3]";
                    this.mUIItem1216AdministrasjMenuBaseButtonItem1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIItem1216AdministrasjMenuBaseButtonItem1;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIItem0810Morgenmøte45MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIItem1012Røntgen4520MenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIItem1216AdministrasjMenuBaseButtonItem;
        
        private DXMenuBaseButtonItem mUIItem1216AdministrasjMenuBaseButtonItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIByttoppgavermedMenuItem1 : DXMenuItem
    {
        
        public UIByttoppgavermedMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[2]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIDroppDannyMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIDroppDannyMenuBaseButtonItem == null))
                {
                    this.mUIDroppDannyMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIDroppDannyMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIDroppDannyMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIDroppDannyMenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIDroppDannyMenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerBarConMenu : DXMenu
    {
        
        public UIPopupContainerBarConMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupContainerBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerBarControl";
            #endregion
        }
        
        #region Properties
        public UIPccFilterNameClient UIPccFilterNameClient
        {
            get
            {
                if ((this.mUIPccFilterNameClient == null))
                {
                    this.mUIPccFilterNameClient = new UIPccFilterNameClient(this);
                }
                return this.mUIPccFilterNameClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPccFilterNameClient mUIPccFilterNameClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPccFilterNameClient : DXTestControl
    {
        
        public UIPccFilterNameClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pccFilterName";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupControlContainer";
            #endregion
        }
        
        #region Properties
        public UIPnlFilterNameClient UIPnlFilterNameClient
        {
            get
            {
                if ((this.mUIPnlFilterNameClient == null))
                {
                    this.mUIPnlFilterNameClient = new UIPnlFilterNameClient(this);
                }
                return this.mUIPnlFilterNameClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlFilterNameClient mUIPnlFilterNameClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlFilterNameClient : DXTestControl
    {
        
        public UIPnlFilterNameClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlFilterName";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            #endregion
        }
        
        #region Properties
        public DXTextEdit UITxtFilterNameEdit
        {
            get
            {
                if ((this.mUITxtFilterNameEdit == null))
                {
                    this.mUITxtFilterNameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUITxtFilterNameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "txtFilterName";
                    this.mUITxtFilterNameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTextEdit";
                    #endregion
                }
                return this.mUITxtFilterNameEdit;
            }
        }
        
        public DXButton UIOKLagreButton
        {
            get
            {
                if ((this.mUIOKLagreButton == null))
                {
                    this.mUIOKLagreButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKLagreButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSaveFilterName";
                    this.mUIOKLagreButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    #endregion
                }
                return this.mUIOKLagreButton;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUITxtFilterNameEdit;
        
        private DXButton mUIOKLagreButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Hei! Er du virkelig spesialist eller??. ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIHeiErduvirkeligspesiToolTip
        {
            get
            {
                if ((this.mUIHeiErduvirkeligspesiToolTip == null))
                {
                    this.mUIHeiErduvirkeligspesiToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIHeiErduvirkeligspesiToolTip.SearchProperties[WinControl.PropertyNames.Name] = "Hei! Er du virkelig spesialist eller??. ";
                    #endregion
                }
                return this.mUIHeiErduvirkeligspesiToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIHeiErduvirkeligspesiToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOppgavetildelingWindow : WinWindow
    {
        
        public UIOppgavetildelingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Oppgavetildeling";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGcContentClient UIGcContentClient
        {
            get
            {
                if ((this.mUIGcContentClient == null))
                {
                    this.mUIGcContentClient = new UIGcContentClient(this);
                }
                return this.mUIGcContentClient;
            }
        }
        
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIOKButton.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public UISchedulerControl1List UISchedulerControl1List
        {
            get
            {
                if ((this.mUISchedulerControl1List == null))
                {
                    this.mUISchedulerControl1List = new UISchedulerControl1List(this);
                }
                return this.mUISchedulerControl1List;
            }
        }
        
        public UISchedulerControl1List1 UISchedulerControl1List1
        {
            get
            {
                if ((this.mUISchedulerControl1List1 == null))
                {
                    this.mUISchedulerControl1List1 = new UISchedulerControl1List1(this);
                }
                return this.mUISchedulerControl1List1;
            }
        }
        
        public UISchedulerControl1List2 UISchedulerControl1List2
        {
            get
            {
                if ((this.mUISchedulerControl1List2 == null))
                {
                    this.mUISchedulerControl1List2 = new UISchedulerControl1List2(this);
                }
                return this.mUISchedulerControl1List2;
            }
        }
        
        public UISchedulerControl1List3 UISchedulerControl1List3
        {
            get
            {
                if ((this.mUISchedulerControl1List3 == null))
                {
                    this.mUISchedulerControl1List3 = new UISchedulerControl1List3(this);
                }
                return this.mUISchedulerControl1List3;
            }
        }
        
        public UISchedulerControl1List4 UISchedulerControl1List4
        {
            get
            {
                if ((this.mUISchedulerControl1List4 == null))
                {
                    this.mUISchedulerControl1List4 = new UISchedulerControl1List4(this);
                }
                return this.mUISchedulerControl1List4;
            }
        }
        
        public UISchedulerControl1List5 UISchedulerControl1List5
        {
            get
            {
                if ((this.mUISchedulerControl1List5 == null))
                {
                    this.mUISchedulerControl1List5 = new UISchedulerControl1List5(this);
                }
                return this.mUISchedulerControl1List5;
            }
        }
        #endregion
        
        #region Fields
        private UIGcContentClient mUIGcContentClient;
        
        private DXButton mUIOKButton;
        
        private UISchedulerControl1List mUISchedulerControl1List;
        
        private UISchedulerControl1List1 mUISchedulerControl1List1;
        
        private UISchedulerControl1List2 mUISchedulerControl1List2;
        
        private UISchedulerControl1List3 mUISchedulerControl1List3;
        
        private UISchedulerControl1List4 mUISchedulerControl1List4;
        
        private UISchedulerControl1List5 mUISchedulerControl1List5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcContentClient : DXTestControl
    {
        
        public UIGcContentClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGcDetailsClient UIGcDetailsClient
        {
            get
            {
                if ((this.mUIGcDetailsClient == null))
                {
                    this.mUIGcDetailsClient = new UIGcDetailsClient(this);
                }
                return this.mUIGcDetailsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDetailsClient mUIGcDetailsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDetailsClient : DXTestControl
    {
        
        public UIGcDetailsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIVhDetailsCustom UIVhDetailsCustom
        {
            get
            {
                if ((this.mUIVhDetailsCustom == null))
                {
                    this.mUIVhDetailsCustom = new UIVhDetailsCustom(this);
                }
                return this.mUIVhDetailsCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVhDetailsCustom mUIVhDetailsCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVhDetailsCustom : DXTestControl
    {
        
        public UIVhDetailsCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "vhDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient2 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient2(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient2 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient2 : DXTestControl
    {
        
        public UIPcViewClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIRoleDetailsViewCustom UIRoleDetailsViewCustom
        {
            get
            {
                if ((this.mUIRoleDetailsViewCustom == null))
                {
                    this.mUIRoleDetailsViewCustom = new UIRoleDetailsViewCustom(this);
                }
                return this.mUIRoleDetailsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIRoleDetailsViewCustom mUIRoleDetailsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRoleDetailsViewCustom : DXTestControl
    {
        
        public UIRoleDetailsViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RoleDetailsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RoleDetailsView";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPanelControl1Client UIPanelControl1Client
        {
            get
            {
                if ((this.mUIPanelControl1Client == null))
                {
                    this.mUIPanelControl1Client = new UIPanelControl1Client(this);
                }
                return this.mUIPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControl1Client mUIPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControl1Client : DXTestControl
    {
        
        public UIPanelControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UITabControlViewHost1TabList UITabControlViewHost1TabList
        {
            get
            {
                if ((this.mUITabControlViewHost1TabList == null))
                {
                    this.mUITabControlViewHost1TabList = new UITabControlViewHost1TabList(this);
                }
                return this.mUITabControlViewHost1TabList;
            }
        }
        #endregion
        
        #region Fields
        private UITabControlViewHost1TabList mUITabControlViewHost1TabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabControlViewHost1TabList : DXTestControl
    {
        
        public UITabControlViewHost1TabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabControlViewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabControlViewHost";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIViewTabPageClient UIViewTabPageClient
        {
            get
            {
                if ((this.mUIViewTabPageClient == null))
                {
                    this.mUIViewTabPageClient = new UIViewTabPageClient(this);
                }
                return this.mUIViewTabPageClient;
            }
        }
        #endregion
        
        #region Fields
        private UIViewTabPageClient mUIViewTabPageClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient : DXTestControl
    {
        
        public UIViewTabPageClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabControlViewHost1ViewTabPage[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIHostedCompetenceCompCustom UIHostedCompetenceCompCustom
        {
            get
            {
                if ((this.mUIHostedCompetenceCompCustom == null))
                {
                    this.mUIHostedCompetenceCompCustom = new UIHostedCompetenceCompCustom(this);
                }
                return this.mUIHostedCompetenceCompCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIHostedCompetenceCompCustom mUIHostedCompetenceCompCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIHostedCompetenceCompCustom : DXTestControl
    {
        
        public UIHostedCompetenceCompCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "HostedCompetenceComparisonView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "HostedCompetenceComparisonView";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIVhCompetenceCustom UIVhCompetenceCustom
        {
            get
            {
                if ((this.mUIVhCompetenceCustom == null))
                {
                    this.mUIVhCompetenceCustom = new UIVhCompetenceCustom(this);
                }
                return this.mUIVhCompetenceCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVhCompetenceCustom mUIVhCompetenceCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVhCompetenceCustom : DXTestControl
    {
        
        public UIVhCompetenceCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "vhCompetence";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient3 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient3(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient3 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient3 : DXTestControl
    {
        
        public UIPcViewClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UICompetenceComparisonCustom UICompetenceComparisonCustom
        {
            get
            {
                if ((this.mUICompetenceComparisonCustom == null))
                {
                    this.mUICompetenceComparisonCustom = new UICompetenceComparisonCustom(this);
                }
                return this.mUICompetenceComparisonCustom;
            }
        }
        #endregion
        
        #region Fields
        private UICompetenceComparisonCustom mUICompetenceComparisonCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICompetenceComparisonCustom : DXTestControl
    {
        
        public UICompetenceComparisonCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CompetenceComparisonView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CompetenceComparisonView";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGcCompetenceComparisTable UIGcCompetenceComparisTable
        {
            get
            {
                if ((this.mUIGcCompetenceComparisTable == null))
                {
                    this.mUIGcCompetenceComparisTable = new UIGcCompetenceComparisTable(this);
                }
                return this.mUIGcCompetenceComparisTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcCompetenceComparisTable mUIGcCompetenceComparisTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcCompetenceComparisTable : DXGrid
    {
        
        public UIGcCompetenceComparisTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCompetenceComparison";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public DXCell UISPESLEGSpesialistlegCell
        {
            get
            {
                if ((this.mUISPESLEGSpesialistlegCell == null))
                {
                    this.mUISPESLEGSpesialistlegCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISPESLEGSpesialistlegCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCompetenceComparisonGridControlCell[View]gvCompetenceComparison[Row]0[Column]co" +
                        "lCompetenceName";
                    this.mUISPESLEGSpesialistlegCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISPESLEGSpesialistlegCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUISPESLEGSpesialistlegCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUISPESLEGSpesialistlegCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControl1List : WinList
    {
        
        public UISchedulerControl1List(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinList.PropertyNames.Name, "2 total events, 12:00 a.m.  mandag, september 2, 2024 to 12:00 a.m.  tirsdag, sep" +
                        "tember 3, 2024", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  mandag, september 2, 2024, Subject KOMP KREVD/EKSKL KAN " +
                                "IKKE, Time Ledig, 2 of 2", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControl1List1 : WinList
    {
        
        public UISchedulerControl1List1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Dagvisning, 3 total events, 12:00 a.m.  mandag, september 2, 2024 to 12:00 a.m.  " +
                "tirsdag, september 3, 2024";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  mandag, september 2, 2024, Subject KOMP ØNSKET/EKSKL BØR" +
                                " IKKE, Time Ledig, 2 of 3", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        
        public WinCell UIAppointmentCell1
        {
            get
            {
                if ((this.mUIAppointmentCell1 == null))
                {
                    this.mUIAppointmentCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell1.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell1.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  mandag, september 2, 2024, Subject OVER, Time Ledig, 3 o" +
                                "f 3", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell1;
            }
        }
        
        public WinCell UIAppointmentCell2
        {
            get
            {
                if ((this.mUIAppointmentCell2 == null))
                {
                    this.mUIAppointmentCell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell2.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell2.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "9:00 a.m.  to 11:00 a.m.  mandag, september 2, 2024, Subject OVER, Time Ledig, 2 " +
                                "of 3", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell2.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell2;
            }
        }
        
        public WinCell UIAppointmentCell3
        {
            get
            {
                if ((this.mUIAppointmentCell3 == null))
                {
                    this.mUIAppointmentCell3 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell3.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell3.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "12:00 p.m.  to 2:00 p.m.  mandag, september 2, 2024, Subject KOMP ØNSKET/EKSKL BØ" +
                                "R IKKE, Time Ledig, 3 of 3", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell3.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell3;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        
        private WinCell mUIAppointmentCell1;
        
        private WinCell mUIAppointmentCell2;
        
        private WinCell mUIAppointmentCell3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControl1List2 : WinList
    {
        
        public UISchedulerControl1List2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Dagvisning, 2 total events, 12:00 a.m.  mandag, september 2, 2024 to 12:00 a.m.  " +
                "tirsdag, september 3, 2024";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  mandag, september 2, 2024, Subject MAKS ANTALL ADVARSEL," +
                                " Time Ledig, 2 of 2", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        
        public WinCell UIAppointmentCell1
        {
            get
            {
                if ((this.mUIAppointmentCell1 == null))
                {
                    this.mUIAppointmentCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell1.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell1.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 12:00 p.m.  mandag, september 2, 2024, Subject MAKS ANTALL SPERRE, " +
                                "Time Ledig, 2 of 2", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        
        private WinCell mUIAppointmentCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControl1List3 : WinList
    {
        
        public UISchedulerControl1List3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Dagvisning, 2 total events, 12:00 a.m.  tirsdag, september 3, 2024 to 12:00 a.m. " +
                " onsdag, september 4, 2024";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "12:00 p.m.  to 6:00 p.m.  tirsdag, september 3, 2024, Subject 12-18, Time Ledig, " +
                                "2 of 2", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        
        public WinCell UIAppointmentCell1
        {
            get
            {
                if ((this.mUIAppointmentCell1 == null))
                {
                    this.mUIAppointmentCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell1.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell1.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "12:00 p.m.  to 6:00 p.m.  tirsdag, september 3, 2024, Subject 12-18, Time Ledig, " +
                                "2 of 2", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell1;
            }
        }
        
        public WinCell UIAppointmentCell2
        {
            get
            {
                if ((this.mUIAppointmentCell2 == null))
                {
                    this.mUIAppointmentCell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell2.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell2.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "3:00 p.m.  to 9:00 p.m.  tirsdag, september 3, 2024, Subject 12-18, Time Ledig, 2" +
                                " of 2", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell2.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell2;
            }
        }
        
        public WinCell UIAppointmentCell3
        {
            get
            {
                if ((this.mUIAppointmentCell3 == null))
                {
                    this.mUIAppointmentCell3 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell3.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell3.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject 08-16, Time Ledig, 2" +
                                " of 2", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell3.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell3;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        
        private WinCell mUIAppointmentCell1;
        
        private WinCell mUIAppointmentCell2;
        
        private WinCell mUIAppointmentCell3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControl1List4 : WinList
    {
        
        public UISchedulerControl1List4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Dagvisning, 5 total events, 12:00 a.m.  tirsdag, september 3, 2024 to 12:00 a.m. " +
                " onsdag, september 4, 2024";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, Subject 08-10, Time Ledig, " +
                                "3 of 5", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        
        public WinCell UIAppointmentCell1
        {
            get
            {
                if ((this.mUIAppointmentCell1 == null))
                {
                    this.mUIAppointmentCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell1.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell1.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 a.m.  to 12:00 p.m.  tirsdag, september 3, 2024, Subject 10-12, Time Ledig," +
                                " 4 of 5", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell1;
            }
        }
        
        public WinCell UIAppointmentCell2
        {
            get
            {
                if ((this.mUIAppointmentCell2 == null))
                {
                    this.mUIAppointmentCell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell2.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell2.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "12:00 p.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject 12-16, Time Ledig, " +
                                "5 of 5", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell2.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell2;
            }
        }
        
        public WinCell UIAppointmentCell3
        {
            get
            {
                if ((this.mUIAppointmentCell3 == null))
                {
                    this.mUIAppointmentCell3 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell3.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell3.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "Dagvisning, 5 total events 8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, S" +
                                "ubject KOMP KREVD/EKSKL KAN IKKE, Time Ledig, 2 of 5", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell3.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell3;
            }
        }
        
        public WinCell UIAppointmentCell4
        {
            get
            {
                if ((this.mUIAppointmentCell4 == null))
                {
                    this.mUIAppointmentCell4 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell4.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell4.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 10:00 a.m.  tirsdag, september 3, 2024, Subject 08-10, Time Ledig, " +
                                "3 of 5", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell4.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell4;
            }
        }
        
        public WinCell UIAppointmentCell5
        {
            get
            {
                if ((this.mUIAppointmentCell5 == null))
                {
                    this.mUIAppointmentCell5 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell5.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell5.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "10:00 a.m.  to 12:00 p.m.  tirsdag, september 3, 2024, Subject 10-12, Time Ledig," +
                                " 4 of 5", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell5.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell5;
            }
        }
        
        public WinCell UIAppointmentCell6
        {
            get
            {
                if ((this.mUIAppointmentCell6 == null))
                {
                    this.mUIAppointmentCell6 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell6.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell6.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "12:00 p.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject 12-16, Time Ledig, " +
                                "5 of 5", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell6.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell6;
            }
        }
        
        public WinCell UIAppointmentCell7
        {
            get
            {
                if ((this.mUIAppointmentCell7 == null))
                {
                    this.mUIAppointmentCell7 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell7.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell7.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  tirsdag, september 3, 2024, Subject KOMP ØNSKET/EKSKL BØ" +
                                "R IKKE, Time Ledig, 2 of 5", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell7.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell7;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        
        private WinCell mUIAppointmentCell1;
        
        private WinCell mUIAppointmentCell2;
        
        private WinCell mUIAppointmentCell3;
        
        private WinCell mUIAppointmentCell4;
        
        private WinCell mUIAppointmentCell5;
        
        private WinCell mUIAppointmentCell6;
        
        private WinCell mUIAppointmentCell7;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISchedulerControl1List5 : WinList
    {
        
        public UISchedulerControl1List5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Dagvisning, 2 total events, 12:00 a.m.  torsdag, september 5, 2024 to 12:00 a.m. " +
                " fredag, september 6, 2024";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public WinCell UIAppointmentCell
        {
            get
            {
                if ((this.mUIAppointmentCell == null))
                {
                    this.mUIAppointmentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  torsdag, september 5, 2024, Subject KOMP KREVD/EKSKL KAN" +
                                " IKKE, Time Ledig, 2 of 2", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell;
            }
        }
        
        public WinCell UIAppointmentCell1
        {
            get
            {
                if ((this.mUIAppointmentCell1 == null))
                {
                    this.mUIAppointmentCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIAppointmentCell1.SearchProperties[WinCell.PropertyNames.Value] = "Appointment";
                    this.mUIAppointmentCell1.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Name, "8:00 a.m.  to 4:00 p.m.  torsdag, september 5, 2024, Subject DISPONIBEL, Time Led" +
                                "ig, 2 of 2", PropertyExpressionOperator.Contains));
                    this.mUIAppointmentCell1.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIAppointmentCell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAppointmentCell;
        
        private WinCell mUIAppointmentCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVelgoppgaverWindow : DXWindow
    {
        
        public UIVelgoppgaverWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Velg oppgaver";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Velg oppgaver");
            #endregion
        }
        
        #region Properties
        public UIGcRolesTable1 UIGcRolesTable
        {
            get
            {
                if ((this.mUIGcRolesTable == null))
                {
                    this.mUIGcRolesTable = new UIGcRolesTable1(this);
                }
                return this.mUIGcRolesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRolesTable1 mUIGcRolesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRolesTable1 : DXGrid
    {
        
        public UIGcRolesTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRoles";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Velg oppgaver");
            #endregion
        }
        
        #region Properties
        public DXCell UIKOMPØNSKETEKSKLBØRIKCell
        {
            get
            {
                if ((this.mUIKOMPØNSKETEKSKLBØRIKCell == null))
                {
                    this.mUIKOMPØNSKETEKSKLBØRIKCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKOMPØNSKETEKSKLBØRIKCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]gvRoles[Row]9[Column]colRoleCodeDisplayName";
                    this.mUIKOMPØNSKETEKSKLBØRIKCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKOMPØNSKETEKSKLBØRIKCell.WindowTitles.Add("Velg oppgaver");
                    #endregion
                }
                return this.mUIKOMPØNSKETEKSKLBØRIKCell;
            }
        }
        
        public DXCell UIOVERCell
        {
            get
            {
                if ((this.mUIOVERCell == null))
                {
                    this.mUIOVERCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIOVERCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]gvRoles[Row]13[Column]colRoleCodeDisplayName";
                    this.mUIOVERCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIOVERCell.WindowTitles.Add("Velg oppgaver");
                    #endregion
                }
                return this.mUIOVERCell;
            }
        }
        
        public DXCell UIItem1012Cell
        {
            get
            {
                if ((this.mUIItem1012Cell == null))
                {
                    this.mUIItem1012Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1012Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]gvRoles[Row]2[Column]colRoleCodeDisplayName";
                    this.mUIItem1012Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1012Cell.WindowTitles.Add("Velg oppgaver");
                    #endregion
                }
                return this.mUIItem1012Cell;
            }
        }
        
        public DXCell UIItem1216Cell
        {
            get
            {
                if ((this.mUIItem1216Cell == null))
                {
                    this.mUIItem1216Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1216Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]gvRoles[Row]3[Column]colRoleCodeDisplayName";
                    this.mUIItem1216Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1216Cell.WindowTitles.Add("Velg oppgaver");
                    #endregion
                }
                return this.mUIItem1216Cell;
            }
        }
        
        public DXCell UIItem0810Cell
        {
            get
            {
                if ((this.mUIItem0810Cell == null))
                {
                    this.mUIItem0810Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0810Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]gvRoles[Row]0[Column]colRoleCodeDisplayName";
                    this.mUIItem0810Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0810Cell.WindowTitles.Add("Velg oppgaver");
                    #endregion
                }
                return this.mUIItem0810Cell;
            }
        }
        
        public DXCell UIDISPONIBELCell
        {
            get
            {
                if ((this.mUIDISPONIBELCell == null))
                {
                    this.mUIDISPONIBELCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDISPONIBELCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]gvRoles[Row]7[Column]colRoleCodeDisplayName";
                    this.mUIDISPONIBELCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDISPONIBELCell.WindowTitles.Add("Velg oppgaver");
                    #endregion
                }
                return this.mUIDISPONIBELCell;
            }
        }
        
        public DXCell UIKONTERINGCell
        {
            get
            {
                if ((this.mUIKONTERINGCell == null))
                {
                    this.mUIKONTERINGCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKONTERINGCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]gvRoles[Row]10[Column]colRoleCodeDisplayName";
                    this.mUIKONTERINGCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKONTERINGCell.WindowTitles.Add("Velg oppgaver");
                    #endregion
                }
                return this.mUIKONTERINGCell;
            }
        }
        
        public DXCell UIKOMPKREVDEKSKLKANIKKCell
        {
            get
            {
                if ((this.mUIKOMPKREVDEKSKLKANIKKCell == null))
                {
                    this.mUIKOMPKREVDEKSKLKANIKKCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIKOMPKREVDEKSKLKANIKKCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRolesGridControlCell[View]gvRoles[Row]8[Column]colRoleCodeDisplayName";
                    this.mUIKOMPKREVDEKSKLKANIKKCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIKOMPKREVDEKSKLKANIKKCell.WindowTitles.Add("Velg oppgaver");
                    #endregion
                }
                return this.mUIKOMPKREVDEKSKLKANIKKCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIKOMPØNSKETEKSKLBØRIKCell;
        
        private DXCell mUIOVERCell;
        
        private DXCell mUIItem1012Cell;
        
        private DXCell mUIItem1216Cell;
        
        private DXCell mUIItem0810Cell;
        
        private DXCell mUIDISPONIBELCell;
        
        private DXCell mUIKONTERINGCell;
        
        private DXCell mUIKOMPKREVDEKSKLKANIKKCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "HEI!! Det burde ikke være fler enn 1 person på denne oppgaven!!. ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIHEIDetburdeikkeværefToolTip
        {
            get
            {
                if ((this.mUIHEIDetburdeikkeværefToolTip == null))
                {
                    this.mUIHEIDetburdeikkeværefToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIHEIDetburdeikkeværefToolTip.SearchProperties[WinControl.PropertyNames.Name] = "HEI!! Det burde ikke være fler enn 1 person på denne oppgaven!!. ";
                    #endregion
                }
                return this.mUIHEIDetburdeikkeværefToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIHEIDetburdeikkeværefToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIROL3005InformasjonWindow : DXWindow
    {
        
        public UIROL3005InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ROL-3005 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ROL-3005 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("ROL-3005 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISammenligningavkompeWindow : DXWindow
    {
        
        public UISammenligningavkompeWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Sammenligning av kompetanse";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sammenligning av kompetanse");
            #endregion
        }
        
        #region Properties
        public DXButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new DXButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Close";
                    this.mUICloseButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WindowTitleButton";
                    this.mUICloseButton.WindowTitles.Add("Sammenligning av kompetanse");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBytteWindow : DXWindow
    {
        
        public UIBytteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Bytte";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Bytte");
            #endregion
        }
        
        #region Properties
        public DXButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.Name] = "ddbtnOk";
                    this.mUIOKButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSDropDownButton";
                    this.mUIOKButton.WindowTitles.Add("Bytte");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFraværsregistreringWindow : DXWindow
    {
        
        public UIFraværsregistreringWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Fraværsregistrering";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIPnlShiftManagementClient UIPnlShiftManagementClient
        {
            get
            {
                if ((this.mUIPnlShiftManagementClient == null))
                {
                    this.mUIPnlShiftManagementClient = new UIPnlShiftManagementClient(this);
                }
                return this.mUIPnlShiftManagementClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlShiftManagementClient mUIPnlShiftManagementClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlShiftManagementClient : DXTestControl
    {
        
        public UIPnlShiftManagementClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlShiftManagement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UISccShiftManagementSplitContainerControl UISccShiftManagementSplitContainerControl
        {
            get
            {
                if ((this.mUISccShiftManagementSplitContainerControl == null))
                {
                    this.mUISccShiftManagementSplitContainerControl = new UISccShiftManagementSplitContainerControl(this);
                }
                return this.mUISccShiftManagementSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UISccShiftManagementSplitContainerControl mUISccShiftManagementSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISccShiftManagementSplitContainerControl : DXSplitContainerControl
    {
        
        public UISccShiftManagementSplitContainerControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "sccShiftManagement";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSplitContainerControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UISplitGroupPanelClient UISplitGroupPanelClient
        {
            get
            {
                if ((this.mUISplitGroupPanelClient == null))
                {
                    this.mUISplitGroupPanelClient = new UISplitGroupPanelClient(this);
                }
                return this.mUISplitGroupPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UISplitGroupPanelClient mUISplitGroupPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISplitGroupPanelClient : DXTestControl
    {
        
        public UISplitGroupPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "sccShiftManagementSplitGroupPanel[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIGrcShiftsClient UIGrcShiftsClient
        {
            get
            {
                if ((this.mUIGrcShiftsClient == null))
                {
                    this.mUIGrcShiftsClient = new UIGrcShiftsClient(this);
                }
                return this.mUIGrcShiftsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGrcShiftsClient mUIGrcShiftsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGrcShiftsClient : DXTestControl
    {
        
        public UIGrcShiftsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "grcShifts";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UITcShiftsTabList UITcShiftsTabList
        {
            get
            {
                if ((this.mUITcShiftsTabList == null))
                {
                    this.mUITcShiftsTabList = new UITcShiftsTabList(this);
                }
                return this.mUITcShiftsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcShiftsTabList mUITcShiftsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcShiftsTabList : DXTestControl
    {
        
        public UITcShiftsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcShifts";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTabControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIXtpShiftsGridClient UIXtpShiftsGridClient
        {
            get
            {
                if ((this.mUIXtpShiftsGridClient == null))
                {
                    this.mUIXtpShiftsGridClient = new UIXtpShiftsGridClient(this);
                }
                return this.mUIXtpShiftsGridClient;
            }
        }
        #endregion
        
        #region Fields
        private UIXtpShiftsGridClient mUIXtpShiftsGridClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIXtpShiftsGridClient : DXTestControl
    {
        
        public UIXtpShiftsGridClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "xtpShiftsGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public UIGcShiftsTable UIGcShiftsTable
        {
            get
            {
                if ((this.mUIGcShiftsTable == null))
                {
                    this.mUIGcShiftsTable = new UIGcShiftsTable(this);
                }
                return this.mUIGcShiftsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcShiftsTable mUIGcShiftsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcShiftsTable : DXGrid
    {
        
        public UIGcShiftsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShifts";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Fraværsregistrering");
            #endregion
        }
        
        #region Properties
        public DXCell UIValgtCell
        {
            get
            {
                if ((this.mUIValgtCell == null))
                {
                    this.mUIValgtCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIValgtCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcShiftsGridControlCell[View]gvShifts[Row]0[Column]tlcGenShift";
                    this.mUIValgtCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIValgtCell.WindowTitles.Add("Fraværsregistrering");
                    #endregion
                }
                return this.mUIValgtCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIValgtCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIABS3008InformasjonWindow : DXWindow
    {
        
        public UIABS3008InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ABS-3008 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ABS-3008 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UIEMessageEdit
        {
            get
            {
                if ((this.mUIEMessageEdit == null))
                {
                    this.mUIEMessageEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUIEMessageEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "eMessage";
                    this.mUIEMessageEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSMemoEdit";
                    this.mUIEMessageEdit.WindowTitles.Add("ABS-3008 - Informasjon");
                    #endregion
                }
                return this.mUIEMessageEdit;
            }
        }
        
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("ABS-3008 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUIEMessageEdit;
        
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Du må jo være på jobb for å gjennomføre oppgaven!!!. ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIDumåjoværepåjobbforåToolTip
        {
            get
            {
                if ((this.mUIDumåjoværepåjobbforåToolTip == null))
                {
                    this.mUIDumåjoværepåjobbforåToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIDumåjoværepåjobbforåToolTip.SearchProperties[WinControl.PropertyNames.Name] = "Du må jo være på jobb for å gjennomføre oppgaven!!!. ";
                    #endregion
                }
                return this.mUIDumåjoværepåjobbforåToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIDumåjoværepåjobbforåToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOppgavetildelingWindow1 : DXWindow
    {
        
        public UIOppgavetildelingWindow1()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Oppgavetildeling";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGcContentClient1 UIGcContentClient
        {
            get
            {
                if ((this.mUIGcContentClient == null))
                {
                    this.mUIGcContentClient = new UIGcContentClient1(this);
                }
                return this.mUIGcContentClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcContentClient1 mUIGcContentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcContentClient1 : DXTestControl
    {
        
        public UIGcContentClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContent";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGcDetailsClient1 UIGcDetailsClient
        {
            get
            {
                if ((this.mUIGcDetailsClient == null))
                {
                    this.mUIGcDetailsClient = new UIGcDetailsClient1(this);
                }
                return this.mUIGcDetailsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDetailsClient1 mUIGcDetailsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDetailsClient1 : DXTestControl
    {
        
        public UIGcDetailsClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIVhDetailsCustom1 UIVhDetailsCustom
        {
            get
            {
                if ((this.mUIVhDetailsCustom == null))
                {
                    this.mUIVhDetailsCustom = new UIVhDetailsCustom1(this);
                }
                return this.mUIVhDetailsCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVhDetailsCustom1 mUIVhDetailsCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVhDetailsCustom1 : DXTestControl
    {
        
        public UIVhDetailsCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "vhDetails";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient4 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient4(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient4 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient4 : DXTestControl
    {
        
        public UIPcViewClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIRoleDetailsViewCustom1 UIRoleDetailsViewCustom
        {
            get
            {
                if ((this.mUIRoleDetailsViewCustom == null))
                {
                    this.mUIRoleDetailsViewCustom = new UIRoleDetailsViewCustom1(this);
                }
                return this.mUIRoleDetailsViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIRoleDetailsViewCustom1 mUIRoleDetailsViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRoleDetailsViewCustom1 : DXTestControl
    {
        
        public UIRoleDetailsViewCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RoleDetailsView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RoleDetailsView";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPanelControl1Client1 UIPanelControl1Client
        {
            get
            {
                if ((this.mUIPanelControl1Client == null))
                {
                    this.mUIPanelControl1Client = new UIPanelControl1Client1(this);
                }
                return this.mUIPanelControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControl1Client1 mUIPanelControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControl1Client1 : DXTestControl
    {
        
        public UIPanelControl1Client1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public DXTextEdit UISteFromTimeEdit
        {
            get
            {
                if ((this.mUISteFromTimeEdit == null))
                {
                    this.mUISteFromTimeEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUISteFromTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "steFromTime";
                    this.mUISteFromTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartTimeEdit";
                    this.mUISteFromTimeEdit.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUISteFromTimeEdit;
            }
        }
        
        public DXTextEdit UISteToTimeEdit
        {
            get
            {
                if ((this.mUISteToTimeEdit == null))
                {
                    this.mUISteToTimeEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUISteToTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "steToTime";
                    this.mUISteToTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SmartTimeEdit";
                    this.mUISteToTimeEdit.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUISteToTimeEdit;
            }
        }
        
        public UITabControlViewHost1TabList1 UITabControlViewHost1TabList
        {
            get
            {
                if ((this.mUITabControlViewHost1TabList == null))
                {
                    this.mUITabControlViewHost1TabList = new UITabControlViewHost1TabList1(this);
                }
                return this.mUITabControlViewHost1TabList;
            }
        }
        
        public DXTextEdit UITxtCommentEdit
        {
            get
            {
                if ((this.mUITxtCommentEdit == null))
                {
                    this.mUITxtCommentEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUITxtCommentEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "txtComment";
                    this.mUITxtCommentEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MemoEdit";
                    this.mUITxtCommentEdit.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUITxtCommentEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUISteFromTimeEdit;
        
        private DXTextEdit mUISteToTimeEdit;
        
        private UITabControlViewHost1TabList1 mUITabControlViewHost1TabList;
        
        private DXTextEdit mUITxtCommentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabControlViewHost1TabList1 : DXTestControl
    {
        
        public UITabControlViewHost1TabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabControlViewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabControlViewHost";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIViewTabPageClient1 UIViewTabPageClient
        {
            get
            {
                if ((this.mUIViewTabPageClient == null))
                {
                    this.mUIViewTabPageClient = new UIViewTabPageClient1(this);
                }
                return this.mUIViewTabPageClient;
            }
        }
        
        public UIViewTabPageClient11 UIViewTabPageClient1
        {
            get
            {
                if ((this.mUIViewTabPageClient1 == null))
                {
                    this.mUIViewTabPageClient1 = new UIViewTabPageClient11(this);
                }
                return this.mUIViewTabPageClient1;
            }
        }
        #endregion
        
        #region Fields
        private UIViewTabPageClient1 mUIViewTabPageClient;
        
        private UIViewTabPageClient11 mUIViewTabPageClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient1 : DXTestControl
    {
        
        public UIViewTabPageClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabControlViewHost1ViewTabPage[1]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIHostedCompetenceCompCustom1 UIHostedCompetenceCompCustom
        {
            get
            {
                if ((this.mUIHostedCompetenceCompCustom == null))
                {
                    this.mUIHostedCompetenceCompCustom = new UIHostedCompetenceCompCustom1(this);
                }
                return this.mUIHostedCompetenceCompCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIHostedCompetenceCompCustom1 mUIHostedCompetenceCompCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIHostedCompetenceCompCustom1 : DXTestControl
    {
        
        public UIHostedCompetenceCompCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "HostedCompetenceComparisonView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "HostedCompetenceComparisonView";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIVhCompetenceCustom1 UIVhCompetenceCustom
        {
            get
            {
                if ((this.mUIVhCompetenceCustom == null))
                {
                    this.mUIVhCompetenceCustom = new UIVhCompetenceCustom1(this);
                }
                return this.mUIVhCompetenceCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVhCompetenceCustom1 mUIVhCompetenceCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVhCompetenceCustom1 : DXTestControl
    {
        
        public UIVhCompetenceCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "vhCompetence";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient5 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient5(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient5 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient5 : DXTestControl
    {
        
        public UIPcViewClient5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UICompetenceComparisonCustom1 UICompetenceComparisonCustom
        {
            get
            {
                if ((this.mUICompetenceComparisonCustom == null))
                {
                    this.mUICompetenceComparisonCustom = new UICompetenceComparisonCustom1(this);
                }
                return this.mUICompetenceComparisonCustom;
            }
        }
        #endregion
        
        #region Fields
        private UICompetenceComparisonCustom1 mUICompetenceComparisonCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICompetenceComparisonCustom1 : DXTestControl
    {
        
        public UICompetenceComparisonCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CompetenceComparisonView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CompetenceComparisonView";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGcCompetenceComparisTable1 UIGcCompetenceComparisTable
        {
            get
            {
                if ((this.mUIGcCompetenceComparisTable == null))
                {
                    this.mUIGcCompetenceComparisTable = new UIGcCompetenceComparisTable1(this);
                }
                return this.mUIGcCompetenceComparisTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcCompetenceComparisTable1 mUIGcCompetenceComparisTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcCompetenceComparisTable1 : DXGrid
    {
        
        public UIGcCompetenceComparisTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCompetenceComparison";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public DXCell UISPESLEGSpesialistlegCell
        {
            get
            {
                if ((this.mUISPESLEGSpesialistlegCell == null))
                {
                    this.mUISPESLEGSpesialistlegCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISPESLEGSpesialistlegCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCompetenceComparisonGridControlCell[View]gvCompetenceComparison[Row]0[Column]co" +
                        "lCompetenceName";
                    this.mUISPESLEGSpesialistlegCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISPESLEGSpesialistlegCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUISPESLEGSpesialistlegCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUISPESLEGSpesialistlegCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient11 : DXTestControl
    {
        
        public UIViewTabPageClient11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabControlViewHost1ViewTabPage[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIRoleAccountingViewCustom UIRoleAccountingViewCustom
        {
            get
            {
                if ((this.mUIRoleAccountingViewCustom == null))
                {
                    this.mUIRoleAccountingViewCustom = new UIRoleAccountingViewCustom(this);
                }
                return this.mUIRoleAccountingViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIRoleAccountingViewCustom mUIRoleAccountingViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRoleAccountingViewCustom : DXTestControl
    {
        
        public UIRoleAccountingViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RoleAccountingView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RoleAccountingView";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILeCostPlaceLookUpEdit UILeCostPlaceLookUpEdit
        {
            get
            {
                if ((this.mUILeCostPlaceLookUpEdit == null))
                {
                    this.mUILeCostPlaceLookUpEdit = new UILeCostPlaceLookUpEdit(this);
                }
                return this.mUILeCostPlaceLookUpEdit;
            }
        }
        
        public UILeProjectLookUpEdit UILeProjectLookUpEdit
        {
            get
            {
                if ((this.mUILeProjectLookUpEdit == null))
                {
                    this.mUILeProjectLookUpEdit = new UILeProjectLookUpEdit(this);
                }
                return this.mUILeProjectLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private UILeCostPlaceLookUpEdit mUILeCostPlaceLookUpEdit;
        
        private UILeProjectLookUpEdit mUILeProjectLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeCostPlaceLookUpEdit : DXLookUpEdit
    {
        
        public UILeCostPlaceLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "leCostPlace";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchLookUpEdit";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPopupSearchLookUpEdiWindow UIPopupSearchLookUpEdiWindow
        {
            get
            {
                if ((this.mUIPopupSearchLookUpEdiWindow == null))
                {
                    this.mUIPopupSearchLookUpEdiWindow = new UIPopupSearchLookUpEdiWindow(this);
                }
                return this.mUIPopupSearchLookUpEdiWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupSearchLookUpEdiWindow mUIPopupSearchLookUpEdiWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupSearchLookUpEdiWindow : DXWindow
    {
        
        public UIPopupSearchLookUpEdiWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "leCostPlacePopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupSearchLookUpEditForm";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UISearchEditLookUpPopuCustom UISearchEditLookUpPopuCustom
        {
            get
            {
                if ((this.mUISearchEditLookUpPopuCustom == null))
                {
                    this.mUISearchEditLookUpPopuCustom = new UISearchEditLookUpPopuCustom(this);
                }
                return this.mUISearchEditLookUpPopuCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISearchEditLookUpPopuCustom mUISearchEditLookUpPopuCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISearchEditLookUpPopuCustom : DXTestControl
    {
        
        public UISearchEditLookUpPopuCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SearchEditLookUpPopup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchEditLookUpPopup";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILCCustom UILCCustom
        {
            get
            {
                if ((this.mUILCCustom == null))
                {
                    this.mUILCCustom = new UILCCustom(this);
                }
                return this.mUILCCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILCCustom mUILCCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILCCustom : DXTestControl
    {
        
        public UILCCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILcMainLayoutGroup UILcMainLayoutGroup
        {
            get
            {
                if ((this.mUILcMainLayoutGroup == null))
                {
                    this.mUILcMainLayoutGroup = new UILcMainLayoutGroup(this);
                }
                return this.mUILcMainLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainLayoutGroup mUILcMainLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainLayoutGroup : DXBaseLayoutItem
    {
        
        public UILcMainLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILciGridLayoutControlItem UILciGridLayoutControlItem
        {
            get
            {
                if ((this.mUILciGridLayoutControlItem == null))
                {
                    this.mUILciGridLayoutControlItem = new UILciGridLayoutControlItem(this);
                }
                return this.mUILciGridLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILciGridLayoutControlItem mUILciGridLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILciGridLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILciGridLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGridControlTable UIGridControlTable
        {
            get
            {
                if ((this.mUIGridControlTable == null))
                {
                    this.mUIGridControlTable = new UIGridControlTable(this);
                }
                return this.mUIGridControlTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridControlTable mUIGridControlTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridControlTable : DXGrid
    {
        
        public UIGridControlTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciGridGridControl[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public DXCell UIItem4520OperasjonCell
        {
            get
            {
                if ((this.mUIItem4520OperasjonCell == null))
                {
                    this.mUIItem4520OperasjonCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4520OperasjonCell.SearchProperties[DXTestControl.PropertyNames.Name] = "lciGridGridControl[0]GridControlCell[View]searchLookUpEdit1View[Row]33[Column]col" +
                        "DisplayName";
                    this.mUIItem4520OperasjonCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4520OperasjonCell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIItem4520OperasjonCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIItem4520OperasjonCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeProjectLookUpEdit : DXLookUpEdit
    {
        
        public UILeProjectLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "leProject";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchLookUpEdit";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIPopupSearchLookUpEdiWindow1 UIPopupSearchLookUpEdiWindow
        {
            get
            {
                if ((this.mUIPopupSearchLookUpEdiWindow == null))
                {
                    this.mUIPopupSearchLookUpEdiWindow = new UIPopupSearchLookUpEdiWindow1(this);
                }
                return this.mUIPopupSearchLookUpEdiWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupSearchLookUpEdiWindow1 mUIPopupSearchLookUpEdiWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupSearchLookUpEdiWindow1 : DXWindow
    {
        
        public UIPopupSearchLookUpEdiWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "leProjectPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupSearchLookUpEditForm";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UISearchEditLookUpPopuCustom1 UISearchEditLookUpPopuCustom
        {
            get
            {
                if ((this.mUISearchEditLookUpPopuCustom == null))
                {
                    this.mUISearchEditLookUpPopuCustom = new UISearchEditLookUpPopuCustom1(this);
                }
                return this.mUISearchEditLookUpPopuCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISearchEditLookUpPopuCustom1 mUISearchEditLookUpPopuCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISearchEditLookUpPopuCustom1 : DXTestControl
    {
        
        public UISearchEditLookUpPopuCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SearchEditLookUpPopup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SearchEditLookUpPopup";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILCCustom1 UILCCustom
        {
            get
            {
                if ((this.mUILCCustom == null))
                {
                    this.mUILCCustom = new UILCCustom1(this);
                }
                return this.mUILCCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILCCustom1 mUILCCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILCCustom1 : DXTestControl
    {
        
        public UILCCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lc";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILcMainLayoutGroup1 UILcMainLayoutGroup
        {
            get
            {
                if ((this.mUILcMainLayoutGroup == null))
                {
                    this.mUILcMainLayoutGroup = new UILcMainLayoutGroup1(this);
                }
                return this.mUILcMainLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainLayoutGroup1 mUILcMainLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainLayoutGroup1 : DXBaseLayoutItem
    {
        
        public UILcMainLayoutGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UILciGridLayoutControlItem1 UILciGridLayoutControlItem
        {
            get
            {
                if ((this.mUILciGridLayoutControlItem == null))
                {
                    this.mUILciGridLayoutControlItem = new UILciGridLayoutControlItem1(this);
                }
                return this.mUILciGridLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILciGridLayoutControlItem1 mUILciGridLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILciGridLayoutControlItem1 : DXBaseLayoutItem
    {
        
        public UILciGridLayoutControlItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciGrid";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public UIGridControlTable1 UIGridControlTable
        {
            get
            {
                if ((this.mUIGridControlTable == null))
                {
                    this.mUIGridControlTable = new UIGridControlTable1(this);
                }
                return this.mUIGridControlTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGridControlTable1 mUIGridControlTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGridControlTable1 : DXGrid
    {
        
        public UIGridControlTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciGridGridControl[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Oppgavetildeling");
            #endregion
        }
        
        #region Properties
        public DXCell UIP3Prosjekt3Cell
        {
            get
            {
                if ((this.mUIP3Prosjekt3Cell == null))
                {
                    this.mUIP3Prosjekt3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIP3Prosjekt3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "lciGridGridControl[0]GridControlCell[View]gridView1[Row]2[Column]colDisplayName1";
                    this.mUIP3Prosjekt3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIP3Prosjekt3Cell.WindowTitles.Add("Oppgavetildeling");
                    #endregion
                }
                return this.mUIP3Prosjekt3Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIP3Prosjekt3Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOppgavevaktbokvisninWindow : DXWindow
    {
        
        public UIOppgavevaktbokvisninWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Oppgavevaktbokvisning";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Oppgavevaktbokvisning");
            #endregion
        }
        
        #region Properties
        public UIGcSavedViewsClient UIGcSavedViewsClient
        {
            get
            {
                if ((this.mUIGcSavedViewsClient == null))
                {
                    this.mUIGcSavedViewsClient = new UIGcSavedViewsClient(this);
                }
                return this.mUIGcSavedViewsClient;
            }
        }
        
        public UIPcRowSelectionClient UIPcRowSelectionClient
        {
            get
            {
                if ((this.mUIPcRowSelectionClient == null))
                {
                    this.mUIPcRowSelectionClient = new UIPcRowSelectionClient(this);
                }
                return this.mUIPcRowSelectionClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcSavedViewsClient mUIGcSavedViewsClient;
        
        private UIPcRowSelectionClient mUIPcRowSelectionClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcSavedViewsClient : DXTestControl
    {
        
        public UIGcSavedViewsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSavedViews";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Oppgavevaktbokvisning");
            #endregion
        }
        
        #region Properties
        public DXComboBox UICbSavedViewsComboBox
        {
            get
            {
                if ((this.mUICbSavedViewsComboBox == null))
                {
                    this.mUICbSavedViewsComboBox = new DXComboBox(this);
                    #region Search Criteria
                    this.mUICbSavedViewsComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "cbSavedViews";
                    this.mUICbSavedViewsComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSComboBoxEdit";
                    #endregion
                }
                return this.mUICbSavedViewsComboBox;
            }
        }
        
        public DXButton UISlettButton
        {
            get
            {
                if ((this.mUISlettButton == null))
                {
                    this.mUISlettButton = new DXButton(this);
                    #region Search Criteria
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnDeleteView";
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUISlettButton.WindowTitles.Add("Oppgavevaktbokvisning");
                    #endregion
                }
                return this.mUISlettButton;
            }
        }
        
        public DXButton UILagresomButton
        {
            get
            {
                if ((this.mUILagresomButton == null))
                {
                    this.mUILagresomButton = new DXButton(this);
                    #region Search Criteria
                    this.mUILagresomButton.SearchProperties[DXTestControl.PropertyNames.Name] = "ddbSaveViewAs";
                    this.mUILagresomButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSDropDownButton";
                    this.mUILagresomButton.WindowTitles.Add("Oppgavevaktbokvisning");
                    #endregion
                }
                return this.mUILagresomButton;
            }
        }
        #endregion
        
        #region Fields
        private DXComboBox mUICbSavedViewsComboBox;
        
        private DXButton mUISlettButton;
        
        private DXButton mUILagresomButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcRowSelectionClient : DXTestControl
    {
        
        public UIPcRowSelectionClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcRowSelection";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Oppgavevaktbokvisning");
            #endregion
        }
        
        #region Properties
        public UIGcColorFilterClient UIGcColorFilterClient
        {
            get
            {
                if ((this.mUIGcColorFilterClient == null))
                {
                    this.mUIGcColorFilterClient = new UIGcColorFilterClient(this);
                }
                return this.mUIGcColorFilterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcColorFilterClient mUIGcColorFilterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcColorFilterClient : DXTestControl
    {
        
        public UIGcColorFilterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcColorFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.WindowTitles.Add("Oppgavevaktbokvisning");
            #endregion
        }
        
        #region Properties
        public DXCheckedListBox UIClbColorFilterCheckedListBox
        {
            get
            {
                if ((this.mUIClbColorFilterCheckedListBox == null))
                {
                    this.mUIClbColorFilterCheckedListBox = new DXCheckedListBox(this);
                    #region Search Criteria
                    this.mUIClbColorFilterCheckedListBox.SearchProperties[DXTestControl.PropertyNames.Name] = "clbColorFilter";
                    this.mUIClbColorFilterCheckedListBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSCheckedListBoxControl";
                    this.mUIClbColorFilterCheckedListBox.WindowTitles.Add("Oppgavevaktbokvisning");
                    #endregion
                }
                return this.mUIClbColorFilterCheckedListBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckedListBox mUIClbColorFilterCheckedListBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDAY4011InformasjonWindow : DXWindow
    {
        
        public UIDAY4011InformasjonWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "DAY-4011 - Informasjon";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("DAY-4011 - Informasjon");
            #endregion
        }
        
        #region Properties
        public DXButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btYes";
                    this.mUIJAButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSimpleButton";
                    this.mUIJAButton.WindowTitles.Add("DAY-4011 - Informasjon");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Kun en kan ha denne oppgaven!!. ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIKunenkanhadenneoppgaToolTip
        {
            get
            {
                if ((this.mUIKunenkanhadenneoppgaToolTip == null))
                {
                    this.mUIKunenkanhadenneoppgaToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIKunenkanhadenneoppgaToolTip.SearchProperties[WinControl.PropertyNames.Name] = "Kun en kan ha denne oppgaven!!. ";
                    #endregion
                }
                return this.mUIKunenkanhadenneoppgaToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIKunenkanhadenneoppgaToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Hei! Er du virkelig spesialist eller??. Ingen andre oppgaver samtidig med denne!!" +
                ". ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIHeiErduvirkeligspesiToolTip
        {
            get
            {
                if ((this.mUIHeiErduvirkeligspesiToolTip == null))
                {
                    this.mUIHeiErduvirkeligspesiToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIHeiErduvirkeligspesiToolTip.SearchProperties[WinControl.PropertyNames.Name] = "Hei! Er du virkelig spesialist eller??. Ingen andre oppgaver samtidig med denne!!" +
                        ". ";
                    #endregion
                }
                return this.mUIHeiErduvirkeligspesiToolTip;
            }
        }
        
        public WinToolTip UIOppgave0810overlappeToolTip
        {
            get
            {
                if ((this.mUIOppgave0810overlappeToolTip == null))
                {
                    this.mUIOppgave0810overlappeToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIOppgave0810overlappeToolTip.SearchProperties[WinControl.PropertyNames.Name] = "Oppgave 08-10 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL " +
                        "KAN IKKE. ";
                    #endregion
                }
                return this.mUIOppgave0810overlappeToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIHeiErduvirkeligspesiToolTip;
        
        private WinToolTip mUIOppgave0810overlappeToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Oppgave 10-12 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL " +
                "KAN IKKE. ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIOppgave1012overlappeToolTip
        {
            get
            {
                if ((this.mUIOppgave1012overlappeToolTip == null))
                {
                    this.mUIOppgave1012overlappeToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIOppgave1012overlappeToolTip.SearchProperties[WinControl.PropertyNames.Name] = "Oppgave 10-12 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL " +
                        "KAN IKKE. ";
                    #endregion
                }
                return this.mUIOppgave1012overlappeToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIOppgave1012overlappeToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Oppgave 12-16 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL " +
                "KAN IKKE. ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIOppgave1216overlappeToolTip
        {
            get
            {
                if ((this.mUIOppgave1216overlappeToolTip == null))
                {
                    this.mUIOppgave1216overlappeToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIOppgave1216overlappeToolTip.SearchProperties[WinControl.PropertyNames.Name] = "Oppgave 12-16 overlapper med allerede tildelt eksklusiv oppgave KOMP KREVD/EKSKL " +
                        "KAN IKKE. ";
                    #endregion
                }
                return this.mUIOppgave1216overlappeToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIOppgave1216overlappeToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow8 : WinWindow
    {
        
        public UIItemWindow8()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ansatt mangler følgende ønsket kompetanse for å dekke oppgave KOMP ØNSKET/EKSKL B" +
                "ØR IKKE: STLEG. Ikke lurt å ha flere oppgaver sammen med denne!!. ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIAnsattmanglerfølgendToolTip
        {
            get
            {
                if ((this.mUIAnsattmanglerfølgendToolTip == null))
                {
                    this.mUIAnsattmanglerfølgendToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIAnsattmanglerfølgendToolTip.SearchProperties[WinControl.PropertyNames.Name] = "Ansatt mangler følgende ønsket kompetanse for å dekke oppgave KOMP ØNSKET/EKSKL B" +
                        "ØR IKKE: STLEG. Ikke lurt å ha flere oppgaver sammen med denne!!. ";
                    #endregion
                }
                return this.mUIAnsattmanglerfølgendToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIAnsattmanglerfølgendToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow9 : WinWindow
    {
        
        public UIItemWindow9()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Oppgave 08-10 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKE" +
                "T/EKSKL BØR IKKE. ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIOppgave0810overlappeToolTip
        {
            get
            {
                if ((this.mUIOppgave0810overlappeToolTip == null))
                {
                    this.mUIOppgave0810overlappeToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIOppgave0810overlappeToolTip.SearchProperties[WinControl.PropertyNames.Name] = "Oppgave 08-10 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKE" +
                        "T/EKSKL BØR IKKE. ";
                    #endregion
                }
                return this.mUIOppgave0810overlappeToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIOppgave0810overlappeToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow10 : WinWindow
    {
        
        public UIItemWindow10()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Oppgave 10-12 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKE" +
                "T/EKSKL BØR IKKE. ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIOppgave1012overlappeToolTip
        {
            get
            {
                if ((this.mUIOppgave1012overlappeToolTip == null))
                {
                    this.mUIOppgave1012overlappeToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIOppgave1012overlappeToolTip.SearchProperties[WinControl.PropertyNames.Name] = "Oppgave 10-12 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKE" +
                        "T/EKSKL BØR IKKE. ";
                    #endregion
                }
                return this.mUIOppgave1012overlappeToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIOppgave1012overlappeToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Oppgave 12-16 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKE" +
                "T/EKSKL BØR IKKE. ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIOppgave1216overlappeToolTip
        {
            get
            {
                if ((this.mUIOppgave1216overlappeToolTip == null))
                {
                    this.mUIOppgave1216overlappeToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIOppgave1216overlappeToolTip.SearchProperties[WinControl.PropertyNames.Name] = "Oppgave 12-16 overlapper med allerede tildelt delvis eksklusiv oppgave KOMP ØNSKE" +
                        "T/EKSKL BØR IKKE. ";
                    #endregion
                }
                return this.mUIOppgave1216overlappeToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIOppgave1216overlappeToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            #endregion
        }
        
        #region Properties
        public UIPopupMenuBarControlMenu1 UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu1(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupMenuBarControlMenu1 mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu1 : DXMenu
    {
        
        public UIPopupMenuBarControlMenu1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public UITildelefraDispMenuItem UITildelefraDispMenuItem
        {
            get
            {
                if ((this.mUITildelefraDispMenuItem == null))
                {
                    this.mUITildelefraDispMenuItem = new UITildelefraDispMenuItem(this);
                }
                return this.mUITildelefraDispMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UITildelefraDispMenuItem mUITildelefraDispMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITildelefraDispMenuItem : DXMenuItem
    {
        
        public UITildelefraDispMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "BarSubItemLink[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuItem";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIBarButtonItemLink0MenuBaseButtonItem
        {
            get
            {
                if ((this.mUIBarButtonItemLink0MenuBaseButtonItem == null))
                {
                    this.mUIBarButtonItemLink0MenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIBarButtonItemLink0MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[0]";
                    this.mUIBarButtonItemLink0MenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIBarButtonItemLink0MenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIBarButtonItemLink0MenuBaseButtonItem;
        #endregion
    }
}
