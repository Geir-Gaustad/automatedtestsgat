// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace _020_Test_Arbeidsplan_Filter_og_Visning_GATP_750
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using DevExpress.CodedUIExtension.DXTestControls.v19_2;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddEmpsToNewFilterStep14 - Use 'AddEmpsToNewFilterStep14Params' to pass parameters into this method.
        /// </summary>
        public void AddEmpsToNewFilterStep14()
        {
            #region Variable Declarations
            DXCheckBox uICeIncludeEmployeesEnCheckBox = this.UILeggtilansattWindow.UIPnlContentsClient.UIPnlEmploymentSelectiClient.UICeIncludeEmployeesEnCheckBox;
            DXCell uIFalkHannaCell = this.UILeggtilansattWindow.UIPnlContentsClient.UIGcSelectEmploymentsTable.UIFalkHannaCell;
            DXCell uIHalfarssonCalleCell = this.UILeggtilansattWindow.UIPnlContentsClient.UIGcSelectEmploymentsTable.UIHalfarssonCalleCell;
            DXCell uIIngemarsdotterIdaCell = this.UILeggtilansattWindow.UIPnlContentsClient.UIGcSelectEmploymentsTable.UIIngemarsdotterIdaCell;
            #endregion

            // Select 'ceIncludeEmployeesEnded' check box
            uICeIncludeEmployeesEnCheckBox.Checked = this.AddEmpsToNewFilterStep14Params.UICeIncludeEmployeesEnCheckBoxChecked;

            // Click 'Falk, Hanna' cell
            Mouse.Click(uIFalkHannaCell, new Point(76, 8));

            // Click 'Halfarsson, Calle' cell while pressing Control
            Mouse.Click(uIHalfarssonCalleCell, MouseButtons.Left, ModifierKeys.Control, new Point(67, 8));

            // Click 'Ingemarsdotter, Ida' cell while pressing Control
            Mouse.Click(uIIngemarsdotterIdaCell, MouseButtons.Left, ModifierKeys.Control, new Point(60, 8));
        }
        
        /// <summary>
        /// AddEmpsToNewFilterStep22 - Use 'AddEmpsToNewFilterStep22Params' to pass parameters into this method.
        /// </summary>
        public void AddEmpsToNewFilterStep22()
        {
            #region Variable Declarations
            DXCell uIPettersenPetraCell = this.UILeggtilansattWindow.UIPnlContentsClient.UIGcSelectEmploymentsTable.UIPettersenPetraCell;
            DXGrid uIGcSelectEmploymentsTable = this.UILeggtilansattWindow.UIPnlContentsClient.UIGcSelectEmploymentsTable;
            #endregion

            // Click 'Pettersen, Petra' cell
            Mouse.Click(uIPettersenPetraCell, new Point(47, 11));

            // Type 'Shift + {Down}' in 'gcSelectEmployments' table
            Keyboard.SendKeys(uIGcSelectEmploymentsTable, this.AddEmpsToNewFilterStep22Params.UIGcSelectEmploymentsTableSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'gcSelectEmployments' table
            Keyboard.SendKeys(uIGcSelectEmploymentsTable, this.AddEmpsToNewFilterStep22Params.UIGcSelectEmploymentsTableSendKeys1, ModifierKeys.Shift);
        }
        
        /// <summary>
        /// AddEmpsToNewFilterStep45
        /// </summary>
        public void AddEmpsToNewFilterStep45()
        {
            #region Variable Declarations
            DXCell uIElofssonPerCell = this.UILeggtilansattWindow.UIPnlContentsClient.UIGcSelectEmploymentsTable.UIElofssonPerCell;
            DXCell uIHalfarssonCalleCell = this.UILeggtilansattWindow.UIPnlContentsClient.UIGcSelectEmploymentsTable.UIHalfarssonCalleCell;
            DXCell uIJonssonNiklasCell = this.UILeggtilansattWindow.UIPnlContentsClient.UIGcSelectEmploymentsTable.UIJonssonNiklasCell;
            #endregion

            // Click 'Elofsson, Per' cell
            Mouse.Click(uIElofssonPerCell, new Point(43, 7));

            // Click 'Halfarsson, Calle' cell while pressing Control
            Mouse.Click(uIHalfarssonCalleCell, MouseButtons.Left, ModifierKeys.Control, new Point(30, 8));

            // Click 'Jonsson, Niklas' cell while pressing Control
            Mouse.Click(uIJonssonNiklasCell, MouseButtons.Left, ModifierKeys.Control, new Point(40, 9));
        }
        
        /// <summary>
        /// AddJohnssonToNewFilterStep15
        /// </summary>
        public void AddJohnssonToNewFilterStep15()
        {
            #region Variable Declarations
            DXCell uIJonssonNiklasCell = this.UILeggtilansattWindow.UIPnlContentsClient.UIGcSelectEmploymentsTable.UIJonssonNiklasCell;
            #endregion

            // Click 'Jonsson, Niklas' cell while pressing Control
            Mouse.Click(uIJonssonNiklasCell, MouseButtons.Left, ModifierKeys.Control, new Point(65, 10));
        }
        
        /// <summary>
        /// Check100PercentEmploymentInListStep28 - Use 'Check100PercentEmploymentInListStep28ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Check100PercentEmploymentInListStep28()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBurmanJensCell;
            DXCell uIElofssonPerCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIElofssonPerCell;
            DXCell uIFalkHannaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFalkHannaCell;
            DXCell uIFredrikssonMathiasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFredrikssonMathiasCell;
            DXCell uIHaagAnnaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIHaagAnnaCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.Check100PercentEmploymentInListStep28ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Elofsson, Per'
            Assert.AreEqual(this.Check100PercentEmploymentInListStep28ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Fredriksson, Mathias'
            Assert.AreEqual(this.Check100PercentEmploymentInListStep28ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.Check100PercentEmploymentInListStep28ExpectedValues.UIElofssonPerCellText, uIElofssonPerCell.Text);

            // Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Pettersen, Petra'
            Assert.AreEqual(this.Check100PercentEmploymentInListStep28ExpectedValues.UIFalkHannaCellText, uIFalkHannaCell.Text);

            // Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Rosenquist, Ruth'
            Assert.AreEqual(this.Check100PercentEmploymentInListStep28ExpectedValues.UIFredrikssonMathiasCellText, uIFredrikssonMathiasCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Svendsen, Svein'
            Assert.AreEqual(this.Check100PercentEmploymentInListStep28ExpectedValues.UIHaagAnnaCellText, uIHaagAnnaCell.Text);
        }
        
        /// <summary>
        /// CheckAllEmpsInAveragingList - Use 'CheckAllEmpsInAveragingListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAllEmpsInAveragingList()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIBurmanJensCell;
            DXCell uIElofssonPerCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIElofssonPerCell;
            DXCell uIFalkHannaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIFalkHannaCell;
            DXCell uIFredrikssonMathiasCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIFredrikssonMathiasCell;
            DXCell uIHaagAnnaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIHaagAnnaCell;
            DXCell uIHalfarssonCalleCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIHalfarssonCalleCell;
            DXCell uIHellnerMarcusCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIHellnerMarcusCell;
            DXCell uIIngemarsdotterIdaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIIngemarsdotterIdaCell;
            DXCell uIJönssonEmilCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIJönssonEmilCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckAllEmpsInAveragingListExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
            Assert.AreEqual(this.CheckAllEmpsInAveragingListExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
            Assert.AreEqual(this.CheckAllEmpsInAveragingListExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
            Assert.AreEqual(this.CheckAllEmpsInAveragingListExpectedValues.UIElofssonPerCellText, uIElofssonPerCell.Text);

            // Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Falk, Hanna'
            Assert.AreEqual(this.CheckAllEmpsInAveragingListExpectedValues.UIFalkHannaCellText, uIFalkHannaCell.Text);

            // Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
            Assert.AreEqual(this.CheckAllEmpsInAveragingListExpectedValues.UIFredrikssonMathiasCellText, uIFredrikssonMathiasCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
            Assert.AreEqual(this.CheckAllEmpsInAveragingListExpectedValues.UIHaagAnnaCellText, uIHaagAnnaCell.Text);

            // Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckAllEmpsInAveragingListExpectedValues.UIHalfarssonCalleCellText, uIHalfarssonCalleCell.Text);

            // Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
            Assert.AreEqual(this.CheckAllEmpsInAveragingListExpectedValues.UIHellnerMarcusCellText, uIHellnerMarcusCell.Text);

            // Verify that the 'Text' property of 'Ingemarsdotter, Ida' cell equals 'Ingemarsdotter, Ida'
            Assert.AreEqual(this.CheckAllEmpsInAveragingListExpectedValues.UIIngemarsdotterIdaCellText, uIIngemarsdotterIdaCell.Text);

            // Verify that the 'Text' property of 'Jönsson, Emil' cell equals 'Jönsson, Emil'
            Assert.AreEqual(this.CheckAllEmpsInAveragingListExpectedValues.UIJönssonEmilCellText, uIJönssonEmilCell.Text);
        }
        
        /// <summary>
        /// CheckAllEmpsInCalendarPlan - Use 'CheckAllEmpsInCalendarPlanExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAllEmpsInCalendarPlan()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBurmanJensCell;
            DXCell uIElofssonPerCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIElofssonPerCell;
            DXCell uIFalkHannaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFalkHannaCell;
            DXCell uIFredrikssonMathiasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFredrikssonMathiasCell;
            DXCell uIHaagAnnaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIHaagAnnaCell;
            DXCell uIHalfarssonCalleCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIHalfarssonCalleCell;
            DXCell uIHellnerMarcusCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIHellnerMarcusCell;
            DXCell uIIngemarsdotterIdaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIIngemarsdotterIdaCell;
            DXCell uIPettersenPetraCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIPettersenPetraCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanExpectedValues.UIElofssonPerCellText, uIElofssonPerCell.Text);

            // Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Falk, Hanna'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanExpectedValues.UIFalkHannaCellText, uIFalkHannaCell.Text);

            // Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanExpectedValues.UIFredrikssonMathiasCellText, uIFredrikssonMathiasCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanExpectedValues.UIHaagAnnaCellText, uIHaagAnnaCell.Text);

            // Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanExpectedValues.UIHalfarssonCalleCellText, uIHalfarssonCalleCell.Text);

            // Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanExpectedValues.UIHellnerMarcusCellText, uIHellnerMarcusCell.Text);

            // Verify that the 'Text' property of 'Ingemarsdotter, Ida' cell equals 'Ingemarsdotter, Ida'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanExpectedValues.UIIngemarsdotterIdaCellText, uIIngemarsdotterIdaCell.Text);

            // Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Jönsson, Emil'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanExpectedValues.UIPettersenPetraCellText, uIPettersenPetraCell.Text);
        }
        
        /// <summary>
        /// CheckAllEmpsInCalendarPlanstep45 - Use 'CheckAllEmpsInCalendarPlanstep45ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAllEmpsInCalendarPlanstep45()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBurmanJensCell;
            DXCell uIItem14Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem14Cell;
            DXCell uIItem13Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem13Cell;
            DXCell uIItem14Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem14Cell1;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Elofsson, Per'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanstep45ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanstep45ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Jönsson, Emil'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanstep45ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of '14' cell equals '4'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanstep45ExpectedValues.UIItem14CellText, uIItem14Cell.Text);

            // Verify that the 'Text' property of '13' cell equals '8'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanstep45ExpectedValues.UIItem13CellText, uIItem13Cell.Text);

            // Verify that the 'Text' property of '14' cell equals '11'
            Assert.AreEqual(this.CheckAllEmpsInCalendarPlanstep45ExpectedValues.UIItem14Cell1Text, uIItem14Cell1.Text);
        }
        
        /// <summary>
        /// CheckEmpFilterButtonsDisabledStep12 - Use 'CheckEmpFilterButtonsDisabledStep12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpFilterButtonsDisabledStep12()
        {
            #region Variable Declarations
            DXCheckBox uICeShareInGatCheckBox = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIPanelControl1Client.UICeShareInGatCheckBox;
            DXCheckBox uICeShareInMyGatCheckBox = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIPanelControl1Client.UICeShareInMyGatCheckBox;
            DXButton uILagreButton = this.UIAnsattfilterWindow.UILagreButton;
            DXButton uISlettButton = this.UIAnsattfilterWindow.UISlettButton;
            DXButton uIFjernButton = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIFjernButton;
            DXButton uILeggtilButton = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UILeggtilButton;
            #endregion

            // Verify that the 'Enabled' property of 'ceShareInGat' check box equals 'False'
            Assert.AreEqual(this.CheckEmpFilterButtonsDisabledStep12ExpectedValues.UICeShareInGatCheckBoxEnabled, uICeShareInGatCheckBox.Enabled);

            // Verify that the 'Enabled' property of 'ceShareInMyGat' check box equals 'False'
            Assert.AreEqual(this.CheckEmpFilterButtonsDisabledStep12ExpectedValues.UICeShareInMyGatCheckBoxEnabled, uICeShareInMyGatCheckBox.Enabled);

            // Verify that the 'Enabled' property of 'Lagre' button equals 'False'
            Assert.AreEqual(this.CheckEmpFilterButtonsDisabledStep12ExpectedValues.UILagreButtonEnabled, uILagreButton.Enabled);

            // Verify that the 'Enabled' property of 'Slett' button equals 'False'
            Assert.AreEqual(this.CheckEmpFilterButtonsDisabledStep12ExpectedValues.UISlettButtonEnabled, uISlettButton.Enabled);

            // Verify that the 'Enabled' property of 'Fjern' button equals 'False'
            Assert.AreEqual(this.CheckEmpFilterButtonsDisabledStep12ExpectedValues.UIFjernButtonEnabled, uIFjernButton.Enabled);

            // Verify that the 'Enabled' property of 'Legg til' button equals 'False'
            Assert.AreEqual(this.CheckEmpFilterButtonsDisabledStep12ExpectedValues.UILeggtilButtonEnabled, uILeggtilButton.Enabled);
        }
        
        /// <summary>
        /// CheckEmpFilterEnabledStep10 - Use 'CheckEmpFilterEnabledStep10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpFilterEnabledStep10()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIPåAvRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgEmployeeFilterFilRibbonPageGroup.UIPåAvRibbonBaseButtonItem;
            #endregion

            // Verify that the 'Enabled' property of 'På/Av' RibbonBaseButtonItem equals 'true'
            Assert.AreEqual(this.CheckEmpFilterEnabledStep10ExpectedValues.UIPåAvRibbonBaseButtonItemEnabled, uIPåAvRibbonBaseButtonItem.Enabled);
        }
        
        /// <summary>
        /// CheckEmpFilterExistsStep11 - Use 'CheckEmpFilterExistsStep11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpFilterExistsStep11()
        {
            #region Variable Declarations
            DXTestControl uIBLÅGRUPPEGalleryItem = this.UIItemWindow.UIGalleryDropDownBarCoMenu.UIDeltefilterGalleryItemGroup.UIBLÅGRUPPEGalleryItem;
            #endregion

            // Verify that the 'Text' property of 'BLÅ GRUPPE' GalleryItem equals 'BLÅ GRUPPE'
            Assert.AreEqual(this.CheckEmpFilterExistsStep11ExpectedValues.UIBLÅGRUPPEGalleryItemText, uIBLÅGRUPPEGalleryItem.Text);
        }
        
        /// <summary>
        /// CheckEmpFilterSelectFilterStatusStep13 - Use 'CheckEmpFilterSelectFilterStatusStep13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpFilterSelectFilterStatusStep13()
        {
            #region Variable Declarations
            DXLookUpEdit uIGleSavedFiltersLookUpEdit = this.UIAnsattfilterWindow.UIGleSavedFiltersLookUpEdit;
            #endregion

            // Verify that the 'Text' property of 'gleSavedFilters' LookUpEdit equals '-Nytt filter-'
            Assert.AreEqual(this.CheckEmpFilterSelectFilterStatusStep13ExpectedValues.UIGleSavedFiltersLookUpEditText, uIGleSavedFiltersLookUpEdit.Text);
        }
        
        /// <summary>
        /// CheckEmployeeList - Use 'CheckEmployeeListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeeList()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBurmanJensCell;
            DXCell uIElofssonPerCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIElofssonPerCell;
            DXCell uIFalkHannaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFalkHannaCell;
            DXCell uIFredrikssonMathiasCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFredrikssonMathiasCell;
            DXCell uIHaagAnnaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIHaagAnnaCell;
            DXCell uIHalfarssonCalleCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIHalfarssonCalleCell;
            DXCell uIHellnerMarcusCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIHellnerMarcusCell;
            DXCell uIIngemarsdotterIdaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIIngemarsdotterIdaCell;
            DXCell uIPettersenPetraCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIPettersenPetraCell;
            DXCell uIRosenquistRuthCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIRosenquistRuthCell;
            DXCell uISvendsenSveinCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UISvendsenSveinCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIBurmanJensCellText1, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIElofssonPerCellText, uIElofssonPerCell.Text);

            // Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Falk, Hanna'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIFalkHannaCellText, uIFalkHannaCell.Text);

            // Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIFredrikssonMathiasCellText, uIFredrikssonMathiasCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIHaagAnnaCellText, uIHaagAnnaCell.Text);

            // Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIHalfarssonCalleCellText, uIHalfarssonCalleCell.Text);

            // Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIHellnerMarcusCellText, uIHellnerMarcusCell.Text);

            // Verify that the 'Text' property of 'Ingemarsdotter, Ida' cell equals 'Ingemarsdotter, Ida'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIIngemarsdotterIdaCellText, uIIngemarsdotterIdaCell.Text);

            // Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Pettersen, Petra'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIPettersenPetraCellText, uIPettersenPetraCell.Text);

            // Verify that the 'Text' property of 'Rosenquist, Ruth' cell equals 'Rosenquist, Ruth'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UIRosenquistRuthCellText, uIRosenquistRuthCell.Text);

            // Verify that the 'Text' property of 'Svendsen, Svein' cell equals 'Svendsen, Svein'
            Assert.AreEqual(this.CheckEmployeeListExpectedValues.UISvendsenSveinCellText, uISvendsenSveinCell.Text);
        }
        
        /// <summary>
        /// CheckEmployeeListStep30 - Use 'CheckEmployeeListStep30ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeeListStep30()
        {
            #region Variable Declarations
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBurmanJensCell;
            DXCell uIGrunnlinjeFilterogViCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGrunnlinjeFilterogViCell3;
            DXCell uIFraplanHjelpeplanforCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFraplanHjelpeplanforCell1;
            DXCell uIFraplanOverlappendepCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFraplanOverlappendepCell1;
            DXCell uIFraplanKalenderplanCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFraplanKalenderplanCell2;
            DXCell uIItem1030Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem1030Cell;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell1;
            DXCell uIACell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIACell1;
            DXCell uIItemCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell2;
            DXCell uIItemCell11 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell11;
            DXCell uIItemCell12 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell12;
            DXCell uIItemCell13 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell13;
            DXCell uISvendsenSveinCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UISvendsenSveinCell1;
            DXCell uIItem1030Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem1030Cell2;
            DXCell uIItem1030Cell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem1030Cell3;
            DXCell uIFraplanOverlappplantCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFraplanOverlappplantCell1;
            DXCell uIGrunnlinjeFilterogViCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGrunnlinjeFilterogViCell4;
            DXCell uIF3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIF3Cell;
            DXCell uIHJ1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIHJ1Cell1;
            DXCell uIItemCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell7;
            DXCell uIItem14Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem14Cell1;
            DXCell uIItem14Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem14Cell2;
            #endregion

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Grunnlinje: Filter og Visning 1' cell equals 'Grunnlinje: Filter og Visning 1'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIGrunnlinjeFilterogViCell3Text, uIGrunnlinjeFilterogViCell3.Text);

            // Verify that the 'Text' property of 'Fra plan: Hjelpeplan for Overlappende plan.' cell equals 'Fra plan: Hjelpeplan for Overlappende plan.'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIFraplanHjelpeplanforCell1Text, uIFraplanHjelpeplanforCell1.Text);

            // Verify that the 'Text' property of 'Fra plan: Overlappende plan' cell equals 'Fra plan: Overlappende plan'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIFraplanOverlappendepCell1Text, uIFraplanOverlappendepCell1.Text);

            // Verify that the 'Text' property of 'Fra plan: Kalenderplan' cell equals 'Fra plan: Kalenderplan'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIFraplanKalenderplanCell2Text, uIFraplanKalenderplanCell2.Text);

            // Verify that the 'Text' property of '1030' cell equals '5210'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIItem1030CellText, uIItem1030Cell.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIItemCell1Text, uIItemCell1.Text);

            // Verify that the 'Text' property of 'A' cell equals ''
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIACell1Text, uIACell1.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIItemCell2Text, uIItemCell2.Text);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIItemCell11ValueAsString, uIItemCell11.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIItemCell12ValueAsString, uIItemCell12.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIItemCell13ValueAsString, uIItemCell13.ValueAsString);

            // Verify that the 'Text' property of 'Svendsen, Svein' cell equals 'Svendsen, Svein'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UISvendsenSveinCell1Text, uISvendsenSveinCell1.Text);

            // Verify that the 'Text' property of '1030' cell equals '1030'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIItem1030Cell2Text, uIItem1030Cell2.Text);

            // Verify that the 'Text' property of '1030' cell equals '1030'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIItem1030Cell3Text, uIItem1030Cell3.Text);

            // Verify that the 'Text' property of 'Fra plan: Overlapp plan til Filter og Visning 1 på 5210' cell equals 'Fra plan: Overlapp plan til Filter og Visning 1 på 5210'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIFraplanOverlappplantCell1Text, uIFraplanOverlappplantCell1.Text);

            // Verify that the 'Text' property of 'Grunnlinje: Filter og Visning 1' cell equals 'Grunnlinje: Filter og Visning 1'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIGrunnlinjeFilterogViCell4Text, uIGrunnlinjeFilterogViCell4.Text);

            // Verify that the 'Text' property of 'F3' cell equals 'F3'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIF3CellText, uIF3Cell.Text);

            // Verify that the 'ValueAsString' property of 'HJ1' cell equals 'HJ1'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIHJ1Cell1ValueAsString, uIHJ1Cell1.ValueAsString);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIItemCell7Text, uIItemCell7.Text);

            // Verify that the 'Text' property of '14' cell equals '1'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIItem14Cell1Text, uIItem14Cell1.Text);

            // Verify that the 'Text' property of '14' cell equals '14'
            Assert.AreEqual(this.CheckEmployeeListStep30ExpectedValues.UIItem14Cell2Text, uIItem14Cell2.Text);
        }
        
        /// <summary>
        /// CheckEmployeeListStep31 - Use 'CheckEmployeeListStep31ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeeListStep31()
        {
            #region Variable Declarations
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBurmanJensCell;
            DXCell uIItemCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell1;
            DXCell uIDCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDCell;
            DXCell uIDCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDCell1;
            DXCell uIF1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIF1Cell;
            DXCell uIF1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIF1Cell1;
            DXCell uIGV1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGV1Cell;
            DXCell uIACell8 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIACell8;
            DXCell uIF1Cell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIF1Cell2;
            DXCell uISvendsenSveinCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UISvendsenSveinCell1;
            DXCell uIGV3Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGV3Cell;
            DXCell uIGV3Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGV3Cell1;
            DXCell uIItemCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell7;
            #endregion

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIItemCell1ValueAsString, uIItemCell1.ValueAsString);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIDCellText, uIDCell.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIDCell1Text, uIDCell1.Text);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIF1CellValueAsString, uIF1Cell.ValueAsString);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIF1Cell1Text, uIF1Cell1.Text);

            // Verify that the 'Text' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIGV1CellText, uIGV1Cell.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIACell8Text, uIACell8.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIF1Cell2Text, uIF1Cell2.Text);

            // Verify that the 'Text' property of 'Svendsen, Svein' cell equals 'Svendsen, Svein'
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UISvendsenSveinCell1Text, uISvendsenSveinCell1.Text);

            // Verify that the 'Text' property of 'GV3' cell equals 'GV3'
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIGV3CellText, uIGV3Cell.Text);

            // Verify that the 'Text' property of 'GV3' cell equals 'GV3'
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIGV3Cell1Text, uIGV3Cell1.Text);

            // Verify that the 'Text' property of cell equals ''
            Assert.AreEqual(this.CheckEmployeeListStep31ExpectedValues.UIItemCell7Text, uIItemCell7.Text);
        }
        
        /// <summary>
        /// CheckEmployeesInApprovalList - Use 'CheckEmployeesInApprovalListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeesInApprovalList()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIBurmanJensCell;
            DXCell uIElofssonPerCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIElofssonPerCell;
            DXCell uIFalkHannaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIFalkHannaCell;
            DXCell uIFredrikssonMathiasCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIFredrikssonMathiasCell;
            DXCell uIHaagAnnaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIHaagAnnaCell;
            DXCell uIHalfarssonCalleCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIHalfarssonCalleCell;
            DXCell uIHellnerMarcusCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIHellnerMarcusCell;
            DXCell uIIngemarsdotterIdaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIIngemarsdotterIdaCell;
            DXCell uIPettersenPetraCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIPettersenPetraCell;
            DXCell uIRosenquistRuthCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIRosenquistRuthCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIElofssonPerCellText, uIElofssonPerCell.Text);

            // Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Falk, Hanna'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIFalkHannaCellText, uIFalkHannaCell.Text);

            // Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIFredrikssonMathiasCellText, uIFredrikssonMathiasCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIHaagAnnaCellText, uIHaagAnnaCell.Text);

            // Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIHalfarssonCalleCellText, uIHalfarssonCalleCell.Text);

            // Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIHellnerMarcusCellText, uIHellnerMarcusCell.Text);

            // Verify that the 'Text' property of 'Ingemarsdotter, Ida' cell equals 'Ingemarsdotter, Ida'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIIngemarsdotterIdaCellText, uIIngemarsdotterIdaCell.Text);

            // Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Pettersen, Petra'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIPettersenPetraCellText, uIPettersenPetraCell.Text);

            // Verify that the 'Text' property of 'Rosenquist, Ruth' cell equals 'Rosenquist, Ruth'
            Assert.AreEqual(this.CheckEmployeesInApprovalListExpectedValues.UIRosenquistRuthCellText, uIRosenquistRuthCell.Text);
        }
        
        /// <summary>
        /// CheckEmployeesInApprovalListStep34 - Use 'CheckEmployeesInApprovalListStep34ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeesInApprovalListStep34()
        {
            #region Variable Declarations
            DXCell uIItem12Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItem12Cell;
            DXCell uIItem13Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItem13Cell;
            DXCell uIItem14Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItem14Cell;
            #endregion

            // Verify that the 'Text' property of '12' cell equals '12'
            Assert.AreEqual(this.CheckEmployeesInApprovalListStep34ExpectedValues.UIItem12CellText, uIItem12Cell.Text);

            // Verify that the 'Text' property of '13' cell equals '13'
            Assert.AreEqual(this.CheckEmployeesInApprovalListStep34ExpectedValues.UIItem13CellText, uIItem13Cell.Text);

            // Verify that the 'Text' property of '14' cell equals '14'
            Assert.AreEqual(this.CheckEmployeesInApprovalListStep34ExpectedValues.UIItem14CellText, uIItem14Cell.Text);
        }
        
        /// <summary>
        /// CheckEmployeesInApprovalListStep35 - Use 'CheckEmployeesInApprovalListStep35ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeesInApprovalListStep35()
        {
            #region Variable Declarations
            DXCell uIItem12Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UIItem12Cell;
            DXCell uINSFNorsksykepleierfoCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UINSFNorsksykepleierfoCell;
            DXCell uISSykepleierCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient3.UIApprovalViewCustom.UILcMainCustom.UILayoutControlGroup1LayoutGroup.UILayoutControlItem2LayoutControlItem.UIGcApprovalTable.UISSykepleierCell;
            #endregion

            // Verify that the 'Text' property of '12' cell equals '14'
            Assert.AreEqual(this.CheckEmployeesInApprovalListStep35ExpectedValues.UIItem12CellText, uIItem12Cell.Text);

            // Verify that the 'Text' property of 'NSF - Norsk sykepleierforbund' cell equals 'NSF - Norsk sykepleierforbund'
            Assert.AreEqual(this.CheckEmployeesInApprovalListStep35ExpectedValues.UINSFNorsksykepleierfoCellText, uINSFNorsksykepleierfoCell.Text);

            // Verify that the 'Text' property of 'S - Sykepleier' cell equals 'S - Sykepleier'
            Assert.AreEqual(this.CheckEmployeesInApprovalListStep35ExpectedValues.UISSykepleierCellText, uISSykepleierCell.Text);
        }
        
        /// <summary>
        /// CheckEmployeesInEffecuationWindowStep37 - Use 'CheckEmployeesInEffecuationWindowStep37ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeesInEffecuationWindowStep37()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIAnderssonEbbaCell;
            DXCell uIBurmanJensCell = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIBurmanJensCell;
            DXCell uIHaagAnnaCell = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIHaagAnnaCell;
            DXCell uIHellnerMarcusCell = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIHellnerMarcusCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep37ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep37ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep37ExpectedValues.UIHaagAnnaCellText, uIHaagAnnaCell.Text);

            // Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep37ExpectedValues.UIHellnerMarcusCellText, uIHellnerMarcusCell.Text);
        }
        
        /// <summary>
        /// CheckEmployeesInEffecuationWindowStep48 - Use 'CheckEmployeesInEffecuationWindowStep48ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeesInEffecuationWindowStep48()
        {
            #region Variable Declarations
            DXCell uIIkkevalgtCell = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIIkkevalgtCell;
            DXCell uIIkkevalgtCell1 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIIkkevalgtCell1;
            DXCell uIIkkevalgtCell2 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIIkkevalgtCell2;
            DXCell uIIkkevalgtCell3 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIIkkevalgtCell3;
            DXCell uIAnderssonEbbaCell = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIAnderssonEbbaCell;
            DXCell uIHaagAnnaCell = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIHaagAnnaCell;
            DXCell uIHaagAnnaCell1 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIHaagAnnaCell1;
            DXCell uIHellnerMarcusCell1 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIHellnerMarcusCell1;
            DXCell uIItem0101202411022024Cell = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIItem0101202411022024Cell;
            DXCell uIItem0101202411022024Cell1 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIItem0101202411022024Cell1;
            DXCell uIItem0101202411022024Cell2 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIItem0101202411022024Cell2;
            DXCell uIItem0101202411022024Cell3 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIItem0101202411022024Cell3;
            #endregion

            // Verify that the 'Text' property of 'Ikke valgt' cell equals 'Ikke valgt'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIIkkevalgtCellText, uIIkkevalgtCell.Text);

            // Verify that the 'Text' property of 'Ikke valgt' cell equals 'Ikke valgt'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIIkkevalgtCell1Text, uIIkkevalgtCell1.Text);

            // Verify that the 'Text' property of 'Ikke valgt' cell equals 'Ikke valgt'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIIkkevalgtCell2Text, uIIkkevalgtCell2.Text);

            // Verify that the 'Text' property of 'Ikke valgt' cell equals 'Ikke valgt'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIIkkevalgtCell3Text, uIIkkevalgtCell3.Text);

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Burman, Jens'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIHaagAnnaCellText, uIHaagAnnaCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIHaagAnnaCell1Text, uIHaagAnnaCell1.Text);

            // Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIHellnerMarcusCell1Text, uIHellnerMarcusCell1.Text);

            // Verify that the 'Text' property of '01.01.2024-11.02.2024 - Andersson, Ebba' cell equals '01.01.2024-11.02.2024 - Andersson, Ebba'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIItem0101202411022024CellText, uIItem0101202411022024Cell.Text);

            // Verify that the 'Text' property of '01.01.2024-11.02.2024 - Burman, Jens' cell equals '01.01.2024-11.02.2024 - Burman, Jens'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIItem0101202411022024Cell1Text, uIItem0101202411022024Cell1.Text);

            // Verify that the 'Text' property of '01.01.2024-11.02.2024 - Haag, Anna' cell equals '01.01.2024-11.02.2024 - Haag, Anna'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIItem0101202411022024Cell2Text, uIItem0101202411022024Cell2.Text);

            // Verify that the 'Text' property of '01.01.2024-11.02.2024 - Hellner, Marcus' cell equals '01.01.2024-11.02.2024 - Hellner, Marcus'
            Assert.AreEqual(this.CheckEmployeesInEffecuationWindowStep48ExpectedValues.UIItem0101202411022024Cell3Text, uIItem0101202411022024Cell3.Text);
        }
        
        /// <summary>
        /// CheckEmployeesInPlanStep34 - Use 'CheckEmployeesInPlanStep34ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeesInPlanStep34()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIItem14Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem14Cell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrinkJörgenCell;
            DXCell uIItem13Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem13Cell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBurmanJensCell;
            DXCell uIItem14Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem14Cell1;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Pettersen, Petra'
            Assert.AreEqual(this.CheckEmployeesInPlanStep34ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of '14' cell equals '12'
            Assert.AreEqual(this.CheckEmployeesInPlanStep34ExpectedValues.UIItem14CellText, uIItem14Cell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Rosenquist, Ruth'
            Assert.AreEqual(this.CheckEmployeesInPlanStep34ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of '13' cell equals '13'
            Assert.AreEqual(this.CheckEmployeesInPlanStep34ExpectedValues.UIItem13CellText, uIItem13Cell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Svendsen, Svein'
            Assert.AreEqual(this.CheckEmployeesInPlanStep34ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of '14' cell equals '14'
            Assert.AreEqual(this.CheckEmployeesInPlanStep34ExpectedValues.UIItem14Cell1Text, uIItem14Cell1.Text);
        }
        
        /// <summary>
        /// CheckEmployeesInPlanStep35 - Use 'CheckEmployeesInPlanStep35ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmployeesInPlanStep35()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIItem14Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem14Cell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Svendsen, Svein'
            Assert.AreEqual(this.CheckEmployeesInPlanStep35ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of '14' cell equals '14'
            Assert.AreEqual(this.CheckEmployeesInPlanStep35ExpectedValues.UIItem14CellText, uIItem14Cell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInAbsenceListStep46 - Use 'CheckEmpsInAbsenceListStep46ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInAbsenceListStep46()
        {
            #region Variable Declarations
            DXCell uIJönssonEmilCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient7.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIJönssonEmilCell;
            DXCell uIElofssonPerCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient7.UIAbsenceListViewCustom.UIGcAbsenceListTable.UIElofssonPerCell;
            #endregion

            // Verify that the 'Text' property of 'Jönsson, Emil' cell equals 'Jönsson, Emil'
            Assert.AreEqual(this.CheckEmpsInAbsenceListStep46ExpectedValues.UIJönssonEmilCellText, uIJönssonEmilCell.Text);

            // Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
            Assert.AreEqual(this.CheckEmpsInAbsenceListStep46ExpectedValues.UIElofssonPerCellText, uIElofssonPerCell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInAbsenceListStep47 - Use 'CheckEmpsInAbsenceListStep47ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInAbsenceListStep47()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient7.UIAbsenceListViewCustom.UIGcAbsenceListTable1.UIAnderssonEbbaCell;
            DXCell uIJönssonEmilCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient7.UIAbsenceListViewCustom.UIGcAbsenceListTable1.UIJönssonEmilCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient7.UIAbsenceListViewCustom.UIGcAbsenceListTable1.UIBrinkJörgenCell;
            DXCell uIElofssonPerCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient7.UIAbsenceListViewCustom.UIGcAbsenceListTable1.UIElofssonPerCell;
            DXCell uIHellnerMarcusCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient7.UIAbsenceListViewCustom.UIGcAbsenceListTable1.UIHellnerMarcusCell;
            DXCell uIFredrikssonMathiasCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient7.UIAbsenceListViewCustom.UIGcAbsenceListTable1.UIFredrikssonMathiasCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckEmpsInAbsenceListStep47ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Jönsson, Emil' cell equals 'Jönsson, Emil'
            Assert.AreEqual(this.CheckEmpsInAbsenceListStep47ExpectedValues.UIJönssonEmilCellText, uIJönssonEmilCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
            Assert.AreEqual(this.CheckEmpsInAbsenceListStep47ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
            Assert.AreEqual(this.CheckEmpsInAbsenceListStep47ExpectedValues.UIElofssonPerCellText, uIElofssonPerCell.Text);

            // Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
            Assert.AreEqual(this.CheckEmpsInAbsenceListStep47ExpectedValues.UIHellnerMarcusCellText, uIHellnerMarcusCell.Text);

            // Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
            Assert.AreEqual(this.CheckEmpsInAbsenceListStep47ExpectedValues.UIFredrikssonMathiasCellText, uIFredrikssonMathiasCell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInAveragingListStep40 - Use 'CheckEmpsInAveragingListStep40ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInAveragingListStep40()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient4.UIAverageCalculationViCustom.UIGcAverageCalculationTable.UIBurmanJensCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Falk, Hanna'
            Assert.AreEqual(this.CheckEmpsInAveragingListStep40ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInAveragingListStep40ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Ingemarsdotter, Ida'
            Assert.AreEqual(this.CheckEmpsInAveragingListStep40ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInCalendarPlanStep40 - Use 'CheckEmpsInCalendarPlanStep40ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInCalendarPlanStep40()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBurmanJensCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Falk, Hanna'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep40ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep40ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Ingemarsdotter, Ida'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep40ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInCalendarPlanStep42 - Use 'CheckEmpsInCalendarPlanStep42ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInCalendarPlanStep42()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIItem14Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem14Cell;
            DXCell uIItem1030Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem1030Cell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep42ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of '14' cell equals '8'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep42ExpectedValues.UIItem14CellText, uIItem14Cell.Text);

            // Verify that the 'Text' property of '1030' cell equals '5210'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep42ExpectedValues.UIItem1030CellText, uIItem1030Cell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInCalendarPlanStep43 - Use 'CheckEmpsInCalendarPlanStep43ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInCalendarPlanStep43()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIItem14Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem14Cell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep43ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of '14' cell equals '8'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep43ExpectedValues.UIItem14CellText, uIItem14Cell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInCalendarPlanStep46 - Use 'CheckEmpsInCalendarPlanStep46ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInCalendarPlanStep46()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBurmanJensCell;
            DXCell uIItem14Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem14Cell;
            DXCell uIItem13Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem13Cell;
            DXCell uIItem14Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem14Cell1;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Elofsson, Per'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep46ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep46ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Jönsson, Emil'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep46ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of '14' cell equals '4'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep46ExpectedValues.UIItem14CellText, uIItem14Cell.Text);

            // Verify that the 'Text' property of '13' cell equals '8'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep46ExpectedValues.UIItem13CellText, uIItem13Cell.Text);

            // Verify that the 'Text' property of '14' cell equals '11'
            Assert.AreEqual(this.CheckEmpsInCalendarPlanStep46ExpectedValues.UIItem14Cell1Text, uIItem14Cell1.Text);
        }
        
        /// <summary>
        /// CheckEmpsInCommentListStep41 - Use 'CheckEmpsInCommentListStep41ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInCommentListStep41()
        {
            #region Variable Declarations
            DXGroupRow uIGridControlGroupRowGroupRow = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient5.UIWeekScheduleViewCustom.UIGcCommentsTable.UIGridControlGroupRowGroupRow;
            DXGroupRow uIGridControlGroupRowGroupRow1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient5.UIWeekScheduleViewCustom.UIGcCommentsTable.UIGridControlGroupRowGroupRow1;
            DXGroupRow uIGridControlGroupRowGroupRow2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient5.UIWeekScheduleViewCustom.UIGcCommentsTable.UIGridControlGroupRowGroupRow2;
            #endregion

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Falk, Hanna'
            Assert.AreEqual(this.CheckEmpsInCommentListStep41ExpectedValues.UIGridControlGroupRowGroupRowValueAsString, uIGridControlGroupRowGroupRow.ValueAsString);

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInCommentListStep41ExpectedValues.UIGridControlGroupRowGroupRow1ValueAsString, uIGridControlGroupRowGroupRow1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Ingemarsdotter, Ida'
            Assert.AreEqual(this.CheckEmpsInCommentListStep41ExpectedValues.UIGridControlGroupRowGroupRow2ValueAsString, uIGridControlGroupRowGroupRow2.ValueAsString);
        }
        
        /// <summary>
        /// CheckEmpsInCommentListStep42 - Use 'CheckEmpsInCommentListStep42ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInCommentListStep42()
        {
            #region Variable Declarations
            DXGroupRow uIGridControlGroupRowGroupRow = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient5.UIWeekScheduleViewCustom.UIGcCommentsTable.UIGridControlGroupRowGroupRow;
            DXCell uIJakonkurereiskiselvfCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient5.UIWeekScheduleViewCustom.UIGcCommentsTable.UIJakonkurereiskiselvfCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInCommentListStep42ExpectedValues.UIGridControlGroupRowGroupRowValueAsString, uIGridControlGroupRowGroupRow.ValueAsString);

            // Verify that the 'Text' property of 'Ja, konkurere i ski selvfølgelig' cell equals 'Ja, konkurere i ski selvfølgelig'
            Assert.AreEqual(this.CheckEmpsInCommentListStep42ExpectedValues.UIJakonkurereiskiselvfCellText, uIJakonkurereiskiselvfCell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInCostSimulationStep23 - Use 'CheckEmpsInCostSimulationStep23ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInCostSimulationStep23()
        {
            #region Variable Declarations
            DXCell uIPettersenPetraCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UICostSimulationViewCustom.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIGsNavBarControl1NavBar.UINavBarGroupControlCoScrollableControl.UIGcEmployeeCostsTable.UIPettersenPetraCell;
            DXCell uIRosenquistRuthCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UICostSimulationViewCustom.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIGsNavBarControl1NavBar.UINavBarGroupControlCoScrollableControl.UIGcEmployeeCostsTable.UIRosenquistRuthCell;
            DXCell uISvendsenSveinCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient1.UICostSimulationViewCustom.UIGsSplitContainerContSplitContainerControl.UISplitGroupPanelClient.UIGsNavBarControl1NavBar.UINavBarGroupControlCoScrollableControl.UIGcEmployeeCostsTable.UISvendsenSveinCell;
            #endregion

            // Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Pettersen, Petra'
            Assert.AreEqual(this.CheckEmpsInCostSimulationStep23ExpectedValues.UIPettersenPetraCellText, uIPettersenPetraCell.Text);

            // Verify that the 'Text' property of 'Rosenquist, Ruth' cell equals 'Rosenquist, Ruth'
            Assert.AreEqual(this.CheckEmpsInCostSimulationStep23ExpectedValues.UIRosenquistRuthCellText, uIRosenquistRuthCell.Text);

            // Verify that the 'Text' property of 'Svendsen, Svein' cell equals 'Svendsen, Svein'
            Assert.AreEqual(this.CheckEmpsInCostSimulationStep23ExpectedValues.UISvendsenSveinCellText, uISvendsenSveinCell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInEmployeesVacationBanksListStep43 - Use 'CheckEmpsInEmployeesVacationBanksListStep43ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInEmployeesVacationBanksListStep43()
        {
            #region Variable Declarations
            DXGroupRow uIGridControlGroupRowGroupRow = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIGridControlGroupRowGroupRow;
            DXGroupRow uIGridControlGroupRowGroupRow1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIGridControlGroupRowGroupRow1;
            DXCell uIItem8HalfarssonCalleCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem8HalfarssonCalleCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Ferie - 5 dgr/uke'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep43ExpectedValues.UIGridControlGroupRowGroupRowValueAsString, uIGridControlGroupRowGroupRow.ValueAsString);

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals '2024'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep43ExpectedValues.UIGridControlGroupRowGroupRow1ValueAsString, uIGridControlGroupRowGroupRow1.ValueAsString);

            // Verify that the 'Text' property of '8 - Halfarsson, Calle' cell equals '8 - Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep43ExpectedValues.UIItem8HalfarssonCalleCellText, uIItem8HalfarssonCalleCell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInEmployeesVacationBanksListStep44 - Use 'CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInEmployeesVacationBanksListStep44()
        {
            #region Variable Declarations
            DXCell uIItem8HalfarssonCalleCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem8HalfarssonCalleCell;
            DXCell uIItem2BrinkJörgenCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem2BrinkJörgenCell;
            DXCell uIItem3BurmanJensCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem3BurmanJensCell;
            DXCell uIItem4ElofssonPerCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem4ElofssonPerCell;
            DXCell uIItem5FalkHannaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem5FalkHannaCell;
            DXCell uIItem6FredrikssonMathCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem6FredrikssonMathCell;
            DXCell uIItem7HaagAnnaCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem7HaagAnnaCell;
            DXCell uIItem8HalfarssonCalleCell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem8HalfarssonCalleCell1;
            DXCell uIItem9HellnerMarcusCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem9HellnerMarcusCell;
            DXCell uIItem10IngemarsdotterCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem10IngemarsdotterCell;
            DXCell uIItem11JönssonEmilCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem11JönssonEmilCell;
            #endregion

            // Verify that the 'Text' property of '8 - Halfarsson, Calle' cell equals '1 - Andersson, Ebba'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues.UIItem8HalfarssonCalleCellText, uIItem8HalfarssonCalleCell.Text);

            // Verify that the 'Text' property of '2 - Brink, Jörgen' cell equals '2 - Brink, Jörgen'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues.UIItem2BrinkJörgenCellText, uIItem2BrinkJörgenCell.Text);

            // Verify that the 'Text' property of '3 - Burman, Jens' cell equals '3 - Burman, Jens'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues.UIItem3BurmanJensCellText, uIItem3BurmanJensCell.Text);

            // Verify that the 'Text' property of '4 - Elofsson, Per' cell equals '4 - Elofsson, Per'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues.UIItem4ElofssonPerCellText, uIItem4ElofssonPerCell.Text);

            // Verify that the 'Text' property of '5 - Falk, Hanna' cell equals '5 - Falk, Hanna'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues.UIItem5FalkHannaCellText, uIItem5FalkHannaCell.Text);

            // Verify that the 'Text' property of '6 - Fredriksson, Mathias' cell equals '6 - Fredriksson, Mathias'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues.UIItem6FredrikssonMathCellText, uIItem6FredrikssonMathCell.Text);

            // Verify that the 'Text' property of '7 - Haag, Anna' cell equals '7 - Haag, Anna'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues.UIItem7HaagAnnaCellText, uIItem7HaagAnnaCell.Text);

            // Verify that the 'Text' property of '8 - Halfarsson, Calle' cell equals '8 - Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues.UIItem8HalfarssonCalleCell1Text, uIItem8HalfarssonCalleCell1.Text);

            // Verify that the 'Text' property of '9 - Hellner, Marcus' cell equals '9 - Hellner, Marcus'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues.UIItem9HellnerMarcusCellText, uIItem9HellnerMarcusCell.Text);

            // Verify that the 'Text' property of '10 - Ingemarsdotter, Ida' cell equals '10 - Ingemarsdotter, Ida'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues.UIItem10IngemarsdotterCellText, uIItem10IngemarsdotterCell.Text);

            // Verify that the 'Text' property of '11 - Jönsson, Emil' cell equals '11 - Jönsson, Emil'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues.UIItem11JönssonEmilCellText, uIItem11JönssonEmilCell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInEmployeesVacationBanksListStep45 - Use 'CheckEmpsInEmployeesVacationBanksListStep45ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInEmployeesVacationBanksListStep45()
        {
            #region Variable Declarations
            DXGroupRow uIGridControlGroupRowGroupRow = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIGridControlGroupRowGroupRow;
            DXGroupRow uIGridControlGroupRowGroupRow1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIGridControlGroupRowGroupRow1;
            DXCell uIItem8HalfarssonCalleCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem8HalfarssonCalleCell;
            DXCell uIItem2BrinkJörgenCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem2BrinkJörgenCell;
            DXCell uIItem3BurmanJensCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient6.UIVacationBankViewCustom.UIVhVacationBanksCustom.UIPcViewClient.UIPlannedEmployeesVacaCustom.UIGcPlannedEmployeesVaTable.UIItem3BurmanJensCell;
            #endregion

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Ferie - 5 dgr/uke'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep45ExpectedValues.UIGridControlGroupRowGroupRowValueAsString, uIGridControlGroupRowGroupRow.ValueAsString);

            // Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals '2024'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep45ExpectedValues.UIGridControlGroupRowGroupRow1ValueAsString, uIGridControlGroupRowGroupRow1.ValueAsString);

            // Verify that the 'Text' property of '8 - Halfarsson, Calle' cell equals '4 - Elofsson, Per'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep45ExpectedValues.UIItem8HalfarssonCalleCellText, uIItem8HalfarssonCalleCell.Text);

            // Verify that the 'Text' property of '2 - Brink, Jörgen' cell equals '8 - Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep45ExpectedValues.UIItem2BrinkJörgenCellText, uIItem2BrinkJörgenCell.Text);

            // Verify that the 'Text' property of '3 - Burman, Jens' cell equals '11 - Jönsson, Emil'
            Assert.AreEqual(this.CheckEmpsInEmployeesVacationBanksListStep45ExpectedValues.UIItem3BurmanJensCellText, uIItem3BurmanJensCell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInFilterListStep12 - Use 'CheckEmpsInFilterListStep12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInFilterListStep12()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIGcEmployeesTable.UIAnderssonEbbaCell;
            DXCell uIBurmanJensCell = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIGcEmployeesTable.UIBurmanJensCell;
            DXCell uIHaagAnnaCell = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIGcEmployeesTable.UIHaagAnnaCell;
            DXCell uIHellnerMarcusCell = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIGcEmployeesTable.UIHellnerMarcusCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckEmpsInFilterListStep12ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
            Assert.AreEqual(this.CheckEmpsInFilterListStep12ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
            Assert.AreEqual(this.CheckEmpsInFilterListStep12ExpectedValues.UIHaagAnnaCellText, uIHaagAnnaCell.Text);

            // Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
            Assert.AreEqual(this.CheckEmpsInFilterListStep12ExpectedValues.UIHellnerMarcusCellText, uIHellnerMarcusCell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInRedFilterStep15 - Use 'CheckEmpsInRedFilterStep15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInRedFilterStep15()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIGcEmployeesTable.UIAnderssonEbbaCell;
            DXCell uIBurmanJensCell = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIGcEmployeesTable.UIBurmanJensCell;
            DXCell uIHaagAnnaCell = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIGcEmployeesTable.UIHaagAnnaCell;
            DXCell uIHellnerMarcusCell = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIGcEmployeesTable.UIHellnerMarcusCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Falk, Hanna'
            Assert.AreEqual(this.CheckEmpsInRedFilterStep15ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInRedFilterStep15ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Ingemarsdotter, Ida'
            Assert.AreEqual(this.CheckEmpsInRedFilterStep15ExpectedValues.UIHaagAnnaCellText, uIHaagAnnaCell.Text);

            // Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Jonsson, Niklas'
            Assert.AreEqual(this.CheckEmpsInRedFilterStep15ExpectedValues.UIHellnerMarcusCellText, uIHellnerMarcusCell.Text);
        }
        
        /// <summary>
        /// CheckEmpsInTransfereWindowStep21 - Use 'CheckEmpsInTransfereWindowStep21ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmpsInTransfereWindowStep21()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIBurmanJensCell;
            DXCell uIElofssonPerCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIElofssonPerCell;
            DXCell uIFalkHannaCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIFalkHannaCell;
            DXCell uIFredrikssonMathiasCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIFredrikssonMathiasCell;
            DXCell uIHaagAnnaCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIHaagAnnaCell;
            DXCell uIHalfarssonCalleCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIHalfarssonCalleCell;
            DXCell uIHellnerMarcusCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIHellnerMarcusCell;
            DXCell uIIngemarsdotterIdaCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIIngemarsdotterIdaCell;
            DXCell uIPettersenPetraCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIPettersenPetraCell;
            DXCell uIRosenquistRuthCell = this.UIOverførtilleggWindow.UIGcExportsTable.UIRosenquistRuthCell;
            DXCell uISvendsenSveinCell = this.UIOverførtilleggWindow.UIGcExportsTable.UISvendsenSveinCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIElofssonPerCellText, uIElofssonPerCell.Text);

            // Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Falk, Hanna'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIFalkHannaCellText, uIFalkHannaCell.Text);

            // Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIFredrikssonMathiasCellText, uIFredrikssonMathiasCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIHaagAnnaCellText, uIHaagAnnaCell.Text);

            // Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIHalfarssonCalleCellText, uIHalfarssonCalleCell.Text);

            // Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIHellnerMarcusCellText, uIHellnerMarcusCell.Text);

            // Verify that the 'Text' property of 'Ingemarsdotter, Ida' cell equals 'Ingemarsdotter, Ida'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIIngemarsdotterIdaCellText, uIIngemarsdotterIdaCell.Text);

            // Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Pettersen, Petra'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIPettersenPetraCellText, uIPettersenPetraCell.Text);

            // Verify that the 'Text' property of 'Rosenquist, Ruth' cell equals 'Rosenquist, Ruth'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UIRosenquistRuthCellText, uIRosenquistRuthCell.Text);

            // Verify that the 'Text' property of 'Svendsen, Svein' cell equals 'Svendsen, Svein'
            Assert.AreEqual(this.CheckEmpsInTransfereWindowStep21ExpectedValues.UISvendsenSveinCellText, uISvendsenSveinCell.Text);
        }
        
        /// <summary>
        /// CheckEmptyF3SearchInRosterplanGrid - Use 'CheckEmptyF3SearchInRosterplanGridExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckEmptyF3SearchInRosterplanGrid()
        {
            #region Variable Declarations
            DXMRUEdit uI_TeFindMRUEdit = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UI_LayoutControl1Custom.UILcGroupMainLayoutGroup.UILciFindLayoutControlItem.UI_TeFindMRUEdit;
            #endregion

            // Verify that the 'Text' property of '_TeFind' MRUEdit equals ''
            Assert.AreEqual(this.CheckEmptyF3SearchInRosterplanGridExpectedValues.UI_TeFindMRUEditText, uI_TeFindMRUEdit.Text);
        }
        
        /// <summary>
        /// CheckFilter1030Step22 - Use 'CheckFilter1030Step22ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFilter1030Step22()
        {
            #region Variable Declarations
            DXLookUpEdit uIGleSavedFiltersLookUpEdit = this.UIAnsattfilterWindow.UIGleSavedFiltersLookUpEdit;
            DXCell uIAnderssonEbbaCell = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIGcEmployeesTable.UIAnderssonEbbaCell;
            DXCell uIBurmanJensCell = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIGcEmployeesTable.UIBurmanJensCell;
            DXCell uIHaagAnnaCell = this.UIAnsattfilterWindow.UIPanelControl1Client.UIViewHost1Custom.UIPcViewClient.UIEmployeeFilterEditViCustom.UIGcEmployeesTable.UIHaagAnnaCell;
            #endregion

            // Verify that the 'Text' property of 'gleSavedFilters' LookUpEdit equals '1030'
            Assert.AreEqual(this.CheckFilter1030Step22ExpectedValues.UIGleSavedFiltersLookUpEditText, uIGleSavedFiltersLookUpEdit.Text);

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Pettersen, Petra'
            Assert.AreEqual(this.CheckFilter1030Step22ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Rosenquist, Ruth'
            Assert.AreEqual(this.CheckFilter1030Step22ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Haag, Anna' cell equals 'Svendsen, Svein'
            Assert.AreEqual(this.CheckFilter1030Step22ExpectedValues.UIHaagAnnaCellText, uIHaagAnnaCell.Text);
        }
        
        /// <summary>
        /// CheckFullInfoVisible - Use 'CheckFullInfoVisibleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckFullInfoVisible()
        {
            #region Variable Declarations
            DXColumnHeader uIColumnHandle35ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle35ColumnHeader;
            DXColumnHeader uIColumnHandle1ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle1ColumnHeader;
            DXColumnHeader uIColumnHandle4ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle4ColumnHeader;
            DXColumnHeader uIColumnHandle17ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle17ColumnHeader;
            DXColumnHeader uIColumnHandle5ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle5ColumnHeader;
            DXColumnHeader uIColumnHandle122ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle122ColumnHeader;
            DXColumnHeader uIColumnHandle82ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle82ColumnHeader;
            DXColumnHeader uIColumnHandle142ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle142ColumnHeader;
            DXColumnHeader uIColumnHandle16ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle16ColumnHeader;
            DXColumnHeader uIColumnHandle15ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle15ColumnHeader;
            DXColumnHeader uIColumnHandle11ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle11ColumnHeader;
            DXColumnHeader uIColumnHandle19ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle19ColumnHeader;
            DXColumnHeader uIColumnHandle20ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle20ColumnHeader;
            DXColumnHeader uIColumnHandle26ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle26ColumnHeader;
            DXColumnHeader uIColumnHandle21ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle21ColumnHeader;
            DXColumnHeader uIColumnHandle38ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle38ColumnHeader;
            DXColumnHeader uIColumnHandle29ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle29ColumnHeader;
            DXColumnHeader uIColumnHandle22ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle22ColumnHeader;
            DXColumnHeader uIColumnHandle23ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle23ColumnHeader;
            DXColumnHeader uIColumnHandle30ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle30ColumnHeader;
            #endregion

            // Verify that the 'Visible' property of 'ColumnHandle35' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle35ColumnHeaderVisible, uIColumnHandle35ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle1' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle1ColumnHeaderVisible, uIColumnHandle1ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle4' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle4ColumnHeaderVisible, uIColumnHandle4ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle17' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle17ColumnHeaderVisible, uIColumnHandle17ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle5' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle5ColumnHeaderVisible, uIColumnHandle5ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle12-2' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle122ColumnHeaderVisible, uIColumnHandle122ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle8-2' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle82ColumnHeaderVisible, uIColumnHandle82ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle14-2' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle142ColumnHeaderVisible, uIColumnHandle142ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle16' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle16ColumnHeaderVisible, uIColumnHandle16ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle15' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle15ColumnHeaderVisible, uIColumnHandle15ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle11' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle11ColumnHeaderVisible, uIColumnHandle11ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle19' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle19ColumnHeaderVisible, uIColumnHandle19ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle20' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle20ColumnHeaderVisible, uIColumnHandle20ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle26' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle26ColumnHeaderVisible, uIColumnHandle26ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle21' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle21ColumnHeaderVisible, uIColumnHandle21ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle38' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle38ColumnHeaderVisible, uIColumnHandle38ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle29' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle29ColumnHeaderVisible, uIColumnHandle29ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle22' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle22ColumnHeaderVisible, uIColumnHandle22ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle23' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle23ColumnHeaderVisible, uIColumnHandle23ColumnHeader.Visible);

            // Verify that the 'Visible' property of 'ColumnHandle30' column header equals 'True'
            Assert.AreEqual(this.CheckFullInfoVisibleExpectedValues.UIColumnHandle30ColumnHeaderVisible, uIColumnHandle30ColumnHeader.Visible);
        }
        
        /// <summary>
        /// CheckGroupBlueFilterInEffecuationWindowStep48 - Use 'CheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckGroupBlueFilterInEffecuationWindowStep48()
        {
            #region Variable Declarations
            DXCell uIGruppeBlåCell = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIGruppeBlåCell;
            DXCell uIGruppeBlåCell1 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIGruppeBlåCell1;
            DXCell uIGruppeBlåCell2 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIGruppeBlåCell2;
            DXCell uIGruppeBlåCell3 = this.UIIverksetteWindow.UIPnlResultClient.UIGsGridControlLinesTable.UIGruppeBlåCell3;
            #endregion

            // Verify that the 'Text' property of 'Gruppe Blå' cell equals 'Gruppe Blå'
            Assert.AreEqual(this.CheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues.UIGruppeBlåCellText, uIGruppeBlåCell.Text);

            // Verify that the 'Text' property of 'Gruppe Blå' cell equals 'Gruppe Blå'
            Assert.AreEqual(this.CheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues.UIGruppeBlåCell1Text, uIGruppeBlåCell1.Text);

            // Verify that the 'Text' property of 'Gruppe Blå' cell equals 'Gruppe Blå'
            Assert.AreEqual(this.CheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues.UIGruppeBlåCell2Text, uIGruppeBlåCell2.Text);

            // Verify that the 'Text' property of 'Gruppe Blå' cell equals 'Gruppe Blå'
            Assert.AreEqual(this.CheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues.UIGruppeBlåCell3Text, uIGruppeBlåCell3.Text);
        }
        
        /// <summary>
        /// CheckHellnerVisible - Use 'CheckHellnerVisibleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckHellnerVisible()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Hellner, Marcus'
            Assert.AreEqual(this.CheckHellnerVisibleExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'RowHandle' property of 'Andersson, Ebba' cell equals '0'
            Assert.AreEqual(this.CheckHellnerVisibleExpectedValues.UIAnderssonEbbaCellRowHandle, uIAnderssonEbbaCell.RowHandle);
        }
        
        /// <summary>
        /// CheckJohnssonInListStep14 - Use 'CheckJohnssonInListStep14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckJohnssonInListStep14()
        {
            #region Variable Declarations
            DXCell uIJonssonNiklasCell = this.UILeggtilansattWindow.UIPnlContentsClient.UIGcSelectEmploymentsTable.UIJonssonNiklasCell;
            #endregion

            // Verify that the 'Text' property of 'Jonsson, Niklas' cell equals 'Jonsson, Niklas'
            Assert.AreEqual(this.CheckJohnssonInListStep14ExpectedValues.UIJonssonNiklasCellText, uIJonssonNiklasCell.Text);
        }
        
        /// <summary>
        /// CheckJohnssonInListStep27 - Use 'CheckJohnssonInListStep27ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckJohnssonInListStep27()
        {
            #region Variable Declarations
            DXCell uIPettersenPetraCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIPettersenPetraCell;
            DXCell uIInaktivlinjeCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIInaktivlinjeCell;
            DXCell uINCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UINCell4;
            DXCell uIItemCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell;
            DXCell uINCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UINCell5;
            DXCell uINCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UINCell6;
            #endregion

            // Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Jönsson, Emil'
            Assert.AreEqual(this.CheckJohnssonInListStep27ExpectedValues.UIPettersenPetraCellText, uIPettersenPetraCell.Text);

            // Verify that the 'Text' property of 'Inaktiv linje' cell equals 'Inaktiv linje'
            Assert.AreEqual(this.CheckJohnssonInListStep27ExpectedValues.UIInaktivlinjeCellText, uIInaktivlinjeCell.Text);

            // Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
            Assert.AreEqual(this.CheckJohnssonInListStep27ExpectedValues.UINCell4ValueAsString, uINCell4.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
            Assert.AreEqual(this.CheckJohnssonInListStep27ExpectedValues.UIItemCellValueAsString, uIItemCell.ValueAsString);

            // Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
            Assert.AreEqual(this.CheckJohnssonInListStep27ExpectedValues.UINCell5ValueAsString, uINCell5.ValueAsString);

            // Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
            Assert.AreEqual(this.CheckJohnssonInListStep27ExpectedValues.UINCell6ValueAsString, uINCell6.ValueAsString);
        }
        
        /// <summary>
        /// CheckOnlyAnderssonFTTStep20 - Use 'CheckOnlyAnderssonFTTStep20ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOnlyAnderssonFTTStep20()
        {
            #region Variable Declarations
            DXPivotGridFieldValue uIAnderssonEbbaPivotGridFieldValue = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIAnderssonEbbaPivotGridFieldValue;
            DXPivotGridCell uIItem2PivotGridCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem2PivotGridCell;
            DXPivotGridCell uIItem28PivotGridCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem28PivotGridCell;
            DXPivotGridCell uIItem8PivotGridCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient2.UIFixedPaymentViewCustom.UIFixedPaymentControlCustom.UIViewHost1Custom.UIPcViewClient.UIFixedPaymentControlCustom.UIPgcCalculationResultPivotGrid.UIItem8PivotGridCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' PivotGridFieldValue equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckOnlyAnderssonFTTStep20ExpectedValues.UIAnderssonEbbaPivotGridFieldValueText, uIAnderssonEbbaPivotGridFieldValue.Text);

            // Verify that the 'Text' property of '2' PivotGridCell equals '2'
            Assert.AreEqual(this.CheckOnlyAnderssonFTTStep20ExpectedValues.UIItem2PivotGridCellText, uIItem2PivotGridCell.Text);

            // Verify that the 'Text' property of '28' PivotGridCell equals '28'
            Assert.AreEqual(this.CheckOnlyAnderssonFTTStep20ExpectedValues.UIItem28PivotGridCellText, uIItem28PivotGridCell.Text);

            // Verify that the 'Text' property of '8' PivotGridCell equals '8'
            Assert.AreEqual(this.CheckOnlyAnderssonFTTStep20ExpectedValues.UIItem8PivotGridCellText, uIItem8PivotGridCell.Text);
        }
        
        /// <summary>
        /// CheckOnlyAnderssonLineStep19 - Use 'CheckOnlyAnderssonLineStep19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckOnlyAnderssonLineStep19()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckOnlyAnderssonLineStep19ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);
        }
        
        /// <summary>
        /// CheckPartlyInfoVisible - Use 'CheckPartlyInfoVisibleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckPartlyInfoVisible()
        {
            #region Variable Declarations
            DXColumnHeader uIColumnHandle1ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle1ColumnHeader;
            DXColumnHeader uIColumnHandle4ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle4ColumnHeader;
            DXColumnHeader uIColumnHandle52ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIColumnHandle52ColumnHeader;
            #endregion

            // Verify that the 'Text' property of 'ColumnHandle1' column header equals 'Ansatt'
            Assert.AreEqual(this.CheckPartlyInfoVisibleExpectedValues.UIColumnHandle1ColumnHeaderText, uIColumnHandle1ColumnHeader.Text);

            // Verify that the 'Visible' property of 'ColumnHandle1' column header equals 'True'
            Assert.AreEqual(this.CheckPartlyInfoVisibleExpectedValues.UIColumnHandle1ColumnHeaderVisible, uIColumnHandle1ColumnHeader.Visible);

            // Verify that the 'Text' property of 'ColumnHandle4' column header equals 'Avd.'
            Assert.AreEqual(this.CheckPartlyInfoVisibleExpectedValues.UIColumnHandle4ColumnHeaderText, uIColumnHandle4ColumnHeader.Text);

            // Verify that the 'Visible' property of 'ColumnHandle4' column header equals 'True'
            Assert.AreEqual(this.CheckPartlyInfoVisibleExpectedValues.UIColumnHandle4ColumnHeaderVisible, uIColumnHandle4ColumnHeader.Visible);

            // Verify that the 'Text' property of 'ColumnHandle5-2' column header equals 'Type'
            Assert.AreEqual(this.CheckPartlyInfoVisibleExpectedValues.UIColumnHandle52ColumnHeaderText, uIColumnHandle52ColumnHeader.Text);

            // Verify that the 'Visible' property of 'ColumnHandle5-2' column header equals 'True'
            Assert.AreEqual(this.CheckPartlyInfoVisibleExpectedValues.UIColumnHandle52ColumnHeaderVisible, uIColumnHandle52ColumnHeader.Visible);
        }
        
        /// <summary>
        /// CheckRosterplanEmpsInBlueFilterStep17 - Use 'CheckRosterplanEmpsInBlueFilterStep17ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRosterplanEmpsInBlueFilterStep17()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIPåAvRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgEmployeeFilterFilRibbonPageGroup.UIPåAvRibbonBaseButtonItem;
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBurmanJensCell;
            DXCell uIElofssonPerCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIElofssonPerCell;
            #endregion

            // Verify that the 'Checked' property of 'På/Av' RibbonBaseButtonItem equals 'True'
            Assert.AreEqual(this.CheckRosterplanEmpsInBlueFilterStep17ExpectedValues.UIPåAvRibbonBaseButtonItemChecked, uIPåAvRibbonBaseButtonItem.Checked);

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckRosterplanEmpsInBlueFilterStep17ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Burman, Jens'
            Assert.AreEqual(this.CheckRosterplanEmpsInBlueFilterStep17ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Haag, Anna'
            Assert.AreEqual(this.CheckRosterplanEmpsInBlueFilterStep17ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);

            // Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Hellner, Marcus'
            Assert.AreEqual(this.CheckRosterplanEmpsInBlueFilterStep17ExpectedValues.UIElofssonPerCellText, uIElofssonPerCell.Text);
        }
        
        /// <summary>
        /// CheckRosterplanEmpsInGroupOneFilterStep24 - Use 'CheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRosterplanEmpsInGroupOneFilterStep24()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrinkJörgenCell;
            DXCell uIItem1030Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem1030Cell;
            DXCell uIItem1030Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem1030Cell1;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Rosenquist, Ruth'
            Assert.AreEqual(this.CheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Svendsen, Svein'
            Assert.AreEqual(this.CheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of '1030' cell equals '1030'
            Assert.AreEqual(this.CheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues.UIItem1030CellText, uIItem1030Cell.Text);

            // Verify that the 'Text' property of '1030' cell equals '1030'
            Assert.AreEqual(this.CheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues.UIItem1030Cell1Text, uIItem1030Cell1.Text);
        }
        
        /// <summary>
        /// CheckRosterplanEmpsInRedFilterStep16 - Use 'CheckRosterplanEmpsInRedFilterStep16ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckRosterplanEmpsInRedFilterStep16()
        {
            #region Variable Declarations
            DXCell uIAnderssonEbbaCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIAnderssonEbbaCell;
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrinkJörgenCell;
            DXCell uIBurmanJensCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBurmanJensCell;
            #endregion

            // Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Falk, Hanna'
            Assert.AreEqual(this.CheckRosterplanEmpsInRedFilterStep16ExpectedValues.UIAnderssonEbbaCellText, uIAnderssonEbbaCell.Text);

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckRosterplanEmpsInRedFilterStep16ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of 'Burman, Jens' cell equals 'Ingemarsdotter, Ida'
            Assert.AreEqual(this.CheckRosterplanEmpsInRedFilterStep16ExpectedValues.UIBurmanJensCellText, uIBurmanJensCell.Text);
        }
        
        /// <summary>
        /// CheckSumDemandValuesStep18 - Use 'CheckSumDemandValuesStep18ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckSumDemandValuesStep18()
        {
            #region Variable Declarations
            DXCell uIACell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIACell;
            DXCell uIACell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIACell1;
            DXCell uIGreenbolditalic23Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIGreenbolditalic23Cell;
            DXCell uIGreenbolditalic23Cell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIGreenbolditalic23Cell1;
            DXCell uIACell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIACell2;
            DXCell uINCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UINCell;
            DXCell uIACell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIACell3;
            DXCell uINCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UINCell1;
            DXCell uIBluebolditalic23Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIBluebolditalic23Cell;
            DXCell uIBluebold21Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIBluebold21Cell;
            DXCell uINCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UINCell2;
            DXCell uIDCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDCell;
            DXCell uINCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UINCell3;
            DXCell uIRedbolditalic13Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIRedbolditalic13Cell;
            DXCell uIDCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDCell1;
            DXCell uIGreenbolditalic13Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIGreenbolditalic13Cell;
            DXCell uIACell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIACell4;
            DXCell uIDCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDCell2;
            DXCell uIACell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIACell5;
            DXCell uIBluebolditalic13Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIBluebolditalic13Cell;
            DXCell uIGreenbold22Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIGreenbold22Cell;
            DXCell uIDCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDCell3;
            DXCell uIDCell4 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDCell4;
            DXCell uIGreenbold22Cell1 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIGreenbold22Cell1;
            DXCell uIACell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIACell6;
            DXCell uIF1Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIF1Cell;
            DXCell uIACell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIACell7;
            DXCell uIGreenbold22Cell2 = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIGreenbold22Cell2;
            DXCell uIBluebolditalic10Cell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIBluebolditalic10Cell;
            #endregion

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIACellText, uIACell.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIACell1Text, uIACell1.Text);

            // Verify that the 'Text' property of '{green}{bold}{italic}2/3' cell equals '{green}{bold}{italic}2/3'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIGreenbolditalic23CellText, uIGreenbolditalic23Cell.Text);

            // Verify that the 'Text' property of '{green}{bold}{italic}2/3' cell equals '{green}{bold}{italic}2/3'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIGreenbolditalic23Cell1Text, uIGreenbolditalic23Cell1.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIACell2Text, uIACell2.Text);

            // Verify that the 'Text' property of 'N' cell equals 'N'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UINCellText, uINCell.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIACell3Text, uIACell3.Text);

            // Verify that the 'Text' property of 'N' cell equals 'N'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UINCell1Text, uINCell1.Text);

            // Verify that the 'Text' property of '{blue}{bold}{italic}2/3' cell equals '{blue}{bold}{italic}2/3'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIBluebolditalic23CellText, uIBluebolditalic23Cell.Text);

            // Verify that the 'Text' property of '{blue}{bold}2/1' cell equals '{blue}{bold}2/1'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIBluebold21CellText, uIBluebold21Cell.Text);

            // Verify that the 'Text' property of 'N' cell equals 'N'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UINCell2Text, uINCell2.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIDCellText, uIDCell.Text);

            // Verify that the 'Text' property of 'N' cell equals 'N'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UINCell3Text, uINCell3.Text);

            // Verify that the 'Text' property of '{red}{bold}{italic}1/3' cell equals '{red}{bold}{italic}1/3'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIRedbolditalic13CellText, uIRedbolditalic13Cell.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIDCell1Text, uIDCell1.Text);

            // Verify that the 'Text' property of '{green}{bold}{italic}1/3' cell equals '{green}{bold}{italic}1/3'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIGreenbolditalic13CellText, uIGreenbolditalic13Cell.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIACell4Text, uIACell4.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIDCell2Text, uIDCell2.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIACell5Text, uIACell5.Text);

            // Verify that the 'Text' property of '{blue}{bold}{italic}1/3' cell equals '{blue}{bold}{italic}1/3'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIBluebolditalic13CellText, uIBluebolditalic13Cell.Text);

            // Verify that the 'Text' property of '{green}{bold}2/2' cell equals '{green}{bold}2/2'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIGreenbold22CellText, uIGreenbold22Cell.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIDCell3Text, uIDCell3.Text);

            // Verify that the 'Text' property of 'D' cell equals 'D'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIDCell4Text, uIDCell4.Text);

            // Verify that the 'Text' property of '{green}{bold}2/2' cell equals '{green}{bold}2/2'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIGreenbold22Cell1Text, uIGreenbold22Cell1.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIACell6Text, uIACell6.Text);

            // Verify that the 'Text' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIF1CellText, uIF1Cell.Text);

            // Verify that the 'Text' property of 'A' cell equals 'A'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIACell7Text, uIACell7.Text);

            // Verify that the 'Text' property of '{green}{bold}2/2' cell equals '{green}{bold}2/2'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIGreenbold22Cell2Text, uIGreenbold22Cell2.Text);

            // Verify that the 'Text' property of '{blue}{bold}{italic}1/0' cell equals '{blue}{bold}{italic}1/0'
            Assert.AreEqual(this.CheckSumDemandValuesStep18ExpectedValues.UIBluebolditalic10CellText, uIBluebolditalic10Cell.Text);
        }
        
        /// <summary>
        /// CheckValuesStep50 - Use 'CheckValuesStep50ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValuesStep50()
        {
            #region Variable Declarations
            DXCell uIElofssonPerCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIElofssonPerCell;
            DXCell uIHalfarssonCalleCell = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UICenterPanelDayDockPanel.UIControlContainerCustom.UICenterPanelDayWrappeDockPanel.UIDag00167770770FalseDockPanel.UIControlContainerCustom.UIGcDayColumnTable.UIHalfarssonCalleCell;
            #endregion

            // Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
            Assert.AreEqual(this.CheckValuesStep50ExpectedValues.UIElofssonPerCellText, uIElofssonPerCell.Text);

            // Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
            Assert.AreEqual(this.CheckValuesStep50ExpectedValues.UIHalfarssonCalleCellText, uIHalfarssonCalleCell.Text);
        }
        
        /// <summary>
        /// CheckVisibleDataStep38 - Use 'CheckVisibleDataStep38ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckVisibleDataStep38()
        {
            #region Variable Declarations
            DXCell uIBrinkJörgenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIBrinkJörgenCell;
            DXCell uIItem1030Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem1030Cell;
            DXCell uIItem5210Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem5210Cell;
            DXCell uIDCell5 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDCell5;
            DXCell uIDCell6 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIDCell6;
            DXCell uINCell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UINCell7;
            DXCell uIF1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIF1Cell1;
            DXCell uIGV1Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGV1Cell1;
            DXCell uIItemCell10 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItemCell10;
            DXCell uINCell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UINCell1;
            DXCell uIACell7 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIACell7;
            #endregion

            // Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Andersson, Ebba'
            Assert.AreEqual(this.CheckVisibleDataStep38ExpectedValues.UIBrinkJörgenCellText, uIBrinkJörgenCell.Text);

            // Verify that the 'Text' property of '1030' cell equals '5210'
            Assert.AreEqual(this.CheckVisibleDataStep38ExpectedValues.UIItem1030CellText, uIItem1030Cell.Text);

            // Verify that the 'Text' property of '5210' cell equals '5210'
            Assert.AreEqual(this.CheckVisibleDataStep38ExpectedValues.UIItem5210CellText, uIItem5210Cell.Text);

            // Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D)'
            Assert.AreEqual(this.CheckVisibleDataStep38ExpectedValues.UIDCell5ValueAsString, uIDCell5.ValueAsString);

            // Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D)'
            Assert.AreEqual(this.CheckVisibleDataStep38ExpectedValues.UIDCell6ValueAsString, uIDCell6.ValueAsString);

            // Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N)'
            Assert.AreEqual(this.CheckVisibleDataStep38ExpectedValues.UINCell7ValueAsString, uINCell7.ValueAsString);

            // Verify that the 'ValueAsString' property of 'F1' cell equals 'F1'
            Assert.AreEqual(this.CheckVisibleDataStep38ExpectedValues.UIF1Cell1ValueAsString, uIF1Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of 'GV1' cell equals 'GV1'
            Assert.AreEqual(this.CheckVisibleDataStep38ExpectedValues.UIGV1Cell1ValueAsString, uIGV1Cell1.ValueAsString);

            // Verify that the 'ValueAsString' property of cell equals ''
            Assert.AreEqual(this.CheckVisibleDataStep38ExpectedValues.UIItemCell10ValueAsString, uIItemCell10.ValueAsString);

            // Verify that the 'ValueAsString' property of 'N' cell equals 'A'
            Assert.AreEqual(this.CheckVisibleDataStep38ExpectedValues.UINCell1ValueAsString, uINCell1.ValueAsString);

            // Verify that the 'Text' property of 'A' cell equals 'N'
            Assert.AreEqual(this.CheckVisibleDataStep38ExpectedValues.UIACell7Text, uIACell7.Text);
        }
        
        /// <summary>
        /// CheckVisibleDataTypeStep38 - Use 'CheckVisibleDataTypeStep38ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckVisibleDataTypeStep38()
        {
            #region Variable Declarations
            DXCell uIGrunnlinjeOverlappenCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIGrunnlinjeOverlappenCell;
            DXCell uIFraplanHjelpeplanforCell2 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFraplanHjelpeplanforCell2;
            DXCell uIFraplanKalenderplanCell3 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFraplanKalenderplanCell3;
            DXCell uIFravaktbokCell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIFravaktbokCell;
            #endregion

            // Verify that the 'Text' property of 'Grunnlinje: Overlappende plan' cell equals 'Grunnlinje: Overlappende plan'
            Assert.AreEqual(this.CheckVisibleDataTypeStep38ExpectedValues.UIGrunnlinjeOverlappenCellText, uIGrunnlinjeOverlappenCell.Text);

            // Verify that the 'Text' property of 'Fra plan: Hjelpeplan for Overlappende plan.' cell equals 'Fra plan: Hjelpeplan for Overlappende plan.'
            Assert.AreEqual(this.CheckVisibleDataTypeStep38ExpectedValues.UIFraplanHjelpeplanforCell2Text, uIFraplanHjelpeplanforCell2.Text);

            // Verify that the 'Text' property of 'Fra plan: Kalenderplan' cell equals 'Fra plan: Kalenderplan'
            Assert.AreEqual(this.CheckVisibleDataTypeStep38ExpectedValues.UIFraplanKalenderplanCell3Text, uIFraplanKalenderplanCell3.Text);

            // Verify that the 'Text' property of 'Fra vaktbok' cell equals 'Fra vaktbok'
            Assert.AreEqual(this.CheckVisibleDataTypeStep38ExpectedValues.UIFravaktbokCellText, uIFravaktbokCell.Text);
        }
        
        /// <summary>
        /// CheckWeeksumVisible - Use 'CheckWeeksumVisibleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckWeeksumVisible()
        {
            #region Variable Declarations
            DXColumnHeader uICol_Calc_TotalSum_1ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UICol_Calc_TotalSum_1ColumnHeader;
            DXColumnHeader uICol_Calc_TotalSum_2ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UICol_Calc_TotalSum_2ColumnHeader;
            DXColumnHeader uICol_Calc_TotalSum_3ColumnHeader = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UICol_Calc_TotalSum_3ColumnHeader;
            DXCell uIItem18Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem18Cell;
            DXCell uIItem18Cell1 = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem18Cell1;
            DXCell uIItem16Cell = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable.UIItem16Cell;
            #endregion

            // Verify that the 'Text' property of 'Col_Calc_TotalSum_1' column header equals 'Tot. [SUM]'
            Assert.AreEqual(this.CheckWeeksumVisibleExpectedValues.UICol_Calc_TotalSum_1ColumnHeaderText, uICol_Calc_TotalSum_1ColumnHeader.Text);

            // Verify that the 'Text' property of 'Col_Calc_TotalSum_2' column header equals 'Tot. [SUM]'
            Assert.AreEqual(this.CheckWeeksumVisibleExpectedValues.UICol_Calc_TotalSum_2ColumnHeaderText, uICol_Calc_TotalSum_2ColumnHeader.Text);

            // Verify that the 'Text' property of 'Col_Calc_TotalSum_3' column header equals 'Tot. [SUM]'
            Assert.AreEqual(this.CheckWeeksumVisibleExpectedValues.UICol_Calc_TotalSum_3ColumnHeaderText, uICol_Calc_TotalSum_3ColumnHeader.Text);

            // Verify that the 'Text' property of '18' cell equals '18'
            Assert.AreEqual(this.CheckWeeksumVisibleExpectedValues.UIItem18CellText, uIItem18Cell.Text);

            // Verify that the 'Text' property of '18' cell equals '18'
            Assert.AreEqual(this.CheckWeeksumVisibleExpectedValues.UIItem18Cell1Text, uIItem18Cell1.Text);

            // Verify that the 'Text' property of '16' cell equals '16'
            Assert.AreEqual(this.CheckWeeksumVisibleExpectedValues.UIItem16CellText, uIItem16Cell.Text);
        }
        
        /// <summary>
        /// DisableEmpFilter
        /// </summary>
        public void DisableEmpFilter()
        {
            #region Variable Declarations
            DXRibbonButtonItem uIPåAvRibbonBaseButtonItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgEmployeeFilterFilRibbonPageGroup.UIPåAvRibbonBaseButtonItem;
            #endregion

            // Click 'På/Av' RibbonBaseButtonItem
            Mouse.Click(uIPåAvRibbonBaseButtonItem, new Point(16, 29));
        }
        
        /// <summary>
        /// DragAveraging
        /// </summary>
        public void DragAveraging()
        {
            #region Variable Declarations
            DXTestControl uITopSeparator = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UITopSeparator;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable;
            #endregion

            // Move 'Top' separator to 'gcRosterPlan' table
            uIGcRosterPlanTable.EnsureClickable(new Point(772, 344));
            Mouse.StartDragging(uITopSeparator, new Point(719, 0));
            Mouse.StopDragging(uIGcRosterPlanTable, new Point(772, 344));
        }
        
        /// <summary>
        /// DragCostSimulation
        /// </summary>
        public void DragCostSimulation()
        {
            #region Variable Declarations
            DXTestControl uITopSeparator = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UITopSeparator;
            DXGrid uIGcRosterPlanTable = this.UIArbeidsplanWindow.UIPnlRosterPlanClient.UIRosterPlanGrid1Custom.UIGcRosterPlanTable;
            #endregion

            // Move 'Top' separator to 'gcRosterPlan' table
            uIGcRosterPlanTable.EnsureClickable(new Point(810, 464));
            Mouse.StartDragging(uITopSeparator, new Point(759, 2));
            Mouse.StopDragging(uIGcRosterPlanTable, new Point(810, 464));
        }
        
        /// <summary>
        /// OpenExcelFromSumTab
        /// </summary>
        public void OpenExcelFromSumTab()
        {
            #region Variable Declarations
            DXCell uIBoldFlereCell = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIGcSumDemandTable.UIBoldFlereCell;
            DXMenuBaseButtonItem uIOverførtilExcelMenuBaseButtonItem = this.UIItemWindow.UIPopupMenuBarControlMenu.UIOverførtilExcelMenuBaseButtonItem;
            #endregion

            // Right-Click '{bold}Flere' cell
            Mouse.Click(uIBoldFlereCell, MouseButtons.Right, ModifierKeys.None, new Point(88, 11));

            // Click 'Overfør til Excel' MenuBaseButtonItem
            Mouse.Click(uIOverførtilExcelMenuBaseButtonItem, new Point(86, 12));
        }
        
        /// <summary>
        /// Select1030EmpFilter
        /// </summary>
        public void Select1030EmpFilter()
        {
            #region Variable Declarations
            DXTestControl uIItem1030GalleryItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpPlanRibbonPage.UIRpgEmployeeFilterPlaRibbonPageGroup.UIRibbonGalleryBarItemRibbonGallery.UISistbrukteGalleryItemGroup.UIItem1030GalleryItem;
            #endregion

            // Click '1030' GalleryItem
            Mouse.Click(uIItem1030GalleryItem, new Point(32, 7));
        }
        
        /// <summary>
        /// SelectBlueFilter
        /// </summary>
        public void SelectBlueFilter()
        {
            #region Variable Declarations
            DXButton uIRibbonGalleryDropDowButton = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgEmployeeFilterFilRibbonPageGroup.UIRibbonGalleryBarItemRibbonGallery.UIRibbonGalleryDropDowButton;
            DXTestControl uIBLÅGRUPPEGalleryItem = this.UIItemWindow.UIGalleryDropDownBarCoMenu.UIDeltefilterGalleryItemGroup.UIBLÅGRUPPEGalleryItem;
            #endregion

            // Click 'RibbonGalleryDropDownButton' button
            Mouse.Click(uIRibbonGalleryDropDowButton, new Point(8, 10));

            // Click 'BLÅ GRUPPE' GalleryItem
            Mouse.Click(uIBLÅGRUPPEGalleryItem, new Point(23, 9));
        }
        
        /// <summary>
        /// SelectDep1030Step22 - Use 'SelectDep1030Step22Params' to pass parameters into this method.
        /// </summary>
        public void SelectDep1030Step22()
        {
            #region Variable Declarations
            DXTreeList uITreeListLookUpEdit1TTreeList = this.UILeggtilansattWindow.UIPnlContentsClient.UIPnlEmploymentSelectiClient.UITleDepartmentLookUpEdit.UITreeListLookUpEditPoWindow.UITreeListLookUpEdit1TTreeList;
            #endregion

            // Type '1030{SPACE}{TAB}' in 'treeListLookUpEdit1TreeList' TreeList
            Keyboard.SendKeys(uITreeListLookUpEdit1TTreeList, this.SelectDep1030Step22Params.UITreeListLookUpEdit1TTreeListSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// SelectDepInclEmloymentsNotStartedStep45 - Use 'SelectDepInclEmloymentsNotStartedStep45Params' to pass parameters into this method.
        /// </summary>
        public void SelectDepInclEmloymentsNotStartedStep45()
        {
            #region Variable Declarations
            DXCheckBox uICeIncludeEmployeesNoCheckBox = this.UILeggtilansattWindow.UIPnlContentsClient.UIPnlEmploymentSelectiClient.UICeIncludeEmployeesNoCheckBox;
            #endregion

            // Select 'ceIncludeEmployeesNotStarted' check box
            uICeIncludeEmployeesNoCheckBox.Checked = this.SelectDepInclEmloymentsNotStartedStep45Params.UICeIncludeEmployeesNoCheckBoxChecked;
        }
        
        /// <summary>
        /// SelectFilterToDeleteStep9
        /// </summary>
        public void SelectFilterToDeleteStep9()
        {
            #region Variable Declarations
            DXCell uIStillingCell = this.UITilpassetvisningWindow.UIGcCustomSetupsClient.UIGcColumnSetupTable.UIStillingCell;
            #endregion

            // Click 'Stilling' cell
            Mouse.Click(uIStillingCell, new Point(43, 9));
        }
        
        /// <summary>
        /// SelectLEGERFilter
        /// </summary>
        public void SelectLEGERFilter()
        {
            #region Variable Declarations
            DXButton uIRibbonGalleryDropDowButton = this.UIGatWindow.UIViewHostCustom.UIPcViewClient.UIRibbonControlRibbon.UIRpMainMenuRibbonPage.UIRpgEmployeeFilterRibbonPageGroup.UIRibbonGalleryBarItemRibbonGallery.UIRibbonGalleryDropDowButton;
            DXTestControl uILEGERGalleryItem = this.UIItemWindow.UIGalleryDropDownBarCoMenu.UIMinefilterGalleryItemGroup.UILEGERGalleryItem;
            #endregion

            // Click 'RibbonGalleryDropDownButton' button
            Mouse.Click(uIRibbonGalleryDropDowButton, new Point(7, 6));

            // Click 'LEGER' GalleryItem
            Mouse.Click(uILEGERGalleryItem, new Point(13, 15));
        }
        
        /// <summary>
        /// SelectRedFilter
        /// </summary>
        public void SelectRedFilter()
        {
            #region Variable Declarations
            DXButton uIRibbonGalleryDropDowButton = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpRosterPlanRibbonPage.UIRpgEmployeeFilterRibbonPageGroup.UIRibbonGalleryBarItemRibbonGallery.UIRibbonGalleryDropDowButton;
            DXTestControl uIRØDGRUPPEGalleryItem = this.UIItemWindow.UIGalleryDropDownBarCoMenu.UIMinefilterGalleryItemGroup.UIRØDGRUPPEGalleryItem;
            #endregion

            // Click 'RibbonGalleryDropDownButton' button
            Mouse.Click(uIRibbonGalleryDropDowButton, new Point(7, 13));

            // Click 'RØD GRUPPE' GalleryItem
            Mouse.Click(uIRØDGRUPPEGalleryItem, new Point(34, 12));
        }
        
        /// <summary>
        /// SelectSumDemandFullInfoWithDetails - Use 'SelectSumDemandFullInfoWithDetailsParams' to pass parameters into this method.
        /// </summary>
        public void SelectSumDemandFullInfoWithDetails()
        {
            #region Variable Declarations
            DXLookUpEdit uILeSumDemandDataSourcLookUpEdit = this.UIArbeidsplanWindow.UIDpnlVisualizationDockPanel.UIDockPanel3_ContainerCustom.UITcSubtabsTabList.UIViewTabPageClient.UISumDemandViewCustom.UIPMainPanelClient.UIPTopPanelClient.UILeSumDemandDataSourcLookUpEdit;
            #endregion

            // Type 'System.Tuple`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' in 'leSumDemandDataSource' LookUpEdit
            //ValueTypeName
            uILeSumDemandDataSourcLookUpEdit.ValueTypeName = this.SelectSumDemandFullInfoWithDetailsParams.UILeSumDemandDataSourcLookUpEditValueTypeName;

            // Type '(5, Full info med detaljer)' in 'leSumDemandDataSource' LookUpEdit
            //ValueAsString
            uILeSumDemandDataSourcLookUpEdit.ValueAsString = this.SelectSumDemandFullInfoWithDetailsParams.UILeSumDemandDataSourcLookUpEditValueAsString;
        }
        
        /// <summary>
        /// SetFilterName1030Step22 - Use 'SetFilterName1030Step22Params' to pass parameters into this method.
        /// </summary>
        public void SetFilterName1030Step22()
        {
            #region Variable Declarations
            DXButton uILagresomButton = this.UIAnsattfilterWindow.UILagresomButton;
            DXTextEdit uITeFilterNameEdit = this.UIItemWindow.UIPopupContainerBarConMenu.UIPopupControlContaineClient.UIPnlSaveAsPanelClient.UITeFilterNameEdit;
            DXButton uIOKLagreButton = this.UIItemWindow.UIPopupContainerBarConMenu.UIPopupControlContaineClient.UIPnlSaveAsPanelClient.UIOKLagreButton;
            #endregion

            // Click 'Lagre som...' button
            Mouse.Click(uILagresomButton, new Point(1, 1));

            // Type '1030' in 'teFilterName' text box
            //ValueAsString
            uITeFilterNameEdit.ValueAsString = this.SetFilterName1030Step22Params.UITeFilterNameEditValueAsString;

            // Click 'OK - Lagre' button
            Mouse.Click(uIOKLagreButton, new Point(1, 1));
        }
        
        /// <summary>
        /// SetFilterNameLEGERStep45 - Use 'SetFilterNameLEGERStep45Params' to pass parameters into this method.
        /// </summary>
        public void SetFilterNameLEGERStep45()
        {
            #region Variable Declarations
            DXButton uILagresomButton = this.UIAnsattfilterWindow.UILagresomButton;
            DXTextEdit uITeFilterNameEdit = this.UIItemWindow.UIPopupContainerBarConMenu.UIPopupControlContaineClient.UIPnlSaveAsPanelClient.UITeFilterNameEdit;
            DXButton uIOKLagreButton = this.UIItemWindow.UIPopupContainerBarConMenu.UIPopupControlContaineClient.UIPnlSaveAsPanelClient.UIOKLagreButton;
            #endregion

            // Click 'Lagre som...' button
            Mouse.Click(uILagresomButton, new Point(1, 1));

            // Type 'LEGER' in 'teFilterName' text box
            //ValueAsString
            uITeFilterNameEdit.ValueAsString = this.SetFilterNameLEGERStep45Params.UITeFilterNameEditValueAsString;

            // Click 'OK - Lagre' button
            Mouse.Click(uIOKLagreButton, new Point(1, 1));
        }
        
        /// <summary>
        /// SetFilterNameRedStep16 - Use 'SetFilterNameRedStep16Params' to pass parameters into this method.
        /// </summary>
        public void SetFilterNameRedStep16()
        {
            #region Variable Declarations
            DXButton uILagresomButton = this.UIAnsattfilterWindow.UILagresomButton;
            DXTextEdit uITeFilterNameEdit = this.UIItemWindow.UIPopupContainerBarConMenu.UIPopupControlContaineClient.UIPnlSaveAsPanelClient.UITeFilterNameEdit;
            DXButton uIOKLagreButton = this.UIItemWindow.UIPopupContainerBarConMenu.UIPopupControlContaineClient.UIPnlSaveAsPanelClient.UIOKLagreButton;
            #endregion

            // Click 'Lagre som...' button
            Mouse.Click(uILagresomButton, new Point(1, 1));

            // Type 'RØD GRUPPE' in 'teFilterName' text box
            //ValueAsString
            uITeFilterNameEdit.ValueAsString = this.SetFilterNameRedStep16Params.UITeFilterNameEditValueAsString;

            // Click 'OK - Lagre' button
            Mouse.Click(uIOKLagreButton, new Point(1, 1));
        }
        
        /// <summary>
        /// ShowAllEmployments
        /// </summary>
        public void ShowAllEmployments()
        {
            #region Variable Declarations
            DXRibbonEditItem uIDdlFilterRibbonEditItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgFilterRibbonPageGroup.UIDdlFilterRibbonEditItem;
            DXTestControl uINode3TreeListNodeCheckBox = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIPopupContainerEditPopupEdit.UIPopupContainerFormWindow.UIDdlFilterPopupContaiClient.UIDdlFilterTreeListTreeList.UINode3TreeListNode.UINode3TreeListNodeCheckBox;
            DXButton uIAvbrytButton = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIPopupContainerEditPopupEdit.UIPopupContainerFormWindow.UIAvbrytButton;
            #endregion

            // Click 'ddlFilter' RibbonEditItem
            Mouse.Click(uIDdlFilterRibbonEditItem, new Point(157, 9));

            // Click 'Node3' TreeListNodeCheckBox
            Mouse.Click(uINode3TreeListNodeCheckBox, new Point(6, 8));

            // Click 'Avbryt' button
            Mouse.Click(uIAvbrytButton, new Point(12, 6));
        }
        
        /// <summary>
        /// ShowAllRosterlinesOnAllDepsFilter
        /// </summary>
        public void ShowAllRosterlinesOnAllDepsFilter()
        {
            #region Variable Declarations
            DXTestControl uINode0TreeListNodeCheckBox = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIPopupContainerEditPopupEdit.UIPopupContainerFormWindow.UIDdlOtherDepFilterPopClient.UIDdlOtherDepFilterTreTreeList.UINode0TreeListNode.UINode0TreeListNodeCheckBox;
            #endregion

            // Click 'Node0' TreeListNodeCheckBox
            Mouse.Click(uINode0TreeListNodeCheckBox, new Point(5, 8));
        }
        
        /// <summary>
        /// ShowOnly100PercentEmployment - Use 'ShowOnly100PercentEmploymentParams' to pass parameters into this method.
        /// </summary>
        public void ShowOnly100PercentEmployment()
        {
            #region Variable Declarations
            DXRibbonEditItem uIDdlFilterRibbonEditItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgFilterRibbonPageGroup.UIDdlFilterRibbonEditItem;
            DXTreeListNode uINode0TreeListNode = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIPopupContainerEditPopupEdit.UIPopupContainerFormWindow.UIDdlFilterPopupContaiClient.UIDdlFilterTreeListTreeList.UINode3TreeListNode.UINode0TreeListNode;
            #endregion

            // Click 'ddlFilter' RibbonEditItem
            Mouse.Click(uIDdlFilterRibbonEditItem, new Point(159, 9));

            // Type 'True' in 'Node0' TreeListNode
            //Checked
            uINode0TreeListNode.Checked = this.ShowOnly100PercentEmploymentParams.UINode0TreeListNodeChecked;
        }
        
        /// <summary>
        /// ShowOnlyGroupOneFilter
        /// </summary>
        public void ShowOnlyGroupOneFilter()
        {
            #region Variable Declarations
            DXRibbonEditItem uIDdlFilterRibbonEditItem = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIRpFilterRibbonPage.UIRpgFilterRibbonPageGroup.UIDdlFilterRibbonEditItem;
            DXTestControl uINode1TreeListNodeCheckBox = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIPopupContainerEditPopupEdit.UIPopupContainerFormWindow.UIDdlFilterPopupContaiClient.UIDdlFilterTreeListTreeList.UINode1TreeListNode.UINode1TreeListNodeCheckBox;
            DXTestControl uINode5TreeListNodeCheckBox = this.UIArbeidsplanWindow.UIRosterPlanGridMenu1Custom.UIRcMenuRibbon.UIPopupContainerEditPopupEdit.UIPopupContainerFormWindow.UIDdlFilterPopupContaiClient.UIDdlFilterTreeListTreeList.UINode1TreeListNode.UINode5TreeListNode.UINode5TreeListNodeCheckBox;
            #endregion

            // Click 'ddlFilter' RibbonEditItem
            Mouse.Click(uIDdlFilterRibbonEditItem, new Point(156, 9));

            // Click 'Node1' TreeListNodeCheckBox
            Mouse.Click(uINode1TreeListNodeCheckBox, new Point(7, 8));

            // Click 'Node5' TreeListNodeCheckBox
            Mouse.Click(uINode5TreeListNodeCheckBox, new Point(7, 7));
        }
        
        #region Properties
        public virtual AddEmpsToNewFilterStep14Params AddEmpsToNewFilterStep14Params
        {
            get
            {
                if ((this.mAddEmpsToNewFilterStep14Params == null))
                {
                    this.mAddEmpsToNewFilterStep14Params = new AddEmpsToNewFilterStep14Params();
                }
                return this.mAddEmpsToNewFilterStep14Params;
            }
        }
        
        public virtual AddEmpsToNewFilterStep22Params AddEmpsToNewFilterStep22Params
        {
            get
            {
                if ((this.mAddEmpsToNewFilterStep22Params == null))
                {
                    this.mAddEmpsToNewFilterStep22Params = new AddEmpsToNewFilterStep22Params();
                }
                return this.mAddEmpsToNewFilterStep22Params;
            }
        }
        
        public virtual Check100PercentEmploymentInListStep28ExpectedValues Check100PercentEmploymentInListStep28ExpectedValues
        {
            get
            {
                if ((this.mCheck100PercentEmploymentInListStep28ExpectedValues == null))
                {
                    this.mCheck100PercentEmploymentInListStep28ExpectedValues = new Check100PercentEmploymentInListStep28ExpectedValues();
                }
                return this.mCheck100PercentEmploymentInListStep28ExpectedValues;
            }
        }
        
        public virtual CheckAllEmpsInAveragingListExpectedValues CheckAllEmpsInAveragingListExpectedValues
        {
            get
            {
                if ((this.mCheckAllEmpsInAveragingListExpectedValues == null))
                {
                    this.mCheckAllEmpsInAveragingListExpectedValues = new CheckAllEmpsInAveragingListExpectedValues();
                }
                return this.mCheckAllEmpsInAveragingListExpectedValues;
            }
        }
        
        public virtual CheckAllEmpsInCalendarPlanExpectedValues CheckAllEmpsInCalendarPlanExpectedValues
        {
            get
            {
                if ((this.mCheckAllEmpsInCalendarPlanExpectedValues == null))
                {
                    this.mCheckAllEmpsInCalendarPlanExpectedValues = new CheckAllEmpsInCalendarPlanExpectedValues();
                }
                return this.mCheckAllEmpsInCalendarPlanExpectedValues;
            }
        }
        
        public virtual CheckAllEmpsInCalendarPlanstep45ExpectedValues CheckAllEmpsInCalendarPlanstep45ExpectedValues
        {
            get
            {
                if ((this.mCheckAllEmpsInCalendarPlanstep45ExpectedValues == null))
                {
                    this.mCheckAllEmpsInCalendarPlanstep45ExpectedValues = new CheckAllEmpsInCalendarPlanstep45ExpectedValues();
                }
                return this.mCheckAllEmpsInCalendarPlanstep45ExpectedValues;
            }
        }
        
        public virtual CheckEmpFilterButtonsDisabledStep12ExpectedValues CheckEmpFilterButtonsDisabledStep12ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpFilterButtonsDisabledStep12ExpectedValues == null))
                {
                    this.mCheckEmpFilterButtonsDisabledStep12ExpectedValues = new CheckEmpFilterButtonsDisabledStep12ExpectedValues();
                }
                return this.mCheckEmpFilterButtonsDisabledStep12ExpectedValues;
            }
        }
        
        public virtual CheckEmpFilterEnabledStep10ExpectedValues CheckEmpFilterEnabledStep10ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpFilterEnabledStep10ExpectedValues == null))
                {
                    this.mCheckEmpFilterEnabledStep10ExpectedValues = new CheckEmpFilterEnabledStep10ExpectedValues();
                }
                return this.mCheckEmpFilterEnabledStep10ExpectedValues;
            }
        }
        
        public virtual CheckEmpFilterExistsStep11ExpectedValues CheckEmpFilterExistsStep11ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpFilterExistsStep11ExpectedValues == null))
                {
                    this.mCheckEmpFilterExistsStep11ExpectedValues = new CheckEmpFilterExistsStep11ExpectedValues();
                }
                return this.mCheckEmpFilterExistsStep11ExpectedValues;
            }
        }
        
        public virtual CheckEmpFilterSelectFilterStatusStep13ExpectedValues CheckEmpFilterSelectFilterStatusStep13ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpFilterSelectFilterStatusStep13ExpectedValues == null))
                {
                    this.mCheckEmpFilterSelectFilterStatusStep13ExpectedValues = new CheckEmpFilterSelectFilterStatusStep13ExpectedValues();
                }
                return this.mCheckEmpFilterSelectFilterStatusStep13ExpectedValues;
            }
        }
        
        public virtual CheckEmployeeListExpectedValues CheckEmployeeListExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeeListExpectedValues == null))
                {
                    this.mCheckEmployeeListExpectedValues = new CheckEmployeeListExpectedValues();
                }
                return this.mCheckEmployeeListExpectedValues;
            }
        }
        
        public virtual CheckEmployeeListStep30ExpectedValues CheckEmployeeListStep30ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeeListStep30ExpectedValues == null))
                {
                    this.mCheckEmployeeListStep30ExpectedValues = new CheckEmployeeListStep30ExpectedValues();
                }
                return this.mCheckEmployeeListStep30ExpectedValues;
            }
        }
        
        public virtual CheckEmployeeListStep31ExpectedValues CheckEmployeeListStep31ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeeListStep31ExpectedValues == null))
                {
                    this.mCheckEmployeeListStep31ExpectedValues = new CheckEmployeeListStep31ExpectedValues();
                }
                return this.mCheckEmployeeListStep31ExpectedValues;
            }
        }
        
        public virtual CheckEmployeesInApprovalListExpectedValues CheckEmployeesInApprovalListExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeesInApprovalListExpectedValues == null))
                {
                    this.mCheckEmployeesInApprovalListExpectedValues = new CheckEmployeesInApprovalListExpectedValues();
                }
                return this.mCheckEmployeesInApprovalListExpectedValues;
            }
        }
        
        public virtual CheckEmployeesInApprovalListStep34ExpectedValues CheckEmployeesInApprovalListStep34ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeesInApprovalListStep34ExpectedValues == null))
                {
                    this.mCheckEmployeesInApprovalListStep34ExpectedValues = new CheckEmployeesInApprovalListStep34ExpectedValues();
                }
                return this.mCheckEmployeesInApprovalListStep34ExpectedValues;
            }
        }
        
        public virtual CheckEmployeesInApprovalListStep35ExpectedValues CheckEmployeesInApprovalListStep35ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeesInApprovalListStep35ExpectedValues == null))
                {
                    this.mCheckEmployeesInApprovalListStep35ExpectedValues = new CheckEmployeesInApprovalListStep35ExpectedValues();
                }
                return this.mCheckEmployeesInApprovalListStep35ExpectedValues;
            }
        }
        
        public virtual CheckEmployeesInEffecuationWindowStep37ExpectedValues CheckEmployeesInEffecuationWindowStep37ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeesInEffecuationWindowStep37ExpectedValues == null))
                {
                    this.mCheckEmployeesInEffecuationWindowStep37ExpectedValues = new CheckEmployeesInEffecuationWindowStep37ExpectedValues();
                }
                return this.mCheckEmployeesInEffecuationWindowStep37ExpectedValues;
            }
        }
        
        public virtual CheckEmployeesInEffecuationWindowStep48ExpectedValues CheckEmployeesInEffecuationWindowStep48ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeesInEffecuationWindowStep48ExpectedValues == null))
                {
                    this.mCheckEmployeesInEffecuationWindowStep48ExpectedValues = new CheckEmployeesInEffecuationWindowStep48ExpectedValues();
                }
                return this.mCheckEmployeesInEffecuationWindowStep48ExpectedValues;
            }
        }
        
        public virtual CheckEmployeesInPlanStep34ExpectedValues CheckEmployeesInPlanStep34ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeesInPlanStep34ExpectedValues == null))
                {
                    this.mCheckEmployeesInPlanStep34ExpectedValues = new CheckEmployeesInPlanStep34ExpectedValues();
                }
                return this.mCheckEmployeesInPlanStep34ExpectedValues;
            }
        }
        
        public virtual CheckEmployeesInPlanStep35ExpectedValues CheckEmployeesInPlanStep35ExpectedValues
        {
            get
            {
                if ((this.mCheckEmployeesInPlanStep35ExpectedValues == null))
                {
                    this.mCheckEmployeesInPlanStep35ExpectedValues = new CheckEmployeesInPlanStep35ExpectedValues();
                }
                return this.mCheckEmployeesInPlanStep35ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInAbsenceListStep46ExpectedValues CheckEmpsInAbsenceListStep46ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInAbsenceListStep46ExpectedValues == null))
                {
                    this.mCheckEmpsInAbsenceListStep46ExpectedValues = new CheckEmpsInAbsenceListStep46ExpectedValues();
                }
                return this.mCheckEmpsInAbsenceListStep46ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInAbsenceListStep47ExpectedValues CheckEmpsInAbsenceListStep47ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInAbsenceListStep47ExpectedValues == null))
                {
                    this.mCheckEmpsInAbsenceListStep47ExpectedValues = new CheckEmpsInAbsenceListStep47ExpectedValues();
                }
                return this.mCheckEmpsInAbsenceListStep47ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInAveragingListStep40ExpectedValues CheckEmpsInAveragingListStep40ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInAveragingListStep40ExpectedValues == null))
                {
                    this.mCheckEmpsInAveragingListStep40ExpectedValues = new CheckEmpsInAveragingListStep40ExpectedValues();
                }
                return this.mCheckEmpsInAveragingListStep40ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInCalendarPlanStep40ExpectedValues CheckEmpsInCalendarPlanStep40ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInCalendarPlanStep40ExpectedValues == null))
                {
                    this.mCheckEmpsInCalendarPlanStep40ExpectedValues = new CheckEmpsInCalendarPlanStep40ExpectedValues();
                }
                return this.mCheckEmpsInCalendarPlanStep40ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInCalendarPlanStep42ExpectedValues CheckEmpsInCalendarPlanStep42ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInCalendarPlanStep42ExpectedValues == null))
                {
                    this.mCheckEmpsInCalendarPlanStep42ExpectedValues = new CheckEmpsInCalendarPlanStep42ExpectedValues();
                }
                return this.mCheckEmpsInCalendarPlanStep42ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInCalendarPlanStep43ExpectedValues CheckEmpsInCalendarPlanStep43ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInCalendarPlanStep43ExpectedValues == null))
                {
                    this.mCheckEmpsInCalendarPlanStep43ExpectedValues = new CheckEmpsInCalendarPlanStep43ExpectedValues();
                }
                return this.mCheckEmpsInCalendarPlanStep43ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInCalendarPlanStep46ExpectedValues CheckEmpsInCalendarPlanStep46ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInCalendarPlanStep46ExpectedValues == null))
                {
                    this.mCheckEmpsInCalendarPlanStep46ExpectedValues = new CheckEmpsInCalendarPlanStep46ExpectedValues();
                }
                return this.mCheckEmpsInCalendarPlanStep46ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInCommentListStep41ExpectedValues CheckEmpsInCommentListStep41ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInCommentListStep41ExpectedValues == null))
                {
                    this.mCheckEmpsInCommentListStep41ExpectedValues = new CheckEmpsInCommentListStep41ExpectedValues();
                }
                return this.mCheckEmpsInCommentListStep41ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInCommentListStep42ExpectedValues CheckEmpsInCommentListStep42ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInCommentListStep42ExpectedValues == null))
                {
                    this.mCheckEmpsInCommentListStep42ExpectedValues = new CheckEmpsInCommentListStep42ExpectedValues();
                }
                return this.mCheckEmpsInCommentListStep42ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInCostSimulationStep23ExpectedValues CheckEmpsInCostSimulationStep23ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInCostSimulationStep23ExpectedValues == null))
                {
                    this.mCheckEmpsInCostSimulationStep23ExpectedValues = new CheckEmpsInCostSimulationStep23ExpectedValues();
                }
                return this.mCheckEmpsInCostSimulationStep23ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInEmployeesVacationBanksListStep43ExpectedValues CheckEmpsInEmployeesVacationBanksListStep43ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInEmployeesVacationBanksListStep43ExpectedValues == null))
                {
                    this.mCheckEmpsInEmployeesVacationBanksListStep43ExpectedValues = new CheckEmpsInEmployeesVacationBanksListStep43ExpectedValues();
                }
                return this.mCheckEmpsInEmployeesVacationBanksListStep43ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInEmployeesVacationBanksListStep44ExpectedValues == null))
                {
                    this.mCheckEmpsInEmployeesVacationBanksListStep44ExpectedValues = new CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues();
                }
                return this.mCheckEmpsInEmployeesVacationBanksListStep44ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInEmployeesVacationBanksListStep45ExpectedValues CheckEmpsInEmployeesVacationBanksListStep45ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInEmployeesVacationBanksListStep45ExpectedValues == null))
                {
                    this.mCheckEmpsInEmployeesVacationBanksListStep45ExpectedValues = new CheckEmpsInEmployeesVacationBanksListStep45ExpectedValues();
                }
                return this.mCheckEmpsInEmployeesVacationBanksListStep45ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInFilterListStep12ExpectedValues CheckEmpsInFilterListStep12ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInFilterListStep12ExpectedValues == null))
                {
                    this.mCheckEmpsInFilterListStep12ExpectedValues = new CheckEmpsInFilterListStep12ExpectedValues();
                }
                return this.mCheckEmpsInFilterListStep12ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInRedFilterStep15ExpectedValues CheckEmpsInRedFilterStep15ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInRedFilterStep15ExpectedValues == null))
                {
                    this.mCheckEmpsInRedFilterStep15ExpectedValues = new CheckEmpsInRedFilterStep15ExpectedValues();
                }
                return this.mCheckEmpsInRedFilterStep15ExpectedValues;
            }
        }
        
        public virtual CheckEmpsInTransfereWindowStep21ExpectedValues CheckEmpsInTransfereWindowStep21ExpectedValues
        {
            get
            {
                if ((this.mCheckEmpsInTransfereWindowStep21ExpectedValues == null))
                {
                    this.mCheckEmpsInTransfereWindowStep21ExpectedValues = new CheckEmpsInTransfereWindowStep21ExpectedValues();
                }
                return this.mCheckEmpsInTransfereWindowStep21ExpectedValues;
            }
        }
        
        public virtual CheckEmptyF3SearchInRosterplanGridExpectedValues CheckEmptyF3SearchInRosterplanGridExpectedValues
        {
            get
            {
                if ((this.mCheckEmptyF3SearchInRosterplanGridExpectedValues == null))
                {
                    this.mCheckEmptyF3SearchInRosterplanGridExpectedValues = new CheckEmptyF3SearchInRosterplanGridExpectedValues();
                }
                return this.mCheckEmptyF3SearchInRosterplanGridExpectedValues;
            }
        }
        
        public virtual CheckFilter1030Step22ExpectedValues CheckFilter1030Step22ExpectedValues
        {
            get
            {
                if ((this.mCheckFilter1030Step22ExpectedValues == null))
                {
                    this.mCheckFilter1030Step22ExpectedValues = new CheckFilter1030Step22ExpectedValues();
                }
                return this.mCheckFilter1030Step22ExpectedValues;
            }
        }
        
        public virtual CheckFullInfoVisibleExpectedValues CheckFullInfoVisibleExpectedValues
        {
            get
            {
                if ((this.mCheckFullInfoVisibleExpectedValues == null))
                {
                    this.mCheckFullInfoVisibleExpectedValues = new CheckFullInfoVisibleExpectedValues();
                }
                return this.mCheckFullInfoVisibleExpectedValues;
            }
        }
        
        public virtual CheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues CheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues
        {
            get
            {
                if ((this.mCheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues == null))
                {
                    this.mCheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues = new CheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues();
                }
                return this.mCheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues;
            }
        }
        
        public virtual CheckHellnerVisibleExpectedValues CheckHellnerVisibleExpectedValues
        {
            get
            {
                if ((this.mCheckHellnerVisibleExpectedValues == null))
                {
                    this.mCheckHellnerVisibleExpectedValues = new CheckHellnerVisibleExpectedValues();
                }
                return this.mCheckHellnerVisibleExpectedValues;
            }
        }
        
        public virtual CheckJohnssonInListStep14ExpectedValues CheckJohnssonInListStep14ExpectedValues
        {
            get
            {
                if ((this.mCheckJohnssonInListStep14ExpectedValues == null))
                {
                    this.mCheckJohnssonInListStep14ExpectedValues = new CheckJohnssonInListStep14ExpectedValues();
                }
                return this.mCheckJohnssonInListStep14ExpectedValues;
            }
        }
        
        public virtual CheckJohnssonInListStep27ExpectedValues CheckJohnssonInListStep27ExpectedValues
        {
            get
            {
                if ((this.mCheckJohnssonInListStep27ExpectedValues == null))
                {
                    this.mCheckJohnssonInListStep27ExpectedValues = new CheckJohnssonInListStep27ExpectedValues();
                }
                return this.mCheckJohnssonInListStep27ExpectedValues;
            }
        }
        
        public virtual CheckOnlyAnderssonFTTStep20ExpectedValues CheckOnlyAnderssonFTTStep20ExpectedValues
        {
            get
            {
                if ((this.mCheckOnlyAnderssonFTTStep20ExpectedValues == null))
                {
                    this.mCheckOnlyAnderssonFTTStep20ExpectedValues = new CheckOnlyAnderssonFTTStep20ExpectedValues();
                }
                return this.mCheckOnlyAnderssonFTTStep20ExpectedValues;
            }
        }
        
        public virtual CheckOnlyAnderssonLineStep19ExpectedValues CheckOnlyAnderssonLineStep19ExpectedValues
        {
            get
            {
                if ((this.mCheckOnlyAnderssonLineStep19ExpectedValues == null))
                {
                    this.mCheckOnlyAnderssonLineStep19ExpectedValues = new CheckOnlyAnderssonLineStep19ExpectedValues();
                }
                return this.mCheckOnlyAnderssonLineStep19ExpectedValues;
            }
        }
        
        public virtual CheckPartlyInfoVisibleExpectedValues CheckPartlyInfoVisibleExpectedValues
        {
            get
            {
                if ((this.mCheckPartlyInfoVisibleExpectedValues == null))
                {
                    this.mCheckPartlyInfoVisibleExpectedValues = new CheckPartlyInfoVisibleExpectedValues();
                }
                return this.mCheckPartlyInfoVisibleExpectedValues;
            }
        }
        
        public virtual CheckRosterplanEmpsInBlueFilterStep17ExpectedValues CheckRosterplanEmpsInBlueFilterStep17ExpectedValues
        {
            get
            {
                if ((this.mCheckRosterplanEmpsInBlueFilterStep17ExpectedValues == null))
                {
                    this.mCheckRosterplanEmpsInBlueFilterStep17ExpectedValues = new CheckRosterplanEmpsInBlueFilterStep17ExpectedValues();
                }
                return this.mCheckRosterplanEmpsInBlueFilterStep17ExpectedValues;
            }
        }
        
        public virtual CheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues CheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues
        {
            get
            {
                if ((this.mCheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues == null))
                {
                    this.mCheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues = new CheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues();
                }
                return this.mCheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues;
            }
        }
        
        public virtual CheckRosterplanEmpsInRedFilterStep16ExpectedValues CheckRosterplanEmpsInRedFilterStep16ExpectedValues
        {
            get
            {
                if ((this.mCheckRosterplanEmpsInRedFilterStep16ExpectedValues == null))
                {
                    this.mCheckRosterplanEmpsInRedFilterStep16ExpectedValues = new CheckRosterplanEmpsInRedFilterStep16ExpectedValues();
                }
                return this.mCheckRosterplanEmpsInRedFilterStep16ExpectedValues;
            }
        }
        
        public virtual CheckSumDemandValuesStep18ExpectedValues CheckSumDemandValuesStep18ExpectedValues
        {
            get
            {
                if ((this.mCheckSumDemandValuesStep18ExpectedValues == null))
                {
                    this.mCheckSumDemandValuesStep18ExpectedValues = new CheckSumDemandValuesStep18ExpectedValues();
                }
                return this.mCheckSumDemandValuesStep18ExpectedValues;
            }
        }
        
        public virtual CheckValuesStep50ExpectedValues CheckValuesStep50ExpectedValues
        {
            get
            {
                if ((this.mCheckValuesStep50ExpectedValues == null))
                {
                    this.mCheckValuesStep50ExpectedValues = new CheckValuesStep50ExpectedValues();
                }
                return this.mCheckValuesStep50ExpectedValues;
            }
        }
        
        public virtual CheckVisibleDataStep38ExpectedValues CheckVisibleDataStep38ExpectedValues
        {
            get
            {
                if ((this.mCheckVisibleDataStep38ExpectedValues == null))
                {
                    this.mCheckVisibleDataStep38ExpectedValues = new CheckVisibleDataStep38ExpectedValues();
                }
                return this.mCheckVisibleDataStep38ExpectedValues;
            }
        }
        
        public virtual CheckVisibleDataTypeStep38ExpectedValues CheckVisibleDataTypeStep38ExpectedValues
        {
            get
            {
                if ((this.mCheckVisibleDataTypeStep38ExpectedValues == null))
                {
                    this.mCheckVisibleDataTypeStep38ExpectedValues = new CheckVisibleDataTypeStep38ExpectedValues();
                }
                return this.mCheckVisibleDataTypeStep38ExpectedValues;
            }
        }
        
        public virtual CheckWeeksumVisibleExpectedValues CheckWeeksumVisibleExpectedValues
        {
            get
            {
                if ((this.mCheckWeeksumVisibleExpectedValues == null))
                {
                    this.mCheckWeeksumVisibleExpectedValues = new CheckWeeksumVisibleExpectedValues();
                }
                return this.mCheckWeeksumVisibleExpectedValues;
            }
        }
        
        public virtual SelectDep1030Step22Params SelectDep1030Step22Params
        {
            get
            {
                if ((this.mSelectDep1030Step22Params == null))
                {
                    this.mSelectDep1030Step22Params = new SelectDep1030Step22Params();
                }
                return this.mSelectDep1030Step22Params;
            }
        }
        
        public virtual SelectDepInclEmloymentsNotStartedStep45Params SelectDepInclEmloymentsNotStartedStep45Params
        {
            get
            {
                if ((this.mSelectDepInclEmloymentsNotStartedStep45Params == null))
                {
                    this.mSelectDepInclEmloymentsNotStartedStep45Params = new SelectDepInclEmloymentsNotStartedStep45Params();
                }
                return this.mSelectDepInclEmloymentsNotStartedStep45Params;
            }
        }
        
        public virtual SelectSumDemandFullInfoWithDetailsParams SelectSumDemandFullInfoWithDetailsParams
        {
            get
            {
                if ((this.mSelectSumDemandFullInfoWithDetailsParams == null))
                {
                    this.mSelectSumDemandFullInfoWithDetailsParams = new SelectSumDemandFullInfoWithDetailsParams();
                }
                return this.mSelectSumDemandFullInfoWithDetailsParams;
            }
        }
        
        public virtual SetFilterName1030Step22Params SetFilterName1030Step22Params
        {
            get
            {
                if ((this.mSetFilterName1030Step22Params == null))
                {
                    this.mSetFilterName1030Step22Params = new SetFilterName1030Step22Params();
                }
                return this.mSetFilterName1030Step22Params;
            }
        }
        
        public virtual SetFilterNameLEGERStep45Params SetFilterNameLEGERStep45Params
        {
            get
            {
                if ((this.mSetFilterNameLEGERStep45Params == null))
                {
                    this.mSetFilterNameLEGERStep45Params = new SetFilterNameLEGERStep45Params();
                }
                return this.mSetFilterNameLEGERStep45Params;
            }
        }
        
        public virtual SetFilterNameRedStep16Params SetFilterNameRedStep16Params
        {
            get
            {
                if ((this.mSetFilterNameRedStep16Params == null))
                {
                    this.mSetFilterNameRedStep16Params = new SetFilterNameRedStep16Params();
                }
                return this.mSetFilterNameRedStep16Params;
            }
        }
        
        public virtual ShowOnly100PercentEmploymentParams ShowOnly100PercentEmploymentParams
        {
            get
            {
                if ((this.mShowOnly100PercentEmploymentParams == null))
                {
                    this.mShowOnly100PercentEmploymentParams = new ShowOnly100PercentEmploymentParams();
                }
                return this.mShowOnly100PercentEmploymentParams;
            }
        }
        
        public UIArbeidsplanWindow UIArbeidsplanWindow
        {
            get
            {
                if ((this.mUIArbeidsplanWindow == null))
                {
                    this.mUIArbeidsplanWindow = new UIArbeidsplanWindow();
                }
                return this.mUIArbeidsplanWindow;
            }
        }
        
        public UITilpassetvisningWindow UITilpassetvisningWindow
        {
            get
            {
                if ((this.mUITilpassetvisningWindow == null))
                {
                    this.mUITilpassetvisningWindow = new UITilpassetvisningWindow();
                }
                return this.mUITilpassetvisningWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAnsattfilterWindow UIAnsattfilterWindow
        {
            get
            {
                if ((this.mUIAnsattfilterWindow == null))
                {
                    this.mUIAnsattfilterWindow = new UIAnsattfilterWindow();
                }
                return this.mUIAnsattfilterWindow;
            }
        }
        
        public UILeggtilansattWindow UILeggtilansattWindow
        {
            get
            {
                if ((this.mUILeggtilansattWindow == null))
                {
                    this.mUILeggtilansattWindow = new UILeggtilansattWindow();
                }
                return this.mUILeggtilansattWindow;
            }
        }
        
        public UIOverførtilleggWindow UIOverførtilleggWindow
        {
            get
            {
                if ((this.mUIOverførtilleggWindow == null))
                {
                    this.mUIOverførtilleggWindow = new UIOverførtilleggWindow();
                }
                return this.mUIOverførtilleggWindow;
            }
        }
        
        public UIIverksetteWindow UIIverksetteWindow
        {
            get
            {
                if ((this.mUIIverksetteWindow == null))
                {
                    this.mUIIverksetteWindow = new UIIverksetteWindow();
                }
                return this.mUIIverksetteWindow;
            }
        }
        
        public UIGatWindow UIGatWindow
        {
            get
            {
                if ((this.mUIGatWindow == null))
                {
                    this.mUIGatWindow = new UIGatWindow();
                }
                return this.mUIGatWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddEmpsToNewFilterStep14Params mAddEmpsToNewFilterStep14Params;
        
        private AddEmpsToNewFilterStep22Params mAddEmpsToNewFilterStep22Params;
        
        private Check100PercentEmploymentInListStep28ExpectedValues mCheck100PercentEmploymentInListStep28ExpectedValues;
        
        private CheckAllEmpsInAveragingListExpectedValues mCheckAllEmpsInAveragingListExpectedValues;
        
        private CheckAllEmpsInCalendarPlanExpectedValues mCheckAllEmpsInCalendarPlanExpectedValues;
        
        private CheckAllEmpsInCalendarPlanstep45ExpectedValues mCheckAllEmpsInCalendarPlanstep45ExpectedValues;
        
        private CheckEmpFilterButtonsDisabledStep12ExpectedValues mCheckEmpFilterButtonsDisabledStep12ExpectedValues;
        
        private CheckEmpFilterEnabledStep10ExpectedValues mCheckEmpFilterEnabledStep10ExpectedValues;
        
        private CheckEmpFilterExistsStep11ExpectedValues mCheckEmpFilterExistsStep11ExpectedValues;
        
        private CheckEmpFilterSelectFilterStatusStep13ExpectedValues mCheckEmpFilterSelectFilterStatusStep13ExpectedValues;
        
        private CheckEmployeeListExpectedValues mCheckEmployeeListExpectedValues;
        
        private CheckEmployeeListStep30ExpectedValues mCheckEmployeeListStep30ExpectedValues;
        
        private CheckEmployeeListStep31ExpectedValues mCheckEmployeeListStep31ExpectedValues;
        
        private CheckEmployeesInApprovalListExpectedValues mCheckEmployeesInApprovalListExpectedValues;
        
        private CheckEmployeesInApprovalListStep34ExpectedValues mCheckEmployeesInApprovalListStep34ExpectedValues;
        
        private CheckEmployeesInApprovalListStep35ExpectedValues mCheckEmployeesInApprovalListStep35ExpectedValues;
        
        private CheckEmployeesInEffecuationWindowStep37ExpectedValues mCheckEmployeesInEffecuationWindowStep37ExpectedValues;
        
        private CheckEmployeesInEffecuationWindowStep48ExpectedValues mCheckEmployeesInEffecuationWindowStep48ExpectedValues;
        
        private CheckEmployeesInPlanStep34ExpectedValues mCheckEmployeesInPlanStep34ExpectedValues;
        
        private CheckEmployeesInPlanStep35ExpectedValues mCheckEmployeesInPlanStep35ExpectedValues;
        
        private CheckEmpsInAbsenceListStep46ExpectedValues mCheckEmpsInAbsenceListStep46ExpectedValues;
        
        private CheckEmpsInAbsenceListStep47ExpectedValues mCheckEmpsInAbsenceListStep47ExpectedValues;
        
        private CheckEmpsInAveragingListStep40ExpectedValues mCheckEmpsInAveragingListStep40ExpectedValues;
        
        private CheckEmpsInCalendarPlanStep40ExpectedValues mCheckEmpsInCalendarPlanStep40ExpectedValues;
        
        private CheckEmpsInCalendarPlanStep42ExpectedValues mCheckEmpsInCalendarPlanStep42ExpectedValues;
        
        private CheckEmpsInCalendarPlanStep43ExpectedValues mCheckEmpsInCalendarPlanStep43ExpectedValues;
        
        private CheckEmpsInCalendarPlanStep46ExpectedValues mCheckEmpsInCalendarPlanStep46ExpectedValues;
        
        private CheckEmpsInCommentListStep41ExpectedValues mCheckEmpsInCommentListStep41ExpectedValues;
        
        private CheckEmpsInCommentListStep42ExpectedValues mCheckEmpsInCommentListStep42ExpectedValues;
        
        private CheckEmpsInCostSimulationStep23ExpectedValues mCheckEmpsInCostSimulationStep23ExpectedValues;
        
        private CheckEmpsInEmployeesVacationBanksListStep43ExpectedValues mCheckEmpsInEmployeesVacationBanksListStep43ExpectedValues;
        
        private CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues mCheckEmpsInEmployeesVacationBanksListStep44ExpectedValues;
        
        private CheckEmpsInEmployeesVacationBanksListStep45ExpectedValues mCheckEmpsInEmployeesVacationBanksListStep45ExpectedValues;
        
        private CheckEmpsInFilterListStep12ExpectedValues mCheckEmpsInFilterListStep12ExpectedValues;
        
        private CheckEmpsInRedFilterStep15ExpectedValues mCheckEmpsInRedFilterStep15ExpectedValues;
        
        private CheckEmpsInTransfereWindowStep21ExpectedValues mCheckEmpsInTransfereWindowStep21ExpectedValues;
        
        private CheckEmptyF3SearchInRosterplanGridExpectedValues mCheckEmptyF3SearchInRosterplanGridExpectedValues;
        
        private CheckFilter1030Step22ExpectedValues mCheckFilter1030Step22ExpectedValues;
        
        private CheckFullInfoVisibleExpectedValues mCheckFullInfoVisibleExpectedValues;
        
        private CheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues mCheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues;
        
        private CheckHellnerVisibleExpectedValues mCheckHellnerVisibleExpectedValues;
        
        private CheckJohnssonInListStep14ExpectedValues mCheckJohnssonInListStep14ExpectedValues;
        
        private CheckJohnssonInListStep27ExpectedValues mCheckJohnssonInListStep27ExpectedValues;
        
        private CheckOnlyAnderssonFTTStep20ExpectedValues mCheckOnlyAnderssonFTTStep20ExpectedValues;
        
        private CheckOnlyAnderssonLineStep19ExpectedValues mCheckOnlyAnderssonLineStep19ExpectedValues;
        
        private CheckPartlyInfoVisibleExpectedValues mCheckPartlyInfoVisibleExpectedValues;
        
        private CheckRosterplanEmpsInBlueFilterStep17ExpectedValues mCheckRosterplanEmpsInBlueFilterStep17ExpectedValues;
        
        private CheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues mCheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues;
        
        private CheckRosterplanEmpsInRedFilterStep16ExpectedValues mCheckRosterplanEmpsInRedFilterStep16ExpectedValues;
        
        private CheckSumDemandValuesStep18ExpectedValues mCheckSumDemandValuesStep18ExpectedValues;
        
        private CheckValuesStep50ExpectedValues mCheckValuesStep50ExpectedValues;
        
        private CheckVisibleDataStep38ExpectedValues mCheckVisibleDataStep38ExpectedValues;
        
        private CheckVisibleDataTypeStep38ExpectedValues mCheckVisibleDataTypeStep38ExpectedValues;
        
        private CheckWeeksumVisibleExpectedValues mCheckWeeksumVisibleExpectedValues;
        
        private SelectDep1030Step22Params mSelectDep1030Step22Params;
        
        private SelectDepInclEmloymentsNotStartedStep45Params mSelectDepInclEmloymentsNotStartedStep45Params;
        
        private SelectSumDemandFullInfoWithDetailsParams mSelectSumDemandFullInfoWithDetailsParams;
        
        private SetFilterName1030Step22Params mSetFilterName1030Step22Params;
        
        private SetFilterNameLEGERStep45Params mSetFilterNameLEGERStep45Params;
        
        private SetFilterNameRedStep16Params mSetFilterNameRedStep16Params;
        
        private ShowOnly100PercentEmploymentParams mShowOnly100PercentEmploymentParams;
        
        private UIArbeidsplanWindow mUIArbeidsplanWindow;
        
        private UITilpassetvisningWindow mUITilpassetvisningWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIAnsattfilterWindow mUIAnsattfilterWindow;
        
        private UILeggtilansattWindow mUILeggtilansattWindow;
        
        private UIOverførtilleggWindow mUIOverførtilleggWindow;
        
        private UIIverksetteWindow mUIIverksetteWindow;
        
        private UIGatWindow mUIGatWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddEmpsToNewFilterStep14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddEmpsToNewFilterStep14Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'ceIncludeEmployeesEnded' check box
        /// </summary>
        public bool UICeIncludeEmployeesEnCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddEmpsToNewFilterStep22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddEmpsToNewFilterStep22Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcSelectEmployments' table
        /// </summary>
        public string UIGcSelectEmploymentsTableSendKeys = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'gcSelectEmployments' table
        /// </summary>
        public string UIGcSelectEmploymentsTableSendKeys1 = "{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Check100PercentEmploymentInListStep28'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Check100PercentEmploymentInListStep28ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Elofsson, Per'
        /// </summary>
        public string UIBrinkJörgenCellText = "Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Fredriksson, Mathias'
        /// </summary>
        public string UIBurmanJensCellText = "Fredriksson, Mathias";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIElofssonPerCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Pettersen, Petra'
        /// </summary>
        public string UIFalkHannaCellText = "Pettersen, Petra";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Rosenquist, Ruth'
        /// </summary>
        public string UIFredrikssonMathiasCellText = "Rosenquist, Ruth";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Svendsen, Svein'
        /// </summary>
        public string UIHaagAnnaCellText = "Svendsen, Svein";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAllEmpsInAveragingList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAllEmpsInAveragingListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
        /// </summary>
        public string UIBrinkJörgenCellText = "Brink, Jörgen";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
        /// </summary>
        public string UIBurmanJensCellText = "Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
        /// </summary>
        public string UIElofssonPerCellText = "Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Falk, Hanna'
        /// </summary>
        public string UIFalkHannaCellText = "Falk, Hanna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
        /// </summary>
        public string UIFredrikssonMathiasCellText = "Fredriksson, Mathias";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
        /// </summary>
        public string UIHaagAnnaCellText = "Haag, Anna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIHalfarssonCalleCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
        /// </summary>
        public string UIHellnerMarcusCellText = "Hellner, Marcus";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ingemarsdotter, Ida' cell equals 'Ingemarsdotter, Ida'
        /// </summary>
        public string UIIngemarsdotterIdaCellText = "Ingemarsdotter, Ida";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Jönsson, Emil' cell equals 'Jönsson, Emil'
        /// </summary>
        public string UIJönssonEmilCellText = "Jönsson, Emil";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAllEmpsInCalendarPlan'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAllEmpsInCalendarPlanExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
        /// </summary>
        public string UIBrinkJörgenCellText = "Brink, Jörgen";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
        /// </summary>
        public string UIBurmanJensCellText = "Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
        /// </summary>
        public string UIElofssonPerCellText = "Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Falk, Hanna'
        /// </summary>
        public string UIFalkHannaCellText = "Falk, Hanna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
        /// </summary>
        public string UIFredrikssonMathiasCellText = "Fredriksson, Mathias";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
        /// </summary>
        public string UIHaagAnnaCellText = "Haag, Anna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIHalfarssonCalleCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
        /// </summary>
        public string UIHellnerMarcusCellText = "Hellner, Marcus";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ingemarsdotter, Ida' cell equals 'Ingemarsdotter, Ida'
        /// </summary>
        public string UIIngemarsdotterIdaCellText = "Ingemarsdotter, Ida";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Jönsson, Emil'
        /// </summary>
        public string UIPettersenPetraCellText = "Jönsson, Emil";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAllEmpsInCalendarPlanstep45'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAllEmpsInCalendarPlanstep45ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Elofsson, Per'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIBrinkJörgenCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Jönsson, Emil'
        /// </summary>
        public string UIBurmanJensCellText = "Jönsson, Emil";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '4'
        /// </summary>
        public string UIItem14CellText = "4";
        
        /// <summary>
        /// Verify that the 'Text' property of '13' cell equals '8'
        /// </summary>
        public string UIItem13CellText = "8";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '11'
        /// </summary>
        public string UIItem14Cell1Text = "11";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpFilterButtonsDisabledStep12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpFilterButtonsDisabledStep12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'ceShareInGat' check box equals 'False'
        /// </summary>
        public bool UICeShareInGatCheckBoxEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'ceShareInMyGat' check box equals 'False'
        /// </summary>
        public bool UICeShareInMyGatCheckBoxEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Lagre' button equals 'False'
        /// </summary>
        public bool UILagreButtonEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Slett' button equals 'False'
        /// </summary>
        public bool UISlettButtonEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Fjern' button equals 'False'
        /// </summary>
        public bool UIFjernButtonEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Legg til' button equals 'False'
        /// </summary>
        public bool UILeggtilButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpFilterEnabledStep10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpFilterEnabledStep10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'På/Av' RibbonBaseButtonItem equals 'true'
        /// </summary>
        public bool UIPåAvRibbonBaseButtonItemEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpFilterExistsStep11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpFilterExistsStep11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'BLÅ GRUPPE' GalleryItem equals 'BLÅ GRUPPE'
        /// </summary>
        public string UIBLÅGRUPPEGalleryItemText = "BLÅ GRUPPE";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpFilterSelectFilterStatusStep13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpFilterSelectFilterStatusStep13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'gleSavedFilters' LookUpEdit equals '-Nytt filter-'
        /// </summary>
        public string UIGleSavedFiltersLookUpEditText = "-Nytt filter-";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeeList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeeListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
        /// </summary>
        public string UIBrinkJörgenCellText = "Brink, Jörgen";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
        /// </summary>
        public string UIBurmanJensCellText = "Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
        /// </summary>
        public string UIBurmanJensCellText1 = "Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
        /// </summary>
        public string UIElofssonPerCellText = "Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Falk, Hanna'
        /// </summary>
        public string UIFalkHannaCellText = "Falk, Hanna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
        /// </summary>
        public string UIFredrikssonMathiasCellText = "Fredriksson, Mathias";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
        /// </summary>
        public string UIHaagAnnaCellText = "Haag, Anna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIHalfarssonCalleCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
        /// </summary>
        public string UIHellnerMarcusCellText = "Hellner, Marcus";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ingemarsdotter, Ida' cell equals 'Ingemarsdotter, Ida'
        /// </summary>
        public string UIIngemarsdotterIdaCellText = "Ingemarsdotter, Ida";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Pettersen, Petra'
        /// </summary>
        public string UIPettersenPetraCellText = "Pettersen, Petra";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Rosenquist, Ruth' cell equals 'Rosenquist, Ruth'
        /// </summary>
        public string UIRosenquistRuthCellText = "Rosenquist, Ruth";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Svendsen, Svein' cell equals 'Svendsen, Svein'
        /// </summary>
        public string UISvendsenSveinCellText = "Svendsen, Svein";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeeListStep30'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeeListStep30ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIBurmanJensCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Grunnlinje: Filter og Visning 1' cell equals 'Grunnlinje: Filter og Visning 1'
        /// </summary>
        public string UIGrunnlinjeFilterogViCell3Text = "Grunnlinje: Filter og Visning 1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fra plan: Hjelpeplan for Overlappende plan.' cell equals 'Fra plan: Hjelpeplan for Overlappende plan.'
        /// </summary>
        public string UIFraplanHjelpeplanforCell1Text = "Fra plan: Hjelpeplan for Overlappende plan.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fra plan: Overlappende plan' cell equals 'Fra plan: Overlappende plan'
        /// </summary>
        public string UIFraplanOverlappendepCell1Text = "Fra plan: Overlappende plan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fra plan: Kalenderplan' cell equals 'Fra plan: Kalenderplan'
        /// </summary>
        public string UIFraplanKalenderplanCell2Text = "Fra plan: Kalenderplan";
        
        /// <summary>
        /// Verify that the 'Text' property of '1030' cell equals '5210'
        /// </summary>
        public string UIItem1030CellText = "5210";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals ''
        /// </summary>
        public string UIACell1Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell2Text = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell11ValueAsString = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell12ValueAsString = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell13ValueAsString = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Svendsen, Svein' cell equals 'Svendsen, Svein'
        /// </summary>
        public string UISvendsenSveinCell1Text = "Svendsen, Svein";
        
        /// <summary>
        /// Verify that the 'Text' property of '1030' cell equals '1030'
        /// </summary>
        public string UIItem1030Cell2Text = "1030";
        
        /// <summary>
        /// Verify that the 'Text' property of '1030' cell equals '1030'
        /// </summary>
        public string UIItem1030Cell3Text = "1030";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fra plan: Overlapp plan til Filter og Visning 1 på 5210' cell equals 'Fra plan: Overlapp plan til Filter og Visning 1 på 5210'
        /// </summary>
        public string UIFraplanOverlappplantCell1Text = "Fra plan: Overlapp plan til Filter og Visning 1 på 5210";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Grunnlinje: Filter og Visning 1' cell equals 'Grunnlinje: Filter og Visning 1'
        /// </summary>
        public string UIGrunnlinjeFilterogViCell4Text = "Grunnlinje: Filter og Visning 1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F3' cell equals 'F3'
        /// </summary>
        public string UIF3CellText = "F3";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'HJ1' cell equals 'HJ1'
        /// </summary>
        public string UIHJ1Cell1ValueAsString = "HJ1";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell7Text = "";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '1'
        /// </summary>
        public string UIItem14Cell1Text = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '14'
        /// </summary>
        public string UIItem14Cell2Text = "14";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeeListStep31'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeeListStep31ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIBurmanJensCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell1ValueAsString = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCellText = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell1Text = "D";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1CellValueAsString = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell1Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1CellText = "GV1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell8Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell2Text = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Svendsen, Svein' cell equals 'Svendsen, Svein'
        /// </summary>
        public string UISvendsenSveinCell1Text = "Svendsen, Svein";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV3' cell equals 'GV3'
        /// </summary>
        public string UIGV3CellText = "GV3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'GV3' cell equals 'GV3'
        /// </summary>
        public string UIGV3Cell1Text = "GV3";
        
        /// <summary>
        /// Verify that the 'Text' property of cell equals ''
        /// </summary>
        public string UIItemCell7Text = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeesInApprovalList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeesInApprovalListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
        /// </summary>
        public string UIBrinkJörgenCellText = "Brink, Jörgen";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
        /// </summary>
        public string UIBurmanJensCellText = "Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
        /// </summary>
        public string UIElofssonPerCellText = "Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Falk, Hanna'
        /// </summary>
        public string UIFalkHannaCellText = "Falk, Hanna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
        /// </summary>
        public string UIFredrikssonMathiasCellText = "Fredriksson, Mathias";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
        /// </summary>
        public string UIHaagAnnaCellText = "Haag, Anna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIHalfarssonCalleCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
        /// </summary>
        public string UIHellnerMarcusCellText = "Hellner, Marcus";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ingemarsdotter, Ida' cell equals 'Ingemarsdotter, Ida'
        /// </summary>
        public string UIIngemarsdotterIdaCellText = "Ingemarsdotter, Ida";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Pettersen, Petra'
        /// </summary>
        public string UIPettersenPetraCellText = "Pettersen, Petra";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Rosenquist, Ruth' cell equals 'Rosenquist, Ruth'
        /// </summary>
        public string UIRosenquistRuthCellText = "Rosenquist, Ruth";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeesInApprovalListStep34'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeesInApprovalListStep34ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '12' cell equals '12'
        /// </summary>
        public string UIItem12CellText = "12";
        
        /// <summary>
        /// Verify that the 'Text' property of '13' cell equals '13'
        /// </summary>
        public string UIItem13CellText = "13";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '14'
        /// </summary>
        public string UIItem14CellText = "14";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeesInApprovalListStep35'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeesInApprovalListStep35ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '12' cell equals '14'
        /// </summary>
        public string UIItem12CellText = "14";
        
        /// <summary>
        /// Verify that the 'Text' property of 'NSF - Norsk sykepleierforbund' cell equals 'NSF - Norsk sykepleierforbund'
        /// </summary>
        public string UINSFNorsksykepleierfoCellText = "NSF - Norsk sykepleierforbund";
        
        /// <summary>
        /// Verify that the 'Text' property of 'S - Sykepleier' cell equals 'S - Sykepleier'
        /// </summary>
        public string UISSykepleierCellText = "S - Sykepleier";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeesInEffecuationWindowStep37'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeesInEffecuationWindowStep37ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
        /// </summary>
        public string UIBurmanJensCellText = "Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
        /// </summary>
        public string UIHaagAnnaCellText = "Haag, Anna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
        /// </summary>
        public string UIHellnerMarcusCellText = "Hellner, Marcus";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeesInEffecuationWindowStep48'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeesInEffecuationWindowStep48ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Ikke valgt' cell equals 'Ikke valgt'
        /// </summary>
        public string UIIkkevalgtCellText = "Ikke valgt";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ikke valgt' cell equals 'Ikke valgt'
        /// </summary>
        public string UIIkkevalgtCell1Text = "Ikke valgt";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ikke valgt' cell equals 'Ikke valgt'
        /// </summary>
        public string UIIkkevalgtCell2Text = "Ikke valgt";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ikke valgt' cell equals 'Ikke valgt'
        /// </summary>
        public string UIIkkevalgtCell3Text = "Ikke valgt";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Burman, Jens'
        /// </summary>
        public string UIHaagAnnaCellText = "Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
        /// </summary>
        public string UIHaagAnnaCell1Text = "Haag, Anna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
        /// </summary>
        public string UIHellnerMarcusCell1Text = "Hellner, Marcus";
        
        /// <summary>
        /// Verify that the 'Text' property of '01.01.2024-11.02.2024 - Andersson, Ebba' cell equals '01.01.2024-11.02.2024 - Andersson, Ebba'
        /// </summary>
        public string UIItem0101202411022024CellText = "01.01.2024-11.02.2024 - Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of '01.01.2024-11.02.2024 - Burman, Jens' cell equals '01.01.2024-11.02.2024 - Burman, Jens'
        /// </summary>
        public string UIItem0101202411022024Cell1Text = "01.01.2024-11.02.2024 - Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of '01.01.2024-11.02.2024 - Haag, Anna' cell equals '01.01.2024-11.02.2024 - Haag, Anna'
        /// </summary>
        public string UIItem0101202411022024Cell2Text = "01.01.2024-11.02.2024 - Haag, Anna";
        
        /// <summary>
        /// Verify that the 'Text' property of '01.01.2024-11.02.2024 - Hellner, Marcus' cell equals '01.01.2024-11.02.2024 - Hellner, Marcus'
        /// </summary>
        public string UIItem0101202411022024Cell3Text = "01.01.2024-11.02.2024 - Hellner, Marcus";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeesInPlanStep34'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeesInPlanStep34ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Pettersen, Petra'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Pettersen, Petra";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '12'
        /// </summary>
        public string UIItem14CellText = "12";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Rosenquist, Ruth'
        /// </summary>
        public string UIBrinkJörgenCellText = "Rosenquist, Ruth";
        
        /// <summary>
        /// Verify that the 'Text' property of '13' cell equals '13'
        /// </summary>
        public string UIItem13CellText = "13";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Svendsen, Svein'
        /// </summary>
        public string UIBurmanJensCellText = "Svendsen, Svein";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '14'
        /// </summary>
        public string UIItem14Cell1Text = "14";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmployeesInPlanStep35'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmployeesInPlanStep35ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Svendsen, Svein'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Svendsen, Svein";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '14'
        /// </summary>
        public string UIItem14CellText = "14";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInAbsenceListStep46'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInAbsenceListStep46ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Jönsson, Emil' cell equals 'Jönsson, Emil'
        /// </summary>
        public string UIJönssonEmilCellText = "Jönsson, Emil";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
        /// </summary>
        public string UIElofssonPerCellText = "Elofsson, Per";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInAbsenceListStep47'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInAbsenceListStep47ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Jönsson, Emil' cell equals 'Jönsson, Emil'
        /// </summary>
        public string UIJönssonEmilCellText = "Jönsson, Emil";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
        /// </summary>
        public string UIBrinkJörgenCellText = "Brink, Jörgen";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
        /// </summary>
        public string UIElofssonPerCellText = "Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
        /// </summary>
        public string UIHellnerMarcusCellText = "Hellner, Marcus";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
        /// </summary>
        public string UIFredrikssonMathiasCellText = "Fredriksson, Mathias";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInAveragingListStep40'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInAveragingListStep40ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Falk, Hanna'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Falk, Hanna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIBrinkJörgenCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Ingemarsdotter, Ida'
        /// </summary>
        public string UIBurmanJensCellText = "Ingemarsdotter, Ida";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInCalendarPlanStep40'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInCalendarPlanStep40ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Falk, Hanna'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Falk, Hanna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIBrinkJörgenCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Ingemarsdotter, Ida'
        /// </summary>
        public string UIBurmanJensCellText = "Ingemarsdotter, Ida";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInCalendarPlanStep42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInCalendarPlanStep42ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '8'
        /// </summary>
        public string UIItem14CellText = "8";
        
        /// <summary>
        /// Verify that the 'Text' property of '1030' cell equals '5210'
        /// </summary>
        public string UIItem1030CellText = "5210";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInCalendarPlanStep43'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInCalendarPlanStep43ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '8'
        /// </summary>
        public string UIItem14CellText = "8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInCalendarPlanStep46'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInCalendarPlanStep46ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Elofsson, Per'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIBrinkJörgenCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Jönsson, Emil'
        /// </summary>
        public string UIBurmanJensCellText = "Jönsson, Emil";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '4'
        /// </summary>
        public string UIItem14CellText = "4";
        
        /// <summary>
        /// Verify that the 'Text' property of '13' cell equals '8'
        /// </summary>
        public string UIItem13CellText = "8";
        
        /// <summary>
        /// Verify that the 'Text' property of '14' cell equals '11'
        /// </summary>
        public string UIItem14Cell1Text = "11";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInCommentListStep41'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInCommentListStep41ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Falk, Hanna'
        /// </summary>
        public string UIGridControlGroupRowGroupRowValueAsString = "Falk, Hanna";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Halfarsson, Calle'
        /// </summary>
        public string UIGridControlGroupRowGroupRow1ValueAsString = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Ingemarsdotter, Ida'
        /// </summary>
        public string UIGridControlGroupRowGroupRow2ValueAsString = "Ingemarsdotter, Ida";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInCommentListStep42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInCommentListStep42ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Halfarsson, Calle'
        /// </summary>
        public string UIGridControlGroupRowGroupRowValueAsString = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ja, konkurere i ski selvfølgelig' cell equals 'Ja, konkurere i ski selvfølgelig'
        /// </summary>
        public string UIJakonkurereiskiselvfCellText = "Ja, konkurere i ski selvfølgelig";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInCostSimulationStep23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInCostSimulationStep23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Pettersen, Petra'
        /// </summary>
        public string UIPettersenPetraCellText = "Pettersen, Petra";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Rosenquist, Ruth' cell equals 'Rosenquist, Ruth'
        /// </summary>
        public string UIRosenquistRuthCellText = "Rosenquist, Ruth";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Svendsen, Svein' cell equals 'Svendsen, Svein'
        /// </summary>
        public string UISvendsenSveinCellText = "Svendsen, Svein";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInEmployeesVacationBanksListStep43'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInEmployeesVacationBanksListStep43ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Ferie - 5 dgr/uke'
        /// </summary>
        public string UIGridControlGroupRowGroupRowValueAsString = "Ferie - 5 dgr/uke";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals '2024'
        /// </summary>
        public string UIGridControlGroupRowGroupRow1ValueAsString = "2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '8 - Halfarsson, Calle' cell equals '8 - Halfarsson, Calle'
        /// </summary>
        public string UIItem8HalfarssonCalleCellText = "8 - Halfarsson, Calle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInEmployeesVacationBanksListStep44'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInEmployeesVacationBanksListStep44ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '8 - Halfarsson, Calle' cell equals '1 - Andersson, Ebba'
        /// </summary>
        public string UIItem8HalfarssonCalleCellText = "1 - Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of '2 - Brink, Jörgen' cell equals '2 - Brink, Jörgen'
        /// </summary>
        public string UIItem2BrinkJörgenCellText = "2 - Brink, Jörgen";
        
        /// <summary>
        /// Verify that the 'Text' property of '3 - Burman, Jens' cell equals '3 - Burman, Jens'
        /// </summary>
        public string UIItem3BurmanJensCellText = "3 - Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of '4 - Elofsson, Per' cell equals '4 - Elofsson, Per'
        /// </summary>
        public string UIItem4ElofssonPerCellText = "4 - Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of '5 - Falk, Hanna' cell equals '5 - Falk, Hanna'
        /// </summary>
        public string UIItem5FalkHannaCellText = "5 - Falk, Hanna";
        
        /// <summary>
        /// Verify that the 'Text' property of '6 - Fredriksson, Mathias' cell equals '6 - Fredriksson, Mathias'
        /// </summary>
        public string UIItem6FredrikssonMathCellText = "6 - Fredriksson, Mathias";
        
        /// <summary>
        /// Verify that the 'Text' property of '7 - Haag, Anna' cell equals '7 - Haag, Anna'
        /// </summary>
        public string UIItem7HaagAnnaCellText = "7 - Haag, Anna";
        
        /// <summary>
        /// Verify that the 'Text' property of '8 - Halfarsson, Calle' cell equals '8 - Halfarsson, Calle'
        /// </summary>
        public string UIItem8HalfarssonCalleCell1Text = "8 - Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of '9 - Hellner, Marcus' cell equals '9 - Hellner, Marcus'
        /// </summary>
        public string UIItem9HellnerMarcusCellText = "9 - Hellner, Marcus";
        
        /// <summary>
        /// Verify that the 'Text' property of '10 - Ingemarsdotter, Ida' cell equals '10 - Ingemarsdotter, Ida'
        /// </summary>
        public string UIItem10IngemarsdotterCellText = "10 - Ingemarsdotter, Ida";
        
        /// <summary>
        /// Verify that the 'Text' property of '11 - Jönsson, Emil' cell equals '11 - Jönsson, Emil'
        /// </summary>
        public string UIItem11JönssonEmilCellText = "11 - Jönsson, Emil";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInEmployeesVacationBanksListStep45'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInEmployeesVacationBanksListStep45ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals 'Ferie - 5 dgr/uke'
        /// </summary>
        public string UIGridControlGroupRowGroupRowValueAsString = "Ferie - 5 dgr/uke";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GridControlGroupRow' GroupRow equals '2024'
        /// </summary>
        public string UIGridControlGroupRowGroupRow1ValueAsString = "2024";
        
        /// <summary>
        /// Verify that the 'Text' property of '8 - Halfarsson, Calle' cell equals '4 - Elofsson, Per'
        /// </summary>
        public string UIItem8HalfarssonCalleCellText = "4 - Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of '2 - Brink, Jörgen' cell equals '8 - Halfarsson, Calle'
        /// </summary>
        public string UIItem2BrinkJörgenCellText = "8 - Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of '3 - Burman, Jens' cell equals '11 - Jönsson, Emil'
        /// </summary>
        public string UIItem3BurmanJensCellText = "11 - Jönsson, Emil";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInFilterListStep12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInFilterListStep12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
        /// </summary>
        public string UIBurmanJensCellText = "Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
        /// </summary>
        public string UIHaagAnnaCellText = "Haag, Anna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
        /// </summary>
        public string UIHellnerMarcusCellText = "Hellner, Marcus";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInRedFilterStep15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInRedFilterStep15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Falk, Hanna'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Falk, Hanna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIBurmanJensCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Ingemarsdotter, Ida'
        /// </summary>
        public string UIHaagAnnaCellText = "Ingemarsdotter, Ida";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Jonsson, Niklas'
        /// </summary>
        public string UIHellnerMarcusCellText = "Jonsson, Niklas";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmpsInTransfereWindowStep21'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmpsInTransfereWindowStep21ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Brink, Jörgen'
        /// </summary>
        public string UIBrinkJörgenCellText = "Brink, Jörgen";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Burman, Jens'
        /// </summary>
        public string UIBurmanJensCellText = "Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
        /// </summary>
        public string UIElofssonPerCellText = "Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Falk, Hanna' cell equals 'Falk, Hanna'
        /// </summary>
        public string UIFalkHannaCellText = "Falk, Hanna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fredriksson, Mathias' cell equals 'Fredriksson, Mathias'
        /// </summary>
        public string UIFredrikssonMathiasCellText = "Fredriksson, Mathias";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Haag, Anna'
        /// </summary>
        public string UIHaagAnnaCellText = "Haag, Anna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIHalfarssonCalleCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Hellner, Marcus' cell equals 'Hellner, Marcus'
        /// </summary>
        public string UIHellnerMarcusCellText = "Hellner, Marcus";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Ingemarsdotter, Ida' cell equals 'Ingemarsdotter, Ida'
        /// </summary>
        public string UIIngemarsdotterIdaCellText = "Ingemarsdotter, Ida";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Pettersen, Petra'
        /// </summary>
        public string UIPettersenPetraCellText = "Pettersen, Petra";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Rosenquist, Ruth' cell equals 'Rosenquist, Ruth'
        /// </summary>
        public string UIRosenquistRuthCellText = "Rosenquist, Ruth";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Svendsen, Svein' cell equals 'Svendsen, Svein'
        /// </summary>
        public string UISvendsenSveinCellText = "Svendsen, Svein";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmptyF3SearchInRosterplanGrid'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckEmptyF3SearchInRosterplanGridExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of '_TeFind' MRUEdit equals ''
        /// </summary>
        public string UI_TeFindMRUEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFilter1030Step22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckFilter1030Step22ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'gleSavedFilters' LookUpEdit equals '1030'
        /// </summary>
        public string UIGleSavedFiltersLookUpEditText = "1030";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Pettersen, Petra'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Pettersen, Petra";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Rosenquist, Ruth'
        /// </summary>
        public string UIBurmanJensCellText = "Rosenquist, Ruth";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Haag, Anna' cell equals 'Svendsen, Svein'
        /// </summary>
        public string UIHaagAnnaCellText = "Svendsen, Svein";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFullInfoVisible'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckFullInfoVisibleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle35' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle35ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle1' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle1ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle4' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle4ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle17' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle17ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle5' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle5ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle12-2' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle122ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle8-2' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle82ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle14-2' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle142ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle16' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle16ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle15' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle15ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle11' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle11ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle19' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle19ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle20' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle20ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle26' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle26ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle21' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle21ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle38' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle38ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle29' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle29ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle22' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle22ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle23' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle23ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle30' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle30ColumnHeaderVisible = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckGroupBlueFilterInEffecuationWindowStep48'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckGroupBlueFilterInEffecuationWindowStep48ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Gruppe Blå' cell equals 'Gruppe Blå'
        /// </summary>
        public string UIGruppeBlåCellText = "Gruppe Blå";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Gruppe Blå' cell equals 'Gruppe Blå'
        /// </summary>
        public string UIGruppeBlåCell1Text = "Gruppe Blå";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Gruppe Blå' cell equals 'Gruppe Blå'
        /// </summary>
        public string UIGruppeBlåCell2Text = "Gruppe Blå";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Gruppe Blå' cell equals 'Gruppe Blå'
        /// </summary>
        public string UIGruppeBlåCell3Text = "Gruppe Blå";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckHellnerVisible'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckHellnerVisibleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Hellner, Marcus'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Hellner, Marcus";
        
        /// <summary>
        /// Verify that the 'RowHandle' property of 'Andersson, Ebba' cell equals '0'
        /// </summary>
        public int UIAnderssonEbbaCellRowHandle = 0;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckJohnssonInListStep14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckJohnssonInListStep14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Jonsson, Niklas' cell equals 'Jonsson, Niklas'
        /// </summary>
        public string UIJonssonNiklasCellText = "Jonsson, Niklas";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckJohnssonInListStep27'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckJohnssonInListStep27ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Pettersen, Petra' cell equals 'Jönsson, Emil'
        /// </summary>
        public string UIPettersenPetraCellText = "Jönsson, Emil";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Inaktiv linje' cell equals 'Inaktiv linje'
        /// </summary>
        public string UIInaktivlinjeCellText = "Inaktiv linje";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
        /// </summary>
        public string UINCell4ValueAsString = "PlanShift (N) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals 'NewPlanShift (Empty) readonly'
        /// </summary>
        public string UIItemCellValueAsString = "NewPlanShift (Empty) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
        /// </summary>
        public string UINCell5ValueAsString = "PlanShift (N) readonly";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N) readonly'
        /// </summary>
        public string UINCell6ValueAsString = "PlanShift (N) readonly";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOnlyAnderssonFTTStep20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOnlyAnderssonFTTStep20ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' PivotGridFieldValue equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaPivotGridFieldValueText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of '2' PivotGridCell equals '2'
        /// </summary>
        public string UIItem2PivotGridCellText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of '28' PivotGridCell equals '28'
        /// </summary>
        public string UIItem28PivotGridCellText = "28";
        
        /// <summary>
        /// Verify that the 'Text' property of '8' PivotGridCell equals '8'
        /// </summary>
        public string UIItem8PivotGridCellText = "8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOnlyAnderssonLineStep19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckOnlyAnderssonLineStep19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckPartlyInfoVisible'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckPartlyInfoVisibleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ColumnHandle1' column header equals 'Ansatt'
        /// </summary>
        public string UIColumnHandle1ColumnHeaderText = "Ansatt";
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle1' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle1ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Text' property of 'ColumnHandle4' column header equals 'Avd.'
        /// </summary>
        public string UIColumnHandle4ColumnHeaderText = "Avd.";
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle4' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle4ColumnHeaderVisible = true;
        
        /// <summary>
        /// Verify that the 'Text' property of 'ColumnHandle5-2' column header equals 'Type'
        /// </summary>
        public string UIColumnHandle52ColumnHeaderText = "Type";
        
        /// <summary>
        /// Verify that the 'Visible' property of 'ColumnHandle5-2' column header equals 'True'
        /// </summary>
        public bool UIColumnHandle52ColumnHeaderVisible = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRosterplanEmpsInBlueFilterStep17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRosterplanEmpsInBlueFilterStep17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'På/Av' RibbonBaseButtonItem equals 'True'
        /// </summary>
        public bool UIPåAvRibbonBaseButtonItemChecked = true;
        
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Burman, Jens'
        /// </summary>
        public string UIBrinkJörgenCellText = "Burman, Jens";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Haag, Anna'
        /// </summary>
        public string UIBurmanJensCellText = "Haag, Anna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Hellner, Marcus'
        /// </summary>
        public string UIElofssonPerCellText = "Hellner, Marcus";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRosterplanEmpsInGroupOneFilterStep24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRosterplanEmpsInGroupOneFilterStep24ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Rosenquist, Ruth'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Rosenquist, Ruth";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Svendsen, Svein'
        /// </summary>
        public string UIBrinkJörgenCellText = "Svendsen, Svein";
        
        /// <summary>
        /// Verify that the 'Text' property of '1030' cell equals '1030'
        /// </summary>
        public string UIItem1030CellText = "1030";
        
        /// <summary>
        /// Verify that the 'Text' property of '1030' cell equals '1030'
        /// </summary>
        public string UIItem1030Cell1Text = "1030";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckRosterplanEmpsInRedFilterStep16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckRosterplanEmpsInRedFilterStep16ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Andersson, Ebba' cell equals 'Falk, Hanna'
        /// </summary>
        public string UIAnderssonEbbaCellText = "Falk, Hanna";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIBrinkJörgenCellText = "Halfarsson, Calle";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Burman, Jens' cell equals 'Ingemarsdotter, Ida'
        /// </summary>
        public string UIBurmanJensCellText = "Ingemarsdotter, Ida";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSumDemandValuesStep18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckSumDemandValuesStep18ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACellText = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell1Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of '{green}{bold}{italic}2/3' cell equals '{green}{bold}{italic}2/3'
        /// </summary>
        public string UIGreenbolditalic23CellText = "{green}{bold}{italic}2/3";
        
        /// <summary>
        /// Verify that the 'Text' property of '{green}{bold}{italic}2/3' cell equals '{green}{bold}{italic}2/3'
        /// </summary>
        public string UIGreenbolditalic23Cell1Text = "{green}{bold}{italic}2/3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell2Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N' cell equals 'N'
        /// </summary>
        public string UINCellText = "N";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell3Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N' cell equals 'N'
        /// </summary>
        public string UINCell1Text = "N";
        
        /// <summary>
        /// Verify that the 'Text' property of '{blue}{bold}{italic}2/3' cell equals '{blue}{bold}{italic}2/3'
        /// </summary>
        public string UIBluebolditalic23CellText = "{blue}{bold}{italic}2/3";
        
        /// <summary>
        /// Verify that the 'Text' property of '{blue}{bold}2/1' cell equals '{blue}{bold}2/1'
        /// </summary>
        public string UIBluebold21CellText = "{blue}{bold}2/1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N' cell equals 'N'
        /// </summary>
        public string UINCell2Text = "N";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCellText = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of 'N' cell equals 'N'
        /// </summary>
        public string UINCell3Text = "N";
        
        /// <summary>
        /// Verify that the 'Text' property of '{red}{bold}{italic}1/3' cell equals '{red}{bold}{italic}1/3'
        /// </summary>
        public string UIRedbolditalic13CellText = "{red}{bold}{italic}1/3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell1Text = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of '{green}{bold}{italic}1/3' cell equals '{green}{bold}{italic}1/3'
        /// </summary>
        public string UIGreenbolditalic13CellText = "{green}{bold}{italic}1/3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell4Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell2Text = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell5Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of '{blue}{bold}{italic}1/3' cell equals '{blue}{bold}{italic}1/3'
        /// </summary>
        public string UIBluebolditalic13CellText = "{blue}{bold}{italic}1/3";
        
        /// <summary>
        /// Verify that the 'Text' property of '{green}{bold}2/2' cell equals '{green}{bold}2/2'
        /// </summary>
        public string UIGreenbold22CellText = "{green}{bold}2/2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell3Text = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of 'D' cell equals 'D'
        /// </summary>
        public string UIDCell4Text = "D";
        
        /// <summary>
        /// Verify that the 'Text' property of '{green}{bold}2/2' cell equals '{green}{bold}2/2'
        /// </summary>
        public string UIGreenbold22Cell1Text = "{green}{bold}2/2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell6Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1CellText = "F1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'A'
        /// </summary>
        public string UIACell7Text = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of '{green}{bold}2/2' cell equals '{green}{bold}2/2'
        /// </summary>
        public string UIGreenbold22Cell2Text = "{green}{bold}2/2";
        
        /// <summary>
        /// Verify that the 'Text' property of '{blue}{bold}{italic}1/0' cell equals '{blue}{bold}{italic}1/0'
        /// </summary>
        public string UIBluebolditalic10CellText = "{blue}{bold}{italic}1/0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValuesStep50'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckValuesStep50ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Elofsson, Per' cell equals 'Elofsson, Per'
        /// </summary>
        public string UIElofssonPerCellText = "Elofsson, Per";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Halfarsson, Calle' cell equals 'Halfarsson, Calle'
        /// </summary>
        public string UIHalfarssonCalleCellText = "Halfarsson, Calle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckVisibleDataStep38'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckVisibleDataStep38ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Brink, Jörgen' cell equals 'Andersson, Ebba'
        /// </summary>
        public string UIBrinkJörgenCellText = "Andersson, Ebba";
        
        /// <summary>
        /// Verify that the 'Text' property of '1030' cell equals '5210'
        /// </summary>
        public string UIItem1030CellText = "5210";
        
        /// <summary>
        /// Verify that the 'Text' property of '5210' cell equals '5210'
        /// </summary>
        public string UIItem5210CellText = "5210";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D)'
        /// </summary>
        public string UIDCell5ValueAsString = "PlanShift (D)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'D' cell equals 'PlanShift (D)'
        /// </summary>
        public string UIDCell6ValueAsString = "PlanShift (D)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'N' cell equals 'PlanShift (N)'
        /// </summary>
        public string UINCell7ValueAsString = "PlanShift (N)";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'F1' cell equals 'F1'
        /// </summary>
        public string UIF1Cell1ValueAsString = "F1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'GV1' cell equals 'GV1'
        /// </summary>
        public string UIGV1Cell1ValueAsString = "GV1";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of cell equals ''
        /// </summary>
        public string UIItemCell10ValueAsString = "";
        
        /// <summary>
        /// Verify that the 'ValueAsString' property of 'N' cell equals 'A'
        /// </summary>
        public string UINCell1ValueAsString = "A";
        
        /// <summary>
        /// Verify that the 'Text' property of 'A' cell equals 'N'
        /// </summary>
        public string UIACell7Text = "N";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckVisibleDataTypeStep38'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckVisibleDataTypeStep38ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Grunnlinje: Overlappende plan' cell equals 'Grunnlinje: Overlappende plan'
        /// </summary>
        public string UIGrunnlinjeOverlappenCellText = "Grunnlinje: Overlappende plan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fra plan: Hjelpeplan for Overlappende plan.' cell equals 'Fra plan: Hjelpeplan for Overlappende plan.'
        /// </summary>
        public string UIFraplanHjelpeplanforCell2Text = "Fra plan: Hjelpeplan for Overlappende plan.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fra plan: Kalenderplan' cell equals 'Fra plan: Kalenderplan'
        /// </summary>
        public string UIFraplanKalenderplanCell3Text = "Fra plan: Kalenderplan";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Fra vaktbok' cell equals 'Fra vaktbok'
        /// </summary>
        public string UIFravaktbokCellText = "Fra vaktbok";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWeeksumVisible'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckWeeksumVisibleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Col_Calc_TotalSum_1' column header equals 'Tot. [SUM]'
        /// </summary>
        public string UICol_Calc_TotalSum_1ColumnHeaderText = "Tot. [SUM]";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Col_Calc_TotalSum_2' column header equals 'Tot. [SUM]'
        /// </summary>
        public string UICol_Calc_TotalSum_2ColumnHeaderText = "Tot. [SUM]";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Col_Calc_TotalSum_3' column header equals 'Tot. [SUM]'
        /// </summary>
        public string UICol_Calc_TotalSum_3ColumnHeaderText = "Tot. [SUM]";
        
        /// <summary>
        /// Verify that the 'Text' property of '18' cell equals '18'
        /// </summary>
        public string UIItem18CellText = "18";
        
        /// <summary>
        /// Verify that the 'Text' property of '18' cell equals '18'
        /// </summary>
        public string UIItem18Cell1Text = "18";
        
        /// <summary>
        /// Verify that the 'Text' property of '16' cell equals '16'
        /// </summary>
        public string UIItem16CellText = "16";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectDep1030Step22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectDep1030Step22Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1030{SPACE}{TAB}' in 'treeListLookUpEdit1TreeList' TreeList
        /// </summary>
        public string UITreeListLookUpEdit1TTreeListSendKeys = "1030{SPACE}{TAB}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectDepInclEmloymentsNotStartedStep45'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectDepInclEmloymentsNotStartedStep45Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'ceIncludeEmployeesNotStarted' check box
        /// </summary>
        public bool UICeIncludeEmployeesNoCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectSumDemandFullInfoWithDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SelectSumDemandFullInfoWithDetailsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'System.Tuple`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' in 'leSumDemandDataSource' LookUpEdit
        /// </summary>
        public string UILeSumDemandDataSourcLookUpEditValueTypeName = "System.Tuple`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicK" +
            "eyToken=b77a5c561934e089],[System.String, mscorlib, Version=4.0.0.0, Culture=neu" +
            "tral, PublicKeyToken=b77a5c561934e089]]";
        
        /// <summary>
        /// Type '(5, Full info med detaljer)' in 'leSumDemandDataSource' LookUpEdit
        /// </summary>
        public string UILeSumDemandDataSourcLookUpEditValueAsString = "(5, Full info med detaljer)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetFilterName1030Step22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetFilterName1030Step22Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1030' in 'teFilterName' text box
        /// </summary>
        public string UITeFilterNameEditValueAsString = "1030";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetFilterNameLEGERStep45'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetFilterNameLEGERStep45Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'LEGER' in 'teFilterName' text box
        /// </summary>
        public string UITeFilterNameEditValueAsString = "LEGER";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetFilterNameRedStep16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SetFilterNameRedStep16Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'RØD GRUPPE' in 'teFilterName' text box
        /// </summary>
        public string UITeFilterNameEditValueAsString = "RØD GRUPPE";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ShowOnly100PercentEmployment'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ShowOnly100PercentEmploymentParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'True' in 'Node0' TreeListNode
        /// </summary>
        public bool UINode0TreeListNodeChecked = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIArbeidsplanWindow : DXWindow
    {
        
        public UIArbeidsplanWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Arbeidsplan";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPnlRosterPlanClient UIPnlRosterPlanClient
        {
            get
            {
                if ((this.mUIPnlRosterPlanClient == null))
                {
                    this.mUIPnlRosterPlanClient = new UIPnlRosterPlanClient(this);
                }
                return this.mUIPnlRosterPlanClient;
            }
        }
        
        public UIRosterPlanGridMenu1Custom UIRosterPlanGridMenu1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGridMenu1Custom == null))
                {
                    this.mUIRosterPlanGridMenu1Custom = new UIRosterPlanGridMenu1Custom(this);
                }
                return this.mUIRosterPlanGridMenu1Custom;
            }
        }
        
        public UIDpnlVisualizationDockPanel UIDpnlVisualizationDockPanel
        {
            get
            {
                if ((this.mUIDpnlVisualizationDockPanel == null))
                {
                    this.mUIDpnlVisualizationDockPanel = new UIDpnlVisualizationDockPanel(this);
                }
                return this.mUIDpnlVisualizationDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlRosterPlanClient mUIPnlRosterPlanClient;
        
        private UIRosterPlanGridMenu1Custom mUIRosterPlanGridMenu1Custom;
        
        private UIDpnlVisualizationDockPanel mUIDpnlVisualizationDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlRosterPlanClient : DXTestControl
    {
        
        public UIPnlRosterPlanClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRosterPlanGrid1Custom UIRosterPlanGrid1Custom
        {
            get
            {
                if ((this.mUIRosterPlanGrid1Custom == null))
                {
                    this.mUIRosterPlanGrid1Custom = new UIRosterPlanGrid1Custom(this);
                }
                return this.mUIRosterPlanGrid1Custom;
            }
        }
        
        public UI_LayoutControl1Custom UI_LayoutControl1Custom
        {
            get
            {
                if ((this.mUI_LayoutControl1Custom == null))
                {
                    this.mUI_LayoutControl1Custom = new UI_LayoutControl1Custom(this);
                }
                return this.mUI_LayoutControl1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIRosterPlanGrid1Custom mUIRosterPlanGrid1Custom;
        
        private UI_LayoutControl1Custom mUI_LayoutControl1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGrid1Custom : DXTestControl
    {
        
        public UIRosterPlanGrid1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGrid1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGrid";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcRosterPlanTable UIGcRosterPlanTable
        {
            get
            {
                if ((this.mUIGcRosterPlanTable == null))
                {
                    this.mUIGcRosterPlanTable = new UIGcRosterPlanTable(this);
                }
                return this.mUIGcRosterPlanTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcRosterPlanTable mUIGcRosterPlanTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcRosterPlanTable : DXGrid
    {
        
        public UIGcRosterPlanTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXColumnHeader UIColumnHandle35ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle35ColumnHeader == null))
                {
                    this.mUIColumnHandle35ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle35ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle35";
                    this.mUIColumnHandle35ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle35ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle35ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle1ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle1ColumnHeader == null))
                {
                    this.mUIColumnHandle1ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle1ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle1";
                    this.mUIColumnHandle1ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle1ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle1ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle4ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle4ColumnHeader == null))
                {
                    this.mUIColumnHandle4ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle4ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle4";
                    this.mUIColumnHandle4ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle4ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle4ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle17ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle17ColumnHeader == null))
                {
                    this.mUIColumnHandle17ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle17ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle17";
                    this.mUIColumnHandle17ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle17ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle17ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle5ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle5ColumnHeader == null))
                {
                    this.mUIColumnHandle5ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle5ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle5";
                    this.mUIColumnHandle5ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle5ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle5ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle122ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle122ColumnHeader == null))
                {
                    this.mUIColumnHandle122ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle122ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle12-2";
                    this.mUIColumnHandle122ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle122ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle122ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle82ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle82ColumnHeader == null))
                {
                    this.mUIColumnHandle82ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle82ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle8-2";
                    this.mUIColumnHandle82ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle82ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle82ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle142ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle142ColumnHeader == null))
                {
                    this.mUIColumnHandle142ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle142ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle14-2";
                    this.mUIColumnHandle142ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle142ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle142ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle16ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle16ColumnHeader == null))
                {
                    this.mUIColumnHandle16ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle16ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle16";
                    this.mUIColumnHandle16ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle16ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle16ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle15ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle15ColumnHeader == null))
                {
                    this.mUIColumnHandle15ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle15ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle15";
                    this.mUIColumnHandle15ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle15ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle15ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle11ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle11ColumnHeader == null))
                {
                    this.mUIColumnHandle11ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle11ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle11";
                    this.mUIColumnHandle11ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle11ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle11ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle19ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle19ColumnHeader == null))
                {
                    this.mUIColumnHandle19ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle19ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle19";
                    this.mUIColumnHandle19ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle19ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle19ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle20ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle20ColumnHeader == null))
                {
                    this.mUIColumnHandle20ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle20ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle20";
                    this.mUIColumnHandle20ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle20ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle20ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle26ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle26ColumnHeader == null))
                {
                    this.mUIColumnHandle26ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle26ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle26";
                    this.mUIColumnHandle26ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle26ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle26ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle21ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle21ColumnHeader == null))
                {
                    this.mUIColumnHandle21ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle21ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle21";
                    this.mUIColumnHandle21ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle21ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle21ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle38ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle38ColumnHeader == null))
                {
                    this.mUIColumnHandle38ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle38ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle38";
                    this.mUIColumnHandle38ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle38ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle38ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle29ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle29ColumnHeader == null))
                {
                    this.mUIColumnHandle29ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle29ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle29";
                    this.mUIColumnHandle29ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle29ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle29ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle22ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle22ColumnHeader == null))
                {
                    this.mUIColumnHandle22ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle22ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle22";
                    this.mUIColumnHandle22ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle22ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle22ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle23ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle23ColumnHeader == null))
                {
                    this.mUIColumnHandle23ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle23ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle23";
                    this.mUIColumnHandle23ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle23ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle23ColumnHeader;
            }
        }
        
        public DXColumnHeader UIColumnHandle30ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle30ColumnHeader == null))
                {
                    this.mUIColumnHandle30ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle30ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle30";
                    this.mUIColumnHandle30ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle30ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle30ColumnHeader;
            }
        }
        
        public DXCell UIAnderssonEbbaCell
        {
            get
            {
                if ((this.mUIAnderssonEbbaCell == null))
                {
                    this.mUIAnderssonEbbaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle1";
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonEbbaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnderssonEbbaCell;
            }
        }
        
        public DXCell UIBrinkJörgenCell
        {
            get
            {
                if ((this.mUIBrinkJörgenCell == null))
                {
                    this.mUIBrinkJörgenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]ColumnHandle1";
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBrinkJörgenCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBrinkJörgenCell;
            }
        }
        
        public DXCell UIBurmanJensCell
        {
            get
            {
                if ((this.mUIBurmanJensCell == null))
                {
                    this.mUIBurmanJensCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]ColumnHandle1";
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBurmanJensCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBurmanJensCell;
            }
        }
        
        public DXCell UIElofssonPerCell
        {
            get
            {
                if ((this.mUIElofssonPerCell == null))
                {
                    this.mUIElofssonPerCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]ColumnHandle1";
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIElofssonPerCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIElofssonPerCell;
            }
        }
        
        public DXCell UIFalkHannaCell
        {
            get
            {
                if ((this.mUIFalkHannaCell == null))
                {
                    this.mUIFalkHannaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFalkHannaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]4[Column]ColumnHandle1";
                    this.mUIFalkHannaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFalkHannaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFalkHannaCell;
            }
        }
        
        public DXCell UIFredrikssonMathiasCell
        {
            get
            {
                if ((this.mUIFredrikssonMathiasCell == null))
                {
                    this.mUIFredrikssonMathiasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]5[Column]ColumnHandle1";
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFredrikssonMathiasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFredrikssonMathiasCell;
            }
        }
        
        public DXCell UIHaagAnnaCell
        {
            get
            {
                if ((this.mUIHaagAnnaCell == null))
                {
                    this.mUIHaagAnnaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]6[Column]ColumnHandle1";
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHaagAnnaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHaagAnnaCell;
            }
        }
        
        public DXCell UIHalfarssonCalleCell
        {
            get
            {
                if ((this.mUIHalfarssonCalleCell == null))
                {
                    this.mUIHalfarssonCalleCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]7[Column]ColumnHandle1";
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHalfarssonCalleCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHalfarssonCalleCell;
            }
        }
        
        public DXCell UIHellnerMarcusCell
        {
            get
            {
                if ((this.mUIHellnerMarcusCell == null))
                {
                    this.mUIHellnerMarcusCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]8[Column]ColumnHandle1";
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHellnerMarcusCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHellnerMarcusCell;
            }
        }
        
        public DXCell UIIngemarsdotterIdaCell
        {
            get
            {
                if ((this.mUIIngemarsdotterIdaCell == null))
                {
                    this.mUIIngemarsdotterIdaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIIngemarsdotterIdaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]9[Column]ColumnHandle1";
                    this.mUIIngemarsdotterIdaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIngemarsdotterIdaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIIngemarsdotterIdaCell;
            }
        }
        
        public DXCell UIPettersenPetraCell
        {
            get
            {
                if ((this.mUIPettersenPetraCell == null))
                {
                    this.mUIPettersenPetraCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]ColumnHandle1";
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIPettersenPetraCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIPettersenPetraCell;
            }
        }
        
        public DXCell UIRosenquistRuthCell
        {
            get
            {
                if ((this.mUIRosenquistRuthCell == null))
                {
                    this.mUIRosenquistRuthCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRosenquistRuthCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]11[Column]ColumnHandle1";
                    this.mUIRosenquistRuthCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRosenquistRuthCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRosenquistRuthCell;
            }
        }
        
        public DXCell UISvendsenSveinCell
        {
            get
            {
                if ((this.mUISvendsenSveinCell == null))
                {
                    this.mUISvendsenSveinCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISvendsenSveinCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]ColumnHandle1";
                    this.mUISvendsenSveinCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISvendsenSveinCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISvendsenSveinCell;
            }
        }
        
        public DXColumnHeader UIColumnHandle52ColumnHeader
        {
            get
            {
                if ((this.mUIColumnHandle52ColumnHeader == null))
                {
                    this.mUIColumnHandle52ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUIColumnHandle52ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]ColumnHandle5-2";
                    this.mUIColumnHandle52ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUIColumnHandle52ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIColumnHandle52ColumnHeader;
            }
        }
        
        public DXCell UIACell
        {
            get
            {
                if ((this.mUIACell == null))
                {
                    this.mUIACell = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_0";
                    this.mUIACell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell;
            }
        }
        
        public DXCell UIACell1
        {
            get
            {
                if ((this.mUIACell1 == null))
                {
                    this.mUIACell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_0";
                    this.mUIACell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell1;
            }
        }
        
        public DXCell UIACell2
        {
            get
            {
                if ((this.mUIACell2 == null))
                {
                    this.mUIACell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_1";
                    this.mUIACell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell2;
            }
        }
        
        public DXCell UINCell
        {
            get
            {
                if ((this.mUINCell == null))
                {
                    this.mUINCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_1";
                    this.mUINCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell;
            }
        }
        
        public DXCell UIACell3
        {
            get
            {
                if ((this.mUIACell3 == null))
                {
                    this.mUIACell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_1";
                    this.mUIACell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell3;
            }
        }
        
        public DXCell UINCell1
        {
            get
            {
                if ((this.mUINCell1 == null))
                {
                    this.mUINCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_1";
                    this.mUINCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell1;
            }
        }
        
        public DXCell UINCell2
        {
            get
            {
                if ((this.mUINCell2 == null))
                {
                    this.mUINCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_2";
                    this.mUINCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell2;
            }
        }
        
        public DXCell UIDCell
        {
            get
            {
                if ((this.mUIDCell == null))
                {
                    this.mUIDCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_2";
                    this.mUIDCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell;
            }
        }
        
        public DXCell UINCell3
        {
            get
            {
                if ((this.mUINCell3 == null))
                {
                    this.mUINCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_2";
                    this.mUINCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell3;
            }
        }
        
        public DXCell UIDCell1
        {
            get
            {
                if ((this.mUIDCell1 == null))
                {
                    this.mUIDCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_3";
                    this.mUIDCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell1;
            }
        }
        
        public DXCell UIACell4
        {
            get
            {
                if ((this.mUIACell4 == null))
                {
                    this.mUIACell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_4";
                    this.mUIACell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell4;
            }
        }
        
        public DXCell UIDCell2
        {
            get
            {
                if ((this.mUIDCell2 == null))
                {
                    this.mUIDCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_4";
                    this.mUIDCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell2;
            }
        }
        
        public DXCell UIACell5
        {
            get
            {
                if ((this.mUIACell5 == null))
                {
                    this.mUIACell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_4";
                    this.mUIACell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell5;
            }
        }
        
        public DXCell UIDCell3
        {
            get
            {
                if ((this.mUIDCell3 == null))
                {
                    this.mUIDCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_5";
                    this.mUIDCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell3;
            }
        }
        
        public DXCell UIDCell4
        {
            get
            {
                if ((this.mUIDCell4 == null))
                {
                    this.mUIDCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_5";
                    this.mUIDCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell4;
            }
        }
        
        public DXCell UIACell6
        {
            get
            {
                if ((this.mUIACell6 == null))
                {
                    this.mUIACell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_6";
                    this.mUIACell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell6;
            }
        }
        
        public DXCell UIF1Cell
        {
            get
            {
                if ((this.mUIF1Cell == null))
                {
                    this.mUIF1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_6";
                    this.mUIF1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell;
            }
        }
        
        public DXCell UIACell7
        {
            get
            {
                if ((this.mUIACell7 == null))
                {
                    this.mUIACell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_6";
                    this.mUIACell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell7;
            }
        }
        
        public DXCell UIItem1030Cell
        {
            get
            {
                if ((this.mUIItem1030Cell == null))
                {
                    this.mUIItem1030Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1030Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle4";
                    this.mUIItem1030Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1030Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1030Cell;
            }
        }
        
        public DXCell UIItem1030Cell1
        {
            get
            {
                if ((this.mUIItem1030Cell1 == null))
                {
                    this.mUIItem1030Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1030Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]ColumnHandle4";
                    this.mUIItem1030Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1030Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1030Cell1;
            }
        }
        
        public DXCell UIInaktivlinjeCell
        {
            get
            {
                if ((this.mUIInaktivlinjeCell == null))
                {
                    this.mUIInaktivlinjeCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIInaktivlinjeCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]ColumnHandle5";
                    this.mUIInaktivlinjeCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIInaktivlinjeCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIInaktivlinjeCell;
            }
        }
        
        public DXCell UINCell4
        {
            get
            {
                if ((this.mUINCell4 == null))
                {
                    this.mUINCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_0";
                    this.mUINCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell4;
            }
        }
        
        public DXCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_5";
                    this.mUIItemCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell;
            }
        }
        
        public DXCell UINCell5
        {
            get
            {
                if ((this.mUINCell5 == null))
                {
                    this.mUINCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_14";
                    this.mUINCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell5;
            }
        }
        
        public DXCell UINCell6
        {
            get
            {
                if ((this.mUINCell6 == null))
                {
                    this.mUINCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]10[Column]RosterCell_10";
                    this.mUINCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell6;
            }
        }
        
        public DXCell UIGrunnlinjeFilterogViCell
        {
            get
            {
                if ((this.mUIGrunnlinjeFilterogViCell == null))
                {
                    this.mUIGrunnlinjeFilterogViCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGrunnlinjeFilterogViCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle5-2";
                    this.mUIGrunnlinjeFilterogViCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGrunnlinjeFilterogViCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGrunnlinjeFilterogViCell;
            }
        }
        
        public DXCell UIFraplanHjelpeplanforCell
        {
            get
            {
                if ((this.mUIFraplanHjelpeplanforCell == null))
                {
                    this.mUIFraplanHjelpeplanforCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraplanHjelpeplanforCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]ColumnHandle5-2";
                    this.mUIFraplanHjelpeplanforCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraplanHjelpeplanforCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraplanHjelpeplanforCell;
            }
        }
        
        public DXCell UIFraplanOverlappendepCell
        {
            get
            {
                if ((this.mUIFraplanOverlappendepCell == null))
                {
                    this.mUIFraplanOverlappendepCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraplanOverlappendepCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]ColumnHandle5-2";
                    this.mUIFraplanOverlappendepCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraplanOverlappendepCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraplanOverlappendepCell;
            }
        }
        
        public DXCell UIFraplanKalenderplanCell
        {
            get
            {
                if ((this.mUIFraplanKalenderplanCell == null))
                {
                    this.mUIFraplanKalenderplanCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraplanKalenderplanCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]ColumnHandle5-2";
                    this.mUIFraplanKalenderplanCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraplanKalenderplanCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraplanKalenderplanCell;
            }
        }
        
        public DXCell UISvendsenSveinCell1
        {
            get
            {
                if ((this.mUISvendsenSveinCell1 == null))
                {
                    this.mUISvendsenSveinCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUISvendsenSveinCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]24[Column]ColumnHandle1";
                    this.mUISvendsenSveinCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISvendsenSveinCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISvendsenSveinCell1;
            }
        }
        
        public DXCell UIGrunnlinjeFilterogViCell1
        {
            get
            {
                if ((this.mUIGrunnlinjeFilterogViCell1 == null))
                {
                    this.mUIGrunnlinjeFilterogViCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGrunnlinjeFilterogViCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]24[Column]ColumnHandle5-2";
                    this.mUIGrunnlinjeFilterogViCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGrunnlinjeFilterogViCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGrunnlinjeFilterogViCell1;
            }
        }
        
        public DXCell UIFraplanOverlappplantCell
        {
            get
            {
                if ((this.mUIFraplanOverlappplantCell == null))
                {
                    this.mUIFraplanOverlappplantCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraplanOverlappplantCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]25[Column]ColumnHandle5-2";
                    this.mUIFraplanOverlappplantCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraplanOverlappplantCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraplanOverlappplantCell;
            }
        }
        
        public DXCell UIGrunnlinjeFilterogViCell2
        {
            get
            {
                if ((this.mUIGrunnlinjeFilterogViCell2 == null))
                {
                    this.mUIGrunnlinjeFilterogViCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGrunnlinjeFilterogViCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]12[Column]ColumnHandle5-2";
                    this.mUIGrunnlinjeFilterogViCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGrunnlinjeFilterogViCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGrunnlinjeFilterogViCell2;
            }
        }
        
        public DXCell UIFraplanKalenderplanCell1
        {
            get
            {
                if ((this.mUIFraplanKalenderplanCell1 == null))
                {
                    this.mUIFraplanKalenderplanCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraplanKalenderplanCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]13[Column]ColumnHandle5-2";
                    this.mUIFraplanKalenderplanCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraplanKalenderplanCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraplanKalenderplanCell1;
            }
        }
        
        public DXCell UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_0";
                    this.mUIItemCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell1;
            }
        }
        
        public DXCell UIItemCell2
        {
            get
            {
                if ((this.mUIItemCell2 == null))
                {
                    this.mUIItemCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_0";
                    this.mUIItemCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell2;
            }
        }
        
        public DXCell UIItemCell3
        {
            get
            {
                if ((this.mUIItemCell3 == null))
                {
                    this.mUIItemCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_7";
                    this.mUIItemCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell3;
            }
        }
        
        public DXCell UIItemCell4
        {
            get
            {
                if ((this.mUIItemCell4 == null))
                {
                    this.mUIItemCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_7";
                    this.mUIItemCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell4;
            }
        }
        
        public DXCell UIItemCell5
        {
            get
            {
                if ((this.mUIItemCell5 == null))
                {
                    this.mUIItemCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_7";
                    this.mUIItemCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell5;
            }
        }
        
        public DXCell UIF3Cell
        {
            get
            {
                if ((this.mUIF3Cell == null))
                {
                    this.mUIF3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIF3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]25[Column]RosterCell_0";
                    this.mUIF3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF3Cell;
            }
        }
        
        public DXCell UIItemCell6
        {
            get
            {
                if ((this.mUIItemCell6 == null))
                {
                    this.mUIItemCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]25[Column]RosterCell_3";
                    this.mUIItemCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell6;
            }
        }
        
        public DXCell UIVAKTCell
        {
            get
            {
                if ((this.mUIVAKTCell == null))
                {
                    this.mUIVAKTCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIVAKTCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]25[Column]RosterCell_7";
                    this.mUIVAKTCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIVAKTCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIVAKTCell;
            }
        }
        
        public DXCell UIHJ1Cell
        {
            get
            {
                if ((this.mUIHJ1Cell == null))
                {
                    this.mUIHJ1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHJ1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]25[Column]RosterCell_15";
                    this.mUIHJ1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHJ1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHJ1Cell;
            }
        }
        
        public DXCell UIF1Cell1
        {
            get
            {
                if ((this.mUIF1Cell1 == null))
                {
                    this.mUIF1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_9";
                    this.mUIF1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell1;
            }
        }
        
        public DXCell UIGV1Cell
        {
            get
            {
                if ((this.mUIGV1Cell == null))
                {
                    this.mUIGV1Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_13";
                    this.mUIGV1Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell;
            }
        }
        
        public DXCell UIACell8
        {
            get
            {
                if ((this.mUIACell8 == null))
                {
                    this.mUIACell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIACell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_17";
                    this.mUIACell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIACell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIACell8;
            }
        }
        
        public DXCell UIF1Cell2
        {
            get
            {
                if ((this.mUIF1Cell2 == null))
                {
                    this.mUIF1Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_20";
                    this.mUIF1Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell2;
            }
        }
        
        public DXCell UIGV3Cell
        {
            get
            {
                if ((this.mUIGV3Cell == null))
                {
                    this.mUIGV3Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV3Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]25[Column]RosterCell_1";
                    this.mUIGV3Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV3Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV3Cell;
            }
        }
        
        public DXCell UIGV3Cell1
        {
            get
            {
                if ((this.mUIGV3Cell1 == null))
                {
                    this.mUIGV3Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV3Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]25[Column]RosterCell_2";
                    this.mUIGV3Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV3Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV3Cell1;
            }
        }
        
        public DXCell UIItemCell7
        {
            get
            {
                if ((this.mUIItemCell7 == null))
                {
                    this.mUIItemCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]25[Column]RosterCell_20";
                    this.mUIItemCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell7;
            }
        }
        
        public DXColumnHeader UICol_Calc_TotalSum_1ColumnHeader
        {
            get
            {
                if ((this.mUICol_Calc_TotalSum_1ColumnHeader == null))
                {
                    this.mUICol_Calc_TotalSum_1ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUICol_Calc_TotalSum_1ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]Col_Calc_TotalSum_1";
                    this.mUICol_Calc_TotalSum_1ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUICol_Calc_TotalSum_1ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUICol_Calc_TotalSum_1ColumnHeader;
            }
        }
        
        public DXColumnHeader UICol_Calc_TotalSum_2ColumnHeader
        {
            get
            {
                if ((this.mUICol_Calc_TotalSum_2ColumnHeader == null))
                {
                    this.mUICol_Calc_TotalSum_2ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUICol_Calc_TotalSum_2ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]Col_Calc_TotalSum_2";
                    this.mUICol_Calc_TotalSum_2ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUICol_Calc_TotalSum_2ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUICol_Calc_TotalSum_2ColumnHeader;
            }
        }
        
        public DXColumnHeader UICol_Calc_TotalSum_3ColumnHeader
        {
            get
            {
                if ((this.mUICol_Calc_TotalSum_3ColumnHeader == null))
                {
                    this.mUICol_Calc_TotalSum_3ColumnHeader = new DXColumnHeader(this);
                    #region Search Criteria
                    this.mUICol_Calc_TotalSum_3ColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlColumnHeader[View]gvRosterPlan[Column]Col_Calc_TotalSum_3";
                    this.mUICol_Calc_TotalSum_3ColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlColumnHeader";
                    this.mUICol_Calc_TotalSum_3ColumnHeader.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUICol_Calc_TotalSum_3ColumnHeader;
            }
        }
        
        public DXCell UIItem18Cell
        {
            get
            {
                if ((this.mUIItem18Cell == null))
                {
                    this.mUIItem18Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem18Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_Calc_TotalSum_1";
                    this.mUIItem18Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem18Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem18Cell;
            }
        }
        
        public DXCell UIItem18Cell1
        {
            get
            {
                if ((this.mUIItem18Cell1 == null))
                {
                    this.mUIItem18Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem18Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_Calc_TotalSum_2";
                    this.mUIItem18Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem18Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem18Cell1;
            }
        }
        
        public DXCell UIItem16Cell
        {
            get
            {
                if ((this.mUIItem16Cell == null))
                {
                    this.mUIItem16Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem16Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]Col_Calc_TotalSum_3";
                    this.mUIItem16Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem16Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem16Cell;
            }
        }
        
        public DXCell UIItemCell8
        {
            get
            {
                if ((this.mUIItemCell8 == null))
                {
                    this.mUIItemCell8 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_20";
                    this.mUIItemCell8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell8.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell8;
            }
        }
        
        public DXCell UIItemCell9
        {
            get
            {
                if ((this.mUIItemCell9 == null))
                {
                    this.mUIItemCell9 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_20";
                    this.mUIItemCell9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell9.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell9;
            }
        }
        
        public DXCell UIF1Cell3
        {
            get
            {
                if ((this.mUIF1Cell3 == null))
                {
                    this.mUIF1Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]24[Column]RosterCell_1";
                    this.mUIF1Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell3;
            }
        }
        
        public DXCell UIHJ1Cell1
        {
            get
            {
                if ((this.mUIHJ1Cell1 == null))
                {
                    this.mUIHJ1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIHJ1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]25[Column]RosterCell_14";
                    this.mUIHJ1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHJ1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHJ1Cell1;
            }
        }
        
        public DXCell UIItem14Cell
        {
            get
            {
                if ((this.mUIItem14Cell == null))
                {
                    this.mUIItem14Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle35";
                    this.mUIItem14Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem14Cell;
            }
        }
        
        public DXCell UIItem13Cell
        {
            get
            {
                if ((this.mUIItem13Cell == null))
                {
                    this.mUIItem13Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem13Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]ColumnHandle35";
                    this.mUIItem13Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem13Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem13Cell;
            }
        }
        
        public DXCell UIItem14Cell1
        {
            get
            {
                if ((this.mUIItem14Cell1 == null))
                {
                    this.mUIItem14Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]ColumnHandle35";
                    this.mUIItem14Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem14Cell1;
            }
        }
        
        public DXCell UIItem5210Cell
        {
            get
            {
                if ((this.mUIItem5210Cell == null))
                {
                    this.mUIItem5210Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5210Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]ColumnHandle4";
                    this.mUIItem5210Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5210Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5210Cell;
            }
        }
        
        public DXCell UIDCell5
        {
            get
            {
                if ((this.mUIDCell5 == null))
                {
                    this.mUIDCell5 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell5.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_2";
                    this.mUIDCell5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell5.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell5;
            }
        }
        
        public DXCell UIDCell6
        {
            get
            {
                if ((this.mUIDCell6 == null))
                {
                    this.mUIDCell6 = new DXCell(this);
                    #region Search Criteria
                    this.mUIDCell6.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_3";
                    this.mUIDCell6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIDCell6.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDCell6;
            }
        }
        
        public DXCell UINCell7
        {
            get
            {
                if ((this.mUINCell7 == null))
                {
                    this.mUINCell7 = new DXCell(this);
                    #region Search Criteria
                    this.mUINCell7.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]RosterCell_9";
                    this.mUINCell7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINCell7.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINCell7;
            }
        }
        
        public DXCell UIGV1Cell1
        {
            get
            {
                if ((this.mUIGV1Cell1 == null))
                {
                    this.mUIGV1Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGV1Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_10";
                    this.mUIGV1Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGV1Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGV1Cell1;
            }
        }
        
        public DXCell UIItemCell10
        {
            get
            {
                if ((this.mUIItemCell10 == null))
                {
                    this.mUIItemCell10 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_16";
                    this.mUIItemCell10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell10.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell10;
            }
        }
        
        public DXCell UIF1Cell4
        {
            get
            {
                if ((this.mUIF1Cell4 == null))
                {
                    this.mUIF1Cell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIF1Cell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_13";
                    this.mUIF1Cell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIF1Cell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIF1Cell4;
            }
        }
        
        public DXCell UIGrunnlinjeFilterogViCell3
        {
            get
            {
                if ((this.mUIGrunnlinjeFilterogViCell3 == null))
                {
                    this.mUIGrunnlinjeFilterogViCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGrunnlinjeFilterogViCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]ColumnHandle5";
                    this.mUIGrunnlinjeFilterogViCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGrunnlinjeFilterogViCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGrunnlinjeFilterogViCell3;
            }
        }
        
        public DXCell UIFraplanHjelpeplanforCell1
        {
            get
            {
                if ((this.mUIFraplanHjelpeplanforCell1 == null))
                {
                    this.mUIFraplanHjelpeplanforCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraplanHjelpeplanforCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]ColumnHandle5";
                    this.mUIFraplanHjelpeplanforCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraplanHjelpeplanforCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraplanHjelpeplanforCell1;
            }
        }
        
        public DXCell UIFraplanOverlappendepCell1
        {
            get
            {
                if ((this.mUIFraplanOverlappendepCell1 == null))
                {
                    this.mUIFraplanOverlappendepCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraplanOverlappendepCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]ColumnHandle5";
                    this.mUIFraplanOverlappendepCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraplanOverlappendepCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraplanOverlappendepCell1;
            }
        }
        
        public DXCell UIFraplanKalenderplanCell2
        {
            get
            {
                if ((this.mUIFraplanKalenderplanCell2 == null))
                {
                    this.mUIFraplanKalenderplanCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraplanKalenderplanCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]ColumnHandle5";
                    this.mUIFraplanKalenderplanCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraplanKalenderplanCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraplanKalenderplanCell2;
            }
        }
        
        public DXCell UIItemCell11
        {
            get
            {
                if ((this.mUIItemCell11 == null))
                {
                    this.mUIItemCell11 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]RosterCell_14";
                    this.mUIItemCell11.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell11.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell11;
            }
        }
        
        public DXCell UIItemCell12
        {
            get
            {
                if ((this.mUIItemCell12 == null))
                {
                    this.mUIItemCell12 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]RosterCell_14";
                    this.mUIItemCell12.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell12.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell12;
            }
        }
        
        public DXCell UIItemCell13
        {
            get
            {
                if ((this.mUIItemCell13 == null))
                {
                    this.mUIItemCell13 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]RosterCell_14";
                    this.mUIItemCell13.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItemCell13.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItemCell13;
            }
        }
        
        public DXCell UIItem1030Cell2
        {
            get
            {
                if ((this.mUIItem1030Cell2 == null))
                {
                    this.mUIItem1030Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1030Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]24[Column]ColumnHandle4";
                    this.mUIItem1030Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1030Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1030Cell2;
            }
        }
        
        public DXCell UIItem1030Cell3
        {
            get
            {
                if ((this.mUIItem1030Cell3 == null))
                {
                    this.mUIItem1030Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem1030Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]25[Column]ColumnHandle4";
                    this.mUIItem1030Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem1030Cell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1030Cell3;
            }
        }
        
        public DXCell UIFraplanOverlappplantCell1
        {
            get
            {
                if ((this.mUIFraplanOverlappplantCell1 == null))
                {
                    this.mUIFraplanOverlappplantCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraplanOverlappplantCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]25[Column]ColumnHandle5";
                    this.mUIFraplanOverlappplantCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraplanOverlappplantCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraplanOverlappplantCell1;
            }
        }
        
        public DXCell UIGrunnlinjeFilterogViCell4
        {
            get
            {
                if ((this.mUIGrunnlinjeFilterogViCell4 == null))
                {
                    this.mUIGrunnlinjeFilterogViCell4 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGrunnlinjeFilterogViCell4.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]24[Column]ColumnHandle5";
                    this.mUIGrunnlinjeFilterogViCell4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGrunnlinjeFilterogViCell4.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGrunnlinjeFilterogViCell4;
            }
        }
        
        public DXCell UIItem14Cell2
        {
            get
            {
                if ((this.mUIItem14Cell2 == null))
                {
                    this.mUIItem14Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]24[Column]ColumnHandle35";
                    this.mUIItem14Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem14Cell2;
            }
        }
        
        public DXCell UIGrunnlinjeOverlappenCell
        {
            get
            {
                if ((this.mUIGrunnlinjeOverlappenCell == null))
                {
                    this.mUIGrunnlinjeOverlappenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGrunnlinjeOverlappenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]0[Column]SubLineType";
                    this.mUIGrunnlinjeOverlappenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGrunnlinjeOverlappenCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGrunnlinjeOverlappenCell;
            }
        }
        
        public DXCell UIFraplanHjelpeplanforCell2
        {
            get
            {
                if ((this.mUIFraplanHjelpeplanforCell2 == null))
                {
                    this.mUIFraplanHjelpeplanforCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraplanHjelpeplanforCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]1[Column]SubLineType";
                    this.mUIFraplanHjelpeplanforCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraplanHjelpeplanforCell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraplanHjelpeplanforCell2;
            }
        }
        
        public DXCell UIFraplanKalenderplanCell3
        {
            get
            {
                if ((this.mUIFraplanKalenderplanCell3 == null))
                {
                    this.mUIFraplanKalenderplanCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIFraplanKalenderplanCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]2[Column]SubLineType";
                    this.mUIFraplanKalenderplanCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFraplanKalenderplanCell3.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFraplanKalenderplanCell3;
            }
        }
        
        public DXCell UIFravaktbokCell
        {
            get
            {
                if ((this.mUIFravaktbokCell == null))
                {
                    this.mUIFravaktbokCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFravaktbokCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcRosterPlanGridControlCell[View]gvRosterPlan[Row]3[Column]SubLineType";
                    this.mUIFravaktbokCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFravaktbokCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFravaktbokCell;
            }
        }
        #endregion
        
        #region Fields
        private DXColumnHeader mUIColumnHandle35ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle1ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle4ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle17ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle5ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle122ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle82ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle142ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle16ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle15ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle11ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle19ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle20ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle26ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle21ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle38ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle29ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle22ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle23ColumnHeader;
        
        private DXColumnHeader mUIColumnHandle30ColumnHeader;
        
        private DXCell mUIAnderssonEbbaCell;
        
        private DXCell mUIBrinkJörgenCell;
        
        private DXCell mUIBurmanJensCell;
        
        private DXCell mUIElofssonPerCell;
        
        private DXCell mUIFalkHannaCell;
        
        private DXCell mUIFredrikssonMathiasCell;
        
        private DXCell mUIHaagAnnaCell;
        
        private DXCell mUIHalfarssonCalleCell;
        
        private DXCell mUIHellnerMarcusCell;
        
        private DXCell mUIIngemarsdotterIdaCell;
        
        private DXCell mUIPettersenPetraCell;
        
        private DXCell mUIRosenquistRuthCell;
        
        private DXCell mUISvendsenSveinCell;
        
        private DXColumnHeader mUIColumnHandle52ColumnHeader;
        
        private DXCell mUIACell;
        
        private DXCell mUIACell1;
        
        private DXCell mUIACell2;
        
        private DXCell mUINCell;
        
        private DXCell mUIACell3;
        
        private DXCell mUINCell1;
        
        private DXCell mUINCell2;
        
        private DXCell mUIDCell;
        
        private DXCell mUINCell3;
        
        private DXCell mUIDCell1;
        
        private DXCell mUIACell4;
        
        private DXCell mUIDCell2;
        
        private DXCell mUIACell5;
        
        private DXCell mUIDCell3;
        
        private DXCell mUIDCell4;
        
        private DXCell mUIACell6;
        
        private DXCell mUIF1Cell;
        
        private DXCell mUIACell7;
        
        private DXCell mUIItem1030Cell;
        
        private DXCell mUIItem1030Cell1;
        
        private DXCell mUIInaktivlinjeCell;
        
        private DXCell mUINCell4;
        
        private DXCell mUIItemCell;
        
        private DXCell mUINCell5;
        
        private DXCell mUINCell6;
        
        private DXCell mUIGrunnlinjeFilterogViCell;
        
        private DXCell mUIFraplanHjelpeplanforCell;
        
        private DXCell mUIFraplanOverlappendepCell;
        
        private DXCell mUIFraplanKalenderplanCell;
        
        private DXCell mUISvendsenSveinCell1;
        
        private DXCell mUIGrunnlinjeFilterogViCell1;
        
        private DXCell mUIFraplanOverlappplantCell;
        
        private DXCell mUIGrunnlinjeFilterogViCell2;
        
        private DXCell mUIFraplanKalenderplanCell1;
        
        private DXCell mUIItemCell1;
        
        private DXCell mUIItemCell2;
        
        private DXCell mUIItemCell3;
        
        private DXCell mUIItemCell4;
        
        private DXCell mUIItemCell5;
        
        private DXCell mUIF3Cell;
        
        private DXCell mUIItemCell6;
        
        private DXCell mUIVAKTCell;
        
        private DXCell mUIHJ1Cell;
        
        private DXCell mUIF1Cell1;
        
        private DXCell mUIGV1Cell;
        
        private DXCell mUIACell8;
        
        private DXCell mUIF1Cell2;
        
        private DXCell mUIGV3Cell;
        
        private DXCell mUIGV3Cell1;
        
        private DXCell mUIItemCell7;
        
        private DXColumnHeader mUICol_Calc_TotalSum_1ColumnHeader;
        
        private DXColumnHeader mUICol_Calc_TotalSum_2ColumnHeader;
        
        private DXColumnHeader mUICol_Calc_TotalSum_3ColumnHeader;
        
        private DXCell mUIItem18Cell;
        
        private DXCell mUIItem18Cell1;
        
        private DXCell mUIItem16Cell;
        
        private DXCell mUIItemCell8;
        
        private DXCell mUIItemCell9;
        
        private DXCell mUIF1Cell3;
        
        private DXCell mUIHJ1Cell1;
        
        private DXCell mUIItem14Cell;
        
        private DXCell mUIItem13Cell;
        
        private DXCell mUIItem14Cell1;
        
        private DXCell mUIItem5210Cell;
        
        private DXCell mUIDCell5;
        
        private DXCell mUIDCell6;
        
        private DXCell mUINCell7;
        
        private DXCell mUIGV1Cell1;
        
        private DXCell mUIItemCell10;
        
        private DXCell mUIF1Cell4;
        
        private DXCell mUIGrunnlinjeFilterogViCell3;
        
        private DXCell mUIFraplanHjelpeplanforCell1;
        
        private DXCell mUIFraplanOverlappendepCell1;
        
        private DXCell mUIFraplanKalenderplanCell2;
        
        private DXCell mUIItemCell11;
        
        private DXCell mUIItemCell12;
        
        private DXCell mUIItemCell13;
        
        private DXCell mUIItem1030Cell2;
        
        private DXCell mUIItem1030Cell3;
        
        private DXCell mUIFraplanOverlappplantCell1;
        
        private DXCell mUIGrunnlinjeFilterogViCell4;
        
        private DXCell mUIItem14Cell2;
        
        private DXCell mUIGrunnlinjeOverlappenCell;
        
        private DXCell mUIFraplanHjelpeplanforCell2;
        
        private DXCell mUIFraplanKalenderplanCell3;
        
        private DXCell mUIFravaktbokCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UI_LayoutControl1Custom : DXTestControl
    {
        
        public UI_LayoutControl1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "_LayoutControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcGroupMainLayoutGroup UILcGroupMainLayoutGroup
        {
            get
            {
                if ((this.mUILcGroupMainLayoutGroup == null))
                {
                    this.mUILcGroupMainLayoutGroup = new UILcGroupMainLayoutGroup(this);
                }
                return this.mUILcGroupMainLayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILcGroupMainLayoutGroup mUILcGroupMainLayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcGroupMainLayoutGroup : DXBaseLayoutItem
    {
        
        public UILcGroupMainLayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcGroupMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILciFindLayoutControlItem UILciFindLayoutControlItem
        {
            get
            {
                if ((this.mUILciFindLayoutControlItem == null))
                {
                    this.mUILciFindLayoutControlItem = new UILciFindLayoutControlItem(this);
                }
                return this.mUILciFindLayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILciFindLayoutControlItem mUILciFindLayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILciFindLayoutControlItem : DXBaseLayoutItem
    {
        
        public UILciFindLayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lciFind";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXMRUEdit UI_TeFindMRUEdit
        {
            get
            {
                if ((this.mUI_TeFindMRUEdit == null))
                {
                    this.mUI_TeFindMRUEdit = new DXMRUEdit(this);
                    #region Search Criteria
                    this.mUI_TeFindMRUEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "_TeFind";
                    this.mUI_TeFindMRUEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MRUEdit";
                    this.mUI_TeFindMRUEdit.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUI_TeFindMRUEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXMRUEdit mUI_TeFindMRUEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRosterPlanGridMenu1Custom : DXTestControl
    {
        
        public UIRosterPlanGridMenu1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rosterPlanGridMenu1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RosterPlanGridMenu";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRcMenuRibbon UIRcMenuRibbon
        {
            get
            {
                if ((this.mUIRcMenuRibbon == null))
                {
                    this.mUIRcMenuRibbon = new UIRcMenuRibbon(this);
                }
                return this.mUIRcMenuRibbon;
            }
        }
        #endregion
        
        #region Fields
        private UIRcMenuRibbon mUIRcMenuRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRcMenuRibbon : DXRibbon
    {
        
        public UIRcMenuRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpFilterRibbonPage UIRpFilterRibbonPage
        {
            get
            {
                if ((this.mUIRpFilterRibbonPage == null))
                {
                    this.mUIRpFilterRibbonPage = new UIRpFilterRibbonPage(this);
                }
                return this.mUIRpFilterRibbonPage;
            }
        }
        
        public UIPopupContainerEditPopupEdit UIPopupContainerEditPopupEdit
        {
            get
            {
                if ((this.mUIPopupContainerEditPopupEdit == null))
                {
                    this.mUIPopupContainerEditPopupEdit = new UIPopupContainerEditPopupEdit(this);
                }
                return this.mUIPopupContainerEditPopupEdit;
            }
        }
        
        public UIRpPlanRibbonPage UIRpPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpPlanRibbonPage == null))
                {
                    this.mUIRpPlanRibbonPage = new UIRpPlanRibbonPage(this);
                }
                return this.mUIRpPlanRibbonPage;
            }
        }
        
        public UIRpRosterPlanRibbonPage UIRpRosterPlanRibbonPage
        {
            get
            {
                if ((this.mUIRpRosterPlanRibbonPage == null))
                {
                    this.mUIRpRosterPlanRibbonPage = new UIRpRosterPlanRibbonPage(this);
                }
                return this.mUIRpRosterPlanRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpFilterRibbonPage mUIRpFilterRibbonPage;
        
        private UIPopupContainerEditPopupEdit mUIPopupContainerEditPopupEdit;
        
        private UIRpPlanRibbonPage mUIRpPlanRibbonPage;
        
        private UIRpRosterPlanRibbonPage mUIRpRosterPlanRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpFilterRibbonPage : DXRibbonPage
    {
        
        public UIRpFilterRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpgEmployeeFilterFilRibbonPageGroup UIRpgEmployeeFilterFilRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgEmployeeFilterFilRibbonPageGroup == null))
                {
                    this.mUIRpgEmployeeFilterFilRibbonPageGroup = new UIRpgEmployeeFilterFilRibbonPageGroup(this);
                }
                return this.mUIRpgEmployeeFilterFilRibbonPageGroup;
            }
        }
        
        public UIRpgFilterRibbonPageGroup UIRpgFilterRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgFilterRibbonPageGroup == null))
                {
                    this.mUIRpgFilterRibbonPageGroup = new UIRpgFilterRibbonPageGroup(this);
                }
                return this.mUIRpgFilterRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgEmployeeFilterFilRibbonPageGroup mUIRpgEmployeeFilterFilRibbonPageGroup;
        
        private UIRpgFilterRibbonPageGroup mUIRpgFilterRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpgEmployeeFilterFilRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgEmployeeFilterFilRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgEmployeeFilterFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonButtonItem UIPåAvRibbonBaseButtonItem
        {
            get
            {
                if ((this.mUIPåAvRibbonBaseButtonItem == null))
                {
                    this.mUIPåAvRibbonBaseButtonItem = new DXRibbonButtonItem(this);
                    #region Search Criteria
                    this.mUIPåAvRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarCheckItemLink[0]";
                    this.mUIPåAvRibbonBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonBaseButtonItem";
                    this.mUIPåAvRibbonBaseButtonItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIPåAvRibbonBaseButtonItem;
            }
        }
        
        public UIRibbonGalleryBarItemRibbonGallery UIRibbonGalleryBarItemRibbonGallery
        {
            get
            {
                if ((this.mUIRibbonGalleryBarItemRibbonGallery == null))
                {
                    this.mUIRibbonGalleryBarItemRibbonGallery = new UIRibbonGalleryBarItemRibbonGallery(this);
                }
                return this.mUIRibbonGalleryBarItemRibbonGallery;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonButtonItem mUIPåAvRibbonBaseButtonItem;
        
        private UIRibbonGalleryBarItemRibbonGallery mUIRibbonGalleryBarItemRibbonGallery;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonGalleryBarItemRibbonGallery : DXTestControl
    {
        
        public UIRibbonGalleryBarItemRibbonGallery(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RibbonGalleryBarItemLink[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonGallery";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIRibbonGalleryDropDowButton
        {
            get
            {
                if ((this.mUIRibbonGalleryDropDowButton == null))
                {
                    this.mUIRibbonGalleryDropDowButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIRibbonGalleryDropDowButton.SearchProperties[DXTestControl.PropertyNames.Name] = "RibbonGalleryDropDownButton";
                    this.mUIRibbonGalleryDropDowButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonGalleryDropDownButton";
                    this.mUIRibbonGalleryDropDowButton.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRibbonGalleryDropDowButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIRibbonGalleryDropDowButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpgFilterRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgFilterRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXRibbonEditItem UIDdlFilterRibbonEditItem
        {
            get
            {
                if ((this.mUIDdlFilterRibbonEditItem == null))
                {
                    this.mUIDdlFilterRibbonEditItem = new DXRibbonEditItem(this);
                    #region Search Criteria
                    this.mUIDdlFilterRibbonEditItem.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlFilter";
                    this.mUIDdlFilterRibbonEditItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonEditItem";
                    this.mUIDdlFilterRibbonEditItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDdlFilterRibbonEditItem;
            }
        }
        
        public DXRibbonEditItem UIDdlOtherDepFilterRibbonEditItem
        {
            get
            {
                if ((this.mUIDdlOtherDepFilterRibbonEditItem == null))
                {
                    this.mUIDdlOtherDepFilterRibbonEditItem = new DXRibbonEditItem(this);
                    #region Search Criteria
                    this.mUIDdlOtherDepFilterRibbonEditItem.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlOtherDepFilter";
                    this.mUIDdlOtherDepFilterRibbonEditItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonEditItem";
                    this.mUIDdlOtherDepFilterRibbonEditItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIDdlOtherDepFilterRibbonEditItem;
            }
        }
        #endregion
        
        #region Fields
        private DXRibbonEditItem mUIDdlFilterRibbonEditItem;
        
        private DXRibbonEditItem mUIDdlOtherDepFilterRibbonEditItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerEditPopupEdit : DXPopupEdit
    {
        
        public UIPopupContainerEditPopupEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenuPopupContainerEdit[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPopupContainerFormWindow UIPopupContainerFormWindow
        {
            get
            {
                if ((this.mUIPopupContainerFormWindow == null))
                {
                    this.mUIPopupContainerFormWindow = new UIPopupContainerFormWindow(this);
                }
                return this.mUIPopupContainerFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupContainerFormWindow mUIPopupContainerFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerFormWindow : DXWindow
    {
        
        public UIPopupContainerFormWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenuPopupContainerEdit[0]PopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerForm";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDdlFilterPopupContaiClient UIDdlFilterPopupContaiClient
        {
            get
            {
                if ((this.mUIDdlFilterPopupContaiClient == null))
                {
                    this.mUIDdlFilterPopupContaiClient = new UIDdlFilterPopupContaiClient(this);
                }
                return this.mUIDdlFilterPopupContaiClient;
            }
        }
        
        public DXButton UIAvbrytButton
        {
            get
            {
                if ((this.mUIAvbrytButton == null))
                {
                    this.mUIAvbrytButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.Name] = "rcMenuPopupContainerEdit[0]PopupFormCloseButton[0]";
                    this.mUIAvbrytButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CloseButton";
                    this.mUIAvbrytButton.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAvbrytButton;
            }
        }
        
        public UIDdlOtherDepFilterPopClient UIDdlOtherDepFilterPopClient
        {
            get
            {
                if ((this.mUIDdlOtherDepFilterPopClient == null))
                {
                    this.mUIDdlOtherDepFilterPopClient = new UIDdlOtherDepFilterPopClient(this);
                }
                return this.mUIDdlOtherDepFilterPopClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDdlFilterPopupContaiClient mUIDdlFilterPopupContaiClient;
        
        private DXButton mUIAvbrytButton;
        
        private UIDdlOtherDepFilterPopClient mUIDdlOtherDepFilterPopClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDdlFilterPopupContaiClient : DXTestControl
    {
        
        public UIDdlFilterPopupContaiClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlFilterPopupContainerControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDdlFilterTreeListTreeList UIDdlFilterTreeListTreeList
        {
            get
            {
                if ((this.mUIDdlFilterTreeListTreeList == null))
                {
                    this.mUIDdlFilterTreeListTreeList = new UIDdlFilterTreeListTreeList(this);
                }
                return this.mUIDdlFilterTreeListTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UIDdlFilterTreeListTreeList mUIDdlFilterTreeListTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDdlFilterTreeListTreeList : DXTreeList
    {
        
        public UIDdlFilterTreeListTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlFilterTreeList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTreeList";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode1TreeListNode1 UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode1(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public UINode3TreeListNode1 UINode3TreeListNode
        {
            get
            {
                if ((this.mUINode3TreeListNode == null))
                {
                    this.mUINode3TreeListNode = new UINode3TreeListNode1(this);
                }
                return this.mUINode3TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode mUINode0TreeListNode;
        
        private UINode1TreeListNode1 mUINode1TreeListNode;
        
        private UINode3TreeListNode1 mUINode3TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode : DXTreeListNode
    {
        
        public UINode0TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode4TreeListNode UINode4TreeListNode
        {
            get
            {
                if ((this.mUINode4TreeListNode == null))
                {
                    this.mUINode4TreeListNode = new UINode4TreeListNode(this);
                }
                return this.mUINode4TreeListNode;
            }
        }
        
        public UINode3TreeListNode UINode3TreeListNode
        {
            get
            {
                if ((this.mUINode3TreeListNode == null))
                {
                    this.mUINode3TreeListNode = new UINode3TreeListNode(this);
                }
                return this.mUINode3TreeListNode;
            }
        }
        
        public UINode2TreeListNode UINode2TreeListNode
        {
            get
            {
                if ((this.mUINode2TreeListNode == null))
                {
                    this.mUINode2TreeListNode = new UINode2TreeListNode(this);
                }
                return this.mUINode2TreeListNode;
            }
        }
        
        public UINode1TreeListNode UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public DXTestControl UINode0TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode0TreeListNodeCheckBox == null))
                {
                    this.mUINode0TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode0TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
                    this.mUINode0TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode0TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode0TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private UINode4TreeListNode mUINode4TreeListNode;
        
        private UINode3TreeListNode mUINode3TreeListNode;
        
        private UINode2TreeListNode mUINode2TreeListNode;
        
        private UINode1TreeListNode mUINode1TreeListNode;
        
        private DXTestControl mUINode0TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode4TreeListNode : DXTreeListNode
    {
        
        public UINode4TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node4";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode4TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode4TreeListNodeCheckBox == null))
                {
                    this.mUINode4TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode4TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node4";
                    this.mUINode4TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode4TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode4TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode4TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode3TreeListNode : DXTreeListNode
    {
        
        public UINode3TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode3TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode3TreeListNodeCheckBox == null))
                {
                    this.mUINode3TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode3TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node3";
                    this.mUINode3TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode3TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode3TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode3TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode2TreeListNode : DXTreeListNode
    {
        
        public UINode2TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode2TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode2TreeListNodeCheckBox == null))
                {
                    this.mUINode2TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode2TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
                    this.mUINode2TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode2TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode2TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode2TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode : DXTreeListNode
    {
        
        public UINode1TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode1TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode1TreeListNodeCheckBox == null))
                {
                    this.mUINode1TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode1TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
                    this.mUINode1TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode1TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode1TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode1TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode1 : DXTreeListNode
    {
        
        public UINode1TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode1TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode1TreeListNodeCheckBox == null))
                {
                    this.mUINode1TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode1TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
                    this.mUINode1TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode1TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode1TreeListNodeCheckBox;
            }
        }
        
        public UINode5TreeListNode UINode5TreeListNode
        {
            get
            {
                if ((this.mUINode5TreeListNode == null))
                {
                    this.mUINode5TreeListNode = new UINode5TreeListNode(this);
                }
                return this.mUINode5TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode1TreeListNodeCheckBox;
        
        private UINode5TreeListNode mUINode5TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode5TreeListNode : DXTreeListNode
    {
        
        public UINode5TreeListNode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node5";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode5TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode5TreeListNodeCheckBox == null))
                {
                    this.mUINode5TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode5TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node5";
                    this.mUINode5TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode5TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode5TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode5TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode3TreeListNode1 : DXTreeListNode
    {
        
        public UINode3TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node3";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode1 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode1(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public DXTestControl UINode3TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode3TreeListNodeCheckBox == null))
                {
                    this.mUINode3TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode3TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node3";
                    this.mUINode3TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode3TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode3TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode1 mUINode0TreeListNode;
        
        private DXTestControl mUINode3TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode1 : DXTreeListNode
    {
        
        public UINode0TreeListNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode0TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode0TreeListNodeCheckBox == null))
                {
                    this.mUINode0TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode0TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
                    this.mUINode0TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode0TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode0TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode0TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDdlOtherDepFilterPopClient : DXTestControl
    {
        
        public UIDdlOtherDepFilterPopClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlOtherDepFilterPopupContainerControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPopupContainerControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDdlOtherDepFilterTreTreeList UIDdlOtherDepFilterTreTreeList
        {
            get
            {
                if ((this.mUIDdlOtherDepFilterTreTreeList == null))
                {
                    this.mUIDdlOtherDepFilterTreTreeList = new UIDdlOtherDepFilterTreTreeList(this);
                }
                return this.mUIDdlOtherDepFilterTreTreeList;
            }
        }
        #endregion
        
        #region Fields
        private UIDdlOtherDepFilterTreTreeList mUIDdlOtherDepFilterTreTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDdlOtherDepFilterTreTreeList : DXTreeList
    {
        
        public UIDdlOtherDepFilterTreTreeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ddlOtherDepFilterTreeList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSTreeList";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode1TreeListNode2 UINode1TreeListNode
        {
            get
            {
                if ((this.mUINode1TreeListNode == null))
                {
                    this.mUINode1TreeListNode = new UINode1TreeListNode2(this);
                }
                return this.mUINode1TreeListNode;
            }
        }
        
        public UINode0TreeListNode3 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode3(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        #endregion
        
        #region Fields
        private UINode1TreeListNode2 mUINode1TreeListNode;
        
        private UINode0TreeListNode3 mUINode0TreeListNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode2 : DXTreeListNode
    {
        
        public UINode1TreeListNode2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINode0TreeListNode2 UINode0TreeListNode
        {
            get
            {
                if ((this.mUINode0TreeListNode == null))
                {
                    this.mUINode0TreeListNode = new UINode0TreeListNode2(this);
                }
                return this.mUINode0TreeListNode;
            }
        }
        
        public UINode1TreeListNode11 UINode1TreeListNode1
        {
            get
            {
                if ((this.mUINode1TreeListNode1 == null))
                {
                    this.mUINode1TreeListNode1 = new UINode1TreeListNode11(this);
                }
                return this.mUINode1TreeListNode1;
            }
        }
        
        public DXTestControl UINode1TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode1TreeListNodeCheckBox == null))
                {
                    this.mUINode1TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode1TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
                    this.mUINode1TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode1TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode1TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private UINode0TreeListNode2 mUINode0TreeListNode;
        
        private UINode1TreeListNode11 mUINode1TreeListNode1;
        
        private DXTestControl mUINode1TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode2 : DXTreeListNode
    {
        
        public UINode0TreeListNode2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode0TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode0TreeListNodeCheckBox == null))
                {
                    this.mUINode0TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode0TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
                    this.mUINode0TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode0TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode0TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode0TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode1TreeListNode11 : DXTreeListNode
    {
        
        public UINode1TreeListNode11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode1TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode1TreeListNodeCheckBox == null))
                {
                    this.mUINode1TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode1TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
                    this.mUINode1TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode1TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode1TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode1TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINode0TreeListNode3 : DXTreeListNode
    {
        
        public UINode0TreeListNode3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UINode0TreeListNodeCheckBox
        {
            get
            {
                if ((this.mUINode0TreeListNodeCheckBox == null))
                {
                    this.mUINode0TreeListNodeCheckBox = new DXTestControl(this);
                    #region Search Criteria
                    this.mUINode0TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
                    this.mUINode0TreeListNodeCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeCheckBox";
                    this.mUINode0TreeListNodeCheckBox.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINode0TreeListNodeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUINode0TreeListNodeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpPlanRibbonPage : DXRibbonPage
    {
        
        public UIRpPlanRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpgEmployeeFilterPlaRibbonPageGroup UIRpgEmployeeFilterPlaRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgEmployeeFilterPlaRibbonPageGroup == null))
                {
                    this.mUIRpgEmployeeFilterPlaRibbonPageGroup = new UIRpgEmployeeFilterPlaRibbonPageGroup(this);
                }
                return this.mUIRpgEmployeeFilterPlaRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgEmployeeFilterPlaRibbonPageGroup mUIRpgEmployeeFilterPlaRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpgEmployeeFilterPlaRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgEmployeeFilterPlaRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgEmployeeFilterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRibbonGalleryBarItemRibbonGallery1 UIRibbonGalleryBarItemRibbonGallery
        {
            get
            {
                if ((this.mUIRibbonGalleryBarItemRibbonGallery == null))
                {
                    this.mUIRibbonGalleryBarItemRibbonGallery = new UIRibbonGalleryBarItemRibbonGallery1(this);
                }
                return this.mUIRibbonGalleryBarItemRibbonGallery;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonGalleryBarItemRibbonGallery1 mUIRibbonGalleryBarItemRibbonGallery;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonGalleryBarItemRibbonGallery1 : DXTestControl
    {
        
        public UIRibbonGalleryBarItemRibbonGallery1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RibbonGalleryBarItemLink[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonGallery";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UISistbrukteGalleryItemGroup UISistbrukteGalleryItemGroup
        {
            get
            {
                if ((this.mUISistbrukteGalleryItemGroup == null))
                {
                    this.mUISistbrukteGalleryItemGroup = new UISistbrukteGalleryItemGroup(this);
                }
                return this.mUISistbrukteGalleryItemGroup;
            }
        }
        #endregion
        
        #region Fields
        private UISistbrukteGalleryItemGroup mUISistbrukteGalleryItemGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISistbrukteGalleryItemGroup : DXTestControl
    {
        
        public UISistbrukteGalleryItemGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Sist brukte";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonGalleryGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXTestControl UIItem1030GalleryItem
        {
            get
            {
                if ((this.mUIItem1030GalleryItem == null))
                {
                    this.mUIItem1030GalleryItem = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIItem1030GalleryItem.SearchProperties[DXTestControl.PropertyNames.Name] = "1030";
                    this.mUIItem1030GalleryItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonGalleryItem";
                    this.mUIItem1030GalleryItem.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem1030GalleryItem;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIItem1030GalleryItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpRosterPlanRibbonPage : DXRibbonPage
    {
        
        public UIRpRosterPlanRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpRosterPlan";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRpgEmployeeFilterRibbonPageGroup UIRpgEmployeeFilterRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgEmployeeFilterRibbonPageGroup == null))
                {
                    this.mUIRpgEmployeeFilterRibbonPageGroup = new UIRpgEmployeeFilterRibbonPageGroup(this);
                }
                return this.mUIRpgEmployeeFilterRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgEmployeeFilterRibbonPageGroup mUIRpgEmployeeFilterRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpgEmployeeFilterRibbonPageGroup : DXRibbonPageGroup
    {
        
        public UIRpgEmployeeFilterRibbonPageGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgEmployeeFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIRibbonGalleryBarItemRibbonGallery2 UIRibbonGalleryBarItemRibbonGallery
        {
            get
            {
                if ((this.mUIRibbonGalleryBarItemRibbonGallery == null))
                {
                    this.mUIRibbonGalleryBarItemRibbonGallery = new UIRibbonGalleryBarItemRibbonGallery2(this);
                }
                return this.mUIRibbonGalleryBarItemRibbonGallery;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonGalleryBarItemRibbonGallery2 mUIRibbonGalleryBarItemRibbonGallery;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonGalleryBarItemRibbonGallery2 : DXTestControl
    {
        
        public UIRibbonGalleryBarItemRibbonGallery2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RibbonGalleryBarItemLink[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonGallery";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXButton UIRibbonGalleryDropDowButton
        {
            get
            {
                if ((this.mUIRibbonGalleryDropDowButton == null))
                {
                    this.mUIRibbonGalleryDropDowButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIRibbonGalleryDropDowButton.SearchProperties[DXTestControl.PropertyNames.Name] = "RibbonGalleryDropDownButton";
                    this.mUIRibbonGalleryDropDowButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonGalleryDropDownButton";
                    this.mUIRibbonGalleryDropDowButton.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRibbonGalleryDropDowButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIRibbonGalleryDropDowButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDpnlVisualizationDockPanel : DXDockPanel
    {
        
        public UIDpnlVisualizationDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dpnlVisualization";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIDockPanel3_ContainerCustom UIDockPanel3_ContainerCustom
        {
            get
            {
                if ((this.mUIDockPanel3_ContainerCustom == null))
                {
                    this.mUIDockPanel3_ContainerCustom = new UIDockPanel3_ContainerCustom(this);
                }
                return this.mUIDockPanel3_ContainerCustom;
            }
        }
        
        public DXTestControl UITopSeparator
        {
            get
            {
                if ((this.mUITopSeparator == null))
                {
                    this.mUITopSeparator = new DXTestControl(this);
                    #region Search Criteria
                    this.mUITopSeparator.SearchProperties[DXTestControl.PropertyNames.Name] = "Top";
                    this.mUITopSeparator.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DockPanelResizeZone";
                    this.mUITopSeparator.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUITopSeparator;
            }
        }
        #endregion
        
        #region Fields
        private UIDockPanel3_ContainerCustom mUIDockPanel3_ContainerCustom;
        
        private DXTestControl mUITopSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDockPanel3_ContainerCustom : DXTestControl
    {
        
        public UIDockPanel3_ContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "dockPanel3_Container";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UITcSubtabsTabList UITcSubtabsTabList
        {
            get
            {
                if ((this.mUITcSubtabsTabList == null))
                {
                    this.mUITcSubtabsTabList = new UITcSubtabsTabList(this);
                }
                return this.mUITcSubtabsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITcSubtabsTabList mUITcSubtabsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITcSubtabsTabList : DXTestControl
    {
        
        public UITcSubtabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabs";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TabControlViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGatsoftGatUIWindowsFClient UIGatsoftGatUIWindowsFClient
        {
            get
            {
                if ((this.mUIGatsoftGatUIWindowsFClient == null))
                {
                    this.mUIGatsoftGatUIWindowsFClient = new UIGatsoftGatUIWindowsFClient(this);
                }
                return this.mUIGatsoftGatUIWindowsFClient;
            }
        }
        
        public UIViewTabPageClient UIViewTabPageClient
        {
            get
            {
                if ((this.mUIViewTabPageClient == null))
                {
                    this.mUIViewTabPageClient = new UIViewTabPageClient(this);
                }
                return this.mUIViewTabPageClient;
            }
        }
        
        public UIViewTabPageClient1 UIViewTabPageClient1
        {
            get
            {
                if ((this.mUIViewTabPageClient1 == null))
                {
                    this.mUIViewTabPageClient1 = new UIViewTabPageClient1(this);
                }
                return this.mUIViewTabPageClient1;
            }
        }
        
        public UIViewTabPageClient2 UIViewTabPageClient2
        {
            get
            {
                if ((this.mUIViewTabPageClient2 == null))
                {
                    this.mUIViewTabPageClient2 = new UIViewTabPageClient2(this);
                }
                return this.mUIViewTabPageClient2;
            }
        }
        
        public UIViewTabPageClient3 UIViewTabPageClient3
        {
            get
            {
                if ((this.mUIViewTabPageClient3 == null))
                {
                    this.mUIViewTabPageClient3 = new UIViewTabPageClient3(this);
                }
                return this.mUIViewTabPageClient3;
            }
        }
        
        public UIViewTabPageClient4 UIViewTabPageClient4
        {
            get
            {
                if ((this.mUIViewTabPageClient4 == null))
                {
                    this.mUIViewTabPageClient4 = new UIViewTabPageClient4(this);
                }
                return this.mUIViewTabPageClient4;
            }
        }
        
        public UIViewTabPageClient5 UIViewTabPageClient5
        {
            get
            {
                if ((this.mUIViewTabPageClient5 == null))
                {
                    this.mUIViewTabPageClient5 = new UIViewTabPageClient5(this);
                }
                return this.mUIViewTabPageClient5;
            }
        }
        
        public UIViewTabPageClient6 UIViewTabPageClient6
        {
            get
            {
                if ((this.mUIViewTabPageClient6 == null))
                {
                    this.mUIViewTabPageClient6 = new UIViewTabPageClient6(this);
                }
                return this.mUIViewTabPageClient6;
            }
        }
        
        public UIViewTabPageClient7 UIViewTabPageClient7
        {
            get
            {
                if ((this.mUIViewTabPageClient7 == null))
                {
                    this.mUIViewTabPageClient7 = new UIViewTabPageClient7(this);
                }
                return this.mUIViewTabPageClient7;
            }
        }
        #endregion
        
        #region Fields
        private UIGatsoftGatUIWindowsFClient mUIGatsoftGatUIWindowsFClient;
        
        private UIViewTabPageClient mUIViewTabPageClient;
        
        private UIViewTabPageClient1 mUIViewTabPageClient1;
        
        private UIViewTabPageClient2 mUIViewTabPageClient2;
        
        private UIViewTabPageClient3 mUIViewTabPageClient3;
        
        private UIViewTabPageClient4 mUIViewTabPageClient4;
        
        private UIViewTabPageClient5 mUIViewTabPageClient5;
        
        private UIViewTabPageClient6 mUIViewTabPageClient6;
        
        private UIViewTabPageClient7 mUIViewTabPageClient7;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatsoftGatUIWindowsFClient : DXTestControl
    {
        
        public UIGatsoftGatUIWindowsFClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Gatsoft.Gat.UI.Windows.Forms.Planning.RosterPlanning.RosterPlanGrid.Subtabs.CostS" +
                "imulation.Views.CostSimulationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UICostSimulationViewCustom UICostSimulationViewCustom
        {
            get
            {
                if ((this.mUICostSimulationViewCustom == null))
                {
                    this.mUICostSimulationViewCustom = new UICostSimulationViewCustom(this);
                }
                return this.mUICostSimulationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UICostSimulationViewCustom mUICostSimulationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICostSimulationViewCustom : DXTestControl
    {
        
        public UICostSimulationViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CostSimulationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CostSimulationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGsSplitContainerContSplitContainerControl UIGsSplitContainerContSplitContainerControl
        {
            get
            {
                if ((this.mUIGsSplitContainerContSplitContainerControl == null))
                {
                    this.mUIGsSplitContainerContSplitContainerControl = new UIGsSplitContainerContSplitContainerControl(this);
                }
                return this.mUIGsSplitContainerContSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UIGsSplitContainerContSplitContainerControl mUIGsSplitContainerContSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsSplitContainerContSplitContainerControl : DXSplitContainerControl
    {
        
        public UIGsSplitContainerContSplitContainerControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSplitContainerControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UISplitGroupPanelClient UISplitGroupPanelClient
        {
            get
            {
                if ((this.mUISplitGroupPanelClient == null))
                {
                    this.mUISplitGroupPanelClient = new UISplitGroupPanelClient(this);
                }
                return this.mUISplitGroupPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UISplitGroupPanelClient mUISplitGroupPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISplitGroupPanelClient : DXTestControl
    {
        
        public UISplitGroupPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1SplitGroupPanel[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGsNavBarControl1NavBar UIGsNavBarControl1NavBar
        {
            get
            {
                if ((this.mUIGsNavBarControl1NavBar == null))
                {
                    this.mUIGsNavBarControl1NavBar = new UIGsNavBarControl1NavBar(this);
                }
                return this.mUIGsNavBarControl1NavBar;
            }
        }
        #endregion
        
        #region Fields
        private UIGsNavBarControl1NavBar mUIGsNavBarControl1NavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsNavBarControl1NavBar : DXNavBar
    {
        
        public UIGsNavBarControl1NavBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsNavBarControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINavBarGroupControlCoScrollableControl UINavBarGroupControlCoScrollableControl
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl = new UINavBarGroupControlCoScrollableControl(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl;
            }
        }
        #endregion
        
        #region Fields
        private UINavBarGroupControlCoScrollableControl mUINavBarGroupControlCoScrollableControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "navBarGroupControlContainer2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcEmployeeCostsTable UIGcEmployeeCostsTable
        {
            get
            {
                if ((this.mUIGcEmployeeCostsTable == null))
                {
                    this.mUIGcEmployeeCostsTable = new UIGcEmployeeCostsTable(this);
                }
                return this.mUIGcEmployeeCostsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcEmployeeCostsTable mUIGcEmployeeCostsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcEmployeeCostsTable : DXGrid
    {
        
        public UIGcEmployeeCostsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeeCosts";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIPettersenPetraCell
        {
            get
            {
                if ((this.mUIPettersenPetraCell == null))
                {
                    this.mUIPettersenPetraCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeeCostsGridControlCell[View]gvEmployeeCosts[Row]0[Column]gcolEmployeeName" +
                        "";
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIPettersenPetraCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIPettersenPetraCell;
            }
        }
        
        public DXCell UIRosenquistRuthCell
        {
            get
            {
                if ((this.mUIRosenquistRuthCell == null))
                {
                    this.mUIRosenquistRuthCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRosenquistRuthCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeeCostsGridControlCell[View]gvEmployeeCosts[Row]1[Column]gcolEmployeeName" +
                        "";
                    this.mUIRosenquistRuthCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRosenquistRuthCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRosenquistRuthCell;
            }
        }
        
        public DXCell UISvendsenSveinCell
        {
            get
            {
                if ((this.mUISvendsenSveinCell == null))
                {
                    this.mUISvendsenSveinCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISvendsenSveinCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeeCostsGridControlCell[View]gvEmployeeCosts[Row]2[Column]gcolEmployeeName" +
                        "";
                    this.mUISvendsenSveinCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISvendsenSveinCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISvendsenSveinCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIPettersenPetraCell;
        
        private DXCell mUIRosenquistRuthCell;
        
        private DXCell mUISvendsenSveinCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient : DXTestControl
    {
        
        public UIViewTabPageClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UISumDemandViewCustom UISumDemandViewCustom
        {
            get
            {
                if ((this.mUISumDemandViewCustom == null))
                {
                    this.mUISumDemandViewCustom = new UISumDemandViewCustom(this);
                }
                return this.mUISumDemandViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISumDemandViewCustom mUISumDemandViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISumDemandViewCustom : DXTestControl
    {
        
        public UISumDemandViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "SumDemandView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SumDemandView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPMainPanelClient UIPMainPanelClient
        {
            get
            {
                if ((this.mUIPMainPanelClient == null))
                {
                    this.mUIPMainPanelClient = new UIPMainPanelClient(this);
                }
                return this.mUIPMainPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPMainPanelClient mUIPMainPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPMainPanelClient : DXTestControl
    {
        
        public UIPMainPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pMainPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcSumDemandTable UIGcSumDemandTable
        {
            get
            {
                if ((this.mUIGcSumDemandTable == null))
                {
                    this.mUIGcSumDemandTable = new UIGcSumDemandTable(this);
                }
                return this.mUIGcSumDemandTable;
            }
        }
        
        public UIPTopPanelClient UIPTopPanelClient
        {
            get
            {
                if ((this.mUIPTopPanelClient == null))
                {
                    this.mUIPTopPanelClient = new UIPTopPanelClient(this);
                }
                return this.mUIPTopPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcSumDemandTable mUIGcSumDemandTable;
        
        private UIPTopPanelClient mUIPTopPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcSumDemandTable : DXGrid
    {
        
        public UIGcSumDemandTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemand";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIRedbolditalic13Cell
        {
            get
            {
                if ((this.mUIRedbolditalic13Cell == null))
                {
                    this.mUIRedbolditalic13Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRedbolditalic13Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]2[Column]RosterCell_2";
                    this.mUIRedbolditalic13Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRedbolditalic13Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRedbolditalic13Cell;
            }
        }
        
        public DXCell UIGreenbolditalic23Cell1
        {
            get
            {
                if ((this.mUIGreenbolditalic23Cell1 == null))
                {
                    this.mUIGreenbolditalic23Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGreenbolditalic23Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]5[Column]RosterCell_0";
                    this.mUIGreenbolditalic23Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGreenbolditalic23Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGreenbolditalic23Cell1;
            }
        }
        
        public DXCell UIGreenbolditalic23Cell
        {
            get
            {
                if ((this.mUIGreenbolditalic23Cell == null))
                {
                    this.mUIGreenbolditalic23Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGreenbolditalic23Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]3[Column]RosterCell_0";
                    this.mUIGreenbolditalic23Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGreenbolditalic23Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGreenbolditalic23Cell;
            }
        }
        
        public DXCell UIGreenbolditalic13Cell
        {
            get
            {
                if ((this.mUIGreenbolditalic13Cell == null))
                {
                    this.mUIGreenbolditalic13Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGreenbolditalic13Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]2[Column]RosterCell_3";
                    this.mUIGreenbolditalic13Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGreenbolditalic13Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGreenbolditalic13Cell;
            }
        }
        
        public DXCell UIGreenbold22Cell2
        {
            get
            {
                if ((this.mUIGreenbold22Cell2 == null))
                {
                    this.mUIGreenbold22Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGreenbold22Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]5[Column]RosterCell_6";
                    this.mUIGreenbold22Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGreenbold22Cell2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGreenbold22Cell2;
            }
        }
        
        public DXCell UIGreenbold22Cell1
        {
            get
            {
                if ((this.mUIGreenbold22Cell1 == null))
                {
                    this.mUIGreenbold22Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGreenbold22Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]2[Column]RosterCell_5";
                    this.mUIGreenbold22Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGreenbold22Cell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGreenbold22Cell1;
            }
        }
        
        public DXCell UIGreenbold22Cell
        {
            get
            {
                if ((this.mUIGreenbold22Cell == null))
                {
                    this.mUIGreenbold22Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGreenbold22Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]5[Column]RosterCell_4";
                    this.mUIGreenbold22Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGreenbold22Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGreenbold22Cell;
            }
        }
        
        public DXCell UIBoldFlereCell
        {
            get
            {
                if ((this.mUIBoldFlereCell == null))
                {
                    this.mUIBoldFlereCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBoldFlereCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]0[Column]Department";
                    this.mUIBoldFlereCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBoldFlereCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBoldFlereCell;
            }
        }
        
        public DXCell UIBluebolditalic23Cell
        {
            get
            {
                if ((this.mUIBluebolditalic23Cell == null))
                {
                    this.mUIBluebolditalic23Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBluebolditalic23Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]5[Column]RosterCell_1";
                    this.mUIBluebolditalic23Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBluebolditalic23Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBluebolditalic23Cell;
            }
        }
        
        public DXCell UIBluebolditalic13Cell
        {
            get
            {
                if ((this.mUIBluebolditalic13Cell == null))
                {
                    this.mUIBluebolditalic13Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBluebolditalic13Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]2[Column]RosterCell_4";
                    this.mUIBluebolditalic13Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBluebolditalic13Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBluebolditalic13Cell;
            }
        }
        
        public DXCell UIBluebolditalic10Cell
        {
            get
            {
                if ((this.mUIBluebolditalic10Cell == null))
                {
                    this.mUIBluebolditalic10Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBluebolditalic10Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]11[Column]RosterCell_6";
                    this.mUIBluebolditalic10Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBluebolditalic10Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBluebolditalic10Cell;
            }
        }
        
        public DXCell UIBluebold21Cell
        {
            get
            {
                if ((this.mUIBluebold21Cell == null))
                {
                    this.mUIBluebold21Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBluebold21Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSumDemandGridControlCell[View]gvSumDemand[Row]8[Column]RosterCell_1";
                    this.mUIBluebold21Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBluebold21Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBluebold21Cell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIRedbolditalic13Cell;
        
        private DXCell mUIGreenbolditalic23Cell1;
        
        private DXCell mUIGreenbolditalic23Cell;
        
        private DXCell mUIGreenbolditalic13Cell;
        
        private DXCell mUIGreenbold22Cell2;
        
        private DXCell mUIGreenbold22Cell1;
        
        private DXCell mUIGreenbold22Cell;
        
        private DXCell mUIBoldFlereCell;
        
        private DXCell mUIBluebolditalic23Cell;
        
        private DXCell mUIBluebolditalic13Cell;
        
        private DXCell mUIBluebolditalic10Cell;
        
        private DXCell mUIBluebold21Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPTopPanelClient : DXTestControl
    {
        
        public UIPTopPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pTopPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            #endregion
        }
        
        #region Properties
        public DXLookUpEdit UILeSumDemandDataSourcLookUpEdit
        {
            get
            {
                if ((this.mUILeSumDemandDataSourcLookUpEdit == null))
                {
                    this.mUILeSumDemandDataSourcLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUILeSumDemandDataSourcLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "leSumDemandDataSource";
                    this.mUILeSumDemandDataSourcLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
                    #endregion
                }
                return this.mUILeSumDemandDataSourcLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private DXLookUpEdit mUILeSumDemandDataSourcLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient1 : DXTestControl
    {
        
        public UIViewTabPageClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[4]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UICostSimulationViewCustom1 UICostSimulationViewCustom
        {
            get
            {
                if ((this.mUICostSimulationViewCustom == null))
                {
                    this.mUICostSimulationViewCustom = new UICostSimulationViewCustom1(this);
                }
                return this.mUICostSimulationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UICostSimulationViewCustom1 mUICostSimulationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICostSimulationViewCustom1 : DXTestControl
    {
        
        public UICostSimulationViewCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CostSimulationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CostSimulationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGsSplitContainerContSplitContainerControl1 UIGsSplitContainerContSplitContainerControl
        {
            get
            {
                if ((this.mUIGsSplitContainerContSplitContainerControl == null))
                {
                    this.mUIGsSplitContainerContSplitContainerControl = new UIGsSplitContainerContSplitContainerControl1(this);
                }
                return this.mUIGsSplitContainerContSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UIGsSplitContainerContSplitContainerControl1 mUIGsSplitContainerContSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsSplitContainerContSplitContainerControl1 : DXSplitContainerControl
    {
        
        public UIGsSplitContainerContSplitContainerControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSplitContainerControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UISplitGroupPanelClient1 UISplitGroupPanelClient
        {
            get
            {
                if ((this.mUISplitGroupPanelClient == null))
                {
                    this.mUISplitGroupPanelClient = new UISplitGroupPanelClient1(this);
                }
                return this.mUISplitGroupPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UISplitGroupPanelClient1 mUISplitGroupPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISplitGroupPanelClient1 : DXTestControl
    {
        
        public UISplitGroupPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1SplitGroupPanel[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGsNavBarControl1NavBar1 UIGsNavBarControl1NavBar
        {
            get
            {
                if ((this.mUIGsNavBarControl1NavBar == null))
                {
                    this.mUIGsNavBarControl1NavBar = new UIGsNavBarControl1NavBar1(this);
                }
                return this.mUIGsNavBarControl1NavBar;
            }
        }
        #endregion
        
        #region Fields
        private UIGsNavBarControl1NavBar1 mUIGsNavBarControl1NavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsNavBarControl1NavBar1 : DXNavBar
    {
        
        public UIGsNavBarControl1NavBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsNavBarControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UINavBarGroupControlCoScrollableControl1 UINavBarGroupControlCoScrollableControl
        {
            get
            {
                if ((this.mUINavBarGroupControlCoScrollableControl == null))
                {
                    this.mUINavBarGroupControlCoScrollableControl = new UINavBarGroupControlCoScrollableControl1(this);
                }
                return this.mUINavBarGroupControlCoScrollableControl;
            }
        }
        
        public UIAnsatteNavBarGroup UIAnsatteNavBarGroup
        {
            get
            {
                if ((this.mUIAnsatteNavBarGroup == null))
                {
                    this.mUIAnsatteNavBarGroup = new UIAnsatteNavBarGroup(this);
                }
                return this.mUIAnsatteNavBarGroup;
            }
        }
        #endregion
        
        #region Fields
        private UINavBarGroupControlCoScrollableControl1 mUINavBarGroupControlCoScrollableControl;
        
        private UIAnsatteNavBarGroup mUIAnsatteNavBarGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavBarGroupControlCoScrollableControl1 : DXScrollableControl
    {
        
        public UINavBarGroupControlCoScrollableControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "navBarGroupControlContainer2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupControlContainer";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcEmployeeCostsTable1 UIGcEmployeeCostsTable
        {
            get
            {
                if ((this.mUIGcEmployeeCostsTable == null))
                {
                    this.mUIGcEmployeeCostsTable = new UIGcEmployeeCostsTable1(this);
                }
                return this.mUIGcEmployeeCostsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcEmployeeCostsTable1 mUIGcEmployeeCostsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcEmployeeCostsTable1 : DXGrid
    {
        
        public UIGcEmployeeCostsTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeeCosts";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIPettersenPetraCell
        {
            get
            {
                if ((this.mUIPettersenPetraCell == null))
                {
                    this.mUIPettersenPetraCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeeCostsGridControlCell[View]gvEmployeeCosts[Row]0[Column]gcolEmployeeName" +
                        "";
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIPettersenPetraCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIPettersenPetraCell;
            }
        }
        
        public DXCell UIRosenquistRuthCell
        {
            get
            {
                if ((this.mUIRosenquistRuthCell == null))
                {
                    this.mUIRosenquistRuthCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRosenquistRuthCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeeCostsGridControlCell[View]gvEmployeeCosts[Row]1[Column]gcolEmployeeName" +
                        "";
                    this.mUIRosenquistRuthCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRosenquistRuthCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRosenquistRuthCell;
            }
        }
        
        public DXCell UISvendsenSveinCell
        {
            get
            {
                if ((this.mUISvendsenSveinCell == null))
                {
                    this.mUISvendsenSveinCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISvendsenSveinCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeeCostsGridControlCell[View]gvEmployeeCosts[Row]2[Column]gcolEmployeeName" +
                        "";
                    this.mUISvendsenSveinCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISvendsenSveinCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISvendsenSveinCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIPettersenPetraCell;
        
        private DXCell mUIRosenquistRuthCell;
        
        private DXCell mUISvendsenSveinCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsatteNavBarGroup : DXNavBarGroup
    {
        
        public UIAnsatteNavBarGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXNavBarGroupButton UIAnsatteNavBarGroupButton
        {
            get
            {
                if ((this.mUIAnsatteNavBarGroupButton == null))
                {
                    this.mUIAnsatteNavBarGroupButton = new DXNavBarGroupButton(this);
                    #region Search Criteria
                    this.mUIAnsatteNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte";
                    this.mUIAnsatteNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupButton";
                    this.mUIAnsatteNavBarGroupButton.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsatteNavBarGroupButton;
            }
        }
        #endregion
        
        #region Fields
        private DXNavBarGroupButton mUIAnsatteNavBarGroupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient2 : DXTestControl
    {
        
        public UIViewTabPageClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[2]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.SearchProperties[DXTestControl.PropertyNames.Text] = "Nei";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentViewCustom UIFixedPaymentViewCustom
        {
            get
            {
                if ((this.mUIFixedPaymentViewCustom == null))
                {
                    this.mUIFixedPaymentViewCustom = new UIFixedPaymentViewCustom(this);
                }
                return this.mUIFixedPaymentViewCustom;
            }
        }
        
        public UIWeekScheduleViewCustom UIWeekScheduleViewCustom
        {
            get
            {
                if ((this.mUIWeekScheduleViewCustom == null))
                {
                    this.mUIWeekScheduleViewCustom = new UIWeekScheduleViewCustom(this);
                }
                return this.mUIWeekScheduleViewCustom;
            }
        }
        
        public UICostSimulationViewCustom2 UICostSimulationViewCustom
        {
            get
            {
                if ((this.mUICostSimulationViewCustom == null))
                {
                    this.mUICostSimulationViewCustom = new UICostSimulationViewCustom2(this);
                }
                return this.mUICostSimulationViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentViewCustom mUIFixedPaymentViewCustom;
        
        private UIWeekScheduleViewCustom mUIWeekScheduleViewCustom;
        
        private UICostSimulationViewCustom2 mUICostSimulationViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFixedPaymentViewCustom : DXTestControl
    {
        
        public UIFixedPaymentViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFixedPaymentControlCustom : DXTestControl
    {
        
        public UIFixedPaymentControlCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "fixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControllerToViewModelWrapper";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHost1Custom : DXTestControl
    {
        
        public UIViewHost1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient : DXTestControl
    {
        
        public UIPcViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIFixedPaymentControlCustom1 UIFixedPaymentControlCustom
        {
            get
            {
                if ((this.mUIFixedPaymentControlCustom == null))
                {
                    this.mUIFixedPaymentControlCustom = new UIFixedPaymentControlCustom1(this);
                }
                return this.mUIFixedPaymentControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFixedPaymentControlCustom1 mUIFixedPaymentControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFixedPaymentControlCustom1 : DXTestControl
    {
        
        public UIFixedPaymentControlCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedPaymentControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedPaymentControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPgcCalculationResultPivotGrid UIPgcCalculationResultPivotGrid
        {
            get
            {
                if ((this.mUIPgcCalculationResultPivotGrid == null))
                {
                    this.mUIPgcCalculationResultPivotGrid = new UIPgcCalculationResultPivotGrid(this);
                }
                return this.mUIPgcCalculationResultPivotGrid;
            }
        }
        #endregion
        
        #region Fields
        private UIPgcCalculationResultPivotGrid mUIPgcCalculationResultPivotGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPgcCalculationResultPivotGrid : DXPivotGrid
    {
        
        public UIPgcCalculationResultPivotGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pgcCalculationResults";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXPivotGridFieldValue UIAnderssonEbbaPivotGridFieldValue
        {
            get
            {
                if ((this.mUIAnderssonEbbaPivotGridFieldValue == null))
                {
                    this.mUIAnderssonEbbaPivotGridFieldValue = new DXPivotGridFieldValue(this);
                    #region Search Criteria
                    this.mUIAnderssonEbbaPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.Name] = "[Field]Employee[LastLevelIndex]0";
                    this.mUIAnderssonEbbaPivotGridFieldValue.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridFieldValue";
                    this.mUIAnderssonEbbaPivotGridFieldValue.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnderssonEbbaPivotGridFieldValue;
            }
        }
        
        public DXPivotGridCell UIItem2PivotGridCell
        {
            get
            {
                if ((this.mUIItem2PivotGridCell == null))
                {
                    this.mUIItem2PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem2PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]0[Row]0";
                    this.mUIItem2PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem2PivotGridCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem28PivotGridCell
        {
            get
            {
                if ((this.mUIItem28PivotGridCell == null))
                {
                    this.mUIItem28PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem28PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]1[Row]0";
                    this.mUIItem28PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem28PivotGridCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem28PivotGridCell;
            }
        }
        
        public DXPivotGridCell UIItem8PivotGridCell
        {
            get
            {
                if ((this.mUIItem8PivotGridCell == null))
                {
                    this.mUIItem8PivotGridCell = new DXPivotGridCell(this);
                    #region Search Criteria
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "[Column]2[Row]0";
                    this.mUIItem8PivotGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PivotGridCell";
                    this.mUIItem8PivotGridCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem8PivotGridCell;
            }
        }
        #endregion
        
        #region Fields
        private DXPivotGridFieldValue mUIAnderssonEbbaPivotGridFieldValue;
        
        private DXPivotGridCell mUIItem2PivotGridCell;
        
        private DXPivotGridCell mUIItem28PivotGridCell;
        
        private DXPivotGridCell mUIItem8PivotGridCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWeekScheduleViewCustom : DXTestControl
    {
        
        public UIWeekScheduleViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "WeekScheduleView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WeekScheduleView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcCommentsTable UIGcCommentsTable
        {
            get
            {
                if ((this.mUIGcCommentsTable == null))
                {
                    this.mUIGcCommentsTable = new UIGcCommentsTable(this);
                }
                return this.mUIGcCommentsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcCommentsTable mUIGcCommentsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcCommentsTable : DXGrid
    {
        
        public UIGcCommentsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcComments";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXGroupRow UIGridControlGroupRowGroupRow
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow == null))
                {
                    this.mUIGridControlGroupRowGroupRow = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCommentsGridControlGroupRow[View]gvComments[Row]-1[Column]gcolFullName";
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow;
            }
        }
        
        public DXGroupRow UIGridControlGroupRowGroupRow1
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow1 == null))
                {
                    this.mUIGridControlGroupRowGroupRow1 = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCommentsGridControlGroupRow[View]gvComments[Row]-2[Column]gcolFullName";
                    this.mUIGridControlGroupRowGroupRow1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow1;
            }
        }
        
        public DXGroupRow UIGridControlGroupRowGroupRow2
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow2 == null))
                {
                    this.mUIGridControlGroupRowGroupRow2 = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCommentsGridControlGroupRow[View]gvComments[Row]-3[Column]gcolFullName";
                    this.mUIGridControlGroupRowGroupRow2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow2;
            }
        }
        #endregion
        
        #region Fields
        private DXGroupRow mUIGridControlGroupRowGroupRow;
        
        private DXGroupRow mUIGridControlGroupRowGroupRow1;
        
        private DXGroupRow mUIGridControlGroupRowGroupRow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICostSimulationViewCustom2 : DXTestControl
    {
        
        public UICostSimulationViewCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CostSimulationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CostSimulationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGsSplitContainerContSplitContainerControl2 UIGsSplitContainerContSplitContainerControl
        {
            get
            {
                if ((this.mUIGsSplitContainerContSplitContainerControl == null))
                {
                    this.mUIGsSplitContainerContSplitContainerControl = new UIGsSplitContainerContSplitContainerControl2(this);
                }
                return this.mUIGsSplitContainerContSplitContainerControl;
            }
        }
        #endregion
        
        #region Fields
        private UIGsSplitContainerContSplitContainerControl2 mUIGsSplitContainerContSplitContainerControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsSplitContainerContSplitContainerControl2 : DXSplitContainerControl
    {
        
        public UIGsSplitContainerContSplitContainerControl2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSSplitContainerControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UISplitGroupPanelClient2 UISplitGroupPanelClient
        {
            get
            {
                if ((this.mUISplitGroupPanelClient == null))
                {
                    this.mUISplitGroupPanelClient = new UISplitGroupPanelClient2(this);
                }
                return this.mUISplitGroupPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UISplitGroupPanelClient2 mUISplitGroupPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISplitGroupPanelClient2 : DXTestControl
    {
        
        public UISplitGroupPanelClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsSplitContainerControl1SplitGroupPanel[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGsNavBarControl1NavBar2 UIGsNavBarControl1NavBar
        {
            get
            {
                if ((this.mUIGsNavBarControl1NavBar == null))
                {
                    this.mUIGsNavBarControl1NavBar = new UIGsNavBarControl1NavBar2(this);
                }
                return this.mUIGsNavBarControl1NavBar;
            }
        }
        #endregion
        
        #region Fields
        private UIGsNavBarControl1NavBar2 mUIGsNavBarControl1NavBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsNavBarControl1NavBar2 : DXNavBar
    {
        
        public UIGsNavBarControl1NavBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsNavBarControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSNavBarControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIAnsatteNavBarGroup1 UIAnsatteNavBarGroup
        {
            get
            {
                if ((this.mUIAnsatteNavBarGroup == null))
                {
                    this.mUIAnsatteNavBarGroup = new UIAnsatteNavBarGroup1(this);
                }
                return this.mUIAnsatteNavBarGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIAnsatteNavBarGroup1 mUIAnsatteNavBarGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsatteNavBarGroup1 : DXNavBarGroup
    {
        
        public UIAnsatteNavBarGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXNavBarGroupButton UIAnsatteNavBarGroupButton
        {
            get
            {
                if ((this.mUIAnsatteNavBarGroupButton == null))
                {
                    this.mUIAnsatteNavBarGroupButton = new DXNavBarGroupButton(this);
                    #region Search Criteria
                    this.mUIAnsatteNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansatte";
                    this.mUIAnsatteNavBarGroupButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NavBarGroupButton";
                    this.mUIAnsatteNavBarGroupButton.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnsatteNavBarGroupButton;
            }
        }
        #endregion
        
        #region Fields
        private DXNavBarGroupButton mUIAnsatteNavBarGroupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient3 : DXTestControl
    {
        
        public UIViewTabPageClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[7]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIApprovalViewCustom UIApprovalViewCustom
        {
            get
            {
                if ((this.mUIApprovalViewCustom == null))
                {
                    this.mUIApprovalViewCustom = new UIApprovalViewCustom(this);
                }
                return this.mUIApprovalViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIApprovalViewCustom mUIApprovalViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIApprovalViewCustom : DXTestControl
    {
        
        public UIApprovalViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ApprovalView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ApprovalView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILcMainCustom UILcMainCustom
        {
            get
            {
                if ((this.mUILcMainCustom == null))
                {
                    this.mUILcMainCustom = new UILcMainCustom(this);
                }
                return this.mUILcMainCustom;
            }
        }
        #endregion
        
        #region Fields
        private UILcMainCustom mUILcMainCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILcMainCustom : DXTestControl
    {
        
        public UILcMainCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "lcMain";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLayoutControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlGroup1LayoutGroup UILayoutControlGroup1LayoutGroup
        {
            get
            {
                if ((this.mUILayoutControlGroup1LayoutGroup == null))
                {
                    this.mUILayoutControlGroup1LayoutGroup = new UILayoutControlGroup1LayoutGroup(this);
                }
                return this.mUILayoutControlGroup1LayoutGroup;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlGroup1LayoutGroup mUILayoutControlGroup1LayoutGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlGroup1LayoutGroup : DXBaseLayoutItem
    {
        
        public UILayoutControlGroup1LayoutGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlGroup1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutGroup";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILayoutControlItem2LayoutControlItem UILayoutControlItem2LayoutControlItem
        {
            get
            {
                if ((this.mUILayoutControlItem2LayoutControlItem == null))
                {
                    this.mUILayoutControlItem2LayoutControlItem = new UILayoutControlItem2LayoutControlItem(this);
                }
                return this.mUILayoutControlItem2LayoutControlItem;
            }
        }
        #endregion
        
        #region Fields
        private UILayoutControlItem2LayoutControlItem mUILayoutControlItem2LayoutControlItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILayoutControlItem2LayoutControlItem : DXBaseLayoutItem
    {
        
        public UILayoutControlItem2LayoutControlItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "layoutControlItem2";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutControlItem";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcApprovalTable UIGcApprovalTable
        {
            get
            {
                if ((this.mUIGcApprovalTable == null))
                {
                    this.mUIGcApprovalTable = new UIGcApprovalTable(this);
                }
                return this.mUIGcApprovalTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcApprovalTable mUIGcApprovalTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcApprovalTable : DXGrid
    {
        
        public UIGcApprovalTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApproval";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnderssonEbbaCell
        {
            get
            {
                if ((this.mUIAnderssonEbbaCell == null))
                {
                    this.mUIAnderssonEbbaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]colName";
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonEbbaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnderssonEbbaCell;
            }
        }
        
        public DXCell UIBrinkJörgenCell
        {
            get
            {
                if ((this.mUIBrinkJörgenCell == null))
                {
                    this.mUIBrinkJörgenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]colName";
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBrinkJörgenCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBrinkJörgenCell;
            }
        }
        
        public DXCell UIBurmanJensCell
        {
            get
            {
                if ((this.mUIBurmanJensCell == null))
                {
                    this.mUIBurmanJensCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]2[Column]colName";
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBurmanJensCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBurmanJensCell;
            }
        }
        
        public DXCell UIElofssonPerCell
        {
            get
            {
                if ((this.mUIElofssonPerCell == null))
                {
                    this.mUIElofssonPerCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]3[Column]colName";
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIElofssonPerCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIElofssonPerCell;
            }
        }
        
        public DXCell UIFalkHannaCell
        {
            get
            {
                if ((this.mUIFalkHannaCell == null))
                {
                    this.mUIFalkHannaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFalkHannaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]4[Column]colName";
                    this.mUIFalkHannaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFalkHannaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFalkHannaCell;
            }
        }
        
        public DXCell UIFredrikssonMathiasCell
        {
            get
            {
                if ((this.mUIFredrikssonMathiasCell == null))
                {
                    this.mUIFredrikssonMathiasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]5[Column]colName";
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFredrikssonMathiasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFredrikssonMathiasCell;
            }
        }
        
        public DXCell UIHaagAnnaCell
        {
            get
            {
                if ((this.mUIHaagAnnaCell == null))
                {
                    this.mUIHaagAnnaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]6[Column]colName";
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHaagAnnaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHaagAnnaCell;
            }
        }
        
        public DXCell UIHalfarssonCalleCell
        {
            get
            {
                if ((this.mUIHalfarssonCalleCell == null))
                {
                    this.mUIHalfarssonCalleCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]7[Column]colName";
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHalfarssonCalleCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHalfarssonCalleCell;
            }
        }
        
        public DXCell UIHellnerMarcusCell
        {
            get
            {
                if ((this.mUIHellnerMarcusCell == null))
                {
                    this.mUIHellnerMarcusCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]8[Column]colName";
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHellnerMarcusCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHellnerMarcusCell;
            }
        }
        
        public DXCell UIIngemarsdotterIdaCell
        {
            get
            {
                if ((this.mUIIngemarsdotterIdaCell == null))
                {
                    this.mUIIngemarsdotterIdaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIIngemarsdotterIdaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]9[Column]colName";
                    this.mUIIngemarsdotterIdaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIngemarsdotterIdaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIIngemarsdotterIdaCell;
            }
        }
        
        public DXCell UIPettersenPetraCell
        {
            get
            {
                if ((this.mUIPettersenPetraCell == null))
                {
                    this.mUIPettersenPetraCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]10[Column]colName";
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIPettersenPetraCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIPettersenPetraCell;
            }
        }
        
        public DXCell UIRosenquistRuthCell
        {
            get
            {
                if ((this.mUIRosenquistRuthCell == null))
                {
                    this.mUIRosenquistRuthCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRosenquistRuthCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]11[Column]colName";
                    this.mUIRosenquistRuthCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRosenquistRuthCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIRosenquistRuthCell;
            }
        }
        
        public DXCell UINSFNorsksykepleierfoCell
        {
            get
            {
                if ((this.mUINSFNorsksykepleierfoCell == null))
                {
                    this.mUINSFNorsksykepleierfoCell = new DXCell(this);
                    #region Search Criteria
                    this.mUINSFNorsksykepleierfoCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]colUnion";
                    this.mUINSFNorsksykepleierfoCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUINSFNorsksykepleierfoCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUINSFNorsksykepleierfoCell;
            }
        }
        
        public DXCell UIItem14Cell
        {
            get
            {
                if ((this.mUIItem14Cell == null))
                {
                    this.mUIItem14Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem14Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]2[Column]colPersonNumber";
                    this.mUIItem14Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem14Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem14Cell;
            }
        }
        
        public DXCell UIItem13Cell
        {
            get
            {
                if ((this.mUIItem13Cell == null))
                {
                    this.mUIItem13Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem13Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]1[Column]colPersonNumber";
                    this.mUIItem13Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem13Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem13Cell;
            }
        }
        
        public DXCell UIItem12Cell
        {
            get
            {
                if ((this.mUIItem12Cell == null))
                {
                    this.mUIItem12Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem12Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]colPersonNumber";
                    this.mUIItem12Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem12Cell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem12Cell;
            }
        }
        
        public DXCell UISvendsenSveinCell
        {
            get
            {
                if ((this.mUISvendsenSveinCell == null))
                {
                    this.mUISvendsenSveinCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISvendsenSveinCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]12[Column]colName";
                    this.mUISvendsenSveinCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISvendsenSveinCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISvendsenSveinCell;
            }
        }
        
        public DXCell UISSykepleierCell
        {
            get
            {
                if ((this.mUISSykepleierCell == null))
                {
                    this.mUISSykepleierCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISSykepleierCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcApprovalGridControlCell[View]gvApproval[Row]0[Column]colPositionCategory";
                    this.mUISSykepleierCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISSykepleierCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUISSykepleierCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnderssonEbbaCell;
        
        private DXCell mUIBrinkJörgenCell;
        
        private DXCell mUIBurmanJensCell;
        
        private DXCell mUIElofssonPerCell;
        
        private DXCell mUIFalkHannaCell;
        
        private DXCell mUIFredrikssonMathiasCell;
        
        private DXCell mUIHaagAnnaCell;
        
        private DXCell mUIHalfarssonCalleCell;
        
        private DXCell mUIHellnerMarcusCell;
        
        private DXCell mUIIngemarsdotterIdaCell;
        
        private DXCell mUIPettersenPetraCell;
        
        private DXCell mUIRosenquistRuthCell;
        
        private DXCell mUINSFNorsksykepleierfoCell;
        
        private DXCell mUIItem14Cell;
        
        private DXCell mUIItem13Cell;
        
        private DXCell mUIItem12Cell;
        
        private DXCell mUISvendsenSveinCell;
        
        private DXCell mUISSykepleierCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient4 : DXTestControl
    {
        
        public UIViewTabPageClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[8]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIAverageCalculationViCustom UIAverageCalculationViCustom
        {
            get
            {
                if ((this.mUIAverageCalculationViCustom == null))
                {
                    this.mUIAverageCalculationViCustom = new UIAverageCalculationViCustom(this);
                }
                return this.mUIAverageCalculationViCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIAverageCalculationViCustom mUIAverageCalculationViCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAverageCalculationViCustom : DXTestControl
    {
        
        public UIAverageCalculationViCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "AverageCalculationView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AverageCalculationView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcAverageCalculationTable UIGcAverageCalculationTable
        {
            get
            {
                if ((this.mUIGcAverageCalculationTable == null))
                {
                    this.mUIGcAverageCalculationTable = new UIGcAverageCalculationTable(this);
                }
                return this.mUIGcAverageCalculationTable;
            }
        }
        
        public UIPaControlsHeaderClient UIPaControlsHeaderClient
        {
            get
            {
                if ((this.mUIPaControlsHeaderClient == null))
                {
                    this.mUIPaControlsHeaderClient = new UIPaControlsHeaderClient(this);
                }
                return this.mUIPaControlsHeaderClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAverageCalculationTable mUIGcAverageCalculationTable;
        
        private UIPaControlsHeaderClient mUIPaControlsHeaderClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAverageCalculationTable : DXGrid
    {
        
        public UIGcAverageCalculationTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatus";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnderssonEbbaCell
        {
            get
            {
                if ((this.mUIAnderssonEbbaCell == null))
                {
                    this.mUIAnderssonEbbaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatusGridControlCell[View]gvAverageCalculationStatus[Row]0[C" +
                        "olumn]colEmployee";
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonEbbaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnderssonEbbaCell;
            }
        }
        
        public DXCell UIBrinkJörgenCell
        {
            get
            {
                if ((this.mUIBrinkJörgenCell == null))
                {
                    this.mUIBrinkJörgenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatusGridControlCell[View]gvAverageCalculationStatus[Row]1[C" +
                        "olumn]colEmployee";
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBrinkJörgenCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBrinkJörgenCell;
            }
        }
        
        public DXCell UIBurmanJensCell
        {
            get
            {
                if ((this.mUIBurmanJensCell == null))
                {
                    this.mUIBurmanJensCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatusGridControlCell[View]gvAverageCalculationStatus[Row]2[C" +
                        "olumn]colEmployee";
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBurmanJensCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBurmanJensCell;
            }
        }
        
        public DXCell UIElofssonPerCell
        {
            get
            {
                if ((this.mUIElofssonPerCell == null))
                {
                    this.mUIElofssonPerCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatusGridControlCell[View]gvAverageCalculationStatus[Row]3[C" +
                        "olumn]colEmployee";
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIElofssonPerCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIElofssonPerCell;
            }
        }
        
        public DXCell UIFalkHannaCell
        {
            get
            {
                if ((this.mUIFalkHannaCell == null))
                {
                    this.mUIFalkHannaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFalkHannaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatusGridControlCell[View]gvAverageCalculationStatus[Row]4[C" +
                        "olumn]colEmployee";
                    this.mUIFalkHannaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFalkHannaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFalkHannaCell;
            }
        }
        
        public DXCell UIFredrikssonMathiasCell
        {
            get
            {
                if ((this.mUIFredrikssonMathiasCell == null))
                {
                    this.mUIFredrikssonMathiasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatusGridControlCell[View]gvAverageCalculationStatus[Row]5[C" +
                        "olumn]colEmployee";
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFredrikssonMathiasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFredrikssonMathiasCell;
            }
        }
        
        public DXCell UIHaagAnnaCell
        {
            get
            {
                if ((this.mUIHaagAnnaCell == null))
                {
                    this.mUIHaagAnnaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatusGridControlCell[View]gvAverageCalculationStatus[Row]6[C" +
                        "olumn]colEmployee";
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHaagAnnaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHaagAnnaCell;
            }
        }
        
        public DXCell UIHalfarssonCalleCell
        {
            get
            {
                if ((this.mUIHalfarssonCalleCell == null))
                {
                    this.mUIHalfarssonCalleCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatusGridControlCell[View]gvAverageCalculationStatus[Row]7[C" +
                        "olumn]colEmployee";
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHalfarssonCalleCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHalfarssonCalleCell;
            }
        }
        
        public DXCell UIHellnerMarcusCell
        {
            get
            {
                if ((this.mUIHellnerMarcusCell == null))
                {
                    this.mUIHellnerMarcusCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatusGridControlCell[View]gvAverageCalculationStatus[Row]8[C" +
                        "olumn]colEmployee";
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHellnerMarcusCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHellnerMarcusCell;
            }
        }
        
        public DXCell UIIngemarsdotterIdaCell
        {
            get
            {
                if ((this.mUIIngemarsdotterIdaCell == null))
                {
                    this.mUIIngemarsdotterIdaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIIngemarsdotterIdaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatusGridControlCell[View]gvAverageCalculationStatus[Row]9[C" +
                        "olumn]colEmployee";
                    this.mUIIngemarsdotterIdaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIngemarsdotterIdaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIIngemarsdotterIdaCell;
            }
        }
        
        public DXCell UIJönssonEmilCell
        {
            get
            {
                if ((this.mUIJönssonEmilCell == null))
                {
                    this.mUIJönssonEmilCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIJönssonEmilCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAverageCalculationStatusGridControlCell[View]gvAverageCalculationStatus[Row]10[" +
                        "Column]colEmployee";
                    this.mUIJönssonEmilCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIJönssonEmilCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIJönssonEmilCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnderssonEbbaCell;
        
        private DXCell mUIBrinkJörgenCell;
        
        private DXCell mUIBurmanJensCell;
        
        private DXCell mUIElofssonPerCell;
        
        private DXCell mUIFalkHannaCell;
        
        private DXCell mUIFredrikssonMathiasCell;
        
        private DXCell mUIHaagAnnaCell;
        
        private DXCell mUIHalfarssonCalleCell;
        
        private DXCell mUIHellnerMarcusCell;
        
        private DXCell mUIIngemarsdotterIdaCell;
        
        private DXCell mUIJönssonEmilCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPaControlsHeaderClient : DXTestControl
    {
        
        public UIPaControlsHeaderClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "paControlsHeader";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UILeAverageCalculationLookUpEdit UILeAverageCalculationLookUpEdit
        {
            get
            {
                if ((this.mUILeAverageCalculationLookUpEdit == null))
                {
                    this.mUILeAverageCalculationLookUpEdit = new UILeAverageCalculationLookUpEdit(this);
                }
                return this.mUILeAverageCalculationLookUpEdit;
            }
        }
        #endregion
        
        #region Fields
        private UILeAverageCalculationLookUpEdit mUILeAverageCalculationLookUpEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeAverageCalculationLookUpEdit : DXLookUpEdit
    {
        
        public UILeAverageCalculationLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "leAverageCalculationPeriod";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSLookUpEdit";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXWindow UIPopupLookUpEditFormWindow
        {
            get
            {
                if ((this.mUIPopupLookUpEditFormWindow == null))
                {
                    this.mUIPopupLookUpEditFormWindow = new DXWindow(this);
                    #region Search Criteria
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.Name] = "leAverageCalculationPeriodPopupForm";
                    this.mUIPopupLookUpEditFormWindow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupLookUpEditForm";
                    this.mUIPopupLookUpEditFormWindow.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIPopupLookUpEditFormWindow;
            }
        }
        #endregion
        
        #region Fields
        private DXWindow mUIPopupLookUpEditFormWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient5 : DXTestControl
    {
        
        public UIViewTabPageClient5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[10]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIWeekScheduleViewCustom1 UIWeekScheduleViewCustom
        {
            get
            {
                if ((this.mUIWeekScheduleViewCustom == null))
                {
                    this.mUIWeekScheduleViewCustom = new UIWeekScheduleViewCustom1(this);
                }
                return this.mUIWeekScheduleViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWeekScheduleViewCustom1 mUIWeekScheduleViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWeekScheduleViewCustom1 : DXTestControl
    {
        
        public UIWeekScheduleViewCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "WeekScheduleView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WeekScheduleView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcCommentsTable1 UIGcCommentsTable
        {
            get
            {
                if ((this.mUIGcCommentsTable == null))
                {
                    this.mUIGcCommentsTable = new UIGcCommentsTable1(this);
                }
                return this.mUIGcCommentsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcCommentsTable1 mUIGcCommentsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcCommentsTable1 : DXGrid
    {
        
        public UIGcCommentsTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcComments";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXGroupRow UIGridControlGroupRowGroupRow
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow == null))
                {
                    this.mUIGridControlGroupRowGroupRow = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCommentsGridControlGroupRow[View]gvComments[Row]-1[Column]gcolFullName";
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow;
            }
        }
        
        public DXGroupRow UIGridControlGroupRowGroupRow1
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow1 == null))
                {
                    this.mUIGridControlGroupRowGroupRow1 = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCommentsGridControlGroupRow[View]gvComments[Row]-2[Column]gcolFullName";
                    this.mUIGridControlGroupRowGroupRow1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow1;
            }
        }
        
        public DXGroupRow UIGridControlGroupRowGroupRow2
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow2 == null))
                {
                    this.mUIGridControlGroupRowGroupRow2 = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow2.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCommentsGridControlGroupRow[View]gvComments[Row]-3[Column]gcolFullName";
                    this.mUIGridControlGroupRowGroupRow2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow2.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow2;
            }
        }
        
        public DXCell UIJakonkurereiskiselvfCell
        {
            get
            {
                if ((this.mUIJakonkurereiskiselvfCell == null))
                {
                    this.mUIJakonkurereiskiselvfCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIJakonkurereiskiselvfCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCommentsGridControlCell[View]gvComments[Row]0[Column]gcolComment";
                    this.mUIJakonkurereiskiselvfCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIJakonkurereiskiselvfCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIJakonkurereiskiselvfCell;
            }
        }
        #endregion
        
        #region Fields
        private DXGroupRow mUIGridControlGroupRowGroupRow;
        
        private DXGroupRow mUIGridControlGroupRowGroupRow1;
        
        private DXGroupRow mUIGridControlGroupRowGroupRow2;
        
        private DXCell mUIJakonkurereiskiselvfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient6 : DXTestControl
    {
        
        public UIViewTabPageClient6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[6]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIVacationBankViewCustom UIVacationBankViewCustom
        {
            get
            {
                if ((this.mUIVacationBankViewCustom == null))
                {
                    this.mUIVacationBankViewCustom = new UIVacationBankViewCustom(this);
                }
                return this.mUIVacationBankViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVacationBankViewCustom mUIVacationBankViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVacationBankViewCustom : DXTestControl
    {
        
        public UIVacationBankViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "VacationBankView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VacationBankView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIVhVacationBanksCustom UIVhVacationBanksCustom
        {
            get
            {
                if ((this.mUIVhVacationBanksCustom == null))
                {
                    this.mUIVhVacationBanksCustom = new UIVhVacationBanksCustom(this);
                }
                return this.mUIVhVacationBanksCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVhVacationBanksCustom mUIVhVacationBanksCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVhVacationBanksCustom : DXTestControl
    {
        
        public UIVhVacationBanksCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "vhVacationBanks";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient1 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient1(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient1 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient1 : DXTestControl
    {
        
        public UIPcViewClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIPlannedEmployeesVacaCustom UIPlannedEmployeesVacaCustom
        {
            get
            {
                if ((this.mUIPlannedEmployeesVacaCustom == null))
                {
                    this.mUIPlannedEmployeesVacaCustom = new UIPlannedEmployeesVacaCustom(this);
                }
                return this.mUIPlannedEmployeesVacaCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIPlannedEmployeesVacaCustom mUIPlannedEmployeesVacaCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPlannedEmployeesVacaCustom : DXTestControl
    {
        
        public UIPlannedEmployeesVacaCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PlannedEmployeesVacationBanksView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PlannedEmployeesVacationBanksView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcPlannedEmployeesVaTable UIGcPlannedEmployeesVaTable
        {
            get
            {
                if ((this.mUIGcPlannedEmployeesVaTable == null))
                {
                    this.mUIGcPlannedEmployeesVaTable = new UIGcPlannedEmployeesVaTable(this);
                }
                return this.mUIGcPlannedEmployeesVaTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcPlannedEmployeesVaTable mUIGcPlannedEmployeesVaTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcPlannedEmployeesVaTable : DXGrid
    {
        
        public UIGcPlannedEmployeesVaTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanks";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXGroupRow UIGridControlGroupRowGroupRow
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow == null))
                {
                    this.mUIGridControlGroupRowGroupRow = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlGroupRow[View]gvPlannedEmployeesVacatio" +
                        "nBanks[Row]-1[Column]colBankName";
                    this.mUIGridControlGroupRowGroupRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow;
            }
        }
        
        public DXCell UIItem9HellnerMarcusCell
        {
            get
            {
                if ((this.mUIItem9HellnerMarcusCell == null))
                {
                    this.mUIItem9HellnerMarcusCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem9HellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlCell[View]gvPlannedEmployeesVacationBan" +
                        "ks[Row]8[Column]colEmployeeDisplayString";
                    this.mUIItem9HellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem9HellnerMarcusCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem9HellnerMarcusCell;
            }
        }
        
        public DXCell UIItem8HalfarssonCalleCell1
        {
            get
            {
                if ((this.mUIItem8HalfarssonCalleCell1 == null))
                {
                    this.mUIItem8HalfarssonCalleCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem8HalfarssonCalleCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlCell[View]gvPlannedEmployeesVacationBan" +
                        "ks[Row]7[Column]colEmployeeDisplayString";
                    this.mUIItem8HalfarssonCalleCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem8HalfarssonCalleCell1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem8HalfarssonCalleCell1;
            }
        }
        
        public DXCell UIItem8HalfarssonCalleCell
        {
            get
            {
                if ((this.mUIItem8HalfarssonCalleCell == null))
                {
                    this.mUIItem8HalfarssonCalleCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem8HalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlCell[View]gvPlannedEmployeesVacationBan" +
                        "ks[Row]0[Column]colEmployeeDisplayString";
                    this.mUIItem8HalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem8HalfarssonCalleCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem8HalfarssonCalleCell;
            }
        }
        
        public DXCell UIItem7HaagAnnaCell
        {
            get
            {
                if ((this.mUIItem7HaagAnnaCell == null))
                {
                    this.mUIItem7HaagAnnaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem7HaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlCell[View]gvPlannedEmployeesVacationBan" +
                        "ks[Row]6[Column]colEmployeeDisplayString";
                    this.mUIItem7HaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem7HaagAnnaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem7HaagAnnaCell;
            }
        }
        
        public DXCell UIItem6FredrikssonMathCell
        {
            get
            {
                if ((this.mUIItem6FredrikssonMathCell == null))
                {
                    this.mUIItem6FredrikssonMathCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem6FredrikssonMathCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlCell[View]gvPlannedEmployeesVacationBan" +
                        "ks[Row]5[Column]colEmployeeDisplayString";
                    this.mUIItem6FredrikssonMathCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem6FredrikssonMathCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem6FredrikssonMathCell;
            }
        }
        
        public DXCell UIItem5FalkHannaCell
        {
            get
            {
                if ((this.mUIItem5FalkHannaCell == null))
                {
                    this.mUIItem5FalkHannaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem5FalkHannaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlCell[View]gvPlannedEmployeesVacationBan" +
                        "ks[Row]4[Column]colEmployeeDisplayString";
                    this.mUIItem5FalkHannaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem5FalkHannaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem5FalkHannaCell;
            }
        }
        
        public DXCell UIItem4ElofssonPerCell
        {
            get
            {
                if ((this.mUIItem4ElofssonPerCell == null))
                {
                    this.mUIItem4ElofssonPerCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem4ElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlCell[View]gvPlannedEmployeesVacationBan" +
                        "ks[Row]3[Column]colEmployeeDisplayString";
                    this.mUIItem4ElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem4ElofssonPerCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem4ElofssonPerCell;
            }
        }
        
        public DXCell UIItem3BurmanJensCell
        {
            get
            {
                if ((this.mUIItem3BurmanJensCell == null))
                {
                    this.mUIItem3BurmanJensCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem3BurmanJensCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlCell[View]gvPlannedEmployeesVacationBan" +
                        "ks[Row]2[Column]colEmployeeDisplayString";
                    this.mUIItem3BurmanJensCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem3BurmanJensCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem3BurmanJensCell;
            }
        }
        
        public DXCell UIItem2BrinkJörgenCell
        {
            get
            {
                if ((this.mUIItem2BrinkJörgenCell == null))
                {
                    this.mUIItem2BrinkJörgenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem2BrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlCell[View]gvPlannedEmployeesVacationBan" +
                        "ks[Row]1[Column]colEmployeeDisplayString";
                    this.mUIItem2BrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem2BrinkJörgenCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem2BrinkJörgenCell;
            }
        }
        
        public DXCell UIItem11JönssonEmilCell
        {
            get
            {
                if ((this.mUIItem11JönssonEmilCell == null))
                {
                    this.mUIItem11JönssonEmilCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem11JönssonEmilCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlCell[View]gvPlannedEmployeesVacationBan" +
                        "ks[Row]10[Column]colEmployeeDisplayString";
                    this.mUIItem11JönssonEmilCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem11JönssonEmilCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem11JönssonEmilCell;
            }
        }
        
        public DXCell UIItem10IngemarsdotterCell
        {
            get
            {
                if ((this.mUIItem10IngemarsdotterCell == null))
                {
                    this.mUIItem10IngemarsdotterCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem10IngemarsdotterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlCell[View]gvPlannedEmployeesVacationBan" +
                        "ks[Row]9[Column]colEmployeeDisplayString";
                    this.mUIItem10IngemarsdotterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem10IngemarsdotterCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIItem10IngemarsdotterCell;
            }
        }
        
        public DXGroupRow UIGridControlGroupRowGroupRow1
        {
            get
            {
                if ((this.mUIGridControlGroupRowGroupRow1 == null))
                {
                    this.mUIGridControlGroupRowGroupRow1 = new DXGroupRow(this);
                    #region Search Criteria
                    this.mUIGridControlGroupRowGroupRow1.SearchProperties[DXTestControl.PropertyNames.Name] = "gcPlannedEmployeesVacationBanksGridControlGroupRow[View]gvPlannedEmployeesVacatio" +
                        "nBanks[Row]-2[Column]colBankingYear";
                    this.mUIGridControlGroupRowGroupRow1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlGroupRow";
                    this.mUIGridControlGroupRowGroupRow1.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIGridControlGroupRowGroupRow1;
            }
        }
        #endregion
        
        #region Fields
        private DXGroupRow mUIGridControlGroupRowGroupRow;
        
        private DXCell mUIItem9HellnerMarcusCell;
        
        private DXCell mUIItem8HalfarssonCalleCell1;
        
        private DXCell mUIItem8HalfarssonCalleCell;
        
        private DXCell mUIItem7HaagAnnaCell;
        
        private DXCell mUIItem6FredrikssonMathCell;
        
        private DXCell mUIItem5FalkHannaCell;
        
        private DXCell mUIItem4ElofssonPerCell;
        
        private DXCell mUIItem3BurmanJensCell;
        
        private DXCell mUIItem2BrinkJörgenCell;
        
        private DXCell mUIItem11JönssonEmilCell;
        
        private DXCell mUIItem10IngemarsdotterCell;
        
        private DXGroupRow mUIGridControlGroupRowGroupRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewTabPageClient7 : DXTestControl
    {
        
        public UIViewTabPageClient7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcSubtabsViewTabPage[5]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewTabPage";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIAbsenceListViewCustom UIAbsenceListViewCustom
        {
            get
            {
                if ((this.mUIAbsenceListViewCustom == null))
                {
                    this.mUIAbsenceListViewCustom = new UIAbsenceListViewCustom(this);
                }
                return this.mUIAbsenceListViewCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIAbsenceListViewCustom mUIAbsenceListViewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAbsenceListViewCustom : DXTestControl
    {
        
        public UIAbsenceListViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "AbsenceListView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AbsenceListView";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public UIGcAbsenceListTable UIGcAbsenceListTable
        {
            get
            {
                if ((this.mUIGcAbsenceListTable == null))
                {
                    this.mUIGcAbsenceListTable = new UIGcAbsenceListTable(this);
                }
                return this.mUIGcAbsenceListTable;
            }
        }
        
        public UIGcAbsenceListTable1 UIGcAbsenceListTable1
        {
            get
            {
                if ((this.mUIGcAbsenceListTable1 == null))
                {
                    this.mUIGcAbsenceListTable1 = new UIGcAbsenceListTable1(this);
                }
                return this.mUIGcAbsenceListTable1;
            }
        }
        #endregion
        
        #region Fields
        private UIGcAbsenceListTable mUIGcAbsenceListTable;
        
        private UIGcAbsenceListTable1 mUIGcAbsenceListTable1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAbsenceListTable : DXGrid
    {
        
        public UIGcAbsenceListTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIJönssonEmilCell
        {
            get
            {
                if ((this.mUIJönssonEmilCell == null))
                {
                    this.mUIJönssonEmilCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIJönssonEmilCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcName";
                    this.mUIJönssonEmilCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIJönssonEmilCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIJönssonEmilCell;
            }
        }
        
        public DXCell UIElofssonPerCell
        {
            get
            {
                if ((this.mUIElofssonPerCell == null))
                {
                    this.mUIElofssonPerCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcName";
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIElofssonPerCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIElofssonPerCell;
            }
        }
        
        public DXCell UIHellnerMarcusCell
        {
            get
            {
                if ((this.mUIHellnerMarcusCell == null))
                {
                    this.mUIHellnerMarcusCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]4[Column]gcName";
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHellnerMarcusCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHellnerMarcusCell;
            }
        }
        
        public DXCell UIFredrikssonMathiasCell
        {
            get
            {
                if ((this.mUIFredrikssonMathiasCell == null))
                {
                    this.mUIFredrikssonMathiasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]5[Column]gcName";
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFredrikssonMathiasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFredrikssonMathiasCell;
            }
        }
        
        public DXCell UIBrinkJörgenCell
        {
            get
            {
                if ((this.mUIBrinkJörgenCell == null))
                {
                    this.mUIBrinkJörgenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]2[Column]gcName";
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBrinkJörgenCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBrinkJörgenCell;
            }
        }
        
        public DXCell UIAnderssonEbbaCell
        {
            get
            {
                if ((this.mUIAnderssonEbbaCell == null))
                {
                    this.mUIAnderssonEbbaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcName";
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonEbbaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnderssonEbbaCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIJönssonEmilCell;
        
        private DXCell mUIElofssonPerCell;
        
        private DXCell mUIHellnerMarcusCell;
        
        private DXCell mUIFredrikssonMathiasCell;
        
        private DXCell mUIBrinkJörgenCell;
        
        private DXCell mUIAnderssonEbbaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcAbsenceListTable1 : DXGrid
    {
        
        public UIGcAbsenceListTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceList";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Arbeidsplan");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnderssonEbbaCell
        {
            get
            {
                if ((this.mUIAnderssonEbbaCell == null))
                {
                    this.mUIAnderssonEbbaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]0[Column]gcName";
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonEbbaCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIAnderssonEbbaCell;
            }
        }
        
        public DXCell UIJönssonEmilCell
        {
            get
            {
                if ((this.mUIJönssonEmilCell == null))
                {
                    this.mUIJönssonEmilCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIJönssonEmilCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]1[Column]gcName";
                    this.mUIJönssonEmilCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIJönssonEmilCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIJönssonEmilCell;
            }
        }
        
        public DXCell UIBrinkJörgenCell
        {
            get
            {
                if ((this.mUIBrinkJörgenCell == null))
                {
                    this.mUIBrinkJörgenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]2[Column]gcName";
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBrinkJörgenCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIBrinkJörgenCell;
            }
        }
        
        public DXCell UIElofssonPerCell
        {
            get
            {
                if ((this.mUIElofssonPerCell == null))
                {
                    this.mUIElofssonPerCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]3[Column]gcName";
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIElofssonPerCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIElofssonPerCell;
            }
        }
        
        public DXCell UIHellnerMarcusCell
        {
            get
            {
                if ((this.mUIHellnerMarcusCell == null))
                {
                    this.mUIHellnerMarcusCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]4[Column]gcName";
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHellnerMarcusCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIHellnerMarcusCell;
            }
        }
        
        public DXCell UIFredrikssonMathiasCell
        {
            get
            {
                if ((this.mUIFredrikssonMathiasCell == null))
                {
                    this.mUIFredrikssonMathiasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcAbsenceListGridControlCell[View]gvAbsenceList[Row]5[Column]gcName";
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFredrikssonMathiasCell.WindowTitles.Add("Arbeidsplan");
                    #endregion
                }
                return this.mUIFredrikssonMathiasCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnderssonEbbaCell;
        
        private DXCell mUIJönssonEmilCell;
        
        private DXCell mUIBrinkJörgenCell;
        
        private DXCell mUIElofssonPerCell;
        
        private DXCell mUIHellnerMarcusCell;
        
        private DXCell mUIFredrikssonMathiasCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITilpassetvisningWindow : DXWindow
    {
        
        public UITilpassetvisningWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Tilpasset visning";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Tilpasset visning");
            #endregion
        }
        
        #region Properties
        public UIGcCustomSetupsClient UIGcCustomSetupsClient
        {
            get
            {
                if ((this.mUIGcCustomSetupsClient == null))
                {
                    this.mUIGcCustomSetupsClient = new UIGcCustomSetupsClient(this);
                }
                return this.mUIGcCustomSetupsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIGcCustomSetupsClient mUIGcCustomSetupsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcCustomSetupsClient : DXTestControl
    {
        
        public UIGcCustomSetupsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcCustomSetups";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGroupControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Tilpasset visning");
            #endregion
        }
        
        #region Properties
        public UIGcColumnSetupTable UIGcColumnSetupTable
        {
            get
            {
                if ((this.mUIGcColumnSetupTable == null))
                {
                    this.mUIGcColumnSetupTable = new UIGcColumnSetupTable(this);
                }
                return this.mUIGcColumnSetupTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcColumnSetupTable mUIGcColumnSetupTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcColumnSetupTable : DXGrid
    {
        
        public UIGcColumnSetupTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcColumnSetup";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Tilpasset visning");
            #endregion
        }
        
        #region Properties
        public DXCell UIStillingCell
        {
            get
            {
                if ((this.mUIStillingCell == null))
                {
                    this.mUIStillingCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIStillingCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcColumnSetupGridControlCell[View]gvColumnSetup[Row]0[Column]gcolName";
                    this.mUIStillingCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIStillingCell.WindowTitles.Add("Tilpasset visning");
                    #endregion
                }
                return this.mUIStillingCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIStillingCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIGalleryDropDownBarCoMenu UIGalleryDropDownBarCoMenu
        {
            get
            {
                if ((this.mUIGalleryDropDownBarCoMenu == null))
                {
                    this.mUIGalleryDropDownBarCoMenu = new UIGalleryDropDownBarCoMenu(this);
                }
                return this.mUIGalleryDropDownBarCoMenu;
            }
        }
        
        public UIPopupContainerBarConMenu UIPopupContainerBarConMenu
        {
            get
            {
                if ((this.mUIPopupContainerBarConMenu == null))
                {
                    this.mUIPopupContainerBarConMenu = new UIPopupContainerBarConMenu(this);
                }
                return this.mUIPopupContainerBarConMenu;
            }
        }
        
        public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
        {
            get
            {
                if ((this.mUIPopupMenuBarControlMenu == null))
                {
                    this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
                }
                return this.mUIPopupMenuBarControlMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIGalleryDropDownBarCoMenu mUIGalleryDropDownBarCoMenu;
        
        private UIPopupContainerBarConMenu mUIPopupContainerBarConMenu;
        
        private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGalleryDropDownBarCoMenu : DXMenu
    {
        
        public UIGalleryDropDownBarCoMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "GalleryDropDownBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GalleryDropDownBarControl";
            #endregion
        }
        
        #region Properties
        public UIDeltefilterGalleryItemGroup UIDeltefilterGalleryItemGroup
        {
            get
            {
                if ((this.mUIDeltefilterGalleryItemGroup == null))
                {
                    this.mUIDeltefilterGalleryItemGroup = new UIDeltefilterGalleryItemGroup(this);
                }
                return this.mUIDeltefilterGalleryItemGroup;
            }
        }
        
        public UIMinefilterGalleryItemGroup UIMinefilterGalleryItemGroup
        {
            get
            {
                if ((this.mUIMinefilterGalleryItemGroup == null))
                {
                    this.mUIMinefilterGalleryItemGroup = new UIMinefilterGalleryItemGroup(this);
                }
                return this.mUIMinefilterGalleryItemGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIDeltefilterGalleryItemGroup mUIDeltefilterGalleryItemGroup;
        
        private UIMinefilterGalleryItemGroup mUIMinefilterGalleryItemGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeltefilterGalleryItemGroup : DXTestControl
    {
        
        public UIDeltefilterGalleryItemGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Delte filter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GalleryItemGroup";
            #endregion
        }
        
        #region Properties
        public DXTestControl UIBLÅGRUPPEGalleryItem
        {
            get
            {
                if ((this.mUIBLÅGRUPPEGalleryItem == null))
                {
                    this.mUIBLÅGRUPPEGalleryItem = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIBLÅGRUPPEGalleryItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BLÅ GRUPPE";
                    this.mUIBLÅGRUPPEGalleryItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GalleryItem";
                    #endregion
                }
                return this.mUIBLÅGRUPPEGalleryItem;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIBLÅGRUPPEGalleryItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMinefilterGalleryItemGroup : DXTestControl
    {
        
        public UIMinefilterGalleryItemGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Mine filter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GalleryItemGroup";
            #endregion
        }
        
        #region Properties
        public DXTestControl UIRØDGRUPPEGalleryItem
        {
            get
            {
                if ((this.mUIRØDGRUPPEGalleryItem == null))
                {
                    this.mUIRØDGRUPPEGalleryItem = new DXTestControl(this);
                    #region Search Criteria
                    this.mUIRØDGRUPPEGalleryItem.SearchProperties[DXTestControl.PropertyNames.Name] = "RØD GRUPPE";
                    this.mUIRØDGRUPPEGalleryItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GalleryItem";
                    #endregion
                }
                return this.mUIRØDGRUPPEGalleryItem;
            }
        }
        
        public DXTestControl UILEGERGalleryItem
        {
            get
            {
                if ((this.mUILEGERGalleryItem == null))
                {
                    this.mUILEGERGalleryItem = new DXTestControl(this);
                    #region Search Criteria
                    this.mUILEGERGalleryItem.SearchProperties[DXTestControl.PropertyNames.Name] = "LEGER";
                    this.mUILEGERGalleryItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GalleryItem";
                    #endregion
                }
                return this.mUILEGERGalleryItem;
            }
        }
        #endregion
        
        #region Fields
        private DXTestControl mUIRØDGRUPPEGalleryItem;
        
        private DXTestControl mUILEGERGalleryItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupContainerBarConMenu : DXMenu
    {
        
        public UIPopupContainerBarConMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupContainerBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupContainerBarControl";
            #endregion
        }
        
        #region Properties
        public UIPopupControlContaineClient UIPopupControlContaineClient
        {
            get
            {
                if ((this.mUIPopupControlContaineClient == null))
                {
                    this.mUIPopupControlContaineClient = new UIPopupControlContaineClient(this);
                }
                return this.mUIPopupControlContaineClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPopupControlContaineClient mUIPopupControlContaineClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupControlContaineClient : DXTestControl
    {
        
        public UIPopupControlContaineClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "popupControlContainer1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupControlContainer";
            #endregion
        }
        
        #region Properties
        public UIPnlSaveAsPanelClient UIPnlSaveAsPanelClient
        {
            get
            {
                if ((this.mUIPnlSaveAsPanelClient == null))
                {
                    this.mUIPnlSaveAsPanelClient = new UIPnlSaveAsPanelClient(this);
                }
                return this.mUIPnlSaveAsPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlSaveAsPanelClient mUIPnlSaveAsPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlSaveAsPanelClient : DXTestControl
    {
        
        public UIPnlSaveAsPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlSaveAsPanel";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public DXTextEdit UITeFilterNameEdit
        {
            get
            {
                if ((this.mUITeFilterNameEdit == null))
                {
                    this.mUITeFilterNameEdit = new DXTextEdit(this);
                    #region Search Criteria
                    this.mUITeFilterNameEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "teFilterName";
                    this.mUITeFilterNameEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
                    #endregion
                }
                return this.mUITeFilterNameEdit;
            }
        }
        
        public DXButton UIOKLagreButton
        {
            get
            {
                if ((this.mUIOKLagreButton == null))
                {
                    this.mUIOKLagreButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIOKLagreButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnConfirmSaveFilterAs";
                    this.mUIOKLagreButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    #endregion
                }
                return this.mUIOKLagreButton;
            }
        }
        #endregion
        
        #region Fields
        private DXTextEdit mUITeFilterNameEdit;
        
        private DXButton mUIOKLagreButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPopupMenuBarControlMenu : DXMenu
    {
        
        public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
            #endregion
        }
        
        #region Properties
        public DXMenuBaseButtonItem UIOverførtilExcelMenuBaseButtonItem
        {
            get
            {
                if ((this.mUIOverførtilExcelMenuBaseButtonItem == null))
                {
                    this.mUIOverførtilExcelMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
                    #region Search Criteria
                    this.mUIOverførtilExcelMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "BarButtonItemLink[5]";
                    this.mUIOverførtilExcelMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
                    #endregion
                }
                return this.mUIOverførtilExcelMenuBaseButtonItem;
            }
        }
        #endregion
        
        #region Fields
        private DXMenuBaseButtonItem mUIOverførtilExcelMenuBaseButtonItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAnsattfilterWindow : DXWindow
    {
        
        public UIAnsattfilterWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Ansattfilter";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ansattfilter");
            #endregion
        }
        
        #region Properties
        public UIPanelControl1Client UIPanelControl1Client
        {
            get
            {
                if ((this.mUIPanelControl1Client == null))
                {
                    this.mUIPanelControl1Client = new UIPanelControl1Client(this);
                }
                return this.mUIPanelControl1Client;
            }
        }
        
        public DXButton UILagreButton
        {
            get
            {
                if ((this.mUILagreButton == null))
                {
                    this.mUILagreButton = new DXButton(this);
                    #region Search Criteria
                    this.mUILagreButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnSaveFilter";
                    this.mUILagreButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUILagreButton.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUILagreButton;
            }
        }
        
        public DXButton UISlettButton
        {
            get
            {
                if ((this.mUISlettButton == null))
                {
                    this.mUISlettButton = new DXButton(this);
                    #region Search Criteria
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnDeleteFilter";
                    this.mUISlettButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUISlettButton.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUISlettButton;
            }
        }
        
        public DXLookUpEdit UIGleSavedFiltersLookUpEdit
        {
            get
            {
                if ((this.mUIGleSavedFiltersLookUpEdit == null))
                {
                    this.mUIGleSavedFiltersLookUpEdit = new DXLookUpEdit(this);
                    #region Search Criteria
                    this.mUIGleSavedFiltersLookUpEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "gleSavedFilters";
                    this.mUIGleSavedFiltersLookUpEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridLookUpEdit";
                    this.mUIGleSavedFiltersLookUpEdit.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUIGleSavedFiltersLookUpEdit;
            }
        }
        
        public DXButton UILagresomButton
        {
            get
            {
                if ((this.mUILagresomButton == null))
                {
                    this.mUILagresomButton = new DXButton(this);
                    #region Search Criteria
                    this.mUILagresomButton.SearchProperties[DXTestControl.PropertyNames.Name] = "ddbSaveFilterAs";
                    this.mUILagresomButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DropDownButton";
                    this.mUILagresomButton.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUILagresomButton;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControl1Client mUIPanelControl1Client;
        
        private DXButton mUILagreButton;
        
        private DXButton mUISlettButton;
        
        private DXLookUpEdit mUIGleSavedFiltersLookUpEdit;
        
        private DXButton mUILagresomButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControl1Client : DXTestControl
    {
        
        public UIPanelControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansattfilter");
            #endregion
        }
        
        #region Properties
        public UIViewHost1Custom1 UIViewHost1Custom
        {
            get
            {
                if ((this.mUIViewHost1Custom == null))
                {
                    this.mUIViewHost1Custom = new UIViewHost1Custom1(this);
                }
                return this.mUIViewHost1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHost1Custom1 mUIViewHost1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHost1Custom1 : DXTestControl
    {
        
        public UIViewHost1Custom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "viewHost1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Ansattfilter");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient2 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient2(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient2 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient2 : DXTestControl
    {
        
        public UIPcViewClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Ansattfilter");
            #endregion
        }
        
        #region Properties
        public UIEmployeeFilterEditViCustom UIEmployeeFilterEditViCustom
        {
            get
            {
                if ((this.mUIEmployeeFilterEditViCustom == null))
                {
                    this.mUIEmployeeFilterEditViCustom = new UIEmployeeFilterEditViCustom(this);
                }
                return this.mUIEmployeeFilterEditViCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeeFilterEditViCustom mUIEmployeeFilterEditViCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmployeeFilterEditViCustom : DXTestControl
    {
        
        public UIEmployeeFilterEditViCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "EmployeeFilterEditView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "EmployeeFilterEditView";
            this.WindowTitles.Add("Ansattfilter");
            #endregion
        }
        
        #region Properties
        public UIPanelControl1Client1 UIPanelControl1Client
        {
            get
            {
                if ((this.mUIPanelControl1Client == null))
                {
                    this.mUIPanelControl1Client = new UIPanelControl1Client1(this);
                }
                return this.mUIPanelControl1Client;
            }
        }
        
        public DXButton UIFjernButton
        {
            get
            {
                if ((this.mUIFjernButton == null))
                {
                    this.mUIFjernButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIFjernButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnRemove";
                    this.mUIFjernButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUIFjernButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUIFjernButton.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUIFjernButton;
            }
        }
        
        public DXButton UILeggtilButton
        {
            get
            {
                if ((this.mUILeggtilButton == null))
                {
                    this.mUILeggtilButton = new DXButton(this);
                    #region Search Criteria
                    this.mUILeggtilButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnAdd";
                    this.mUILeggtilButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUILeggtilButton.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUILeggtilButton.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUILeggtilButton;
            }
        }
        
        public UIGcEmployeesTable UIGcEmployeesTable
        {
            get
            {
                if ((this.mUIGcEmployeesTable == null))
                {
                    this.mUIGcEmployeesTable = new UIGcEmployeesTable(this);
                }
                return this.mUIGcEmployeesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControl1Client1 mUIPanelControl1Client;
        
        private DXButton mUIFjernButton;
        
        private DXButton mUILeggtilButton;
        
        private UIGcEmployeesTable mUIGcEmployeesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelControl1Client1 : DXTestControl
    {
        
        public UIPanelControl1Client1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            #endregion
        }
        
        #region Properties
        public DXCheckBox UICeShareInGatCheckBox
        {
            get
            {
                if ((this.mUICeShareInGatCheckBox == null))
                {
                    this.mUICeShareInGatCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUICeShareInGatCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ceShareInGat";
                    this.mUICeShareInGatCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
                    this.mUICeShareInGatCheckBox.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUICeShareInGatCheckBox.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUICeShareInGatCheckBox;
            }
        }
        
        public DXCheckBox UICeShareInMyGatCheckBox
        {
            get
            {
                if ((this.mUICeShareInMyGatCheckBox == null))
                {
                    this.mUICeShareInMyGatCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUICeShareInMyGatCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ceShareInMyGat";
                    this.mUICeShareInMyGatCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
                    this.mUICeShareInMyGatCheckBox.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
                    this.mUICeShareInMyGatCheckBox.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUICeShareInMyGatCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUICeShareInGatCheckBox;
        
        private DXCheckBox mUICeShareInMyGatCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcEmployeesTable : DXGrid
    {
        
        public UIGcEmployeesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployees";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Ansattfilter");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnderssonEbbaCell
        {
            get
            {
                if ((this.mUIAnderssonEbbaCell == null))
                {
                    this.mUIAnderssonEbbaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeesGridControlCell[View]gvEmployees[Row]0[Column]colEmployeeName";
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonEbbaCell.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUIAnderssonEbbaCell;
            }
        }
        
        public DXCell UIBurmanJensCell
        {
            get
            {
                if ((this.mUIBurmanJensCell == null))
                {
                    this.mUIBurmanJensCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeesGridControlCell[View]gvEmployees[Row]1[Column]colEmployeeName";
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBurmanJensCell.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUIBurmanJensCell;
            }
        }
        
        public DXCell UIHaagAnnaCell
        {
            get
            {
                if ((this.mUIHaagAnnaCell == null))
                {
                    this.mUIHaagAnnaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeesGridControlCell[View]gvEmployees[Row]2[Column]colEmployeeName";
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHaagAnnaCell.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUIHaagAnnaCell;
            }
        }
        
        public DXCell UIHellnerMarcusCell
        {
            get
            {
                if ((this.mUIHellnerMarcusCell == null))
                {
                    this.mUIHellnerMarcusCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcEmployeesGridControlCell[View]gvEmployees[Row]3[Column]colEmployeeName";
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHellnerMarcusCell.WindowTitles.Add("Ansattfilter");
                    #endregion
                }
                return this.mUIHellnerMarcusCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnderssonEbbaCell;
        
        private DXCell mUIBurmanJensCell;
        
        private DXCell mUIHaagAnnaCell;
        
        private DXCell mUIHellnerMarcusCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILeggtilansattWindow : DXWindow
    {
        
        public UILeggtilansattWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Legg til ansatt";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Legg til ansatt");
            #endregion
        }
        
        #region Properties
        public UIPnlContentsClient UIPnlContentsClient
        {
            get
            {
                if ((this.mUIPnlContentsClient == null))
                {
                    this.mUIPnlContentsClient = new UIPnlContentsClient(this);
                }
                return this.mUIPnlContentsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlContentsClient mUIPnlContentsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlContentsClient : DXTestControl
    {
        
        public UIPnlContentsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlContents";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatt");
            #endregion
        }
        
        #region Properties
        public UIPnlEmploymentSelectiClient UIPnlEmploymentSelectiClient
        {
            get
            {
                if ((this.mUIPnlEmploymentSelectiClient == null))
                {
                    this.mUIPnlEmploymentSelectiClient = new UIPnlEmploymentSelectiClient(this);
                }
                return this.mUIPnlEmploymentSelectiClient;
            }
        }
        
        public UIGcSelectEmploymentsTable UIGcSelectEmploymentsTable
        {
            get
            {
                if ((this.mUIGcSelectEmploymentsTable == null))
                {
                    this.mUIGcSelectEmploymentsTable = new UIGcSelectEmploymentsTable(this);
                }
                return this.mUIGcSelectEmploymentsTable;
            }
        }
        
        public UIPnlBottomClient UIPnlBottomClient
        {
            get
            {
                if ((this.mUIPnlBottomClient == null))
                {
                    this.mUIPnlBottomClient = new UIPnlBottomClient(this);
                }
                return this.mUIPnlBottomClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlEmploymentSelectiClient mUIPnlEmploymentSelectiClient;
        
        private UIGcSelectEmploymentsTable mUIGcSelectEmploymentsTable;
        
        private UIPnlBottomClient mUIPnlBottomClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlEmploymentSelectiClient : DXTestControl
    {
        
        public UIPnlEmploymentSelectiClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlEmploymentSelection";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatt");
            #endregion
        }
        
        #region Properties
        public DXCheckBox UICeIncludeEmployeesEnCheckBox
        {
            get
            {
                if ((this.mUICeIncludeEmployeesEnCheckBox == null))
                {
                    this.mUICeIncludeEmployeesEnCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUICeIncludeEmployeesEnCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ceIncludeEmployeesEnded";
                    this.mUICeIncludeEmployeesEnCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
                    this.mUICeIncludeEmployeesEnCheckBox.WindowTitles.Add("Legg til ansatt");
                    #endregion
                }
                return this.mUICeIncludeEmployeesEnCheckBox;
            }
        }
        
        public UITleDepartmentLookUpEdit UITleDepartmentLookUpEdit
        {
            get
            {
                if ((this.mUITleDepartmentLookUpEdit == null))
                {
                    this.mUITleDepartmentLookUpEdit = new UITleDepartmentLookUpEdit(this);
                }
                return this.mUITleDepartmentLookUpEdit;
            }
        }
        
        public DXCheckBox UICeIncludeEmployeesNoCheckBox
        {
            get
            {
                if ((this.mUICeIncludeEmployeesNoCheckBox == null))
                {
                    this.mUICeIncludeEmployeesNoCheckBox = new DXCheckBox(this);
                    #region Search Criteria
                    this.mUICeIncludeEmployeesNoCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ceIncludeEmployeesNotStarted";
                    this.mUICeIncludeEmployeesNoCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
                    this.mUICeIncludeEmployeesNoCheckBox.WindowTitles.Add("Legg til ansatt");
                    #endregion
                }
                return this.mUICeIncludeEmployeesNoCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private DXCheckBox mUICeIncludeEmployeesEnCheckBox;
        
        private UITleDepartmentLookUpEdit mUITleDepartmentLookUpEdit;
        
        private DXCheckBox mUICeIncludeEmployeesNoCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITleDepartmentLookUpEdit : DXLookUpEdit
    {
        
        public UITleDepartmentLookUpEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tleDepartment";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListLookUpEdit";
            this.WindowTitles.Add("Legg til ansatt");
            #endregion
        }
        
        #region Properties
        public UITreeListLookUpEditPoWindow UITreeListLookUpEditPoWindow
        {
            get
            {
                if ((this.mUITreeListLookUpEditPoWindow == null))
                {
                    this.mUITreeListLookUpEditPoWindow = new UITreeListLookUpEditPoWindow(this);
                }
                return this.mUITreeListLookUpEditPoWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeListLookUpEditPoWindow mUITreeListLookUpEditPoWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeListLookUpEditPoWindow : DXWindow
    {
        
        public UITreeListLookUpEditPoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "tleDepartmentPopupForm";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListLookUpEditPopupForm";
            this.WindowTitles.Add("Legg til ansatt");
            #endregion
        }
        
        #region Properties
        public DXTreeList UITreeListLookUpEdit1TTreeList
        {
            get
            {
                if ((this.mUITreeListLookUpEdit1TTreeList == null))
                {
                    this.mUITreeListLookUpEdit1TTreeList = new DXTreeList(this);
                    #region Search Criteria
                    this.mUITreeListLookUpEdit1TTreeList.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListLookUpEdit1TreeList";
                    this.mUITreeListLookUpEdit1TTreeList.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
                    this.mUITreeListLookUpEdit1TTreeList.WindowTitles.Add("Legg til ansatt");
                    #endregion
                }
                return this.mUITreeListLookUpEdit1TTreeList;
            }
        }
        #endregion
        
        #region Fields
        private DXTreeList mUITreeListLookUpEdit1TTreeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcSelectEmploymentsTable : DXGrid
    {
        
        public UIGcSelectEmploymentsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSelectEmployments";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Legg til ansatt");
            #endregion
        }
        
        #region Properties
        public DXCell UIFalkHannaCell
        {
            get
            {
                if ((this.mUIFalkHannaCell == null))
                {
                    this.mUIFalkHannaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFalkHannaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSelectEmploymentsGridControlCell[View]gvSelectEmployments[Row]4[Column]colEmplo" +
                        "yeeName";
                    this.mUIFalkHannaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFalkHannaCell.WindowTitles.Add("Legg til ansatt");
                    #endregion
                }
                return this.mUIFalkHannaCell;
            }
        }
        
        public DXCell UIHalfarssonCalleCell
        {
            get
            {
                if ((this.mUIHalfarssonCalleCell == null))
                {
                    this.mUIHalfarssonCalleCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSelectEmploymentsGridControlCell[View]gvSelectEmployments[Row]7[Column]colEmplo" +
                        "yeeName";
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHalfarssonCalleCell.WindowTitles.Add("Legg til ansatt");
                    #endregion
                }
                return this.mUIHalfarssonCalleCell;
            }
        }
        
        public DXCell UIIngemarsdotterIdaCell
        {
            get
            {
                if ((this.mUIIngemarsdotterIdaCell == null))
                {
                    this.mUIIngemarsdotterIdaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIIngemarsdotterIdaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSelectEmploymentsGridControlCell[View]gvSelectEmployments[Row]9[Column]colEmplo" +
                        "yeeName";
                    this.mUIIngemarsdotterIdaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIngemarsdotterIdaCell.WindowTitles.Add("Legg til ansatt");
                    #endregion
                }
                return this.mUIIngemarsdotterIdaCell;
            }
        }
        
        public DXCell UIJonssonNiklasCell
        {
            get
            {
                if ((this.mUIJonssonNiklasCell == null))
                {
                    this.mUIJonssonNiklasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIJonssonNiklasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSelectEmploymentsGridControlCell[View]gvSelectEmployments[Row]10[Column]colEmpl" +
                        "oyeeName";
                    this.mUIJonssonNiklasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIJonssonNiklasCell.WindowTitles.Add("Legg til ansatt");
                    #endregion
                }
                return this.mUIJonssonNiklasCell;
            }
        }
        
        public DXCell UIPettersenPetraCell
        {
            get
            {
                if ((this.mUIPettersenPetraCell == null))
                {
                    this.mUIPettersenPetraCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSelectEmploymentsGridControlCell[View]gvSelectEmployments[Row]18[Column]colEmpl" +
                        "oyeeName";
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIPettersenPetraCell.WindowTitles.Add("Legg til ansatt");
                    #endregion
                }
                return this.mUIPettersenPetraCell;
            }
        }
        
        public DXCell UIElofssonPerCell
        {
            get
            {
                if ((this.mUIElofssonPerCell == null))
                {
                    this.mUIElofssonPerCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcSelectEmploymentsGridControlCell[View]gvSelectEmployments[Row]3[Column]colEmplo" +
                        "yeeName";
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIElofssonPerCell.WindowTitles.Add("Legg til ansatt");
                    #endregion
                }
                return this.mUIElofssonPerCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIFalkHannaCell;
        
        private DXCell mUIHalfarssonCalleCell;
        
        private DXCell mUIIngemarsdotterIdaCell;
        
        private DXCell mUIJonssonNiklasCell;
        
        private DXCell mUIPettersenPetraCell;
        
        private DXCell mUIElofssonPerCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlBottomClient : DXTestControl
    {
        
        public UIPnlBottomClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlBottom";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Legg til ansatt");
            #endregion
        }
        
        #region Properties
        public DXButton UILeggtilButton
        {
            get
            {
                if ((this.mUILeggtilButton == null))
                {
                    this.mUILeggtilButton = new DXButton(this);
                    #region Search Criteria
                    this.mUILeggtilButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btnOk";
                    this.mUILeggtilButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
                    this.mUILeggtilButton.WindowTitles.Add("Legg til ansatt");
                    #endregion
                }
                return this.mUILeggtilButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUILeggtilButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOverførtilleggWindow : DXWindow
    {
        
        public UIOverførtilleggWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Overfør tillegg";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Overfør tillegg");
            #endregion
        }
        
        #region Properties
        public UIGcExportsTable UIGcExportsTable
        {
            get
            {
                if ((this.mUIGcExportsTable == null))
                {
                    this.mUIGcExportsTable = new UIGcExportsTable(this);
                }
                return this.mUIGcExportsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcExportsTable mUIGcExportsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcExportsTable : DXGrid
    {
        
        public UIGcExportsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExports";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControl";
            this.WindowTitles.Add("Overfør tillegg");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnderssonEbbaCell
        {
            get
            {
                if ((this.mUIAnderssonEbbaCell == null))
                {
                    this.mUIAnderssonEbbaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]0[Column]colEmployee";
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonEbbaCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIAnderssonEbbaCell;
            }
        }
        
        public DXCell UIBrinkJörgenCell
        {
            get
            {
                if ((this.mUIBrinkJörgenCell == null))
                {
                    this.mUIBrinkJörgenCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]1[Column]colEmployee";
                    this.mUIBrinkJörgenCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBrinkJörgenCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIBrinkJörgenCell;
            }
        }
        
        public DXCell UIBurmanJensCell
        {
            get
            {
                if ((this.mUIBurmanJensCell == null))
                {
                    this.mUIBurmanJensCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]2[Column]colEmployee";
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBurmanJensCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIBurmanJensCell;
            }
        }
        
        public DXCell UIElofssonPerCell
        {
            get
            {
                if ((this.mUIElofssonPerCell == null))
                {
                    this.mUIElofssonPerCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]3[Column]colEmployee";
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIElofssonPerCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIElofssonPerCell;
            }
        }
        
        public DXCell UIFalkHannaCell
        {
            get
            {
                if ((this.mUIFalkHannaCell == null))
                {
                    this.mUIFalkHannaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFalkHannaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]4[Column]colEmployee";
                    this.mUIFalkHannaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFalkHannaCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIFalkHannaCell;
            }
        }
        
        public DXCell UIFredrikssonMathiasCell
        {
            get
            {
                if ((this.mUIFredrikssonMathiasCell == null))
                {
                    this.mUIFredrikssonMathiasCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]5[Column]colEmployee";
                    this.mUIFredrikssonMathiasCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIFredrikssonMathiasCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIFredrikssonMathiasCell;
            }
        }
        
        public DXCell UIHaagAnnaCell
        {
            get
            {
                if ((this.mUIHaagAnnaCell == null))
                {
                    this.mUIHaagAnnaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]6[Column]colEmployee";
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHaagAnnaCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIHaagAnnaCell;
            }
        }
        
        public DXCell UIHalfarssonCalleCell
        {
            get
            {
                if ((this.mUIHalfarssonCalleCell == null))
                {
                    this.mUIHalfarssonCalleCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]7[Column]colEmployee";
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHalfarssonCalleCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIHalfarssonCalleCell;
            }
        }
        
        public DXCell UIHellnerMarcusCell
        {
            get
            {
                if ((this.mUIHellnerMarcusCell == null))
                {
                    this.mUIHellnerMarcusCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]8[Column]colEmployee";
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHellnerMarcusCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIHellnerMarcusCell;
            }
        }
        
        public DXCell UIIngemarsdotterIdaCell
        {
            get
            {
                if ((this.mUIIngemarsdotterIdaCell == null))
                {
                    this.mUIIngemarsdotterIdaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIIngemarsdotterIdaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]9[Column]colEmployee";
                    this.mUIIngemarsdotterIdaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIngemarsdotterIdaCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIIngemarsdotterIdaCell;
            }
        }
        
        public DXCell UIPettersenPetraCell
        {
            get
            {
                if ((this.mUIPettersenPetraCell == null))
                {
                    this.mUIPettersenPetraCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]10[Column]colEmployee";
                    this.mUIPettersenPetraCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIPettersenPetraCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIPettersenPetraCell;
            }
        }
        
        public DXCell UIRosenquistRuthCell
        {
            get
            {
                if ((this.mUIRosenquistRuthCell == null))
                {
                    this.mUIRosenquistRuthCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIRosenquistRuthCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]11[Column]colEmployee";
                    this.mUIRosenquistRuthCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIRosenquistRuthCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUIRosenquistRuthCell;
            }
        }
        
        public DXCell UISvendsenSveinCell
        {
            get
            {
                if ((this.mUISvendsenSveinCell == null))
                {
                    this.mUISvendsenSveinCell = new DXCell(this);
                    #region Search Criteria
                    this.mUISvendsenSveinCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcExportsGridControlCell[View]gvExports[Row]12[Column]colEmployee";
                    this.mUISvendsenSveinCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUISvendsenSveinCell.WindowTitles.Add("Overfør tillegg");
                    #endregion
                }
                return this.mUISvendsenSveinCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnderssonEbbaCell;
        
        private DXCell mUIBrinkJörgenCell;
        
        private DXCell mUIBurmanJensCell;
        
        private DXCell mUIElofssonPerCell;
        
        private DXCell mUIFalkHannaCell;
        
        private DXCell mUIFredrikssonMathiasCell;
        
        private DXCell mUIHaagAnnaCell;
        
        private DXCell mUIHalfarssonCalleCell;
        
        private DXCell mUIHellnerMarcusCell;
        
        private DXCell mUIIngemarsdotterIdaCell;
        
        private DXCell mUIPettersenPetraCell;
        
        private DXCell mUIRosenquistRuthCell;
        
        private DXCell mUISvendsenSveinCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIverksetteWindow : DXWindow
    {
        
        public UIIverksetteWindow()
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "Iverksette";
            this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Iverksette");
            #endregion
        }
        
        #region Properties
        public UIPnlResultClient UIPnlResultClient
        {
            get
            {
                if ((this.mUIPnlResultClient == null))
                {
                    this.mUIPnlResultClient = new UIPnlResultClient(this);
                }
                return this.mUIPnlResultClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlResultClient mUIPnlResultClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPnlResultClient : DXTestControl
    {
        
        public UIPnlResultClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlResult";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSPanelControl";
            this.WindowTitles.Add("Iverksette");
            #endregion
        }
        
        #region Properties
        public UIGsGridControlLinesTable UIGsGridControlLinesTable
        {
            get
            {
                if ((this.mUIGsGridControlLinesTable == null))
                {
                    this.mUIGsGridControlLinesTable = new UIGsGridControlLinesTable(this);
                }
                return this.mUIGsGridControlLinesTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGsGridControlLinesTable mUIGsGridControlLinesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGsGridControlLinesTable : DXGrid
    {
        
        public UIGsGridControlLinesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLines";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.WindowTitles.Add("Iverksette");
            #endregion
        }
        
        #region Properties
        public DXCell UIAnderssonEbbaCell
        {
            get
            {
                if ((this.mUIAnderssonEbbaCell == null))
                {
                    this.mUIAnderssonEbbaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]0[Column]clmName";
                    this.mUIAnderssonEbbaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIAnderssonEbbaCell.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIAnderssonEbbaCell;
            }
        }
        
        public DXCell UIBurmanJensCell
        {
            get
            {
                if ((this.mUIBurmanJensCell == null))
                {
                    this.mUIBurmanJensCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]1[Column]clmName";
                    this.mUIBurmanJensCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIBurmanJensCell.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIBurmanJensCell;
            }
        }
        
        public DXCell UIHaagAnnaCell
        {
            get
            {
                if ((this.mUIHaagAnnaCell == null))
                {
                    this.mUIHaagAnnaCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]2[Column]clmName";
                    this.mUIHaagAnnaCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHaagAnnaCell.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIHaagAnnaCell;
            }
        }
        
        public DXCell UIHellnerMarcusCell
        {
            get
            {
                if ((this.mUIHellnerMarcusCell == null))
                {
                    this.mUIHellnerMarcusCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]3[Column]clmName";
                    this.mUIHellnerMarcusCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHellnerMarcusCell.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIHellnerMarcusCell;
            }
        }
        
        public DXCell UIIkkevalgtCell
        {
            get
            {
                if ((this.mUIIkkevalgtCell == null))
                {
                    this.mUIIkkevalgtCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIIkkevalgtCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]0[Column]clmPeriodWarning";
                    this.mUIIkkevalgtCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIkkevalgtCell.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIIkkevalgtCell;
            }
        }
        
        public DXCell UIIkkevalgtCell1
        {
            get
            {
                if ((this.mUIIkkevalgtCell1 == null))
                {
                    this.mUIIkkevalgtCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIIkkevalgtCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]2[Column]clmPeriodWarning";
                    this.mUIIkkevalgtCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIkkevalgtCell1.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIIkkevalgtCell1;
            }
        }
        
        public DXCell UIIkkevalgtCell2
        {
            get
            {
                if ((this.mUIIkkevalgtCell2 == null))
                {
                    this.mUIIkkevalgtCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIIkkevalgtCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]6[Column]clmPeriodWarning";
                    this.mUIIkkevalgtCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIkkevalgtCell2.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIIkkevalgtCell2;
            }
        }
        
        public DXCell UIIkkevalgtCell3
        {
            get
            {
                if ((this.mUIIkkevalgtCell3 == null))
                {
                    this.mUIIkkevalgtCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIIkkevalgtCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]8[Column]clmPeriodWarning";
                    this.mUIIkkevalgtCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIIkkevalgtCell3.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIIkkevalgtCell3;
            }
        }
        
        public DXCell UIHaagAnnaCell1
        {
            get
            {
                if ((this.mUIHaagAnnaCell1 == null))
                {
                    this.mUIHaagAnnaCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIHaagAnnaCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]6[Column]clmName";
                    this.mUIHaagAnnaCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHaagAnnaCell1.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIHaagAnnaCell1;
            }
        }
        
        public DXCell UIHellnerMarcusCell1
        {
            get
            {
                if ((this.mUIHellnerMarcusCell1 == null))
                {
                    this.mUIHellnerMarcusCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIHellnerMarcusCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]8[Column]clmName";
                    this.mUIHellnerMarcusCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHellnerMarcusCell1.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIHellnerMarcusCell1;
            }
        }
        
        public DXCell UIItem0101202411022024Cell
        {
            get
            {
                if ((this.mUIItem0101202411022024Cell == null))
                {
                    this.mUIItem0101202411022024Cell = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0101202411022024Cell.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]0[Column]clmLatest";
                    this.mUIItem0101202411022024Cell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0101202411022024Cell.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIItem0101202411022024Cell;
            }
        }
        
        public DXCell UIItem0101202411022024Cell1
        {
            get
            {
                if ((this.mUIItem0101202411022024Cell1 == null))
                {
                    this.mUIItem0101202411022024Cell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0101202411022024Cell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]2[Column]clmLatest";
                    this.mUIItem0101202411022024Cell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0101202411022024Cell1.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIItem0101202411022024Cell1;
            }
        }
        
        public DXCell UIItem0101202411022024Cell2
        {
            get
            {
                if ((this.mUIItem0101202411022024Cell2 == null))
                {
                    this.mUIItem0101202411022024Cell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0101202411022024Cell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]6[Column]clmLatest";
                    this.mUIItem0101202411022024Cell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0101202411022024Cell2.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIItem0101202411022024Cell2;
            }
        }
        
        public DXCell UIItem0101202411022024Cell3
        {
            get
            {
                if ((this.mUIItem0101202411022024Cell3 == null))
                {
                    this.mUIItem0101202411022024Cell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIItem0101202411022024Cell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]8[Column]clmLatest";
                    this.mUIItem0101202411022024Cell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIItem0101202411022024Cell3.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIItem0101202411022024Cell3;
            }
        }
        
        public DXCell UIGruppeBlåCell
        {
            get
            {
                if ((this.mUIGruppeBlåCell == null))
                {
                    this.mUIGruppeBlåCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIGruppeBlåCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]0[Column]clmGroup";
                    this.mUIGruppeBlåCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGruppeBlåCell.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIGruppeBlåCell;
            }
        }
        
        public DXCell UIGruppeBlåCell1
        {
            get
            {
                if ((this.mUIGruppeBlåCell1 == null))
                {
                    this.mUIGruppeBlåCell1 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGruppeBlåCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]2[Column]clmGroup";
                    this.mUIGruppeBlåCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGruppeBlåCell1.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIGruppeBlåCell1;
            }
        }
        
        public DXCell UIGruppeBlåCell2
        {
            get
            {
                if ((this.mUIGruppeBlåCell2 == null))
                {
                    this.mUIGruppeBlåCell2 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGruppeBlåCell2.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]6[Column]clmGroup";
                    this.mUIGruppeBlåCell2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGruppeBlåCell2.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIGruppeBlåCell2;
            }
        }
        
        public DXCell UIGruppeBlåCell3
        {
            get
            {
                if ((this.mUIGruppeBlåCell3 == null))
                {
                    this.mUIGruppeBlåCell3 = new DXCell(this);
                    #region Search Criteria
                    this.mUIGruppeBlåCell3.SearchProperties[DXTestControl.PropertyNames.Name] = "gsGridControlLinesGridControlCell[View]gvPersons[Row]8[Column]clmGroup";
                    this.mUIGruppeBlåCell3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIGruppeBlåCell3.WindowTitles.Add("Iverksette");
                    #endregion
                }
                return this.mUIGruppeBlåCell3;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIAnderssonEbbaCell;
        
        private DXCell mUIBurmanJensCell;
        
        private DXCell mUIHaagAnnaCell;
        
        private DXCell mUIHellnerMarcusCell;
        
        private DXCell mUIIkkevalgtCell;
        
        private DXCell mUIIkkevalgtCell1;
        
        private DXCell mUIIkkevalgtCell2;
        
        private DXCell mUIIkkevalgtCell3;
        
        private DXCell mUIHaagAnnaCell1;
        
        private DXCell mUIHellnerMarcusCell1;
        
        private DXCell mUIItem0101202411022024Cell;
        
        private DXCell mUIItem0101202411022024Cell1;
        
        private DXCell mUIItem0101202411022024Cell2;
        
        private DXCell mUIItem0101202411022024Cell3;
        
        private DXCell mUIGruppeBlåCell;
        
        private DXCell mUIGruppeBlåCell1;
        
        private DXCell mUIGruppeBlåCell2;
        
        private DXCell mUIGruppeBlåCell3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGatWindow : WinWindow
    {
        
        public UIGatWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gat";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfrmMain";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIViewHostCustom UIViewHostCustom
        {
            get
            {
                if ((this.mUIViewHostCustom == null))
                {
                    this.mUIViewHostCustom = new UIViewHostCustom(this);
                }
                return this.mUIViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIViewHostCustom mUIViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIViewHostCustom : DXTestControl
    {
        
        public UIViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ViewHost";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ViewHost";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIPcViewClient3 UIPcViewClient
        {
            get
            {
                if ((this.mUIPcViewClient == null))
                {
                    this.mUIPcViewClient = new UIPcViewClient3(this);
                }
                return this.mUIPcViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPcViewClient3 mUIPcViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPcViewClient3 : DXTestControl
    {
        
        public UIPcViewClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcView";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRibbonControlRibbon UIRibbonControlRibbon
        {
            get
            {
                if ((this.mUIRibbonControlRibbon == null))
                {
                    this.mUIRibbonControlRibbon = new UIRibbonControlRibbon(this);
                }
                return this.mUIRibbonControlRibbon;
            }
        }
        
        public UICenterPanelDayDockPanel UICenterPanelDayDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayDockPanel == null))
                {
                    this.mUICenterPanelDayDockPanel = new UICenterPanelDayDockPanel(this);
                }
                return this.mUICenterPanelDayDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonControlRibbon mUIRibbonControlRibbon;
        
        private UICenterPanelDayDockPanel mUICenterPanelDayDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonControlRibbon : DXRibbon
    {
        
        public UIRibbonControlRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRpMainMenuRibbonPage UIRpMainMenuRibbonPage
        {
            get
            {
                if ((this.mUIRpMainMenuRibbonPage == null))
                {
                    this.mUIRpMainMenuRibbonPage = new UIRpMainMenuRibbonPage(this);
                }
                return this.mUIRpMainMenuRibbonPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRpMainMenuRibbonPage mUIRpMainMenuRibbonPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpMainMenuRibbonPage : DXRibbonPage
    {
        
        public UIRpMainMenuRibbonPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpMainMenu";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRpgEmployeeFilterRibbonPageGroup1 UIRpgEmployeeFilterRibbonPageGroup
        {
            get
            {
                if ((this.mUIRpgEmployeeFilterRibbonPageGroup == null))
                {
                    this.mUIRpgEmployeeFilterRibbonPageGroup = new UIRpgEmployeeFilterRibbonPageGroup1(this);
                }
                return this.mUIRpgEmployeeFilterRibbonPageGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIRpgEmployeeFilterRibbonPageGroup1 mUIRpgEmployeeFilterRibbonPageGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRpgEmployeeFilterRibbonPageGroup1 : DXRibbonPageGroup
    {
        
        public UIRpgEmployeeFilterRibbonPageGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgEmployeeFilter";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIRibbonGalleryBarItemRibbonGallery3 UIRibbonGalleryBarItemRibbonGallery
        {
            get
            {
                if ((this.mUIRibbonGalleryBarItemRibbonGallery == null))
                {
                    this.mUIRibbonGalleryBarItemRibbonGallery = new UIRibbonGalleryBarItemRibbonGallery3(this);
                }
                return this.mUIRibbonGalleryBarItemRibbonGallery;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonGalleryBarItemRibbonGallery3 mUIRibbonGalleryBarItemRibbonGallery;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRibbonGalleryBarItemRibbonGallery3 : DXTestControl
    {
        
        public UIRibbonGalleryBarItemRibbonGallery3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "RibbonGalleryBarItemLink[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonGallery";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXButton UIRibbonGalleryDropDowButton
        {
            get
            {
                if ((this.mUIRibbonGalleryDropDowButton == null))
                {
                    this.mUIRibbonGalleryDropDowButton = new DXButton(this);
                    #region Search Criteria
                    this.mUIRibbonGalleryDropDowButton.SearchProperties[DXTestControl.PropertyNames.Name] = "RibbonGalleryDropDownButton";
                    this.mUIRibbonGalleryDropDowButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonGalleryDropDownButton";
                    this.mUIRibbonGalleryDropDowButton.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIRibbonGalleryDropDowButton;
            }
        }
        #endregion
        
        #region Fields
        private DXButton mUIRibbonGalleryDropDowButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDay";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom : DXTestControl
    {
        
        public UIControlContainerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UICenterPanelDayWrappeDockPanel UICenterPanelDayWrappeDockPanel
        {
            get
            {
                if ((this.mUICenterPanelDayWrappeDockPanel == null))
                {
                    this.mUICenterPanelDayWrappeDockPanel = new UICenterPanelDayWrappeDockPanel(this);
                }
                return this.mUICenterPanelDayWrappeDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UICenterPanelDayWrappeDockPanel mUICenterPanelDayWrappeDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICenterPanelDayWrappeDockPanel : DXDockPanel
    {
        
        public UICenterPanelDayWrappeDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "CenterPanelDayWrapper";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIDag00167770770FalseDockPanel UIDag00167770770FalseDockPanel
        {
            get
            {
                if ((this.mUIDag00167770770FalseDockPanel == null))
                {
                    this.mUIDag00167770770FalseDockPanel = new UIDag00167770770FalseDockPanel(this);
                }
                return this.mUIDag00167770770FalseDockPanel;
            }
        }
        #endregion
        
        #region Fields
        private UIDag00167770770FalseDockPanel mUIDag00167770770FalseDockPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDag00167770770FalseDockPanel : DXDockPanel
    {
        
        public UIDag00167770770FalseDockPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;False";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "WorkScheduleDockPanel";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIControlContainerCustom1 UIControlContainerCustom
        {
            get
            {
                if ((this.mUIControlContainerCustom == null))
                {
                    this.mUIControlContainerCustom = new UIControlContainerCustom1(this);
                }
                return this.mUIControlContainerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIControlContainerCustom1 mUIControlContainerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIControlContainerCustom1 : DXTestControl
    {
        
        public UIControlContainerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = ";Dag;0;0;-16777077;0;FalseControlContainer[0]";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ControlContainer";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public UIGcDayColumnTable UIGcDayColumnTable
        {
            get
            {
                if ((this.mUIGcDayColumnTable == null))
                {
                    this.mUIGcDayColumnTable = new UIGcDayColumnTable(this);
                }
                return this.mUIGcDayColumnTable;
            }
        }
        #endregion
        
        #region Fields
        private UIGcDayColumnTable mUIGcDayColumnTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGcDayColumnTable : DXGrid
    {
        
        public UIGcDayColumnTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumn";
            this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GSGridControl";
            this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
            this.WindowTitles.Add("Gat");
            #endregion
        }
        
        #region Properties
        public DXCell UIElofssonPerCell
        {
            get
            {
                if ((this.mUIElofssonPerCell == null))
                {
                    this.mUIElofssonPerCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]0[Column]colEmployeeName";
                    this.mUIElofssonPerCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIElofssonPerCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIElofssonPerCell;
            }
        }
        
        public DXCell UIHalfarssonCalleCell
        {
            get
            {
                if ((this.mUIHalfarssonCalleCell == null))
                {
                    this.mUIHalfarssonCalleCell = new DXCell(this);
                    #region Search Criteria
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.Name] = "gcDayColumnGridControlCell[View]gvDayColumn[Row]1[Column]colEmployeeName";
                    this.mUIHalfarssonCalleCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GridControlCell";
                    this.mUIHalfarssonCalleCell.WindowTitles.Add("Gat");
                    #endregion
                }
                return this.mUIHalfarssonCalleCell;
            }
        }
        #endregion
        
        #region Fields
        private DXCell mUIElofssonPerCell;
        
        private DXCell mUIHalfarssonCalleCell;
        #endregion
    }
}
